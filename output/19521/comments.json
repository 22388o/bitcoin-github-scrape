[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658558618",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-658558618",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 658558618,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY1ODU1ODYxOA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-07-15T05:44:57Z",
    "updated_at": "2021-04-23T14:20:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21726 (Add prune blockers to BlockManager by fjahr)\n* #21584 (Fix assumeutxo crash due to invalid base_blockhash by MarcoFalke)\n* #20295 (rpc: getblockfrompeer by Sjors)\n* #17167 (Allow whitelisting outgoing connections by luke-jr)\n* #13462 (Make SER_GETHASH implicit for CHashWriter and SerializeHash by Empact)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/658558618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675143288",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675143288",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 675143288,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTE0MzI4OA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-17T22:18:57Z",
    "updated_at": "2020-08-17T22:18:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "@PierreRochard Thanks a lot for the comments! I am happy to include these values you requested and drafted that up in a new commit (will need another day for clean-up, docs, tests etc. but it should work already). I actually had done some [similar work](https://github.com/fjahr/bitcoin/commit/4d08663e5d2a4eeda06a408c3fef6361475d3ce6) already for my [blog post](https://fjahr.com/posts/where-are-the-coins/) and was thinking about adding some more numbers myself, just opted to keep the changeset small at the end.\r\n\r\nThe RPC now has the values for every block by passing a verbose flag `true` after the block indicator (example is testnet):\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo 'none' 1800003 true\r\n{\r\n  \"height\": 1800003,\r\n  \"bestblock\": \"00000000000005359e00fe3d069b2999baaaf4d69a34492e543f9f82047ddd01\",\r\n  \"txouts\": 23990594,\r\n  \"bogosize\": 1799579780,\r\n  \"disk_size\": 1341237413,\r\n  \"total_amount\": 20940531.15125810,\r\n  \"block_info\": {\r\n    \"unspendable_amount\": 0.00000000,\r\n    \"total_prevout_spent_amount\": 0.21428778,\r\n    \"total_new_outputs_ex_coinbase_amount\": 0.21428778,\r\n    \"coinbase_amount\": 0.19531250\r\n  }\r\n}\r\n```\r\n\r\nI just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block. They are per-block now but it is trivial to change that. Actually, I could even do both. And another questions: should the unspendable output values be included or excluded from the other output values. Example: `src/bitcoin-cli gettxoutsetinfo 'none' 0 true` shows `coinbase: 50.0` although that is unspendable. Same for the `total_new_outputs_ex_coinbase_amount` if there is an `OP_RETURN` for example. Just a question of the definition.\r\n\r\nAnd I saw your request for the data dump on twitter. Will look into that as a follow-up :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675143288/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675156917",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675156917",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 675156917,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTE1NjkxNw==",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?u=eab48576b7831944b8ce7f04fcdff4154a853d50&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-17T23:02:39Z",
    "updated_at": "2020-08-17T23:02:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nWould be nice to be able to see the `total_unspendable_amount` up to that current block.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675156917/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 1,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675319765",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675319765",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 675319765,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3NTMxOTc2NQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-18T07:52:02Z",
    "updated_at": "2020-08-18T07:52:02Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/675319765/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677958519",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677958519",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 677958519,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzk1ODUxOQ==",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?u=b01d3339e84633808b268c93a82c7af1b4229b7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-20T23:39:24Z",
    "updated_at": "2020-08-20T23:39:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "`values to be cumulative or per-block`\r\n\r\nI find it easier to do the cumulative sum in pandas than to back in to the per-block, but the answer also depends on the performance of the underlying index for aggregate queries. If this behaves like a SQL database and we want it to be normalized, it should be per-block, but I'm not religious about it.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677958519/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677973339",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677973339",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 677973339,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzk3MzMzOQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-21T00:33:09Z",
    "updated_at": "2020-08-21T00:33:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "@PierreRochard Thanks for testing and further feedback. As I have written the tests today and did further cleanup I have found that I hadn't been really doing what you were looking for in the coinbase_amount. I was simply returning the block subsidy there. \r\n\r\nI am pushing my fixes and test as a separate commit for now since you were already testing with the first version:\r\n- Adds `total_unspendable_amount`, the cumulative number as requested\r\n- Tests for different unspendables (except BIP30 because that is pretty hard to test)\r\n- Cleans up internal naming and removes some indirections that caused bugs in some scenarios (removes `total_in` and `total_out` for example)\r\n\r\nI think the formula in `block_sanity_check` in the test is what should hold for each block and that is how you intended it, correct?\r\n```\r\n    assert_equal(\r\n        block_info['total_prevout_spent_amount'] + block_subsidy,\r\n        block_info['total_new_outputs_ex_coinbase_amount'] + block_info['coinbase_amount'] + block_info['unspendable_amount']\r\n    )\r\n```\r\n\r\nI think the new code also fixes the BIP30 issue you discovered but I am still syncing the new version of the index with not-super-fast hardware so I will be able to check tomorrow.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677973339/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677997938",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677997938",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 677997938,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3Nzk5NzkzOA==",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?u=b01d3339e84633808b268c93a82c7af1b4229b7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-21T02:09:45Z",
    "updated_at": "2020-08-21T02:09:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Yes, perfect, that equation is exactly right. I'll just delete the coinstats index file for now but does this indexing system have versioning/migrations? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/677997938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678043934",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678043934",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 678043934,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODA0MzkzNA==",
    "user": {
      "login": "benthecarman",
      "id": 15256660,
      "node_id": "MDQ6VXNlcjE1MjU2NjYw",
      "avatar_url": "https://avatars.githubusercontent.com/u/15256660?u=eab48576b7831944b8ce7f04fcdff4154a853d50&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/benthecarman",
      "html_url": "https://github.com/benthecarman",
      "followers_url": "https://api.github.com/users/benthecarman/followers",
      "following_url": "https://api.github.com/users/benthecarman/following{/other_user}",
      "gists_url": "https://api.github.com/users/benthecarman/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/benthecarman/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
      "organizations_url": "https://api.github.com/users/benthecarman/orgs",
      "repos_url": "https://api.github.com/users/benthecarman/repos",
      "events_url": "https://api.github.com/users/benthecarman/events{/privacy}",
      "received_events_url": "https://api.github.com/users/benthecarman/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-21T05:19:26Z",
    "updated_at": "2020-08-21T05:19:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "From testnet:\r\n\r\n```\r\ngettxoutsetinfo  none 1807942 true\r\n{\r\n  \"height\": 1807942,\r\n  \"bestblock\": \"00000000374715d95667998b720a60bf8241182b279c913573f5e9e3fa54ba00\",\r\n  \"txouts\": 24100924,\r\n  \"bogosize\": 1807675952,\r\n  \"disk_size\": 1318392833,\r\n  \"total_amount\": 20942081.72908999,\r\n  \"total_unspendable_amount\": 875.88809751,\r\n  \"block_info\": {\r\n    \"unspendable_amount\": 0.00000000,\r\n    \"total_prevout_spent_amount\": 16798.39641164,\r\n    \"total_new_outputs_ex_coinbase_amount\": 16798.36929066,\r\n    \"coinbase_amount\": 0.22243348\r\n  }\r\n}\r\n\r\n```\r\n\r\nLooking good!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678043934/reactions",
      "total_count": 4,
      "+1": 4,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678263874",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678263874",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 678263874,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODI2Mzg3NA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-21T12:26:00Z",
    "updated_at": "2020-08-21T12:26:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Yes, perfect, that equation is exactly right. I'll just delete the coinstats index file for now but does this indexing system have versioning/migrations?\r\n\r\nGreat! There is only a different kind of migration for txindex because it was around before the whole `BaseIndex` class was introduced. It is something that I have been thinking about already because I will add the UTXO set hash at some point. I am still figuring out what would work best for Coinstats but also other indexes in general, so for now the index needs to be deleted and resynced, unfortunately.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678263874/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678685225",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678685225",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 678685225,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3ODY4NTIyNQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-22T19:51:20Z",
    "updated_at": "2020-08-22T19:51:20Z",
    "author_association": "CONTRIBUTOR",
    "body": "Cleaned up the latest changes and tests in more coherent commits. This is ready for review now.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/678685225/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680409442",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-680409442",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 680409442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MDQwOTQ0Mg==",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?u=8aa4d0fd79dff5cf64a98205c78bc1c96b0bf4b6&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-26T01:39:49Z",
    "updated_at": "2020-08-26T01:39:49Z",
    "author_association": "MEMBER",
    "body": "@fjahr \r\n\r\nI'm late to the party, but:\r\n\r\n> I just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block.\r\n\r\nIt is trivial to convert cumulative to per-block by simply taking `value(block) - value(prevblock)`, but the other way requires iterating over all the blocks, so I think cumulative would be more useful.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/680409442/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681301264",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-681301264",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 681301264,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MTMwMTI2NA==",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?u=b01d3339e84633808b268c93a82c7af1b4229b7f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-27T02:14:39Z",
    "updated_at": "2020-08-27T02:14:39Z",
    "author_association": "CONTRIBUTOR",
    "body": "Would it be too verbose to split out unspendables by the 4 categories? I realize it is granular, but it would remove any ambiguity in the reconciliation.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/681301264/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682886060",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682886060",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 682886060,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4Mjg4NjA2MA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-28T16:53:48Z",
    "updated_at": "2020-08-28T16:53:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Would it be too verbose to split out unspendables by the 4 categories? I realize it is granular, but it would remove any ambiguity in the reconciliation.\r\n\r\nI think more verbose is not a problem itself unless it creates other problems, the only serious argument against it IMO would be if it ends up taking up too much disk space but the index is still pretty small and unless I change it to be accumulative numbers it should mostly be zeros anyway which should let the index only grow very little. I am just still thinking about if would really make sense to record all four categories because it is technically not possible that there will ever be another Genesis block or another BIP30 block, so recording these two values (even if it's just 0s) for every block forever seems kind of pointless in a way. But then if I leave them out it's annoying that it can't be a clean sum of all the categories to get the total unspendable. So, happy to do it but still struggling a bit with finding the right approach.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682886060/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682948466",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682948466",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 682948466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4Mjk0ODQ2Ng==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-28T17:14:16Z",
    "updated_at": "2020-08-28T17:14:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> @fjahr\r\n> \r\n> I'm late to the party, but:\r\n> \r\n> > I just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block.\r\n> \r\n> It is trivial to convert cumulative to per-block by simply taking `value(block) - value(prevblock)`, but the other way requires iterating over all the blocks, so I think cumulative would be more useful.\r\n\r\nTwo concept ACKs, I think you are still early :) And that is a good point. I think I will do the following then: I will record cumulative numbers on the index but also return the per-block numbers in the rpc by default using the prevblock numbers. Since I have written that comment I have thought a bit more about the casual (non-auditor) user who might just want to check on a specific block height and for them the per-block numbers are much more intuitive and I would like to avoid another situation where the users see the very large cumulative numbers and ask questions about what it means, if it's a bug etc.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682948466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682952026",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682952026",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 682952026,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4Mjk1MjAyNg==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-28T17:16:13Z",
    "updated_at": "2020-08-28T17:16:13Z",
    "author_association": "CONTRIBUTOR",
    "body": "Only rebased for now, will work on the suggested changes shortly.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/682952026/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683463535",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683463535",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 683463535,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQ2MzUzNQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-30T19:59:20Z",
    "updated_at": "2020-08-30T19:59:58Z",
    "author_association": "CONTRIBUTOR",
    "body": "> OTOH on a mainnet node, which has been running `txindex=1 peerbloomfilters=1 blockfilterindex=1` without issues, this PR crashed repeatedly:\r\n> \r\n> ```\r\n> 2020-08-30T16:32:25Z coinstatsindex thread start\r\n> 2020-08-30T16:32:25Z Syncing coinstatsindex with block chain from height 632589\r\n> 2020-08-30T16:32:26Z *** ThreadSync: Failed to write block 000000000000000000017ff124286aa9a7c80a353c11bd7bd81e8a4b467c2e34 to index database\r\n> 2020-08-30T16:32:26Z Error: A fatal internal error occurred, see debug.log for details\r\n> Error: A fatal internal error occurred, see debug.log for details\r\n> 2020-08-30T16:32:26Z coinstatsindex thread exit\r\n> ...\r\n> 2020-08-30T16:32:26Z Shutdown: In progress...\r\n> ...\r\n> 2020-08-30T16:32:26Z Shutdown: done\r\n> ```\r\n\r\nThanks for taking another look @jonatack . Maybe you had an older version of `coinstatsindex` running on that node before? You need to delete the folder and fully resync in that case. I have not taken care of a migration mechanism yet. That could explain such crashes.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683463535/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683464648",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683464648",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 683464648,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQ2NDY0OA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-30T20:09:04Z",
    "updated_at": "2020-08-30T20:09:04Z",
    "author_association": "MEMBER",
    "body": "> Thanks for taking another look @jonatack . Maybe you had an older version of `coinstatsindex` running on that node before? You need to delete the folder and fully resync in that case. I have not taken care of a migration mechanism yet. That could explain such crashes.\r\n\r\nThanks @fjahr, that could explain it; I tested building the index with #18000 and only on mainnet.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683464648/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683466314",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683466314",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 683466314,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4MzQ2NjMxNA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-30T20:23:26Z",
    "updated_at": "2020-08-30T20:24:22Z",
    "author_association": "MEMBER",
    "body": "Yup, all good now.\r\n```\r\nrm -rf ~/.bitcoin/indexes/coinstats\r\n```\r\n```\r\n2020-08-30T20:17:32Z coinstatsindex thread start\r\n2020-08-30T20:17:32Z Syncing coinstatsindex with block chain from height 0\r\n...\r\n2020-08-30T20:21:09Z Syncing coinstatsindex with block chain from height 150291\r\n2020-08-30T20:21:40Z Syncing coinstatsindex with block chain from height 172129\r\n2020-08-30T20:22:11Z Syncing coinstatsindex with block chain from height 183549\r\n2020-08-30T20:22:42Z Syncing coinstatsindex with block chain from height 190364\r\n```\r\n```\r\n$ ./src/bitcoin-cli getindexinfo\r\n{\r\n  \"txindex\": {\r\n    \"synced\": true,\r\n    \"best_block_height\": 646031\r\n  },\r\n  \"coinstatsindex\": {\r\n    \"synced\": false,\r\n    \"best_block_height\": 203567\r\n  },\r\n  \"basic block filter index\": {\r\n    \"synced\": true,\r\n    \"best_block_height\": 646031\r\n  }\r\n}\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/683466314/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692363789",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-692363789",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 692363789,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY5MjM2Mzc4OQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-14T23:03:45Z",
    "updated_at": "2020-09-14T23:05:59Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for all the feedback, reviewers! I pushed a big update which should address all of the feedback from the past couple of weeks. If I missed something, please let me know:\r\n- Now saving cumulative values in the index. The PRC still returns the per-block values by subtracting the values from the prev block.\r\n- Unspendables are tracked in the four separate categories.\r\n- Addressed feedback by @jonatack \r\n- Addressed feedback by @Sjors . Most importantly removed `disk_size` from the index and only returning it if the index is not used. This also led me to revert the change removing `transactions` because I could deal with it the exact same way and that meant keeping it in place now felt like the more sensible move.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/692363789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734002395",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-734002395",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 734002395,
    "node_id": "MDEyOklzc3VlQ29tbWVudDczNDAwMjM5NQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-11-26T00:13:11Z",
    "updated_at": "2020-11-26T00:13:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "@Sjors Thanks for the review and sorry for the long wait. I improved the error message as well, as you suggested. But I am a bit hesitant about flipping the arguments because the `hash_type` is relevant to both users running the index and those that don't run the index and `hash_or_height` is only for those that run the index. But maybe there is an elegant solution to that that I am not seeing :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/734002395/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766085820",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-766085820",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 766085820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NjA4NTgyMA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-23T14:14:43Z",
    "updated_at": "2021-01-23T14:14:43Z",
    "author_association": "MEMBER",
    "body": "Would love to see some progress here...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/766085820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767151349",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-767151349",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 767151349,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc2NzE1MTM0OQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-01-25T22:20:11Z",
    "updated_at": "2021-01-25T22:20:11Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Would love to see some progress here...\r\n\r\nYes, thanks for the nudge. However, since #19055 is merged now and reviewing power seems to be particularly scarce at the moment, I think it makes more sense to focus on getting #19145 in (which is comparatively small and easy-ish to review) and then reopen this here as a follow-up with the UTXO set hash included again also taking in your feedback @Sjors . I think this will be more intuitive for reviewers than keeping this and then adding the hash as a follow-up, the current approach made sense because it was unclear how long #19055 would take. I am working on getting that ready and will put this PR here in draft mode until it's ready, to avoid confusion.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767151349/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/782060948",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-782060948",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 782060948,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjA2MDk0OA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-19T13:03:21Z",
    "updated_at": "2021-02-19T13:03:21Z",
    "author_association": "MEMBER",
    "body": "#19055 is merged, rebase time? ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/782060948/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/782971620",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-782971620",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 782971620,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4Mjk3MTYyMA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-02-22T00:53:42Z",
    "updated_at": "2021-02-22T00:53:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "> #19055 is merged, rebase time?\r\n\r\nDone, and I have made several changes based on feedback. But there are still a few comments I haven't addressed yet or still need to test.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/782971620/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787552191",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-787552191",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 787552191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc4NzU1MjE5MQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-01T00:08:37Z",
    "updated_at": "2021-03-01T00:08:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks for your comments @Sjors ! I think I have addressed all except for the reorg test but I am working on that one.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/787552191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790122850",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790122850",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 790122850,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDEyMjg1MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-03T22:38:03Z",
    "updated_at": "2021-03-03T22:38:03Z",
    "author_association": "MEMBER",
    "body": "Thanks for your persistance on this @fjahr. Will review soon.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790122850/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790197840",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790197840",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 790197840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDE5Nzg0MA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T00:56:03Z",
    "updated_at": "2021-03-04T00:56:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed several comments by @Sjors and @MarcoFalke . Thanks for reviewing \ud83d\ude4f \r\n\r\n> How do we process the genesis block?\r\n\r\n(for some reason GH doesn't let me comment on this) The Genesis block is explicitly skipped in `WriteBlock`.\r\n\r\n> [c3488a4](https://github.com/bitcoin/bitcoin/commit/c3488a426f7ef71e45143e4bd797d06332bd5287) is getting very close\r\n> \r\n> `rpc_help.py` complains:\r\n> \r\n> ```\r\n> RPC server named arguments mismatch!\r\n> {('gettxoutsetinfo', 2, 'no_index')}\r\n> ```\r\n> \r\n> Probably because you need to add ` { \"gettxoutsetinfo\", 2, \"no_index\" }` to `client.cpp`.\r\n\r\nYepp, fixed.\r\n\r\n> \r\n> The [error I found last week](https://github.com/bitcoin/bitcoin/pull/19521#pullrequestreview-596324632) is gone now.\r\n> \r\n> > a bug when you restart the node during the indexing process. E.g. `txouts` and `bogosize` seem to get reset and can even turn negative.\r\n> \r\n> This has also been fixed now.\r\n> \r\n> The \"To be discussed\" section in the PR description can be dropped now.\r\n> \r\n> MuHash at height 670,000: `b1567b5e632bd67e72e056711fd644945ed9abcae5c28bf4750e4a10c567112a`\r\n> hash_serialized_2 at height 672702: `0aafad4ae3a9e8b9c9f97a6b9e16e19e0c24bfc5543470436f365e0b1edec222`, but with `no_index` and on master it's `b5177c4bd0df0195c8e8877c33f973b740bf148301c8662eca94cf0b3385f210`.\r\n> bogo_size at height 672702: `5466711713` (matches no_index and master)\r\n\r\nI had inserted the MuHash insert line above the line that skips unspendable outputs, so they were added to the hash, that's why they must have been inconsistent. I haven't yet synced with the new code, will test tomorrow.\r\n\r\nI think the hash_serialized call with a specific height shouldn't work since it's incompatible with the index, so I added that.\r\n\r\n> \r\n> When I did `src/bitcoin-cli gettxoutsetinfo muhash 670000 true`, when my tip was further, it returned a muhash that appears to be nonsense. It should error instead.\r\n> \r\n> Other reviewers, see also my [list of interesting blocks](https://github.com/bitcoin/bitcoin/pull/19521#pullrequestreview-505535088) above. When testing the tip, it helps to call `setnetworkactive false` so it doesn't move between calls.\r\n> \r\n> I'd still like to know what happens when a `valid-fork` chaintip has two or more blocks. Unfortunately I don't have any on my node: `bitcoin-cli getchaintips | jq '.[] | select(.status == \"valid-fork\")'`. My node did see a 2 block fork at height 656,478, but it only has the headers. I could use #20295 to fetch the block if it's still out there. In order for the indexer to pick it up, I guess it has to be validated? So that would require a long rollback. So anyway, a test would be easier.\r\n> \r\n> Regarding the error I saw with `645179` when asking for the hash of a stale block, this makes sense now: you only create a block hash based entry _during_ a reorg, but it's not done for all the stale blocks the node already has. This is probably a general issue with the indexes system, and not worth addressing here imo.\r\n> \r\n> Bonus tip for other reviewers, if you want to drink tea while the index builds, try @dongcarl's [yo](https://apps.apple.com/ua/app/yo-terminal-notifications/id1542496070):\r\n> `while (src/bitcoin-cli getindexinfo | jq '.coinstatsindex.synced' | grep \"false\"); do sleep 60; done; yo`\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790197840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790577414",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790577414",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 790577414,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDU3NzQxNA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T12:18:50Z",
    "updated_at": "2021-03-04T12:18:50Z",
    "author_association": "MEMBER",
    "body": ">> How do we process the genesis block?\r\n\r\n> The Genesis block is explicitly skipped in WriteBlock.\r\n\r\nBut then why isn't the result of `src/bitcoin-cli gettxoutsetinfo muhash 0` all zeros? Yet it contains a value for muhash and `unspendables->genesis_block` is 50. Where does that get set?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790577414/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790876793",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790876793",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 790876793,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MDg3Njc5Mw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-04T19:37:37Z",
    "updated_at": "2021-03-04T19:37:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "> > > How do we process the genesis block?\r\n> \r\n> > The Genesis block is explicitly skipped in WriteBlock.\r\n> \r\n> But then why isn't the result of `src/bitcoin-cli gettxoutsetinfo muhash 0` all zeros? Yet it contains a value for muhash and `unspendables->genesis_block` is 50. Where does that get set?\r\n\r\nWe skip almost all the processing of the genesis block in `WriteBlock()` from this line: https://github.com/bitcoin/bitcoin/pull/19521/files#diff-f1b8261031c7f062025f97106824d80601e5247ba0b68ffe608285eeaecceed2R112\r\n```\r\nif (pindex->nHeight > 0) {\r\n```\r\n\r\nBut there is also an else block belonging to that if ~80 lines later, that's where these values are set: https://github.com/bitcoin/bitcoin/pull/19521/files#diff-f1b8261031c7f062025f97106824d80601e5247ba0b68ffe608285eeaecceed2R188\r\n```\r\n    } else {\r\n        m_block_unspendable_amount += block_subsidy;\r\n        m_unspendables_genesis_block += block_subsidy;\r\n    }\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/790876793/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/792117478",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-792117478",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 792117478,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MjExNzQ3OA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-06T23:34:14Z",
    "updated_at": "2021-03-06T23:34:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> But then why isn't the result of `src/bitcoin-cli gettxoutsetinfo muhash 0` all zeros?\r\n\r\nI realized I didn't answer that one yet. The internal state of the `MuHash3072` object is all zeros but that state gets finalized by hashing it with SHA256 so the uint256 output in the `gettxoutsetinfo` call is not all zeros anymore. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/792117478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/793641922",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-793641922",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 793641922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5MzY0MTkyMg==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-09T09:52:48Z",
    "updated_at": "2021-03-09T09:53:56Z",
    "author_association": "MEMBER",
    "body": "I think you lost 6b21ff9bf7 in the rebase? I think ffeb0af71f and 98ec2e5170 were moved to #21390.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/793641922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/796267017",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-796267017",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 796267017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NjI2NzAxNw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-10T23:02:18Z",
    "updated_at": "2021-03-10T23:02:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think you lost [6b21ff9](https://github.com/bitcoin/bitcoin/commit/6b21ff9bf7afca0cc25942fb49175b6bd7113e87) in the rebase? I think [ffeb0af](https://github.com/bitcoin/bitcoin/commit/ffeb0af71fc0e8e2eff5af54c4550dd5b96c9e23) and [98ec2e5](https://github.com/bitcoin/bitcoin/commit/98ec2e5170f41bd50cd6d6d89d386bbd44f79bcc) were moved to #21390.\r\n\r\nSorry, yes, I moved all three of them to #21390 but only commented on it here https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589733818 . The test changes were follow-ups to #19145 and the  doc improvements could also stand alone after I made some light edits so I followed @MarcoFalke 's recommendation there. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/796267017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/796625212",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-796625212",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 796625212,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NjYyNTIxMg==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-11T10:12:50Z",
    "updated_at": "2021-03-11T10:12:50Z",
    "author_association": "MEMBER",
    "body": "re-utACK fc3f9c0a0debe040971098c3edb1078c8679c54c",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/796625212/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797116798",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-797116798",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 797116798,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzExNjc5OA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-11T23:22:54Z",
    "updated_at": "2021-03-11T23:22:54Z",
    "author_association": "CONTRIBUTOR",
    "body": "rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797116798/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797819214",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-797819214",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 797819214,
    "node_id": "MDEyOklzc3VlQ29tbWVudDc5NzgxOTIxNA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-12T23:54:26Z",
    "updated_at": "2021-03-12T23:54:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed @fanquake s comment and used `std::make_unique`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/797819214/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800117128",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800117128",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 800117128,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDExNzEyOA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T09:56:38Z",
    "updated_at": "2021-03-16T09:56:38Z",
    "author_association": "MEMBER",
    "body": "re-ACK 9e746e8\r\nMuHash at height 674,863: `eca35832ffdac43638e849e818ae10db7d2ea53746c406e386e8139e0583a990` (matches `use_index=false`)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800117128/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800463219",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800463219",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 800463219,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDQ2MzIxOQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T17:30:18Z",
    "updated_at": "2021-03-16T17:30:18Z",
    "author_association": "MEMBER",
    "body": "Thanks for re-pushing @fjahr. Reviewing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800463219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800496273",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800496273",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 800496273,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDQ5NjI3Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T18:15:59Z",
    "updated_at": "2021-03-16T18:15:59Z",
    "author_association": "MEMBER",
    "body": "When building bf347106cd \"index: Coinstats index can be activated with command line flag\"\r\n\r\n```\r\nrpc/blockchain.cpp: In lambda function:\r\nrpc/blockchain.cpp:1092:13: error: \u2018g_coin_stats_index\u2019 was not declared in this scope\r\n 1092 |         if (g_coin_stats_index && (g_coin_stats_index->GetSummary().synced == false)) {\r\n      |             ^~~~~~~~~~~~~~~~~~\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800496273/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800677568",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800677568",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 800677568,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDY3NzU2OA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-16T23:23:19Z",
    "updated_at": "2021-03-16T23:23:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> When building [bf34710](https://github.com/bitcoin/bitcoin/commit/bf347106cd463ecc0d8ab3795b8d6e0805ebea65) \"index: Coinstats index can be activated with command line flag\"\r\n> \r\n> ```\r\n> rpc/blockchain.cpp: In lambda function:\r\n> rpc/blockchain.cpp:1092:13: error: \u2018g_coin_stats_index\u2019 was not declared in this scope\r\n>  1092 |         if (g_coin_stats_index && (g_coin_stats_index->GetSummary().synced == false)) {\r\n>       |             ^~~~~~~~~~~~~~~~~~\r\n> ```\r\n\r\nAh, that include was a bit late to the party, fixed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800677568/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800719573",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800719573",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 800719573,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMDcxOTU3Mw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-17T01:15:00Z",
    "updated_at": "2021-03-17T01:15:00Z",
    "author_association": "MEMBER",
    "body": "Thanks @fjahr! resolved in the latest push; moving forward, `test/functional/feature_coinstatsindex.py` fails at commit 540428a2c7\r\n\r\n<details><summary>test output x 3</summary><p>\r\n\r\n```\r\n((HEAD detached at 540428a2c7))$ src/test/test_bitcoin -t coinstatsindex_tests ; test/functional/feature_coinstatsindex.py\r\nRunning 1 test case...\r\n\r\n*** No errors detected\r\n\r\n2021-03-17T01:07:46.879000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_inxlkokp\r\n2021-03-17T01:07:56.135000Z TestFramework (INFO): Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\r\n2021-03-17T01:07:56.744000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 128, in main\r\n    self.run_test()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/feature_coinstatsindex.py\", line 33, in run_test\r\n    self._test_coin_stats_index()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/feature_coinstatsindex.py\", line 62, in _test_coin_stats_index\r\n    assert_equal(res1, res0)\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/util.py\", line 50, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not({'height': 102, 'bestblock': '7471357854133661aaa6d50eba11ec46c3322e299c5b6907885351551005f771', 'txouts': 103, 'bogosize': 7722, 'total_amount': Decimal('5100.00000000'), 'total_unspendable_amount': Decimal('50.00000000'), 'block_info': {'prevout_spent': Decimal('50.00000000'), 'coinbase': Decimal('50.00004440'), 'new_outputs_ex_coinbase': Decimal('49.99995560'), 'unspendable': Decimal('0E-8'), 'unspendables': {'genesis_block': Decimal('0E-8'), 'bip30': Decimal('0E-8'), 'scripts': Decimal('0E-8'), 'unclaimed_rewards': Decimal('0E-8')}}} == {'height': 102, 'bestblock': '7471357854133661aaa6d50eba11ec46c3322e299c5b6907885351551005f771', 'txouts': 103, 'bogosize': 7722, 'total_amount': Decimal('5100.00000000')})\r\n2021-03-17T01:07:56.797000Z TestFramework (INFO): Stopping nodes\r\n2021-03-17T01:07:57.000000Z TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_func_test_inxlkokp\r\n2021-03-17T01:07:57.000000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_func_test_inxlkokp/test_framework.log\r\n2021-03-17T01:07:57.001000Z TestFramework (ERROR): \r\n2021-03-17T01:07:57.001000Z TestFramework (ERROR): Hint: Call /home/jon/projects/bitcoin/bitcoin/test/functional/combine_logs.py '/tmp/bitcoin_func_test_inxlkokp' to consolidate all logs\r\n2021-03-17T01:07:57.001000Z TestFramework (ERROR): \r\n2021-03-17T01:07:57.001000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2021-03-17T01:07:57.001000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2021-03-17T01:07:57.001000Z TestFramework (ERROR): \r\n\r\n\r\n((HEAD detached at 540428a2c7)) $ test/functional/feature_coinstatsindex.py\r\n2021-03-17T01:08:09.775000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_rxs4xbm6\r\n2021-03-17T01:08:20.052000Z TestFramework (INFO): Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\r\n2021-03-17T01:08:20.215000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 128, in main\r\n    self.run_test()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/feature_coinstatsindex.py\", line 33, in run_test\r\n    self._test_coin_stats_index()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/feature_coinstatsindex.py\", line 62, in _test_coin_stats_index\r\n    assert_equal(res1, res0)\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/util.py\", line 50, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not({'height': 102, 'bestblock': '591e401cdaae94127f81f00ac25ec95edcdeac17c2031b772c71f92104091293', 'txouts': 103, 'bogosize': 7722, 'total_amount': Decimal('5100.00000000'), 'total_unspendable_amount': Decimal('50.00000000'), 'block_info': {'prevout_spent': Decimal('50.00000000'), 'coinbase': Decimal('50.00004440'), 'new_outputs_ex_coinbase': Decimal('49.99995560'), 'unspendable': Decimal('0E-8'), 'unspendables': {'genesis_block': Decimal('0E-8'), 'bip30': Decimal('0E-8'), 'scripts': Decimal('0E-8'), 'unclaimed_rewards': Decimal('0E-8')}}} == {'height': 102, 'bestblock': '591e401cdaae94127f81f00ac25ec95edcdeac17c2031b772c71f92104091293', 'txouts': 103, 'bogosize': 7722, 'total_amount': Decimal('5100.00000000')})\r\n2021-03-17T01:08:20.267000Z TestFramework (INFO): Stopping nodes\r\n2021-03-17T01:08:20.473000Z TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_func_test_rxs4xbm6\r\n2021-03-17T01:08:20.473000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_func_test_rxs4xbm6/test_framework.log\r\n2021-03-17T01:08:20.473000Z TestFramework (ERROR): \r\n2021-03-17T01:08:20.474000Z TestFramework (ERROR): Hint: Call /home/jon/projects/bitcoin/bitcoin/test/functional/combine_logs.py '/tmp/bitcoin_func_test_rxs4xbm6' to consolidate all logs\r\n2021-03-17T01:08:20.474000Z TestFramework (ERROR): \r\n2021-03-17T01:08:20.474000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2021-03-17T01:08:20.474000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2021-03-17T01:08:20.474000Z TestFramework (ERROR): \r\n\r\n\r\n((HEAD detached at 540428a2c7)) $ test/functional/feature_coinstatsindex.py\r\n2021-03-17T01:08:25.879000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_i2yd6ri_\r\n2021-03-17T01:08:35.297000Z TestFramework (INFO): Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\r\n2021-03-17T01:08:35.848000Z TestFramework (ERROR): Assertion failed\r\nTraceback (most recent call last):\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/test_framework.py\", line 128, in main\r\n    self.run_test()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/feature_coinstatsindex.py\", line 33, in run_test\r\n    self._test_coin_stats_index()\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/feature_coinstatsindex.py\", line 62, in _test_coin_stats_index\r\n    assert_equal(res1, res0)\r\n  File \"/home/jon/projects/bitcoin/bitcoin/test/functional/test_framework/util.py\", line 50, in assert_equal\r\n    raise AssertionError(\"not(%s)\" % \" == \".join(str(arg) for arg in (thing1, thing2) + args))\r\nAssertionError: not({'height': 102, 'bestblock': '3a98eacc26af554ce719e5f09257a9e8e535ee82fb363c79f4144b0100d26938', 'txouts': 103, 'bogosize': 7722, 'total_amount': Decimal('5100.00000000'), 'total_unspendable_amount': Decimal('50.00000000'), 'block_info': {'prevout_spent': Decimal('50.00000000'), 'coinbase': Decimal('50.00004440'), 'new_outputs_ex_coinbase': Decimal('49.99995560'), 'unspendable': Decimal('0E-8'), 'unspendables': {'genesis_block': Decimal('0E-8'), 'bip30': Decimal('0E-8'), 'scripts': Decimal('0E-8'), 'unclaimed_rewards': Decimal('0E-8')}}} == {'height': 102, 'bestblock': '3a98eacc26af554ce719e5f09257a9e8e535ee82fb363c79f4144b0100d26938', 'txouts': 103, 'bogosize': 7722, 'total_amount': Decimal('5100.00000000')})\r\n2021-03-17T01:08:35.902000Z TestFramework (INFO): Stopping nodes\r\n2021-03-17T01:08:36.111000Z TestFramework (WARNING): Not cleaning up dir /tmp/bitcoin_func_test_i2yd6ri_\r\n2021-03-17T01:08:36.112000Z TestFramework (ERROR): Test failed. Test logging available at /tmp/bitcoin_func_test_i2yd6ri_/test_framework.log\r\n2021-03-17T01:08:36.112000Z TestFramework (ERROR): \r\n2021-03-17T01:08:36.113000Z TestFramework (ERROR): Hint: Call /home/jon/projects/bitcoin/bitcoin/test/functional/combine_logs.py '/tmp/bitcoin_func_test_i2yd6ri_' to consolidate all logs\r\n2021-03-17T01:08:36.113000Z TestFramework (ERROR): \r\n2021-03-17T01:08:36.113000Z TestFramework (ERROR): If this failure happened unexpectedly or intermittently, please file a bug and provide a link or upload of the combined log.\r\n2021-03-17T01:08:36.114000Z TestFramework (ERROR): https://github.com/bitcoin/bitcoin/issues\r\n2021-03-17T01:08:36.114000Z TestFramework (ERROR): \r\n```\r\n</p></details>\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/800719573/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801460423",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-801460423",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 801460423,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwMTQ2MDQyMw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-17T21:38:38Z",
    "updated_at": "2021-03-17T21:38:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Thanks @fjahr! resolved in the latest push; moving forward, `test/functional/feature_coinstatsindex.py` fails at commit [540428a](https://github.com/bitcoin/bitcoin/commit/540428a2c7d8791b20d81967c3b811cfa7bc613a)\r\n> \r\n> test output x 3\r\n\r\nFixed and quick-checked the following commits. I think that should be the last of those. \ud83e\udd1e ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/801460423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/804843662",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-804843662",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 804843662,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwNDg0MzY2Mg==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-23T11:58:32Z",
    "updated_at": "2021-03-23T11:58:32Z",
    "author_association": "MEMBER",
    "body": "> Fixed and quick-checked the following commits. I think that should be the last of those. crossed_fingers\r\n\r\nYup, they check out for me too. Deleted my coinstats index files from last August and re-syncing under adversarial conditions (restarts, very frequent internet cuts) while trying the commands in mainnet, signet and testnet. The reviews by @Sjors are very helpful with ideas of issues to check / things to test.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/804843662/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808786709",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-808786709",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 808786709,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwODc4NjcwOQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-27T18:57:23Z",
    "updated_at": "2021-03-27T21:17:09Z",
    "author_association": "MEMBER",
    "body": "Review update: reviewed up to 590b887 and added suggestions in separate annotated commits in the branch at https://github.com/jonatack/bitcoin/commits/pr19521-review\r\n\r\n- https://github.com/jonatack/bitcoin/commit/e9262d2b38ebfe134b42e44ff3b88cfb89f744cc : \"PR19521 suggestions, commit e880a5e *Add Coinstats index\"*\r\n- https://github.com/jonatack/bitcoin/commit/d4fb34de51a3d21ae68e8331822020e6fc2f06e6 : \"PR19521 suggestions, commit 435ed5b *Coinstats index can be activated with command line flag\"*\r\n- https://github.com/jonatack/bitcoin/commit/452a4fb5c03c024d4e98a38ef3806f921888d641 : \"PR19521 suggestions, commit 6aedd7b *gettxoutsetinfo can be requested for specific blockheights*\"\r\n- https://github.com/jonatack/bitcoin/commit/f6ebc75c78442cf0fde8c4330ebdda32a426c1a3 : \"PR19521 suggestions, commit dc26799 *Add unit test for Coinstats index*\" (among other things updated the tests to use std::chrono)\r\n- https://github.com/jonatack/bitcoin/commit/ae3d058394ad0268f491b240372e76b0a0457719 : \"PR19521 suggestions, commit 590b887 *Add verbose amounts tracking to Coinstats index*\"",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808786709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808786833",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-808786833",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 808786833,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwODc4NjgzMw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-27T18:58:22Z",
    "updated_at": "2021-03-27T18:58:22Z",
    "author_association": "MEMBER",
    "body": "Here is a test commit you can pull in, if you like, to add coverage for c3cfc509 *Add Coinstats index to getindexinfo*\r\n\r\nhttps://github.com/jonatack/bitcoin/commits/pr19521-coinstatsindex-getindexinfo-test-coverage",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/808786833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809516409",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-809516409",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 809516409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgwOTUxNjQwOQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-03-29T16:17:04Z",
    "updated_at": "2021-03-29T16:17:04Z",
    "author_association": "MEMBER",
    "body": "Approach ACK. I finished this pass of reviewing and have pushed annotated comments/fixes/suggestions, per-commit, in https://github.com/jonatack/bitcoin/commits/pr19521-review (with a few initial comments in the first commit and in my comments here above).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809516409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813969320",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-813969320",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 813969320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzk2OTMyMA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-06T09:20:39Z",
    "updated_at": "2021-04-06T09:20:39Z",
    "author_association": "MEMBER",
    "body": "re-tACK 5860532c4041bc3f90fc1f8919f56b6f3955ae9f\r\n\r\nMuhash at height 677990: c49dc3e5ab445812a3eeb8460aa169b4b8900fe8e8c70b328bb7fa0edb0d4690",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813969320/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814490653",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-814490653",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 814490653,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNDQ5MDY1Mw==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-06T23:08:15Z",
    "updated_at": "2021-04-06T23:09:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Sorry, I didn't get around to write an update after I pushed yesterday. I further addressed comments from @jonatack and I think I should have addressed everything now :)\r\n\r\n>I don't think it is necessary to disallow the coin stats index when pruning is enabled. The only reason that txindex disallows it is because txindex gets the transaction data by reading it off disk from the block files, so that is incompatible with pruning.\r\n>\r\n>The coin stats index doesn't have the same problem. The only issue would be if there were a large reorg and it needed the undo data that has already been deleted. However this is an issue overall of pruned nodes so it shouldn't be a concern for the coin stats index.\r\n\r\nYes, but I would like to keep this for a follow-up because if I do it the same way as it is done for the blockfilterindexes it makes coinstatsindex a new dependency for validation and that would also be a new circular dependency. But I am working on a better solution, it just requires some refactoring that is beyond the scope of this PR IMO.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/814490653/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/817210690",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-817210690",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 817210690,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzIxMDY5MA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-10T22:29:19Z",
    "updated_at": "2021-04-10T22:29:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/817210690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/817275460",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-817275460",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 817275460,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxNzI3NTQ2MA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-11T09:12:09Z",
    "updated_at": "2021-04-11T09:12:09Z",
    "author_association": "MEMBER",
    "body": "re-ACK a4eaae4697d027f511ca2fa216b2ec0480b0be5d per `git diff 5860532 074cc23` (before rebase) and `git range-diff 1e3db68 5860532 a4eaae4` (after rebase), debug build is clean, lightly re-tested on signet\r\n\r\n<details><summary>manual testing</summary><p>\r\n\r\n```\r\n$ bitcoin-cli -signet gettxoutsetinfo \"none\" 90111\r\nerror code: -8\r\nerror message:\r\nTarget block height 90111 after current tip 33053\r\n\r\n$ bitcoin-cli -signet gettxoutsetinfo \"muhash\" 33053\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set because coinstatsindex is still syncing. Current height: 32533\r\n\r\n...a few seconds later...\r\n\r\n$ bitcoin-cli gettxoutsetinfo muhash 33053\r\n{\r\n  \"height\": 33053,\r\n  \"bestblock\": \"000000ef50b4fd3572a61e461ea156a936906fcf9828c9f2cb305391bbb5078c\",\r\n  \"txouts\": 48452,\r\n  \"bogosize\": 3545492,\r\n  \"muhash\": \"8620187d4cb621cee5c409fc3809d43d9029557b6b07f646d8293156e69e6a8f\",\r\n  \"total_amount\": 1652650.00000000,\r\n  \"total_unspendable_amount\": 50.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 6.65019527,\r\n    \"coinbase\": 50.00000433,\r\n    \"new_outputs_ex_coinbase\": 6.65019094,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n\r\n$  bitcoin-cli -signet help gettxoutsetinfo\r\ngettxoutsetinfo ( \"hash_type\" hash_or_height use_index )\r\n\r\nReturns statistics about the unspent transaction output set.\r\nNote this call may take some time if you are not using coinstatsindex.\r\n\r\nArguments:\r\n1. hash_type         (string, optional, default=hash_serialized_2) Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'\r\n2. hash_or_height    (string or numeric) The block hash or height of the target height (only available with coinstatsindex)\r\n3. use_index         (boolean, optional, default=true) Use coinstatsindex, if available.\r\n\r\nResult:\r\n{                                     (json object)\r\n  \"height\" : n,                       (numeric) The block height (index) of the returned statistics\r\n  \"bestblock\" : \"hex\",                (string) The hash of the block at which these statistics are calculated\r\n  \"txouts\" : n,                       (numeric) The number of unspent transaction outputs\r\n  \"bogosize\" : n,                     (numeric) Database-independent, meaningless metric indicating the UTXO set size\r\n  \"hash_serialized_2\" : \"hex\",        (string, optional) The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\r\n  \"muhash\" : \"hex\",                   (string, optional) The serialized hash (only present if 'muhash' hash_type is chosen)\r\n  \"transactions\" : n,                 (numeric) The number of transactions with unspent outputs (not available when coinstatsindex is used)\r\n  \"disk_size\" : n,                    (numeric) The estimated size of the chainstate on disk (not available when coinstatsindex is used)\r\n  \"total_amount\" : n,                 (numeric) The total amount of coins in the UTXO set\r\n  \"total_unspendable_amount\" : n,     (numeric) The total amount of coins permanently excluded from the UTXO set (only available if coinstatsindex is used)\r\n  \"block_info\" : {                    (json object) Info on amounts in the block at this block height (only available if coinstatsindex is used)\r\n    \"prevout_spent\" : n,              (numeric)\r\n    \"coinbase\" : n,                   (numeric)\r\n    \"new_outputs_ex_coinbase\" : n,    (numeric)\r\n    \"unspendable\" : n,                (numeric)\r\n    \"unspendables\" : {                (json object) Detailed view of the unspendable categories\r\n      \"genesis_block\" : n,            (numeric)\r\n      \"bip30\" : n,                    (numeric) Transactions overridden by duplicates (no longer possible with BIP30)\r\n      \"scripts\" : n,                  (numeric) Amounts sent to scripts that are unspendable (for example OP_RETURN outputs)\r\n      \"unclaimed_rewards\" : n         (numeric) Fee rewards that miners did not claim in their coinbase transaction\r\n    }\r\n  }\r\n}\r\n\r\nExamples:\r\n> bitcoin-cli gettxoutsetinfo \r\n> bitcoin-cli gettxoutsetinfo \"none\"\r\n> bitcoin-cli gettxoutsetinfo \"none\" 1000\r\n> bitcoin-cli gettxoutsetinfo \"none\" '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"'\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": []}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\"]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\", 1000]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\": \"curltest\", \"method\": \"gettxoutsetinfo\", \"params\": [\"none\", \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"]}' -H 'content-type: text/plain;' http://127.0.0.1:8332/\r\n```\r\n</p></details>\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/817275460/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818288887",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-818288887",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 818288887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODI4ODg4Nw==",
    "user": {
      "login": "ivanacostarubio",
      "id": 16559,
      "node_id": "MDQ6VXNlcjE2NTU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16559?u=b66cb424b8de01d7072bf0916d07b41499b523a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanacostarubio",
      "html_url": "https://github.com/ivanacostarubio",
      "followers_url": "https://api.github.com/users/ivanacostarubio/followers",
      "following_url": "https://api.github.com/users/ivanacostarubio/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanacostarubio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanacostarubio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanacostarubio/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanacostarubio/orgs",
      "repos_url": "https://api.github.com/users/ivanacostarubio/repos",
      "events_url": "https://api.github.com/users/ivanacostarubio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanacostarubio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-12T22:38:49Z",
    "updated_at": "2021-04-12T22:38:49Z",
    "author_association": "NONE",
    "body": "Tested ACK. [a4eaae4](https://github.com/bitcoin/bitcoin/commit/a4eaae4697d027f511ca2fa216b2ec0480b0be5d)\r\n\r\nManual Testing: \r\n\r\n```\r\n./src/bitcoin-cli gettxoutsetinfo muhash 677990\r\n{\r\n  \"height\": 677990,\r\n  \"bestblock\": \"00000000000000000005e25f3d3e12bf69664dcfe78e2b90a58d5a9e596eef6b\",\r\n  \"txouts\": 74586452,\r\n  \"bogosize\": 5588597888,\r\n  \"muhash\": \"0f829dbd43ecd72de16a8b906f287600a0426ea0bb6deb1bc15772af2e534628\",\r\n  \"total_amount\": 18674738.62932678,\r\n  \"total_unspendable_amount\": 205.12067322,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 15754.91848125,\r\n    \"coinbase\": 7.03601537,\r\n    \"new_outputs_ex_coinbase\": 15754.13246588,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n```\r\n./src/bitcoin-cli  gettxoutsetinfo \"none\" 1000\r\n{\r\n  \"height\": 1000,\r\n  \"bestblock\": \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\",\r\n  \"txouts\": 998,\r\n  \"bogosize\": 116724,\r\n  \"total_amount\": 50000.00000000,\r\n  \"total_unspendable_amount\": 50.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 50.00000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n```\r\n./src/bitcoin-cli gettxoutsetinfo \"none\" '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"'\r\n{\r\n  \"height\": 1000,\r\n  \"bestblock\": \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\",\r\n  \"txouts\": 998,\r\n  \"bogosize\": 116724,\r\n  \"total_amount\": 50000.00000000,\r\n  \"total_unspendable_amount\": 50.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 50.00000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\nI saw this on the logs: \r\n\r\n```\r\n2021-04-11T18:53:56Z Syncing coinstatsindex with block chain from height 617225\r\n2021-04-11T18:54:33Z Syncing coinstatsindex with block chain from height 617231\r\n2021-04-11T18:55:04Z Syncing coinstatsindex with block chain from height 617280\r\n\r\n```\r\n\r\nWithout coinstatsindex enabled: \r\n\r\n```\r\n./src/bitcoin-cli gettxoutsetinfo muhash 677990\r\n\r\nerror code: -8\r\nerror message:\r\nQuerying specific block heights requires coinstatsindex\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818288887/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818692017",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-818692017",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 818692017,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxODY5MjAxNw==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-13T12:21:43Z",
    "updated_at": "2021-04-13T19:16:10Z",
    "author_association": "MEMBER",
    "body": "re-tACK a4eaae4\r\n\r\nMuhash at height 679,048: f5058d7485db847f189ad33c80ecdbb8ad0ceba3fe3e9e32a3ada9553dc52406 \r\n\r\nOf course it needs a rebase 2 hours after my re-ACK :-(",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/818692017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819626933",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819626933",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 819626933,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTYyNjkzMw==",
    "user": {
      "login": "grunch",
      "id": 228364,
      "node_id": "MDQ6VXNlcjIyODM2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/228364?u=b4749e21bd03160c09d15efa1e0796170da4b7a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/grunch",
      "html_url": "https://github.com/grunch",
      "followers_url": "https://api.github.com/users/grunch/followers",
      "following_url": "https://api.github.com/users/grunch/following{/other_user}",
      "gists_url": "https://api.github.com/users/grunch/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/grunch/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/grunch/subscriptions",
      "organizations_url": "https://api.github.com/users/grunch/orgs",
      "repos_url": "https://api.github.com/users/grunch/repos",
      "events_url": "https://api.github.com/users/grunch/events{/privacy}",
      "received_events_url": "https://api.github.com/users/grunch/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T15:54:09Z",
    "updated_at": "2021-04-14T15:54:09Z",
    "author_association": "NONE",
    "body": "Tested ACK. a4eaae4\r\n\r\nManual Testing:\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo none '\"00000000d1145790a8694403d4063f323d499e655c83426834d4ce2f8dd4a2ee\"'\r\n{\r\n  \"height\": 170,\r\n  \"bestblock\": \"00000000d1145790a8694403d4063f323d499e655c83426834d4ce2f8dd4a2ee\",\r\n  \"txouts\": 171,\r\n  \"bogosize\": 20007,\r\n  \"total_amount\": 8500.00000000,\r\n  \"total_unspendable_amount\": 50.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 50.00000000,\r\n    \"coinbase\": 50.00000000,\r\n    \"new_outputs_ex_coinbase\": 50.00000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo none 400000\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set because coinstatsindex is still syncing. Current height: 291230\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo none 200000\r\n{\r\n  \"height\": 200000,\r\n  \"bestblock\": \"000000000000034a7dedef4a161fa058a2d67a173a90155f3a2fe6fc132e0ebf\",\r\n  \"txouts\": 2318056,\r\n  \"bogosize\": 175620421,\r\n  \"total_amount\": 9999889.98361183,\r\n  \"total_unspendable_amount\": 160.01638817,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 211681.67936751,\r\n    \"coinbase\": 50.63517500,\r\n    \"new_outputs_ex_coinbase\": 211681.04419251,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo muhash 100000\r\n{\r\n  \"height\": 100000,\r\n  \"bestblock\": \"000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506\",\r\n  \"txouts\": 71888,\r\n  \"bogosize\": 7606209,\r\n  \"muhash\": \"86aa993b32b9df2afa1a2c4855d34911146ad77328a82887e058d23f01831e3e\",\r\n  \"total_amount\": 4999900.00000000,\r\n  \"total_unspendable_amount\": 150.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 53.01000000,\r\n    \"coinbase\": 50.00000000,\r\n    \"new_outputs_ex_coinbase\": 53.01000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo none\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set because coinstatsindex is still syncing. Current height: 299131\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819626933/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819789914",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819789914",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 819789914,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTc4OTkxNA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T19:52:27Z",
    "updated_at": "2021-04-14T19:52:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ain't no party like a rebase party, 'cause a rebase party don't stop...",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819789914/reactions",
      "total_count": 7,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 5,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819836733",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819836733",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 819836733,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTgzNjczMw==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T21:13:28Z",
    "updated_at": "2021-04-14T21:13:28Z",
    "author_association": "MEMBER",
    "body": "Code review re-ACK 1be67944193241ff5aee60188f2730367a638500 per `git range-diff 773f8c1 a4eaae4 1be6794`, only changes since my last review are rebase due to added neighboring headers and circular dependencies from merged #21575",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819836733/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819838244",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819838244",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 819838244,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxOTgzODI0NA==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-14T21:16:23Z",
    "updated_at": "2021-04-14T21:16:23Z",
    "author_association": "MEMBER",
    "body": "(also verified that the unrelated-looking cirrus CI test failure in `feature_notifications.py#L172` does not occur for me locally and opened issue #21683)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/819838244/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820182102",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-820182102",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 820182102,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDE4MjEwMg==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-15T07:20:01Z",
    "updated_at": "2021-04-15T07:20:13Z",
    "author_association": "MEMBER",
    "body": "re-utACK 1be67944193241ff5aee60188f2730367a638500: what jonatack said",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820182102/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820699496",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-820699496",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 820699496,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDY5OTQ5Ng==",
    "user": {
      "login": "ivanacostarubio",
      "id": 16559,
      "node_id": "MDQ6VXNlcjE2NTU5",
      "avatar_url": "https://avatars.githubusercontent.com/u/16559?u=b66cb424b8de01d7072bf0916d07b41499b523a9&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ivanacostarubio",
      "html_url": "https://github.com/ivanacostarubio",
      "followers_url": "https://api.github.com/users/ivanacostarubio/followers",
      "following_url": "https://api.github.com/users/ivanacostarubio/following{/other_user}",
      "gists_url": "https://api.github.com/users/ivanacostarubio/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ivanacostarubio/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ivanacostarubio/subscriptions",
      "organizations_url": "https://api.github.com/users/ivanacostarubio/orgs",
      "repos_url": "https://api.github.com/users/ivanacostarubio/repos",
      "events_url": "https://api.github.com/users/ivanacostarubio/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ivanacostarubio/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-15T20:07:49Z",
    "updated_at": "2021-04-15T20:07:49Z",
    "author_association": "NONE",
    "body": "re-tACK [1be6794](https://github.com/bitcoin/bitcoin/commit/1be67944193241ff5aee60188f2730367a638500)\r\n\r\n<details>\r\n  <summary>Manual Testing</summary>\r\n\r\n\r\n**After recompiling:**\r\n\r\nRight after starting bitcoind: \r\n\r\n```\r\n ./src/bitcoin-cli gettxoutsetinfo 'muhash' 677990\r\nerror code: -28\r\nerror message:\r\nVerifying blocks...\r\n```\r\n\r\nAfter verified the blocks: \r\n\r\n```\r\nsrc/bitcoin-cli gettxoutsetinfo 'muhash' 677990\r\n{\r\n  \"height\": 677990,\r\n  \"bestblock\": \"00000000000000000005e25f3d3e12bf69664dcfe78e2b90a58d5a9e596eef6b\",\r\n  \"txouts\": 74586452,\r\n  \"bogosize\": 5588597888,\r\n  \"muhash\": \"0f829dbd43ecd72de16a8b906f287600a0426ea0bb6deb1bc15772af2e534628\",\r\n  \"total_amount\": 18674738.62932678,\r\n  \"total_unspendable_amount\": 205.12067322,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 15754.91848125,\r\n    \"coinbase\": 7.03601537,\r\n    \"new_outputs_ex_coinbase\": 15754.13246588,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n ```\r\n./src/bitcoin-cli  gettxoutsetinfo \"none\" 1000\r\n{\r\n  \"height\": 1000,\r\n  \"bestblock\": \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\",\r\n  \"txouts\": 998,\r\n  \"bogosize\": 116724,\r\n  \"total_amount\": 50000.00000000,\r\n  \"total_unspendable_amount\": 50.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 50.00000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n</details>\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820699496/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821894930",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-821894930",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 821894930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTg5NDkzMA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-17T22:13:38Z",
    "updated_at": "2021-04-17T22:13:38Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Ain't no party like a rebase party, 'cause a rebase party don't stop...\r\n\r\n\ud83d\udd7a ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821894930/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821998941",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-821998941",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 821998941,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTk5ODk0MQ==",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?u=3f68150a5f30acd541d1ed279376cd20b78046b1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-18T14:19:14Z",
    "updated_at": "2021-04-18T14:19:14Z",
    "author_association": "MEMBER",
    "body": "Code review re-ACK 07201d39d1c10ddbf8a576915203bf3aa4be135c changes appear to be rebase-only per `git range-diff 0dd7b23 1be6794 07201d3`.\r\n\r\nDebug build is clean; I didn't build and test each commit like in my previous reviews above.\r\n\r\nIt may be good if someone familiar with the chainman changes in #21391 et al that caused the rebase had a look. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821998941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822029740",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822029740",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 822029740,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjAyOTc0MA==",
    "user": {
      "login": "aitorjs",
      "id": 1209012,
      "node_id": "MDQ6VXNlcjEyMDkwMTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1209012?u=08a32aa61f07e1827486ccd040ec1974f74c8ae8&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aitorjs",
      "html_url": "https://github.com/aitorjs",
      "followers_url": "https://api.github.com/users/aitorjs/followers",
      "following_url": "https://api.github.com/users/aitorjs/following{/other_user}",
      "gists_url": "https://api.github.com/users/aitorjs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aitorjs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aitorjs/subscriptions",
      "organizations_url": "https://api.github.com/users/aitorjs/orgs",
      "repos_url": "https://api.github.com/users/aitorjs/repos",
      "events_url": "https://api.github.com/users/aitorjs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aitorjs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-18T17:38:52Z",
    "updated_at": "2021-04-18T22:52:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK. [07201d3](https://github.com/bitcoin/bitcoin/commit/07201d39d1c10ddbf8a576915203bf3aa4be135c)\r\n\r\nManual Testing on testnet: \r\n\r\n```\r\n$ src/bitcoind -coinstatsindex\r\n2021-04-18T20:07:19Z Syncing coinstatsindex with block chain from height 15716\r\n2021-04-18T20:07:50Z Syncing coinstatsindex with block chain from height 19420\r\n2021-04-18T20:07:57Z FlushStateToDisk: write coins cache to disk (1580417 coins, 218854kB) started\r\n2021-04-18T20:08:02Z FlushStateToDisk: write coins cache to disk (1580417 coins, 218854kB) completed (4.79s)\r\n\r\n2021-04-18T22:43:40Z Syncing coinstatsindex with block chain from height 1958230\r\n2021-04-18T22:44:11Z Syncing coinstatsindex with block chain from height 1961375\r\n2021-04-18T22:44:42Z Syncing coinstatsindex with block chain from height 1964519\r\n2021-04-18T22:45:13Z Syncing coinstatsindex with block chain from height 1967320\r\n2021-04-18T22:45:44Z Syncing coinstatsindex with block chain from height 1969832\r\n2021-04-18T22:46:15Z Syncing coinstatsindex with block chain from height 1971923\r\n2021-04-18T22:46:15Z coinstatsindex is enabled at height 1971953\r\n2021-04-18T22:46:15Z coinstatsindex thread exit\r\n\r\n```\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo 'none' 0 true\r\n{\r\n\r\n  \"height\": 0,\r\n  \"bestblock\": \"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\",\r\n  \"txouts\": 0,\r\n  \"bogosize\": 0,\r\n  \"total_amount\": 0.00000000,\r\n  \"total_unspendable_amount\": 50.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 0.00000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 50.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 50.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo muhash 0\r\n{\r\n  \"height\": 0,\r\n  \"bestblock\": \"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\",\r\n  \"txouts\": 0,\r\n  \"bogosize\": 0,\r\n  \"muhash\": \"dd5ad2a105c2d29495f577245c357409002329b9f4d6182c0af3dc2f462555c8\",\r\n  \"total_amount\": 0.00000000,\r\n  \"total_unspendable_amount\": 50.00000000,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 0.00000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 50.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 50.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo 'none' 1800003 true\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set because coinstatsindex is still syncing. Current height: 403170\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo muhash 677990\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set because coinstatsindex is still syncing. Current height: 403357\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo 'none' 500000 true\r\n{\r\n  \"height\": 500000,\r\n  \"bestblock\": \"000000000001a7c0aaa2630fbb2c0e476aafffc60f82177375b2aaa22209f606\",\r\n  \"txouts\": 5447499,\r\n  \"bogosize\": 413044654,\r\n  \"total_amount\": 16749305.03353846,\r\n  \"total_unspendable_amount\": 707.46646154,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 12.50000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo 'none' '\"00000000009e2958c15ff9290d571bf9459e93b19765c6801ddeccadbb160a1e\"' true\r\n{\r\n  \"height\": 100000,\r\n  \"bestblock\": \"00000000009e2958c15ff9290d571bf9459e93b19765c6801ddeccadbb160a1e\",\r\n  \"txouts\": 274250,\r\n  \"bogosize\": 21344460,\r\n  \"total_amount\": 4999849.36870600,\r\n  \"total_unspendable_amount\": 200.63129400,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 50.00000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ src/bitcoin-cli gettxoutsetinfo muhash '\"00000000009e2958c15ff9290d571bf9459e93b19765c6801ddeccadbb160a1e\"'\r\n{\r\n  \"height\": 100000,\r\n  \"bestblock\": \"00000000009e2958c15ff9290d571bf9459e93b19765c6801ddeccadbb160a1e\",\r\n  \"txouts\": 274250,\r\n  \"bogosize\": 21344460,\r\n  \"muhash\": \"a014cef901c62e92a84004a0f77999062a44210329e3bc21e1b96d9d8a392fb1\",\r\n  \"total_amount\": 4999849.36870600,\r\n  \"total_unspendable_amount\": 200.63129400,\r\n  \"block_info\": {\r\n    \"prevout_spent\": 0.00000000,\r\n    \"coinbase\": 50.00000000,\r\n    \"new_outputs_ex_coinbase\": 0.00000000,\r\n    \"unspendable\": 0.00000000,\r\n    \"unspendables\": {\r\n      \"genesis_block\": 0.00000000,\r\n      \"bip30\": 0.00000000,\r\n      \"scripts\": 0.00000000,\r\n      \"unclaimed_rewards\": 0.00000000\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n```\r\n$ test/functional/feature_coinstatsindex.py\r\n2021-04-18T17:06:20.254000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_4klxhrpj\r\n2021-04-18T17:06:21.796000Z TestFramework (INFO): Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\r\n2021-04-18T17:06:21.862000Z TestFramework (INFO): Test that gettxoutsetinfo() can get fetch data on specific heights with index\r\n2021-04-18T17:06:22.013000Z TestFramework (INFO): Test gettxoutsetinfo() with index and verbose flag\r\n2021-04-18T17:06:22.178000Z TestFramework (INFO): Test that the index is robust across restarts\r\n2021-04-18T17:06:22.880000Z TestFramework (INFO): Test use_index option for nodes running the index\r\n2021-04-18T17:06:23.002000Z TestFramework (INFO): Test that index can handle reorgs\r\n2021-04-18T17:06:23.516000Z TestFramework (INFO): Test that a node aware of stale blocks syncs them as well\r\n2021-04-18T17:06:24.774000Z TestFramework (INFO): Test that the rpc raises if the legacy hash is passed with the index\r\n2021-04-18T17:06:24.864000Z TestFramework (INFO): Stopping nodes\r\n2021-04-18T17:06:25.017000Z TestFramework (INFO): Cleaning up /tmp/bitcoin_func_test_4klxhrpj on exit\r\n2021-04-18T17:06:25.018000Z TestFramework (INFO): Tests successful\r\n```\r\n\r\n```\r\n$ ~/.bitcoin/testnet3/indexes/coinstats$ du -h\r\n336M\t./db\r\n336M\t.\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822029740/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822232815",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822232815",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 822232815,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjIzMjgxNQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-19T07:16:47Z",
    "updated_at": "2021-04-19T07:16:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->\r\n:partying_face: This pull request conflicts with the target branch and [needs rebase party](https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-821894930).\r\n\r\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a \"draft\".</sub>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822232815/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 3,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822727320",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822727320",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 822727320,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjcyNzMyMA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-19T19:28:47Z",
    "updated_at": "2021-04-19T19:29:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased, review while it's hot! \ud83d\udd25 \r\n\r\n<details>\r\n  <summary>At least it's a relatively simple one.</summary>\r\n<p>\r\n  \r\n```\r\n$ git range-diff master 07201d3 5f96d7d22\r\n 1:  f8b5dd30f =  1:  2e2648a90 crypto: Make MuHash Remove method efficient\r\n 2:  da85ed5a6 =  2:  9c8a265fd refactor: Pass hash_type to CoinsStats in stats object\r\n 3:  85405cc2a =  3:  a8a46c4b3 refactor: Simplify ApplyStats and ApplyHash\r\n 4:  873cd68fc =  4:  dd58a4de2 index: Add Coinstats index\r\n 5:  e2d5eddfa =  5:  3c914d58f index: Coinstats index can be activated with command line flag\r\n 6:  aeffcbdf5 !  6:  3f166ecc1 rpc: gettxoutsetinfo can be requested for specific blockheights\r\n    @@ src/rpc/blockchain.cpp: static RPCHelpMan gettxoutsetinfo()\r\n     -                \"Note this call may take some time.\\n\",\r\n     +                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\r\n                      {\r\n    --                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\r\n    -+                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'\"},\r\n    +                     {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\r\n     +                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\r\n                      },\r\n                      RPCResult{\r\n 7:  fa7a1f8ae =  7:  6a4c0c09a test: Add functional test for Coinstats index\r\n 8:  1edf2c26b =  8:  57a026c30 test: Add unit test for Coinstats index\r\n 9:  5194bf51d =  9:  ca01bb8d6 rpc: Add Coinstats index to getindexinfo\r\n10:  2214cca58 = 10:  655d92983 test: add coinstatsindex getindexinfo coverage, improve current tests\r\n11:  3b89ad85f = 11:  2501576ec rpc, index: Add verbose amounts tracking to Coinstats index\r\n12:  08952fb10 = 12:  e0938c290 test: Add tests for block_info in gettxoutsetinfo\r\n13:  71e136d5a = 13:  bb7788b12 test: Test coinstatsindex robustness across restarts\r\n14:  6c99446b4 ! 14:  b9362392a index, rpc: Add use_index option for gettxoutsetinfo\r\n    @@ src/node/coinstats.h: struct CCoinsStats\r\n      ## src/rpc/blockchain.cpp ##\r\n     @@ src/rpc/blockchain.cpp: static RPCHelpMan gettxoutsetinfo()\r\n                      {\r\n    -                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'\"},\r\n    +                     {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\r\n                          {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\r\n    -+                    {\"use_index\", RPCArg::Type::BOOL, /* default */ \"true\", \"Use coinstatsindex, if available.\"},\r\n    ++                    {\"use_index\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Use coinstatsindex, if available.\"},\r\n                      },\r\n                      RPCResult{\r\n                          RPCResult::Type::OBJ, \"\", \"\",\r\n15:  1c0ddc4ef = 15:  90c966b0f rpc: Allow gettxoutsetinfo and getblockstats for stale blocks\r\n16:  8e61ced8e = 16:  23fe50436 test: Add test for coinstatsindex behavior in reorgs\r\n17:  07201d39d = 17:  5f96d7d22 rpc: gettxoutsetinfo rejects hash_serialized_2 for specific height\r\n```\r\n\r\n</p>\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822727320/reactions",
      "total_count": 2,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 2,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822753248",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822753248",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 822753248,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjc1MzI0OA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-19T20:11:53Z",
    "updated_at": "2021-04-19T20:11:53Z",
    "author_association": "MEMBER",
    "body": "re-tACK 5f96d7d22d8e05876c6fc014e70488699950fe38\r\n\r\nMuhash at height for block 000000000000000000000f0d7742e6cd22da819b59af361224f452baee8d31c4 (which or may or may not win [the race](https://forkmonitor.info/stale/btc/679823)) is 1d324ac1c67e5317ab40d5c9e23b5aae6a0049fa5649795d32553cae008076fb.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822753248/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822758954",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822758954",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 822758954,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMjc1ODk1NA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-19T20:21:26Z",
    "updated_at": "2021-04-19T20:21:26Z",
    "author_association": "MEMBER",
    "body": "Narrator: it lost, which is a good opportunity to test a reorg in real life. For height 679824 I now get 157ec719407b64f9204f464fcc203b04d288ff837a3ce5ca63edeb20a2614903. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/822758954/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 1,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826156834",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-826156834",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 826156834,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjE1NjgzNA==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-24T21:38:19Z",
    "updated_at": "2021-04-24T21:38:19Z",
    "author_association": "CONTRIBUTOR",
    "body": "> I think it should error when `hash_or_height` is set but index is not available or `use_index=false` otherwise the result is misleading.\r\n\r\nThere is already a check for that and it should error in the case you describe: https://github.com/bitcoin/bitcoin/pull/19521/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1168\r\n\r\nIf you found a scenario where it doesn't work, please let me know. There is at least a basic test for it here but maybe I have overlooked something: https://github.com/bitcoin/bitcoin/pull/19521/files#diff-a6434325d09a6df4b371513c837907dfc1a97cf540709def4bded9b2a17e3f49R115\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/826156834/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/830179892",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-830179892",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 830179892,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMDE3OTg5Mg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-30T15:35:41Z",
    "updated_at": "2021-04-30T15:35:41Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 5f96d7d22d8e05876c6fc014e70488699950fe38",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/830179892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847238235",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-847238235",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19521",
    "id": 847238235,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg0NzIzODIzNQ==",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?u=348c27f90b6fff8fd72fa27232272651436a2ff0&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-24T18:17:18Z",
    "updated_at": "2021-05-24T18:17:18Z",
    "author_association": "CONTRIBUTOR",
    "body": "Thanks @MarcoFalke , all comments should be addressed in #22047 aside from the init arg brackets which should be made redundant with #21726.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847238235/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463328440",
    "pull_request_review_id": 458831985,
    "id": 463328440,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMyODQ0MA==",
    "diff_hunk": "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
    "path": "src/init.cpp",
    "position": 56,
    "original_position": 47,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why?",
    "created_at": "2020-07-30T23:37:22Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463328440",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463328440"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463328440"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463328440/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 964,
    "original_line": 964,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463993512",
    "pull_request_review_id": 459599507,
    "id": 463993512,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk5MzUxMg==",
    "diff_hunk": "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
    "path": "src/init.cpp",
    "position": 56,
    "original_position": 47,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It syncs over the whole blockchain, processing every block and saving state on each. That allows users to query the stats for every block height (a nice-to-have feature). It's the standard way `BaseIndex` currently works, although changing that would probably only require minimal effort. Potential users who I have talked to didn't really care much about this. But I will look into it if this again since progress is slow anyway currently.",
    "created_at": "2020-08-01T19:41:46Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463993512",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463993512"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463993512"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/463993512/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 964,
    "original_line": 964,
    "side": "RIGHT",
    "in_reply_to_id": 463328440
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199276",
    "pull_request_review_id": 468129702,
    "id": 471199276,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTI3Ng==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 24,
    "original_position": 20,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A comment explaining \"bogo\" would be helpful, I looked at the function that calculates it and it didn't make intuitive sense to me.",
    "created_at": "2020-08-17T02:17:33Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199276",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199276"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199276"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199276/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199582",
    "pull_request_review_id": 468129702,
    "id": 471199582,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTU4Mg==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block",
    "path": "src/index/coinstatsindex.cpp",
    "position": 112,
    "original_position": 111,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can we add `unspendable_amount` to the index data and include the genesis block in it?",
    "created_at": "2020-08-17T02:19:13Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199582",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199582"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199582"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199582/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 112,
    "original_line": 112,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199972",
    "pull_request_review_id": 468129702,
    "id": 471199972,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE5OTk3Mg==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).",
    "path": "src/index/coinstatsindex.cpp",
    "position": 139,
    "original_position": 135,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm assuming these would be added to `unspendable_amount` too",
    "created_at": "2020-08-17T02:20:42Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199972",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199972"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199972"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471199972/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 139,
    "original_line": 139,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471200138",
    "pull_request_review_id": 468129702,
    "id": 471200138,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIwMDEzOA==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 145,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this would be 3/3 of `unspendable_amount` items.",
    "created_at": "2020-08-17T02:21:33Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471200138",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471200138"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471200138"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471200138/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 145,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471203531",
    "pull_request_review_id": 468129702,
    "id": 471203531,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIwMzUzMQ==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 25,
    "original_position": 21,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If I understand the logic, `total_amount` is the net increase of coins due to this block?\r\n\r\nI don't want to bloat your stats index, but I'd be interested in adding `total_prevout_spent_amount`, `total_new_outputs_ex_coinbase_amount`, and `coinbase_amount` to unpack `total_amount`.",
    "created_at": "2020-08-17T02:38:42Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471203531",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471203531"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471203531"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471203531/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805502",
    "pull_request_review_id": 468869319,
    "id": 471805502,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTUwMg==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 24,
    "original_position": 20,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think bogo just stands for bogus, indicating that this metric is not meaningful in any way other than comparing it to itself, i.e. has the UTXO set grown or shrunk over the last x blocks. I added a comment on the calculation and improved the RPC help with the same text.",
    "created_at": "2020-08-17T22:18:09Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805502",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805502"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805502"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805502/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "RIGHT",
    "in_reply_to_id": 471199276
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805619",
    "pull_request_review_id": 468869425,
    "id": 471805619,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTYxOQ==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 145,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually 3/4 :) The unclaimed block rewards need to be included as well. (See code and/or my [blog post](https://fjahr.com/posts/where-are-the-coins/))",
    "created_at": "2020-08-17T22:18:28Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805619",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805619"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805619"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805619/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 145,
    "side": "RIGHT",
    "in_reply_to_id": 471200138
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805744",
    "pull_request_review_id": 468869591,
    "id": 471805744,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTgwNTc0NA==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 25,
    "original_position": 21,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It is the total amount of coins in the UTXO set at that block height. So it's accumulative rather than for this specific block. I added the other values in a draft commit, needs some cleanup but ready to test.",
    "created_at": "2020-08-17T22:18:51Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805744",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805744"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805744"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/471805744/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 25,
    "original_line": 25,
    "side": "RIGHT",
    "in_reply_to_id": 471203531
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474290951",
    "pull_request_review_id": 472008569,
    "id": 474290951,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MDk1MQ==",
    "diff_hunk": "@@ -0,0 +1,364 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    CAmount unspendable_amount;\n+    CAmount total_prevout_spent_amount;\n+    CAmount total_new_outputs_ex_coinbase_amount;\n+    CAmount coinbase_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+        READWRITE(obj.unspendable_amount);\n+        READWRITE(obj.total_prevout_spent_amount);\n+        READWRITE(obj.total_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.coinbase_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+\n+        m_unspendable_amount = 0;\n+        m_total_prevout_spent_amount = 0;\n+        m_total_new_outputs_ex_coinbase_amount = 0;\n+        m_coinbase_amount = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CAmount block_subsidy = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+    CAmount total_in = 0;\n+    CAmount total_out = 0;\n+    m_unspendable_amount = 0;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_unspendable_amount += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                total_out += coin.out.nValue;\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_unspendable_amount += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    total_in += coin.out.nValue;\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    } else {\n+        // Genesis block\n+        m_unspendable_amount += block_subsidy;\n+    }\n+\n+    m_coinbase_amount = block_subsidy;\n+    m_total_prevout_spent_amount = total_in;\n+\n+    if (pindex->nHeight > 0) {\n+        m_total_new_outputs_ex_coinbase_amount = total_out - block_subsidy;\n+\n+        // Unclaimed block rewards\n+        if ((total_in + block_subsidy) > total_out) {\n+            m_unspendable_amount += (total_in + block_subsidy - total_out);",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 203,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "7139c1798819074123fd2b841e54eeafe849bc5a",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think this is causing BIP30 blocks to be double counted as unspendable\r\n\r\n`bitcoin-cli gettxoutsetinfo 'none' 91722 true`\r\n\r\n`\"unspendable_amount\": 100.00000000`",
    "created_at": "2020-08-20T21:46:57Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r474290951",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474290951"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r474290951"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/474290951/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 203,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475161291",
    "pull_request_review_id": 472974571,
    "id": 475161291,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE2MTI5MQ==",
    "diff_hunk": "@@ -0,0 +1,368 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+    CAmount total_unspendable_amount;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+        READWRITE(obj.total_unspendable_amount);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+        m_total_unspendable_amount = 0;\n+        m_block_unspendable_amount = 0;\n+        m_block_prevout_spent_amount = 0;\n+        m_block_new_outputs_ex_coinbase_amount = 0;\n+        m_block_coinbase_amount = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CAmount block_subsidy = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+\n+    // Reset per-block values\n+    m_block_unspendable_amount = 0;\n+    m_block_coinbase_amount = 0;\n+    m_block_prevout_spent_amount = 0;\n+    m_block_new_outputs_ex_coinbase_amount = 0;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                if (tx->IsCoinBase() && j == 0) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 173,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "79535960d1324cd24db78e383e21d2f3b810f66a",
    "user": {
      "login": "PierreRochard",
      "id": 6299681,
      "node_id": "MDQ6VXNlcjYyOTk2ODE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6299681?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PierreRochard",
      "html_url": "https://github.com/PierreRochard",
      "followers_url": "https://api.github.com/users/PierreRochard/followers",
      "following_url": "https://api.github.com/users/PierreRochard/following{/other_user}",
      "gists_url": "https://api.github.com/users/PierreRochard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PierreRochard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PierreRochard/subscriptions",
      "organizations_url": "https://api.github.com/users/PierreRochard/orgs",
      "repos_url": "https://api.github.com/users/PierreRochard/repos",
      "events_url": "https://api.github.com/users/PierreRochard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PierreRochard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This only counts the first output of the coinbase tx as being the coinbase amount, which doesn't necessarily hold true ( one example https://blockstream.info/block/0000000000000af7c56d09abdbce2a36ba9aebbd8559b3d0460defaeaf3c0f31 )",
    "created_at": "2020-08-23T02:38:37Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475161291",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475161291"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475161291"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475161291/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 173,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475205283",
    "pull_request_review_id": 473001690,
    "id": 475205283,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTIwNTI4Mw==",
    "diff_hunk": "@@ -0,0 +1,368 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+    CAmount total_unspendable_amount;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+        READWRITE(obj.total_unspendable_amount);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+        m_total_unspendable_amount = 0;\n+        m_block_unspendable_amount = 0;\n+        m_block_prevout_spent_amount = 0;\n+        m_block_new_outputs_ex_coinbase_amount = 0;\n+        m_block_coinbase_amount = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    CAmount block_subsidy = GetBlockSubsidy(pindex->nHeight, Params().GetConsensus());\n+\n+    // Reset per-block values\n+    m_block_unspendable_amount = 0;\n+    m_block_coinbase_amount = 0;\n+    m_block_prevout_spent_amount = 0;\n+    m_block_new_outputs_ex_coinbase_amount = 0;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                if (tx->IsCoinBase() && j == 0) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 173,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "79535960d1324cd24db78e383e21d2f3b810f66a",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are right. I just pushed a fix for this and also improved the tests to account for this case.",
    "created_at": "2020-08-23T11:03:22Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475205283",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475205283"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475205283"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/475205283/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 173,
    "side": "RIGHT",
    "in_reply_to_id": 475161291
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479786750",
    "pull_request_review_id": 478215123,
    "id": 479786750,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4Njc1MA==",
    "diff_hunk": "@@ -23,6 +23,7 @@\n #include <httpserver.h>\n #include <index/blockfilterindex.h>\n #include <index/txindex.h>\n+#include <index/coinstatsindex.h>",
    "path": "src/init.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "9981a8f nit: sort",
    "created_at": "2020-08-30T16:03:39Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479786750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479786750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479786750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479786750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479787149",
    "pull_request_review_id": 478215123,
    "id": 479787149,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTc4NzE0OQ==",
    "diff_hunk": "@@ -432,6 +440,7 @@ void SetupServerArgs(NodeContext& node)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-coinstatsindex\", strprintf(\"Maintain coin statistics index, used by the gettxoutset rpc call (default: %u)\", DEFAULT_COINSTATSINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "9981a8f\r\n\r\n- s/rpc/RPC/ (can also fix the one in `txindex`)\r\n\r\n- omit \"call\" (the C in RPC stands for \"call\")\r\n\r\n- drop the comma at s/index, /index /\r\n\r\n- nit: sort for both `-coinstatsindex` and `-blockfilterindex` (they should be at line 411)",
    "created_at": "2020-08-30T16:07:37Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479787149",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479787149"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479787149"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/479787149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 443,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485635996",
    "pull_request_review_id": 485041059,
    "id": 485635996,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNTk5Ng==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_COINSTATSINDEX_H\n+#define BITCOIN_INDEX_COINSTATSINDEX_H\n+\n+#include <chain.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+#include <node/coinstats.h>\n+\n+/**\n+ * CoinStatsIndex maintains statistics on the UTXO set.\n+ */\n+class CoinStatsIndex final : public BaseIndex\n+{\n+private:\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    uint64_t m_transaction_output_count;\n+    uint64_t m_bogo_size;\n+    CAmount m_total_amount;\n+    uint64_t m_disk_size;\n+\n+    bool ReverseBlock(const CBlock& block, const CBlockIndex* pindex);\n+protected:\n+    bool Init() override;\n+\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return \"coinstatsindex\"; }\n+\n+public:\n+    // Constructs the index, which becomes available to be queried.\n+    explicit CoinStatsIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Look up hash digest for a specific block using CBlockIndex",
    "path": "src/index/coinstatsindex.h",
    "position": null,
    "original_position": 43,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: `look up stats`",
    "created_at": "2020-09-09T14:01:33Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485635996",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485635996"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485635996"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485635996/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 43,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485646852",
    "pull_request_review_id": 485041059,
    "id": 485646852,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0Njg1Mg==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.disk_size = m_disk_size;\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 296,
    "original_position": 254,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This would prematurely return if the active chain is shorter? It currently doesn't matter, because `gettxoutsetinfo` only takes a height argument.",
    "created_at": "2020-09-09T14:15:32Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485646852",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485646852"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485646852"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485646852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 296,
    "original_line": 296,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485661976",
    "pull_request_review_id": 485041059,
    "id": 485661976,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2MTk3Ng==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 98,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why are these values only initialised is no result is found? (and `result` is not used, so this just a sanity check?). Should this be initialised with the most recent block?",
    "created_at": "2020-09-09T14:34:55Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485661976",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485661976"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485661976"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485661976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 98,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485665973",
    "pull_request_review_id": 485041059,
    "id": 485665973,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NTk3Mw==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 119,
    "original_position": 118,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why doesn't this fail for `pindex->nHeight == 1` given that we don't index block 0?",
    "created_at": "2020-09-09T14:40:04Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485665973",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485665973"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485665973"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485665973/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485669614",
    "pull_request_review_id": 485041059,
    "id": 485669614,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2OTYxNA==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 168,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "(Why) are we using the tip disk size here? The index now contains the disk size at the time the index was made.",
    "created_at": "2020-09-09T14:44:49Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485669614",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485669614"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485669614"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/485669614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 168,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488283833",
    "pull_request_review_id": 488211432,
    "id": 488283833,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4MzgzMw==",
    "diff_hunk": "@@ -23,6 +23,7 @@\n #include <httpserver.h>\n #include <index/blockfilterindex.h>\n #include <index/txindex.h>\n+#include <index/coinstatsindex.h>",
    "path": "src/init.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed",
    "created_at": "2020-09-14T22:58:34Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488283833",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488283833"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488283833"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488283833/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 24,
    "original_line": 24,
    "side": "RIGHT",
    "in_reply_to_id": 479786750
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488283873",
    "pull_request_review_id": 488211486,
    "id": 488283873,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4Mzg3Mw==",
    "diff_hunk": "@@ -432,6 +440,7 @@ void SetupServerArgs(NodeContext& node)\n                  strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n                  \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n                  ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-coinstatsindex\", strprintf(\"Maintain coin statistics index, used by the gettxoutset rpc call (default: %u)\", DEFAULT_COINSTATSINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "fe86a280c3f49da89acd3cb93eb9189f6f6c2a9d",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed",
    "created_at": "2020-09-14T22:58:41Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488283873",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488283873"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488283873"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488283873/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 443,
    "side": "RIGHT",
    "in_reply_to_id": 479787149
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284233",
    "pull_request_review_id": 488211895,
    "id": 488284233,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDIzMw==",
    "diff_hunk": "@@ -0,0 +1,50 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_COINSTATSINDEX_H\n+#define BITCOIN_INDEX_COINSTATSINDEX_H\n+\n+#include <chain.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+#include <node/coinstats.h>\n+\n+/**\n+ * CoinStatsIndex maintains statistics on the UTXO set.\n+ */\n+class CoinStatsIndex final : public BaseIndex\n+{\n+private:\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    uint64_t m_transaction_output_count;\n+    uint64_t m_bogo_size;\n+    CAmount m_total_amount;\n+    uint64_t m_disk_size;\n+\n+    bool ReverseBlock(const CBlock& block, const CBlockIndex* pindex);\n+protected:\n+    bool Init() override;\n+\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return \"coinstatsindex\"; }\n+\n+public:\n+    // Constructs the index, which becomes available to be queried.\n+    explicit CoinStatsIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Look up hash digest for a specific block using CBlockIndex",
    "path": "src/index/coinstatsindex.h",
    "position": null,
    "original_position": 43,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Fixed",
    "created_at": "2020-09-14T22:59:43Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284233",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284233"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284233"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284233/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 43,
    "side": "RIGHT",
    "in_reply_to_id": 485635996
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284358",
    "pull_request_review_id": 488211987,
    "id": 488284358,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDM1OA==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.disk_size = m_disk_size;\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 296,
    "original_position": 254,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure what you mean here. Like, in case of a reorg?",
    "created_at": "2020-09-14T23:00:00Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284358",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284358"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284358"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284358/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 296,
    "original_line": 296,
    "side": "RIGHT",
    "in_reply_to_id": 485646852
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284393",
    "pull_request_review_id": 488212027,
    "id": 488284393,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDM5Mw==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 98,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, this was just to initialize the values when the index is initialized itself. But initializing the values in the object is sufficient so I removed this.",
    "created_at": "2020-09-14T23:00:06Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284393",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284393"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284393"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284393/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 98,
    "side": "RIGHT",
    "in_reply_to_id": 485661976
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284437",
    "pull_request_review_id": 488212078,
    "id": 488284437,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDQzNw==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 119,
    "original_position": 118,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, we do index block 0, we just don't process the block data in the usual way but there is still an entry for it.",
    "created_at": "2020-09-14T23:00:13Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284437",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284437"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284437"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 485665973
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284467",
    "pull_request_review_id": 488212119,
    "id": 488284467,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODI4NDQ2Nw==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 168,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You are right, that doesn't make sense. I guess there is no reasonable way to get that number for every height so I removed it from the index.",
    "created_at": "2020-09-14T23:00:18Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284467",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284467"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284467"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/488284467/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 168,
    "side": "RIGHT",
    "in_reply_to_id": 485669614
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492091745",
    "pull_request_review_id": 492660697,
    "id": 492091745,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA5MTc0NQ==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    CCoinsView* coins_view = WITH_LOCK(cs_main, return &ChainstateActive().CoinsDB());\n+    m_disk_size = coins_view->EstimateSize();\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.disk_size = m_disk_size;\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 296,
    "original_position": 254,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "A rather large reorg (with difficulty adjustments),  where the new chain is shorter, but has more proof of work.",
    "created_at": "2020-09-21T14:27:11Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r492091745",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492091745"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r492091745"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/492091745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 296,
    "original_line": 296,
    "side": "RIGHT",
    "in_reply_to_id": 485646852
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500651118",
    "pull_request_review_id": 503427107,
    "id": 500651118,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1MTExOA==",
    "diff_hunk": "@@ -11,6 +11,7 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n+    \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could move `CCoinsStats` and related to src/coinstats.h to avoid this.",
    "created_at": "2020-10-06T23:26:51Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r500651118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500651118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r500651118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/500651118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 17,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502323841",
    "pull_request_review_id": 505535088,
    "id": 502323841,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyMzg0MQ==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": 67,
    "original_position": 68,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe add: `The genesis coinbase transaction is excluded from the UTXO set`, so users understand the result of `gettxoutsetinfo none 0` (`total_amount`: 0, `total_unspendable_amount`: 50, `unspendable_amount`: 50)",
    "created_at": "2020-10-09T10:04:08Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502323841",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502323841"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502323841"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502323841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1116,
    "original_line": 1116,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502325077",
    "pull_request_review_id": 505535088,
    "id": 502325077,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMyNTA3Nw==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {\n+                            {RPCResult::Type::STR_AMOUNT, \"unspendable_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"total_prevout_spent_amount\", \"\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Suggest dropping `total_` here and below, so it's clear this is per block.\r\n\r\nAlternatively, rename `total_unspendable_amount` to `cumulative_unspendable_amount`\r\n\r\nI also don't think the word \"amount\" is needed in the variable name. We already indicate count by using plural form, e.g. `txouts`. Finally I suggest putting `total` at the end, so variables with similar stuff are easier to spot, so:\r\n\r\n```\r\ntotal\r\ntotal_unspendable\r\nblock_info\r\n   prevout_spent\r\n   coinbase\r\n   new_outputs_ex_coinbase\r\n   unspendable\r\n   unspendables\r\n      genesis_block\r\n      ...\r\n```",
    "created_at": "2020-10-09T10:06:33Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502325077",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502325077"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502325077"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502325077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1027,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502335126",
    "pull_request_review_id": 505535088,
    "id": 502335126,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMzNTEyNg==",
    "diff_hunk": "@@ -123,6 +123,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n+    { \"gettxoutsetinfo\", 1, \"hash_or_height\" },",
    "path": "src/rpc/client.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "For other reviewers, see #15448 and #19949 for solutions to avoid having to pass a hash with `'\"1abc...'\"` ",
    "created_at": "2020-10-09T10:26:57Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502335126",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502335126"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502335126"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502335126/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 130,
    "original_line": 130,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502340746",
    "pull_request_review_id": 505535088,
    "id": 502340746,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MDc0Ng==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins excluded from the UTXO set (only available if coinstatsindex is used)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 69,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "\"permanently excluded\" makes it more clear this number does not include coinbase transactions.",
    "created_at": "2020-10-09T10:39:19Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502340746",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502340746"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502340746"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502340746/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1023,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502342030",
    "pull_request_review_id": 505535088,
    "id": 502342030,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MjAzMA==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "* `The current block height` -> `The (current) block height`\r\n* `bestblock` -> should probably be dropped if a `hash` argument is used, otherwise it's confusing",
    "created_at": "2020-10-09T10:41:50Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502342030",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502342030"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502342030"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502342030/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1083,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502343829",
    "pull_request_review_id": 505535088,
    "id": 502343829,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0MzgyOQ==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {\n+                            {RPCResult::Type::STR_AMOUNT, \"unspendable_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"total_prevout_spent_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"total_new_outputs_ex_coinbase_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"coinbase_amount\", \"\"},\n+                            {RPCResult::Type::OBJ, \"unspendables\", \"Detailed view of the unspendable categories\",\n+                            {\n+                                {RPCResult::Type::STR_AMOUNT, \"genesis_block\", \"\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"bip30\", \"\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It's not _due_ to BIP30 that these coins are lost. BIP30 prevents it from ever happening again, so doc could e.g. say: \"Transactions overridden by duplicates (no longer possible with BIP30)\"",
    "created_at": "2020-10-09T10:45:30Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502343829",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502343829"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502343829"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/502343829/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1033,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700006",
    "pull_request_review_id": 538911968,
    "id": 530700006,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMDAwNg==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": 67,
    "original_position": 68,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-11-25T23:59:43Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700006",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700006"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700006"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700006/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1116,
    "original_line": 1116,
    "side": "RIGHT",
    "in_reply_to_id": 502323841
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700074",
    "pull_request_review_id": 538912013,
    "id": 530700074,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMDA3NA==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {\n+                            {RPCResult::Type::STR_AMOUNT, \"unspendable_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"total_prevout_spent_amount\", \"\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I dropped the totals and amounts in block_info, I think that made sense. I think we should keep `total_amount` as is to keep compatibility and I left `total_unspendable_amount` as is so it's close to its pair on that level if that makes sense. I am not sure I understand the comment about putting total at the end. That was only in case I really want to keep the total somehow?",
    "created_at": "2020-11-25T23:59:55Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700074",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700074"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700074"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700074/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1027,
    "side": "RIGHT",
    "in_reply_to_id": 502325077
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700175",
    "pull_request_review_id": 538912105,
    "id": 530700175,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMDE3NQ==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins excluded from the UTXO set (only available if coinstatsindex is used)\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 69,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-11-26T00:00:13Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700175",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700175"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700175"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700175/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1023,
    "side": "RIGHT",
    "in_reply_to_id": 502340746
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700778",
    "pull_request_review_id": 538912773,
    "id": 530700778,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMDc3OA==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the `bestblock` help text was confusing as it was outdated so I changed it. Otherwise, I think it's ok to repeat the hash that was passed to keep consistency. Made the other change.",
    "created_at": "2020-11-26T00:02:39Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700778",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700778"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700778"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700778/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1083,
    "side": "RIGHT",
    "in_reply_to_id": 502342030
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700822",
    "pull_request_review_id": 538912842,
    "id": 530700822,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcwMDgyMg==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {\n+                            {RPCResult::Type::STR_AMOUNT, \"unspendable_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"total_prevout_spent_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"total_new_outputs_ex_coinbase_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"coinbase_amount\", \"\"},\n+                            {RPCResult::Type::OBJ, \"unspendables\", \"Detailed view of the unspendable categories\",\n+                            {\n+                                {RPCResult::Type::STR_AMOUNT, \"genesis_block\", \"\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"bip30\", \"\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2020-11-26T00:02:53Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700822",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700822"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700822"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/530700822/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1033,
    "side": "RIGHT",
    "in_reply_to_id": 502343829
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537047921",
    "pull_request_review_id": 545710064,
    "id": 537047921,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA0NzkyMQ==",
    "diff_hunk": "@@ -11,6 +11,7 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n+    \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sorry for the late reply, I am not sure if I can follow this: you mean src/node/coinstats.h (file was moved not too long ago I think), right? But the struct `CCoinsStats` is already in there.",
    "created_at": "2020-12-06T14:17:32Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r537047921",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537047921"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r537047921"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/537047921/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 17,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 500651118
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539306604",
    "pull_request_review_id": 548182382,
    "id": 539306604,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwNjYwNA==",
    "diff_hunk": "@@ -974,48 +1004,109 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The current block height (index)\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at the tip of the chain\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {\n+                            {RPCResult::Type::STR_AMOUNT, \"unspendable_amount\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"total_prevout_spent_amount\", \"\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 73,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Not sure what I meant either :-) It's fine now.",
    "created_at": "2020-12-09T13:30:13Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539306604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539306604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539306604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539306604/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1027,
    "side": "RIGHT",
    "in_reply_to_id": 502325077
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539325672",
    "pull_request_review_id": 548205526,
    "id": 539325672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyNTY3Mg==",
    "diff_hunk": "@@ -0,0 +1,296 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 117,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "2f6f9a7ad11209744fb0fbf797a1a87d9127dd5e",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "2f6f9a7ad11209744fb0fbf797a1a87d9127dd5e: I'm puzzled why we never hit this, maybe because I've only testsed on a node that saw very few reorgs.\r\n\r\nIf you have two blocks at height N, and you're processing a block at N+1, you might not always get the right block at height N if you use `DBHeightKey`. IIUC this could be solved with an else branch that tries `DBHashKey`.\r\n\r\nMight be good to have to test for that.",
    "created_at": "2020-12-09T13:56:13Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539325672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539325672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539325672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539325672/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 124,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539348593",
    "pull_request_review_id": 548205526,
    "id": 539348593,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM0ODU5Mw==",
    "diff_hunk": "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
    "path": "src/init.cpp",
    "position": 56,
    "original_position": 47,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "As a potential user, it would be nice if I can at least turn on pruning _after_ the index is generated, but I think that's for a separate PR.",
    "created_at": "2020-12-09T14:25:04Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539348593",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539348593"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539348593"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539348593/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 964,
    "original_line": 964,
    "side": "RIGHT",
    "in_reply_to_id": 463328440
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539350809",
    "pull_request_review_id": 548205526,
    "id": 539350809,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM1MDgwOQ==",
    "diff_hunk": "@@ -1552,6 +1563,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         filter_index_cache = max_cache / n_indexes;\n         nTotalCache -= filter_index_cache * n_indexes;\n     }\n+    int64_t coin_stats_cache = 0;",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 70,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5479000c79b254120b7535bf322869439ee33215",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "5479000c79b254120b7535bf322869439ee33215  nit: `coin_stats_cache_size`",
    "created_at": "2020-12-09T14:27:46Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539350809",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539350809"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539350809"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539350809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1566,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539353330",
    "pull_request_review_id": 548205526,
    "id": 539353330,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM1MzMzMA==",
    "diff_hunk": "@@ -60,11 +73,23 @@ static bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, T hash_obj, const\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-\n     stats.hashBlock = pcursor->GetBestBlock();\n+\n+    const CBlockIndex* block_index;\n     {\n         LOCK(cs_main);\n-        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n+        block_index = LookupBlockIndex(pcursor->GetBestBlock());",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5479000c79b254120b7535bf322869439ee33215",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "5479000c79b254120b7535bf322869439ee33215: consider splitting the usage of the index away from enabling the index",
    "created_at": "2020-12-09T14:30:52Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539353330",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539353330"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539353330"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539353330/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539358106",
    "pull_request_review_id": 548205526,
    "id": 539358106,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM1ODEwNg==",
    "diff_hunk": "@@ -25,6 +26,18 @@ uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+static bool CanUseIndex(CHashWriter& ss)\n+{\n+    return false;",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5479000c79b254120b7535bf322869439ee33215",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "5479000: this seems overly abstract, maybe just check the hash type in `GetUTXOStats`? Unless it makes more sense once MuHash is added.",
    "created_at": "2020-12-09T14:36:36Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539358106",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539358106"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539358106"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539358106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 31,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539363670",
    "pull_request_review_id": 548205526,
    "id": 539363670,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2MzY3MA==",
    "diff_hunk": "@@ -135,7 +157,17 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n                 Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n \n                 // Skip unspendable coins\n-                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+                if (coin.out.scriptPubKey.IsUnspendable()) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 152,
    "original_position": 54,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "fc621a8fbdb5ecad1866e754ad38c24bfedfe5c1",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fc621a8fbdb5ecad1866e754ad38c24bfedfe5c1  This can in theory also happen for other (future) reasons than `OP_RETURN`:\r\n```cpp\r\n    /**\r\n     * Returns whether the script is guaranteed to fail at execution,\r\n     * regardless of the initial stack. This allows outputs to be pruned\r\n     * instantly when entering the UTXO set.\r\n     */\r\n    bool IsUnspendable() const\r\n    {\r\n        return (size() > 0 && *begin() == OP_RETURN) || (size() > MAX_SCRIPT_SIZE);\r\n    }\r\n```",
    "created_at": "2020-12-09T14:43:23Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539363670",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539363670"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539363670"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/539363670/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 152,
    "original_line": 152,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566324962",
    "pull_request_review_id": 578634653,
    "id": 566324962,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjMyNDk2Mg==",
    "diff_hunk": "@@ -2482,7 +2553,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         {} },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          {\"verbose\", \"mempool_sequence\"} },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               {\"txid\",\"n\",\"include_mempool\"} },\n-    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {\"hash_type\"} },\n+    { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        {\"hash_type\", \"hash_or_height\"} },",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 208,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "355b91d454195e10289e34bdde755442d43bc30e",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "can remove this diff, and then rebase",
    "created_at": "2021-01-28T18:42:29Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r566324962",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566324962"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r566324962"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/566324962/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2556,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579896859",
    "pull_request_review_id": 594906161,
    "id": 579896859,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5Njg1OQ==",
    "diff_hunk": "@@ -25,6 +26,18 @@ uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n+static bool CanUseIndex(CHashWriter& ss)\n+{\n+    return false;",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 14,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5479000c79b254120b7535bf322869439ee33215",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-02-22T00:54:39Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579896859",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579896859"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579896859"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579896859/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 31,
    "side": "RIGHT",
    "in_reply_to_id": 539358106
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579896895",
    "pull_request_review_id": 594906201,
    "id": 579896895,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5Njg5NQ==",
    "diff_hunk": "@@ -1552,6 +1563,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         filter_index_cache = max_cache / n_indexes;\n         nTotalCache -= filter_index_cache * n_indexes;\n     }\n+    int64_t coin_stats_cache = 0;",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 70,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5479000c79b254120b7535bf322869439ee33215",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-02-22T00:54:57Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579896895",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579896895"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579896895"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579896895/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1566,
    "side": "RIGHT",
    "in_reply_to_id": 539350809
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579897540",
    "pull_request_review_id": 594906734,
    "id": 579897540,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg5NzU0MA==",
    "diff_hunk": "@@ -135,7 +157,17 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n                 Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n \n                 // Skip unspendable coins\n-                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+                if (coin.out.scriptPubKey.IsUnspendable()) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 152,
    "original_position": 54,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "fc621a8fbdb5ecad1866e754ad38c24bfedfe5c1",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yepp, to be honest I just didn't come up with a better name in the moment and didn't revisit it afterwards. Will give this some more thought of what a good name is. Maybe `unspendable_script`.",
    "created_at": "2021-02-22T00:58:18Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579897540",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579897540"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579897540"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/579897540/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 152,
    "original_line": 152,
    "side": "RIGHT",
    "in_reply_to_id": 539363670
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/581029128",
    "pull_request_review_id": 596324632,
    "id": 581029128,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4MTAyOTEyOA==",
    "diff_hunk": "@@ -0,0 +1,421 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_op_return;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_op_return);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "847e8ba7e6e17fc85bdb1e0a23fdd7daa4b481f5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "clang is unhappy: `unused member function 'DBHeightKey' [-Wunused-member-function]`",
    "created_at": "2021-02-23T13:22:04Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r581029128",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/581029128"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r581029128"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/581029128/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 56,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584320216",
    "pull_request_review_id": 600275639,
    "id": 584320216,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDMyMDIxNg==",
    "diff_hunk": "@@ -0,0 +1,421 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_op_return;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_op_return);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 56,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "847e8ba7e6e17fc85bdb1e0a23fdd7daa4b481f5",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "fixed",
    "created_at": "2021-02-28T16:14:57Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584320216",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584320216"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584320216"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584320216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 56,
    "side": "RIGHT",
    "in_reply_to_id": 581029128
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584385307",
    "pull_request_review_id": 600324372,
    "id": 584385307,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM4NTMwNw==",
    "diff_hunk": "@@ -60,11 +73,23 @@ static bool GetUTXOStats(CCoinsView* view, CCoinsStats& stats, T hash_obj, const\n     stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-\n     stats.hashBlock = pcursor->GetBestBlock();\n+\n+    const CBlockIndex* block_index;\n     {\n         LOCK(cs_main);\n-        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n+        block_index = LookupBlockIndex(pcursor->GetBestBlock());",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 38,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5479000c79b254120b7535bf322869439ee33215",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I added an option (`no_index`) for it in a new commit.",
    "created_at": "2021-03-01T00:04:00Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584385307",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584385307"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584385307"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584385307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 81,
    "side": "RIGHT",
    "in_reply_to_id": 539353330
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584385315",
    "pull_request_review_id": 600324385,
    "id": 584385315,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDM4NTMxNQ==",
    "diff_hunk": "@@ -135,7 +157,17 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n                 Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n \n                 // Skip unspendable coins\n-                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+                if (coin.out.scriptPubKey.IsUnspendable()) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 152,
    "original_position": 54,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "fc621a8fbdb5ecad1866e754ad38c24bfedfe5c1",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Renamed",
    "created_at": "2021-03-01T00:04:06Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584385315",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584385315"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584385315"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584385315/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 152,
    "original_line": 152,
    "side": "RIGHT",
    "in_reply_to_id": 539363670
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584591432",
    "pull_request_review_id": 600575630,
    "id": 584591432,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDU5MTQzMg==",
    "diff_hunk": "@@ -5437,7 +5437,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     // about the snapshot_chainstate.\n     CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n \n-    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, breakpoint_fnc)) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "917e29a7767d08f5ba04c7f91a4d0d265017e75b",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Because the snapshot uses `CoinStatsHashType::HASH_SERIALIZED` it might be better to initialise `stats` with that option explicitly, in case we ever change the default.",
    "created_at": "2021-03-01T10:16:01Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584591432",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584591432"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584591432"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584591432/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 5440,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584607991",
    "pull_request_review_id": 600575630,
    "id": 584607991,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDYwNzk5MQ==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 108,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "TODO what?",
    "created_at": "2021-03-01T10:41:33Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584607991",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584607991"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584607991"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584607991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 108,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584617745",
    "pull_request_review_id": 600575630,
    "id": 584617745,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDYxNzc0NQ==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);",
    "path": "src/index/coinstatsindex.cpp",
    "position": 168,
    "original_position": 133,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Are you sure bogo_size shouldn't be counted for `OP_RETURN`? I guess not, because you're testing that the result is consistent with a non-indexed node: https://github.com/bitcoin/bitcoin/pull/19521/commits/9c07684e444a5c8e1f81d19221c6217dada3da72#diff-a6434325d09a6df4b371513c837907dfc1a97cf540709def4bded9b2a17e3f49R61 ",
    "created_at": "2021-03-01T10:56:49Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584617745",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584617745"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584617745"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584617745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 168,
    "original_line": 168,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584621490",
    "pull_request_review_id": 600575630,
    "id": 584621490,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDYyMTQ5MA==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    if (BaseIndex::Init()) {\n+        const CBlockIndex* pindex = CurrentIndex();\n+\n+        if (pindex) {\n+            DBVal entry;\n+            if (!LookupOne(*m_db, pindex, entry)) {\n+                return false;\n+            }\n+\n+            m_transaction_output_count = entry.transaction_output_count;\n+            m_bogo_size = entry.bogo_size;\n+            m_total_amount = entry.total_amount;\n+            m_total_subsidy = entry.total_subsidy;\n+            m_block_unspendable_amount = entry.block_unspendable_amount;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 357,
    "original_position": 297,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "1fc3470c1b03857245b94eebde5cd0f18805a884: I think these ended up in the wrong commit",
    "created_at": "2021-03-01T11:02:29Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584621490",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584621490"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584621490"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584621490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 357,
    "original_line": 357,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584624182",
    "pull_request_review_id": 600575630,
    "id": 584624182,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDYyNDE4Mg==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    if (BaseIndex::Init()) {\n+        const CBlockIndex* pindex = CurrentIndex();\n+\n+        if (pindex) {\n+            DBVal entry;\n+            if (!LookupOne(*m_db, pindex, entry)) {\n+                return false;\n+            }\n+\n+            m_transaction_output_count = entry.transaction_output_count;\n+            m_bogo_size = entry.bogo_size;\n+            m_total_amount = entry.total_amount;\n+            m_total_subsidy = entry.total_subsidy;\n+            m_block_unspendable_amount = entry.block_unspendable_amount;\n+            m_block_prevout_spent_amount = entry.block_prevout_spent_amount;\n+            m_block_new_outputs_ex_coinbase_amount = entry.block_new_outputs_ex_coinbase_amount;\n+            m_block_coinbase_amount = entry.block_coinbase_amount;\n+            m_unspendables_genesis_block = entry.unspendables_genesis_block;\n+            m_unspendables_bip30 = entry.unspendables_bip30;\n+            m_unspendables_op_return = entry.unspendables_op_return;\n+            m_unspendables_unclaimed_rewards = entry.unspendables_unclaimed_rewards;\n+        }\n+\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+\n+\n+// Reverse Block in case of reorg\n+bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    std::pair<uint256, DBVal> read_out;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+    }\n+\n+    // Remove the new utxos that were created from the block\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const auto& tx = block.vtx.at(i);\n+\n+        for (size_t j = 0; j < tx->vout.size(); ++j) {\n+            const CTxOut& out = tx->vout[j];\n+            COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+            Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+            // Skip unspendable coins\n+            if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+            m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));",
    "path": "src/index/coinstatsindex.cpp",
    "position": 417,
    "original_position": 349,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "1fc3470c1b03857245b94eebde5cd0f18805a884 if you're checking MuHash for consistency, why not also check the other variables?",
    "created_at": "2021-03-01T11:06:41Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584624182",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584624182"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584624182"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584624182/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 417,
    "original_line": 417,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584626513",
    "pull_request_review_id": 600575630,
    "id": 584626513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDYyNjUxMw==",
    "diff_hunk": "@@ -0,0 +1,309 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    uint64_t disk_size;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.disk_size);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    DBVal result;\n+    if (!m_db->Read(DB_BLOCK_HASH, result)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_BLOCK_HASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        m_transaction_output_count = 0;\n+        m_bogo_size = 0;\n+        m_total_amount = 0;\n+        m_disk_size = 0;\n+    }\n+\n+    return BaseIndex::Init();\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 119,
    "original_position": 118,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d28fed9b50c21b5f170b10f10532467989f043e5",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How _do_ we process the genesis block?",
    "created_at": "2021-03-01T11:10:18Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584626513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584626513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584626513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584626513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 119,
    "original_line": 119,
    "side": "RIGHT",
    "in_reply_to_id": 485665973
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584630707",
    "pull_request_review_id": 600575630,
    "id": 584630707,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDYzMDcwNw==",
    "diff_hunk": "@@ -0,0 +1,85 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test CoinStatsIndex across nodes.\n+\n+Test that the values returned by gettxoutsetinfo are consistent\n+between a node running the coinstatsindex and a node without\n+the index.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    try_rpc,\n+)\n+\n+class CoinStatsIndexTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.supports_cli = False\n+        self.extra_args = [\n+            [],\n+            [\"-coinstatsindex\"]\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self._test_coin_stats_index()\n+\n+    def _test_coin_stats_index(self):\n+        node = self.nodes[0]\n+        index_node = self.nodes[1]\n+        # Both none and muhash options allow the usage of the index\n+        index_hash_options = ['none', 'muhash']\n+\n+        # Generate a normal transaction and mine it\n+        node.generate(101)\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+\n+        self.sync_blocks(timeout=120)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\")\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo))\n+        res0 = node.gettxoutsetinfo('none')\n+\n+        # The fields 'disk_size' and 'transactions' do not exist on the index\n+        del res0['disk_size'], res0['transactions']\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            res1 = index_node.gettxoutsetinfo(hash_option)\n+            res1.pop('muhash', None)\n+\n+            # Everything left should be the same\n+            assert_equal(res1, res0)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() can get fetch data on specific heights with index\")",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": 95,
    "original_position": 64,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "9c07684e444a5c8e1f81d19221c6217dada3da72",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would be nice to add a test here that adds a block and then rolls it back, to see if the result is untouched.",
    "created_at": "2021-03-01T11:17:11Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584630707",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584630707"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584630707"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584630707/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 95,
    "original_line": 95,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584829802",
    "pull_request_review_id": 600883358,
    "id": 584829802,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NDgyOTgwMg==",
    "diff_hunk": "@@ -127,6 +127,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n+    { \"gettxoutsetinfo\", 1, \"hash_or_height\" },\n     { \"lockunspent\", 0, \"unlock\" },",
    "path": "src/rpc/client.cpp",
    "position": 6,
    "original_position": 5,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "c3488a426f7ef71e45143e4bd797d06332bd5287",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "rpc_help.py looking for `{ \"gettxoutsetinfo\", 2, \"no_index\"}` here:\r\n\r\n```\r\nFile \"/bitcoin/test/functional/rpc_help.py\", line 51, in run_test\r\n    self.test_client_conversion_table()\r\nFile \"/bitcoin/test/functional/rpc_help.py\", line 69, in test_client_conversion_table\r\n    raise AssertionError(\"RPC client conversion table ({}) and RPC server named arguments mismatch!\\n{}\".format(\r\nAssertionError: RPC client conversion table (/bitcoin/src/rpc/client.cpp) and RPC server named arguments mismatch!\r\n{('gettxoutsetinfo', 2, 'no_index')}\r\n```",
    "created_at": "2021-03-01T15:49:47Z",
    "updated_at": "2021-04-19T19:23:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584829802",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584829802"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584829802"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/584829802/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 132,
    "original_line": 132,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585149164",
    "pull_request_review_id": 601291223,
    "id": 585149164,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE0OTE2NA==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 108,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sorry, I confused myself quite a bit because I thought deduplicating bip30 block stuff was part of a Coinstats PR discussion and I had made a commit in a local branch but after searching for it for a while I realized now that it wasn't there, it was actually in #19888. So, this was actually a \"I think I had something that I might want to use here\" reminder for this: https://github.com/bitcoin/bitcoin/pull/19888/commits/b8797b064099aafadc0bbc9f152a962f76dd31e3. But I am not sure if it's worth it to throw another consensus critical code refactoring commit in here.",
    "created_at": "2021-03-02T00:17:31Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585149164",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585149164"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585149164"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585149164/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 108,
    "side": "RIGHT",
    "in_reply_to_id": 584607991
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585155146",
    "pull_request_review_id": 601298874,
    "id": 585155146,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTE1NTE0Ng==",
    "diff_hunk": "@@ -127,6 +127,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n+    { \"gettxoutsetinfo\", 1, \"hash_or_height\" },\n     { \"lockunspent\", 0, \"unlock\" },",
    "path": "src/rpc/client.cpp",
    "position": 6,
    "original_position": 5,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "c3488a426f7ef71e45143e4bd797d06332bd5287",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, strange I don't see this fail when running `rpc_help.py` locally. Should be fixed now.",
    "created_at": "2021-03-02T00:28:03Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585155146",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585155146"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585155146"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585155146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 132,
    "original_line": 132,
    "side": "RIGHT",
    "in_reply_to_id": 584829802
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585331716",
    "pull_request_review_id": 601513117,
    "id": 585331716,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTMzMTcxNg==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 108,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Definitely not. You could just make a separate PR for it later, and maybe write a comment to point out the duplication. ",
    "created_at": "2021-03-02T07:51:28Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585331716",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585331716"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585331716"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585331716/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 108,
    "side": "RIGHT",
    "in_reply_to_id": 584607991
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585414659",
    "pull_request_review_id": 601621830,
    "id": 585414659,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQxNDY1OQ==",
    "diff_hunk": "@@ -1043,42 +1073,80 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"no_index\", RPCArg::Type::BOOL, /* default */ \"false\", \"Don't use Coinstatsindex even when it is available.\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5491fd38861253923387e92a386c1892035dece6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Instead of double-negation this could be named `use_index (default: true)`?",
    "created_at": "2021-03-02T09:45:58Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585414659",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585414659"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585414659"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585414659/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1080,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585415984",
    "pull_request_review_id": 601621830,
    "id": 585415984,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTQxNTk4NA==",
    "diff_hunk": "@@ -15,38 +14,41 @@\n from test_framework.muhash import MuHash3072\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n class UTXOSetHashTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def test_deterministic_hash_results(self):\n         self.log.info(\"Test deterministic UTXO set hash results\")\n \n-        # These depend on the setup_clean_chain option, the chain loaded from the cache\n-        assert_equal(self.nodes[0].gettxoutsetinfo()['hash_serialized_2'], \"b32ec1dda5a53cd025b95387aad344a801825fe46a60ff952ce26528f01d3be8\")\n-        assert_equal(self.nodes[0].gettxoutsetinfo(\"muhash\")['muhash'], \"dd5ad2a105c2d29495f577245c357409002329b9f4d6182c0af3dc2f462555c8\")\n+        node = self.nodes[0]\n+        mocktime = node.getblockheader(node.getblockhash(0))['time'] + 1\n+        node.setmocktime(mocktime)\n+        blocks = node.generate(10)",
    "path": "test/functional/feature_utxo_set_hash.py",
    "position": null,
    "original_position": 31,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5491fd38861253923387e92a386c1892035dece6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would be nice to use a fixed address, instead of relying on the hardcoded one to not change. Also, could this be split up into a separate test-only pull?",
    "created_at": "2021-03-02T09:47:43Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585415984",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585415984"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585415984"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/585415984/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586842261",
    "pull_request_review_id": 603412830,
    "id": 586842261,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4Njg0MjI2MQ==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);",
    "path": "src/index/coinstatsindex.cpp",
    "position": 168,
    "original_position": 133,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, to be consistent we should only count stuff that actually ends up in the UTXO set.",
    "created_at": "2021-03-03T22:32:17Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586842261",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586842261"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586842261"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586842261/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 168,
    "original_line": 168,
    "side": "RIGHT",
    "in_reply_to_id": 584617745
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586921614",
    "pull_request_review_id": 603548602,
    "id": 586921614,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkyMTYxNA==",
    "diff_hunk": "@@ -1043,42 +1073,80 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"no_index\", RPCArg::Type::BOOL, /* default */ \"false\", \"Don't use Coinstatsindex even when it is available.\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 53,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5491fd38861253923387e92a386c1892035dece6",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-03-04T00:39:18Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586921614",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586921614"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586921614"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586921614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1080,
    "side": "RIGHT",
    "in_reply_to_id": 585414659
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586922720",
    "pull_request_review_id": 603553861,
    "id": 586922720,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkyMjcyMA==",
    "diff_hunk": "@@ -15,38 +14,41 @@\n from test_framework.muhash import MuHash3072\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n class UTXOSetHashTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def test_deterministic_hash_results(self):\n         self.log.info(\"Test deterministic UTXO set hash results\")\n \n-        # These depend on the setup_clean_chain option, the chain loaded from the cache\n-        assert_equal(self.nodes[0].gettxoutsetinfo()['hash_serialized_2'], \"b32ec1dda5a53cd025b95387aad344a801825fe46a60ff952ce26528f01d3be8\")\n-        assert_equal(self.nodes[0].gettxoutsetinfo(\"muhash\")['muhash'], \"dd5ad2a105c2d29495f577245c357409002329b9f4d6182c0af3dc2f462555c8\")\n+        node = self.nodes[0]\n+        mocktime = node.getblockheader(node.getblockhash(0))['time'] + 1\n+        node.setmocktime(mocktime)\n+        blocks = node.generate(10)",
    "path": "test/functional/feature_utxo_set_hash.py",
    "position": null,
    "original_position": 31,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5491fd38861253923387e92a386c1892035dece6",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, I also still want to switch the test to use MiniWallet, that improvement is coming up. I could make a test only pull but personally, I find it hard to review a PR without some tests alongside it. But overall this has still grown quite a bit and there are probably still plenty of tests to be written, so I will think about where to make a good cut.",
    "created_at": "2021-03-04T00:42:24Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586922720",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586922720"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586922720"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586922720/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 585415984
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923367",
    "pull_request_review_id": 603557538,
    "id": 586923367,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkyMzM2Nw==",
    "diff_hunk": "@@ -0,0 +1,85 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test CoinStatsIndex across nodes.\n+\n+Test that the values returned by gettxoutsetinfo are consistent\n+between a node running the coinstatsindex and a node without\n+the index.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    try_rpc,\n+)\n+\n+class CoinStatsIndexTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.supports_cli = False\n+        self.extra_args = [\n+            [],\n+            [\"-coinstatsindex\"]\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self._test_coin_stats_index()\n+\n+    def _test_coin_stats_index(self):\n+        node = self.nodes[0]\n+        index_node = self.nodes[1]\n+        # Both none and muhash options allow the usage of the index\n+        index_hash_options = ['none', 'muhash']\n+\n+        # Generate a normal transaction and mine it\n+        node.generate(101)\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+\n+        self.sync_blocks(timeout=120)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\")\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo))\n+        res0 = node.gettxoutsetinfo('none')\n+\n+        # The fields 'disk_size' and 'transactions' do not exist on the index\n+        del res0['disk_size'], res0['transactions']\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            res1 = index_node.gettxoutsetinfo(hash_option)\n+            res1.pop('muhash', None)\n+\n+            # Everything left should be the same\n+            assert_equal(res1, res0)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() can get fetch data on specific heights with index\")",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": 95,
    "original_position": 64,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "9c07684e444a5c8e1f81d19221c6217dada3da72",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I added the test, please let me know if you can think of other scenarios that I might have missed.",
    "created_at": "2021-03-04T00:44:19Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923367",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923367"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923367"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 95,
    "original_line": 95,
    "side": "RIGHT",
    "in_reply_to_id": 584630707
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923385",
    "pull_request_review_id": 603557646,
    "id": 586923385,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkyMzM4NQ==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    if (BaseIndex::Init()) {\n+        const CBlockIndex* pindex = CurrentIndex();\n+\n+        if (pindex) {\n+            DBVal entry;\n+            if (!LookupOne(*m_db, pindex, entry)) {\n+                return false;\n+            }\n+\n+            m_transaction_output_count = entry.transaction_output_count;\n+            m_bogo_size = entry.bogo_size;\n+            m_total_amount = entry.total_amount;\n+            m_total_subsidy = entry.total_subsidy;\n+            m_block_unspendable_amount = entry.block_unspendable_amount;\n+            m_block_prevout_spent_amount = entry.block_prevout_spent_amount;\n+            m_block_new_outputs_ex_coinbase_amount = entry.block_new_outputs_ex_coinbase_amount;\n+            m_block_coinbase_amount = entry.block_coinbase_amount;\n+            m_unspendables_genesis_block = entry.unspendables_genesis_block;\n+            m_unspendables_bip30 = entry.unspendables_bip30;\n+            m_unspendables_op_return = entry.unspendables_op_return;\n+            m_unspendables_unclaimed_rewards = entry.unspendables_unclaimed_rewards;\n+        }\n+\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+\n+\n+// Reverse Block in case of reorg\n+bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    std::pair<uint256, DBVal> read_out;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+    }\n+\n+    // Remove the new utxos that were created from the block\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const auto& tx = block.vtx.at(i);\n+\n+        for (size_t j = 0; j < tx->vout.size(); ++j) {\n+            const CTxOut& out = tx->vout[j];\n+            COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+            Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+\n+            // Skip unspendable coins\n+            if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+            m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));",
    "path": "src/index/coinstatsindex.cpp",
    "position": 417,
    "original_position": 349,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-03-04T00:44:23Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923385",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923385"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923385"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923385/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 417,
    "original_line": 417,
    "side": "RIGHT",
    "in_reply_to_id": 584624182
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923437",
    "pull_request_review_id": 603557868,
    "id": 586923437,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkyMzQzNw==",
    "diff_hunk": "@@ -0,0 +1,379 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        // TODO\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {\n+                const auto& tx_undo = block_undo.vtxundo.at(i-1);\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin = tx_undo.vprevout[j];\n+                    COutPoint outpoint = COutPoint(tx->vin[j].prevout.hash, tx->vin[j].prevout.n);\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_transaction_output_count--;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    if (!m_db->Write(DB_MUHASH, m_muhash)) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip = g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash());\n+        auto& consensus_params = Params().GetConsensus();\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                               __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookupStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    if (BaseIndex::Init()) {\n+        const CBlockIndex* pindex = CurrentIndex();\n+\n+        if (pindex) {\n+            DBVal entry;\n+            if (!LookupOne(*m_db, pindex, entry)) {\n+                return false;\n+            }\n+\n+            m_transaction_output_count = entry.transaction_output_count;\n+            m_bogo_size = entry.bogo_size;\n+            m_total_amount = entry.total_amount;\n+            m_total_subsidy = entry.total_subsidy;\n+            m_block_unspendable_amount = entry.block_unspendable_amount;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 357,
    "original_position": 297,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "1fc3470c1b03857245b94eebde5cd0f18805a884",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yepp, fixed.",
    "created_at": "2021-03-04T00:44:30Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923437",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923437"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923437"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923437/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 357,
    "original_line": 357,
    "side": "RIGHT",
    "in_reply_to_id": 584621490
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923513",
    "pull_request_review_id": 603558203,
    "id": 586923513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NjkyMzUxMw==",
    "diff_hunk": "@@ -5437,7 +5437,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n     // about the snapshot_chainstate.\n     CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n \n-    if (!GetUTXOStats(snapshot_coinsdb, stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+    if (!GetUTXOStats(snapshot_coinsdb, stats, breakpoint_fnc)) {",
    "path": "src/validation.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "917e29a7767d08f5ba04c7f91a4d0d265017e75b",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yepp, makes sense. Done.",
    "created_at": "2021-03-04T00:44:41Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/586923513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 5440,
    "side": "RIGHT",
    "in_reply_to_id": 584591432
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589029056",
    "pull_request_review_id": 605845036,
    "id": 589029056,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTAyOTA1Ng==",
    "diff_hunk": "@@ -15,38 +14,41 @@\n from test_framework.muhash import MuHash3072\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n class UTXOSetHashTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def test_deterministic_hash_results(self):\n         self.log.info(\"Test deterministic UTXO set hash results\")\n \n-        # These depend on the setup_clean_chain option, the chain loaded from the cache\n-        assert_equal(self.nodes[0].gettxoutsetinfo()['hash_serialized_2'], \"b32ec1dda5a53cd025b95387aad344a801825fe46a60ff952ce26528f01d3be8\")\n-        assert_equal(self.nodes[0].gettxoutsetinfo(\"muhash\")['muhash'], \"dd5ad2a105c2d29495f577245c357409002329b9f4d6182c0af3dc2f462555c8\")\n+        node = self.nodes[0]\n+        mocktime = node.getblockheader(node.getblockhash(0))['time'] + 1\n+        node.setmocktime(mocktime)\n+        blocks = node.generate(10)",
    "path": "test/functional/feature_utxo_set_hash.py",
    "position": null,
    "original_position": 31,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5491fd38861253923387e92a386c1892035dece6",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Splitting up the tests makes it easier to check for accidental regressions (https://github.com/bitcoin/bitcoin/pull/19145#discussion_r575334728, https://github.com/bitcoin/bitcoin/pull/19145#pullrequestreview-579351730, ...). If the tests are changed along with changes that should be refactor-only or new tests added for a different feature than the one being introduced, it may be easier to miss bugs.\r\n\r\nObviously a good first step is to touch the tests in separate commits, whenever possible, so the only burden to reviewers is to run the tests on each commit.",
    "created_at": "2021-03-07T13:16:12Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589029056",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589029056"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589029056"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589029056/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 585415984
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589070367",
    "pull_request_review_id": 605873130,
    "id": 589070367,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA3MDM2Nw==",
    "diff_hunk": "@@ -0,0 +1,372 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODOi: Deduplicate BIP30 related code",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 110,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d608c400411f1451d6298efc1bf6f200a56aa136",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "d608c400411f1451d6298efc1bf6f200a56aa136: no need to brag that you use `vim`",
    "created_at": "2021-03-07T18:40:35Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589070367",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589070367"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589070367"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589070367/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589072478",
    "pull_request_review_id": 605873130,
    "id": 589072478,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTA3MjQ3OA==",
    "diff_hunk": "@@ -247,6 +248,32 @@ def _test_use_index_option(self):\n         del res['disk_size'], option_res['disk_size']\n         assert_equal(res, option_res)\n \n+    def _test_reorg_index(self):\n+        self.log.info(\"Test that index can handle reorgs\")\n+\n+        # Generate a block, let the index catch up, then invalidate the block\n+        index_node = self.nodes[1]\n+        reorg_block = index_node.generatetoaddress(1, index_node.getnewaddress())[0]\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        index_node.invalidateblock(reorg_block)\n+        assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n+\n+        # Add two new blocks\n+        blocks = index_node.generate(2)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+\n+        # Test that the result of the reorged block is not returned for its old block height\n+        res = index_node.gettxoutsetinfo('muhash', 111)\n+        assert_equal(res[\"bestblock\"], blocks[0])",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": null,
    "original_position": 28,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "29ac833e8f94189bc33f735028428370b3d6de76",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`stats.hashBlock = pindex->GetBlockHash();` so this check doesn't really do much. I believe what you want to (also) check here is that `muhash` for height 111 matches `muhash` for `blocks[0]`.\r\n\r\nFor context, the bit I'm worried about is that `CoinStatsIndex::WriteBlock` first attempts to fetch by height, only then falls back to fetching by hash.\r\n\r\nSo in the case of a reorg, I think it will ignore the hash and give you the result form the active tip branch. But the reorg I had in mind would come from a temporarily disconnected node (with some unique transaction so it's different). \r\n\r\nIn other words, try querying a reorged block by hash and see if it returns the right muhash, rather than the main chain one. \r\n\r\n```cpp\r\n        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\r\n            return false;\r\n        }\r\n\r\n        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\r\n        if (read_out.first != expected_block_hash) {\r\n            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\r\n```\r\n\r\nAnother thing you can test is what happens when you activate the index _after_ a reorg (but I think fixing issues there can wait).",
    "created_at": "2021-03-07T18:59:45Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589072478",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589072478"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589072478"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589072478/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589729470",
    "pull_request_review_id": 606684195,
    "id": 589729470,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTcyOTQ3MA==",
    "diff_hunk": "@@ -0,0 +1,372 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODOi: Deduplicate BIP30 related code",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 110,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "d608c400411f1451d6298efc1bf6f200a56aa136",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "You caught me ;) Fixed.",
    "created_at": "2021-03-08T20:34:50Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589729470",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589729470"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589729470"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589729470/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 110,
    "side": "RIGHT",
    "in_reply_to_id": 589070367
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589733818",
    "pull_request_review_id": 606689524,
    "id": 589733818,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTczMzgxOA==",
    "diff_hunk": "@@ -15,38 +14,41 @@\n from test_framework.muhash import MuHash3072\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from test_framework.wallet import MiniWallet\n \n class UTXOSetHashTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def test_deterministic_hash_results(self):\n         self.log.info(\"Test deterministic UTXO set hash results\")\n \n-        # These depend on the setup_clean_chain option, the chain loaded from the cache\n-        assert_equal(self.nodes[0].gettxoutsetinfo()['hash_serialized_2'], \"b32ec1dda5a53cd025b95387aad344a801825fe46a60ff952ce26528f01d3be8\")\n-        assert_equal(self.nodes[0].gettxoutsetinfo(\"muhash\")['muhash'], \"dd5ad2a105c2d29495f577245c357409002329b9f4d6182c0af3dc2f462555c8\")\n+        node = self.nodes[0]\n+        mocktime = node.getblockheader(node.getblockhash(0))['time'] + 1\n+        node.setmocktime(mocktime)\n+        blocks = node.generate(10)",
    "path": "test/functional/feature_utxo_set_hash.py",
    "position": null,
    "original_position": 31,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5491fd38861253923387e92a386c1892035dece6",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think I got you now. Initially, I misunderstood that I should move all the tests in this PR into separate PRs but I think you were only referring to the #19145 follow-ups, correct? I have moved these into #21390 and use one of the deterministic privkeys there now.",
    "created_at": "2021-03-08T20:42:08Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589733818",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589733818"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589733818"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589733818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 585415984
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589785367",
    "pull_request_review_id": 606754869,
    "id": 589785367,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4OTc4NTM2Nw==",
    "diff_hunk": "@@ -247,6 +248,32 @@ def _test_use_index_option(self):\n         del res['disk_size'], option_res['disk_size']\n         assert_equal(res, option_res)\n \n+    def _test_reorg_index(self):\n+        self.log.info(\"Test that index can handle reorgs\")\n+\n+        # Generate a block, let the index catch up, then invalidate the block\n+        index_node = self.nodes[1]\n+        reorg_block = index_node.generatetoaddress(1, index_node.getnewaddress())[0]\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        index_node.invalidateblock(reorg_block)\n+        assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n+\n+        # Add two new blocks\n+        blocks = index_node.generate(2)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+\n+        # Test that the result of the reorged block is not returned for its old block height\n+        res = index_node.gettxoutsetinfo('muhash', 111)\n+        assert_equal(res[\"bestblock\"], blocks[0])",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": null,
    "original_position": 28,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "29ac833e8f94189bc33f735028428370b3d6de76",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Interesting. Thanks for the clearer description @Sjors. The reorg case that you describe here (querying a reorged out block by hash) would return an error until now because `ParseHashOrHeight()` is checking that the queried block is part of the active chain. But I think it could be interesting to have that functionality so I removed this check and added the test. It works fine. However, I am still a bit unsure if I should integrate this here or pull it out into a separate PR because `ParseHashOrHeight()` is also used by `getblockstats` so it leads to a behavior change there too. Tests are passing though and I tend to think it's ok. But I have left it as a separate WIP commit for now for easier inspection.\r\n\r\n> Another thing you can test is what happens when you activate the index after a reorg (but I think fixing issues there can wait).\r\n\r\nNot sure I fully understand this one. Do you mean just activating the index for the first time on a node that is aware of some stale blocks?",
    "created_at": "2021-03-08T22:11:30Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589785367",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589785367"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589785367"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/589785367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT",
    "in_reply_to_id": 589072478
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/590101001",
    "pull_request_review_id": 607167332,
    "id": 590101001,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDEwMTAwMQ==",
    "diff_hunk": "@@ -247,6 +248,32 @@ def _test_use_index_option(self):\n         del res['disk_size'], option_res['disk_size']\n         assert_equal(res, option_res)\n \n+    def _test_reorg_index(self):\n+        self.log.info(\"Test that index can handle reorgs\")\n+\n+        # Generate a block, let the index catch up, then invalidate the block\n+        index_node = self.nodes[1]\n+        reorg_block = index_node.generatetoaddress(1, index_node.getnewaddress())[0]\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        index_node.invalidateblock(reorg_block)\n+        assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n+\n+        # Add two new blocks\n+        blocks = index_node.generate(2)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+\n+        # Test that the result of the reorged block is not returned for its old block height\n+        res = index_node.gettxoutsetinfo('muhash', 111)\n+        assert_equal(res[\"bestblock\"], blocks[0])",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": null,
    "original_position": 28,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "29ac833e8f94189bc33f735028428370b3d6de76",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> But I think it could be interesting to have that functionality so I removed this check and added the test. It works fine.\r\n\r\nNice!\r\n\r\n> Do you mean just activating the index for the first time on a node that is aware of some stale blocks?\r\n\r\nCorrect. Do those stale blocks get indexed?\r\n\r\n",
    "created_at": "2021-03-09T09:06:03Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r590101001",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/590101001"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r590101001"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/590101001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT",
    "in_reply_to_id": 589072478
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/590143682",
    "pull_request_review_id": 607205351,
    "id": 590143682,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MDE0MzY4Mg==",
    "diff_hunk": "@@ -247,6 +248,32 @@ def _test_use_index_option(self):\n         del res['disk_size'], option_res['disk_size']\n         assert_equal(res, option_res)\n \n+    def _test_reorg_index(self):\n+        self.log.info(\"Test that index can handle reorgs\")\n+\n+        # Generate a block, let the index catch up, then invalidate the block\n+        index_node = self.nodes[1]\n+        reorg_block = index_node.generatetoaddress(1, index_node.getnewaddress())[0]\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        index_node.invalidateblock(reorg_block)\n+        assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n+\n+        # Add two new blocks\n+        blocks = index_node.generate(2)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+\n+        # Test that the result of the reorged block is not returned for its old block height\n+        res = index_node.gettxoutsetinfo('muhash', 111)\n+        assert_equal(res[\"bestblock\"], blocks[0])",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": null,
    "original_position": 28,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "29ac833e8f94189bc33f735028428370b3d6de76",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I expanded the test to do a deeper reorg: https://github.com/Sjors/bitcoin/commit/24c37b2dc446e944176093f1cd47f32686cdd1aa",
    "created_at": "2021-03-09T09:45:47Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r590143682",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/590143682"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r590143682"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/590143682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT",
    "in_reply_to_id": 589072478
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591963642",
    "pull_request_review_id": 609278537,
    "id": 591963642,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MTk2MzY0Mg==",
    "diff_hunk": "@@ -247,6 +248,32 @@ def _test_use_index_option(self):\n         del res['disk_size'], option_res['disk_size']\n         assert_equal(res, option_res)\n \n+    def _test_reorg_index(self):\n+        self.log.info(\"Test that index can handle reorgs\")\n+\n+        # Generate a block, let the index catch up, then invalidate the block\n+        index_node = self.nodes[1]\n+        reorg_block = index_node.generatetoaddress(1, index_node.getnewaddress())[0]\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        index_node.invalidateblock(reorg_block)\n+        assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n+\n+        # Add two new blocks\n+        blocks = index_node.generate(2)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+\n+        # Test that the result of the reorged block is not returned for its old block height\n+        res = index_node.gettxoutsetinfo('muhash', 111)\n+        assert_equal(res[\"bestblock\"], blocks[0])",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": null,
    "original_position": 28,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "29ac833e8f94189bc33f735028428370b3d6de76",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Cool, I pulled in your changes and made you co-author. The stale blocks don't get indexed because the base index only follows the active chain when syncing. I have added some additional coverage for that in the reorg test part, mainly to document that behavior. I have pulled the change that allows querying stale blocks in its own commit so it's more clear that this also touches `getblockstats` and that that gets the attention such a side effect deserves.",
    "created_at": "2021-03-10T23:50:26Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r591963642",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591963642"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r591963642"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/591963642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT",
    "in_reply_to_id": 589072478
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592832081",
    "pull_request_review_id": 610362273,
    "id": 592832081,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MjgzMjA4MQ==",
    "diff_hunk": "@@ -1809,6 +1821,11 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX)) {\n+        g_coin_stats_index = MakeUnique<CoinStatsIndex>(coin_stats_cache_size, false, fReindex);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "28d2bc80d610d6f783934bab3efba0019dca6276",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).",
    "created_at": "2021-03-12T00:45:24Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r592832081",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592832081"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r592832081"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/592832081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1825,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593512325",
    "pull_request_review_id": 611229945,
    "id": 593512325,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5MzUxMjMyNQ==",
    "diff_hunk": "@@ -1809,6 +1821,11 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX)) {\n+        g_coin_stats_index = MakeUnique<CoinStatsIndex>(coin_stats_cache_size, false, fReindex);",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "28d2bc80d610d6f783934bab3efba0019dca6276",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-03-12T23:53:28Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r593512325",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593512325"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r593512325"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/593512325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1825,
    "side": "RIGHT",
    "in_reply_to_id": 592832081
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594262300",
    "pull_request_review_id": 612093575,
    "id": 594262300,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDI2MjMwMA==",
    "diff_hunk": "@@ -0,0 +1,480 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 102,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "7e1382942fdd51cdfbc2f83e84a14bd6489220b7",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm seeing build errors here (debian gcc 10.2.1)\r\n```\r\nindex/coinstatsindex.cpp: In constructor \u2018CoinStatsIndex::CoinStatsIndex(size_t, bool, bool)\u2019:\r\nindex/coinstatsindex.cpp:102:12: error: \u2018MakeUnique\u2019 was not declared in this scope\r\n  102 |     m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\r\n      |            ^~~~~~~~~~\r\n```\r\nand with clang 11\r\n```\r\nindex/coinstatsindex.cpp:102:12: error: use of undeclared identifier 'MakeUnique'\r\n    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\r\n           ^\r\n1 error generated.\r\n```\r\nmaybe need to use `std::make_unique`",
    "created_at": "2021-03-15T11:38:47Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594262300",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594262300"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594262300"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594262300/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594291070",
    "pull_request_review_id": 612131751,
    "id": 594291070,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDI5MTA3MA==",
    "diff_hunk": "@@ -0,0 +1,480 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 102,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "7e1382942fdd51cdfbc2f83e84a14bd6489220b7",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Update: build, unit tests and `test/functional/feature_coinstatsindex.py` are green for me locally after replacing with `std::make_unique`.",
    "created_at": "2021-03-15T12:26:57Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594291070",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594291070"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594291070"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594291070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT",
    "in_reply_to_id": 594262300
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594698655",
    "pull_request_review_id": 612661710,
    "id": 594698655,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY5ODY1NQ==",
    "diff_hunk": "@@ -0,0 +1,480 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = MakeUnique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 102,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "7e1382942fdd51cdfbc2f83e84a14bd6489220b7",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ugh, indeed, sloppily overlooked during the last update. Thanks @jonatack ! Fixed.",
    "created_at": "2021-03-15T21:33:28Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594698655",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594698655"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594698655"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/594698655/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 102,
    "side": "RIGHT",
    "in_reply_to_id": 594262300
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599507629",
    "pull_request_review_id": 618507858,
    "id": 599507629,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTUwNzYyOQ==",
    "diff_hunk": "@@ -1087,9 +1156,38 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n+        if (!stats.from_index) {\n+            ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n+        }\n     } else {\n+        if (g_coin_stats_index && (g_coin_stats_index->GetSummary().synced == false)) {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set. Coinstatsindex is still syncing.\");",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Perhaps provide the best block height so the user doesn't have to call `getindexinfo` to find out. Maybe a bit long, but something like:\r\n\r\nUnable to read the UTXO set beyond the current best block height of 3190, as the coinstatsindex is still syncing.",
    "created_at": "2021-03-23T12:05:42Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599507629",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599507629"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599507629"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599507629/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1189,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599606214",
    "pull_request_review_id": 618507858,
    "id": 599606214,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTYwNjIxNA==",
    "diff_hunk": "@@ -341,6 +341,6 @@ MuHash3072& MuHash3072::Insert(Span<const unsigned char> in) noexcept {\n }\n \n MuHash3072& MuHash3072::Remove(Span<const unsigned char> in) noexcept {\n-    m_numerator.Divide(ToNum3072(in));\n+    m_denominator.Multiply(ToNum3072(in));",
    "path": "src/crypto/muhash.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "9d4c991 if you retouch, it would be nice to provide some context in the commit message, point to a discussion or benchmark, etc.",
    "created_at": "2021-03-23T14:13:41Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599606214",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599606214"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599606214"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599606214/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 344,
    "original_line": 344,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599652604",
    "pull_request_review_id": 618507858,
    "id": 599652604,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5OTY1MjYwNA==",
    "diff_hunk": "@@ -264,7 +264,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                 CCoinsStats stats;",
    "path": "src/test/fuzz/coins_view.cpp",
    "position": null,
    "original_position": 1,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "31d0b7f7 could make the same change here as in `validation.cpp:L5421` in the same commit (or vice-versa)\r\n\r\nTwo possible simplifications:\r\n\r\na) pass the argument in the tests, drop unneeded ctor that is currently only used for tests\r\n```diff\r\nsrc/node/coinstats.h\r\n@@ -56,7 +56,6 @@ struct CCoinsStats \r\n     CCoinsStats(CoinStatsHashType hash_type) : m_hash_type(hash_type) {}\r\n-    CCoinsStats() : m_hash_type(CoinStatsHashType::HASH_SERIALIZED) {}\r\n \r\nsrc/test/coinstatsindex_tests.cpp\r\n@@ -14,7 +14,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\r\n { \r\n-    CCoinsStats coin_stats;\r\n+    CCoinsStats coin_stats{CoinStatsHashType::HASH_SERIALIZED};\r\n     const CBlockIndex* block_index;\r\n@@ -57,7 +57,7 @@ BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\r\n \r\n-    CCoinsStats new_coin_stats;\r\n+    CCoinsStats new_coin_stats{CoinStatsHashType::HASH_SERIALIZED};\r\n     const CBlockIndex* new_block_index;\r\n\r\nsrc/test/fuzz/coins_view.cpp\r\n@@ -261,7 +261,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\r\n-                CCoinsStats stats;\r\n+                CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};\r\n                 bool expected_code_path = false;\r\n```\r\nb) use the default member initializer as the general default, overridden by the specific one in ctor member initializer list\r\n```diff\r\nsrc/node/coinstats.h\r\n@@ -26,7 +26,7 @@ enum class CoinStatsHashType { \r\n struct CCoinsStats\r\n {\r\n-    CoinStatsHashType m_hash_type;\r\n+    CoinStatsHashType m_hash_type{CoinStatsHashType::HASH_SERIALIZED};\r\n@@ -56,7 +56,7 @@ struct CCoinsStats \r\n-    CCoinsStats() : m_hash_type(CoinStatsHashType::HASH_SERIALIZED) {}\r\n+    CCoinsStats() {}\r\n };\r\n\r\nsrc/validation.cpp\r\n@@ -5418,7 +5418,7 @@ bool ChainstateManager::PopulateAndValidateSnapshot( \r\n-    CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};\r\n+    CCoinsStats stats;\r\n```\r\n",
    "created_at": "2021-03-23T15:01:30Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599652604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599652604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599652604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/599652604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 261,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602524356",
    "pull_request_review_id": 618507858,
    "id": 602524356,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjUyNDM1Ng==",
    "diff_hunk": "@@ -11,6 +11,7 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n+    \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It would be nice indeed to avoid adding a circular dependency.",
    "created_at": "2021-03-26T18:56:52Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602524356",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602524356"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602524356"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602524356/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 17,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 500651118
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602784581",
    "pull_request_review_id": 622697217,
    "id": 602784581,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjc4NDU4MQ==",
    "diff_hunk": "@@ -123,6 +123,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n+    { \"gettxoutsetinfo\", 1, \"hash_or_height\" },",
    "path": "src/rpc/client.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "590b887de0b5f6cb ISTM this line should be added in 6aedd7bb05  where the `hash_or_height` param is added",
    "created_at": "2021-03-27T19:47:05Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602784581",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602784581"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602784581"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602784581/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 130,
    "original_line": 130,
    "side": "RIGHT",
    "in_reply_to_id": 502335126
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602785206",
    "pull_request_review_id": 622697634,
    "id": 602785206,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjc4NTIwNg==",
    "diff_hunk": "@@ -0,0 +1,480 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 143,
    "original_position": 142,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "590b887de0b5f6cb didn't look deeply but does there need to be an equivalent inverse of this BIP30 duplicate transactions code in `CoinStatsIndex::ReverseBlock()`?",
    "created_at": "2021-03-27T19:52:49Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602785206",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602785206"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602785206"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602785206/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 143,
    "original_line": 143,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602930964",
    "pull_request_review_id": 622782022,
    "id": 602930964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMjkzMDk2NA==",
    "diff_hunk": "@@ -1087,9 +1156,38 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n+        if (!stats.from_index) {\n+            ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n+        }\n     } else {\n+        if (g_coin_stats_index && (g_coin_stats_index->GetSummary().synced == false)) {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set. Coinstatsindex is still syncing.\");",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "leonardojobim",
      "id": 2694753,
      "node_id": "MDQ6VXNlcjI2OTQ3NTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2694753?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/leonardojobim",
      "html_url": "https://github.com/leonardojobim",
      "followers_url": "https://api.github.com/users/leonardojobim/followers",
      "following_url": "https://api.github.com/users/leonardojobim/following{/other_user}",
      "gists_url": "https://api.github.com/users/leonardojobim/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/leonardojobim/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/leonardojobim/subscriptions",
      "organizations_url": "https://api.github.com/users/leonardojobim/orgs",
      "repos_url": "https://api.github.com/users/leonardojobim/repos",
      "events_url": "https://api.github.com/users/leonardojobim/events{/privacy}",
      "received_events_url": "https://api.github.com/users/leonardojobim/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just a follow-up suggestion.\r\nIt adds the current Coinstatsindex height in the error message, so the the user can see the progress of the synchronization.\r\n\r\n```\r\nUnable to read UTXO set. Coinstatsindex is still syncing. Current height: 77329\r\nUnable to read UTXO set. Coinstatsindex is still syncing. Current height: 86827\r\n```\r\n\r\n```suggestion\r\n            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set. Coinstatsindex is still syncing. Current height: \" + \r\n                std::to_string(g_coin_stats_index->GetSummary().best_block_height));\r\n```",
    "created_at": "2021-03-28T20:52:36Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602930964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602930964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602930964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/602930964/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1189,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603605338",
    "pull_request_review_id": 623631847,
    "id": 603605338,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzYwNTMzOA==",
    "diff_hunk": "@@ -393,6 +401,11 @@ void SetupServerArgs(NodeContext& node)\n #endif\n     argsman.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-blockfilterindex=<type>\",",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In 435ed5ba6589bf8391c3374ebf74bafed5f13237 \"index: Coinstats index can be activated with command line flag\"\r\n\r\nThis is an unrelated move. It isn't necessary to have all of the arguments in alphabetical order, the formatter for output will do that automatically.",
    "created_at": "2021-03-29T20:52:12Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603605338",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603605338"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603605338"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603605338/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 404,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603606325",
    "pull_request_review_id": 623631847,
    "id": 603606325,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzYwNjMyNQ==",
    "diff_hunk": "@@ -1034,10 +1043,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In 435ed5ba6589bf8391c3374ebf74bafed5f13237 \"index: Coinstats index can be activated with command line flag\"\r\n\r\nThis comment is incorrect. The block filter index is not disallowed when pruning is enabled.",
    "created_at": "2021-03-29T20:53:56Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603606325",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603606325"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603606325"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603606325/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1046,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603607663",
    "pull_request_review_id": 623631847,
    "id": 603607663,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzYwNzY2Mw==",
    "diff_hunk": "@@ -1003,10 +1012,12 @@ bool AppInitParameterInteraction()\n         return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (gArgs.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));",
    "path": "src/init.cpp",
    "position": 56,
    "original_position": 47,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0269ff80aa936a226f5c41b7e06b49caa88e82e4",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think it is necessary to disallow the coin stats index when pruning is enabled. The only reason that txindex disallows it is because txindex gets the transaction data by reading it off disk from the block files, so that is incompatible with pruning.\r\n\r\nThe coin stats index doesn't have the same problem. The only issue would be if there were a large reorg and it needed the undo data that has already been deleted. However this is an issue overall of pruned nodes so it shouldn't be a concern for the coin stats index.",
    "created_at": "2021-03-29T20:56:08Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603607663",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603607663"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603607663"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603607663/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 964,
    "original_line": 964,
    "side": "RIGHT",
    "in_reply_to_id": 463328440
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603608582",
    "pull_request_review_id": 623631847,
    "id": 603608582,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzYwODU4Mg==",
    "diff_hunk": "@@ -91,12 +92,20 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-\n     stats.hashBlock = pcursor->GetBestBlock();\n+\n+    const CBlockIndex* pindex;\n     {\n         LOCK(cs_main);\n         assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n-        stats.nHeight = blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n+        pindex = blockman.LookupBlockIndex(stats.hashBlock);\n+    }\n+\n+    stats.nHeight = pindex->nHeight;\n+\n+    // Use CoinStatsIndex if it is available and hash_type none was requested",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In 435ed5ba6589bf8391c3374ebf74bafed5f13237 \"index: Coinstats index can be activated with command line flag\"\r\n\r\n`hash_type muhash` is also allowed.",
    "created_at": "2021-03-29T20:57:35Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603608582",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603608582"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603608582"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603608582/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603616976",
    "pull_request_review_id": 623631847,
    "id": 603616976,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzYxNjk3Ng==",
    "diff_hunk": "@@ -0,0 +1,372 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 139,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "e880a5e95b999369bc277ed4d0ecbf0eaa758e88",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In e880a5e95b999369bc277ed4d0ecbf0eaa758e88 \"index: Add Coinstats index\"\r\n\r\nThis would be easier to read as `if (!tx->IsCoinbase())`",
    "created_at": "2021-03-29T21:12:28Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603616976",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603616976"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603616976"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603616976/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 139,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603624171",
    "pull_request_review_id": 623663651,
    "id": 603624171,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzYyNDE3MQ==",
    "diff_hunk": "@@ -91,12 +92,20 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-\n     stats.hashBlock = pcursor->GetBestBlock();\n+\n+    const CBlockIndex* pindex;\n     {\n         LOCK(cs_main);\n         assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n-        stats.nHeight = blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n+        pindex = blockman.LookupBlockIndex(stats.hashBlock);\n+    }\n+\n+    stats.nHeight = pindex->nHeight;\n+\n+    // Use CoinStatsIndex if it is available and hash_type none was requested",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "agree, made a similar comment here: https://github.com/jonatack/bitcoin/commit/d4fb34de51a3d21ae68e8331822020e6fc2f06e6#r48780818",
    "created_at": "2021-03-29T21:25:35Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603624171",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603624171"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603624171"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603624171/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT",
    "in_reply_to_id": 603608582
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603624618",
    "pull_request_review_id": 623664266,
    "id": 603624618,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMzYyNDYxOA==",
    "diff_hunk": "@@ -1034,10 +1043,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree: https://github.com/jonatack/bitcoin/commit/d4fb34de51a3d21ae68e8331822020e6fc2f06e6#r48780784",
    "created_at": "2021-03-29T21:26:30Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603624618",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603624618"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603624618"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/603624618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1046,
    "side": "RIGHT",
    "in_reply_to_id": 603606325
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374124",
    "pull_request_review_id": 628212428,
    "id": 607374124,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzM3NDEyNA==",
    "diff_hunk": "@@ -0,0 +1,372 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out = tx->vout[j];\n+                Coin coin = Coin(out, pindex->nHeight, tx->IsCoinBase());\n+                COutPoint outpoint = COutPoint(tx->GetHash(), j);\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (i > 0) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": null,
    "original_position": 139,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "e880a5e95b999369bc277ed4d0ecbf0eaa758e88",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-05T22:38:15Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374124",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374124"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374124"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374124/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 139,
    "side": "RIGHT",
    "in_reply_to_id": 603616976
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374153",
    "pull_request_review_id": 628212455,
    "id": 607374153,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzM3NDE1Mw==",
    "diff_hunk": "@@ -91,12 +92,20 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-\n     stats.hashBlock = pcursor->GetBestBlock();\n+\n+    const CBlockIndex* pindex;\n     {\n         LOCK(cs_main);\n         assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n-        stats.nHeight = blockman.LookupBlockIndex(stats.hashBlock)->nHeight;\n+        pindex = blockman.LookupBlockIndex(stats.hashBlock);\n+    }\n+\n+    stats.nHeight = pindex->nHeight;\n+\n+    // Use CoinStatsIndex if it is available and hash_type none was requested",
    "path": "src/node/coinstats.cpp",
    "position": null,
    "original_position": 25,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-05T22:38:20Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374153",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374153"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374153"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 106,
    "side": "RIGHT",
    "in_reply_to_id": 603608582
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374219",
    "pull_request_review_id": 628212542,
    "id": 607374219,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzM3NDIxOQ==",
    "diff_hunk": "@@ -1034,10 +1043,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex, coinstatsindex and blockfilterindex",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 57,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It was when I first wrote that commit ;) fixed",
    "created_at": "2021-04-05T22:38:31Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374219",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374219"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374219"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374219/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1046,
    "side": "RIGHT",
    "in_reply_to_id": 603606325
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374254",
    "pull_request_review_id": 628212583,
    "id": 607374254,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzM3NDI1NA==",
    "diff_hunk": "@@ -393,6 +401,11 @@ void SetupServerArgs(NodeContext& node)\n #endif\n     argsman.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-blockfilterindex=<type>\",",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "435ed5ba6589bf8391c3374ebf74bafed5f13237",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Undone",
    "created_at": "2021-04-05T22:38:38Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374254",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374254"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374254"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374254/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 404,
    "side": "RIGHT",
    "in_reply_to_id": 603605338
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374299",
    "pull_request_review_id": 628212650,
    "id": 607374299,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzM3NDI5OQ==",
    "diff_hunk": "@@ -1087,9 +1156,38 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n+        if (!stats.from_index) {\n+            ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n+        }\n     } else {\n+        if (g_coin_stats_index && (g_coin_stats_index->GetSummary().synced == false)) {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set. Coinstatsindex is still syncing.\");",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks, I added this with some tweaks.",
    "created_at": "2021-04-05T22:38:45Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374299",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374299"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374299"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374299/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1189,
    "side": "RIGHT",
    "in_reply_to_id": 602930964
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374334",
    "pull_request_review_id": 628212696,
    "id": 607374334,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzM3NDMzNA==",
    "diff_hunk": "@@ -0,0 +1,480 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 143,
    "original_position": 142,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No, only if we would expect to reorg this deep :)",
    "created_at": "2021-04-05T22:38:53Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374334",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374334"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374334"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 143,
    "original_line": 143,
    "side": "RIGHT",
    "in_reply_to_id": 602785206
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374536",
    "pull_request_review_id": 628212884,
    "id": 607374536,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzM3NDUzNg==",
    "diff_hunk": "@@ -1087,9 +1156,38 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n+        if (!stats.from_index) {\n+            ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n+        }\n     } else {\n+        if (g_coin_stats_index && (g_coin_stats_index->GetSummary().synced == false)) {\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set. Coinstatsindex is still syncing.\");",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-05T22:39:21Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374536",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374536"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374536"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607374536/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1189,
    "side": "RIGHT",
    "in_reply_to_id": 599507629
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607685333",
    "pull_request_review_id": 628753736,
    "id": 607685333,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzY4NTMzMw==",
    "diff_hunk": "@@ -0,0 +1,480 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coin stats index DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path = GetDataDir() / \"indexes\" / \"coinstats\";\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block = (pindex->nHeight==91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                              (pindex->nHeight==91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"));\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx = block.vtx.at(i);\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 143,
    "original_position": 142,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Which (also) can't happen because of the checkpoint at height 295,000.",
    "created_at": "2021-04-06T09:20:13Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607685333",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607685333"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607685333"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607685333/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 143,
    "original_line": 143,
    "side": "RIGHT",
    "in_reply_to_id": 602785206
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607823680",
    "pull_request_review_id": 628935807,
    "id": 607823680,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzgyMzY4MA==",
    "diff_hunk": "@@ -0,0 +1,470 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;\n+                }\n+\n+                ++m_transaction_output_count;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (!tx->IsCoinBase()) {\n+                const auto& tx_undo{block_undo.vtxundo.at(i - 1)};\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin{tx_undo.vprevout[j]};\n+                    COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_block_prevout_spent_amount += coin.out.nValue;\n+\n+                    --m_transaction_output_count;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    } else {\n+        m_block_unspendable_amount += block_subsidy;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 191,
    "original_position": 189,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "5b683ab suggest adding a comment here, as this is quite far away from the parent `if`\r\n```diff\r\n     } else {\r\n+        // genesis block\r\n         m_block_unspendable_amount += block_subsidy;\r\n         m_unspendables_genesis_block += block_subsidy;\r\n```",
    "created_at": "2021-04-06T12:56:13Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607823680",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607823680"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607823680"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607823680/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 191,
    "original_line": 191,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607846449",
    "pull_request_review_id": 628935807,
    "id": 607846449,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzg0NjQ0OQ==",
    "diff_hunk": "@@ -1043,42 +1070,84 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n-                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"use_index\", RPCArg::Type::BOOL, /* default */ \"true\", \"Use Coinstatsindex even when it is available.\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "7287e76f28\r\n\r\n- what does this mean: \"Use Coinstatsindex even when it is available.\" ... I am `#notsurehere` but maybe it is supposed to say:\r\n```suggestion\r\n                    {\"use_index\", RPCArg::Type::BOOL, /* default */ \"true\", \"Use coinstatsindex, if available\"},\r\n```\r\n\r\n- s/Coinstatsindex/coinstatsindex/ for consistency\r\n\r\n- drop full stops for consistency\r\n",
    "created_at": "2021-04-06T13:25:54Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607846449",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607846449"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607846449"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607846449/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1077,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607877856",
    "pull_request_review_id": 628935807,
    "id": 607877856,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzg3Nzg1Ng==",
    "diff_hunk": "@@ -1087,9 +1156,42 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n+        if (!stats.index_used) {\n+            ret.pushKV(\"transactions\", static_cast<int64_t>(stats.nTransactions));\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n+        }\n     } else {\n+        if (g_coin_stats_index) {\n+            IndexSummary summary = g_coin_stats_index->GetSummary();\n+\n+            if (!summary.synced) {\n+                throw JSONRPCError(RPC_INTERNAL_ERROR, strprintf(\"Unable to read UTXO set. coinstatsindex is still syncing. Current height: %d\", summary.best_block_height));",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "13d2fc63ac\r\n\r\nVerified this new error message (thanks for improving this):\r\n```\r\n$ bitcoin-cli -signet gettxoutsetinfo muhash 32353\r\nerror code: -32603\r\nerror message:\r\nUnable to read UTXO set. coinstatsindex is still syncing. Current height: 31025\r\n```\r\n\r\nsuggestion, as \"coinstatsindex\" after a full stop looks a little odd:\r\n```suggestion\r\n                throw JSONRPCError(RPC_INTERNAL_ERROR, strprintf(\"Unable to read UTXO set because coinstatsindex is still syncing. Current height: %d\", summary.best_block_height));\r\n```",
    "created_at": "2021-04-06T14:02:19Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607877856",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607877856"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607877856"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607877856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1192,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607881278",
    "pull_request_review_id": 628935807,
    "id": 607881278,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzg4MTI3OA==",
    "diff_hunk": "@@ -1087,9 +1156,42 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n+        if (!stats.index_used) {\n+            ret.pushKV(\"transactions\", static_cast<int64_t>(stats.nTransactions));\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n+        }\n     } else {\n+        if (g_coin_stats_index) {\n+            IndexSummary summary = g_coin_stats_index->GetSummary();",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 172,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "13d2fc63ac\r\n\r\n```suggestion\r\n            const IndexSummary summary{g_coin_stats_index->GetSummary()};\r\n```",
    "created_at": "2021-04-06T14:06:21Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607881278",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607881278"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607881278"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607881278/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1189,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607884218",
    "pull_request_review_id": 628935807,
    "id": 607884218,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNzg4NDIxOA==",
    "diff_hunk": "@@ -1562,6 +1573,7 @@ bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAn\n         filter_index_cache = max_cache / n_indexes;\n         nTotalCache -= filter_index_cache * n_indexes;\n     }\n+    int64_t coin_stats_cache_size = 0;",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "13d2fc6 looks like this can be const (I'm not sure there is a reason to declare this variable instead of doing `std::make_unique<CoinStatsIndex>(/* coin_stats_cache_size */ 0, false, fReindex);` at line 1829 below)",
    "created_at": "2021-04-06T14:09:42Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607884218",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607884218"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607884218"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/607884218/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1576,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608214880",
    "pull_request_review_id": 629451877,
    "id": 608214880,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIxNDg4MA==",
    "diff_hunk": "@@ -11,6 +11,7 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"index/txindex -> validation -> index/txindex\"\n+    \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"",
    "path": "test/lint/lint-circular-dependencies.sh",
    "position": 4,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "106231807935bf24334827d1edf1d25acb1933d2",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree but I don't see how to achieve this with some refactor if it's done right. It's is on the top of my TODO list to resolve some circular dependencies but I think it's out of the scope of this PR.",
    "created_at": "2021-04-06T22:15:39Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608214880",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608214880"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608214880"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608214880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 17,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 500651118
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232424",
    "pull_request_review_id": 629472465,
    "id": 608232424,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIzMjQyNA==",
    "diff_hunk": "@@ -264,7 +264,7 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                 CCoinsStats stats;",
    "path": "src/test/fuzz/coins_view.cpp",
    "position": null,
    "original_position": 1,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I have dropped the ctor. We need to keep the explicit passing of the hash type in validation in case any default changes but we still need hash_serialized for assume_utxo.",
    "created_at": "2021-04-06T23:01:07Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232424",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232424"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232424"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232424/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 261,
    "side": "RIGHT",
    "in_reply_to_id": 599652604
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232610",
    "pull_request_review_id": 629472710,
    "id": 608232610,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIzMjYxMA==",
    "diff_hunk": "@@ -0,0 +1,470 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;\n+                }\n+\n+                ++m_transaction_output_count;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (!tx->IsCoinBase()) {\n+                const auto& tx_undo{block_undo.vtxundo.at(i - 1)};\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin{tx_undo.vprevout[j]};\n+                    COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_block_prevout_spent_amount += coin.out.nValue;\n+\n+                    --m_transaction_output_count;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    } else {\n+        m_block_unspendable_amount += block_subsidy;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 191,
    "original_position": 189,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-06T23:01:35Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232610",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232610"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232610"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232610/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 191,
    "original_line": 191,
    "side": "RIGHT",
    "in_reply_to_id": 607823680
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232675",
    "pull_request_review_id": 629472795,
    "id": 608232675,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIzMjY3NQ==",
    "diff_hunk": "@@ -1043,42 +1070,84 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n-                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_type\", RPCArg::Type::STR, /* default */ \"hash_serialized_2\", \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"use_index\", RPCArg::Type::BOOL, /* default */ \"true\", \"Use Coinstatsindex even when it is available.\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 51,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hm, I already fixed this but must have undone it somehow in all the rebasing :-/ I hope it works now.",
    "created_at": "2021-04-06T23:01:45Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232675",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232675"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232675"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232675/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1077,
    "side": "RIGHT",
    "in_reply_to_id": 607846449
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232769",
    "pull_request_review_id": 629472890,
    "id": 608232769,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIzMjc2OQ==",
    "diff_hunk": "@@ -1087,9 +1156,42 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n+        if (!stats.index_used) {\n+            ret.pushKV(\"transactions\", static_cast<int64_t>(stats.nTransactions));\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n+        }\n     } else {\n+        if (g_coin_stats_index) {\n+            IndexSummary summary = g_coin_stats_index->GetSummary();",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 172,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2021-04-06T23:01:56Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232769",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232769"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232769"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232769/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1189,
    "side": "RIGHT",
    "in_reply_to_id": 607881278
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232810",
    "pull_request_review_id": 629472946,
    "id": 608232810,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIzMjgxMA==",
    "diff_hunk": "@@ -1562,6 +1573,7 @@ bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAn\n         filter_index_cache = max_cache / n_indexes;\n         nTotalCache -= filter_index_cache * n_indexes;\n     }\n+    int64_t coin_stats_cache_size = 0;",
    "path": "src/init.cpp",
    "position": null,
    "original_position": 64,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5860532c4041bc3f90fc1f8919f56b6f3955ae9f",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done (inlined)",
    "created_at": "2021-04-06T23:02:01Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232810",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232810"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232810"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608232810/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1576,
    "side": "RIGHT",
    "in_reply_to_id": 607884218
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611155443",
    "pull_request_review_id": 632989041,
    "id": 611155443,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMTE1NTQ0Mw==",
    "diff_hunk": "@@ -341,6 +341,6 @@ MuHash3072& MuHash3072::Insert(Span<const unsigned char> in) noexcept {\n }\n \n MuHash3072& MuHash3072::Remove(Span<const unsigned char> in) noexcept {\n-    m_numerator.Divide(ToNum3072(in));\n+    m_denominator.Multiply(ToNum3072(in));",
    "path": "src/crypto/muhash.cpp",
    "position": 5,
    "original_position": 5,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "b12f331cbf2544291693368f3600937965f05490",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks; done in latest update a4eaae4",
    "created_at": "2021-04-11T08:58:57Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r611155443",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611155443"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r611155443"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/611155443/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 344,
    "original_line": 344,
    "side": "RIGHT",
    "in_reply_to_id": 599606214
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615311365",
    "pull_request_review_id": 638278909,
    "id": 615311365,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMxMTM2NQ==",
    "diff_hunk": "@@ -140,6 +140,35 @@ static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* b\n     return blockindex == tip ? 1 : -1;\n }\n \n+CBlockIndex* ParseHashOrHeight(const UniValue& param, ChainstateManager& chainman) {\n+    LOCK(::cs_main);\n+    CChain& active_chain = chainman.ActiveChain();\n+\n+    if (param.isNum()) {\n+        const int height{param.get_int()};\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        const int current_tip{active_chain.Height()};\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        return active_chain[height];\n+    } else {\n+        const uint256 hash{ParseHashV(param, \"hash_or_height\")};\n+        CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (active_chain.Contains(pindex)) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0123b7e4e2dc259cb7205d037ba4e2c232980ee0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In 0123b7e4e2 \"rpc: gettxoutsetinfo can be requested for specific blockheights\" the range-diff seems to be:\r\n```diff\r\n-        if (!::ChainActive().Contains(pindex)) {\r\n+        if (active_chain.Contains(pindex)) {\r\n```\r\nShould it be `if (!active_chain.Contains(pindex)) {` ? (it's late so I may be misreading)",
    "created_at": "2021-04-17T22:26:17Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615311365",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615311365"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615311365"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615311365/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 165,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615311910",
    "pull_request_review_id": 638279171,
    "id": 615311910,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMxMTkxMA==",
    "diff_hunk": "@@ -140,6 +140,35 @@ static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* b\n     return blockindex == tip ? 1 : -1;\n }\n \n+CBlockIndex* ParseHashOrHeight(const UniValue& param, ChainstateManager& chainman) {\n+    LOCK(::cs_main);\n+    CChain& active_chain = chainman.ActiveChain();\n+\n+    if (param.isNum()) {\n+        const int height{param.get_int()};\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        const int current_tip{active_chain.Height()};\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        return active_chain[height];\n+    } else {\n+        const uint256 hash{ParseHashV(param, \"hash_or_height\")};\n+        CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (active_chain.Contains(pindex)) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0123b7e4e2dc259cb7205d037ba4e2c232980ee0",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Looks like that commit and then f87cf789 are affected. Ugh, my sympathies for the rebase.",
    "created_at": "2021-04-17T22:32:28Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615311910",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615311910"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615311910"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615311910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 165,
    "side": "RIGHT",
    "in_reply_to_id": 615311365
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615313624",
    "pull_request_review_id": 638279960,
    "id": 615313624,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNTMxMzYyNA==",
    "diff_hunk": "@@ -140,6 +140,35 @@ static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* b\n     return blockindex == tip ? 1 : -1;\n }\n \n+CBlockIndex* ParseHashOrHeight(const UniValue& param, ChainstateManager& chainman) {\n+    LOCK(::cs_main);\n+    CChain& active_chain = chainman.ActiveChain();\n+\n+    if (param.isNum()) {\n+        const int height{param.get_int()};\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        const int current_tip{active_chain.Height()};\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        return active_chain[height];\n+    } else {\n+        const uint256 hash{ParseHashV(param, \"hash_or_height\")};\n+        CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (active_chain.Contains(pindex)) {",
    "path": "src/rpc/blockchain.cpp",
    "position": null,
    "original_position": 26,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "0123b7e4e2dc259cb7205d037ba4e2c232980ee0",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yepp, thanks. Fixed!",
    "created_at": "2021-04-17T22:53:36Z",
    "updated_at": "2021-04-19T19:23:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615313624",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615313624"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615313624"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/615313624/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 165,
    "side": "RIGHT",
    "in_reply_to_id": 615311365
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616228938",
    "pull_request_review_id": 639371891,
    "id": 616228938,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNjIyODkzOA==",
    "diff_hunk": "@@ -1068,50 +1096,88 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},",
    "path": "src/rpc/blockchain.cpp",
    "position": 50,
    "original_position": 50,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit if you have to rebase, this is the only help argument of the three that doesn't end with a period.\r\n\r\n```suggestion\r\n                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex).\", \"\", {\"\", \"string or numeric\"}},\r\n```",
    "created_at": "2021-04-19T22:53:25Z",
    "updated_at": "2021-04-19T22:55:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r616228938",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616228938"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r616228938"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/616228938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1102,
    "original_line": 1102,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617340759",
    "pull_request_review_id": 640805550,
    "id": 617340759,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzM0MDc1OQ==",
    "diff_hunk": "@@ -23,6 +23,7 @@ enum class CoinStatsHashType {\n \n struct CCoinsStats\n {\n+    CoinStatsHashType m_hash_type;",
    "path": "src/node/coinstats.h",
    "position": 14,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "9c8a265fd21a87228c18a1661df99fedc1866baf",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "9c8a265fd21a87228c18a1661df99fedc1866baf\r\n\r\n`const CoinStatsHashType m_hash_type` and drop constructor.",
    "created_at": "2021-04-21T09:08:26Z",
    "updated_at": "2021-04-21T09:49:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617340759",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617340759"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617340759"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617340759/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 29,
    "original_line": 26,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617359458",
    "pull_request_review_id": 640805550,
    "id": 617359458,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzM1OTQ1OA==",
    "diff_hunk": "@@ -89,22 +89,24 @@ static void ApplyStats(CCoinsStats& stats, const uint256& hash, const std::map<u\n \n //! Calculate statistics about the unspent transaction output set\n template <typename T>\n-static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, T hash_obj, const std::function<void()>& interruption_point)\n+static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, T hash_obj, const std::function<void()>& interruption_point, const CBlockIndex* pindex)\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-    stats.hashBlock = pcursor->GetBestBlock();\n-\n-    const CBlockIndex* pindex;\n-    {\n-        LOCK(cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n-        pindex = blockman.LookupBlockIndex(stats.hashBlock);\n-        stats.nHeight = Assert(pindex)->nHeight;\n+\n+    if (!pindex) {\n+        {",
    "path": "src/node/coinstats.cpp",
    "position": 120,
    "original_position": 19,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "3f166ecc125fce6ccd995687fa16572090a5d099",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "3f166ecc125fce6ccd995687fa16572090a5d099\r\n\r\nRemove unnecessary block.",
    "created_at": "2021-04-21T09:33:26Z",
    "updated_at": "2021-04-21T09:49:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617359458",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617359458"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617359458"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617359458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 98,
    "original_line": 98,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617361123",
    "pull_request_review_id": 640805550,
    "id": 617361123,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxNzM2MTEyMw==",
    "diff_hunk": "@@ -140,6 +140,35 @@ static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* b\n     return blockindex == tip ? 1 : -1;\n }\n \n+CBlockIndex* ParseHashOrHeight(const UniValue& param, ChainstateManager& chainman) {",
    "path": "src/rpc/blockchain.cpp",
    "position": 12,
    "original_position": 4,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "3f166ecc125fce6ccd995687fa16572090a5d099",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "3f166ecc125fce6ccd995687fa16572090a5d099\r\n\r\nnit, can be `static` and move `{` to new line.",
    "created_at": "2021-04-21T09:35:40Z",
    "updated_at": "2021-04-21T09:49:29Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617361123",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617361123"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617361123"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/617361123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 143,
    "original_line": 143,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624500568",
    "pull_request_review_id": 649782409,
    "id": 624500568,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYyNDUwMDU2OA==",
    "diff_hunk": "@@ -1068,50 +1096,88 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},",
    "path": "src/rpc/blockchain.cpp",
    "position": 50,
    "original_position": 50,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "done in #21818 ",
    "created_at": "2021-05-01T12:03:51Z",
    "updated_at": "2021-05-01T12:03:51Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r624500568",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624500568"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r624500568"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/624500568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1102,
    "original_line": 1102,
    "side": "RIGHT",
    "in_reply_to_id": 616228938
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634079897",
    "pull_request_review_id": 649806721,
    "id": 634079897,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDA3OTg5Nw==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};",
    "path": "src/index/coinstatsindex.cpp",
    "position": 149,
    "original_position": 149,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "could just make `j` of type `uint32_t` to avoid the cast?",
    "created_at": "2021-05-18T06:26:18Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634079897",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634079897"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634079897"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634079897/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 149,
    "original_line": 149,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634085868",
    "pull_request_review_id": 649806721,
    "id": 634085868,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDA4NTg2OA==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 163,
    "original_position": 163,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why is this called `m_block...`? The value is not per block, but the *total*, like all other CAmount members!? It might be good to call all of them `m_block`, or `m_total`, or just skip the prefix for all of them.",
    "created_at": "2021-05-18T06:37:59Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634085868",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634085868"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634085868"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634085868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 163,
    "original_line": 163,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634089179",
    "pull_request_review_id": 649806721,
    "id": 634089179,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDA4OTE3OQ==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;\n+                }\n+\n+                ++m_transaction_output_count;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (!tx->IsCoinBase()) {\n+                const auto& tx_undo{block_undo.vtxundo.at(i - 1)};\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin{tx_undo.vprevout[j]};\n+                    COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_block_prevout_spent_amount += coin.out.nValue;\n+\n+                    --m_transaction_output_count;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    } else {\n+        // genesis block\n+        m_block_unspendable_amount += block_subsidy;\n+        m_unspendables_genesis_block += block_subsidy;\n+    }\n+\n+    // If spent prevouts + block subsidy are still a higher amount than\n+    // new outputs + coinbase + current unspendable amount this means\n+    // the miner did not claim the full block reward. Unclaimed block\n+    // rewards are also unspendable.\n+    const CAmount unclaimed_rewards{(m_block_prevout_spent_amount + m_total_subsidy) - (m_block_new_outputs_ex_coinbase_amount + m_block_coinbase_amount + m_block_unspendable_amount)};\n+    m_block_unspendable_amount += unclaimed_rewards;\n+    m_unspendables_unclaimed_rewards += unclaimed_rewards;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+    value.second.total_subsidy = m_total_subsidy;\n+    value.second.block_unspendable_amount = m_block_unspendable_amount;\n+    value.second.block_prevout_spent_amount = m_block_prevout_spent_amount;\n+    value.second.block_new_outputs_ex_coinbase_amount = m_block_new_outputs_ex_coinbase_amount;\n+    value.second.block_coinbase_amount = m_block_coinbase_amount;\n+    value.second.unspendables_genesis_block = m_unspendables_genesis_block;\n+    value.second.unspendables_bip30 = m_unspendables_bip30;\n+    value.second.unspendables_scripts = m_unspendables_scripts;\n+    value.second.unspendables_unclaimed_rewards = m_unspendables_unclaimed_rewards;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    return m_db->Write(DBHeightKey(pindex->nHeight), value) && m_db->Write(DB_MUHASH, m_muhash);",
    "path": "src/index/coinstatsindex.cpp",
    "position": 222,
    "original_position": 222,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Shouldn't this be a batch to ensure an atomic operation? Otherwise you may end up with a corrupt muhash?",
    "created_at": "2021-05-18T06:44:05Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634089179",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634089179"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634089179"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634089179/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 222,
    "original_line": 222,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634095336",
    "pull_request_review_id": 649806721,
    "id": 634095336,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDA5NTMzNg==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;\n+                }\n+\n+                ++m_transaction_output_count;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (!tx->IsCoinBase()) {\n+                const auto& tx_undo{block_undo.vtxundo.at(i - 1)};\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin{tx_undo.vprevout[j]};\n+                    COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_block_prevout_spent_amount += coin.out.nValue;\n+\n+                    --m_transaction_output_count;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    } else {\n+        // genesis block\n+        m_block_unspendable_amount += block_subsidy;\n+        m_unspendables_genesis_block += block_subsidy;\n+    }\n+\n+    // If spent prevouts + block subsidy are still a higher amount than\n+    // new outputs + coinbase + current unspendable amount this means\n+    // the miner did not claim the full block reward. Unclaimed block\n+    // rewards are also unspendable.\n+    const CAmount unclaimed_rewards{(m_block_prevout_spent_amount + m_total_subsidy) - (m_block_new_outputs_ex_coinbase_amount + m_block_coinbase_amount + m_block_unspendable_amount)};\n+    m_block_unspendable_amount += unclaimed_rewards;\n+    m_unspendables_unclaimed_rewards += unclaimed_rewards;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+    value.second.total_subsidy = m_total_subsidy;\n+    value.second.block_unspendable_amount = m_block_unspendable_amount;\n+    value.second.block_prevout_spent_amount = m_block_prevout_spent_amount;\n+    value.second.block_new_outputs_ex_coinbase_amount = m_block_new_outputs_ex_coinbase_amount;\n+    value.second.block_coinbase_amount = m_block_coinbase_amount;\n+    value.second.unspendables_genesis_block = m_unspendables_genesis_block;\n+    value.second.unspendables_bip30 = m_unspendables_bip30;\n+    value.second.unspendables_scripts = m_unspendables_scripts;\n+    value.second.unspendables_unclaimed_rewards = m_unspendables_unclaimed_rewards;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    return m_db->Write(DBHeightKey(pindex->nHeight), value) && m_db->Write(DB_MUHASH, m_muhash);\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key{start_height};\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are\n+    // getting disconnected from the height index to the hash index so we can\n+    // still find them when the height index entries are overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip{g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash())};\n+        const auto& consensus_params{Params().GetConsensus()};\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                             __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookUpOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value\n+    // there matches the block hash. This should be the case if the block is on\n+    // the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the\n+    // result will be stored in the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookUpStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookUpOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+    coins_stats.total_subsidy = entry.total_subsidy;\n+    coins_stats.block_unspendable_amount = entry.block_unspendable_amount;\n+    coins_stats.block_prevout_spent_amount = entry.block_prevout_spent_amount;\n+    coins_stats.block_new_outputs_ex_coinbase_amount = entry.block_new_outputs_ex_coinbase_amount;\n+    coins_stats.block_coinbase_amount = entry.block_coinbase_amount;\n+    coins_stats.unspendables_genesis_block = entry.unspendables_genesis_block;\n+    coins_stats.unspendables_bip30 = entry.unspendables_bip30;\n+    coins_stats.unspendables_scripts = entry.unspendables_scripts;\n+    coins_stats.unspendables_unclaimed_rewards = entry.unspendables_unclaimed_rewards;\n+\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not\n+        // exist. Any other errors indicate database corruption or a disk\n+        // failure, and starting the index would cause further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    if (BaseIndex::Init()) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 344,
    "original_position": 344,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could use early return `if (!...) return false;` to avoid large multi-line nesting ",
    "created_at": "2021-05-18T06:54:59Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634095336",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634095336"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634095336"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634095336/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 344,
    "original_line": 344,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634104483",
    "pull_request_review_id": 649806721,
    "id": 634104483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDEwNDQ4Mw==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 125,
    "original_position": 125,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Under what circumstance would this recovery condition be hit? Also, shouldn't the error message mention that this condition failed as well?",
    "created_at": "2021-05-18T07:10:09Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634104483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634104483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634104483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634104483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634104604",
    "pull_request_review_id": 649806721,
    "id": 634104604,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDEwNDYwNA==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;\n+                }\n+\n+                ++m_transaction_output_count;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (!tx->IsCoinBase()) {\n+                const auto& tx_undo{block_undo.vtxundo.at(i - 1)};\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin{tx_undo.vprevout[j]};\n+                    COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    m_block_prevout_spent_amount += coin.out.nValue;\n+\n+                    --m_transaction_output_count;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    } else {\n+        // genesis block\n+        m_block_unspendable_amount += block_subsidy;\n+        m_unspendables_genesis_block += block_subsidy;\n+    }\n+\n+    // If spent prevouts + block subsidy are still a higher amount than\n+    // new outputs + coinbase + current unspendable amount this means\n+    // the miner did not claim the full block reward. Unclaimed block\n+    // rewards are also unspendable.\n+    const CAmount unclaimed_rewards{(m_block_prevout_spent_amount + m_total_subsidy) - (m_block_new_outputs_ex_coinbase_amount + m_block_coinbase_amount + m_block_unspendable_amount)};\n+    m_block_unspendable_amount += unclaimed_rewards;\n+    m_unspendables_unclaimed_rewards += unclaimed_rewards;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+    value.second.total_subsidy = m_total_subsidy;\n+    value.second.block_unspendable_amount = m_block_unspendable_amount;\n+    value.second.block_prevout_spent_amount = m_block_prevout_spent_amount;\n+    value.second.block_new_outputs_ex_coinbase_amount = m_block_new_outputs_ex_coinbase_amount;\n+    value.second.block_coinbase_amount = m_block_coinbase_amount;\n+    value.second.unspendables_genesis_block = m_unspendables_genesis_block;\n+    value.second.unspendables_bip30 = m_unspendables_bip30;\n+    value.second.unspendables_scripts = m_unspendables_scripts;\n+    value.second.unspendables_unclaimed_rewards = m_unspendables_unclaimed_rewards;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    return m_db->Write(DBHeightKey(pindex->nHeight), value) && m_db->Write(DB_MUHASH, m_muhash);\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key{start_height};\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are\n+    // getting disconnected from the height index to the hash index so we can\n+    // still find them when the height index entries are overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip{g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash())};\n+        const auto& consensus_params{Params().GetConsensus()};\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                             __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookUpOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value\n+    // there matches the block hash. This should be the case if the block is on\n+    // the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the\n+    // result will be stored in the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookUpStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookUpOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+    coins_stats.total_subsidy = entry.total_subsidy;\n+    coins_stats.block_unspendable_amount = entry.block_unspendable_amount;\n+    coins_stats.block_prevout_spent_amount = entry.block_prevout_spent_amount;\n+    coins_stats.block_new_outputs_ex_coinbase_amount = entry.block_new_outputs_ex_coinbase_amount;\n+    coins_stats.block_coinbase_amount = entry.block_coinbase_amount;\n+    coins_stats.unspendables_genesis_block = entry.unspendables_genesis_block;\n+    coins_stats.unspendables_bip30 = entry.unspendables_bip30;\n+    coins_stats.unspendables_scripts = entry.unspendables_scripts;\n+    coins_stats.unspendables_unclaimed_rewards = entry.unspendables_unclaimed_rewards;\n+\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not\n+        // exist. Any other errors indicate database corruption or a disk\n+        // failure, and starting the index would cause further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    if (BaseIndex::Init()) {\n+        const CBlockIndex* pindex{CurrentIndex()};\n+\n+        if (pindex) {\n+            DBVal entry;\n+            if (!LookUpOne(*m_db, pindex, entry)) {\n+                return false;\n+            }\n+\n+            m_transaction_output_count = entry.transaction_output_count;\n+            m_bogo_size = entry.bogo_size;\n+            m_total_amount = entry.total_amount;\n+            m_total_subsidy = entry.total_subsidy;\n+            m_block_unspendable_amount = entry.block_unspendable_amount;\n+            m_block_prevout_spent_amount = entry.block_prevout_spent_amount;\n+            m_block_new_outputs_ex_coinbase_amount = entry.block_new_outputs_ex_coinbase_amount;\n+            m_block_coinbase_amount = entry.block_coinbase_amount;\n+            m_unspendables_genesis_block = entry.unspendables_genesis_block;\n+            m_unspendables_bip30 = entry.unspendables_bip30;\n+            m_unspendables_scripts = entry.unspendables_scripts;\n+            m_unspendables_unclaimed_rewards = entry.unspendables_unclaimed_rewards;\n+        }\n+\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+// Reverse a single block as part of a reorg\n+bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    std::pair<uint256, DBVal> read_out;\n+\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy -= block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 394,
    "original_position": 394,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Under what circumstance would this recovery condition be hit? Also, shouldn't the error message mention that this condition failed as well?",
    "created_at": "2021-05-18T07:10:21Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634104604",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634104604"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634104604"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634104604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 394,
    "original_line": 394,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634106089",
    "pull_request_review_id": 649806721,
    "id": 634106089,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDEwNjA4OQ==",
    "diff_hunk": "@@ -947,10 +956,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex and coinstatsindex\n     if (args.GetArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))",
    "path": "src/init.cpp",
    "position": 55,
    "original_position": 55,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "missing `{}` :sweat_smile: ",
    "created_at": "2021-05-18T07:12:47Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634106089",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634106089"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634106089"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634106089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 963,
    "original_line": 963,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634165852",
    "pull_request_review_id": 649806721,
    "id": 634165852,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDE2NTg1Mg==",
    "diff_hunk": "@@ -0,0 +1,313 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test coinstatsindex across nodes.\n+\n+Test that the values returned by gettxoutsetinfo are consistent\n+between a node running the coinstatsindex and a node without\n+the index.\n+\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+)\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    ToHex,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_FALSE,\n+    OP_RETURN,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    try_rpc,\n+)\n+\n+class CoinStatsIndexTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.supports_cli = False\n+        self.extra_args = [\n+            [],\n+            [\"-coinstatsindex\"]\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self._test_coin_stats_index()\n+        self._test_use_index_option()\n+        self._test_reorg_index()\n+        self._test_index_rejects_hash_serialized()\n+\n+    def block_sanity_check(self, block_info):\n+        block_subsidy = 50\n+        assert_equal(\n+            block_info['prevout_spent'] + block_subsidy,\n+            block_info['new_outputs_ex_coinbase'] + block_info['coinbase'] + block_info['unspendable']\n+        )\n+\n+    def _test_coin_stats_index(self):\n+        node = self.nodes[0]\n+        index_node = self.nodes[1]\n+        # Both none and muhash options allow the usage of the index\n+        index_hash_options = ['none', 'muhash']\n+\n+        # Generate a normal transaction and mine it\n+        node.generate(101)\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+\n+        self.sync_blocks(timeout=120)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\")\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo))\n+        res0 = node.gettxoutsetinfo('none')\n+\n+        # The fields 'disk_size' and 'transactions' do not exist on the index\n+        del res0['disk_size'], res0['transactions']\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            res1 = index_node.gettxoutsetinfo(hash_option)\n+            # The fields 'block_info' and 'total_unspendable_amount' only exist on the index\n+            del res1['block_info'], res1['total_unspendable_amount']\n+            res1.pop('muhash', None)\n+\n+            # Everything left should be the same\n+            assert_equal(res1, res0)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() can get fetch data on specific heights with index\")\n+\n+        # Generate a new tip\n+        node.generate(5)\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            # Fetch old stats by height\n+            res2 = index_node.gettxoutsetinfo(hash_option, 102)\n+            del res2['block_info'], res2['total_unspendable_amount']\n+            res2.pop('muhash', None)\n+            assert_equal(res0, res2)\n+\n+            # Fetch old stats by hash\n+            res3 = index_node.gettxoutsetinfo(hash_option, res0['bestblock'])\n+            del res3['block_info'], res3['total_unspendable_amount']\n+            res3.pop('muhash', None)\n+            assert_equal(res0, res3)\n+\n+            # It does not work without coinstatsindex\n+            assert_raises_rpc_error(-8, \"Querying specific block heights requires coinstatsindex\", node.gettxoutsetinfo, hash_option, 102)\n+\n+        self.log.info(\"Test gettxoutsetinfo() with index and verbose flag\")\n+\n+        for hash_option in index_hash_options:\n+            # Genesis block is unspendable\n+            res4 = index_node.gettxoutsetinfo(hash_option, 0)\n+            assert_equal(res4['total_unspendable_amount'], 50)\n+            assert_equal(res4['block_info'], {\n+                'unspendable': 50,\n+                'prevout_spent': 0,\n+                'new_outputs_ex_coinbase': 0,\n+                'coinbase': 0,\n+                'unspendables': {\n+                    'genesis_block': 50,\n+                    'bip30': 0,\n+                    'scripts': 0,\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res4['block_info'])\n+\n+            # Test an older block height that included a normal tx\n+            res5 = index_node.gettxoutsetinfo(hash_option, 102)\n+            assert_equal(res5['total_unspendable_amount'], 50)\n+            assert_equal(res5['block_info'], {\n+                'unspendable': 0,\n+                'prevout_spent': 50,\n+                'new_outputs_ex_coinbase': Decimal('49.99995560'),\n+                'coinbase': Decimal('50.00004440'),\n+                'unspendables': {\n+                    'genesis_block': 0,\n+                    'bip30': 0,\n+                    'scripts': 0,\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res5['block_info'])\n+\n+        # Generate and send a normal tx with two outputs\n+        tx1_inputs = []\n+        tx1_outputs = {self.nodes[0].getnewaddress(): 21, self.nodes[0].getnewaddress(): 42}\n+        raw_tx1 = self.nodes[0].createrawtransaction(tx1_inputs, tx1_outputs)\n+        funded_tx1 = self.nodes[0].fundrawtransaction(raw_tx1)\n+        signed_tx1 = self.nodes[0].signrawtransactionwithwallet(funded_tx1['hex'])\n+        tx1_txid = self.nodes[0].sendrawtransaction(signed_tx1['hex'])\n+\n+        # Find the right position of the 21 BTC output\n+        tx1_final = self.nodes[0].gettransaction(tx1_txid)\n+        for output in tx1_final['details']:\n+            if output['amount'] == Decimal('21.00000000') and output['category'] == 'receive':\n+                n = output['vout']\n+\n+        # Generate and send another tx with an OP_RETURN output (which is unspendable)\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(int(tx1_txid, 16), n), b''))\n+        tx2.vout.append(CTxOut(int(20.99 * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))['hex']\n+        self.nodes[0].sendrawtransaction(tx2_hex)\n+\n+        # Include both txs in a block\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            # Check all amounts were registered correctly\n+            res6 = index_node.gettxoutsetinfo(hash_option, 108)\n+            assert_equal(res6['total_unspendable_amount'], Decimal('70.98999999'))\n+            assert_equal(res6['block_info'], {\n+                'unspendable': Decimal('20.98999999'),\n+                'prevout_spent': 111,\n+                'new_outputs_ex_coinbase': Decimal('89.99993620'),\n+                'coinbase': Decimal('50.01006381'),\n+                'unspendables': {\n+                    'genesis_block': 0,\n+                    'bip30': 0,\n+                    'scripts': Decimal('20.98999999'),\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res6['block_info'])\n+\n+        # Create a coinbase that does not claim full subsidy and also\n+        # has two outputs\n+        cb = create_coinbase(109, nValue=35)\n+        cb.vout.append(CTxOut(5 * COIN, CScript([OP_FALSE])))\n+        cb.rehash()\n+\n+        # Generate a block that includes previous coinbase\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblock(tip)['time'] + 1\n+        block = create_block(int(tip, 16), cb, block_time)\n+        block.solve()\n+        self.nodes[0].submitblock(ToHex(block))\n+        self.sync_all()\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": 212,
    "original_position": 212,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "why is this needed? (sync_all should call syncwithvalidationinterface). Also, if it didn't, shouldn't the index RPC call syncwithvalidationinterface internally by itself, similar to how the wallet does it?",
    "created_at": "2021-05-18T08:35:24Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634165852",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634165852"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634165852"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634165852/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 212,
    "original_line": 212,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634169745",
    "pull_request_review_id": 649806721,
    "id": 634169745,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNDE2OTc0NQ==",
    "diff_hunk": "@@ -1068,50 +1096,88 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"use_index\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Use coinstatsindex, if available.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The block height (index) of the returned statistics\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at which these statistics are calculated\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", /* optional */ true, \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n                         {RPCResult::Type::STR_HEX, \"muhash\", /* optional */ true, \"The serialized hash (only present if 'muhash' hash_type is chosen)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins permanently excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {\n+                            {RPCResult::Type::STR_AMOUNT, \"prevout_spent\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"coinbase\", \"\"},",
    "path": "src/rpc/blockchain.cpp",
    "position": 72,
    "original_position": 72,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Empty string as documentation? Would be nice to explain this a bit better. Does it include unspendable outputs ...?",
    "created_at": "2021-05-18T08:40:13Z",
    "updated_at": "2021-05-18T08:40:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634169745",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634169745"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634169745"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/634169745/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1121,
    "original_line": 1121,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638163118",
    "pull_request_review_id": 667026483,
    "id": 638163118,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODE2MzExOA==",
    "diff_hunk": "@@ -947,10 +956,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex and coinstatsindex\n     if (args.GetArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))",
    "path": "src/init.cpp",
    "position": 55,
    "original_position": 55,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hopefully removed soon anyway with #21726 :)",
    "created_at": "2021-05-24T18:08:27Z",
    "updated_at": "2021-05-24T18:08:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638163118",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638163118"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638163118"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638163118/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 963,
    "original_line": 963,
    "side": "RIGHT",
    "in_reply_to_id": 634106089
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638164201",
    "pull_request_review_id": 667027934,
    "id": 638164201,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODE2NDIwMQ==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;",
    "path": "src/index/coinstatsindex.cpp",
    "position": 163,
    "original_position": 163,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yepp, it used to be per block, but the names were not changed when the values were changed to track totals.",
    "created_at": "2021-05-24T18:10:35Z",
    "updated_at": "2021-05-24T18:10:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638164201",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638164201"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638164201"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638164201/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 163,
    "original_line": 163,
    "side": "RIGHT",
    "in_reply_to_id": 634085868
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638164626",
    "pull_request_review_id": 667028492,
    "id": 638164626,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODE2NDYyNg==",
    "diff_hunk": "@@ -0,0 +1,313 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test coinstatsindex across nodes.\n+\n+Test that the values returned by gettxoutsetinfo are consistent\n+between a node running the coinstatsindex and a node without\n+the index.\n+\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+)\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    ToHex,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_FALSE,\n+    OP_RETURN,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    try_rpc,\n+)\n+\n+class CoinStatsIndexTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.supports_cli = False\n+        self.extra_args = [\n+            [],\n+            [\"-coinstatsindex\"]\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self._test_coin_stats_index()\n+        self._test_use_index_option()\n+        self._test_reorg_index()\n+        self._test_index_rejects_hash_serialized()\n+\n+    def block_sanity_check(self, block_info):\n+        block_subsidy = 50\n+        assert_equal(\n+            block_info['prevout_spent'] + block_subsidy,\n+            block_info['new_outputs_ex_coinbase'] + block_info['coinbase'] + block_info['unspendable']\n+        )\n+\n+    def _test_coin_stats_index(self):\n+        node = self.nodes[0]\n+        index_node = self.nodes[1]\n+        # Both none and muhash options allow the usage of the index\n+        index_hash_options = ['none', 'muhash']\n+\n+        # Generate a normal transaction and mine it\n+        node.generate(101)\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+\n+        self.sync_blocks(timeout=120)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\")\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo))\n+        res0 = node.gettxoutsetinfo('none')\n+\n+        # The fields 'disk_size' and 'transactions' do not exist on the index\n+        del res0['disk_size'], res0['transactions']\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            res1 = index_node.gettxoutsetinfo(hash_option)\n+            # The fields 'block_info' and 'total_unspendable_amount' only exist on the index\n+            del res1['block_info'], res1['total_unspendable_amount']\n+            res1.pop('muhash', None)\n+\n+            # Everything left should be the same\n+            assert_equal(res1, res0)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() can get fetch data on specific heights with index\")\n+\n+        # Generate a new tip\n+        node.generate(5)\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            # Fetch old stats by height\n+            res2 = index_node.gettxoutsetinfo(hash_option, 102)\n+            del res2['block_info'], res2['total_unspendable_amount']\n+            res2.pop('muhash', None)\n+            assert_equal(res0, res2)\n+\n+            # Fetch old stats by hash\n+            res3 = index_node.gettxoutsetinfo(hash_option, res0['bestblock'])\n+            del res3['block_info'], res3['total_unspendable_amount']\n+            res3.pop('muhash', None)\n+            assert_equal(res0, res3)\n+\n+            # It does not work without coinstatsindex\n+            assert_raises_rpc_error(-8, \"Querying specific block heights requires coinstatsindex\", node.gettxoutsetinfo, hash_option, 102)\n+\n+        self.log.info(\"Test gettxoutsetinfo() with index and verbose flag\")\n+\n+        for hash_option in index_hash_options:\n+            # Genesis block is unspendable\n+            res4 = index_node.gettxoutsetinfo(hash_option, 0)\n+            assert_equal(res4['total_unspendable_amount'], 50)\n+            assert_equal(res4['block_info'], {\n+                'unspendable': 50,\n+                'prevout_spent': 0,\n+                'new_outputs_ex_coinbase': 0,\n+                'coinbase': 0,\n+                'unspendables': {\n+                    'genesis_block': 50,\n+                    'bip30': 0,\n+                    'scripts': 0,\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res4['block_info'])\n+\n+            # Test an older block height that included a normal tx\n+            res5 = index_node.gettxoutsetinfo(hash_option, 102)\n+            assert_equal(res5['total_unspendable_amount'], 50)\n+            assert_equal(res5['block_info'], {\n+                'unspendable': 0,\n+                'prevout_spent': 50,\n+                'new_outputs_ex_coinbase': Decimal('49.99995560'),\n+                'coinbase': Decimal('50.00004440'),\n+                'unspendables': {\n+                    'genesis_block': 0,\n+                    'bip30': 0,\n+                    'scripts': 0,\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res5['block_info'])\n+\n+        # Generate and send a normal tx with two outputs\n+        tx1_inputs = []\n+        tx1_outputs = {self.nodes[0].getnewaddress(): 21, self.nodes[0].getnewaddress(): 42}\n+        raw_tx1 = self.nodes[0].createrawtransaction(tx1_inputs, tx1_outputs)\n+        funded_tx1 = self.nodes[0].fundrawtransaction(raw_tx1)\n+        signed_tx1 = self.nodes[0].signrawtransactionwithwallet(funded_tx1['hex'])\n+        tx1_txid = self.nodes[0].sendrawtransaction(signed_tx1['hex'])\n+\n+        # Find the right position of the 21 BTC output\n+        tx1_final = self.nodes[0].gettransaction(tx1_txid)\n+        for output in tx1_final['details']:\n+            if output['amount'] == Decimal('21.00000000') and output['category'] == 'receive':\n+                n = output['vout']\n+\n+        # Generate and send another tx with an OP_RETURN output (which is unspendable)\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(int(tx1_txid, 16), n), b''))\n+        tx2.vout.append(CTxOut(int(20.99 * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))['hex']\n+        self.nodes[0].sendrawtransaction(tx2_hex)\n+\n+        # Include both txs in a block\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            # Check all amounts were registered correctly\n+            res6 = index_node.gettxoutsetinfo(hash_option, 108)\n+            assert_equal(res6['total_unspendable_amount'], Decimal('70.98999999'))\n+            assert_equal(res6['block_info'], {\n+                'unspendable': Decimal('20.98999999'),\n+                'prevout_spent': 111,\n+                'new_outputs_ex_coinbase': Decimal('89.99993620'),\n+                'coinbase': Decimal('50.01006381'),\n+                'unspendables': {\n+                    'genesis_block': 0,\n+                    'bip30': 0,\n+                    'scripts': Decimal('20.98999999'),\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res6['block_info'])\n+\n+        # Create a coinbase that does not claim full subsidy and also\n+        # has two outputs\n+        cb = create_coinbase(109, nValue=35)\n+        cb.vout.append(CTxOut(5 * COIN, CScript([OP_FALSE])))\n+        cb.rehash()\n+\n+        # Generate a block that includes previous coinbase\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblock(tip)['time'] + 1\n+        block = create_block(int(tip, 16), cb, block_time)\n+        block.solve()\n+        self.nodes[0].submitblock(ToHex(block))\n+        self.sync_all()\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))",
    "path": "test/functional/feature_coinstatsindex.py",
    "position": 212,
    "original_position": 212,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "True, I missed the option to use the `BlockUntilSynced...` function from BaseIndex. ",
    "created_at": "2021-05-24T18:11:25Z",
    "updated_at": "2021-05-24T18:11:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638164626",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638164626"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638164626"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638164626/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 212,
    "original_line": 212,
    "side": "RIGHT",
    "in_reply_to_id": 634165852
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638165428",
    "pull_request_review_id": 667029630,
    "id": 638165428,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzODE2NTQyOA==",
    "diff_hunk": "@@ -0,0 +1,472 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {",
    "path": "src/index/coinstatsindex.cpp",
    "position": 125,
    "original_position": 125,
    "commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "original_commit_id": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This could happen if there is a reorg that the index has not picked up on yet, so the hash returned from the height index is not on the active chain anymore. I added a warning logging and changed the `error()` message to be more accurate.",
    "created_at": "2021-05-24T18:13:02Z",
    "updated_at": "2021-05-24T18:13:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638165428",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638165428"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638165428"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/638165428/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 125,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 634104483
  }
]