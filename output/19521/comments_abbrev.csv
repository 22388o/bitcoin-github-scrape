DrahtBot,2020-07-15 05:44:57,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21726 (Add prune blockers to BlockManager by fjahr)\n* #21584 (Fix assumeutxo crash due to invalid base_blockhash by Marc",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-658558618,658558618,
fjahr,2020-08-17 22:18:57,"@PierreRochard Thanks a lot for the comments! I am happy to include these values you requested and drafted that up in a new commit (will need another day for clean-up, docs, tests etc. but it should work already). I actually had done some [similar work](https://github.com/fjahr/bitcoin/commit/4d08663e5d2a4eeda06a408c3fef6361475d3ce6) already for my [blog post](https://fjahr.com/posts/where-are-the",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675143288,675143288,
benthecarman,2020-08-17 23:02:39,"Concept ACK\n\nWould be nice to be able to see the `total_unspendable_amount` up to that current block.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675156917,675156917,
jonatack,2020-08-18 07:52:02,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-675319765,675319765,
PierreRochard,2020-08-20 23:39:24,"`values to be cumulative or per-block`\n\nI find it easier to do the cumulative sum in pandas than to back in to the per-block, but the answer also depends on the performance of the underlying index for aggregate queries. If this behaves like a SQL database and we want it to be normalized, it should be per-block, but I'm not religious about it.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677958519,677958519,
fjahr,2020-08-21 00:33:09,"@PierreRochard Thanks for testing and further feedback. As I have written the tests today and did further cleanup I have found that I hadn't been really doing what you were looking for in the coinbase_amount. I was simply returning the block subsidy there. \n\nI am pushing my fixes and test as a separate commit for now since you were already testing with the first version:\n- Adds `total_unspen",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677973339,677973339,
PierreRochard,2020-08-21 02:09:45,"Yes, perfect, that equation is exactly right. I'll just delete the coinstats index file for now but does this indexing system have versioning/migrations? ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-677997938,677997938,
benthecarman,2020-08-21 05:19:26,"From testnet:\n\n```\ngettxoutsetinfo  none 1807942 true\n{\n  ""height"": 1807942,\n  ""bestblock"": ""00000000374715d95667998b720a60bf8241182b279c913573f5e9e3fa54ba00"",\n  ""txouts"": 24100924,\n  ""bogosize"": 1807675952,\n  ""disk_size"": 1318392833,\n  ""total_amount"": 20942081.72908999,\n  ""total_unspendable_amount"": 875.88809751,\n  ""block_info"": {\n    ""unspendable_amount"": 0.00000000,\n",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678043934,678043934,
fjahr,2020-08-21 12:26:00,"> Yes, perfect, that equation is exactly right. I'll just delete the coinstats index file for now but does this indexing system have versioning/migrations?\n\nGreat! There is only a different kind of migration for txindex because it was around before the whole `BaseIndex` class was introduced. It is something that I have been thinking about already because I will add the UTXO set hash at some po",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678263874,678263874,
fjahr,2020-08-22 19:51:20,Cleaned up the latest changes and tests in more coherent commits. This is ready for review now.,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-678685225,678685225,
kallewoof,2020-08-26 01:39:49,"@fjahr \n\nI'm late to the party, but:\n\n> I just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block.\n\nIt is trivial to convert cumulative to per-block by simply taking `value(block) - value(prevblock)`, but the other way requires iterating over all the blocks, so I think cumulative would be more useful.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-680409442,680409442,
PierreRochard,2020-08-27 02:14:39,"Would it be too verbose to split out unspendables by the 4 categories? I realize it is granular, but it would remove any ambiguity in the reconciliation.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-681301264,681301264,
fjahr,2020-08-28 16:53:48,"> Would it be too verbose to split out unspendables by the 4 categories? I realize it is granular, but it would remove any ambiguity in the reconciliation.\n\nI think more verbose is not a problem itself unless it creates other problems, the only serious argument against it IMO would be if it ends up taking up too much disk space but the index is still pretty small and unless I change it to be a",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682886060,682886060,
fjahr,2020-08-28 17:14:16,"> @fjahr\n> \n> I'm late to the party, but:\n> \n> > I just noticed when I was almost done, that I wasn't sure if you would like these requested values to be cumulative or per-block.\n> \n> It is trivial to convert cumulative to per-block by simply taking `value(block) - value(prevblock)`, but the other way requires iterating over all the blocks, so I think cumulative would be more useful.\",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682948466,682948466,
fjahr,2020-08-28 17:16:13,"Only rebased for now, will work on the suggested changes shortly.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-682952026,682952026,
fjahr,2020-08-30 19:59:20,"> OTOH on a mainnet node, which has been running `txindex=1 peerbloomfilters=1 blockfilterindex=1` without issues, this PR crashed repeatedly:\n> \n> ```\n> 2020-08-30T16:32:25Z coinstatsindex thread start\n> 2020-08-30T16:32:25Z Syncing coinstatsindex with block chain from height 632589\n> 2020-08-30T16:32:26Z *** ThreadSync: Failed to write block 000000000000000000017ff124286aa9a7c80a353c11",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683463535,683463535,
jonatack,2020-08-30 20:09:04,"> Thanks for taking another look @jonatack . Maybe you had an older version of `coinstatsindex` running on that node before? You need to delete the folder and fully resync in that case. I have not taken care of a migration mechanism yet. That could explain such crashes.\n\nThanks @fjahr, that could explain it; I tested building the index with #18000 and only on mainnet.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683464648,683464648,
jonatack,2020-08-30 20:23:26,"Yup, all good now.\n```\nrm -rf ~/.bitcoin/indexes/coinstats\n```\n```\n2020-08-30T20:17:32Z coinstatsindex thread start\n2020-08-30T20:17:32Z Syncing coinstatsindex with block chain from height 0\n...\n2020-08-30T20:21:09Z Syncing coinstatsindex with block chain from height 150291\n2020-08-30T20:21:40Z Syncing coinstatsindex with block chain from height 172129\n2020-08-30T20:22:11Z Sync",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-683466314,683466314,
fjahr,2020-09-14 23:03:45,"Thanks for all the feedback, reviewers! I pushed a big update which should address all of the feedback from the past couple of weeks. If I missed something, please let me know:\n- Now saving cumulative values in the index. The PRC still returns the per-block values by subtracting the values from the prev block.\n- Unspendables are tracked in the four separate categories.\n- Addressed feedback b",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-692363789,692363789,
fjahr,2020-11-26 00:13:11,"@Sjors Thanks for the review and sorry for the long wait. I improved the error message as well, as you suggested. But I am a bit hesitant about flipping the arguments because the `hash_type` is relevant to both users running the index and those that don't run the index and `hash_or_height` is only for those that run the index. But maybe there is an elegant solution to that that I am not seeing :)",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-734002395,734002395,
Sjors,2021-01-23 14:14:43,Would love to see some progress here...,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-766085820,766085820,
fjahr,2021-01-25 22:20:11,"> Would love to see some progress here...\n\nYes, thanks for the nudge. However, since #19055 is merged now and reviewing power seems to be particularly scarce at the moment, I think it makes more sense to focus on getting #19145 in (which is comparatively small and easy-ish to review) and then reopen this here as a follow-up with the UTXO set hash included again also taking in your feedback @Sj",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-767151349,767151349,
Sjors,2021-02-19 13:03:21,"#19055 is merged, rebase time? ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-782060948,782060948,
fjahr,2021-02-22 00:53:42,"> #19055 is merged, rebase time?\n\nDone, and I have made several changes based on feedback. But there are still a few comments I haven't addressed yet or still need to test.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-782971620,782971620,
fjahr,2021-03-01 00:08:37,Thanks for your comments @Sjors ! I think I have addressed all except for the reorg test but I am working on that one.,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-787552191,787552191,
jonatack,2021-03-03 22:38:03,Thanks for your persistance on this @fjahr. Will review soon.,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790122850,790122850,
fjahr,2021-03-04 00:56:03,"Addressed several comments by @Sjors and @MarcoFalke . Thanks for reviewing 🙏 \n\n> How do we process the genesis block?\n\n(for some reason GH doesn't let me comment on this) The Genesis block is explicitly skipped in `WriteBlock`.\n\n> [c3488a4](https://github.com/bitcoin/bitcoin/commit/c3488a426f7ef71e45143e4bd797d06332bd5287) is getting very close\n> \n> `rpc_help.py` complains:\n> \",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790197840,790197840,
Sjors,2021-03-04 12:18:50,">> How do we process the genesis block?\n\n> The Genesis block is explicitly skipped in WriteBlock.\n\nBut then why isn't the result of `src/bitcoin-cli gettxoutsetinfo muhash 0` all zeros? Yet it contains a value for muhash and `unspendables->genesis_block` is 50. Where does that get set?",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790577414,790577414,
fjahr,2021-03-04 19:37:37,"> > > How do we process the genesis block?\n> \n> > The Genesis block is explicitly skipped in WriteBlock.\n> \n> But then why isn't the result of `src/bitcoin-cli gettxoutsetinfo muhash 0` all zeros? Yet it contains a value for muhash and `unspendables->genesis_block` is 50. Where does that get set?\n\nWe skip almost all the processing of the genesis block in `WriteBlock()` from this line: ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-790876793,790876793,
fjahr,2021-03-06 23:34:14,"> But then why isn't the result of `src/bitcoin-cli gettxoutsetinfo muhash 0` all zeros?\n\nI realized I didn't answer that one yet. The internal state of the `MuHash3072` object is all zeros but that state gets finalized by hashing it with SHA256 so the uint256 output in the `gettxoutsetinfo` call is not all zeros anymore. ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-792117478,792117478,
Sjors,2021-03-09 09:52:48,I think you lost 6b21ff9bf7 in the rebase? I think ffeb0af71f and 98ec2e5170 were moved to #21390.,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-793641922,793641922,
fjahr,2021-03-10 23:02:18,"> I think you lost [6b21ff9](https://github.com/bitcoin/bitcoin/commit/6b21ff9bf7afca0cc25942fb49175b6bd7113e87) in the rebase? I think [ffeb0af](https://github.com/bitcoin/bitcoin/commit/ffeb0af71fc0e8e2eff5af54c4550dd5b96c9e23) and [98ec2e5](https://github.com/bitcoin/bitcoin/commit/98ec2e5170f41bd50cd6d6d89d386bbd44f79bcc) were moved to #21390.\n\nSorry, yes, I moved all three of them to #213",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-796267017,796267017,
Sjors,2021-03-11 10:12:50,re-utACK fc3f9c0a0debe040971098c3edb1078c8679c54c,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-796625212,796625212,
fjahr,2021-03-11 23:22:54,rebased,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-797116798,797116798,
fjahr,2021-03-12 23:54:26,Addressed @fanquake s comment and used `std::make_unique`.,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-797819214,797819214,
Sjors,2021-03-16 09:56:38,"re-ACK 9e746e8\nMuHash at height 674,863: `eca35832ffdac43638e849e818ae10db7d2ea53746c406e386e8139e0583a990` (matches `use_index=false`)",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800117128,800117128,
jonatack,2021-03-16 17:30:18,Thanks for re-pushing @fjahr. Reviewing.,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800463219,800463219,
jonatack,2021-03-16 18:15:59,"When building bf347106cd ""index: Coinstats index can be activated with command line flag""\n\n```\nrpc/blockchain.cpp: In lambda function:\nrpc/blockchain.cpp:1092:13: error: ‘g_coin_stats_index’ was not declared in this scope\n 1092 |         if (g_coin_stats_index && (g_coin_stats_index->GetSummary().synced == false)) {\n      |             ^~~~~~~~~~~~~~~~~~\n```",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800496273,800496273,
fjahr,2021-03-16 23:23:19,"> When building [bf34710](https://github.com/bitcoin/bitcoin/commit/bf347106cd463ecc0d8ab3795b8d6e0805ebea65) ""index: Coinstats index can be activated with command line flag""\n> \n> ```\n> rpc/blockchain.cpp: In lambda function:\n> rpc/blockchain.cpp:1092:13: error: ‘g_coin_stats_index’ was not declared in this scope\n>  1092 |         if (g_coin_stats_index && (g_coin_stats_index->GetSummary",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800677568,800677568,
jonatack,2021-03-17 01:15:00,"Thanks @fjahr! resolved in the latest push; moving forward, `test/functional/feature_coinstatsindex.py` fails at commit 540428a2c7\n\n<details><summary>test output x 3</summary><p>\n\n```\n((HEAD detached at 540428a2c7))$ src/test/test_bitcoin -t coinstatsindex_tests ; test/functional/feature_coinstatsindex.py\nRunning 1 test case...\n\n*** No errors detected\n\n2021-03-17T01:07:46.87900",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-800719573,800719573,
fjahr,2021-03-17 21:38:38,"> Thanks @fjahr! resolved in the latest push; moving forward, `test/functional/feature_coinstatsindex.py` fails at commit [540428a](https://github.com/bitcoin/bitcoin/commit/540428a2c7d8791b20d81967c3b811cfa7bc613a)\n> \n> test output x 3\n\nFixed and quick-checked the following commits. I think that should be the last of those. 🤞 ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-801460423,801460423,
jonatack,2021-03-23 11:58:32,"> Fixed and quick-checked the following commits. I think that should be the last of those. crossed_fingers\n\nYup, they check out for me too. Deleted my coinstats index files from last August and re-syncing under adversarial conditions (restarts, very frequent internet cuts) while trying the commands in mainnet, signet and testnet. The reviews by @Sjors are very helpful with ideas of issues to c",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-804843662,804843662,
jonatack,2021-03-27 18:57:23,"Review update: reviewed up to 590b887 and added suggestions in separate annotated commits in the branch at https://github.com/jonatack/bitcoin/commits/pr19521-review\n\n- https://github.com/jonatack/bitcoin/commit/e9262d2b38ebfe134b42e44ff3b88cfb89f744cc : ""PR19521 suggestions, commit e880a5e *Add Coinstats index""*\n- https://github.com/jonatack/bitcoin/commit/d4fb34de51a3d21ae68e8331822020e6fc",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-808786709,808786709,
jonatack,2021-03-27 18:58:22,"Here is a test commit you can pull in, if you like, to add coverage for c3cfc509 *Add Coinstats index to getindexinfo*\n\nhttps://github.com/jonatack/bitcoin/commits/pr19521-coinstatsindex-getindexinfo-test-coverage",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-808786833,808786833,
jonatack,2021-03-29 16:17:04,"Approach ACK. I finished this pass of reviewing and have pushed annotated comments/fixes/suggestions, per-commit, in https://github.com/jonatack/bitcoin/commits/pr19521-review (with a few initial comments in the first commit and in my comments here above).",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-809516409,809516409,
Sjors,2021-04-06 09:20:39,"re-tACK 5860532c4041bc3f90fc1f8919f56b6f3955ae9f\n\nMuhash at height 677990: c49dc3e5ab445812a3eeb8460aa169b4b8900fe8e8c70b328bb7fa0edb0d4690",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-813969320,813969320,
fjahr,2021-04-06 23:08:15,"Sorry, I didn't get around to write an update after I pushed yesterday. I further addressed comments from @jonatack and I think I should have addressed everything now :)\n\n>I don't think it is necessary to disallow the coin stats index when pruning is enabled. The only reason that txindex disallows it is because txindex gets the transaction data by reading it off disk from the block files, so t",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-814490653,814490653,
fjahr,2021-04-10 22:29:19,Rebased,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-817210690,817210690,
jonatack,2021-04-11 09:12:09,"re-ACK a4eaae4697d027f511ca2fa216b2ec0480b0be5d per `git diff 5860532 074cc23` (before rebase) and `git range-diff 1e3db68 5860532 a4eaae4` (after rebase), debug build is clean, lightly re-tested on signet\n\n<details><summary>manual testing</summary><p>\n\n```\n$ bitcoin-cli -signet gettxoutsetinfo ""none"" 90111\nerror code: -8\nerror message:\nTarget block height 90111 after current tip 3",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-817275460,817275460,
ivanacostarubio,2021-04-12 22:38:49,"Tested ACK. [a4eaae4](https://github.com/bitcoin/bitcoin/commit/a4eaae4697d027f511ca2fa216b2ec0480b0be5d)\n\nManual Testing: \n\n```\n./src/bitcoin-cli gettxoutsetinfo muhash 677990\n{\n  ""height"": 677990,\n  ""bestblock"": ""00000000000000000005e25f3d3e12bf69664dcfe78e2b90a58d5a9e596eef6b"",\n  ""txouts"": 74586452,\n  ""bogosize"": 5588597888,\n  ""muhash"": ""0f829dbd43ecd72de16a8b906f287600a04",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-818288887,818288887,
Sjors,2021-04-13 12:21:43,"re-tACK a4eaae4\n\nMuhash at height 679,048: f5058d7485db847f189ad33c80ecdbb8ad0ceba3fe3e9e32a3ada9553dc52406 \n\nOf course it needs a rebase 2 hours after my re-ACK :-(",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-818692017,818692017,
grunch,2021-04-14 15:54:09,"Tested ACK. a4eaae4\n\nManual Testing:\n```\n$ src/bitcoin-cli gettxoutsetinfo none '""00000000d1145790a8694403d4063f323d499e655c83426834d4ce2f8dd4a2ee""'\n{\n  ""height"": 170,\n  ""bestblock"": ""00000000d1145790a8694403d4063f323d499e655c83426834d4ce2f8dd4a2ee"",\n  ""txouts"": 171,\n  ""bogosize"": 20007,\n  ""total_amount"": 8500.00000000,\n  ""total_unspendable_amount"": 50.00000000,\n  ""block_in",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819626933,819626933,
fjahr,2021-04-14 19:52:27,"Ain't no party like a rebase party, 'cause a rebase party don't stop...",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819789914,819789914,
jonatack,2021-04-14 21:13:28,"Code review re-ACK 1be67944193241ff5aee60188f2730367a638500 per `git range-diff 773f8c1 a4eaae4 1be6794`, only changes since my last review are rebase due to added neighboring headers and circular dependencies from merged #21575",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819836733,819836733,
jonatack,2021-04-14 21:16:23,(also verified that the unrelated-looking cirrus CI test failure in `feature_notifications.py#L172` does not occur for me locally and opened issue #21683),https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-819838244,819838244,
Sjors,2021-04-15 07:20:01,re-utACK 1be67944193241ff5aee60188f2730367a638500: what jonatack said,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-820182102,820182102,
ivanacostarubio,2021-04-15 20:07:49,"re-tACK [1be6794](https://github.com/bitcoin/bitcoin/commit/1be67944193241ff5aee60188f2730367a638500)\n\n<details>\n  <summary>Manual Testing</summary>\n\n\n**After recompiling:**\n\nRight after starting bitcoind: \n\n```\n ./src/bitcoin-cli gettxoutsetinfo 'muhash' 677990\nerror code: -28\nerror message:\nVerifying blocks...\n```\n\nAfter verified the blocks: \n\n```\nsrc/bitc",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-820699496,820699496,
fjahr,2021-04-17 22:13:38,"> Ain't no party like a rebase party, 'cause a rebase party don't stop...\n\n🕺 ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-821894930,821894930,
jonatack,2021-04-18 14:19:14,"Code review re-ACK 07201d39d1c10ddbf8a576915203bf3aa4be135c changes appear to be rebase-only per `git range-diff 0dd7b23 1be6794 07201d3`.\n\nDebug build is clean; I didn't build and test each commit like in my previous reviews above.\n\nIt may be good if someone familiar with the chainman changes in #21391 et al that caused the rebase had a look. ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-821998941,821998941,
aitorjs,2021-04-18 17:38:52,"Tested ACK. [07201d3](https://github.com/bitcoin/bitcoin/commit/07201d39d1c10ddbf8a576915203bf3aa4be135c)\n\nManual Testing on testnet: \n\n```\n$ src/bitcoind -coinstatsindex\n2021-04-18T20:07:19Z Syncing coinstatsindex with block chain from height 15716\n2021-04-18T20:07:50Z Syncing coinstatsindex with block chain from height 19420\n2021-04-18T20:07:57Z FlushStateToDisk: write coins cach",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822029740,822029740,
DrahtBot,2021-04-19 07:16:47,"<!--cf906140f33d8803c4a75a2196329ecb-->\n:partying_face: This pull request conflicts with the target branch and [needs rebase party](https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-821894930).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822232815,822232815,
fjahr,2021-04-19 19:28:47,"Rebased, review while it's hot! 🔥 \n\n<details>\n  <summary>At least it's a relatively simple one.</summary>\n<p>\n  \n```\n$ git range-diff master 07201d3 5f96d7d22\n 1:  f8b5dd30f =  1:  2e2648a90 crypto: Make MuHash Remove method efficient\n 2:  da85ed5a6 =  2:  9c8a265fd refactor: Pass hash_type to CoinsStats in stats object\n 3:  85405cc2a =  3:  a8a46c4b3 refactor: Simplify ApplySt",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822727320,822727320,
Sjors,2021-04-19 20:11:53,"re-tACK 5f96d7d22d8e05876c6fc014e70488699950fe38\n\nMuhash at height for block 000000000000000000000f0d7742e6cd22da819b59af361224f452baee8d31c4 (which or may or may not win [the race](https://forkmonitor.info/stale/btc/679823)) is 1d324ac1c67e5317ab40d5c9e23b5aae6a0049fa5649795d32553cae008076fb.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822753248,822753248,
Sjors,2021-04-19 20:21:26,"Narrator: it lost, which is a good opportunity to test a reorg in real life. For height 679824 I now get 157ec719407b64f9204f464fcc203b04d288ff837a3ce5ca63edeb20a2614903. ",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-822758954,822758954,
fjahr,2021-04-24 21:38:19,"> I think it should error when `hash_or_height` is set but index is not available or `use_index=false` otherwise the result is misleading.\n\nThere is already a check for that and it should error in the case you describe: https://github.com/bitcoin/bitcoin/pull/19521/files#diff-decae4be02fb8a47ab4557fe74a9cb853bdfa3ec0fa1b515c0a1e5de91f4ad0bR1168\n\nIf you found a scenario where it doesn't wor",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-826156834,826156834,
laanwj,2021-04-30 15:35:41,Code review ACK 5f96d7d22d8e05876c6fc014e70488699950fe38,https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-830179892,830179892,
fjahr,2021-05-24 18:17:18,"Thanks @MarcoFalke , all comments should be addressed in #22047 aside from the init arg brackets which should be made redundant with #21726.",https://github.com/bitcoin/bitcoin/pull/19521#issuecomment-847238235,847238235,
luke-jr,2020-07-30 23:37:22,Why?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463328440,463328440,src/init.cpp
fjahr,2020-08-01 19:41:46,"It syncs over the whole blockchain, processing every block and saving state on each. That allows users to query the stats for every block height (a nice-to-have feature). It's the standard way `BaseIndex` currently works, although changing that would probably only require minimal effort. Potential users who I have talked to didn't really care much about this. But I will look into it if this again ",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r463993512,463993512,src/init.cpp
PierreRochard,2020-08-17 02:17:33,"A comment explaining ""bogo"" would be helpful, I looked at the function that calculates it and it didn't make intuitive sense to me.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199276,471199276,src/index/coinstatsindex.cpp
PierreRochard,2020-08-17 02:19:13,Can we add `unspendable_amount` to the index data and include the genesis block in it?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199582,471199582,src/index/coinstatsindex.cpp
PierreRochard,2020-08-17 02:20:42,I'm assuming these would be added to `unspendable_amount` too,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471199972,471199972,src/index/coinstatsindex.cpp
PierreRochard,2020-08-17 02:21:33,I think this would be 3/3 of `unspendable_amount` items.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471200138,471200138,src/index/coinstatsindex.cpp
PierreRochard,2020-08-17 02:38:42,"If I understand the logic, `total_amount` is the net increase of coins due to this block?\n\nI don't want to bloat your stats index, but I'd be interested in adding `total_prevout_spent_amount`, `total_new_outputs_ex_coinbase_amount`, and `coinbase_amount` to unpack `total_amount`.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471203531,471203531,src/index/coinstatsindex.cpp
fjahr,2020-08-17 22:18:09,"I think bogo just stands for bogus, indicating that this metric is not meaningful in any way other than comparing it to itself, i.e. has the UTXO set grown or shrunk over the last x blocks. I added a comment on the calculation and improved the RPC help with the same text.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805502,471805502,src/index/coinstatsindex.cpp
fjahr,2020-08-17 22:18:28,Actually 3/4 :) The unclaimed block rewards need to be included as well. (See code and/or my [blog post](https://fjahr.com/posts/where-are-the-coins/)),https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805619,471805619,src/index/coinstatsindex.cpp
fjahr,2020-08-17 22:18:51,"It is the total amount of coins in the UTXO set at that block height. So it's accumulative rather than for this specific block. I added the other values in a draft commit, needs some cleanup but ready to test.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r471805744,471805744,src/index/coinstatsindex.cpp
PierreRochard,2020-08-20 21:46:57,"I think this is causing BIP30 blocks to be double counted as unspendable\n\n`bitcoin-cli gettxoutsetinfo 'none' 91722 true`\n\n`""unspendable_amount"": 100.00000000`",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r474290951,474290951,src/index/coinstatsindex.cpp
PierreRochard,2020-08-23 02:38:37,"This only counts the first output of the coinbase tx as being the coinbase amount, which doesn't necessarily hold true ( one example https://blockstream.info/block/0000000000000af7c56d09abdbce2a36ba9aebbd8559b3d0460defaeaf3c0f31 )",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475161291,475161291,src/index/coinstatsindex.cpp
fjahr,2020-08-23 11:03:22,You are right. I just pushed a fix for this and also improved the tests to account for this case.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r475205283,475205283,src/index/coinstatsindex.cpp
jonatack,2020-08-30 16:03:39,9981a8f nit: sort,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479786750,479786750,src/init.cpp
jonatack,2020-08-30 16:07:37,"9981a8f\n\n- s/rpc/RPC/ (can also fix the one in `txindex`)\n\n- omit ""call"" (the C in RPC stands for ""call"")\n\n- drop the comma at s/index, /index /\n\n- nit: sort for both `-coinstatsindex` and `-blockfilterindex` (they should be at line 411)",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r479787149,479787149,src/init.cpp
Sjors,2020-09-09 14:01:33,nit: `look up stats`,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485635996,485635996,src/index/coinstatsindex.h
Sjors,2020-09-09 14:15:32,"This would prematurely return if the active chain is shorter? It currently doesn't matter, because `gettxoutsetinfo` only takes a height argument.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485646852,485646852,src/index/coinstatsindex.cpp
Sjors,2020-09-09 14:34:55,"Why are these values only initialised is no result is found? (and `result` is not used, so this just a sanity check?). Should this be initialised with the most recent block?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485661976,485661976,src/index/coinstatsindex.cpp
Sjors,2020-09-09 14:40:04,Why doesn't this fail for `pindex->nHeight == 1` given that we don't index block 0?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485665973,485665973,src/index/coinstatsindex.cpp
Sjors,2020-09-09 14:44:49,(Why) are we using the tip disk size here? The index now contains the disk size at the time the index was made.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r485669614,485669614,src/index/coinstatsindex.cpp
fjahr,2020-09-14 22:58:34,Fixed,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488283833,488283833,src/init.cpp
fjahr,2020-09-14 22:58:41,Fixed,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488283873,488283873,src/init.cpp
fjahr,2020-09-14 22:59:43,Fixed,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284233,488284233,src/index/coinstatsindex.h
fjahr,2020-09-14 23:00:00,"I'm not sure what you mean here. Like, in case of a reorg?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284358,488284358,src/index/coinstatsindex.cpp
fjahr,2020-09-14 23:00:06,"Yeah, this was just to initialize the values when the index is initialized itself. But initializing the values in the object is sufficient so I removed this.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284393,488284393,src/index/coinstatsindex.cpp
fjahr,2020-09-14 23:00:13,"Hm, we do index block 0, we just don't process the block data in the usual way but there is still an entry for it.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284437,488284437,src/index/coinstatsindex.cpp
fjahr,2020-09-14 23:00:18,"You are right, that doesn't make sense. I guess there is no reasonable way to get that number for every height so I removed it from the index.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r488284467,488284467,src/index/coinstatsindex.cpp
Sjors,2020-09-21 14:27:11,"A rather large reorg (with difficulty adjustments),  where the new chain is shorter, but has more proof of work.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r492091745,492091745,src/index/coinstatsindex.cpp
promag,2020-10-06 23:26:51,Could move `CCoinsStats` and related to src/coinstats.h to avoid this.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r500651118,500651118,test/lint/lint-circular-dependencies.sh
Sjors,2020-10-09 10:04:08,"Maybe add: `The genesis coinbase transaction is excluded from the UTXO set`, so users understand the result of `gettxoutsetinfo none 0` (`total_amount`: 0, `total_unspendable_amount`: 50, `unspendable_amount`: 50)",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502323841,502323841,src/rpc/blockchain.cpp
Sjors,2020-10-09 10:06:33,"Suggest dropping `total_` here and below, so it's clear this is per block.\n\nAlternatively, rename `total_unspendable_amount` to `cumulative_unspendable_amount`\n\nI also don't think the word ""amount"" is needed in the variable name. We already indicate count by using plural form, e.g. `txouts`. Finally I suggest putting `total` at the end, so variables with similar stuff are easier to spot, s",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502325077,502325077,src/rpc/blockchain.cpp
Sjors,2020-10-09 10:26:57,"For other reviewers, see #15448 and #19949 for solutions to avoid having to pass a hash with `'""1abc...'""` ",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502335126,502335126,src/rpc/client.cpp
Sjors,2020-10-09 10:39:19,"""permanently excluded"" makes it more clear this number does not include coinbase transactions.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502340746,502340746,src/rpc/blockchain.cpp
Sjors,2020-10-09 10:41:50,"* `The current block height` -> `The (current) block height`\n* `bestblock` -> should probably be dropped if a `hash` argument is used, otherwise it's confusing",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502342030,502342030,src/rpc/blockchain.cpp
Sjors,2020-10-09 10:45:30,"It's not _due_ to BIP30 that these coins are lost. BIP30 prevents it from ever happening again, so doc could e.g. say: ""Transactions overridden by duplicates (no longer possible with BIP30)""",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r502343829,502343829,src/rpc/blockchain.cpp
fjahr,2020-11-25 23:59:43,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700006,530700006,src/rpc/blockchain.cpp
fjahr,2020-11-25 23:59:55,"I dropped the totals and amounts in block_info, I think that made sense. I think we should keep `total_amount` as is to keep compatibility and I left `total_unspendable_amount` as is so it's close to its pair on that level if that makes sense. I am not sure I understand the comment about putting total at the end. That was only in case I really want to keep the total somehow?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700074,530700074,src/rpc/blockchain.cpp
fjahr,2020-11-26 00:00:13,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700175,530700175,src/rpc/blockchain.cpp
fjahr,2020-11-26 00:02:39,"I think the `bestblock` help text was confusing as it was outdated so I changed it. Otherwise, I think it's ok to repeat the hash that was passed to keep consistency. Made the other change.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700778,530700778,src/rpc/blockchain.cpp
fjahr,2020-11-26 00:02:53,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r530700822,530700822,src/rpc/blockchain.cpp
fjahr,2020-12-06 14:17:32,"Sorry for the late reply, I am not sure if I can follow this: you mean src/node/coinstats.h (file was moved not too long ago I think), right? But the struct `CCoinsStats` is already in there.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r537047921,537047921,test/lint/lint-circular-dependencies.sh
Sjors,2020-12-09 13:30:13,Not sure what I meant either :-) It's fine now.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539306604,539306604,src/rpc/blockchain.cpp
Sjors,2020-12-09 13:56:13,"2f6f9a7ad11209744fb0fbf797a1a87d9127dd5e: I'm puzzled why we never hit this, maybe because I've only testsed on a node that saw very few reorgs.\n\nIf you have two blocks at height N, and you're processing a block at N+1, you might not always get the right block at height N if you use `DBHeightKey`. IIUC this could be solved with an else branch that tries `DBHashKey`.\n\nMight be good to have ",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539325672,539325672,src/index/coinstatsindex.cpp
Sjors,2020-12-09 14:25:04,"As a potential user, it would be nice if I can at least turn on pruning _after_ the index is generated, but I think that's for a separate PR.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539348593,539348593,src/init.cpp
Sjors,2020-12-09 14:27:46,5479000c79b254120b7535bf322869439ee33215  nit: `coin_stats_cache_size`,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539350809,539350809,src/init.cpp
Sjors,2020-12-09 14:30:52,5479000c79b254120b7535bf322869439ee33215: consider splitting the usage of the index away from enabling the index,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539353330,539353330,src/node/coinstats.cpp
Sjors,2020-12-09 14:36:36,"5479000: this seems overly abstract, maybe just check the hash type in `GetUTXOStats`? Unless it makes more sense once MuHash is added.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539358106,539358106,src/node/coinstats.cpp
Sjors,2020-12-09 14:43:23,"fc621a8fbdb5ecad1866e754ad38c24bfedfe5c1  This can in theory also happen for other (future) reasons than `OP_RETURN`:\n```cpp\n    /**\n     * Returns whether the script is guaranteed to fail at execution,\n     * regardless of the initial stack. This allows outputs to be pruned\n     * instantly when entering the UTXO set.\n     */\n    bool IsUnspendable() const\n    {\n        return (",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r539363670,539363670,src/index/coinstatsindex.cpp
MarcoFalke,2021-01-28 18:42:29,"can remove this diff, and then rebase",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r566324962,566324962,src/rpc/blockchain.cpp
fjahr,2021-02-22 00:54:39,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579896859,579896859,src/node/coinstats.cpp
fjahr,2021-02-22 00:54:57,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579896895,579896895,src/init.cpp
fjahr,2021-02-22 00:58:18,"Yepp, to be honest I just didn't come up with a better name in the moment and didn't revisit it afterwards. Will give this some more thought of what a good name is. Maybe `unspendable_script`.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r579897540,579897540,src/index/coinstatsindex.cpp
Sjors,2021-02-23 13:22:04,clang is unhappy: `unused member function 'DBHeightKey' [-Wunused-member-function]`,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r581029128,581029128,src/index/coinstatsindex.cpp
fjahr,2021-02-28 16:14:57,fixed,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584320216,584320216,src/index/coinstatsindex.cpp
fjahr,2021-03-01 00:04:00,I added an option (`no_index`) for it in a new commit.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584385307,584385307,src/node/coinstats.cpp
fjahr,2021-03-01 00:04:06,Renamed,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584385315,584385315,src/index/coinstatsindex.cpp
Sjors,2021-03-01 10:16:01,"Because the snapshot uses `CoinStatsHashType::HASH_SERIALIZED` it might be better to initialise `stats` with that option explicitly, in case we ever change the default.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584591432,584591432,src/validation.cpp
Sjors,2021-03-01 10:41:33,TODO what?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584607991,584607991,src/index/coinstatsindex.cpp
Sjors,2021-03-01 10:56:49,"Are you sure bogo_size shouldn't be counted for `OP_RETURN`? I guess not, because you're testing that the result is consistent with a non-indexed node: https://github.com/bitcoin/bitcoin/pull/19521/commits/9c07684e444a5c8e1f81d19221c6217dada3da72#diff-a6434325d09a6df4b371513c837907dfc1a97cf540709def4bded9b2a17e3f49R61 ",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584617745,584617745,src/index/coinstatsindex.cpp
Sjors,2021-03-01 11:02:29,1fc3470c1b03857245b94eebde5cd0f18805a884: I think these ended up in the wrong commit,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584621490,584621490,src/index/coinstatsindex.cpp
Sjors,2021-03-01 11:06:41,"1fc3470c1b03857245b94eebde5cd0f18805a884 if you're checking MuHash for consistency, why not also check the other variables?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584624182,584624182,src/index/coinstatsindex.cpp
Sjors,2021-03-01 11:10:18,How _do_ we process the genesis block?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584626513,584626513,src/index/coinstatsindex.cpp
Sjors,2021-03-01 11:17:11,"Would be nice to add a test here that adds a block and then rolls it back, to see if the result is untouched.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584630707,584630707,test/functional/feature_coinstatsindex.py
adamjonas,2021-03-01 15:49:47,"rpc_help.py looking for `{ ""gettxoutsetinfo"", 2, ""no_index""}` here:\n\n```\nFile ""/bitcoin/test/functional/rpc_help.py"", line 51, in run_test\n    self.test_client_conversion_table()\nFile ""/bitcoin/test/functional/rpc_help.py"", line 69, in test_client_conversion_table\n    raise AssertionError(""RPC client conversion table ({}) and RPC server named arguments mismatch!\n{}"".format(\nAssertio",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r584829802,584829802,src/rpc/client.cpp
fjahr,2021-03-02 00:17:31,"Sorry, I confused myself quite a bit because I thought deduplicating bip30 block stuff was part of a Coinstats PR discussion and I had made a commit in a local branch but after searching for it for a while I realized now that it wasn't there, it was actually in #19888. So, this was actually a ""I think I had something that I might want to use here"" reminder for this: https://github.com/bitcoin/bitc",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585149164,585149164,src/index/coinstatsindex.cpp
fjahr,2021-03-02 00:28:03,"Hm, strange I don't see this fail when running `rpc_help.py` locally. Should be fixed now.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585155146,585155146,src/rpc/client.cpp
Sjors,2021-03-02 07:51:28,"Definitely not. You could just make a separate PR for it later, and maybe write a comment to point out the duplication. ",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585331716,585331716,src/index/coinstatsindex.cpp
MarcoFalke,2021-03-02 09:45:58,Instead of double-negation this could be named `use_index (default: true)`?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585414659,585414659,src/rpc/blockchain.cpp
MarcoFalke,2021-03-02 09:47:43,"Would be nice to use a fixed address, instead of relying on the hardcoded one to not change. Also, could this be split up into a separate test-only pull?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r585415984,585415984,test/functional/feature_utxo_set_hash.py
fjahr,2021-03-03 22:32:17,"Yeah, to be consistent we should only count stuff that actually ends up in the UTXO set.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586842261,586842261,src/index/coinstatsindex.cpp
fjahr,2021-03-04 00:39:18,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586921614,586921614,src/rpc/blockchain.cpp
fjahr,2021-03-04 00:42:24,"Yeah, I also still want to switch the test to use MiniWallet, that improvement is coming up. I could make a test only pull but personally, I find it hard to review a PR without some tests alongside it. But overall this has still grown quite a bit and there are probably still plenty of tests to be written, so I will think about where to make a good cut.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586922720,586922720,test/functional/feature_utxo_set_hash.py
fjahr,2021-03-04 00:44:19,"I added the test, please let me know if you can think of other scenarios that I might have missed.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923367,586923367,test/functional/feature_coinstatsindex.py
fjahr,2021-03-04 00:44:23,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923385,586923385,src/index/coinstatsindex.cpp
fjahr,2021-03-04 00:44:30,"Yepp, fixed.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923437,586923437,src/index/coinstatsindex.cpp
fjahr,2021-03-04 00:44:41,"Yepp, makes sense. Done.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r586923513,586923513,src/validation.cpp
MarcoFalke,2021-03-07 13:16:12,"Splitting up the tests makes it easier to check for accidental regressions (https://github.com/bitcoin/bitcoin/pull/19145#discussion_r575334728, https://github.com/bitcoin/bitcoin/pull/19145#pullrequestreview-579351730, ...). If the tests are changed along with changes that should be refactor-only or new tests added for a different feature than the one being introduced, it may be easier to miss bu",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589029056,589029056,test/functional/feature_utxo_set_hash.py
Sjors,2021-03-07 18:40:35,d608c400411f1451d6298efc1bf6f200a56aa136: no need to brag that you use `vim`,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589070367,589070367,src/index/coinstatsindex.cpp
Sjors,2021-03-07 18:59:45,"`stats.hashBlock = pindex->GetBlockHash();` so this check doesn't really do much. I believe what you want to (also) check here is that `muhash` for height 111 matches `muhash` for `blocks[0]`.\n\nFor context, the bit I'm worried about is that `CoinStatsIndex::WriteBlock` first attempts to fetch by height, only then falls back to fetching by hash.\n\nSo in the case of a reorg, I think it will i",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589072478,589072478,test/functional/feature_coinstatsindex.py
fjahr,2021-03-08 20:34:50,You caught me ;) Fixed.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589729470,589729470,src/index/coinstatsindex.cpp
fjahr,2021-03-08 20:42:08,"I think I got you now. Initially, I misunderstood that I should move all the tests in this PR into separate PRs but I think you were only referring to the #19145 follow-ups, correct? I have moved these into #21390 and use one of the deterministic privkeys there now.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589733818,589733818,test/functional/feature_utxo_set_hash.py
fjahr,2021-03-08 22:11:30,"Interesting. Thanks for the clearer description @Sjors. The reorg case that you describe here (querying a reorged out block by hash) would return an error until now because `ParseHashOrHeight()` is checking that the queried block is part of the active chain. But I think it could be interesting to have that functionality so I removed this check and added the test. It works fine. However, I am still",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r589785367,589785367,test/functional/feature_coinstatsindex.py
Sjors,2021-03-09 09:06:03,"> But I think it could be interesting to have that functionality so I removed this check and added the test. It works fine.\n\nNice!\n\n> Do you mean just activating the index for the first time on a node that is aware of some stale blocks?\n\nCorrect. Do those stale blocks get indexed?\n\n",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r590101001,590101001,test/functional/feature_coinstatsindex.py
Sjors,2021-03-09 09:45:47,I expanded the test to do a deeper reorg: https://github.com/Sjors/bitcoin/commit/24c37b2dc446e944176093f1cd47f32686cdd1aa,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r590143682,590143682,test/functional/feature_coinstatsindex.py
fjahr,2021-03-10 23:50:26,"Cool, I pulled in your changes and made you co-author. The stale blocks don't get indexed because the base index only follows the active chain when syncing. I have added some additional coverage for that in the reorg test part, mainly to document that behavior. I have pulled the change that allows querying stale blocks in its own commit so it's more clear that this also touches `getblockstats` and",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r591963642,591963642,test/functional/feature_coinstatsindex.py
fanquake,2021-03-12 00:45:24,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r592832081,592832081,src/init.cpp
fjahr,2021-03-12 23:53:28,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r593512325,593512325,src/init.cpp
jonatack,2021-03-15 11:38:47,"I'm seeing build errors here (debian gcc 10.2.1)\n```\nindex/coinstatsindex.cpp: In constructor ‘CoinStatsIndex::CoinStatsIndex(size_t, bool, bool)’:\nindex/coinstatsindex.cpp:102:12: error: ‘MakeUnique’ was not declared in this scope\n  102 |     m_db = MakeUnique<CoinStatsIndex::DB>(path / ""db"", n_cache_size, f_memory, f_wipe);\n      |            ^~~~~~~~~~\n```\nand with clang 11\n```",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594262300,594262300,src/index/coinstatsindex.cpp
jonatack,2021-03-15 12:26:57,"Update: build, unit tests and `test/functional/feature_coinstatsindex.py` are green for me locally after replacing with `std::make_unique`.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594291070,594291070,src/index/coinstatsindex.cpp
fjahr,2021-03-15 21:33:28,"Ugh, indeed, sloppily overlooked during the last update. Thanks @jonatack ! Fixed.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r594698655,594698655,src/index/coinstatsindex.cpp
jonatack,2021-03-23 12:05:42,"Perhaps provide the best block height so the user doesn't have to call `getindexinfo` to find out. Maybe a bit long, but something like:\n\nUnable to read the UTXO set beyond the current best block height of 3190, as the coinstatsindex is still syncing.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599507629,599507629,src/rpc/blockchain.cpp
jonatack,2021-03-23 14:13:41,"9d4c991 if you retouch, it would be nice to provide some context in the commit message, point to a discussion or benchmark, etc.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599606214,599606214,src/crypto/muhash.cpp
jonatack,2021-03-23 15:01:30,"31d0b7f7 could make the same change here as in `validation.cpp:L5421` in the same commit (or vice-versa)\n\nTwo possible simplifications:\n\na) pass the argument in the tests, drop unneeded ctor that is currently only used for tests\n```diff\nsrc/node/coinstats.h\n@@ -56,7 +56,6 @@ struct CCoinsStats \n     CCoinsStats(CoinStatsHashType hash_type) : m_hash_type(hash_type) {}\n-    CCoinsS",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r599652604,599652604,src/test/fuzz/coins_view.cpp
jonatack,2021-03-26 18:56:52,It would be nice indeed to avoid adding a circular dependency.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602524356,602524356,test/lint/lint-circular-dependencies.sh
jonatack,2021-03-27 19:47:05,590b887de0b5f6cb ISTM this line should be added in 6aedd7bb05  where the `hash_or_height` param is added,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602784581,602784581,src/rpc/client.cpp
jonatack,2021-03-27 19:52:49,590b887de0b5f6cb didn't look deeply but does there need to be an equivalent inverse of this BIP30 duplicate transactions code in `CoinStatsIndex::ReverseBlock()`?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602785206,602785206,src/index/coinstatsindex.cpp
leonardojobim,2021-03-28 20:52:36,"Just a follow-up suggestion.\nIt adds the current Coinstatsindex height in the error message, so the the user can see the progress of the synchronization.\n\n```\nUnable to read UTXO set. Coinstatsindex is still syncing. Current height: 77329\nUnable to read UTXO set. Coinstatsindex is still syncing. Current height: 86827\n```\n\n```suggestion\n            throw JSONRPCError(RPC_INTERNAL_",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r602930964,602930964,src/rpc/blockchain.cpp
achow101,2021-03-29 20:52:12,"In 435ed5ba6589bf8391c3374ebf74bafed5f13237 ""index: Coinstats index can be activated with command line flag""\n\nThis is an unrelated move. It isn't necessary to have all of the arguments in alphabetical order, the formatter for output will do that automatically.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603605338,603605338,src/init.cpp
achow101,2021-03-29 20:53:56,"In 435ed5ba6589bf8391c3374ebf74bafed5f13237 ""index: Coinstats index can be activated with command line flag""\n\nThis comment is incorrect. The block filter index is not disallowed when pruning is enabled.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603606325,603606325,src/init.cpp
achow101,2021-03-29 20:56:08,"I don't think it is necessary to disallow the coin stats index when pruning is enabled. The only reason that txindex disallows it is because txindex gets the transaction data by reading it off disk from the block files, so that is incompatible with pruning.\n\nThe coin stats index doesn't have the same problem. The only issue would be if there were a large reorg and it needed the undo data that ",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603607663,603607663,src/init.cpp
achow101,2021-03-29 20:57:35,"In 435ed5ba6589bf8391c3374ebf74bafed5f13237 ""index: Coinstats index can be activated with command line flag""\n\n`hash_type muhash` is also allowed.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603608582,603608582,src/node/coinstats.cpp
achow101,2021-03-29 21:12:28,"In e880a5e95b999369bc277ed4d0ecbf0eaa758e88 ""index: Add Coinstats index""\n\nThis would be easier to read as `if (!tx->IsCoinbase())`",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603616976,603616976,src/index/coinstatsindex.cpp
jonatack,2021-03-29 21:25:35,"agree, made a similar comment here: https://github.com/jonatack/bitcoin/commit/d4fb34de51a3d21ae68e8331822020e6fc2f06e6#r48780818",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603624171,603624171,src/node/coinstats.cpp
jonatack,2021-03-29 21:26:30,Agree: https://github.com/jonatack/bitcoin/commit/d4fb34de51a3d21ae68e8331822020e6fc2f06e6#r48780784,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r603624618,603624618,src/init.cpp
fjahr,2021-04-05 22:38:15,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374124,607374124,src/index/coinstatsindex.cpp
fjahr,2021-04-05 22:38:20,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374153,607374153,src/node/coinstats.cpp
fjahr,2021-04-05 22:38:31,It was when I first wrote that commit ;) fixed,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374219,607374219,src/init.cpp
fjahr,2021-04-05 22:38:38,Undone,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374254,607374254,src/init.cpp
fjahr,2021-04-05 22:38:45,"Thanks, I added this with some tweaks.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374299,607374299,src/rpc/blockchain.cpp
fjahr,2021-04-05 22:38:53,"No, only if we would expect to reorg this deep :)",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374334,607374334,src/index/coinstatsindex.cpp
fjahr,2021-04-05 22:39:21,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607374536,607374536,src/rpc/blockchain.cpp
Sjors,2021-04-06 09:20:13,"Which (also) can't happen because of the checkpoint at height 295,000.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607685333,607685333,src/index/coinstatsindex.cpp
jonatack,2021-04-06 12:56:13,"5b683ab suggest adding a comment here, as this is quite far away from the parent `if`\n```diff\n     } else {\n+        // genesis block\n         m_block_unspendable_amount += block_subsidy;\n         m_unspendables_genesis_block += block_subsidy;\n```",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607823680,607823680,src/index/coinstatsindex.cpp
jonatack,2021-04-06 13:25:54,"7287e76f28\n\n- what does this mean: ""Use Coinstatsindex even when it is available."" ... I am `#notsurehere` but maybe it is supposed to say:\n```suggestion\n                    {""use_index"", RPCArg::Type::BOOL, /* default */ ""true"", ""Use coinstatsindex, if available""},\n```\n\n- s/Coinstatsindex/coinstatsindex/ for consistency\n\n- drop full stops for consistency\n",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607846449,607846449,src/rpc/blockchain.cpp
jonatack,2021-04-06 14:02:19,"13d2fc63ac\n\nVerified this new error message (thanks for improving this):\n```\n$ bitcoin-cli -signet gettxoutsetinfo muhash 32353\nerror code: -32603\nerror message:\nUnable to read UTXO set. coinstatsindex is still syncing. Current height: 31025\n```\n\nsuggestion, as ""coinstatsindex"" after a full stop looks a little odd:\n```suggestion\n                throw JSONRPCError(RPC_INTERN",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607877856,607877856,src/rpc/blockchain.cpp
jonatack,2021-04-06 14:06:21,"13d2fc63ac\n\n```suggestion\n            const IndexSummary summary{g_coin_stats_index->GetSummary()};\n```",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607881278,607881278,src/rpc/blockchain.cpp
jonatack,2021-04-06 14:09:42,"13d2fc6 looks like this can be const (I'm not sure there is a reason to declare this variable instead of doing `std::make_unique<CoinStatsIndex>(/* coin_stats_cache_size */ 0, false, fReindex);` at line 1829 below)",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r607884218,607884218,src/init.cpp
fjahr,2021-04-06 22:15:39,I agree but I don't see how to achieve this with some refactor if it's done right. It's is on the top of my TODO list to resolve some circular dependencies but I think it's out of the scope of this PR.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608214880,608214880,test/lint/lint-circular-dependencies.sh
fjahr,2021-04-06 23:01:07,I have dropped the ctor. We need to keep the explicit passing of the hash type in validation in case any default changes but we still need hash_serialized for assume_utxo.,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232424,608232424,src/test/fuzz/coins_view.cpp
fjahr,2021-04-06 23:01:35,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232610,608232610,src/index/coinstatsindex.cpp
fjahr,2021-04-06 23:01:45,"Hm, I already fixed this but must have undone it somehow in all the rebasing :-/ I hope it works now.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232675,608232675,src/rpc/blockchain.cpp
fjahr,2021-04-06 23:01:56,Done,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232769,608232769,src/rpc/blockchain.cpp
fjahr,2021-04-06 23:02:01,Done (inlined),https://github.com/bitcoin/bitcoin/pull/19521#discussion_r608232810,608232810,src/init.cpp
jonatack,2021-04-11 08:58:57,Thanks; done in latest update a4eaae4,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r611155443,611155443,src/crypto/muhash.cpp
jonatack,2021-04-17 22:26:17,"In 0123b7e4e2 ""rpc: gettxoutsetinfo can be requested for specific blockheights"" the range-diff seems to be:\n```diff\n-        if (!::ChainActive().Contains(pindex)) {\n+        if (active_chain.Contains(pindex)) {\n```\nShould it be `if (!active_chain.Contains(pindex)) {` ? (it's late so I may be misreading)",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615311365,615311365,src/rpc/blockchain.cpp
jonatack,2021-04-17 22:32:28,"Looks like that commit and then f87cf789 are affected. Ugh, my sympathies for the rebase.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615311910,615311910,src/rpc/blockchain.cpp
fjahr,2021-04-17 22:53:36,"Yepp, thanks. Fixed!",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r615313624,615313624,src/rpc/blockchain.cpp
jonatack,2021-04-19 22:53:25,"nit if you have to rebase, this is the only help argument of the three that doesn't end with a period.\n\n```suggestion\n                    {""hash_or_height"", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, ""The block hash or height of the target height (only available with coinstatsindex)."", """", {"""", ""string or numeric""}},\n```",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r616228938,616228938,src/rpc/blockchain.cpp
promag,2021-04-21 09:08:26,"9c8a265fd21a87228c18a1661df99fedc1866baf\n\n`const CoinStatsHashType m_hash_type` and drop constructor.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617340759,617340759,src/node/coinstats.h
promag,2021-04-21 09:33:26,"3f166ecc125fce6ccd995687fa16572090a5d099\n\nRemove unnecessary block.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617359458,617359458,src/node/coinstats.cpp
promag,2021-04-21 09:35:40,"3f166ecc125fce6ccd995687fa16572090a5d099\n\nnit, can be `static` and move `{` to new line.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r617361123,617361123,src/rpc/blockchain.cpp
jonatack,2021-05-01 12:03:51,done in #21818 ,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r624500568,624500568,src/rpc/blockchain.cpp
MarcoFalke,2021-05-18 06:26:18,could just make `j` of type `uint32_t` to avoid the cast?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634079897,634079897,src/index/coinstatsindex.cpp
MarcoFalke,2021-05-18 06:37:59,"why is this called `m_block...`? The value is not per block, but the *total*, like all other CAmount members!? It might be good to call all of them `m_block`, or `m_total`, or just skip the prefix for all of them.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634085868,634085868,src/index/coinstatsindex.cpp
MarcoFalke,2021-05-18 06:44:05,Shouldn't this be a batch to ensure an atomic operation? Otherwise you may end up with a corrupt muhash?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634089179,634089179,src/index/coinstatsindex.cpp
MarcoFalke,2021-05-18 06:54:59,Could use early return `if (!...) return false;` to avoid large multi-line nesting ,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634095336,634095336,src/index/coinstatsindex.cpp
MarcoFalke,2021-05-18 07:10:09,"Under what circumstance would this recovery condition be hit? Also, shouldn't the error message mention that this condition failed as well?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634104483,634104483,src/index/coinstatsindex.cpp
MarcoFalke,2021-05-18 07:10:21,"Under what circumstance would this recovery condition be hit? Also, shouldn't the error message mention that this condition failed as well?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634104604,634104604,src/index/coinstatsindex.cpp
MarcoFalke,2021-05-18 07:12:47,missing `{}` :sweat_smile: ,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634106089,634106089,src/init.cpp
MarcoFalke,2021-05-18 08:35:24,"why is this needed? (sync_all should call syncwithvalidationinterface). Also, if it didn't, shouldn't the index RPC call syncwithvalidationinterface internally by itself, similar to how the wallet does it?",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634165852,634165852,test/functional/feature_coinstatsindex.py
MarcoFalke,2021-05-18 08:40:13,Empty string as documentation? Would be nice to explain this a bit better. Does it include unspendable outputs ...?,https://github.com/bitcoin/bitcoin/pull/19521#discussion_r634169745,634169745,src/rpc/blockchain.cpp
fjahr,2021-05-24 18:08:27,Hopefully removed soon anyway with #21726 :),https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638163118,638163118,src/init.cpp
fjahr,2021-05-24 18:10:35,"Yepp, it used to be per block, but the names were not changed when the values were changed to track totals.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638164201,638164201,src/index/coinstatsindex.cpp
fjahr,2021-05-24 18:11:25,"True, I missed the option to use the `BlockUntilSynced...` function from BaseIndex. ",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638164626,638164626,test/functional/feature_coinstatsindex.py
fjahr,2021-05-24 18:13:02,"This could happen if there is a reorg that the index has not picked up on yet, so the hash returned from the height index is not on the active chain anymore. I added a warning logging and changed the `error()` message to be more accurate.",https://github.com/bitcoin/bitcoin/pull/19521#discussion_r638165428,638165428,src/index/coinstatsindex.cpp
