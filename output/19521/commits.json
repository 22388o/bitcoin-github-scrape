[
  {
    "sha": "2e2648a9021dfbb6e17dfa81472f057dacbc34e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTI2NDhhOTAyMWRmYmI2ZTE3ZGZhODE0NzJmMDU3ZGFjYmMzNGUw",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-02-25T18:09:12Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:28:46Z"
      },
      "message": "crypto: Make MuHash Remove method efficient\n\nDivision of MuHash objects are very expensive and multiplication relatively cheap. The whole idea of introducing and tracking numerator and denominators seperately as a representation of the internal state was so that divisions would be rare. So using divison in the Remove method did not make any sense and was just a silly mistake which is corrected here.",
      "tree": {
        "sha": "d1596c1afc1bf66d07402277c2ff6b2dbcebb6e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1596c1afc1bf66d07402277c2ff6b2dbcebb6e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e2648a9021dfbb6e17dfa81472f057dacbc34e0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9y98VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN+xsQAIJJ/r9l6fQ/BAY6fxy3ECIzmsBa\niJDbLi0AKqTWkEGfLluctG2MYTNBU/7XGw0wdVBbjU4YEE6ugbXd5ZfU4zZGzpL+\n5FQR6HB+AKUh5ciZTvMhG7O6RcBARWly4YI2F1UnkIadMiREJ8Q4xtHj0JczJ/ng\nosgI0d3qW6cZXaT/zcgv1AEyQY83zJwYZI3+Zg8HAFNRH3p3kBOOaCZQ7rfg7nDg\nvrUuk36oV0ZUFI6Pd5CqN1ZB+5jUPUxkysU7XfbHrdjf37gWlZfK00cJ/SCiDJ75\nmP/VJQAl31ddqcUN8uu1RboPKTbV5a6ZybFDMprrk0A3tbiNNpO3qEetmS4WH14z\naSG/bpRPNkOMyxP5WGzJdvKzf/NiTJyCnogqZo5xGJxFUtF9xdQ1RFsxw4q7pj6x\nf1e8QIYBiisgjIqM4YQRAHkj1dSqQjTmyDAx+j7dd+8sZ2Mi+/YkMiKGTx+5pHpF\n/MZ5C+Lt15eWyE/EzWfSijG7eAsgciCjrZNsEcr7ffJzZxmvXPv+ojlNUvvcCXza\ncEk68G6s3jWop1o5wkN1gd+pY6Uh322VvWpzoHPu1GcdWEbhk3bIRntkTMGxeptX\nIIUVQzM9DBqTL4QTPHJoVQc2Jy7hiTMHw2CFdertGwcbQseBL936uuJ7nU5EoOTS\npSLQtlTHarhXfNSC\n=13Vp\n-----END PGP SIGNATURE-----",
        "payload": "tree d1596c1afc1bf66d07402277c2ff6b2dbcebb6e7\nparent 13d27b452d4b60010c54d4f80757dea9805076be\nauthor Fabian Jahr <fjahr@protonmail.com> 1614276552 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618856926 +0200\n\ncrypto: Make MuHash Remove method efficient\n\nDivision of MuHash objects are very expensive and multiplication relatively cheap. The whole idea of introducing and tracking numerator and denominators seperately as a representation of the internal state was so that divisions would be rare. So using divison in the Remove method did not make any sense and was just a silly mistake which is corrected here.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e2648a9021dfbb6e17dfa81472f057dacbc34e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e2648a9021dfbb6e17dfa81472f057dacbc34e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e2648a9021dfbb6e17dfa81472f057dacbc34e0/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13d27b452d4b60010c54d4f80757dea9805076be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13d27b452d4b60010c54d4f80757dea9805076be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13d27b452d4b60010c54d4f80757dea9805076be"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a2b769cd5664697437c86f26ed98ee2a7bac4ad3",
        "filename": "src/crypto/muhash.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e2648a9021dfbb6e17dfa81472f057dacbc34e0/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e2648a9021dfbb6e17dfa81472f057dacbc34e0/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=2e2648a9021dfbb6e17dfa81472f057dacbc34e0",
        "patch": "@@ -341,6 +341,6 @@ MuHash3072& MuHash3072::Insert(Span<const unsigned char> in) noexcept {\n }\n \n MuHash3072& MuHash3072::Remove(Span<const unsigned char> in) noexcept {\n-    m_numerator.Divide(ToNum3072(in));\n+    m_denominator.Multiply(ToNum3072(in));\n     return *this;\n }"
      }
    ]
  },
  {
    "sha": "9c8a265fd21a87228c18a1661df99fedc1866baf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzhhMjY1ZmQyMWE4NzIyOGMxOGExNjYxZGY5OWZlZGMxODY2YmFm",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-02-21T22:24:28Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:28:48Z"
      },
      "message": "refactor: Pass hash_type to CoinsStats in stats object",
      "tree": {
        "sha": "416934f0681eb9ffb00a08269a63b72292a3bbbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/416934f0681eb9ffb00a08269a63b72292a3bbbc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c8a265fd21a87228c18a1661df99fedc1866baf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9y+AVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN5Y0P/1+7lDD0y3teyOExVAc2cEPjhZx5\nmrpL0YzQa50fe4tUnWykdA/mnOmRRUXYHUbg6x3tZeAWvlyhDOuBZMD36oPBfUk3\nxLPilF2PSkRsoZntj2Xw0vNyLrvUcjVOLBy7vRah8p1ZKkplcinnpk2UQetSBYA7\nkc3w+vHcK4E01UbEFLn5vJZvvXVaRbQJJxQX6IoSjS7xTi1FjLFxB8tpPqtOL1Mt\nQqqkCqpeIW3FtdFgIIUbqg46YXM98WoFTimvqFAI41NMQsR8+BC6oJATUYuYfI34\nzKvo2Yq7fpfMS5lbFnIYDz/nWupyWB1YKfuCa8+8/c9VzqUdhuG+WovBRS80BMRC\nL5c1NcaTsWDn/OAbx+Gz7I801JuARctBn7bRplbPeLQm5yT4CIdhyJYwJgwQ3lxy\nuyN6wzzcdRtAe9xbtmoTwOp9jL7PYFHukjiAg/zbyg6Yke5dlJrtoSeli00lw3Mv\nruJpRfM4erLJXP81h3FTq7LDlLAd2Htua7qGtAm08ScmQvRXgHy9n0V0rrh6eJQL\n+auEZ6RFW6trvcg+3UbeSsggQqPYrQmB3bGvxVy+j9wPQVI6kwZpd3PpqejMqA6y\n1jiPmrGbk1p6NvBl8Rkh4Yba1naaOlNxmvf+rIb2JA+JatLaOtVeoU3gDvSANc6X\ni52QhxK84JSzPctP\n=qJbG\n-----END PGP SIGNATURE-----",
        "payload": "tree 416934f0681eb9ffb00a08269a63b72292a3bbbc\nparent 2e2648a9021dfbb6e17dfa81472f057dacbc34e0\nauthor Fabian Jahr <fjahr@protonmail.com> 1613946268 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618856928 +0200\n\nrefactor: Pass hash_type to CoinsStats in stats object\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8a265fd21a87228c18a1661df99fedc1866baf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8a265fd21a87228c18a1661df99fedc1866baf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8a265fd21a87228c18a1661df99fedc1866baf/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e2648a9021dfbb6e17dfa81472f057dacbc34e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e2648a9021dfbb6e17dfa81472f057dacbc34e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e2648a9021dfbb6e17dfa81472f057dacbc34e0"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 17,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c52b718b2292f661618d62be976e78d7f3271346",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8a265fd21a87228c18a1661df99fedc1866baf/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8a265fd21a87228c18a1661df99fedc1866baf/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=9c8a265fd21a87228c18a1661df99fedc1866baf",
        "patch": "@@ -86,7 +86,6 @@ static void ApplyStats(CCoinsStats& stats, T& hash_obj, const uint256& hash, con\n template <typename T>\n static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, T hash_obj, const std::function<void()>& interruption_point)\n {\n-    stats = CCoinsStats();\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n \n@@ -129,9 +128,9 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n     return true;\n }\n \n-bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, CoinStatsHashType hash_type, const std::function<void()>& interruption_point)\n+bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const std::function<void()>& interruption_point)\n {\n-    switch (hash_type) {\n+    switch (stats.m_hash_type) {\n     case(CoinStatsHashType::HASH_SERIALIZED): {\n         CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n         return GetUTXOStats(view, blockman, stats, ss, interruption_point);"
      },
      {
        "sha": "85896a2a1d8a68dcccb8df834dbcb71c3f229589",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8a265fd21a87228c18a1661df99fedc1866baf/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8a265fd21a87228c18a1661df99fedc1866baf/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=9c8a265fd21a87228c18a1661df99fedc1866baf",
        "patch": "@@ -23,6 +23,7 @@ enum class CoinStatsHashType {\n \n struct CCoinsStats\n {\n+    CoinStatsHashType m_hash_type;\n     int nHeight{0};\n     uint256 hashBlock{};\n     uint64_t nTransactions{0};\n@@ -34,9 +35,11 @@ struct CCoinsStats\n \n     //! The number of coins contained.\n     uint64_t coins_count{0};\n+\n+    CCoinsStats(CoinStatsHashType hash_type) : m_hash_type(hash_type) {}\n };\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const CoinStatsHashType hash_type, const std::function<void()>& interruption_point = {});\n+bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const std::function<void()>& interruption_point = {});\n \n #endif // BITCOIN_NODE_COINSTATS_H"
      },
      {
        "sha": "e06f4ec15b531bc9464095b99f0b71b8c0676b8c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8a265fd21a87228c18a1661df99fedc1866baf/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8a265fd21a87228c18a1661df99fedc1866baf/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9c8a265fd21a87228c18a1661df99fedc1866baf",
        "patch": "@@ -1093,22 +1093,23 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     UniValue ret(UniValue::VOBJ);\n \n-    CCoinsStats stats;\n+    const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n+    CCoinsStats stats{hash_type};\n+\n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     ChainstateManager& chainman = EnsureChainman(node);\n     CChainState& active_chainstate = chainman.ActiveChainstate();\n     active_chainstate.ForceFlushStateToDisk();\n \n-    const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n-\n     CCoinsView* coins_view;\n     BlockManager* blockman;\n     {\n         LOCK(::cs_main);\n         coins_view = &active_chainstate.CoinsDB();\n         blockman = &active_chainstate.m_blockman;\n     }\n-    if (GetUTXOStats(coins_view, *blockman, stats, hash_type, node.rpc_interruption_point)) {\n+\n+    if (GetUTXOStats(coins_view, *blockman, stats, node.rpc_interruption_point)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n         ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n@@ -2491,7 +2492,7 @@ static RPCHelpMan dumptxoutset()\n UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFile& afile)\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor;\n-    CCoinsStats stats;\n+    CCoinsStats stats{CoinStatsHashType::NONE};\n     CBlockIndex* tip;\n \n     {\n@@ -2511,7 +2512,7 @@ UniValue CreateUTXOSnapshot(NodeContext& node, CChainState& chainstate, CAutoFil\n \n         chainstate.ForceFlushStateToDisk();\n \n-        if (!GetUTXOStats(&chainstate.CoinsDB(), chainstate.m_blockman, stats, CoinStatsHashType::NONE, node.rpc_interruption_point)) {\n+        if (!GetUTXOStats(&chainstate.CoinsDB(), chainstate.m_blockman, stats, node.rpc_interruption_point)) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n         }\n "
      },
      {
        "sha": "21dc80cc8df7f77302cc86a3ca9225b542c72b45",
        "filename": "src/test/fuzz/coins_view.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8a265fd21a87228c18a1661df99fedc1866baf/src/test/fuzz/coins_view.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8a265fd21a87228c18a1661df99fedc1866baf/src/test/fuzz/coins_view.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/coins_view.cpp?ref=9c8a265fd21a87228c18a1661df99fedc1866baf",
        "patch": "@@ -258,10 +258,10 @@ FUZZ_TARGET_INIT(coins_view, initialize_coins_view)\n                 (void)GetTransactionSigOpCost(transaction, coins_view_cache, flags);\n             },\n             [&] {\n-                CCoinsStats stats;\n+                CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};\n                 bool expected_code_path = false;\n                 try {\n-                    (void)GetUTXOStats(&coins_view_cache, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats, CoinStatsHashType::HASH_SERIALIZED);\n+                    (void)GetUTXOStats(&coins_view_cache, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), stats);\n                 } catch (const std::logic_error&) {\n                     expected_code_path = true;\n                 }"
      },
      {
        "sha": "3ad53fbcb60196c5c7d41214d9435722f63605fb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8a265fd21a87228c18a1661df99fedc1866baf/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8a265fd21a87228c18a1661df99fedc1866baf/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9c8a265fd21a87228c18a1661df99fedc1866baf",
        "patch": "@@ -5285,14 +5285,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n         return false;\n     }\n \n-    CCoinsStats stats;\n+    CCoinsStats stats{CoinStatsHashType::HASH_SERIALIZED};\n     auto breakpoint_fnc = [] { /* TODO insert breakpoint here? */ };\n \n     // As above, okay to immediately release cs_main here since no other context knows\n     // about the snapshot_chainstate.\n     CCoinsViewDB* snapshot_coinsdb = WITH_LOCK(::cs_main, return &snapshot_chainstate.CoinsDB());\n \n-    if (!GetUTXOStats(snapshot_coinsdb, WITH_LOCK(::cs_main, return std::ref(m_blockman)), stats, CoinStatsHashType::HASH_SERIALIZED, breakpoint_fnc)) {\n+    if (!GetUTXOStats(snapshot_coinsdb, WITH_LOCK(::cs_main, return std::ref(m_blockman)), stats, breakpoint_fnc)) {\n         LogPrintf(\"[snapshot] failed to generate coins stats\\n\");\n         return false;\n     }"
      }
    ]
  },
  {
    "sha": "a8a46c4b3cfda4b95c92a36f8cebd3606377e57d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGE0NmM0YjNjZmRhNGI5NWM5MmEzNmY4Y2ViZDM2MDYzNzdlNTdk",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-02-21T22:09:50Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:28:48Z"
      },
      "message": "refactor: Simplify ApplyStats and ApplyHash",
      "tree": {
        "sha": "6832f0d1507e7d47683274c10f85b6e469a81b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6832f0d1507e7d47683274c10f85b6e469a81b83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9y+AVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNQ48P+gLVGl8LbwgCsw0C2DkseJWg29U4\nhb3SgZzzjrLeDskzngdWXPcdWx6x0fgPkXrTB6EKXkLW+CkWI2GecPP7S78Xx6eT\nhB/A+6SGBcM6uChu2XDUU2V43DqUm+YFwm4DR9mXfACkSldIJcuu2lXXYsG3lP/Z\nBvL3GPSD/rc1xQN2+MgT0ZX3EVRsMkiEipzAfTvzdn+0nFcObkKVPDQfZ/kdW+7R\nUlL4R1s80zmuTwUD1LD4P8xR4oLaDKcllXuskbQ0UG9ARDZZHBfsErzrp8ucODj8\n8ydE101mJJpahmCXfR1k8MNTgPCDeQntfIfG02Wes429AcmBZbgnLQ5C3FGRLQu5\ndU7sA8JxkCjkwZLXRoSqPpyjwH+BjDoeAuKP+g4nWY3LbgBwBcYlOB02TX2J+hhg\nWMp2qSZzYCwZOJnZDtQRvFTGYwg1q2YCxwSZqB4719ZydkdxAt4v4lqIh9yUfJ4d\nu/wRUgbbbGmnQwNSSurMUMKIPPpulblw1s18MUas/HE6RuGM574aqXwCQY5Q1H1S\nJ0XvHL7FfXIOq1HWc6BVWX6uVF5uyQsffkdXwT2EtI7Plg5Be38YfAkBScop302y\nna4AA/8PqQS7mYqxjL6fLpUllWcdeqJ0iBrbAbkT98M3+zy83vvVkQovbsg+c4Zy\nVrpoyfk61hZZ0kcN\n=iitx\n-----END PGP SIGNATURE-----",
        "payload": "tree 6832f0d1507e7d47683274c10f85b6e469a81b83\nparent 9c8a265fd21a87228c18a1661df99fedc1866baf\nauthor Fabian Jahr <fjahr@protonmail.com> 1613945390 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618856928 +0200\n\nrefactor: Simplify ApplyStats and ApplyHash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c8a265fd21a87228c18a1661df99fedc1866baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8a265fd21a87228c18a1661df99fedc1866baf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8a265fd21a87228c18a1661df99fedc1866baf"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 39,
      "deletions": 36
    },
    "files": [
      {
        "sha": "b17a475ca3b4b67d487af8a176d2240194db4ebf",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 36,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=a8a46c4b3cfda4b95c92a36f8cebd3606377e57d",
        "patch": "@@ -26,36 +26,6 @@ static uint64_t GetBogoSize(const CScript& scriptPubKey)\n            scriptPubKey.size() /* scriptPubKey */;\n }\n \n-static void ApplyHash(CCoinsStats& stats, CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs, std::map<uint32_t, Coin>::const_iterator it)\n-{\n-    if (it == outputs.begin()) {\n-        ss << hash;\n-        ss << VARINT(it->second.nHeight * 2 + it->second.fCoinBase ? 1u : 0u);\n-    }\n-\n-    ss << VARINT(it->first + 1);\n-    ss << it->second.out.scriptPubKey;\n-    ss << VARINT_MODE(it->second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n-\n-    if (it == std::prev(outputs.end())) {\n-        ss << VARINT(0u);\n-    }\n-}\n-\n-static void ApplyHash(CCoinsStats& stats, std::nullptr_t, const uint256& hash, const std::map<uint32_t, Coin>& outputs, std::map<uint32_t, Coin>::const_iterator it) {}\n-\n-static void ApplyHash(CCoinsStats& stats, MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs, std::map<uint32_t, Coin>::const_iterator it)\n-{\n-    COutPoint outpoint = COutPoint(hash, it->first);\n-    Coin coin = it->second;\n-\n-    CDataStream ss(SER_DISK, PROTOCOL_VERSION);\n-    ss << outpoint;\n-    ss << static_cast<uint32_t>(coin.nHeight * 2 + coin.fCoinBase);\n-    ss << coin.out;\n-    muhash.Insert(MakeUCharSpan(ss));\n-}\n-\n //! Warning: be very careful when changing this! assumeutxo and UTXO snapshot\n //! validation commitments are reliant on the hash constructed by this\n //! function.\n@@ -68,14 +38,45 @@ static void ApplyHash(CCoinsStats& stats, MuHash3072& muhash, const uint256& has\n //! It is also possible, though very unlikely, that a change in this\n //! construction could cause a previously invalid (and potentially malicious)\n //! UTXO snapshot to be considered valid.\n-template <typename T>\n-static void ApplyStats(CCoinsStats& stats, T& hash_obj, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+static void ApplyHash(CHashWriter& ss, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+{\n+    for (auto it = outputs.begin(); it != outputs.end(); ++it) {\n+        if (it == outputs.begin()) {\n+            ss << hash;\n+            ss << VARINT(it->second.nHeight * 2 + it->second.fCoinBase ? 1u : 0u);\n+        }\n+\n+        ss << VARINT(it->first + 1);\n+        ss << it->second.out.scriptPubKey;\n+        ss << VARINT_MODE(it->second.out.nValue, VarIntMode::NONNEGATIVE_SIGNED);\n+\n+        if (it == std::prev(outputs.end())) {\n+            ss << VARINT(0u);\n+        }\n+    }\n+}\n+\n+static void ApplyHash(std::nullptr_t, const uint256& hash, const std::map<uint32_t, Coin>& outputs) {}\n+\n+static void ApplyHash(MuHash3072& muhash, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n+{\n+    for (auto it = outputs.begin(); it != outputs.end(); ++it) {\n+        COutPoint outpoint = COutPoint(hash, it->first);\n+        Coin coin = it->second;\n+\n+        CDataStream ss(SER_DISK, PROTOCOL_VERSION);\n+        ss << outpoint;\n+        ss << static_cast<uint32_t>(coin.nHeight * 2 + coin.fCoinBase);\n+        ss << coin.out;\n+        muhash.Insert(MakeUCharSpan(ss));\n+    }\n+}\n+\n+static void ApplyStats(CCoinsStats& stats, const uint256& hash, const std::map<uint32_t, Coin>& outputs)\n {\n     assert(!outputs.empty());\n     stats.nTransactions++;\n     for (auto it = outputs.begin(); it != outputs.end(); ++it) {\n-        ApplyHash(stats, hash_obj, hash, outputs, it);\n-\n         stats.nTransactionOutputs++;\n         stats.nTotalAmount += it->second.out.nValue;\n         stats.nBogoSize += GetBogoSize(it->second.out.scriptPubKey);\n@@ -107,7 +108,8 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n         Coin coin;\n         if (pcursor->GetKey(key) && pcursor->GetValue(coin)) {\n             if (!outputs.empty() && key.hash != prevkey) {\n-                ApplyStats(stats, hash_obj, prevkey, outputs);\n+                ApplyStats(stats, prevkey, outputs);\n+                ApplyHash(hash_obj, prevkey, outputs);\n                 outputs.clear();\n             }\n             prevkey = key.hash;\n@@ -119,7 +121,8 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n         pcursor->Next();\n     }\n     if (!outputs.empty()) {\n-        ApplyStats(stats, hash_obj, prevkey, outputs);\n+        ApplyStats(stats, prevkey, outputs);\n+        ApplyHash(hash_obj, prevkey, outputs);\n     }\n \n     FinalizeHash(hash_obj, stats);"
      }
    ]
  },
  {
    "sha": "dd58a4de21469d6d848ae309edc47f558628221d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDU4YTRkZTIxNDY5ZDZkODQ4YWUzMDllZGM0N2Y1NTg2MjgyMjFk",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-24T17:56:47Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:28:48Z"
      },
      "message": "index: Add Coinstats index\n\nThe index holds the values previously calculated in coinstats.cpp\nfor each block, representing the state of the UTXO set at each\nheight.",
      "tree": {
        "sha": "6b914fa5b525d73db702bd454cd7a467fac63a73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b914fa5b525d73db702bd454cd7a467fac63a73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd58a4de21469d6d848ae309edc47f558628221d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9y+AVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNV9wQAKL1g7kFclCrix0WELYxwgWu4Rvv\nbHgRYXDg4ykFdLbP2HX9g2xvFnLJippCa4XeWsTNv2unGwGcekZy3hCGwVLAXySo\nkbuI4VKopZVpyaoWpd3EB1yLww0tQlfqPGte2LNxmR1PUncTtf302eCkt2eZr3Aq\n+2Owsx6m8BO+KZqVr0CWNZgtUaHIVwTyfHrXi12n0Jj/BrEZOaX7Bst/zLbnqEKk\nipFM/7etqZasX6iVnIRRz2OefQfcopbELWupH/s0+F+o5Wwatih60H66+Klch76E\n5FNV91yVe180FB5ISO4PggvPvyZl9Oj4qb1M5N3zsTeEyU5rK8OO1GD4YvYG5qsH\naEi+5ZPQpWHdwaCqvHDpzIyMhqyv1OhHLE7WU8v3wLXfULtaXbgsvjJIY1krfgxS\nt/r7dBJuezlGhZ2vOyenvdqhkfvEdElisUhqroBE8Fd1+DPgjGcWxRQKWhXrA2bM\nYzCv9L2Hnn9lqCpb5MpjxqRM4Todv+/3g6kcPCByYYG95NSZKWl/vHWPCaIKMyH2\nPpdkzyEkbgJ60uFmABOpNb2s0oL6xaoHgZJpWS/SoalCuW2dpQ/SMgCMotUVpaFe\nzH/CSOrpGpzpp7/AlSqsaASD8avRAk8eL+Bq5zY8/MBa19ycdFBMjeQ4bcYb7hU3\n4f+Rf9F/nxlX5bMe\n=OWXZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b914fa5b525d73db702bd454cd7a467fac63a73\nparent a8a46c4b3cfda4b95c92a36f8cebd3606377e57d\nauthor Fabian Jahr <fjahr@protonmail.com> 1579888607 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618856928 +0200\n\nindex: Add Coinstats index\n\nThe index holds the values previously calculated in coinstats.cpp\nfor each block, representing the state of the UTXO set at each\nheight.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd58a4de21469d6d848ae309edc47f558628221d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd58a4de21469d6d848ae309edc47f558628221d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd58a4de21469d6d848ae309edc47f558628221d/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8a46c4b3cfda4b95c92a36f8cebd3606377e57d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8a46c4b3cfda4b95c92a36f8cebd3606377e57d"
      }
    ],
    "stats": {
      "total": 445,
      "additions": 437,
      "deletions": 8
    },
    "files": [
      {
        "sha": "73d4edb77ad5a35c4acd5966de75229941cc53a4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd58a4de21469d6d848ae309edc47f558628221d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd58a4de21469d6d848ae309edc47f558628221d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=dd58a4de21469d6d848ae309edc47f558628221d",
        "patch": "@@ -152,6 +152,7 @@ BITCOIN_CORE_H = \\\n   i2p.h \\\n   index/base.h \\\n   index/blockfilterindex.h \\\n+  index/coinstatsindex.h \\\n   index/disktxpos.h \\\n   index/txindex.h \\\n   indirectmap.h \\\n@@ -318,6 +319,7 @@ libbitcoin_server_a_SOURCES = \\\n   i2p.cpp \\\n   index/base.cpp \\\n   index/blockfilterindex.cpp \\\n+  index/coinstatsindex.cpp \\\n   index/txindex.cpp \\\n   init.cpp \\\n   mapport.cpp \\"
      },
      {
        "sha": "d887620524bcac7fb78a1d90e2b4d747623a743d",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd58a4de21469d6d848ae309edc47f558628221d/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd58a4de21469d6d848ae309edc47f558628221d/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=dd58a4de21469d6d848ae309edc47f558628221d",
        "patch": "@@ -81,6 +81,8 @@ class BaseIndex : public CValidationInterface\n \n     void ChainStateFlushed(const CBlockLocator& locator) override;\n \n+    const CBlockIndex* CurrentIndex() { return m_best_block_index.load(); };\n+\n     /// Initialize internal state from the database and block index.\n     virtual bool Init();\n "
      },
      {
        "sha": "7f59323b8c993fa1078bee2aecb41e620b87a211",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "added",
        "additions": 363,
        "deletions": 0,
        "changes": 363,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd58a4de21469d6d848ae309edc47f558628221d/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd58a4de21469d6d848ae309edc47f558628221d/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=dd58a4de21469d6d848ae309edc47f558628221d",
        "patch": "@@ -0,0 +1,363 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <coins.h>\n+#include <crypto/muhash.h>\n+#include <index/coinstatsindex.h>\n+#include <node/blockstorage.h>\n+#include <serialize.h>\n+#include <txdb.h>\n+#include <undo.h>\n+#include <validation.h>\n+\n+static constexpr char DB_BLOCK_HASH = 's';\n+static constexpr char DB_BLOCK_HEIGHT = 't';\n+static constexpr char DB_MUHASH = 'M';\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 muhash;\n+    uint64_t transaction_output_count;\n+    uint64_t bogo_size;\n+    CAmount total_amount;\n+\n+    SERIALIZE_METHODS(DBVal, obj)\n+    {\n+        READWRITE(obj.muhash);\n+        READWRITE(obj.transaction_output_count);\n+        READWRITE(obj.bogo_size);\n+        READWRITE(obj.total_amount);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    explicit DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template <typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template <typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix{static_cast<char>(ser_readdata8(s))};\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 block_hash;\n+\n+    explicit DBHashKey(const uint256& hash_in) : block_hash(hash_in) {}\n+\n+    SERIALIZE_METHODS(DBHashKey, obj)\n+    {\n+        char prefix{DB_BLOCK_HASH};\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for coinstatsindex DB hash key\");\n+        }\n+\n+        READWRITE(obj.block_hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    fs::path path{GetDataDir() / \"indexes\" / \"coinstats\"};\n+    fs::create_directories(path);\n+\n+    m_db = std::make_unique<CoinStatsIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+}\n+\n+bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+\n+        // TODO: Deduplicate BIP30 related code\n+        bool is_bip30_block{(pindex->nHeight == 91722 && pindex->GetBlockHash() == uint256S(\"0x00000000000271a2dc26e7667f8419f2e15416dc6955e5a6c6cdf3f2574dd08e\")) ||\n+                            (pindex->nHeight == 91812 && pindex->GetBlockHash() == uint256S(\"0x00000000000af0aed4792b1acee3d966af36cf5def14935db8de83d6f9306f2f\"))};\n+\n+        // Add the new utxos created from the block\n+        for (size_t i = 0; i < block.vtx.size(); ++i) {\n+            const auto& tx{block.vtx.at(i)};\n+\n+            // Skip duplicate txid coinbase transactions (BIP30).\n+            if (is_bip30_block && tx->IsCoinBase()) {\n+                continue;\n+            }\n+\n+            for (size_t j = 0; j < tx->vout.size(); ++j) {\n+                const CTxOut& out{tx->vout[j]};\n+                Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+                COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+\n+                // Skip unspendable coins\n+                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                ++m_transaction_output_count;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n+            }\n+\n+            // The coinbase tx has no undo data since no former output is spent\n+            if (!tx->IsCoinBase()) {\n+                const auto& tx_undo{block_undo.vtxundo.at(i - 1)};\n+\n+                for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                    Coin coin{tx_undo.vprevout[j]};\n+                    COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n+\n+                    m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                    --m_transaction_output_count;\n+                    m_total_amount -= coin.out.nValue;\n+                    m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n+                }\n+            }\n+        }\n+    }\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.transaction_output_count = m_transaction_output_count;\n+    value.second.bogo_size = m_bogo_size;\n+    value.second.total_amount = m_total_amount;\n+\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    value.second.muhash = out;\n+\n+    return m_db->Write(DBHeightKey(pindex->nHeight), value) && m_db->Write(DB_MUHASH, m_muhash);\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key{start_height};\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all hash digests for blocks that are\n+    // getting disconnected from the height index to the hash index so we can\n+    // still find them when the height index entries are overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    {\n+        LOCK(cs_main);\n+        CBlockIndex* iter_tip{g_chainman.m_blockman.LookupBlockIndex(current_tip->GetBlockHash())};\n+        const auto& consensus_params{Params().GetConsensus()};\n+\n+        do {\n+            CBlock block;\n+\n+            if (!ReadBlockFromDisk(block, iter_tip, consensus_params)) {\n+                return error(\"%s: Failed to read block %s from disk\",\n+                             __func__, iter_tip->GetBlockHash().ToString());\n+            }\n+\n+            ReverseBlock(block, iter_tip);\n+\n+            iter_tip = iter_tip->GetAncestor(iter_tip->nHeight - 1);\n+        } while (new_tip != iter_tip);\n+    }\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}\n+\n+static bool LookUpOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value\n+    // there matches the block hash. This should be the case if the block is on\n+    // the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the\n+    // result will be stored in the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+bool CoinStatsIndex::LookUpStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const\n+{\n+    DBVal entry;\n+    if (!LookUpOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    coins_stats.hashSerialized = entry.muhash;\n+    coins_stats.nTransactionOutputs = entry.transaction_output_count;\n+    coins_stats.nBogoSize = entry.bogo_size;\n+    coins_stats.nTotalAmount = entry.total_amount;\n+\n+    return true;\n+}\n+\n+bool CoinStatsIndex::Init()\n+{\n+    if (!m_db->Read(DB_MUHASH, m_muhash)) {\n+        // Check that the cause of the read failure is that the key does not\n+        // exist. Any other errors indicate database corruption or a disk\n+        // failure, and starting the index would cause further corruption.\n+        if (m_db->Exists(DB_MUHASH)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+    }\n+\n+    if (BaseIndex::Init()) {\n+        const CBlockIndex* pindex{CurrentIndex()};\n+\n+        if (pindex) {\n+            DBVal entry;\n+            if (!LookUpOne(*m_db, pindex, entry)) {\n+                return false;\n+            }\n+\n+            m_transaction_output_count = entry.transaction_output_count;\n+            m_bogo_size = entry.bogo_size;\n+            m_total_amount = entry.total_amount;\n+        }\n+\n+        return true;\n+    }\n+\n+    return false;\n+}\n+\n+// Reverse a single block as part of a reorg\n+bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    std::pair<uint256, DBVal> read_out;\n+\n+    // Ignore genesis block\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash{pindex->pprev->GetBlockHash()};\n+        if (read_out.first != expected_block_hash) {\n+            if (!m_db->Read(DBHashKey(expected_block_hash), read_out)) {\n+                return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                             __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+            }\n+        }\n+    }\n+\n+    // Remove the new UTXOs that were created from the block\n+    for (size_t i = 0; i < block.vtx.size(); ++i) {\n+        const auto& tx{block.vtx.at(i)};\n+\n+        for (size_t j = 0; j < tx->vout.size(); ++j) {\n+            const CTxOut& out{tx->vout[j]};\n+            COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n+            Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n+\n+            // Skip unspendable coins\n+            if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+\n+            m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+        }\n+\n+        // The coinbase tx has no undo data since no former output is spent\n+        if (!tx->IsCoinBase()) {\n+            const auto& tx_undo{block_undo.vtxundo.at(i - 1)};\n+\n+            for (size_t j = 0; j < tx_undo.vprevout.size(); ++j) {\n+                Coin coin{tx_undo.vprevout[j]};\n+                COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n+\n+                m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+            }\n+        }\n+    }\n+\n+    // Check that the rolled back internal value of muhash is consistent with the DB read out\n+    uint256 out;\n+    m_muhash.Finalize(out);\n+    Assert(read_out.second.muhash == out);\n+\n+    m_transaction_output_count = read_out.second.transaction_output_count;\n+    m_total_amount = read_out.second.total_amount;\n+    m_bogo_size = read_out.second.bogo_size;\n+\n+    return m_db->Write(DB_MUHASH, m_muhash);\n+}"
      },
      {
        "sha": "4d57e807704b90741d984a91ca31609d3fc8cb48",
        "filename": "src/index/coinstatsindex.h",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd58a4de21469d6d848ae309edc47f558628221d/src/index/coinstatsindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd58a4de21469d6d848ae309edc47f558628221d/src/index/coinstatsindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.h?ref=dd58a4de21469d6d848ae309edc47f558628221d",
        "patch": "@@ -0,0 +1,52 @@\n+// Copyright (c) 2020-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_COINSTATSINDEX_H\n+#define BITCOIN_INDEX_COINSTATSINDEX_H\n+\n+#include <chain.h>\n+#include <crypto/muhash.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+#include <node/coinstats.h>\n+\n+/**\n+ * CoinStatsIndex maintains statistics on the UTXO set.\n+ */\n+class CoinStatsIndex final : public BaseIndex\n+{\n+private:\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    MuHash3072 m_muhash;\n+    uint64_t m_transaction_output_count{0};\n+    uint64_t m_bogo_size{0};\n+    CAmount m_total_amount{0};\n+\n+    bool ReverseBlock(const CBlock& block, const CBlockIndex* pindex);\n+\n+protected:\n+    bool Init() override;\n+\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return \"coinstatsindex\"; }\n+\n+public:\n+    // Constructs the index, which becomes available to be queried.\n+    explicit CoinStatsIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    // Look up stats for a specific block using CBlockIndex\n+    bool LookUpStats(const CBlockIndex* block_index, CCoinsStats& coins_stats) const;\n+};\n+\n+/// The global UTXO set hash object.\n+extern std::unique_ptr<CoinStatsIndex> g_coin_stats_index;\n+\n+#endif // BITCOIN_INDEX_COINSTATSINDEX_H"
      },
      {
        "sha": "a9af53ca80a5e0a9afbf63fbfa0ca36a279f104d",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd58a4de21469d6d848ae309edc47f558628221d/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd58a4de21469d6d848ae309edc47f558628221d/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=dd58a4de21469d6d848ae309edc47f558628221d",
        "patch": "@@ -16,14 +16,22 @@\n #include <map>\n \n // Database-independent metric indicating the UTXO set size\n-static uint64_t GetBogoSize(const CScript& scriptPubKey)\n+uint64_t GetBogoSize(const CScript& script_pub_key)\n {\n     return 32 /* txid */ +\n            4 /* vout index */ +\n            4 /* height + coinbase */ +\n            8 /* amount */ +\n            2 /* scriptPubKey len */ +\n-           scriptPubKey.size() /* scriptPubKey */;\n+           script_pub_key.size() /* scriptPubKey */;\n+}\n+\n+CDataStream TxOutSer(const COutPoint& outpoint, const Coin& coin) {\n+    CDataStream ss(SER_DISK, PROTOCOL_VERSION);\n+    ss << outpoint;\n+    ss << static_cast<uint32_t>(coin.nHeight * 2 + coin.fCoinBase);\n+    ss << coin.out;\n+    return ss;\n }\n \n //! Warning: be very careful when changing this! assumeutxo and UTXO snapshot\n@@ -63,12 +71,7 @@ static void ApplyHash(MuHash3072& muhash, const uint256& hash, const std::map<ui\n     for (auto it = outputs.begin(); it != outputs.end(); ++it) {\n         COutPoint outpoint = COutPoint(hash, it->first);\n         Coin coin = it->second;\n-\n-        CDataStream ss(SER_DISK, PROTOCOL_VERSION);\n-        ss << outpoint;\n-        ss << static_cast<uint32_t>(coin.nHeight * 2 + coin.fCoinBase);\n-        ss << coin.out;\n-        muhash.Insert(MakeUCharSpan(ss));\n+        muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n     }\n }\n "
      },
      {
        "sha": "826df2fd73d8525374f949e766d93ec06fb0242d",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd58a4de21469d6d848ae309edc47f558628221d/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd58a4de21469d6d848ae309edc47f558628221d/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=dd58a4de21469d6d848ae309edc47f558628221d",
        "patch": "@@ -7,6 +7,9 @@\n #define BITCOIN_NODE_COINSTATS_H\n \n #include <amount.h>\n+#include <chain.h>\n+#include <coins.h>\n+#include <streams.h>\n #include <uint256.h>\n \n #include <cstdint>\n@@ -42,4 +45,8 @@ struct CCoinsStats\n //! Calculate statistics about the unspent transaction output set\n bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const std::function<void()>& interruption_point = {});\n \n+uint64_t GetBogoSize(const CScript& script_pub_key);\n+\n+CDataStream TxOutSer(const COutPoint& outpoint, const Coin& coin);\n+\n #endif // BITCOIN_NODE_COINSTATS_H"
      }
    ]
  },
  {
    "sha": "3c914d58ff323255b32e717d0ce28209ec0abdaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzkxNGQ1OGZmMzIzMjU1YjMyZTcxN2QwY2UyODIwOWVjMGFiZGFh",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-24T17:58:47Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:28:48Z"
      },
      "message": "index: Coinstats index can be activated with command line flag",
      "tree": {
        "sha": "34187e016ca1869013b06f76027cbdd624263e45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34187e016ca1869013b06f76027cbdd624263e45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c914d58ff323255b32e717d0ce28209ec0abdaa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9y+AVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN710QAKZv7E5YoM83Odrps3nHt/9VLf/v\nsoAH6eU3VH1oUmoQ5d9F5QO4HDpvmjVujnlGBIHsIlUUMdcU/KknrZDuo7xe96DL\ngiTzt2bQHNx39hSOLM3qgiMG+CY03zNGeyZdZHvlaaYlnuow3hskGFeh0r1yQTI5\njNx/QeaN/6E2bPlrEnNK9RIwWf61BMGjuC6udTmgQyn4mtCR0CU0dM2xQdX/f2yA\n00odM2nWo28TE5p54XMck88z6E/Fbfl1ESkAKUM2GmxgezpxcN/ok8ROVEZIRVuR\nhU4YbC0urPVtrpN2dhcKj2VLEvbgw/6kNg+BzVO3Wm8SJIj/iyR/31mbp3qZzxr6\nnk5gtSQFdiSZMlTNQuVphTrLhU3cCYNjfxt3hfzh+AewPVYal0amQT4WLyjIuXcI\noTvuLLbn2unqB7F3u5gc3/aYu1D2IqrSRlcOfISH1coq2aTaoYah0BGdhZf8LfZG\njyJXCsZAHKB6Bq1cWyOAtydtohYbyOaw8/L3kZe38FAVzg8dnljScV3Znu0tvjud\nn4m1ru9XVSrAYJyVjxpOKcgDAzhSRB+oZL9sfA0yAHd3AOwVVzdF5MHoBpSeON+X\nChKFVTaman948FGUUVKEfjKlHldmaBYtU15iT/orLKu3xWQS1AZS5q79VRWN1Y8r\nHOY3NZVYk9qD2oqL\n=lDlf\n-----END PGP SIGNATURE-----",
        "payload": "tree 34187e016ca1869013b06f76027cbdd624263e45\nparent dd58a4de21469d6d848ae309edc47f558628221d\nauthor Fabian Jahr <fjahr@protonmail.com> 1579888727 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618856928 +0200\n\nindex: Coinstats index can be activated with command line flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c914d58ff323255b32e717d0ce28209ec0abdaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c914d58ff323255b32e717d0ce28209ec0abdaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c914d58ff323255b32e717d0ce28209ec0abdaa/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd58a4de21469d6d848ae309edc47f558628221d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd58a4de21469d6d848ae309edc47f558628221d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd58a4de21469d6d848ae309edc47f558628221d"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 38,
      "deletions": 5
    },
    "files": [
      {
        "sha": "f8265b5db29b6288196b6c9e34fe0dcd150b7653",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3c914d58ff323255b32e717d0ce28209ec0abdaa",
        "patch": "@@ -21,6 +21,7 @@\n #include <httprpc.h>\n #include <httpserver.h>\n #include <index/blockfilterindex.h>\n+#include <index/coinstatsindex.h>\n #include <index/txindex.h>\n #include <interfaces/chain.h>\n #include <interfaces/node.h>\n@@ -167,6 +168,9 @@ void Interrupt(NodeContext& node)\n         g_txindex->Interrupt();\n     }\n     ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Interrupt(); });\n+    if (g_coin_stats_index) {\n+        g_coin_stats_index->Interrupt();\n+    }\n }\n \n void Shutdown(NodeContext& node)\n@@ -252,6 +256,10 @@ void Shutdown(NodeContext& node)\n         g_txindex->Stop();\n         g_txindex.reset();\n     }\n+    if (g_coin_stats_index) {\n+        g_coin_stats_index->Stop();\n+        g_coin_stats_index.reset();\n+    }\n     ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n     DestroyAllBlockFilterIndexes();\n \n@@ -390,6 +398,7 @@ void SetupServerArgs(NodeContext& node)\n #endif\n     argsman.AddArg(\"-blockreconstructionextratxn=<n>\", strprintf(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\", DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-blocksonly\", strprintf(\"Whether to reject transactions from network peers. Automatic broadcast and rebroadcast of any transactions from inbound peers is disabled, unless the peer has the 'forcerelay' permission. RPC transactions are not affected. (default: %u)\", DEFAULT_BLOCKSONLY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-coinstatsindex\", strprintf(\"Maintain coinstats index used by the gettxoutset RPC (default: %u)\", DEFAULT_COINSTATSINDEX), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-conf=<file>\", strprintf(\"Specify path to read-only configuration file. Relative paths will be prefixed by datadir location. (default: %s)\", BITCOIN_CONF_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-datadir=<dir>\", \"Specify data directory\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-dbbatchsize\", strprintf(\"Maximum database write batch size in bytes (default: %u)\", nDefaultDbBatchSize), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n@@ -406,7 +415,7 @@ void SetupServerArgs(NodeContext& node)\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n+    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex, -coinstatsindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -947,10 +956,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n-    // if using block pruning, then disallow txindex\n+    // if using block pruning, then disallow txindex and coinstatsindex\n     if (args.GetArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n+            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));\n     }\n \n     // -bind and -whitebind can't be set when not listening\n@@ -1724,6 +1735,11 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         GetBlockFilterIndex(filter_type)->Start();\n     }\n \n+    if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX)) {\n+        g_coin_stats_index = std::make_unique<CoinStatsIndex>(/* cache size */ 0, false, fReindex);\n+        g_coin_stats_index->Start();\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : node.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "dc9d32035dd476e8bad1c3aab8be9937b3975fd3",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=3c914d58ff323255b32e717d0ce28209ec0abdaa",
        "patch": "@@ -8,6 +8,7 @@\n #include <coins.h>\n #include <crypto/muhash.h>\n #include <hash.h>\n+#include <index/coinstatsindex.h>\n #include <serialize.h>\n #include <uint256.h>\n #include <util/system.h>\n@@ -92,13 +93,19 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-\n     stats.hashBlock = pcursor->GetBestBlock();\n+\n+    const CBlockIndex* pindex;\n     {\n         LOCK(cs_main);\n         assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n-        const CBlockIndex* block = blockman.LookupBlockIndex(stats.hashBlock);\n-        stats.nHeight = Assert(block)->nHeight;\n+        pindex = blockman.LookupBlockIndex(stats.hashBlock);\n+        stats.nHeight = Assert(pindex)->nHeight;\n+    }\n+\n+    // Use CoinStatsIndex if it is available and a hash_type of Muhash or None was requested\n+    if ((stats.m_hash_type == CoinStatsHashType::MUHASH || stats.m_hash_type == CoinStatsHashType::NONE) && g_coin_stats_index) {\n+        return g_coin_stats_index->LookUpStats(pindex, stats);\n     }\n \n     PrepareHash(hash_obj, stats);"
      },
      {
        "sha": "dc6b7930b9ae6586878b6d3dacbff1efeac41d56",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3c914d58ff323255b32e717d0ce28209ec0abdaa",
        "patch": "@@ -14,6 +14,7 @@\n #include <core_io.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n+#include <index/coinstatsindex.h>\n #include <node/blockstorage.h>\n #include <node/coinstats.h>\n #include <node/context.h>\n@@ -1124,6 +1125,13 @@ static RPCHelpMan gettxoutsetinfo()\n         ret.pushKV(\"disk_size\", stats.nDiskSize);\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n+        if (g_coin_stats_index) {\n+            const IndexSummary summary{g_coin_stats_index->GetSummary()};\n+\n+            if (!summary.synced) {\n+                throw JSONRPCError(RPC_INTERNAL_ERROR, strprintf(\"Unable to read UTXO set because coinstatsindex is still syncing. Current height: %d\", summary.best_block_height));\n+            }\n+        }\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Unable to read UTXO set\");\n     }\n     return ret;"
      },
      {
        "sha": "9a4b65ece699e60af7b87f39a4a012b1b92ed9cb",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c914d58ff323255b32e717d0ce28209ec0abdaa/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=3c914d58ff323255b32e717d0ce28209ec0abdaa",
        "patch": "@@ -79,6 +79,7 @@ static const int DEFAULT_SCRIPTCHECK_THREADS = 0;\n static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+static constexpr bool DEFAULT_COINSTATSINDEX{false};\n static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n /** Default for -persistmempool */\n static const bool DEFAULT_PERSIST_MEMPOOL = true;"
      },
      {
        "sha": "354e14f361e7441cc717f5ab86a4376e2bc7998d",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c914d58ff323255b32e717d0ce28209ec0abdaa/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c914d58ff323255b32e717d0ce28209ec0abdaa/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=3c914d58ff323255b32e717d0ce28209ec0abdaa",
        "patch": "@@ -14,6 +14,7 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"node/blockstorage -> validation -> node/blockstorage\"\n     \"index/blockfilterindex -> node/blockstorage -> validation -> index/blockfilterindex\"\n     \"index/base -> validation -> index/blockfilterindex -> index/base\"\n+    \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/bitcoingui -> qt/walletframe -> qt/bitcoingui\""
      }
    ]
  },
  {
    "sha": "3f166ecc125fce6ccd995687fa16572090a5d099",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjE2NmVjYzEyNWZjZTZjY2Q5OTU2ODdmYTE2NTcyMDkwYTVkMDk5",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-05-15T14:14:07Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:30:59Z"
      },
      "message": "rpc: gettxoutsetinfo can be requested for specific blockheights",
      "tree": {
        "sha": "0110f1a8cea9495fbe3be5f0467a4e2bf0083633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0110f1a8cea9495fbe3be5f0467a4e2bf0083633"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f166ecc125fce6ccd995687fa16572090a5d099",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGUVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNLu0P/35Bvfm8v3BH7Bg2yWojcWLG+IIq\n2zt8ZSx52f5P3swx9uB4R7bGBlXDgfLY2PBczE1BEFenD1Nf6Eco4LumDgr7fR5I\nson93Pv4v2HoNbdwmBBbL6rqoTNwOwG2N5bQptIwFU1wjap+MFovjfwvz7yuC2Om\nvjDfQzrpW95n8/0ojCQk57FC0c25lwIiu6bz4VrZleIglJ5h0kxQorYNZI/DRKvd\nDl2xwEFRqzGTiaUm0cPmmICmseZmslIci/snOr97YOkwoudy6TtAGSqnqWA8X/I6\n8oyQWJC3pfHyRCiG53FZPHbXVivt5S0kKpej+4tMRVlfebyay9AlGU0jF3+n6VqX\ncfOgcU4xXPd+YvyI/pxZUDUoV5TJYORbq0bzq3kdvQU2NNhIGLfpJO6tqJosmlEn\nWzJmsIbVlLk6xfriE032/FbrIMa35v5KGtkICDRbiO0Z6kiQbiGdgWpxMmW3l2vi\n0HDBxFoeDMJwDTqMKQ9dw2tQigVCsBxM24vkaKPxJlN+l1MevQ1+Et8j1SraJ85T\nLbdcIZ9vGqoVGEwdGpZIjG0xUjHigvdQp+iMiq1R10GG/b9ZqtXCCt9yZ4ujj9BF\niXFotgrp9HbECNeJ0S/4KATb2WYVNeFyEaB1n/udw+Nd2VaDGzkuK7yb1Xb9oxMV\nC6s9v4wQqtLjfoBI\n=p8HA\n-----END PGP SIGNATURE-----",
        "payload": "tree 0110f1a8cea9495fbe3be5f0467a4e2bf0083633\nparent 3c914d58ff323255b32e717d0ce28209ec0abdaa\nauthor Fabian Jahr <fjahr@protonmail.com> 1589552047 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857059 +0200\n\nrpc: gettxoutsetinfo can be requested for specific blockheights\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f166ecc125fce6ccd995687fa16572090a5d099",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f166ecc125fce6ccd995687fa16572090a5d099",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f166ecc125fce6ccd995687fa16572090a5d099/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c914d58ff323255b32e717d0ce28209ec0abdaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c914d58ff323255b32e717d0ce28209ec0abdaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c914d58ff323255b32e717d0ce28209ec0abdaa"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 76,
      "deletions": 47
    },
    "files": [
      {
        "sha": "eacd7e2ab58ca8bf22ea39170d7e9e8ee6729965",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f166ecc125fce6ccd995687fa16572090a5d099/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f166ecc125fce6ccd995687fa16572090a5d099/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=3f166ecc125fce6ccd995687fa16572090a5d099",
        "patch": "@@ -89,22 +89,24 @@ static void ApplyStats(CCoinsStats& stats, const uint256& hash, const std::map<u\n \n //! Calculate statistics about the unspent transaction output set\n template <typename T>\n-static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, T hash_obj, const std::function<void()>& interruption_point)\n+static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, T hash_obj, const std::function<void()>& interruption_point, const CBlockIndex* pindex)\n {\n     std::unique_ptr<CCoinsViewCursor> pcursor(view->Cursor());\n     assert(pcursor);\n-    stats.hashBlock = pcursor->GetBestBlock();\n-\n-    const CBlockIndex* pindex;\n-    {\n-        LOCK(cs_main);\n-        assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n-        pindex = blockman.LookupBlockIndex(stats.hashBlock);\n-        stats.nHeight = Assert(pindex)->nHeight;\n+\n+    if (!pindex) {\n+        {\n+            LOCK(cs_main);\n+            assert(std::addressof(g_chainman.m_blockman) == std::addressof(blockman));\n+            pindex = blockman.LookupBlockIndex(view->GetBestBlock());\n+        }\n     }\n+    stats.nHeight = Assert(pindex)->nHeight;\n+    stats.hashBlock = pindex->GetBlockHash();\n \n     // Use CoinStatsIndex if it is available and a hash_type of Muhash or None was requested\n     if ((stats.m_hash_type == CoinStatsHashType::MUHASH || stats.m_hash_type == CoinStatsHashType::NONE) && g_coin_stats_index) {\n+        stats.from_index = true;\n         return g_coin_stats_index->LookUpStats(pindex, stats);\n     }\n \n@@ -141,19 +143,19 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n     return true;\n }\n \n-bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const std::function<void()>& interruption_point)\n+bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const std::function<void()>& interruption_point, const CBlockIndex* pindex)\n {\n     switch (stats.m_hash_type) {\n     case(CoinStatsHashType::HASH_SERIALIZED): {\n         CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n-        return GetUTXOStats(view, blockman, stats, ss, interruption_point);\n+        return GetUTXOStats(view, blockman, stats, ss, interruption_point, pindex);\n     }\n     case(CoinStatsHashType::MUHASH): {\n         MuHash3072 muhash;\n-        return GetUTXOStats(view, blockman, stats, muhash, interruption_point);\n+        return GetUTXOStats(view, blockman, stats, muhash, interruption_point, pindex);\n     }\n     case(CoinStatsHashType::NONE): {\n-        return GetUTXOStats(view, blockman, stats, nullptr, interruption_point);\n+        return GetUTXOStats(view, blockman, stats, nullptr, interruption_point, pindex);\n     }\n     } // no default case, so the compiler can warn about missing cases\n     assert(false);"
      },
      {
        "sha": "e30b2778c5115cf3c95d52dc9a56a8b08ba5b944",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f166ecc125fce6ccd995687fa16572090a5d099/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f166ecc125fce6ccd995687fa16572090a5d099/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=3f166ecc125fce6ccd995687fa16572090a5d099",
        "patch": "@@ -39,11 +39,13 @@ struct CCoinsStats\n     //! The number of coins contained.\n     uint64_t coins_count{0};\n \n+    bool from_index{false};\n+\n     CCoinsStats(CoinStatsHashType hash_type) : m_hash_type(hash_type) {}\n };\n \n //! Calculate statistics about the unspent transaction output set\n-bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const std::function<void()>& interruption_point = {});\n+bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats& stats, const std::function<void()>& interruption_point = {}, const CBlockIndex* pindex = nullptr);\n \n uint64_t GetBogoSize(const CScript& script_pub_key);\n "
      },
      {
        "sha": "e6bf7f91b7d7a33407156c2d42a20a4283356024",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 33,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f166ecc125fce6ccd995687fa16572090a5d099/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f166ecc125fce6ccd995687fa16572090a5d099/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3f166ecc125fce6ccd995687fa16572090a5d099",
        "patch": "@@ -140,6 +140,35 @@ static int ComputeNextBlockAndDepth(const CBlockIndex* tip, const CBlockIndex* b\n     return blockindex == tip ? 1 : -1;\n }\n \n+CBlockIndex* ParseHashOrHeight(const UniValue& param, ChainstateManager& chainman) {\n+    LOCK(::cs_main);\n+    CChain& active_chain = chainman.ActiveChain();\n+\n+    if (param.isNum()) {\n+        const int height{param.get_int()};\n+        if (height < 0) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n+        }\n+        const int current_tip{active_chain.Height()};\n+        if (height > current_tip) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n+        }\n+\n+        return active_chain[height];\n+    } else {\n+        const uint256 hash{ParseHashV(param, \"hash_or_height\")};\n+        CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(hash);\n+\n+        if (!pindex) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        if (!active_chain.Contains(pindex)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n+        }\n+        return pindex;\n+    }\n+}\n+\n UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex)\n {\n     // Serialize passed information without accessing chain state of the active chain!\n@@ -1069,31 +1098,41 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     return RPCHelpMan{\"gettxoutsetinfo\",\n                 \"\\nReturns statistics about the unspent transaction output set.\\n\"\n-                \"Note this call may take some time.\\n\",\n+                \"Note this call may take some time if you are not using coinstatsindex.\\n\",\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n+                    {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {RPCResult::Type::NUM, \"height\", \"The block height (index) of the returned statistics\"},\n                         {RPCResult::Type::STR_HEX, \"bestblock\", \"The hash of the block at which these statistics are calculated\"},\n-                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs\"},\n                         {RPCResult::Type::NUM, \"txouts\", \"The number of unspent transaction outputs\"},\n-                        {RPCResult::Type::NUM, \"bogosize\", \"A meaningless metric for UTXO set size\"},\n+                        {RPCResult::Type::NUM, \"bogosize\", \"Database-independent, meaningless metric indicating the UTXO set size\"},\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", /* optional */ true, \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n                         {RPCResult::Type::STR_HEX, \"muhash\", /* optional */ true, \"The serialized hash (only present if 'muhash' hash_type is chosen)\"},\n+                        {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n                         {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n                     }},\n                 RPCExamples{\n-                    HelpExampleCli(\"gettxoutsetinfo\", \"\")\n-            + HelpExampleRpc(\"gettxoutsetinfo\", \"\")\n+                    HelpExampleCli(\"gettxoutsetinfo\", \"\") +\n+                    HelpExampleCli(\"gettxoutsetinfo\", R\"(\"none\")\") +\n+                    HelpExampleCli(\"gettxoutsetinfo\", R\"(\"none\" 1000)\") +\n+                    HelpExampleCli(\"gettxoutsetinfo\", R\"(\"none\" '\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\"')\") +\n+                    HelpExampleRpc(\"gettxoutsetinfo\", \"\") +\n+                    HelpExampleRpc(\"gettxoutsetinfo\", R\"(\"none\")\") +\n+                    HelpExampleRpc(\"gettxoutsetinfo\", R\"(\"none\", 1000)\") +\n+                    HelpExampleRpc(\"gettxoutsetinfo\", R\"(\"none\", \"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\")\")\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n     UniValue ret(UniValue::VOBJ);\n \n+    ::ChainstateActive().ForceFlushStateToDisk();\n+    CBlockIndex* pindex{nullptr};\n+\n     const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n     CCoinsStats stats{hash_type};\n \n@@ -1110,10 +1149,17 @@ static RPCHelpMan gettxoutsetinfo()\n         blockman = &active_chainstate.m_blockman;\n     }\n \n-    if (GetUTXOStats(coins_view, *blockman, stats, node.rpc_interruption_point)) {\n+    if (!request.params[1].isNull()) {\n+        if (!g_coin_stats_index) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Querying specific block heights requires coinstatsindex\");\n+        }\n+\n+        pindex = ParseHashOrHeight(request.params[1], chainman);\n+    }\n+\n+    if (GetUTXOStats(coins_view, *blockman, stats, node.rpc_interruption_point, pindex)) {\n         ret.pushKV(\"height\", (int64_t)stats.nHeight);\n         ret.pushKV(\"bestblock\", stats.hashBlock.GetHex());\n-        ret.pushKV(\"transactions\", (int64_t)stats.nTransactions);\n         ret.pushKV(\"txouts\", (int64_t)stats.nTransactionOutputs);\n         ret.pushKV(\"bogosize\", (int64_t)stats.nBogoSize);\n         if (hash_type == CoinStatsHashType::HASH_SERIALIZED) {\n@@ -1122,7 +1168,10 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n-        ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        if (!stats.from_index) {\n+            ret.pushKV(\"transactions\", static_cast<int64_t>(stats.nTransactions));\n+            ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        }\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n         if (g_coin_stats_index) {\n@@ -1918,31 +1967,7 @@ static RPCHelpMan getblockstats()\n {\n     ChainstateManager& chainman = EnsureAnyChainman(request.context);\n     LOCK(cs_main);\n-    CChain& active_chain = chainman.ActiveChain();\n-\n-    CBlockIndex* pindex;\n-    if (request.params[0].isNum()) {\n-        const int height = request.params[0].get_int();\n-        const int current_tip = active_chain.Height();\n-        if (height < 0) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d is negative\", height));\n-        }\n-        if (height > current_tip) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Target block height %d after current tip %d\", height, current_tip));\n-        }\n-\n-        pindex = active_chain[height];\n-    } else {\n-        const uint256 hash(ParseHashV(request.params[0], \"hash_or_height\"));\n-        pindex = chainman.m_blockman.LookupBlockIndex(hash);\n-        if (!pindex) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n-        }\n-        if (!active_chain.Contains(pindex)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n-        }\n-    }\n-\n+    CBlockIndex* pindex{ParseHashOrHeight(request.params[0], chainman)};\n     CHECK_NONFATAL(pindex != nullptr);\n \n     std::set<std::string> stats;"
      }
    ]
  },
  {
    "sha": "6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTRjMGMwOWFiNGQwNzNhMjZjM2M0YTAyNzgzZDVkY2Q4OGY2ZWVm",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-08-26T19:49:57Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:31:01Z"
      },
      "message": "test: Add functional test for Coinstats index",
      "tree": {
        "sha": "365467131a1359f26984e093fbbcbc87e117d0b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/365467131a1359f26984e093fbbcbc87e117d0b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGUVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNBpoQAIeTsPFXj0VoVGb+KqUJx60Y5qgd\n9Hi2PsGma+MLxmVe5sUh39rg8topDormUK3kcXOCCRH6h21kTlvv9C7AT6BW9J7O\nKS8vKd1lmZujUmwuv8OWFP68H4M+ha9MSfSVVvgxi6ZH8Txiu/YwNb4aiOxps5Pc\nkDukj667rEsOknyYMnfYypMX4Hq5l1WTmgjOPbqdZv4OywAY9j81baxEn20iAbyR\nRdYzOlTfUPjdRGHHn+mfBwdccREmfYlsYpDRVmV3yWws8A0vap/gjCba2st99+eM\nBBR/pSAzENOfhTM1oiF5G/KeZP8KEyP2o+242fQ/j2rYdhf9jtC8updJ2RLfZ7l2\nweiQmCnmfVtNrxtzobxSZyiWsDE76OJNWlJrcI5iYtTtY+Sk2DVkGw0OOwUtvBZy\n8Q/EDM9BpDNAhfQYExUNtgjT0OPyeQpUB8Wr9VkIyLyfvalppokK7j8j4vpUGzPL\nggsLfH2T/CeTknt+oDO4U0omTFW64kcSpvSUaIXEEh09dhezvZuZ76eLKt2eQU2/\nWkSkbqQ4hDKHWD1/qRTOGiIM2em9bc+81jvWosvg97srxHBwObLNdBuVIBQTgUUQ\npGgOeEa8Dsjglo7SkDj3SZie32l9enPPQYZcB7KwE/MisiisjfQx2wABbPM7ltbf\nM6I6msJue2uPimcQ\n=AfGh\n-----END PGP SIGNATURE-----",
        "payload": "tree 365467131a1359f26984e093fbbcbc87e117d0b5\nparent 3f166ecc125fce6ccd995687fa16572090a5d099\nauthor Fabian Jahr <fjahr@protonmail.com> 1566848997 -0400\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857061 +0200\n\ntest: Add functional test for Coinstats index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f166ecc125fce6ccd995687fa16572090a5d099",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f166ecc125fce6ccd995687fa16572090a5d099",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f166ecc125fce6ccd995687fa16572090a5d099"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 87,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9ff3a585103aa2c27d6e1a0d0a5f767a073cf44e",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "added",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
        "patch": "@@ -0,0 +1,85 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test coinstatsindex across nodes.\n+\n+Test that the values returned by gettxoutsetinfo are consistent\n+between a node running the coinstatsindex and a node without\n+the index.\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    try_rpc,\n+)\n+\n+class CoinStatsIndexTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.supports_cli = False\n+        self.extra_args = [\n+            [],\n+            [\"-coinstatsindex\"]\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        self._test_coin_stats_index()\n+\n+    def _test_coin_stats_index(self):\n+        node = self.nodes[0]\n+        index_node = self.nodes[1]\n+        # Both none and muhash options allow the usage of the index\n+        index_hash_options = ['none', 'muhash']\n+\n+        # Generate a normal transaction and mine it\n+        node.generate(101)\n+        address = self.nodes[0].get_deterministic_priv_key().address\n+        node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n+        node.generate(1)\n+\n+        self.sync_blocks(timeout=120)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() output is consistent with or without coinstatsindex option\")\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo))\n+        res0 = node.gettxoutsetinfo('none')\n+\n+        # The fields 'disk_size' and 'transactions' do not exist on the index\n+        del res0['disk_size'], res0['transactions']\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            res1 = index_node.gettxoutsetinfo(hash_option)\n+            res1.pop('muhash', None)\n+\n+            # Everything left should be the same\n+            assert_equal(res1, res0)\n+\n+        self.log.info(\"Test that gettxoutsetinfo() can get fetch data on specific heights with index\")\n+\n+        # Generate a new tip\n+        node.generate(5)\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            # Fetch old stats by height\n+            res2 = index_node.gettxoutsetinfo(hash_option, 102)\n+            res2.pop('muhash', None)\n+            assert_equal(res0, res2)\n+\n+            # Fetch old stats by hash\n+            res3 = index_node.gettxoutsetinfo(hash_option, res0['bestblock'])\n+            res3.pop('muhash', None)\n+            assert_equal(res0, res3)\n+\n+            # It does not work without coinstatsindex\n+            assert_raises_rpc_error(-8, \"Querying specific block heights requires coinstatsindex\", node.gettxoutsetinfo, hash_option, 102)\n+\n+if __name__ == '__main__':\n+    CoinStatsIndexTest().main()"
      },
      {
        "sha": "5c10cc368768ec1d05ad800f8fc00f4f58d9c8ba",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
        "patch": "@@ -757,7 +757,7 @@ def cache_path(*paths):\n \n             os.rmdir(cache_path('wallets'))  # Remove empty wallets dir\n             for entry in os.listdir(cache_path()):\n-                if entry not in ['chainstate', 'blocks']:  # Only keep chainstate and blocks folder\n+                if entry not in ['chainstate', 'blocks', 'indexes']:  # Only indexes, chainstate and blocks folders\n                     os.remove(cache_path(entry))\n \n         for i in range(self.num_nodes):"
      },
      {
        "sha": "00527e78f1510bf38b8546e9f34af5ff0e9cf413",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
        "patch": "@@ -281,6 +281,7 @@\n     'rpc_scantxoutset.py',\n     'feature_logging.py',\n     'feature_anchors.py',\n+    'feature_coinstatsindex.py',\n     'p2p_node_network_limited.py',\n     'p2p_permissions.py',\n     'feature_blocksdir.py',"
      }
    ]
  },
  {
    "sha": "57a026c30fef3138bb8db46e6865acb9dc2674f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1N2EwMjZjMzBmZWYzMTM4YmI4ZGI0NmU2ODY1YWNiOWRjMjY3NGY4",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-08-28T19:58:53Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:31:02Z"
      },
      "message": "test: Add unit test for Coinstats index",
      "tree": {
        "sha": "b9e11e7b15ea69d2b6b95b3b1240038dab995192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9e11e7b15ea69d2b6b95b3b1240038dab995192"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/57a026c30fef3138bb8db46e6865acb9dc2674f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGYVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNuHYQAJkq8lJHSuPGShDTUPhq+xGPa0xC\nzffPYJAaYBPTEkVlWCSYE/4lJr3ocjmsLnwXqt+5z2P9+f3qAEHaeJNimrR5TGa+\nkgNG3VZ3KohZI7IWIFzLNn9xpaiq+Z55nbdiJVxIa6zdxqpi2MB0tYxGyEB4h9G/\nYOZeL0BEgi53GztWIKSqwufcH9y4ymjh5Ml2lIZQ9HVlfpr8+XpYl1LQBEK0Ch2z\ncj+3FrVr1rjFHi8xd8bJJ0Idbv6ySVb4h5dDMgLdvDpn/a7Ss58mDSfHz6y/PyGu\nL7r+8i0xh3+brEk0wvXXGoBkO4YSdosuFyVBfyycBSVhWV4CUQvxtyOT7abTu2no\nXJZLn9FRDHw9Qr1tvSDDCvXYfJuOhZcvjAoPTDrzieM6EnciFKvyJVLdlQfvKA23\n2Bb8qO6ak4K/ciuRVn+vDoKInVsdP6d2cVH8Uj/zkWApPoNIGucIgLTjNMtJSHkC\nBPjTgl77LCe+Nkck/p+yqxHbKDa1bB9D56iAxN+CXbGgDrW1oSFKCRNq5pn8XWlK\nvACzgc06CVOCXfdSrX5BB7rvZEK/oLbLJPprnEpL/yDTqqFKWOaaGyWv6dXdI7Ww\nynx/2N56jP9V2SbtL9lYZAi+XiPxMKNxfjdH/5YdxMTrJkAZp1XmVWG8VjaWKMY2\nmEi36xyWLlChCSI5\n=pZF4\n-----END PGP SIGNATURE-----",
        "payload": "tree b9e11e7b15ea69d2b6b95b3b1240038dab995192\nparent 6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef\nauthor Fabian Jahr <fjahr@protonmail.com> 1567022333 -0400\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857062 +0200\n\ntest: Add unit test for Coinstats index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57a026c30fef3138bb8db46e6865acb9dc2674f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/57a026c30fef3138bb8db46e6865acb9dc2674f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57a026c30fef3138bb8db46e6865acb9dc2674f8/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a4c0c09ab4d073a26c3c4a02783d5dcd88f6eef"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 80,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b546f1f55fde99d3172c0313d6acfc370cf5647a",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57a026c30fef3138bb8db46e6865acb9dc2674f8/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57a026c30fef3138bb8db46e6865acb9dc2674f8/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=57a026c30fef3138bb8db46e6865acb9dc2674f8",
        "patch": "@@ -80,6 +80,7 @@ BITCOIN_TESTS =\\\n   test/bswap_tests.cpp \\\n   test/checkqueue_tests.cpp \\\n   test/coins_tests.cpp \\\n+  test/coinstatsindex_tests.cpp \\\n   test/compilerbug_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\"
      },
      {
        "sha": "3fc7b720776c4fb44d74e7eed383557771a2ebec",
        "filename": "src/test/coinstatsindex_tests.cpp",
        "status": "added",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/57a026c30fef3138bb8db46e6865acb9dc2674f8/src/test/coinstatsindex_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/57a026c30fef3138bb8db46e6865acb9dc2674f8/src/test/coinstatsindex_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coinstatsindex_tests.cpp?ref=57a026c30fef3138bb8db46e6865acb9dc2674f8",
        "patch": "@@ -0,0 +1,79 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <index/coinstatsindex.h>\n+#include <test/util/setup_common.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+#include <chrono>\n+\n+\n+BOOST_AUTO_TEST_SUITE(coinstatsindex_tests)\n+\n+BOOST_FIXTURE_TEST_CASE(coinstatsindex_initial_sync, TestChain100Setup)\n+{\n+    CoinStatsIndex coin_stats_index{1 << 20, true};\n+\n+    CCoinsStats coin_stats{CoinStatsHashType::MUHASH};\n+    const CBlockIndex* block_index;\n+    {\n+        LOCK(cs_main);\n+        block_index = ChainActive().Tip();\n+    }\n+\n+    // CoinStatsIndex should not be found before it is started.\n+    BOOST_CHECK(!coin_stats_index.LookUpStats(block_index, coin_stats));\n+\n+    // BlockUntilSyncedToCurrentChain should return false before CoinStatsIndex\n+    // is started.\n+    BOOST_CHECK(!coin_stats_index.BlockUntilSyncedToCurrentChain());\n+\n+    coin_stats_index.Start();\n+\n+    // Allow the CoinStatsIndex to catch up with the block index that is syncing\n+    // in a background thread.\n+    const auto timeout = GetTime<std::chrono::seconds>() + 120s;\n+    while (!coin_stats_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(timeout > GetTime<std::chrono::milliseconds>());\n+        UninterruptibleSleep(100ms);\n+    }\n+\n+    // Check that CoinStatsIndex works for genesis block.\n+    const CBlockIndex* genesis_block_index;\n+    {\n+        LOCK(cs_main);\n+        genesis_block_index = ChainActive().Genesis();\n+    }\n+    BOOST_CHECK(coin_stats_index.LookUpStats(genesis_block_index, coin_stats));\n+\n+    // Check that CoinStatsIndex updates with new blocks.\n+    coin_stats_index.LookUpStats(block_index, coin_stats);\n+\n+    const CScript script_pub_key{CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG};\n+    std::vector<CMutableTransaction> noTxns;\n+    CreateAndProcessBlock(noTxns, script_pub_key);\n+\n+    // Let the CoinStatsIndex to catch up again.\n+    BOOST_CHECK(coin_stats_index.BlockUntilSyncedToCurrentChain());\n+\n+    CCoinsStats new_coin_stats{CoinStatsHashType::MUHASH};\n+    const CBlockIndex* new_block_index;\n+    {\n+        LOCK(cs_main);\n+        new_block_index = ChainActive().Tip();\n+    }\n+    coin_stats_index.LookUpStats(new_block_index, new_coin_stats);\n+\n+    BOOST_CHECK(block_index != new_block_index);\n+\n+    // Shutdown sequence (c.f. Shutdown() in init.cpp)\n+    coin_stats_index.Stop();\n+\n+    // Rest of shutdown sequence and destructors happen in ~TestingSetup()\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ca01bb8d689f93e1c7669b0ba7a4994c0206dabd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTAxYmI4ZDY4OWY5M2UxYzc2NjliMGJhN2E0OTk0YzAyMDZkYWJk",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-08-22T16:31:34Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:31:02Z"
      },
      "message": "rpc: Add Coinstats index to getindexinfo",
      "tree": {
        "sha": "aab91a25f307130ff3173a9503c9a4fe3f765fa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aab91a25f307130ff3173a9503c9a4fe3f765fa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGYVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN250P/A1X3RHSppSCbj7jHjwG+HpssBgO\n/KNuAiX3tRTFwL+YolaIfjV2f7YtHF3FUH2ZXgNjedfUW1Nb+4blbqdNQCF4jO8n\ndytnxfNi7alJZKRpvtHRTPp4cUUMCbWJW8v5rEHuRTIzHwGoLN4fOmdynzJpEtBo\nPbAGzB6Fw+9RpSSIqNpLxUuhMWel6A7CcbOY9OZeQo1i6p5ejDIBy7ZbBrNWVdba\naEg1OJvYRDs8P32zKrNtuJuVmbO1LIyhIUbGPQK/m0bfR/xga5T9CmKJ9Zvostul\n/xNnC4kXZUA+ABra0npOZKJ+trAYsq/uKSgDZ4SnhKcraqpHV632I1dqnRZS71Vo\ndd9HQ5aUyWBbYxCORgxN+bCBnog07vdOCk5V95akP+2jC3msuLzcJOoO6lBOEyWX\nYfinHFYExk6x0QlKMAULYwBT2qBWrKokMliCLh8ALG7FlkvDFkBpXrMAcdPDXDxE\ndzCvQapJ0EdAqTSxQyLSzfWfN8WXkLMVAXHx/GkJFgiWfF9o2vXk3+qwUOT2Y3s7\nyvYWHgbZvw3lN9reuFI9tOCrY2ZUwhbTR7y2dB61JhNNuvlo61CiCB6FQWRPo4DJ\nAAjbI058jQDOd7McXIrnWPxmykbN7bVqnZrsnpxLJXUqlj4ST1vjvezu4oRWcEvf\nNKJ6Cd+7D+DJecGH\n=oUz8\n-----END PGP SIGNATURE-----",
        "payload": "tree aab91a25f307130ff3173a9503c9a4fe3f765fa4\nparent 57a026c30fef3138bb8db46e6865acb9dc2674f8\nauthor Fabian Jahr <fjahr@protonmail.com> 1598113894 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857062 +0200\n\nrpc: Add Coinstats index to getindexinfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "57a026c30fef3138bb8db46e6865acb9dc2674f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/57a026c30fef3138bb8db46e6865acb9dc2674f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/57a026c30fef3138bb8db46e6865acb9dc2674f8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd495850d3577671bbba35bc90895743b786fea8",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=ca01bb8d689f93e1c7669b0ba7a4994c0206dabd",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <httpserver.h>\n #include <index/blockfilterindex.h>\n+#include <index/coinstatsindex.h>\n #include <index/txindex.h>\n #include <interfaces/chain.h>\n #include <key_io.h>\n@@ -689,6 +690,10 @@ static RPCHelpMan getindexinfo()\n         result.pushKVs(SummaryToJSON(g_txindex->GetSummary(), index_name));\n     }\n \n+    if (g_coin_stats_index) {\n+        result.pushKVs(SummaryToJSON(g_coin_stats_index->GetSummary(), index_name));\n+    }\n+\n     ForEachBlockFilterIndex([&result, &index_name](const BlockFilterIndex& index) {\n         result.pushKVs(SummaryToJSON(index.GetSummary(), index_name));\n     });"
      }
    ]
  },
  {
    "sha": "655d929836a71af23d2035d2e2e99ad8b8c340c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTVkOTI5ODM2YTcxYWYyM2QyMDM1ZDJlMmU5OWFkOGI4YzM0MGMz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-27T18:44:11Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:31:02Z"
      },
      "message": "test: add coinstatsindex getindexinfo coverage, improve current tests",
      "tree": {
        "sha": "2df700819b6946221cac2ac05ab0db5d8d14baa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2df700819b6946221cac2ac05ab0db5d8d14baa5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/655d929836a71af23d2035d2e2e99ad8b8c340c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGYVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNnnAP/i3Mvz94wi4CPh5LpuhCCTs0l+Sh\nKf/YI2vBSFLtbn6HJMJf7dZPKzlJC3kw4rHeNk4Ru8Erzu3g6LRYLgk3xZzIleM+\n1y/7mi4ivcGlSlFdi/ur5EEMl6XmXKscGsU/qL0vqpCd4Wuyy1qefjeJqZ7+LXqW\nXGqaOMkuoSExHj4UnHPkHX8HJcPSVgT6tXNJwSiRjR1sfIP1URKhZ2u842kv4Zlt\nWbqQ7jdHRglHzJmQq+N3o0NFGpMSt9AhGmHK/C6RdKvsg7F8tBAJjOdUsaoRkaYy\nFFXyNXnpVXPYlNqLqrOS4fhMH9GVVBc6D0jfeQuC/MJO+Fl9zUTCMecdeG75ttdI\nzeK5hrgWG1UBXb/e6wH/jp/mVuzi1y0kHWylOK7HkyaMwoobq5S2PdiUS7bbLl6E\nqVny2weiAyTqB0DbgClFAz+foOm4VsxUjnSfA4kiMTVVkEnltx7r7AMhSL8Ko45b\nncx3MCbVftdm/HBT9t4SZInIlHlTMt+dM5d2XI39TAo0jd+g0GO4TfPl4YGn49RA\np1LS9k8zLdN2H1q6W75aOVRxPTvrNqWkhqoZr0MAM6CXeQuf9tSA+m+hJ8Upx8tL\nG+FnHuguIBtuyzMAiHtjQZQYqvbRSKPkcsIEPjaizgHiUyWrxIAvxzlMpF3uEy2Y\nq5RnxfWeMvh5J7Ek\n=+TR3\n-----END PGP SIGNATURE-----",
        "payload": "tree 2df700819b6946221cac2ac05ab0db5d8d14baa5\nparent ca01bb8d689f93e1c7669b0ba7a4994c0206dabd\nauthor Jon Atack <jon@atack.com> 1616870651 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857062 +0200\n\ntest: add coinstatsindex getindexinfo coverage, improve current tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/655d929836a71af23d2035d2e2e99ad8b8c340c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/655d929836a71af23d2035d2e2e99ad8b8c340c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/655d929836a71af23d2035d2e2e99ad8b8c340c3/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca01bb8d689f93e1c7669b0ba7a4994c0206dabd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca01bb8d689f93e1c7669b0ba7a4994c0206dabd"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 7,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5c26039d04afbb0ba9acfdf7bf3a6e8ecd69bbf0",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/655d929836a71af23d2035d2e2e99ad8b8c340c3/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/655d929836a71af23d2035d2e2e99ad8b8c340c3/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=655d929836a71af23d2035d2e2e99ad8b8c340c3",
        "patch": "@@ -66,25 +66,22 @@ def run_test(self):\n         assert_equal(node.getindexinfo(), {})\n \n         # Restart the node with indices and wait for them to sync\n-        self.restart_node(0, [\"-txindex\", \"-blockfilterindex\"])\n+        self.restart_node(0, [\"-txindex\", \"-blockfilterindex\", \"-coinstatsindex\"])\n         self.wait_until(lambda: all(i[\"synced\"] for i in node.getindexinfo().values()))\n \n         # Returns a list of all running indices by default\n+        values = {\"synced\": True, \"best_block_height\": 200}\n         assert_equal(\n             node.getindexinfo(),\n             {\n-                \"txindex\": {\"synced\": True, \"best_block_height\": 200},\n-                \"basic block filter index\": {\"synced\": True, \"best_block_height\": 200}\n+                \"txindex\": values,\n+                \"basic block filter index\": values,\n+                \"coinstatsindex\": values,\n             }\n         )\n-\n         # Specifying an index by name returns only the status of that index\n-        assert_equal(\n-            node.getindexinfo(\"txindex\"),\n-            {\n-                \"txindex\": {\"synced\": True, \"best_block_height\": 200},\n-            }\n-        )\n+        for i in {\"txindex\", \"basic block filter index\", \"coinstatsindex\"}:\n+            assert_equal(node.getindexinfo(i), {i: values})\n \n         # Specifying an unknown index name returns an empty result\n         assert_equal(node.getindexinfo(\"foo\"), {})"
      }
    ]
  },
  {
    "sha": "2501576eccb08af80471c7b7b843b189ad6758c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTAxNTc2ZWNjYjA4YWY4MDQ3MWM3YjdiODQzYjE4OWFkNjc1OGMw",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-08-22T18:21:20Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:31:02Z"
      },
      "message": "rpc, index: Add verbose amounts tracking to Coinstats index",
      "tree": {
        "sha": "31891e04458f1c36128d3418ebc36e3ac5c9253a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31891e04458f1c36128d3418ebc36e3ac5c9253a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2501576eccb08af80471c7b7b843b189ad6758c0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGYVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNn+4P/0dsJqQN8HVrgrBij1Pn4AnCQnKT\nNFkubPjPnzpTE/ERPMgZzOmWcueQp8io84AjAiCSTJfyqp8An5Nu/pWECT+HKNd5\ncaimoetgf5Xiq/je9gXlWDAF/UOxnStFbrA+QyOzhX+BQ+6IgOhc5vbhv2Lhxp2C\npbsoyIT3n4T7S/ZAGEiK9YSe+Qok0qTZWJ+EqM4xtXpkJKA2Gw3PPglDlQ5lgyhe\nCubzlZxUoTZwe4QWpJAA6uVaPwIMfr8e+1YopmmL2JDuRlt/N3vMx3Mvh8sFNAxZ\nQlWmHVn4YuRWhVZgViudC13U4hLkkzecV5fyAxSkv3BWgJY4hZpgqcoAT6muwfjm\nReaS9PXnIP+DDPkGxviXgJawgG+jiCgI1mKEvefcp2npsZmdKSYtMGrhn8bf8NFZ\nUP9/lQdaJXe7V9hDJDHDxXABxiWgppS8Wr6oyHV5Snp5/1x30RkyNuTQTwhrqZ6u\n3gcjeNdWuiepxIzwuGpB0deSVEwQbmNoFp0/f/X+c+Nc0hGiPhgr5xNw11IB8dTb\n8mCokkfhw6e1atYzjjmAzXWHGSkSLyzc4mpxGOXaNQArUZxOO/hGKFfinuYvL17S\nBlPH15E2e3335hgYP3JHgVTEPHPMmn/tAqsL48TD/6DlLxLp06XeOUSRqb4SfJSH\nvce7WcliJnz3r/br\n=exyu\n-----END PGP SIGNATURE-----",
        "payload": "tree 31891e04458f1c36128d3418ebc36e3ac5c9253a\nparent 655d929836a71af23d2035d2e2e99ad8b8c340c3\nauthor Fabian Jahr <fjahr@protonmail.com> 1598120480 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857062 +0200\n\nrpc, index: Add verbose amounts tracking to Coinstats index\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2501576eccb08af80471c7b7b843b189ad6758c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2501576eccb08af80471c7b7b843b189ad6758c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2501576eccb08af80471c7b7b843b189ad6758c0/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "655d929836a71af23d2035d2e2e99ad8b8c340c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/655d929836a71af23d2035d2e2e99ad8b8c340c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/655d929836a71af23d2035d2e2e99ad8b8c340c3"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 181,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c7c1f4b53397098ac4fa511db44d45e825b1cfa0",
        "filename": "src/index/coinstatsindex.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 6,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2501576eccb08af80471c7b7b843b189ad6758c0/src/index/coinstatsindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2501576eccb08af80471c7b7b843b189ad6758c0/src/index/coinstatsindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.cpp?ref=2501576eccb08af80471c7b7b843b189ad6758c0",
        "patch": "@@ -23,13 +23,31 @@ struct DBVal {\n     uint64_t transaction_output_count;\n     uint64_t bogo_size;\n     CAmount total_amount;\n+    CAmount total_subsidy;\n+    CAmount block_unspendable_amount;\n+    CAmount block_prevout_spent_amount;\n+    CAmount block_new_outputs_ex_coinbase_amount;\n+    CAmount block_coinbase_amount;\n+    CAmount unspendables_genesis_block;\n+    CAmount unspendables_bip30;\n+    CAmount unspendables_scripts;\n+    CAmount unspendables_unclaimed_rewards;\n \n     SERIALIZE_METHODS(DBVal, obj)\n     {\n         READWRITE(obj.muhash);\n         READWRITE(obj.transaction_output_count);\n         READWRITE(obj.bogo_size);\n         READWRITE(obj.total_amount);\n+        READWRITE(obj.total_subsidy);\n+        READWRITE(obj.block_unspendable_amount);\n+        READWRITE(obj.block_prevout_spent_amount);\n+        READWRITE(obj.block_new_outputs_ex_coinbase_amount);\n+        READWRITE(obj.block_coinbase_amount);\n+        READWRITE(obj.unspendables_genesis_block);\n+        READWRITE(obj.unspendables_bip30);\n+        READWRITE(obj.unspendables_scripts);\n+        READWRITE(obj.unspendables_unclaimed_rewards);\n     }\n };\n \n@@ -88,6 +106,8 @@ CoinStatsIndex::CoinStatsIndex(size_t n_cache_size, bool f_memory, bool f_wipe)\n bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n {\n     CBlockUndo block_undo;\n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy += block_subsidy;\n \n     // Ignore genesis block\n     if (pindex->nHeight > 0) {\n@@ -118,6 +138,8 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n \n             // Skip duplicate txid coinbase transactions (BIP30).\n             if (is_bip30_block && tx->IsCoinBase()) {\n+                m_block_unspendable_amount += block_subsidy;\n+                m_unspendables_bip30 += block_subsidy;\n                 continue;\n             }\n \n@@ -127,10 +149,20 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n                 COutPoint outpoint{tx->GetHash(), static_cast<uint32_t>(j)};\n \n                 // Skip unspendable coins\n-                if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+                if (coin.out.scriptPubKey.IsUnspendable()) {\n+                    m_block_unspendable_amount += coin.out.nValue;\n+                    m_unspendables_scripts += coin.out.nValue;\n+                    continue;\n+                }\n \n                 m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n \n+                if (tx->IsCoinBase()) {\n+                    m_block_coinbase_amount += coin.out.nValue;\n+                } else {\n+                    m_block_new_outputs_ex_coinbase_amount += coin.out.nValue;\n+                }\n+\n                 ++m_transaction_output_count;\n                 m_total_amount += coin.out.nValue;\n                 m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n@@ -146,19 +178,42 @@ bool CoinStatsIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n \n                     m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n \n+                    m_block_prevout_spent_amount += coin.out.nValue;\n+\n                     --m_transaction_output_count;\n                     m_total_amount -= coin.out.nValue;\n                     m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n                 }\n             }\n         }\n+    } else {\n+        // genesis block\n+        m_block_unspendable_amount += block_subsidy;\n+        m_unspendables_genesis_block += block_subsidy;\n     }\n \n+    // If spent prevouts + block subsidy are still a higher amount than\n+    // new outputs + coinbase + current unspendable amount this means\n+    // the miner did not claim the full block reward. Unclaimed block\n+    // rewards are also unspendable.\n+    const CAmount unclaimed_rewards{(m_block_prevout_spent_amount + m_total_subsidy) - (m_block_new_outputs_ex_coinbase_amount + m_block_coinbase_amount + m_block_unspendable_amount)};\n+    m_block_unspendable_amount += unclaimed_rewards;\n+    m_unspendables_unclaimed_rewards += unclaimed_rewards;\n+\n     std::pair<uint256, DBVal> value;\n     value.first = pindex->GetBlockHash();\n     value.second.transaction_output_count = m_transaction_output_count;\n     value.second.bogo_size = m_bogo_size;\n     value.second.total_amount = m_total_amount;\n+    value.second.total_subsidy = m_total_subsidy;\n+    value.second.block_unspendable_amount = m_block_unspendable_amount;\n+    value.second.block_prevout_spent_amount = m_block_prevout_spent_amount;\n+    value.second.block_new_outputs_ex_coinbase_amount = m_block_new_outputs_ex_coinbase_amount;\n+    value.second.block_coinbase_amount = m_block_coinbase_amount;\n+    value.second.unspendables_genesis_block = m_unspendables_genesis_block;\n+    value.second.unspendables_bip30 = m_unspendables_bip30;\n+    value.second.unspendables_scripts = m_unspendables_scripts;\n+    value.second.unspendables_unclaimed_rewards = m_unspendables_unclaimed_rewards;\n \n     uint256 out;\n     m_muhash.Finalize(out);\n@@ -261,6 +316,15 @@ bool CoinStatsIndex::LookUpStats(const CBlockIndex* block_index, CCoinsStats& co\n     coins_stats.nTransactionOutputs = entry.transaction_output_count;\n     coins_stats.nBogoSize = entry.bogo_size;\n     coins_stats.nTotalAmount = entry.total_amount;\n+    coins_stats.total_subsidy = entry.total_subsidy;\n+    coins_stats.block_unspendable_amount = entry.block_unspendable_amount;\n+    coins_stats.block_prevout_spent_amount = entry.block_prevout_spent_amount;\n+    coins_stats.block_new_outputs_ex_coinbase_amount = entry.block_new_outputs_ex_coinbase_amount;\n+    coins_stats.block_coinbase_amount = entry.block_coinbase_amount;\n+    coins_stats.unspendables_genesis_block = entry.unspendables_genesis_block;\n+    coins_stats.unspendables_bip30 = entry.unspendables_bip30;\n+    coins_stats.unspendables_scripts = entry.unspendables_scripts;\n+    coins_stats.unspendables_unclaimed_rewards = entry.unspendables_unclaimed_rewards;\n \n     return true;\n }\n@@ -289,6 +353,15 @@ bool CoinStatsIndex::Init()\n             m_transaction_output_count = entry.transaction_output_count;\n             m_bogo_size = entry.bogo_size;\n             m_total_amount = entry.total_amount;\n+            m_total_subsidy = entry.total_subsidy;\n+            m_block_unspendable_amount = entry.block_unspendable_amount;\n+            m_block_prevout_spent_amount = entry.block_prevout_spent_amount;\n+            m_block_new_outputs_ex_coinbase_amount = entry.block_new_outputs_ex_coinbase_amount;\n+            m_block_coinbase_amount = entry.block_coinbase_amount;\n+            m_unspendables_genesis_block = entry.unspendables_genesis_block;\n+            m_unspendables_bip30 = entry.unspendables_bip30;\n+            m_unspendables_scripts = entry.unspendables_scripts;\n+            m_unspendables_unclaimed_rewards = entry.unspendables_unclaimed_rewards;\n         }\n \n         return true;\n@@ -303,6 +376,9 @@ bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex\n     CBlockUndo block_undo;\n     std::pair<uint256, DBVal> read_out;\n \n+    const CAmount block_subsidy{GetBlockSubsidy(pindex->nHeight, Params().GetConsensus())};\n+    m_total_subsidy -= block_subsidy;\n+\n     // Ignore genesis block\n     if (pindex->nHeight > 0) {\n         if (!UndoReadFromDisk(block_undo, pindex)) {\n@@ -332,9 +408,23 @@ bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex\n             Coin coin{out, pindex->nHeight, tx->IsCoinBase()};\n \n             // Skip unspendable coins\n-            if (coin.out.scriptPubKey.IsUnspendable()) continue;\n+            if (coin.out.scriptPubKey.IsUnspendable()) {\n+                m_block_unspendable_amount -= coin.out.nValue;\n+                m_unspendables_scripts -= coin.out.nValue;\n+                continue;\n+            }\n \n             m_muhash.Remove(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+            if (tx->IsCoinBase()) {\n+                m_block_coinbase_amount -= coin.out.nValue;\n+            } else {\n+                m_block_new_outputs_ex_coinbase_amount -= coin.out.nValue;\n+            }\n+\n+            --m_transaction_output_count;\n+            m_total_amount -= coin.out.nValue;\n+            m_bogo_size -= GetBogoSize(coin.out.scriptPubKey);\n         }\n \n         // The coinbase tx has no undo data since no former output is spent\n@@ -346,18 +436,37 @@ bool CoinStatsIndex::ReverseBlock(const CBlock& block, const CBlockIndex* pindex\n                 COutPoint outpoint{tx->vin[j].prevout.hash, tx->vin[j].prevout.n};\n \n                 m_muhash.Insert(MakeUCharSpan(TxOutSer(outpoint, coin)));\n+\n+                m_block_prevout_spent_amount -= coin.out.nValue;\n+\n+                m_transaction_output_count++;\n+                m_total_amount += coin.out.nValue;\n+                m_bogo_size += GetBogoSize(coin.out.scriptPubKey);\n             }\n         }\n     }\n \n-    // Check that the rolled back internal value of muhash is consistent with the DB read out\n+    const CAmount unclaimed_rewards{(m_block_new_outputs_ex_coinbase_amount + m_block_coinbase_amount + m_block_unspendable_amount) - (m_block_prevout_spent_amount + m_total_subsidy)};\n+    m_block_unspendable_amount -= unclaimed_rewards;\n+    m_unspendables_unclaimed_rewards -= unclaimed_rewards;\n+\n+    // Check that the rolled back internal values are consistent with the DB read out\n     uint256 out;\n     m_muhash.Finalize(out);\n     Assert(read_out.second.muhash == out);\n \n-    m_transaction_output_count = read_out.second.transaction_output_count;\n-    m_total_amount = read_out.second.total_amount;\n-    m_bogo_size = read_out.second.bogo_size;\n+    Assert(m_transaction_output_count == read_out.second.transaction_output_count);\n+    Assert(m_total_amount == read_out.second.total_amount);\n+    Assert(m_bogo_size == read_out.second.bogo_size);\n+    Assert(m_total_subsidy == read_out.second.total_subsidy);\n+    Assert(m_block_unspendable_amount == read_out.second.block_unspendable_amount);\n+    Assert(m_block_prevout_spent_amount == read_out.second.block_prevout_spent_amount);\n+    Assert(m_block_new_outputs_ex_coinbase_amount == read_out.second.block_new_outputs_ex_coinbase_amount);\n+    Assert(m_block_coinbase_amount == read_out.second.block_coinbase_amount);\n+    Assert(m_unspendables_genesis_block == read_out.second.unspendables_genesis_block);\n+    Assert(m_unspendables_bip30 == read_out.second.unspendables_bip30);\n+    Assert(m_unspendables_scripts == read_out.second.unspendables_scripts);\n+    Assert(m_unspendables_unclaimed_rewards == read_out.second.unspendables_unclaimed_rewards);\n \n     return m_db->Write(DB_MUHASH, m_muhash);\n }"
      },
      {
        "sha": "6149f9b4b3d5dec08ac29a5fcb89b23951d88c29",
        "filename": "src/index/coinstatsindex.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2501576eccb08af80471c7b7b843b189ad6758c0/src/index/coinstatsindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2501576eccb08af80471c7b7b843b189ad6758c0/src/index/coinstatsindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.h?ref=2501576eccb08af80471c7b7b843b189ad6758c0",
        "patch": "@@ -24,6 +24,15 @@ class CoinStatsIndex final : public BaseIndex\n     uint64_t m_transaction_output_count{0};\n     uint64_t m_bogo_size{0};\n     CAmount m_total_amount{0};\n+    CAmount m_total_subsidy{0};\n+    CAmount m_block_unspendable_amount{0};\n+    CAmount m_block_prevout_spent_amount{0};\n+    CAmount m_block_new_outputs_ex_coinbase_amount{0};\n+    CAmount m_block_coinbase_amount{0};\n+    CAmount m_unspendables_genesis_block{0};\n+    CAmount m_unspendables_bip30{0};\n+    CAmount m_unspendables_scripts{0};\n+    CAmount m_unspendables_unclaimed_rewards{0};\n \n     bool ReverseBlock(const CBlock& block, const CBlockIndex* pindex);\n "
      },
      {
        "sha": "ba565eba436bd68c8841f16054c4ab06c8ff1fd3",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2501576eccb08af80471c7b7b843b189ad6758c0/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2501576eccb08af80471c7b7b843b189ad6758c0/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=2501576eccb08af80471c7b7b843b189ad6758c0",
        "patch": "@@ -41,6 +41,17 @@ struct CCoinsStats\n \n     bool from_index{false};\n \n+    // Following values are only available from coinstats index\n+    CAmount total_subsidy{0};\n+    CAmount block_unspendable_amount{0};\n+    CAmount block_prevout_spent_amount{0};\n+    CAmount block_new_outputs_ex_coinbase_amount{0};\n+    CAmount block_coinbase_amount{0};\n+    CAmount unspendables_genesis_block{0};\n+    CAmount unspendables_bip30{0};\n+    CAmount unspendables_scripts{0};\n+    CAmount unspendables_unclaimed_rewards{0};\n+\n     CCoinsStats(CoinStatsHashType hash_type) : m_hash_type(hash_type) {}\n };\n "
      },
      {
        "sha": "1067a7c4bbd7cebe4253a560bdb8830c6e813295",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 4,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2501576eccb08af80471c7b7b843b189ad6758c0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2501576eccb08af80471c7b7b843b189ad6758c0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2501576eccb08af80471c7b7b843b189ad6758c0",
        "patch": "@@ -1113,8 +1113,23 @@ static RPCHelpMan gettxoutsetinfo()\n                         {RPCResult::Type::STR_HEX, \"hash_serialized_2\", /* optional */ true, \"The serialized hash (only present if 'hash_serialized_2' hash_type is chosen)\"},\n                         {RPCResult::Type::STR_HEX, \"muhash\", /* optional */ true, \"The serialized hash (only present if 'muhash' hash_type is chosen)\"},\n                         {RPCResult::Type::NUM, \"transactions\", \"The number of transactions with unspent outputs (not available when coinstatsindex is used)\"},\n-                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk\"},\n+                        {RPCResult::Type::NUM, \"disk_size\", \"The estimated size of the chainstate on disk (not available when coinstatsindex is used)\"},\n                         {RPCResult::Type::STR_AMOUNT, \"total_amount\", \"The total amount of coins in the UTXO set\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"total_unspendable_amount\", \"The total amount of coins permanently excluded from the UTXO set (only available if coinstatsindex is used)\"},\n+                        {RPCResult::Type::OBJ, \"block_info\", \"Info on amounts in the block at this block height (only available if coinstatsindex is used)\",\n+                        {\n+                            {RPCResult::Type::STR_AMOUNT, \"prevout_spent\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"coinbase\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"new_outputs_ex_coinbase\", \"\"},\n+                            {RPCResult::Type::STR_AMOUNT, \"unspendable\", \"\"},\n+                            {RPCResult::Type::OBJ, \"unspendables\", \"Detailed view of the unspendable categories\",\n+                            {\n+                                {RPCResult::Type::STR_AMOUNT, \"genesis_block\", \"\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"bip30\", \"Transactions overridden by duplicates (no longer possible with BIP30)\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"scripts\", \"Amounts sent to scripts that are unspendable (for example OP_RETURN outputs)\"},\n+                                {RPCResult::Type::STR_AMOUNT, \"unclaimed_rewards\", \"Fee rewards that miners did not claim in their coinbase transaction\"},\n+                            }}\n+                        }},\n                     }},\n                 RPCExamples{\n                     HelpExampleCli(\"gettxoutsetinfo\", \"\") +\n@@ -1130,9 +1145,7 @@ static RPCHelpMan gettxoutsetinfo()\n {\n     UniValue ret(UniValue::VOBJ);\n \n-    ::ChainstateActive().ForceFlushStateToDisk();\n     CBlockIndex* pindex{nullptr};\n-\n     const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n     CCoinsStats stats{hash_type};\n \n@@ -1147,6 +1160,7 @@ static RPCHelpMan gettxoutsetinfo()\n         LOCK(::cs_main);\n         coins_view = &active_chainstate.CoinsDB();\n         blockman = &active_chainstate.m_blockman;\n+        pindex = blockman->LookupBlockIndex(coins_view->GetBestBlock());\n     }\n \n     if (!request.params[1].isNull()) {\n@@ -1168,11 +1182,34 @@ static RPCHelpMan gettxoutsetinfo()\n         if (hash_type == CoinStatsHashType::MUHASH) {\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n+        ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n         if (!stats.from_index) {\n             ret.pushKV(\"transactions\", static_cast<int64_t>(stats.nTransactions));\n             ret.pushKV(\"disk_size\", stats.nDiskSize);\n+        } else {\n+            ret.pushKV(\"total_unspendable_amount\", ValueFromAmount(stats.block_unspendable_amount));\n+\n+            CCoinsStats prev_stats{hash_type};\n+\n+            if (pindex->nHeight > 0) {\n+                GetUTXOStats(coins_view, WITH_LOCK(::cs_main, return std::ref(g_chainman.m_blockman)), prev_stats, node.rpc_interruption_point, pindex->pprev);\n+            }\n+\n+            UniValue block_info(UniValue::VOBJ);\n+            block_info.pushKV(\"prevout_spent\", ValueFromAmount(stats.block_prevout_spent_amount - prev_stats.block_prevout_spent_amount));\n+            block_info.pushKV(\"coinbase\", ValueFromAmount(stats.block_coinbase_amount - prev_stats.block_coinbase_amount));\n+            block_info.pushKV(\"new_outputs_ex_coinbase\", ValueFromAmount(stats.block_new_outputs_ex_coinbase_amount - prev_stats.block_new_outputs_ex_coinbase_amount));\n+            block_info.pushKV(\"unspendable\", ValueFromAmount(stats.block_unspendable_amount - prev_stats.block_unspendable_amount));\n+\n+            UniValue unspendables(UniValue::VOBJ);\n+            unspendables.pushKV(\"genesis_block\", ValueFromAmount(stats.unspendables_genesis_block - prev_stats.unspendables_genesis_block));\n+            unspendables.pushKV(\"bip30\", ValueFromAmount(stats.unspendables_bip30 - prev_stats.unspendables_bip30));\n+            unspendables.pushKV(\"scripts\", ValueFromAmount(stats.unspendables_scripts - prev_stats.unspendables_scripts));\n+            unspendables.pushKV(\"unclaimed_rewards\", ValueFromAmount(stats.unspendables_unclaimed_rewards - prev_stats.unspendables_unclaimed_rewards));\n+            block_info.pushKV(\"unspendables\", unspendables);\n+\n+            ret.pushKV(\"block_info\", block_info);\n         }\n-        ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n     } else {\n         if (g_coin_stats_index) {\n             const IndexSummary summary{g_coin_stats_index->GetSummary()};"
      },
      {
        "sha": "9ccfa36450ea6c402f78f556289c35ce104081c8",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2501576eccb08af80471c7b7b843b189ad6758c0/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2501576eccb08af80471c7b7b843b189ad6758c0/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=2501576eccb08af80471c7b7b843b189ad6758c0",
        "patch": "@@ -127,6 +127,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n+    { \"gettxoutsetinfo\", 1, \"hash_or_height\" },\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n     { \"send\", 0, \"outputs\" },"
      },
      {
        "sha": "ff4034176cb6878010bd4d2fabdf1ff5262da699",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2501576eccb08af80471c7b7b843b189ad6758c0/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2501576eccb08af80471c7b7b843b189ad6758c0/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=2501576eccb08af80471c7b7b843b189ad6758c0",
        "patch": "@@ -56,6 +56,8 @@ def _test_coin_stats_index(self):\n         self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n         for hash_option in index_hash_options:\n             res1 = index_node.gettxoutsetinfo(hash_option)\n+            # The fields 'block_info' and 'total_unspendable_amount' only exist on the index\n+            del res1['block_info'], res1['total_unspendable_amount']\n             res1.pop('muhash', None)\n \n             # Everything left should be the same\n@@ -70,11 +72,13 @@ def _test_coin_stats_index(self):\n         for hash_option in index_hash_options:\n             # Fetch old stats by height\n             res2 = index_node.gettxoutsetinfo(hash_option, 102)\n+            del res2['block_info'], res2['total_unspendable_amount']\n             res2.pop('muhash', None)\n             assert_equal(res0, res2)\n \n             # Fetch old stats by hash\n             res3 = index_node.gettxoutsetinfo(hash_option, res0['bestblock'])\n+            del res3['block_info'], res3['total_unspendable_amount']\n             res3.pop('muhash', None)\n             assert_equal(res0, res3)\n "
      }
    ]
  },
  {
    "sha": "e0938c29099635150014ffc9bb0cafa8049ec55a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDkzOGMyOTA5OTYzNTE1MDAxNGZmYzliYjBjYWZhODA0OWVjNTVh",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-08-22T16:51:45Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:31:02Z"
      },
      "message": "test: Add tests for block_info in gettxoutsetinfo\n\nThis additional data will automatically be returned if the coinstats index is used.",
      "tree": {
        "sha": "68d6b5f486e196017b8f04f5ac729df1b68ad2b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68d6b5f486e196017b8f04f5ac729df1b68ad2b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0938c29099635150014ffc9bb0cafa8049ec55a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGYVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNHcYP/05gB/PFmKWfRQCYDvxu4cdER737\n/EmUIXAMXrQIPIOMerScXSc4Qq1kuLm3xU9SyzRrcxJK21+xhYFy0pLIdPbIQ78q\nhEuONd4guNB0ZnNQll3+rHYX80mDe9dqqAskTu/m7PXRe8YItOdkrIZERXMDUMl6\n07D/OIXAqCruzKuCeLhKB9Sg7eZxIz+gOJa+RG0yhzGudv3cPeuHZOWFxS+mbNIi\nbUoVs9hPg6yeoUOekbqG5EPpmhoujP7ijtxoaFWY21QW4rpStOB3BvDqlIMIJ1hf\nBzrgFBIRFETLnqU+YL9TFSLS4aiYBX2uq2A1jm369z6XMDl1AYbk9SRmmtGz9nOy\nfSEDvKR9BnQQ0oyxc8loYR4i4unLWNSFN/HQzuA4U6XtOkHUDvhwtn0Ia4UaOcWL\nQMBytsL7Fk1BUFJNBIq12Ni3DDJ+41ELOor+imjYFm+AXRSA8tlPzccQcmxqSdpN\ndsNSE/N8b/7H4RM2VyNtyd9EMIBaZ0RIJXZuogCvwUEZDeyBgaieDfQ0iCBv2+lT\nMyeNEGI423mnA8wwvIAQxdlbAlsLgLoi+GJld+mN3gy5ZfGGQ9kCoeybVIYamelu\n+K2Jzbyo7KRjK4FSOv+R2V0A+1TcpLEUNnCDPeHiJNaDv88ncl/HYn/bJUC+7hqy\n482ddWN8Z+rHkp44\n=F9zb\n-----END PGP SIGNATURE-----",
        "payload": "tree 68d6b5f486e196017b8f04f5ac729df1b68ad2b1\nparent 2501576eccb08af80471c7b7b843b189ad6758c0\nauthor Fabian Jahr <fjahr@protonmail.com> 1598115105 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857062 +0200\n\ntest: Add tests for block_info in gettxoutsetinfo\n\nThis additional data will automatically be returned if the coinstats index is used.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0938c29099635150014ffc9bb0cafa8049ec55a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0938c29099635150014ffc9bb0cafa8049ec55a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0938c29099635150014ffc9bb0cafa8049ec55a/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2501576eccb08af80471c7b7b843b189ad6758c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2501576eccb08af80471c7b7b843b189ad6758c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2501576eccb08af80471c7b7b843b189ad6758c0"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 145,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4aa89f47f6e07a80fc145682b1480a6b57a311c9",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 139,
        "deletions": 0,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0938c29099635150014ffc9bb0cafa8049ec55a/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0938c29099635150014ffc9bb0cafa8049ec55a/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=e0938c29099635150014ffc9bb0cafa8049ec55a",
        "patch": "@@ -9,6 +9,25 @@\n the index.\n \"\"\"\n \n+from decimal import Decimal\n+\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+)\n+from test_framework.messages import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    ToHex,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_FALSE,\n+    OP_RETURN,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -32,6 +51,13 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         self._test_coin_stats_index()\n \n+    def block_sanity_check(self, block_info):\n+        block_subsidy = 50\n+        assert_equal(\n+            block_info['prevout_spent'] + block_subsidy,\n+            block_info['new_outputs_ex_coinbase'] + block_info['coinbase'] + block_info['unspendable']\n+        )\n+\n     def _test_coin_stats_index(self):\n         node = self.nodes[0]\n         index_node = self.nodes[1]\n@@ -85,5 +111,118 @@ def _test_coin_stats_index(self):\n             # It does not work without coinstatsindex\n             assert_raises_rpc_error(-8, \"Querying specific block heights requires coinstatsindex\", node.gettxoutsetinfo, hash_option, 102)\n \n+        self.log.info(\"Test gettxoutsetinfo() with index and verbose flag\")\n+\n+        for hash_option in index_hash_options:\n+            # Genesis block is unspendable\n+            res4 = index_node.gettxoutsetinfo(hash_option, 0)\n+            assert_equal(res4['total_unspendable_amount'], 50)\n+            assert_equal(res4['block_info'], {\n+                'unspendable': 50,\n+                'prevout_spent': 0,\n+                'new_outputs_ex_coinbase': 0,\n+                'coinbase': 0,\n+                'unspendables': {\n+                    'genesis_block': 50,\n+                    'bip30': 0,\n+                    'scripts': 0,\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res4['block_info'])\n+\n+            # Test an older block height that included a normal tx\n+            res5 = index_node.gettxoutsetinfo(hash_option, 102)\n+            assert_equal(res5['total_unspendable_amount'], 50)\n+            assert_equal(res5['block_info'], {\n+                'unspendable': 0,\n+                'prevout_spent': 50,\n+                'new_outputs_ex_coinbase': Decimal('49.99995560'),\n+                'coinbase': Decimal('50.00004440'),\n+                'unspendables': {\n+                    'genesis_block': 0,\n+                    'bip30': 0,\n+                    'scripts': 0,\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res5['block_info'])\n+\n+        # Generate and send a normal tx with two outputs\n+        tx1_inputs = []\n+        tx1_outputs = {self.nodes[0].getnewaddress(): 21, self.nodes[0].getnewaddress(): 42}\n+        raw_tx1 = self.nodes[0].createrawtransaction(tx1_inputs, tx1_outputs)\n+        funded_tx1 = self.nodes[0].fundrawtransaction(raw_tx1)\n+        signed_tx1 = self.nodes[0].signrawtransactionwithwallet(funded_tx1['hex'])\n+        tx1_txid = self.nodes[0].sendrawtransaction(signed_tx1['hex'])\n+\n+        # Find the right position of the 21 BTC output\n+        tx1_final = self.nodes[0].gettransaction(tx1_txid)\n+        for output in tx1_final['details']:\n+            if output['amount'] == Decimal('21.00000000') and output['category'] == 'receive':\n+                n = output['vout']\n+\n+        # Generate and send another tx with an OP_RETURN output (which is unspendable)\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(int(tx1_txid, 16), n), b''))\n+        tx2.vout.append(CTxOut(int(20.99 * COIN), CScript([OP_RETURN] + [OP_FALSE]*30)))\n+        tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx2))['hex']\n+        self.nodes[0].sendrawtransaction(tx2_hex)\n+\n+        # Include both txs in a block\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            # Check all amounts were registered correctly\n+            res6 = index_node.gettxoutsetinfo(hash_option, 108)\n+            assert_equal(res6['total_unspendable_amount'], Decimal('70.98999999'))\n+            assert_equal(res6['block_info'], {\n+                'unspendable': Decimal('20.98999999'),\n+                'prevout_spent': 111,\n+                'new_outputs_ex_coinbase': Decimal('89.99993620'),\n+                'coinbase': Decimal('50.01006381'),\n+                'unspendables': {\n+                    'genesis_block': 0,\n+                    'bip30': 0,\n+                    'scripts': Decimal('20.98999999'),\n+                    'unclaimed_rewards': 0\n+                }\n+            })\n+            self.block_sanity_check(res6['block_info'])\n+\n+        # Create a coinbase that does not claim full subsidy and also\n+        # has two outputs\n+        cb = create_coinbase(109, nValue=35)\n+        cb.vout.append(CTxOut(5 * COIN, CScript([OP_FALSE])))\n+        cb.rehash()\n+\n+        # Generate a block that includes previous coinbase\n+        tip = self.nodes[0].getbestblockhash()\n+        block_time = self.nodes[0].getblock(tip)['time'] + 1\n+        block = create_block(int(tip, 16), cb, block_time)\n+        block.solve()\n+        self.nodes[0].submitblock(ToHex(block))\n+        self.sync_all()\n+\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        for hash_option in index_hash_options:\n+            res7 = index_node.gettxoutsetinfo(hash_option, 109)\n+            assert_equal(res7['total_unspendable_amount'], Decimal('80.98999999'))\n+            assert_equal(res7['block_info'], {\n+                'unspendable': 10,\n+                'prevout_spent': 0,\n+                'new_outputs_ex_coinbase': 0,\n+                'coinbase': 40,\n+                'unspendables': {\n+                    'genesis_block': 0,\n+                    'bip30': 0,\n+                    'scripts': 0,\n+                    'unclaimed_rewards': 10\n+                }\n+            })\n+            self.block_sanity_check(res7['block_info'])\n+\n if __name__ == '__main__':\n     CoinStatsIndexTest().main()"
      },
      {
        "sha": "d08e02517821523b85739031fc4d21705ec9c3fe",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0938c29099635150014ffc9bb0cafa8049ec55a/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0938c29099635150014ffc9bb0cafa8049ec55a/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=e0938c29099635150014ffc9bb0cafa8049ec55a",
        "patch": "@@ -115,7 +115,7 @@ def script_BIP34_coinbase_height(height):\n     return CScript([CScriptNum(height)])\n \n \n-def create_coinbase(height, pubkey=None, extra_output_script=None, fees=0):\n+def create_coinbase(height, pubkey=None, extra_output_script=None, fees=0, nValue=50):\n     \"\"\"Create a coinbase transaction.\n \n     If pubkey is passed in, the coinbase output will be a P2PK output;\n@@ -126,10 +126,11 @@ def create_coinbase(height, pubkey=None, extra_output_script=None, fees=0):\n     coinbase = CTransaction()\n     coinbase.vin.append(CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff))\n     coinbaseoutput = CTxOut()\n-    coinbaseoutput.nValue = 50 * COIN\n-    halvings = int(height / 150)  # regtest\n-    coinbaseoutput.nValue >>= halvings\n-    coinbaseoutput.nValue += fees\n+    coinbaseoutput.nValue = nValue * COIN\n+    if nValue == 50:\n+        halvings = int(height / 150)  # regtest\n+        coinbaseoutput.nValue >>= halvings\n+        coinbaseoutput.nValue += fees\n     if pubkey is not None:\n         coinbaseoutput.scriptPubKey = CScript([pubkey, OP_CHECKSIG])\n     else:"
      }
    ]
  },
  {
    "sha": "bb7788b121a30489bc81a1f46dde6a9b19ae4ec1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjc3ODhiMTIxYTMwNDg5YmM4MWExZjQ2ZGRlNmE5YjE5YWU0ZWMx",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-02-25T18:14:58Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T18:31:02Z"
      },
      "message": "test: Test coinstatsindex robustness across restarts",
      "tree": {
        "sha": "a2d3dfc4f8f5a654a4dbe58cc2dfc735fd0c63b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2d3dfc4f8f5a654a4dbe58cc2dfc735fd0c63b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB9zGYVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNJwMP/iRLTfh8bfVpFZL9hQKhTk7LghlE\nQKPFWa7ndut9eAu7XSchZfkSURCKerrmMJfZR55hatX4eFMwOQsirXnjWrcdbdqp\n/Opm4kv57agPAoLXfL9AAZa8fPSumZ60vrsPw4IF2QmN7C+rKlNEH6ZkcYDDzs9g\nR54UpWgDhoReoXzJrotDm/b7SCkk7D9AsVVkuwJCaorIIldF9iRubHX3DfYRCqwa\nDQSWXHay0E5K8sin63KRylYvHvCnJRdBYE1RMLy8VGjezTrNIGBpcDBi8x5F4KN6\n85Iht0hLmNKpOtj/bLpY1fTpzsHGjaujiWZklleqIDsYZPyZ3LXuCPjO69ltUZfi\nf+m/TC8kEcujIEhmjNSm/+/PeELmsqmsenpnOdhaDivjDuLwt8ec37qDnz3LbZDi\nXInsCLaG2qP52kezXG4mQalXBYRGuH4nFaH2zxThZO5qk1Qh/y48vSBRJ5INvw6y\nx2iH/TpeARhBVDgVENoUfVmOcQB3DbDG3QIBeMQOnzwqzIgvuAoWifw27Nbt5VGh\nWK5UtAUBdiP7DjjRgtcn6C45FPlO7oMlm1g7T7BNEaEPvSuEuCW2nqmm1A1XnCI5\njnWrTcuuwBVYbEZXmOlk6RCtOZiVIPwj4m+H8M5dQnWvF6Kaha689/5syfjrthRE\nF7FDdLSQxxsORyJz\n=RtSU\n-----END PGP SIGNATURE-----",
        "payload": "tree a2d3dfc4f8f5a654a4dbe58cc2dfc735fd0c63b0\nparent e0938c29099635150014ffc9bb0cafa8049ec55a\nauthor Fabian Jahr <fjahr@protonmail.com> 1614276898 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618857062 +0200\n\ntest: Test coinstatsindex robustness across restarts\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0938c29099635150014ffc9bb0cafa8049ec55a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0938c29099635150014ffc9bb0cafa8049ec55a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0938c29099635150014ffc9bb0cafa8049ec55a"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d517c149cd842f63666c4b913fbb4baf7155f4bd",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=bb7788b121a30489bc81a1f46dde6a9b19ae4ec1",
        "patch": "@@ -224,5 +224,18 @@ def _test_coin_stats_index(self):\n             })\n             self.block_sanity_check(res7['block_info'])\n \n+        self.log.info(\"Test that the index is robust across restarts\")\n+\n+        res8 = index_node.gettxoutsetinfo('muhash')\n+        self.restart_node(1, extra_args=self.extra_args[1])\n+        res9 = index_node.gettxoutsetinfo('muhash')\n+        assert_equal(res8, res9)\n+\n+        index_node.generate(1)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        res10 = index_node.gettxoutsetinfo('muhash')\n+        assert(res8['txouts'] < res10['txouts'])\n+\n+\n if __name__ == '__main__':\n     CoinStatsIndexTest().main()"
      }
    ]
  },
  {
    "sha": "b9362392aef2689bc106c20925859ede555d082b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTM2MjM5MmFlZjI2ODliYzEwNmMyMDkyNTg1OWVkZTU1NWQwODJi",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-02-28T18:27:00Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T19:11:33Z"
      },
      "message": "index, rpc: Add use_index option for gettxoutsetinfo",
      "tree": {
        "sha": "b8437b8db02cfe99a5d0626bdf16b6699b477eaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8437b8db02cfe99a5d0626bdf16b6699b477eaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9362392aef2689bc106c20925859ede555d082b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB91egVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNSBUP/iELMxOMCxYOv1JFKwzyAerMKZo5\nLI0g+yxfJ+6TrRlBWFdjCVx0wogngWMqyL340YBx8AcTayL/Jm14Y4ITEXMpomVq\nF54pO41aW7apiIrAV8D49YQ9ZKAsmZk9YM/JNECXx52rrlt2bkqqSBXdL5iRfzXj\nT16LHQzGr+AFW/hzfU2nglZm7PmJdHaWpOCBiy4OdyTTGJ3+EFAy+1Uj8SYoihXK\nguX+9GyeIBcQvU42ZLgB9K2N63mbjXK1bWBAdetfSk93Gf1iGVWrH/T8etjOb1O9\nHzjkjvHHioFs0SpfrNlqj4nw/ALSvniArd54BmUMcBOHFu9tCf80/zbKj1klGDTu\nAghyVeLsYkUX2jgJHBvViHxXXa2N33FJ08GDvdrQj35d46skl7IG+4JmO0/QKnK7\nickB9ValXiuyfgTTUkJXCvQ2ysmYsxl4mwFYfrRYFgTH5+aUcFMexkk1aP3nCK0u\nS0HCZ4IqDSB/+OKjpSMpnB2DK3CAAeNFOC3WYq3HhPmx6pM3INAqK+zQ3hxSo73a\nVkmM/vYRsjBY05/fZZZuxmaVMRNaAijI+WRUN9CWeGjtgKTKhDtlFr7ODi3me1rt\nFS22/nP7V9W4nj/4nY/ZtLVJPZagzmWV6F6XOGhb/PE1FHtd5BGcUYLftRfpDJBe\nFZbzcoD8CnMonA39\n=JUk9\n-----END PGP SIGNATURE-----",
        "payload": "tree b8437b8db02cfe99a5d0626bdf16b6699b477eaf\nparent bb7788b121a30489bc81a1f46dde6a9b19ae4ec1\nauthor Fabian Jahr <fjahr@protonmail.com> 1614536820 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618859493 +0200\n\nindex, rpc: Add use_index option for gettxoutsetinfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9362392aef2689bc106c20925859ede555d082b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9362392aef2689bc106c20925859ede555d082b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9362392aef2689bc106c20925859ede555d082b/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb7788b121a30489bc81a1f46dde6a9b19ae4ec1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb7788b121a30489bc81a1f46dde6a9b19ae4ec1"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 22,
      "deletions": 5
    },
    "files": [
      {
        "sha": "38c1d292504d48f4342c2f02add815c502299a43",
        "filename": "src/node/coinstats.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9362392aef2689bc106c20925859ede555d082b/src/node/coinstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9362392aef2689bc106c20925859ede555d082b/src/node/coinstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.cpp?ref=b9362392aef2689bc106c20925859ede555d082b",
        "patch": "@@ -104,9 +104,9 @@ static bool GetUTXOStats(CCoinsView* view, BlockManager& blockman, CCoinsStats&\n     stats.nHeight = Assert(pindex)->nHeight;\n     stats.hashBlock = pindex->GetBlockHash();\n \n-    // Use CoinStatsIndex if it is available and a hash_type of Muhash or None was requested\n-    if ((stats.m_hash_type == CoinStatsHashType::MUHASH || stats.m_hash_type == CoinStatsHashType::NONE) && g_coin_stats_index) {\n-        stats.from_index = true;\n+    // Use CoinStatsIndex if it is requested and available and a hash_type of Muhash or None was requested\n+    if ((stats.m_hash_type == CoinStatsHashType::MUHASH || stats.m_hash_type == CoinStatsHashType::NONE) && g_coin_stats_index && stats.index_requested) {\n+        stats.index_used = true;\n         return g_coin_stats_index->LookUpStats(pindex, stats);\n     }\n "
      },
      {
        "sha": "8be256edc93584d31e4c6c744c829244fd1e29ef",
        "filename": "src/node/coinstats.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9362392aef2689bc106c20925859ede555d082b/src/node/coinstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9362392aef2689bc106c20925859ede555d082b/src/node/coinstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/coinstats.h?ref=b9362392aef2689bc106c20925859ede555d082b",
        "patch": "@@ -39,7 +39,10 @@ struct CCoinsStats\n     //! The number of coins contained.\n     uint64_t coins_count{0};\n \n-    bool from_index{false};\n+    //! Signals if the coinstatsindex should be used (when available).\n+    bool index_requested{true};\n+    //! Signals if the coinstatsindex was used to retrieve the statistics.\n+    bool index_used{false};\n \n     // Following values are only available from coinstats index\n     CAmount total_subsidy{0};"
      },
      {
        "sha": "4a4c432a012539dafa7a048154e6a7ff4853ec35",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9362392aef2689bc106c20925859ede555d082b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9362392aef2689bc106c20925859ede555d082b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b9362392aef2689bc106c20925859ede555d082b",
        "patch": "@@ -1102,6 +1102,7 @@ static RPCHelpMan gettxoutsetinfo()\n                 {\n                     {\"hash_type\", RPCArg::Type::STR, RPCArg::Default{\"hash_serialized_2\"}, \"Which UTXO set hash should be calculated. Options: 'hash_serialized_2' (the legacy algorithm), 'muhash', 'none'.\"},\n                     {\"hash_or_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"The block hash or height of the target height (only available with coinstatsindex)\", \"\", {\"\", \"string or numeric\"}},\n+                    {\"use_index\", RPCArg::Type::BOOL, RPCArg::Default{true}, \"Use coinstatsindex, if available.\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n@@ -1148,6 +1149,7 @@ static RPCHelpMan gettxoutsetinfo()\n     CBlockIndex* pindex{nullptr};\n     const CoinStatsHashType hash_type{request.params[0].isNull() ? CoinStatsHashType::HASH_SERIALIZED : ParseHashType(request.params[0].get_str())};\n     CCoinsStats stats{hash_type};\n+    stats.index_requested = request.params[2].isNull() || request.params[2].get_bool();\n \n     NodeContext& node = EnsureAnyNodeContext(request.context);\n     ChainstateManager& chainman = EnsureChainman(node);\n@@ -1183,7 +1185,7 @@ static RPCHelpMan gettxoutsetinfo()\n               ret.pushKV(\"muhash\", stats.hashSerialized.GetHex());\n         }\n         ret.pushKV(\"total_amount\", ValueFromAmount(stats.nTotalAmount));\n-        if (!stats.from_index) {\n+        if (!stats.index_used) {\n             ret.pushKV(\"transactions\", static_cast<int64_t>(stats.nTransactions));\n             ret.pushKV(\"disk_size\", stats.nDiskSize);\n         } else {"
      },
      {
        "sha": "9c8582c7a39589a5b27ee18da824a0f6242723ad",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9362392aef2689bc106c20925859ede555d082b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9362392aef2689bc106c20925859ede555d082b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b9362392aef2689bc106c20925859ede555d082b",
        "patch": "@@ -128,6 +128,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },\n     { \"gettxoutsetinfo\", 1, \"hash_or_height\" },\n+    { \"gettxoutsetinfo\", 2, \"use_index\"},\n     { \"lockunspent\", 0, \"unlock\" },\n     { \"lockunspent\", 1, \"transactions\" },\n     { \"send\", 0, \"outputs\" },"
      },
      {
        "sha": "9b368f929ed3ec09b6a2015646112c4d347bbc27",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9362392aef2689bc106c20925859ede555d082b/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9362392aef2689bc106c20925859ede555d082b/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=b9362392aef2689bc106c20925859ede555d082b",
        "patch": "@@ -50,6 +50,7 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         self._test_coin_stats_index()\n+        self._test_use_index_option()\n \n     def block_sanity_check(self, block_info):\n         block_subsidy = 50\n@@ -236,6 +237,16 @@ def _test_coin_stats_index(self):\n         res10 = index_node.gettxoutsetinfo('muhash')\n         assert(res8['txouts'] < res10['txouts'])\n \n+    def _test_use_index_option(self):\n+        self.log.info(\"Test use_index option for nodes running the index\")\n+\n+        self.connect_nodes(0, 1)\n+        self.nodes[0].waitforblockheight(110)\n+        res = self.nodes[0].gettxoutsetinfo('muhash')\n+        option_res = self.nodes[1].gettxoutsetinfo(hash_type='muhash', hash_or_height=None, use_index=False)\n+        del res['disk_size'], option_res['disk_size']\n+        assert_equal(res, option_res)\n+\n \n if __name__ == '__main__':\n     CoinStatsIndexTest().main()"
      }
    ]
  },
  {
    "sha": "90c966b0f3cfbd6bce5883f46d8527c6853a86a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGM5NjZiMGYzY2ZiZDZiY2U1ODgzZjQ2ZDg1MjdjNjg1M2E4NmEy",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-03-10T23:52:46Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T19:11:37Z"
      },
      "message": "rpc: Allow gettxoutsetinfo and getblockstats for stale blocks",
      "tree": {
        "sha": "ec1b381f04268488d020c2980822349ba20a24ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec1b381f04268488d020c2980822349ba20a24ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90c966b0f3cfbd6bce5883f46d8527c6853a86a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB91ekVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNNbUQAJZ2/RaFuwnUjOlgkteznnsgI5tZ\nErkxF9PLc0cCN/2Dx8aMy7ATEIV0FZ/8peiRfaX4AyM08PM+KhLs0ubEFaSWfK06\nx2JPj/mCm5uQWTTue+ENGr+1Tw+dmEbkg1phCv42ojD+Sn2UXJjyu5Ax/rzuPinr\nskpsoSCl/zGSnztaqM+x8LudRhzKb5mF/4C+RecP8igqPyWHgnEiE5zwa+tcxSy9\nottRv3MA/I8585SGleQKW5QfUB59vo+UF4TdvhlDz2kvNeu0BZxlE5cLM77uBK7X\nIx4JreFhXu+VjDkZ53kE/ARhutfhpl+lBLtLmBwPN2L/xXJV3B0alSK+0+FpR3Q7\nZb9iJApITfHVZs77ui0VxolDtYdiTNdoMlEYQ7ZYI1l2wHJaBgpaSySz9u9QvVip\nBnzTjZn9KSverw4hy1KhyZNIKugkCxUW5aNWIfX2XhALH3xXeDtHfu6z9w2GZXeq\nxOTcUuhU5Yd27zihC+aeO2Kz7/Sati+Ik4ArRYp9Lf7K2F9syl5yWXWVdBerYt6s\n64krpzydqygnIaImJ7B3nX45eL9dBs1aXnvursUlGER9oFhFvBurLo383n4j/V9a\nO5aB+paXFkUbrJiH3HkOlVoI931HsngcJNqvu8WNzNd2astHd4gPXLEa0hPpW0uy\nOOTrquGU2QrHp9tx\n=ZsjF\n-----END PGP SIGNATURE-----",
        "payload": "tree ec1b381f04268488d020c2980822349ba20a24ed\nparent b9362392aef2689bc106c20925859ede555d082b\nauthor Fabian Jahr <fjahr@protonmail.com> 1615420366 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618859497 +0200\n\nrpc: Allow gettxoutsetinfo and getblockstats for stale blocks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c966b0f3cfbd6bce5883f46d8527c6853a86a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90c966b0f3cfbd6bce5883f46d8527c6853a86a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c966b0f3cfbd6bce5883f46d8527c6853a86a2/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9362392aef2689bc106c20925859ede555d082b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9362392aef2689bc106c20925859ede555d082b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9362392aef2689bc106c20925859ede555d082b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f8d7d94abf5d5ae67ccd4056195d0f28db9cf36f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c966b0f3cfbd6bce5883f46d8527c6853a86a2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c966b0f3cfbd6bce5883f46d8527c6853a86a2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=90c966b0f3cfbd6bce5883f46d8527c6853a86a2",
        "patch": "@@ -162,9 +162,7 @@ CBlockIndex* ParseHashOrHeight(const UniValue& param, ChainstateManager& chainma\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-        if (!active_chain.Contains(pindex)) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Block is not in chain %s\", Params().NetworkIDString()));\n-        }\n+\n         return pindex;\n     }\n }"
      }
    ]
  },
  {
    "sha": "23fe50436be641d7417152adc683192649ba206a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2ZlNTA0MzZiZTY0MWQ3NDE3MTUyYWRjNjgzMTkyNjQ5YmEyMDZh",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-03-03T23:31:12Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T19:11:37Z"
      },
      "message": "test: Add test for coinstatsindex behavior in reorgs\n\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>",
      "tree": {
        "sha": "7ca5eb3ccaadcbbdc3da929a44ab6ac6fb129378",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ca5eb3ccaadcbbdc3da929a44ab6ac6fb129378"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23fe50436be641d7417152adc683192649ba206a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB91ekVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNK+wP/jjx2Jo9giF3SQt8dXBXjgXo2Im9\nL28RHqaXDbRPsyr3yEBfXiQaR1YDBYbKyX2AnxQIUg8DUXv+9ewk5lcp+fmOS5J8\nnyL/Miy4/CVYN/fbnhAf6E6YRjzX6Od02DKPM7r/2sOB4v6r+MHjXe29RLUvGsjj\nqTu/dOdvDksNGDnNyNmmPzsxIGsqdOlbN1LQkufUpyEucq8iwgE6tFuJTj9o6U5S\nKIHDiPmaxZD1FvXdU0uwXvsery3AjWbLXLzdiiSoY7FbLHB/OJtweBPnCOX+ehOO\nfitzr1tK9rs4B6GRu2QvFTONbLDy73L/06Y8IuAKyzOekRN4/kexLCzuwgwnSvw9\nd2Vn+6ynHbGkWchKcczI0X0U1Y7VGzJbN9/6BKhoRZvB6JKy5TBQZUKdyQnsMIlZ\nHrzBuT4KrPIEkE5pjoYmsdXaWgQT3/OcT4mqnZ3BQ2EUqwRn/tfzmBgHXBkHbMYM\ndoZrYoKDyLcWrocJm/axuejEd35+pBQsQ23aW104nqZe+GuciyxjJl6iHxYamo0c\nTZ1Uf4/AT9IKpsWmbO4qslORykkYBo3mlu7BcxKqFRMuyz21n+nTcfnZJFvoN/ba\nirm5IV2aUAB4IcdC0kl+NVg0vdMYczO6eIEe7KzZVzyk7dJ1Bjg9BYFxNGnYhGJa\n9uO5Elwzuz5qSVMR\n=ur+N\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ca5eb3ccaadcbbdc3da929a44ab6ac6fb129378\nparent 90c966b0f3cfbd6bce5883f46d8527c6853a86a2\nauthor Fabian Jahr <fjahr@protonmail.com> 1614814272 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618859497 +0200\n\ntest: Add test for coinstatsindex behavior in reorgs\n\nCo-authored-by: Sjors Provoost <sjors@sprovoost.nl>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23fe50436be641d7417152adc683192649ba206a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23fe50436be641d7417152adc683192649ba206a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23fe50436be641d7417152adc683192649ba206a/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c966b0f3cfbd6bce5883f46d8527c6853a86a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c966b0f3cfbd6bce5883f46d8527c6853a86a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c966b0f3cfbd6bce5883f46d8527c6853a86a2"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cef60c573177e96b308bab855823b53435c23063",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23fe50436be641d7417152adc683192649ba206a/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23fe50436be641d7417152adc683192649ba206a/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=23fe50436be641d7417152adc683192649ba206a",
        "patch": "@@ -51,6 +51,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         self._test_coin_stats_index()\n         self._test_use_index_option()\n+        self._test_reorg_index()\n \n     def block_sanity_check(self, block_info):\n         block_subsidy = 50\n@@ -247,6 +248,56 @@ def _test_use_index_option(self):\n         del res['disk_size'], option_res['disk_size']\n         assert_equal(res, option_res)\n \n+    def _test_reorg_index(self):\n+        self.log.info(\"Test that index can handle reorgs\")\n+\n+        # Generate two block, let the index catch up, then invalidate the blocks\n+        index_node = self.nodes[1]\n+        reorg_blocks = index_node.generatetoaddress(2, index_node.getnewaddress())\n+        reorg_block = reorg_blocks[1]\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        res_invalid = index_node.gettxoutsetinfo('muhash')\n+        index_node.invalidateblock(reorg_blocks[0])\n+        assert_equal(index_node.gettxoutsetinfo('muhash')['height'], 110)\n+\n+        # Add two new blocks\n+        block = index_node.generate(2)[1]\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        res = index_node.gettxoutsetinfo(hash_type='muhash', hash_or_height=None, use_index=False)\n+\n+        # Test that the result of the reorged block is not returned for its old block height\n+        res2 = index_node.gettxoutsetinfo(hash_type='muhash', hash_or_height=112)\n+        assert_equal(res[\"bestblock\"], block)\n+        assert_equal(res[\"muhash\"], res2[\"muhash\"])\n+        assert(res[\"muhash\"] != res_invalid[\"muhash\"])\n+\n+        # Test that requesting reorged out block by hash is still returning correct results\n+        res_invalid2 = index_node.gettxoutsetinfo(hash_type='muhash', hash_or_height=reorg_block)\n+        assert_equal(res_invalid2[\"muhash\"], res_invalid[\"muhash\"])\n+        assert(res[\"muhash\"] != res_invalid2[\"muhash\"])\n+\n+        # Add another block, so we don't depend on reconsiderblock remembering which\n+        # blocks were touched by invalidateblock\n+        index_node.generate(1)\n+\n+        # Ensure that removing and re-adding blocks yields consistent results\n+        block = index_node.getblockhash(99)\n+        index_node.invalidateblock(block)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        index_node.reconsiderblock(block)\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", index_node.gettxoutsetinfo, 'muhash'))\n+        res3 = index_node.gettxoutsetinfo(hash_type='muhash', hash_or_height=112)\n+        assert_equal(res2, res3)\n+\n+        self.log.info(\"Test that a node aware of stale blocks syncs them as well\")\n+        node = self.nodes[0]\n+        # Ensure the node is aware of a stale block prior to restart\n+        node.getblock(reorg_block)\n+\n+        self.restart_node(0, [\"-coinstatsindex\"])\n+        self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo, 'muhash'))\n+        assert_raises_rpc_error(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo, 'muhash', reorg_block)\n+\n \n if __name__ == '__main__':\n     CoinStatsIndexTest().main()"
      }
    ]
  },
  {
    "sha": "5f96d7d22d8e05876c6fc014e70488699950fe38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Zjk2ZDdkMjJkOGUwNTg3NmM2ZmMwMTRlNzA0ODg2OTk5NTBmZTM4",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-03-04T00:37:50Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-19T19:11:37Z"
      },
      "message": "rpc: gettxoutsetinfo rejects hash_serialized_2 for specific height",
      "tree": {
        "sha": "5fcdaa66b621d076b23c8224c822fad040cc188f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fcdaa66b621d076b23c8224c822fad040cc188f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f96d7d22d8e05876c6fc014e70488699950fe38",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmB91ekVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNnYEQAJCA1pnyNtHll2Q6YkFDfqcNfidg\nq7yli6ZhpDd59tizt0N5oV8KsTtmtqR99EHNdVU/Ac1qQVPsOegn+WTYnUhg4p5t\nx6a6Be+vcaP6grtmU6UyOjzr0ys3f33rp+8FND+YOeOiXCNDiWNb4Byocdx36j9W\nM9ciLQwFvTXS3MAGszV6azMrByNC0RkmXSD5DSWeEcCq1oFE8K/bR+2BGIp/Rgqz\nPJ1KFVEwv/aPlNgPNge9aJWhta87oCTeqYa99emyjIEPJEm+VlZICG+oXFjFCRxD\nTFaymw29quXvYfxA4aANaXUMfY1RU903lFe9aXKbk7BTP0sMGaTm7qGB4qw9WAWf\nWpQByF5MtpiZbc3m27fWJIrUdijd7U19IzxBXPwkkpZHPmpXi0KwW3qeNxn2c/0T\nApGotX/yS19oa/sygIcDbufrpNbkZ10YJLxUR8DVDdd+5lJfxS1Fw7avvvAujw1w\nGXW/ZnCSnHARqRsKfx3obJa+e6vnZJI4meMuDY7m9qNiNyVH1tNeIBr6zZq2IqCd\ndM6I/EhvBb/pRMiSIZPnGeOMW5roqB5iU8QXV5JO53MYi7/9svf9fpz6SnS8EEGI\nXNiAI1YhHI1yBnqK7sgSyRRa1hIQohTtPuqTnIs6Li7RVchzbDHkYrcR5pesDPRR\nHlbOlrkpedhELglD\n=/DU9\n-----END PGP SIGNATURE-----",
        "payload": "tree 5fcdaa66b621d076b23c8224c822fad040cc188f\nparent 23fe50436be641d7417152adc683192649ba206a\nauthor Fabian Jahr <fjahr@protonmail.com> 1614818270 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1618859497 +0200\n\nrpc: gettxoutsetinfo rejects hash_serialized_2 for specific height\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f96d7d22d8e05876c6fc014e70488699950fe38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f96d7d22d8e05876c6fc014e70488699950fe38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f96d7d22d8e05876c6fc014e70488699950fe38/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23fe50436be641d7417152adc683192649ba206a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23fe50436be641d7417152adc683192649ba206a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23fe50436be641d7417152adc683192649ba206a"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "438b6ce6e60daf9c34957fe108d7d7a9d45e7fcf",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f96d7d22d8e05876c6fc014e70488699950fe38/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f96d7d22d8e05876c6fc014e70488699950fe38/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5f96d7d22d8e05876c6fc014e70488699950fe38",
        "patch": "@@ -1168,6 +1168,10 @@ static RPCHelpMan gettxoutsetinfo()\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Querying specific block heights requires coinstatsindex\");\n         }\n \n+        if (stats.m_hash_type == CoinStatsHashType::HASH_SERIALIZED) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"hash_serialized_2 hash type cannot be queried for a specific block\");\n+        }\n+\n         pindex = ParseHashOrHeight(request.params[1], chainman);\n     }\n "
      },
      {
        "sha": "d3adde5cc5a9fe86eb9b99f1bd2703230a086832",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f96d7d22d8e05876c6fc014e70488699950fe38/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f96d7d22d8e05876c6fc014e70488699950fe38/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=5f96d7d22d8e05876c6fc014e70488699950fe38",
        "patch": "@@ -52,6 +52,7 @@ def run_test(self):\n         self._test_coin_stats_index()\n         self._test_use_index_option()\n         self._test_reorg_index()\n+        self._test_index_rejects_hash_serialized()\n \n     def block_sanity_check(self, block_info):\n         block_subsidy = 50\n@@ -298,6 +299,15 @@ def _test_reorg_index(self):\n         self.wait_until(lambda: not try_rpc(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo, 'muhash'))\n         assert_raises_rpc_error(-32603, \"Unable to read UTXO set\", node.gettxoutsetinfo, 'muhash', reorg_block)\n \n+    def _test_index_rejects_hash_serialized(self):\n+        self.log.info(\"Test that the rpc raises if the legacy hash is passed with the index\")\n+\n+        msg = \"hash_serialized_2 hash type cannot be queried for a specific block\"\n+        assert_raises_rpc_error(-8, msg, self.nodes[1].gettxoutsetinfo, hash_type='hash_serialized_2', hash_or_height=111)\n+\n+        for use_index in {True, False, None}:\n+            assert_raises_rpc_error(-8, msg, self.nodes[1].gettxoutsetinfo, hash_type='hash_serialized_2', hash_or_height=111, use_index=use_index)\n+\n \n if __name__ == '__main__':\n     CoinStatsIndexTest().main()"
      }
    ]
  }
]