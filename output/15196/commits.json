[
  {
    "sha": "fdf82ba1813cf12e2794bbe20f7d002eaf4279fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGY4MmJhMTgxM2NmMTJlMjc5NGJiZTIwZjdkMDAyZWFmNDI3OWZj",
    "commit": {
      "author": {
        "name": "Graham Krizek",
        "email": "graham@krizek.io",
        "date": "2019-01-18T15:36:39Z"
      },
      "committer": {
        "name": "Graham Krizek",
        "email": "graham@krizek.io",
        "date": "2019-01-18T15:36:39Z"
      },
      "message": "Update all subprocess.check_output functions in CI scripts to be Python 3.4 compatible\n\nRemoving the 'universal_newlines' and 'encoding' args from the subprocess.check_outputs fuction. 'universal_newlines' is supported in 3.4, but 'encoding' is not. Without specifying 'encoding' it will make a guess at encoding, which can break things on BSD systems. We must handle encoding/decoding ourselves until we can use Python 3.6",
      "tree": {
        "sha": "f9adec0c2023d05c2aef6e56790ffc4ecf3acb45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9adec0c2023d05c2aef6e56790ffc4ecf3acb45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZcz+KdGQ4SVNNDc7zmBXnMGFvFYFAlxB8ocACgkQzmBXnMGF\nvFZ7thAArbekKmLMXClXvFmMCZ0V51t/2lwBQ99GNCpWAGunMf8mr826EC0yqIKp\nE2bewYloqmb/LvEPRnDlgjDDqoRLkgR6lH/fEf9kFCg5r91xLuiLpvjX9ageVkS2\nhL3DidSq7AJ2rZbr1F4sj+wHGhwJnkoFTojRvlY3PG5CFh5LUAsYmOYcRmq5EUSu\nIUeZ32yXtDzbnHfNE6pWP7/qVWpiaE+4yQ3xMvb2A1GC74BnQ/XuyCGNkRbnjNRW\nOgZA0zuN5dhXwvm/nJ6R9ZpWcXwsicLV3Clgna+NISsblhtatf+2ZhPwkZ4C3eBb\nZfstmx6TSGJdlEzzK792sfpQcyx0MwEVB0b1VxpzFku0ouWTYTjKikI1h8MHT21v\nsIZuCC/GmKyLu148gipNUf5EXi0UtLa3mS59R9RSLKAO37cPcUmIguGmEsBwUk9V\nCuxVa1aN0nCArdFKjFyye+KOQzxcyaJFhLFDjSuPMTvf2Pv/R1T2NmTHdONbBmJp\ng4oa13vlJPCIzh5ZU80ty2jBcEQ90k4x8alT3jUnIcPD10cuCKgsNhWTUVh2qsYn\nS1kEBBZ6rAd2xlOCIdghCMxvGn5eecGcvL1kICN6kEBmhaCtzvGyigGU2LlkZW0r\nGPEYC+skGKuW8V9oF2vDZ9uxwU36Ri6cK160fpKsAGFUvXe6Bvg=\n=TUIP\n-----END PGP SIGNATURE-----",
        "payload": "tree f9adec0c2023d05c2aef6e56790ffc4ecf3acb45\nparent fcb6694a9945d2a02f40587e18bd395ef64048e0\nauthor Graham Krizek <graham@krizek.io> 1547825799 -0600\ncommitter Graham Krizek <graham@krizek.io> 1547825799 -0600\n\nUpdate all subprocess.check_output functions in CI scripts to be Python 3.4 compatible\n\nRemoving the 'universal_newlines' and 'encoding' args from the subprocess.check_outputs fuction. 'universal_newlines' is supported in 3.4, but 'encoding' is not. Without specifying 'encoding' it will make a guess at encoding, which can break things on BSD systems. We must handle encoding/decoding ourselves until we can use Python 3.6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc/comments",
    "author": {
      "login": "gkrizek",
      "id": 8949695,
      "node_id": "MDQ6VXNlcjg5NDk2OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8949695?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gkrizek",
      "html_url": "https://github.com/gkrizek",
      "followers_url": "https://api.github.com/users/gkrizek/followers",
      "following_url": "https://api.github.com/users/gkrizek/following{/other_user}",
      "gists_url": "https://api.github.com/users/gkrizek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gkrizek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gkrizek/subscriptions",
      "organizations_url": "https://api.github.com/users/gkrizek/orgs",
      "repos_url": "https://api.github.com/users/gkrizek/repos",
      "events_url": "https://api.github.com/users/gkrizek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gkrizek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gkrizek",
      "id": 8949695,
      "node_id": "MDQ6VXNlcjg5NDk2OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8949695?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gkrizek",
      "html_url": "https://github.com/gkrizek",
      "followers_url": "https://api.github.com/users/gkrizek/followers",
      "following_url": "https://api.github.com/users/gkrizek/following{/other_user}",
      "gists_url": "https://api.github.com/users/gkrizek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gkrizek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gkrizek/subscriptions",
      "organizations_url": "https://api.github.com/users/gkrizek/orgs",
      "repos_url": "https://api.github.com/users/gkrizek/repos",
      "events_url": "https://api.github.com/users/gkrizek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gkrizek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcb6694a9945d2a02f40587e18bd395ef64048e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcb6694a9945d2a02f40587e18bd395ef64048e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcb6694a9945d2a02f40587e18bd395ef64048e0"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6bbed010738c2da7fbd83a8492418c3f240b08bb",
        "filename": "contrib/verify-commits/verify-commits.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc/contrib/verify-commits/verify-commits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc/contrib/verify-commits/verify-commits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.py?ref=fdf82ba1813cf12e2794bbe20f7d002eaf4279fc",
        "patch": "@@ -91,7 +91,7 @@ def main():\n     no_sha1 = True\n     prev_commit = \"\"\n     initial_commit = current_commit\n-    branch = subprocess.check_output([GIT, 'show', '-s', '--format=%H', initial_commit], universal_newlines=True, encoding='utf8').splitlines()[0]\n+    branch = subprocess.check_output([GIT, 'show', '-s', '--format=%H', initial_commit]).decode('utf8').splitlines()[0]\n \n     # Iterate through commits\n     while True:\n@@ -112,7 +112,7 @@ def main():\n             if prev_commit != \"\":\n                 print(\"No parent of {} was signed with a trusted key!\".format(prev_commit), file=sys.stderr)\n                 print(\"Parents are:\", file=sys.stderr)\n-                parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', prev_commit], universal_newlines=True, encoding='utf8').splitlines()[0].split(' ')\n+                parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', prev_commit]).decode('utf8').splitlines()[0].split(' ')\n                 for parent in parents:\n                     subprocess.call([GIT, 'show', '-s', parent], stdout=sys.stderr)\n             else:\n@@ -122,25 +122,25 @@ def main():\n         # Check the Tree-SHA512\n         if (verify_tree or prev_commit == \"\") and current_commit not in incorrect_sha512_allowed:\n             tree_hash = tree_sha512sum(current_commit)\n-            if (\"Tree-SHA512: {}\".format(tree_hash)) not in subprocess.check_output([GIT, 'show', '-s', '--format=format:%B', current_commit], universal_newlines=True, encoding='utf8').splitlines():\n+            if (\"Tree-SHA512: {}\".format(tree_hash)) not in subprocess.check_output([GIT, 'show', '-s', '--format=format:%B', current_commit]).decode('utf8').splitlines():\n                 print(\"Tree-SHA512 did not match for commit \" + current_commit, file=sys.stderr)\n                 sys.exit(1)\n \n         # Merge commits should only have two parents\n-        parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0].split(' ')\n+        parents = subprocess.check_output([GIT, 'show', '-s', '--format=format:%P', current_commit]).decode('utf8').splitlines()[0].split(' ')\n         if len(parents) > 2:\n             print(\"Commit {} is an octopus merge\".format(current_commit), file=sys.stderr)\n             sys.exit(1)\n \n         # Check that the merge commit is clean\n-        commit_time = int(subprocess.check_output([GIT, 'show', '-s', '--format=format:%ct', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0])\n+        commit_time = int(subprocess.check_output([GIT, 'show', '-s', '--format=format:%ct', current_commit]).decode('utf8').splitlines()[0])\n         check_merge = commit_time > time.time() - args.clean_merge * 24 * 60 * 60  # Only check commits in clean_merge days\n         allow_unclean = current_commit in unclean_merge_allowed\n         if len(parents) == 2 and check_merge and not allow_unclean:\n-            current_tree = subprocess.check_output([GIT, 'show', '--format=%T', current_commit], universal_newlines=True, encoding='utf8').splitlines()[0]\n+            current_tree = subprocess.check_output([GIT, 'show', '--format=%T', current_commit]).decode('utf8').splitlines()[0]\n             subprocess.call([GIT, 'checkout', '--force', '--quiet', parents[0]])\n             subprocess.call([GIT, 'merge', '--no-ff', '--quiet', '--no-gpg-sign', parents[1]], stdout=subprocess.DEVNULL)\n-            recreated_tree = subprocess.check_output([GIT, 'show', '--format=format:%T', 'HEAD'], universal_newlines=True, encoding='utf8').splitlines()[0]\n+            recreated_tree = subprocess.check_output([GIT, 'show', '--format=format:%T', 'HEAD']).decode('utf8').splitlines()[0]\n             if current_tree != recreated_tree:\n                 print(\"Merge commit {} is not clean\".format(current_commit), file=sys.stderr)\n                 subprocess.call([GIT, 'diff', current_commit])"
      },
      {
        "sha": "c370ce0c04addb111b7b13af32c9b1f33d2b2075",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf82ba1813cf12e2794bbe20f7d002eaf4279fc/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=fdf82ba1813cf12e2794bbe20f7d002eaf4279fc",
        "patch": "@@ -30,8 +30,8 @@ def main():\n         used = check_output(CMD_GREP_ARGS, shell=True, universal_newlines=True, encoding='utf8')\n         docd = check_output(CMD_GREP_DOCS, shell=True, universal_newlines=True, encoding='utf8')\n     else:\n-        used = check_output(CMD_GREP_ARGS, shell=True, universal_newlines=True) # encoding='utf8'\n-        docd = check_output(CMD_GREP_DOCS, shell=True, universal_newlines=True) # encoding='utf8'\n+        used = check_output(CMD_GREP_ARGS, shell=True).decode('utf8').strip()\n+        docd = check_output(CMD_GREP_DOCS, shell=True).decode('utf8').strip()\n \n     args_used = set(re.findall(re.compile(REGEX_ARG), used))\n     args_docd = set(re.findall(re.compile(REGEX_DOC), docd)).union(SET_DOC_OPTIONAL)"
      }
    ]
  }
]