[
  {
    "sha": "60ee12be43ac79772ae5660e2cfb0f9da5933a80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGVlMTJiZTQzYWM3OTc3MmFlNTY2MGUyY2ZiMGY5ZGE1OTMzYTgw",
    "commit": {
      "author": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2018-08-22T06:00:45Z"
      },
      "committer": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-02-16T11:02:34Z"
      },
      "message": "docs: improve linux tar packages\n\n    - README.md main file placed inside share/doc/bitcoin lsb directory\n    - Updated README.md to include link to repo, files list and description\n    - Added example bitcoin.conf, init files for daemon, RPCAuth Tool\n\n    This fixes #8160 (partially), fixes #8161, see also PR #11971 and #14022",
      "tree": {
        "sha": "1a99c62fdbfef76faa9843273a8989ec73dc04cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a99c62fdbfef76faa9843273a8989ec73dc04cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60ee12be43ac79772ae5660e2cfb0f9da5933a80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ee12be43ac79772ae5660e2cfb0f9da5933a80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60ee12be43ac79772ae5660e2cfb0f9da5933a80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ee12be43ac79772ae5660e2cfb0f9da5933a80/comments",
    "author": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/743c2f461c0e7c58b1e5c6ddfeaf4f0ff6e6ca85"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 24,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ae132aacc74248cde0ad1ecaa34fc3c353fe7ef0",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ee12be43ac79772ae5660e2cfb0f9da5933a80/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ee12be43ac79772ae5660e2cfb0f9da5933a80/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=60ee12be43ac79772ae5660e2cfb0f9da5933a80",
        "patch": "@@ -181,9 +181,15 @@ script: |\n     rm -rf ${DISTNAME}/lib/pkgconfig\n     find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n     find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n-    cp ../doc/README.md ${DISTNAME}/\n     find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n+    DOCDISTNAME=\"${DISTNAME}/share/doc/bitcoin\"\n+    mkdir -p ${DOCDISTNAME}/init\n+    cp ../doc/README.md ${DOCDISTNAME}\n+    cp -r ../share/examples ${DOCDISTNAME}\n+    cp -r ../share/rpcauth ${DOCDISTNAME}\n+    cp ../contrib/init/bitcoind.* ${DOCDISTNAME}/init/\n+    cp ../contrib/init/README.md ${DOCDISTNAME}/init/\n     cd ../../\n     rm -rf distsrc-${i}\n   done"
      },
      {
        "sha": "051d8e5b5694bcee6ac87ec8b406740fd92ed65f",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ee12be43ac79772ae5660e2cfb0f9da5933a80/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ee12be43ac79772ae5660e2cfb0f9da5933a80/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=60ee12be43ac79772ae5660e2cfb0f9da5933a80",
        "patch": "@@ -7,6 +7,8 @@ Bitcoin Core is the original Bitcoin client and it builds the backbone of the ne\n \n To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/download/).\n \n+The main source code repository is [hosted on GitHub](https://github.com/bitcoin/bitcoin/).\n+\n Running\n ---------------------\n The following are some helpful notes on how to run Bitcoin Core on your native platform.\n@@ -20,12 +22,26 @@ Unpack the files into a directory and run:\n \n ### Windows\n \n-Unpack the files into a directory, and then run bitcoin-qt.exe.\n+Unpack the files into a directory, and then run:\n+\n+- `bitcoin-qt.exe`\n \n ### macOS\n \n Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n+### Files\n+\n+* `./bin/bitcoin-cli` (Command Line Interface)\n+* `./bin/bitcoind` (headless daemon)\n+* `./bin/bitcoin-qt` (GUI)\n+* `./bin/bitcoin-tx` (hex-encoded transaction tool)\n+* `./bin/test_bitcoin` (runs the unit tests)\n+* `./include/bitcoinconsensus.h` (lib header)\n+* `./lib/libbitcoinconsensus.so.0.0.0` (shared lib)\n+* `./share/man/man1/` (man pages)\n+* `./share/doc/` (documentation)\n+\n ### Need Help?\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)"
      }
    ]
  },
  {
    "sha": "df31e2c59358188bfb03545c6d6a7426985cd065",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjMxZTJjNTkzNTgxODhiZmIwMzU0NWM2ZDZhNzQyNjk4NWNkMDY1",
    "commit": {
      "author": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2018-10-02T21:47:59Z"
      },
      "committer": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-02-16T11:02:34Z"
      },
      "message": "doc/README.md included in make install logic",
      "tree": {
        "sha": "9f621245d288c5672896b5337dc66c60224530a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f621245d288c5672896b5337dc66c60224530a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df31e2c59358188bfb03545c6d6a7426985cd065",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df31e2c59358188bfb03545c6d6a7426985cd065",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df31e2c59358188bfb03545c6d6a7426985cd065",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df31e2c59358188bfb03545c6d6a7426985cd065/comments",
    "author": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60ee12be43ac79772ae5660e2cfb0f9da5933a80",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ee12be43ac79772ae5660e2cfb0f9da5933a80",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60ee12be43ac79772ae5660e2cfb0f9da5933a80"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f60f063cb60012f76793eb98e093dc6e269ec058",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df31e2c59358188bfb03545c6d6a7426985cd065/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df31e2c59358188bfb03545c6d6a7426985cd065/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=df31e2c59358188bfb03545c6d6a7426985cd065",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n ACLOCAL_AMFLAGS = -I build-aux/m4\n-SUBDIRS = src\n+SUBDIRS = src doc\n if ENABLE_MAN\n SUBDIRS += doc/man\n endif"
      },
      {
        "sha": "b2b5a02be123fe934afa5169a7ff84f688d10e56",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df31e2c59358188bfb03545c6d6a7426985cd065/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df31e2c59358188bfb03545c6d6a7426985cd065/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=df31e2c59358188bfb03545c6d6a7426985cd065",
        "patch": "@@ -1484,7 +1484,7 @@ AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n-AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n+AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile doc/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])"
      },
      {
        "sha": "9ec38015a00c7f3051ff9a20b67db3346143c856",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df31e2c59358188bfb03545c6d6a7426985cd065/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df31e2c59358188bfb03545c6d6a7426985cd065/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=df31e2c59358188bfb03545c6d6a7426985cd065",
        "patch": "@@ -185,7 +185,6 @@ script: |\n     find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n     DOCDISTNAME=\"${DISTNAME}/share/doc/bitcoin\"\n     mkdir -p ${DOCDISTNAME}/init\n-    cp ../doc/README.md ${DOCDISTNAME}\n     cp -r ../share/examples ${DOCDISTNAME}\n     cp -r ../share/rpcauth ${DOCDISTNAME}\n     cp ../contrib/init/bitcoind.* ${DOCDISTNAME}/init/"
      },
      {
        "sha": "e446494702cd2d80ff503ce4c7d3e220c0e719c1",
        "filename": "doc/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df31e2c59358188bfb03545c6d6a7426985cd065/doc/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df31e2c59358188bfb03545c6d6a7426985cd065/doc/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Makefile.am?ref=df31e2c59358188bfb03545c6d6a7426985cd065",
        "patch": "@@ -0,0 +1,2 @@\n+docdir = $(datadir)/doc/@PACKAGE@\n+dist_doc_DATA = README.md"
      }
    ]
  },
  {
    "sha": "2ed503b83f200850606f1c3c17d9c380aae5f244",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWQ1MDNiODNmMjAwODUwNjA2ZjFjM2MxN2Q5YzM4MGFhZTVmMjQ0",
    "commit": {
      "author": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-02-16T16:03:05Z"
      },
      "committer": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-02-16T16:03:05Z"
      },
      "message": "Doc improved init files, examples conf, rpcauth\n\n    files included in the make install process under share/doc dir",
      "tree": {
        "sha": "31843144e7c91b11213b719f12d307ca06c23fc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31843144e7c91b11213b719f12d307ca06c23fc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ed503b83f200850606f1c3c17d9c380aae5f244",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed503b83f200850606f1c3c17d9c380aae5f244",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed503b83f200850606f1c3c17d9c380aae5f244",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed503b83f200850606f1c3c17d9c380aae5f244/comments",
    "author": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df31e2c59358188bfb03545c6d6a7426985cd065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df31e2c59358188bfb03545c6d6a7426985cd065",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df31e2c59358188bfb03545c6d6a7426985cd065"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3cce55d6579c41374d04294daa304bd40fdfd2de",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed503b83f200850606f1c3c17d9c380aae5f244/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed503b83f200850606f1c3c17d9c380aae5f244/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=2ed503b83f200850606f1c3c17d9c380aae5f244",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n ACLOCAL_AMFLAGS = -I build-aux/m4\n-SUBDIRS = src doc\n+SUBDIRS = src doc contrib/init share/examples share/rpcauth\n if ENABLE_MAN\n SUBDIRS += doc/man\n endif"
      },
      {
        "sha": "d97fd3013c7936169778a80f000be515e67c0208",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed503b83f200850606f1c3c17d9c380aae5f244/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed503b83f200850606f1c3c17d9c380aae5f244/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2ed503b83f200850606f1c3c17d9c380aae5f244",
        "patch": "@@ -1484,7 +1484,7 @@ AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n-AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile doc/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n+AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile doc/Makefile contrib/init/Makefile share/examples/Makefile share/rpcauth/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])"
      },
      {
        "sha": "1d62a3bca87699b9f9ab17bd20d74e34df2a5713",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed503b83f200850606f1c3c17d9c380aae5f244/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed503b83f200850606f1c3c17d9c380aae5f244/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=2ed503b83f200850606f1c3c17d9c380aae5f244",
        "patch": "@@ -183,12 +183,6 @@ script: |\n     find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n     find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n-    DOCDISTNAME=\"${DISTNAME}/share/doc/bitcoin\"\n-    mkdir -p ${DOCDISTNAME}/init\n-    cp -r ../share/examples ${DOCDISTNAME}\n-    cp -r ../share/rpcauth ${DOCDISTNAME}\n-    cp ../contrib/init/bitcoind.* ${DOCDISTNAME}/init/\n-    cp ../contrib/init/README.md ${DOCDISTNAME}/init/\n     cd ../../\n     rm -rf distsrc-${i}\n   done"
      },
      {
        "sha": "d37e8784120dad386a0140aac7e48b8fc6238e8f",
        "filename": "contrib/init/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed503b83f200850606f1c3c17d9c380aae5f244/contrib/init/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed503b83f200850606f1c3c17d9c380aae5f244/contrib/init/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/Makefile.am?ref=2ed503b83f200850606f1c3c17d9c380aae5f244",
        "patch": "@@ -0,0 +1,2 @@\n+docinitdir = $(datadir)/doc/@PACKAGE@/init\n+dist_docinit_DATA = README.md bitcoind.*"
      },
      {
        "sha": "d0fccec162ae6bd60898e403e4bc91a08cf5e7bf",
        "filename": "share/examples/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed503b83f200850606f1c3c17d9c380aae5f244/share/examples/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed503b83f200850606f1c3c17d9c380aae5f244/share/examples/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/Makefile.am?ref=2ed503b83f200850606f1c3c17d9c380aae5f244",
        "patch": "@@ -0,0 +1,2 @@\n+docexamplesdir = $(datadir)/doc/@PACKAGE@/examples\n+dist_docexamples_DATA = *"
      },
      {
        "sha": "fce1897f7cdb6efc6435822f4d2ebaa4abdd2eb2",
        "filename": "share/rpcauth/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed503b83f200850606f1c3c17d9c380aae5f244/share/rpcauth/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed503b83f200850606f1c3c17d9c380aae5f244/share/rpcauth/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/Makefile.am?ref=2ed503b83f200850606f1c3c17d9c380aae5f244",
        "patch": "@@ -0,0 +1,2 @@\n+docrpcauthdir = $(datadir)/doc/@PACKAGE@/rpcauth\n+dist_docrpcauth_DATA = README.md rpcauth.py"
      }
    ]
  },
  {
    "sha": "9a4e593a6071abea2704b3e9f2684cebd822bf00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTRlNTkzYTYwNzFhYmVhMjcwNGIzZTlmMjY4NGNlYmQ4MjJiZjAw",
    "commit": {
      "author": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-03-07T10:03:30Z"
      },
      "committer": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-03-07T10:23:50Z"
      },
      "message": "docs: binary tar improvement\n\nFix something missing from binary tar file:\n- Updated README.md to include link to repo, files list and description\n- Added example bitcoin.conf, init files for daemon, RPCAuth Tool\n- All files placed inside share/doc/bitcoin (lsb structure) using the general make install logic in the build system\n\nThis is a rebasing of PR #14167",
      "tree": {
        "sha": "d422523772d6c4f3d07e68ebbdec17c591d8c725",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d422523772d6c4f3d07e68ebbdec17c591d8c725"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a4e593a6071abea2704b3e9f2684cebd822bf00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a4e593a6071abea2704b3e9f2684cebd822bf00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a4e593a6071abea2704b3e9f2684cebd822bf00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a4e593a6071abea2704b3e9f2684cebd822bf00/comments",
    "author": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3515612e069e3730f173a08e60b99f96b174188d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3515612e069e3730f173a08e60b99f96b174188d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3515612e069e3730f173a08e60b99f96b174188d"
      },
      {
        "sha": "2ed503b83f200850606f1c3c17d9c380aae5f244",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed503b83f200850606f1c3c17d9c380aae5f244",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed503b83f200850606f1c3c17d9c380aae5f244"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 27,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3cce55d6579c41374d04294daa304bd40fdfd2de",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -3,7 +3,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n ACLOCAL_AMFLAGS = -I build-aux/m4\n-SUBDIRS = src\n+SUBDIRS = src doc contrib/init share/examples share/rpcauth\n if ENABLE_MAN\n SUBDIRS += doc/man\n endif"
      },
      {
        "sha": "17ab16323a3817821d907a258232463518a78458",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -1484,7 +1484,7 @@ AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n AC_SUBST(PROTOBUF_LIBS)\n AC_SUBST(QR_LIBS)\n-AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n+AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile doc/Makefile contrib/init/Makefile share/examples/Makefile share/rpcauth/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])"
      },
      {
        "sha": "4432278fa03e2f3bce88b14cfebd71b8eadea7b1",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -181,7 +181,6 @@ script: |\n     rm -rf ${DISTNAME}/lib/pkgconfig\n     find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n     find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n-    cp ../doc/README.md ${DISTNAME}/\n     find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n     cd ../../"
      },
      {
        "sha": "d37e8784120dad386a0140aac7e48b8fc6238e8f",
        "filename": "contrib/init/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/contrib/init/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/contrib/init/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/Makefile.am?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -0,0 +1,2 @@\n+docinitdir = $(datadir)/doc/@PACKAGE@/init\n+dist_docinit_DATA = README.md bitcoind.*"
      },
      {
        "sha": "e446494702cd2d80ff503ce4c7d3e220c0e719c1",
        "filename": "doc/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/doc/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/doc/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Makefile.am?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -0,0 +1,2 @@\n+docdir = $(datadir)/doc/@PACKAGE@\n+dist_doc_DATA = README.md"
      },
      {
        "sha": "402024f90700b3560156bb8889b7213397347e68",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -7,6 +7,8 @@ Bitcoin Core is the original Bitcoin client and it builds the backbone of the ne\n \n To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/download/).\n \n+The main source code repository is [hosted on GitHub](https://github.com/bitcoin/bitcoin/).\n+\n Running\n ---------------------\n The following are some helpful notes on how to run Bitcoin Core on your native platform.\n@@ -20,12 +22,26 @@ Unpack the files into a directory and run:\n \n ### Windows\n \n-Unpack the files into a directory, and then run bitcoin-qt.exe.\n+Unpack the files into a directory, and then run:\n+\n+- `bitcoin-qt.exe`\n \n ### macOS\n \n Drag Bitcoin Core to your applications folder, and then run Bitcoin Core.\n \n+### Files\n+\n+* `./bin/bitcoin-cli` (Command Line Interface)\n+* `./bin/bitcoind` (headless daemon)\n+* `./bin/bitcoin-qt` (GUI)\n+* `./bin/bitcoin-tx` (hex-encoded transaction tool)\n+* `./bin/test_bitcoin` (runs the unit tests)\n+* `./include/bitcoinconsensus.h` (lib header)\n+* `./lib/libbitcoinconsensus.so.0.0.0` (shared lib)\n+* `./share/man/man1/` (man pages)\n+* `./share/doc/` (documentation)\n+\n ### Need Help?\n \n * See the documentation at the [Bitcoin Wiki](https://en.bitcoin.it/wiki/Main_Page)"
      },
      {
        "sha": "d0fccec162ae6bd60898e403e4bc91a08cf5e7bf",
        "filename": "share/examples/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/share/examples/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/share/examples/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/examples/Makefile.am?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -0,0 +1,2 @@\n+docexamplesdir = $(datadir)/doc/@PACKAGE@/examples\n+dist_docexamples_DATA = *"
      },
      {
        "sha": "fce1897f7cdb6efc6435822f4d2ebaa4abdd2eb2",
        "filename": "share/rpcauth/Makefile.am",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a4e593a6071abea2704b3e9f2684cebd822bf00/share/rpcauth/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a4e593a6071abea2704b3e9f2684cebd822bf00/share/rpcauth/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcauth/Makefile.am?ref=9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "patch": "@@ -0,0 +1,2 @@\n+docrpcauthdir = $(datadir)/doc/@PACKAGE@/rpcauth\n+dist_docrpcauth_DATA = README.md rpcauth.py"
      }
    ]
  },
  {
    "sha": "5217e136d599eed0806e486b0d8b019de5b4abd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjE3ZTEzNmQ1OTllZWQwODA2ZTQ4NmIwZDhiMDE5ZGU1YjRhYmQw",
    "commit": {
      "author": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-03-07T11:19:18Z"
      },
      "committer": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-03-07T11:19:18Z"
      },
      "message": "fixed dot-asterisk improper use",
      "tree": {
        "sha": "4dcdf01d4b0a70832f7225ec595b9fb804d63a23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4dcdf01d4b0a70832f7225ec595b9fb804d63a23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5217e136d599eed0806e486b0d8b019de5b4abd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5217e136d599eed0806e486b0d8b019de5b4abd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5217e136d599eed0806e486b0d8b019de5b4abd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5217e136d599eed0806e486b0d8b019de5b4abd0/comments",
    "author": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a4e593a6071abea2704b3e9f2684cebd822bf00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a4e593a6071abea2704b3e9f2684cebd822bf00"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "536e0a23f6b8cb63d0daadb48b555bc02766c49c",
        "filename": "contrib/init/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/contrib/init/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/contrib/init/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/Makefile.am?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,2 +1,2 @@\n docinitdir = $(datadir)/doc/@PACKAGE@/init\n-dist_docinit_DATA = README.md bitcoind.*\n+dist_docinit_DATA = README.md bitcoind.conf bitcoind.init bitcoind.openrc bitcoind.openrcconf bitcoind.service"
      }
    ]
  },
  {
    "sha": "1625724185f4efcc0f2f258224d4262b74527935",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjI1NzI0MTg1ZjRlZmNjMGYyZjI1ODIyNGQ0MjYyYjc0NTI3OTM1",
    "commit": {
      "author": {
        "name": "Emanuele Cisbani",
        "email": "emanuele.cisbani@gmail.com",
        "date": "2019-03-09T13:55:34Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2019-03-09T13:55:34Z"
      },
      "message": "Merge branch 'master' into improve-tar",
      "tree": {
        "sha": "38140ab0886f4eacc6146b1b395fa1759d9a00b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38140ab0886f4eacc6146b1b395fa1759d9a00b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1625724185f4efcc0f2f258224d4262b74527935",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcg8XWCRBK7hj4Ov3rIwAAdHIIAFxlle9Akvz2prUwbfkOj/z8\nU01YfzpOK1KjkOsiIQCz9M3XwYZ0qV6MqHTf+qnDjSfTb2+2tcMiBYlrbLAu1tXW\nM5ltQmEcXi0F23KUJx6Sn0W9eJ2mgmLcw7wrXFvSXRWvflRNfkLqkjTrWNcpWnFe\nqgDOe86oVC5B+BqoL1s6ei1Ka/f6h8YUOxN0jdoeYcUB1ukqKX6RipVKwauvJHFs\nUi5LmLGxkTkp5uzjsL02dMi2e7D1cuNzhT0aMbO2Mqk4RJbtasNFCCCOiNYCSEnL\nXrXaXtvqzyb1c+RxNWYH3UVKupq/gCoJG6qQ35F5PuYtgXdkSai9LRCKj4xBn9Y=\n=Doc5\n-----END PGP SIGNATURE-----\n",
        "payload": "tree 38140ab0886f4eacc6146b1b395fa1759d9a00b3\nparent 5217e136d599eed0806e486b0d8b019de5b4abd0\nparent 257f750cd986641afe04316ed0b22b646b56b60b\nauthor Emanuele Cisbani <emanuele.cisbani@gmail.com> 1552139734 +0100\ncommitter GitHub <noreply@github.com> 1552139734 +0100\n\nMerge branch 'master' into improve-tar"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1625724185f4efcc0f2f258224d4262b74527935",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1625724185f4efcc0f2f258224d4262b74527935",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1625724185f4efcc0f2f258224d4262b74527935/comments",
    "author": {
      "login": "cisba",
      "id": 2389559,
      "node_id": "MDQ6VXNlcjIzODk1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2389559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cisba",
      "html_url": "https://github.com/cisba",
      "followers_url": "https://api.github.com/users/cisba/followers",
      "following_url": "https://api.github.com/users/cisba/following{/other_user}",
      "gists_url": "https://api.github.com/users/cisba/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cisba/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cisba/subscriptions",
      "organizations_url": "https://api.github.com/users/cisba/orgs",
      "repos_url": "https://api.github.com/users/cisba/repos",
      "events_url": "https://api.github.com/users/cisba/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cisba/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5217e136d599eed0806e486b0d8b019de5b4abd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5217e136d599eed0806e486b0d8b019de5b4abd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5217e136d599eed0806e486b0d8b019de5b4abd0"
      },
      {
        "sha": "257f750cd986641afe04316ed0b22b646b56b60b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/257f750cd986641afe04316ed0b22b646b56b60b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/257f750cd986641afe04316ed0b22b646b56b60b"
      }
    ],
    "stats": {
      "total": 574,
      "additions": 309,
      "deletions": 265
    },
    "files": [
      {
        "sha": "92b72b1446cf6bacf92723b6a8da8786c0802557",
        "filename": "contrib/devtools/split-debug.sh.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/contrib/devtools/split-debug.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/contrib/devtools/split-debug.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/split-debug.sh.in?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -1,5 +1,5 @@\n #!/bin/sh\n-\n+set -e\n if [ $# -ne 3 ];\n     then echo \"usage: $0 <input> <stripped-binary> <debug-binary>\"\n fi"
      },
      {
        "sha": "764e9ede5cca8b283172881ece172b141cc5467a",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-linux-0.18\"\n+name: \"bitcoin-core-linux-0.19\"\n enable_cache: true\n suites:\n - \"bionic\"\n@@ -36,6 +36,7 @@ remotes:\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n+  set -e -o pipefail\n \n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\"\n@@ -179,8 +180,8 @@ script: |\n     find . -name \"lib*.la\" -delete\n     find . -name \"lib*.a\" -delete\n     rm -rf ${DISTNAME}/lib/pkgconfig\n-    find ${DISTNAME}/bin -type f -executable -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n-    find ${DISTNAME}/lib -type f -exec ../contrib/devtools/split-debug.sh {} {} {}.dbg \\;\n+    find ${DISTNAME}/bin -type f -executable -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n+    find ${DISTNAME}/lib -type f -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n     find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n     find ${DISTNAME} -name \"*.dbg\" | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n     cd ../../"
      },
      {
        "sha": "df6cddbf03dcf3c6c0f9a48edc23f54c812b6cd1",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -12,6 +12,8 @@ remotes:\n files:\n - \"bitcoin-osx-unsigned.tar.gz\"\n script: |\n+  set -e -o pipefail\n+\n   WRAP_DIR=$HOME/wrapped\n   mkdir -p ${WRAP_DIR}\n   export PATH=`pwd`:$PATH"
      },
      {
        "sha": "2d18d0a3594e133c3a1bc72ed8844190259028fb",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-osx-0.18\"\n+name: \"bitcoin-core-osx-0.19\"\n enable_cache: true\n suites:\n - \"bionic\"\n@@ -33,6 +33,8 @@ remotes:\n files:\n - \"MacOSX10.11.sdk.tar.gz\"\n script: |\n+  set -e -o pipefail\n+\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin14\"\n   CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests GENISOIMAGE=$WRAP_DIR/genisoimage\""
      },
      {
        "sha": "08d20177a69298023aa183e2364d2eb652f701b3",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -16,6 +16,8 @@ files:\n - \"osslsigncode-Backports-to-1.7.1.patch\"\n - \"bitcoin-win-unsigned.tar.gz\"\n script: |\n+  set -e -o pipefail\n+\n   BUILD_DIR=`pwd`\n   SIGDIR=${BUILD_DIR}/signature/win\n   UNSIGNED_DIR=${BUILD_DIR}/unsigned"
      },
      {
        "sha": "b80592903551f316356574d46ad20bb4d900ac26",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -1,5 +1,5 @@\n ---\n-name: \"bitcoin-win-0.18\"\n+name: \"bitcoin-core-win-0.19\"\n enable_cache: true\n suites:\n - \"bionic\"\n@@ -27,6 +27,8 @@ remotes:\n   \"dir\": \"bitcoin\"\n files: []\n script: |\n+  set -e -o pipefail\n+\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-w64-mingw32 x86_64-w64-mingw32\"\n   CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\""
      },
      {
        "sha": "036c585b4453a51fa68455775ddd766d4df89b72",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -71,6 +71,11 @@ If you want to build the windows installer with `make deploy` you need [NSIS](ht\n \n     sudo apt install nsis\n \n+Acquire the source in the usual way:\n+\n+    git clone https://github.com/bitcoin/bitcoin.git\n+    cd bitcoin\n+\n ## Building for 64-bit Windows\n \n The first step is to install the mingw-w64 cross-compilation tool chain:\n@@ -87,11 +92,7 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that is located directly on the host Windows file system to perform the build.\n \n-Acquire the source in the usual way:\n-\n-    git clone https://github.com/bitcoin/bitcoin.git\n-\n-Once the source code is ready the build steps are below:\n+Build using:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n@@ -115,11 +116,7 @@ Note that for WSL the Bitcoin Core source path MUST be somewhere in the default\n example /usr/src/bitcoin, AND not under /mnt/d/. If this is not the case the dependency autoconf scripts will fail.\n This means you cannot use a directory that located directly on the host Windows file system to perform the build.\n \n-Acquire the source in the usual way:\n-\n-    git clone https://github.com/bitcoin/bitcoin.git\n-\n-Then build using:\n+Build using:\n \n     PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends"
      },
      {
        "sha": "4797a95bdb8cd9cda7f853ce405980ce359f9720",
        "filename": "doc/release-notes-14021.md",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14021.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14021.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14021.md?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,11 +0,0 @@\n-Miscellaneous RPC Changes\n--------------------------\n-- Descriptors with key origin information imported through `importmulti` will have their key origin information stored in the wallet for use with creating PSBTs.\n-- If `bip32derivs` of both `walletprocesspsbt` and `walletcreatefundedpsbt` is set to true but the key metadata for a public key has not been updated yet, then that key will have a derivation path as if it were just an independent key (i.e. no derivation path and its master fingerprint is itself)\n-\n-Miscellaneous Wallet changes\n-----------------------------\n-\n-- The key metadata will need to be upgraded the first time that the HD seed is available.\n-For unencrypted wallets this will occur on wallet loading.\n-For encrypted wallets this will occur the first time the wallet is unlocked."
      },
      {
        "sha": "ea8fc3c34ed2a979d8f1a7feeef6fa6136473132",
        "filename": "doc/release-notes-14481.md",
        "status": "removed",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14481.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14481.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14481.md?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,9 +0,0 @@\n-Low-level RPC changes\n-----------------------\n-\n-The `listunspent` RPC has been modified so that it also returns `witnessScript`,\n-the witness script in the case of a P2WSH or P2SH-P2WSH output.\n-\n-The `signrawtransactionwithkey` and `signrawtransactionwithwallet` RPCs have been\n-modified so that they also optionally accept a `witnessScript`, the witness script in the\n-case of a P2WSH or P2SH-P2WSH output. This is compatible with the change to `listunspent`."
      },
      {
        "sha": "1cf36e85cffcc2dc88e51964ca0a2a8f565a2ed2",
        "filename": "doc/release-notes-14491.md",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14491.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14491.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14491.md?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,5 +0,0 @@\n-Descriptor import support\n----------------------\n-\n-The `importmulti` RPC now supports importing of addresses from descriptors. A \"desc\" parameter can be provided instead of the \"scriptPubKey\" in a request, as well as an optional range for ranged descriptors to specify the start and end of the range to import. More information about\n-descriptors can be found [here](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md)."
      },
      {
        "sha": "5cb1d0aee77ce9678850b37252ee191329fb500f",
        "filename": "doc/release-notes-14667.md",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14667.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-14667.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14667.md?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,4 +0,0 @@\n-New RPC methods\n-------------\n-\n-- `deriveaddresses` returns one or more addresses corresponding to an [output descriptor](/doc/descriptors.md)."
      },
      {
        "sha": "3be84db3e9b88cf82ab9c30805d0c1a4b2c8ffd6",
        "filename": "doc/release-notes-15226.md",
        "status": "removed",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-15226.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-15226.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15226.md?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,8 +0,0 @@\n-Miscellaneous RPC changes\n-------------\n-\n-- The RPC `createwallet` now has an optional `blank` argument that can be used to create a blank wallet.\n-Blank wallets do not have any keys or HD seed.\n-They cannot be opened in software older than 0.18.\n-Once a blank wallet has a HD seed set (by using `sethdseed`) or private keys, scripts, addresses, and other watch only things have been imported, the wallet is no longer blank and can be opened in 0.17.x.\n-Encrypting a blank wallet will also set a HD seed for it."
      },
      {
        "sha": "f478dc798d1592599e71899d2240e9be67b91a61",
        "filename": "doc/release-notes-15393.md",
        "status": "removed",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-15393.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-15393.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15393.md?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,4 +0,0 @@\n-Dependencies\n-------------\n-\n-- The minimum required version of QT has been increased from 5.2 to 5.5.1 (the [depends system](https://github.com/bitcoin/bitcoin/blob/master/depends/README.md) provides 5.9.7)"
      },
      {
        "sha": "1149eb0dbcc76c11f2aa0da1a7c9a3365fcfb5a3",
        "filename": "doc/release-notes-15492.md",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-15492.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5217e136d599eed0806e486b0d8b019de5b4abd0/doc/release-notes-15492.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15492.md?ref=5217e136d599eed0806e486b0d8b019de5b4abd0",
        "patch": "@@ -1,11 +0,0 @@\n-Deprecated or removed RPCs\n---------------------------\n-- The wallet's `generate` RPC method was deprecated in v0.18 and has now\n-  been fully removed.  This RPC is only used for\n-  testing, but its implementation reached across multiple subsystems\n-  (wallet and mining), so it has been removed to simplify the\n-  wallet-node interface.  Projects that are using `generate` for testing\n-  purposes should transition to using the `generatetoaddress` RPC, which\n-  does not require or use the wallet component. Calling\n-  `generatetoaddress` with an address returned by the `getnewaddress`\n-  RPC gives the same functionality as the old `generate` RPC."
      },
      {
        "sha": "8a5f78d1c5161b3835038bf63c085464875371a9",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -239,7 +239,9 @@ void CAddrMan::Good_(const CService& addr, bool test_before_evict, int64_t nTime\n \n     // Will moving this address into tried evict another entry?\n     if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n-        LogPrint(BCLog::ADDRMAN, \"Collision inserting element into tried table, moving %s to m_tried_collisions=%d\\n\", addr.ToString(), m_tried_collisions.size());\n+        // Output the entry we'd be colliding with, for debugging purposes\n+        auto colliding_entry = mapInfo.find(vvTried[tried_bucket][tried_bucket_pos]);\n+        LogPrint(BCLog::ADDRMAN, \"Collision inserting element into tried table (%s), moving %s to m_tried_collisions=%d\\n\", colliding_entry != mapInfo.end() ? colliding_entry->second.ToString() : \"\", addr.ToString(), m_tried_collisions.size());\n         if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n             m_tried_collisions.insert(nId);\n         }\n@@ -561,12 +563,19 @@ void CAddrMan::ResolveCollisions_()\n \n                     // Give address at least 60 seconds to successfully connect\n                     if (GetAdjustedTime() - info_old.nLastTry > 60) {\n-                        LogPrint(BCLog::ADDRMAN, \"Swapping %s for %s in tried table\\n\", info_new.ToString(), info_old.ToString());\n+                        LogPrint(BCLog::ADDRMAN, \"Replacing %s with %s in tried table\\n\", info_old.ToString(), info_new.ToString());\n \n                         // Replaces an existing address already in the tried table with the new address\n                         Good_(info_new, false, GetAdjustedTime());\n                         erase_collision = true;\n                     }\n+                } else if (GetAdjustedTime() - info_new.nLastSuccess > ADDRMAN_TEST_WINDOW) {\n+                    // If the collision hasn't resolved in some reasonable amount of time,\n+                    // just evict the old entry -- we must not be able to\n+                    // connect to it for some reason.\n+                    LogPrint(BCLog::ADDRMAN, \"Unable to test; replacing %s with %s in tried table anyway\\n\", info_old.ToString(), info_new.ToString());\n+                    Good_(info_new, false, GetAdjustedTime());\n+                    erase_collision = true;\n                 }\n             } else { // Collision is not actually a collision anymore\n                 Good_(info_new, false, GetAdjustedTime());"
      },
      {
        "sha": "e54184ce35de29a587bddd72d554c3d9a2eccac8",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -166,6 +166,9 @@ class CAddrInfo : public CAddress\n //! the maximum number of tried addr collisions to store\n #define ADDRMAN_SET_TRIED_COLLISION_SIZE 10\n \n+//! the maximum time we'll spend trying to resolve a tried table collision, in seconds\n+static const int64_t ADDRMAN_TEST_WINDOW = 40*60; // 40 minutes\n+\n /**\n  * Stochastical (IP) address manager\n  */"
      },
      {
        "sha": "e15213c552e0fa35c87567d4848509eb72f3f731",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -251,6 +251,8 @@ bool BlockFilter::BuildParams(GCSFilter::Params& params) const\n         params.m_P = BASIC_FILTER_P;\n         params.m_M = BASIC_FILTER_M;\n         return true;\n+    case BlockFilterType::INVALID:\n+        return false;\n     }\n \n     return false;"
      },
      {
        "sha": "e5e087ed5a3addfd1770b4900df2f6ad4dad79f6",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -83,9 +83,10 @@ class GCSFilter\n constexpr uint8_t BASIC_FILTER_P = 19;\n constexpr uint32_t BASIC_FILTER_M = 784931;\n \n-enum BlockFilterType : uint8_t\n+enum class BlockFilterType : uint8_t\n {\n     BASIC = 0,\n+    INVALID = 255,\n };\n \n /**\n@@ -95,7 +96,7 @@ enum BlockFilterType : uint8_t\n class BlockFilter\n {\n private:\n-    BlockFilterType m_filter_type;\n+    BlockFilterType m_filter_type = BlockFilterType::INVALID;\n     uint256 m_block_hash;\n     GCSFilter m_filter;\n "
      },
      {
        "sha": "0898d0ff2582c1261da7219bfdf9d7f761bc212e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -1468,11 +1468,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n         uiInterface.InitMessage(_(\"Loading block index...\"));\n \n-        LOCK(cs_main);\n-\n         do {\n             const int64_t load_block_index_start_time = GetTimeMillis();\n+            bool is_coinsview_empty;\n             try {\n+                LOCK(cs_main);\n                 UnloadBlockIndex();\n                 pcoinsTip.reset();\n                 pcoinsdbview.reset();\n@@ -1544,7 +1544,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // The on-disk coinsdb is now in a good state, create the cache\n                 pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n \n-                bool is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n+                is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 if (!is_coinsview_empty) {\n                     // LoadChainTip sets chainActive based on pcoinsTip's best block\n                     if (!LoadChainTip(chainparams)) {\n@@ -1553,18 +1553,25 @@ bool AppInitMain(InitInterfaces& interfaces)\n                     }\n                     assert(chainActive.Tip() != nullptr);\n                 }\n+            } catch (const std::exception& e) {\n+                LogPrintf(\"%s\\n\", e.what());\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            }\n \n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on chainActive, and drops block data in\n-                    // mapBlockIndex based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n-                    if (!RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n-                        break;\n-                    }\n+            if (!fReset) {\n+                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                // It both disconnects blocks based on chainActive, and drops block data in\n+                // mapBlockIndex based on lack of available witness data.\n+                uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n+                if (!RewindBlockIndex(chainparams)) {\n+                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n+                    break;\n                 }\n+            }\n \n+            try {\n+                LOCK(cs_main);\n                 if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {"
      },
      {
        "sha": "ccab4a17189888530312d37df18ba7227cb52915",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -1765,9 +1765,15 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 addr = addrman.Select(fFeeler);\n             }\n \n-            // if we selected an invalid address, restart\n-            if (!addr.IsValid() || setConnected.count(addr.GetGroup()) || IsLocal(addr))\n+            // Require outbound connections, other than feelers, to be to distinct network groups\n+            if (!fFeeler && setConnected.count(addr.GetGroup())) {\n                 break;\n+            }\n+\n+            // if we selected an invalid or local address, restart\n+            if (!addr.IsValid() || IsLocal(addr)) {\n+                break;\n+            }\n \n             // If we didn't find an appropriate destination after trying 100 addresses fetched from addrman,\n             // stop this loop, and let the outer loop run again (which sleeps, adds seed nodes, recalculates"
      },
      {
        "sha": "94413547d4a393c82d60d4c6ecaab4d26fde98c1",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 17,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -40,15 +40,11 @@ void WalletFrame::setClientModel(ClientModel *_clientModel)\n     this->clientModel = _clientModel;\n }\n \n-bool WalletFrame::addWallet(WalletModel *walletModel)\n+void WalletFrame::addWallet(WalletModel *walletModel)\n {\n-    if (!gui || !clientModel || !walletModel) {\n-        return false;\n-    }\n+    if (!gui || !clientModel || !walletModel) return;\n \n-    if (mapWalletViews.count(walletModel) > 0) {\n-        return false;\n-    }\n+    if (mapWalletViews.count(walletModel) > 0) return;\n \n     WalletView *walletView = new WalletView(platformStyle, this);\n     walletView->setBitcoinGUI(gui);\n@@ -72,31 +68,25 @@ bool WalletFrame::addWallet(WalletModel *walletModel)\n     });\n \n     connect(walletView, &WalletView::outOfSyncWarningClicked, this, &WalletFrame::outOfSyncWarningClicked);\n-\n-    return true;\n }\n \n-bool WalletFrame::setCurrentWallet(WalletModel* wallet_model)\n+void WalletFrame::setCurrentWallet(WalletModel* wallet_model)\n {\n-    if (mapWalletViews.count(wallet_model) == 0)\n-        return false;\n+    if (mapWalletViews.count(wallet_model) == 0) return;\n \n     WalletView *walletView = mapWalletViews.value(wallet_model);\n     walletStack->setCurrentWidget(walletView);\n     assert(walletView);\n     walletView->updateEncryptionStatus();\n-    return true;\n }\n \n-bool WalletFrame::removeWallet(WalletModel* wallet_model)\n+void WalletFrame::removeWallet(WalletModel* wallet_model)\n {\n-    if (mapWalletViews.count(wallet_model) == 0)\n-        return false;\n+    if (mapWalletViews.count(wallet_model) == 0) return;\n \n     WalletView *walletView = mapWalletViews.take(wallet_model);\n     walletStack->removeWidget(walletView);\n     delete walletView;\n-    return true;\n }\n \n void WalletFrame::removeAllWallets()"
      },
      {
        "sha": "156653f47dfa8b6a57372ce9dc612d859e7d50cf",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -36,9 +36,9 @@ class WalletFrame : public QFrame\n \n     void setClientModel(ClientModel *clientModel);\n \n-    bool addWallet(WalletModel *walletModel);\n-    bool setCurrentWallet(WalletModel* wallet_model);\n-    bool removeWallet(WalletModel* wallet_model);\n+    void addWallet(WalletModel *walletModel);\n+    void setCurrentWallet(WalletModel* wallet_model);\n+    void removeWallet(WalletModel* wallet_model);\n     void removeAllWallets();\n \n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);"
      },
      {
        "sha": "1827aec637093c6cc84242679e1f17091705fbf8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -1579,15 +1579,15 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n+    CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        pblockindex = LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-\n-        InvalidateBlock(state, Params(), pblockindex);\n     }\n+    InvalidateBlock(state, Params(), pblockindex);\n \n     if (state.IsValid()) {\n         ActivateBestChain(state, Params());"
      },
      {
        "sha": "cd0c36d802cee961abac8a4e2da7102183c45989",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -112,6 +112,12 @@ BOOST_AUTO_TEST_CASE(blockfilter_basic_test)\n     BOOST_CHECK_EQUAL(block_filter.GetFilterType(), block_filter2.GetFilterType());\n     BOOST_CHECK_EQUAL(block_filter.GetBlockHash(), block_filter2.GetBlockHash());\n     BOOST_CHECK(block_filter.GetEncodedFilter() == block_filter2.GetEncodedFilter());\n+\n+    BlockFilter default_ctor_block_filter_1;\n+    BlockFilter default_ctor_block_filter_2;\n+    BOOST_CHECK_EQUAL(default_ctor_block_filter_1.GetFilterType(), default_ctor_block_filter_2.GetFilterType());\n+    BOOST_CHECK_EQUAL(default_ctor_block_filter_1.GetBlockHash(), default_ctor_block_filter_2.GetBlockHash());\n+    BOOST_CHECK(default_ctor_block_filter_1.GetEncodedFilter() == default_ctor_block_filter_2.GetEncodedFilter());\n }\n \n BOOST_AUTO_TEST_CASE(blockfilters_json_test)"
      },
      {
        "sha": "a9b5bcf4a450270b388c22a174287a2c9fef50b1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 188,
        "deletions": 121,
        "changes": 309,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -178,7 +178,7 @@ class CChainState {\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n-    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex);\n     void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n@@ -207,8 +207,10 @@ class CChainState {\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const FlatFilePos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-\n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    //! Mark a block as not having block data\n+    void EraseBlockData(CBlockIndex* index) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n } g_chainstate;\n \n /**\n@@ -2626,6 +2628,14 @@ static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     }\n }\n \n+static void LimitValidationInterfaceQueue() {\n+    AssertLockNotHeld(cs_main);\n+\n+    if (GetMainSignals().CallbacksPending() > 10) {\n+        SyncWithValidationInterfaceQueue();\n+    }\n+}\n+\n /**\n  * Make the best chain active, in multiple steps. The result is either failure\n  * or an activated best chain. pblock is either nullptr or a pointer to a block\n@@ -2654,15 +2664,13 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     do {\n         boost::this_thread::interruption_point();\n \n-        if (GetMainSignals().CallbacksPending() > 10) {\n-            // Block until the validation queue drains. This should largely\n-            // never happen in normal operation, however may happen during\n-            // reindex, causing memory blowup if we run too far ahead.\n-            // Note that if a validationinterface callback ends up calling\n-            // ActivateBestChain this may lead to a deadlock! We should\n-            // probably have a DEBUG_LOCKORDER test for this in the future.\n-            SyncWithValidationInterfaceQueue();\n-        }\n+        // Block until the validation queue drains. This should largely\n+        // never happen in normal operation, however may happen during\n+        // reindex, causing memory blowup if we run too far ahead.\n+        // Note that if a validationinterface callback ends up calling\n+        // ActivateBestChain this may lead to a deadlock! We should\n+        // probably have a DEBUG_LOCKORDER test for this in the future.\n+        LimitValidationInterfaceQueue();\n \n         {\n             LOCK(cs_main);\n@@ -2773,64 +2781,85 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    AssertLockHeld(cs_main);\n+    CBlockIndex* to_mark_failed = pindex;\n+    bool pindex_was_in_chain = false;\n+    int disconnected = 0;\n \n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n \n-    bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n-\n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n-        invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful,\n+        // and we're not doing a very deep invalidation (in which case\n+        // keeping the mempool up to date is probably futile anyway).\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n+\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+        invalid_walk_tip->nStatus |= BLOCK_FAILED_VALID;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n-    }\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+        if (invalid_walk_tip->pprev == to_mark_failed && (to_mark_failed->nStatus & BLOCK_FAILED_VALID)) {\n+            // We only want to mark the last disconnected block as BLOCK_FAILED_VALID; its children\n+            // need to be BLOCK_FAILED_CHILD instead.\n+            to_mark_failed->nStatus = (to_mark_failed->nStatus ^ BLOCK_FAILED_VALID) | BLOCK_FAILED_CHILD;\n+            setDirtyBlockIndex.insert(to_mark_failed);\n+        }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+        // Track the last disconnected block, so we can correct its BLOCK_FAILED_CHILD status in future\n+        // iterations, or, if it's the last one, call InvalidChainFound on it.\n+        to_mark_failed = invalid_walk_tip;\n+    }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+    {\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-    // add it again.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n-    while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n-            setBlockIndexCandidates.insert(it->second);\n+        // Mark pindex (or the last disconnected block) as invalid, even when it never was in the main chain\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;\n+        setDirtyBlockIndex.insert(to_mark_failed);\n+        setBlockIndexCandidates.erase(to_mark_failed);\n+        m_failed_blocks.insert(to_mark_failed);\n+\n+        // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n+        // add it again.\n+        BlockMap::iterator it = mapBlockIndex.begin();\n+        while (it != mapBlockIndex.end()) {\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n+                setBlockIndexCandidates.insert(it->second);\n+            }\n+            it++;\n         }\n-        it++;\n-    }\n \n-    InvalidChainFound(pindex);\n+        InvalidChainFound(to_mark_failed);\n+    }\n \n     // Only notify about a new block tip if the active chain was modified.\n     if (pindex_was_in_chain) {\n-        uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n+        uiInterface.NotifyBlockTip(IsInitialBlockDownload(), to_mark_failed->pprev);\n     }\n     return true;\n }\n@@ -4113,92 +4142,130 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n-bool CChainState::RewindBlockIndex(const CChainParams& params)\n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n {\n-    LOCK(cs_main);\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n \n+bool CChainState::RewindBlockIndex(const CChainParams& params)\n+{\n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n \n-    int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    // First erase all post-segwit blocks without witness not in the main chain,\n+    // as this can we done without costly DisconnectTip calls. Active\n+    // blocks will be dealt with below (releasing cs_main in between).\n+    {\n+        LOCK(cs_main);\n+        for (const auto& entry : mapBlockIndex) {\n+            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n+                EraseBlockData(entry.second);\n+            }\n         }\n-        nHeight++;\n     }\n \n+    // Find what height we need to reorganize to.\n+    CBlockIndex *tip;\n+    int nHeight = 1;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n+        }\n+\n+        tip = chainActive.Tip();\n+    }\n     // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+\n     CValidationState state;\n-    CBlockIndex* pindex = chainActive.Tip();\n-    while (chainActive.Height() >= nHeight) {\n-        if (fPruneMode && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n-            // If pruning, don't try rewinding past the HAVE_DATA point;\n-            // since older blocks can't be served anyway, there's\n-            // no need to walk further, and trying to DisconnectTip()\n-            // will fail (and require a needless reindex/redownload\n-            // of the blockchain).\n-            break;\n-        }\n-        if (!DisconnectTip(state, params, nullptr)) {\n-            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", pindex->nHeight, FormatStateMessage(state));\n+    // Loop until the tip is below nHeight, or we reach a pruned block.\n+    while (!ShutdownRequested()) {\n+        {\n+            LOCK(cs_main);\n+            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n+            assert(tip == chainActive.Tip());\n+            if (tip == nullptr || tip->nHeight < nHeight) break;\n+            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n+                // If pruning, don't try rewinding past the HAVE_DATA point;\n+                // since older blocks can't be served anyway, there's\n+                // no need to walk further, and trying to DisconnectTip()\n+                // will fail (and require a needless reindex/redownload\n+                // of the blockchain).\n+                break;\n+            }\n+\n+            // Disconnect block\n+            if (!DisconnectTip(state, params, nullptr)) {\n+                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+            }\n+\n+            // Reduce validity flag and have-data flags.\n+            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+            // Note: If we encounter an insufficiently validated block that\n+            // is on chainActive, it must be because we are a pruning node, and\n+            // this block or some successor doesn't HAVE_DATA, so we were unable to\n+            // rewind all the way.  Blocks remaining on chainActive at this point\n+            // must not have their validity reduced.\n+            EraseBlockData(tip);\n+\n+            tip = tip->pprev;\n         }\n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n+\n         // Occasionally flush state to disk.\n         if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n             LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n             return false;\n         }\n     }\n \n-    // Reduce validity flag and have-data flags.\n-    // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-    // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-    for (const auto& entry : mapBlockIndex) {\n-        CBlockIndex* pindexIter = entry.second;\n-\n-        // Note: If we encounter an insufficiently validated block that\n-        // is on chainActive, it must be because we are a pruning node, and\n-        // this block or some successor doesn't HAVE_DATA, so we were unable to\n-        // rewind all the way.  Blocks remaining on chainActive at this point\n-        // must not have their validity reduced.\n-        if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(pindexIter)) {\n-            // Reduce validity\n-            pindexIter->nStatus = std::min<unsigned int>(pindexIter->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (pindexIter->nStatus & ~BLOCK_VALID_MASK);\n-            // Remove have-data flags.\n-            pindexIter->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-            // Remove storage location.\n-            pindexIter->nFile = 0;\n-            pindexIter->nDataPos = 0;\n-            pindexIter->nUndoPos = 0;\n-            // Remove various other things\n-            pindexIter->nTx = 0;\n-            pindexIter->nChainTx = 0;\n-            pindexIter->nSequenceId = 0;\n-            // Make sure it gets written.\n-            setDirtyBlockIndex.insert(pindexIter);\n-            // Update indexes\n-            setBlockIndexCandidates.erase(pindexIter);\n-            std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(pindexIter->pprev);\n-            while (ret.first != ret.second) {\n-                if (ret.first->second == pindexIter) {\n-                    mapBlocksUnlinked.erase(ret.first++);\n-                } else {\n-                    ++ret.first;\n-                }\n-            }\n-        } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->HaveTxsDownloaded()) {\n-            setBlockIndexCandidates.insert(pindexIter);\n-        }\n-    }\n-\n-    if (chainActive.Tip() != nullptr) {\n-        // We can't prune block index candidates based on our tip if we have\n-        // no tip due to chainActive being empty!\n-        PruneBlockIndexCandidates();\n+    {\n+        LOCK(cs_main);\n+        if (chainActive.Tip() != nullptr) {\n+            // We can't prune block index candidates based on our tip if we have\n+            // no tip due to chainActive being empty!\n+            PruneBlockIndexCandidates();\n \n-        CheckBlockIndex(params.GetConsensus());\n+            CheckBlockIndex(params.GetConsensus());\n+        }\n     }\n \n     return true;"
      },
      {
        "sha": "0acca013b57b26311d19190a12af8b88100b2d6f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -443,7 +443,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex);\n \n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      },
      {
        "sha": "e47f5fa95632c5e172a3c2af7fdaf9cac1a01e92",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 29,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -193,7 +193,7 @@ CPubKey CWallet::GenerateNewKey(WalletBatch &batch, bool internal)\n {\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     assert(!IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n     bool fCompressed = CanSupportFeature(FEATURE_COMPRPUBKEY); // default to compressed public keys if we want 0.6.0 wallets\n \n     CKey secret;\n@@ -281,9 +281,9 @@ void CWallet::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n-bool CWallet::AddKeyPubKeyWithDB(WalletBatch &batch, const CKey& secret, const CPubKey &pubkey)\n+bool CWallet::AddKeyPubKeyWithDB(WalletBatch& batch, const CKey& secret, const CPubKey& pubkey)\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n \n     // Make sure we aren't adding private keys to private key disabled wallets\n     assert(!IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n@@ -345,16 +345,16 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n     }\n }\n \n-void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &meta)\n+void CWallet::LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata& meta)\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n     UpdateTimeFirstKey(meta.nCreateTime);\n     mapKeyMetadata[keyID] = meta;\n }\n \n-void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &meta)\n+void CWallet::LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata& meta)\n {\n-    AssertLockHeld(cs_wallet); // m_script_metadata\n+    AssertLockHeld(cs_wallet);\n     UpdateTimeFirstKey(meta.nCreateTime);\n     m_script_metadata[script_id] = meta;\n }\n@@ -367,7 +367,7 @@ bool CWallet::WriteKeyMetadata(const CKeyMetadata& meta, const CPubKey& pubkey,\n \n void CWallet::UpgradeKeyMetadata()\n {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+    AssertLockHeld(cs_wallet);\n     if (IsLocked() || IsWalletFlagSet(WALLET_FLAG_KEY_ORIGIN_METADATA)) {\n         return;\n     }\n@@ -569,7 +569,7 @@ void CWallet::ChainStateFlushed(const CBlockLocator& loc)\n \n void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in, bool fExplicit)\n {\n-    LOCK(cs_wallet); // nWalletVersion\n+    LOCK(cs_wallet);\n     if (nWalletVersion >= nVersion)\n         return;\n \n@@ -593,7 +593,7 @@ void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in,\n \n bool CWallet::SetMaxVersion(int nVersion)\n {\n-    LOCK(cs_wallet); // nWalletVersion, nWalletMaxVersion\n+    LOCK(cs_wallet);\n     // cannot downgrade below current version\n     if (nWalletVersion > nVersion)\n         return false;\n@@ -877,9 +877,9 @@ DBErrors CWallet::ReorderTransactions()\n     return DBErrors::LOAD_OK;\n }\n \n-int64_t CWallet::IncOrderPosNext(WalletBatch *batch)\n+int64_t CWallet::IncOrderPosNext(WalletBatch* batch)\n {\n-    AssertLockHeld(cs_wallet); // nOrderPosNext\n+    AssertLockHeld(cs_wallet);\n     int64_t nRet = nOrderPosNext++;\n     if (batch) {\n         batch->WriteOrderPosNext(nOrderPosNext);\n@@ -2614,9 +2614,9 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     return res;\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction &tx)\n+bool CWallet::SignTransaction(CMutableTransaction& tx)\n {\n-    AssertLockHeld(cs_wallet); // mapWallet\n+    AssertLockHeld(cs_wallet);\n \n     // sign the new tx\n     int nIn = 0;\n@@ -3230,8 +3230,8 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n \n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n {\n-    AssertLockHeld(cs_wallet); // mapWallet\n-    DBErrors nZapSelectTxRet = WalletBatch(*database,\"cr+\").ZapSelectTx(vHashIn, vHashOut);\n+    AssertLockHeld(cs_wallet);\n+    DBErrors nZapSelectTxRet = WalletBatch(*database, \"cr+\").ZapSelectTx(vHashIn, vHashOut);\n     for (uint256 hash : vHashOut) {\n         const auto& it = mapWallet.find(hash);\n         wtxOrdered.erase(it->second.m_it_wtxOrdered);\n@@ -3257,7 +3257,6 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n     MarkDirty();\n \n     return DBErrors::LOAD_OK;\n-\n }\n \n DBErrors CWallet::ZapWalletTx(std::vector<CWalletTx>& vWtx)\n@@ -3377,7 +3376,7 @@ bool CWallet::NewKeyPool()\n \n size_t CWallet::KeypoolCountExternalKeys()\n {\n-    AssertLockHeld(cs_wallet); // setExternalKeyPool\n+    AssertLockHeld(cs_wallet);\n     return setExternalKeyPool.size() + set_pre_split_keypool.size();\n }\n \n@@ -3641,7 +3640,7 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain:\n \n std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n {\n-    AssertLockHeld(cs_wallet); // mapWallet\n+    AssertLockHeld(cs_wallet);\n     std::set< std::set<CTxDestination> > groupings;\n     std::set<CTxDestination> grouping;\n \n@@ -3809,33 +3808,33 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n \n void CWallet::LockCoin(const COutPoint& output)\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     setLockedCoins.insert(output);\n }\n \n void CWallet::UnlockCoin(const COutPoint& output)\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     setLockedCoins.erase(output);\n }\n \n void CWallet::UnlockAllCoins()\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     setLockedCoins.clear();\n }\n \n bool CWallet::IsLockedCoin(uint256 hash, unsigned int n) const\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     COutPoint outpt(hash, n);\n \n     return (setLockedCoins.count(outpt) > 0);\n }\n \n void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n {\n-    AssertLockHeld(cs_wallet); // setLockedCoins\n+    AssertLockHeld(cs_wallet);\n     for (std::set<COutPoint>::iterator it = setLockedCoins.begin();\n          it != setLockedCoins.end(); it++) {\n         COutPoint outpt = (*it);\n@@ -3845,8 +3844,8 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts) const\n \n /** @} */ // end of Actions\n \n-void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t> &mapKeyBirth) const {\n-    AssertLockHeld(cs_wallet); // mapKeyMetadata\n+void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<CTxDestination, int64_t>& mapKeyBirth) const {\n+    AssertLockHeld(cs_wallet);\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata\n@@ -4125,7 +4124,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    int prev_version = walletInstance->nWalletVersion;\n+    int prev_version = walletInstance->GetVersion();\n     if (gArgs.GetBoolArg(\"-upgradewallet\", fFirstRun))\n     {\n         int nMaxVersion = gArgs.GetArg(\"-upgradewallet\", 0);\n@@ -4150,8 +4149,8 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         LOCK(walletInstance->cs_wallet);\n \n         // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n-        int max_version = walletInstance->nWalletVersion;\n-        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >=FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n+        int max_version = walletInstance->GetVersion();\n+        if (!walletInstance->CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n             chain.initError(_(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use -upgradewallet=169900 or -upgradewallet with no version specified.\"));\n             return nullptr;\n         }"
      },
      {
        "sha": "ea196c8799536ad1d3d7067a6537ac9ecc9d0797",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1625724185f4efcc0f2f258224d4262b74527935/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1625724185f4efcc0f2f258224d4262b74527935/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1625724185f4efcc0f2f258224d4262b74527935",
        "patch": "@@ -648,7 +648,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n-    int nWalletVersion = FEATURE_BASE;\n+    int nWalletVersion GUARDED_BY(cs_wallet){FEATURE_BASE};\n \n     //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n     int nWalletMaxVersion GUARDED_BY(cs_wallet) = FEATURE_BASE;\n@@ -698,11 +698,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    std::set<int64_t> setInternalKeyPool;\n+    std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_wallet);\n     std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n-    std::set<int64_t> set_pre_split_keypool;\n+    std::set<int64_t> set_pre_split_keypool GUARDED_BY(cs_wallet);\n     int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::atomic<uint64_t> m_wallet_flags{0};\n@@ -1065,7 +1065,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {\n-        AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n+        AssertLockHeld(cs_wallet);\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n     }\n "
      }
    ]
  }
]