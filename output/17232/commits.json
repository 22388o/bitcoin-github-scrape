[
  {
    "sha": "b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTFkZjRhZmVmYWEzYzU2YzIyZjU3MGNjNGYzMjRjZDFjMmFjNjg5",
    "commit": {
      "author": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-10-21T17:17:22Z"
      },
      "committer": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2020-06-09T14:08:52Z"
      },
      "message": "Sanity assert GetAncestor() != nullptr where appropriate\n\nAdd sanity asserts for return value of `CBlockIndex::GetAncestor()` where appropriate.\n\nIn validation.cpp `CheckSequenceLocks`, check the return value of `tip->GetAncestor(maxInputHeight)` stored into `lp->maxInputBlock`. If it ever returns `nullptr` because the ancestor isn't found, it's going to be a bad bug to keep going, since a `LockPoints` object with the `maxInputBlock` member set to `nullptr` signifies no relative lock time.\n\nIn the other places, the added asserts would prevent accidental dereferencing of a null pointer which is undefined behavior.\n\nCo-Authored-By: danra <danra@users.noreply.github.com>",
      "tree": {
        "sha": "932bc4d2d397f1968029230a9a3948c027650071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/932bc4d2d397f1968029230a9a3948c027650071"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/comments",
    "author": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a79bca2f1fb25f433d6e100a31a3acfde2656ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79bca2f1fb25f433d6e100a31a3acfde2656ce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a79bca2f1fb25f433d6e100a31a3acfde2656ce1"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 22,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7d9e0f4106cdbcf3cb3f82fdfd14fc71a04e1c9a",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
        "patch": "@@ -66,7 +66,9 @@ std::pair<int, int64_t> CalculateSequenceLocks(const CTransaction &tx, int flags\n         int nCoinHeight = prevHeights[txinIndex];\n \n         if (txin.nSequence & CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG) {\n-            int64_t nCoinTime = block.GetAncestor(std::max(nCoinHeight-1, 0))->GetMedianTimePast();\n+            const CBlockIndex* ancestor = block.GetAncestor(std::max(nCoinHeight-1, 0));\n+            assert(ancestor != nullptr);\n+            int64_t nCoinTime = ancestor->GetMedianTimePast();\n             // NOTE: Subtract 1 to maintain nLockTime semantics\n             // BIP 68 relative lock times have the semantics of calculating\n             // the first block or time at which the transaction would be"
      },
      {
        "sha": "d516941a83b5718160bd319574ad5581f59287f0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
        "patch": "@@ -1606,6 +1606,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n     }\n \n     const CBlockIndex* pindexPast = pindex->GetAncestor(pindex->nHeight - blockcount);\n+    CHECK_NONFATAL(pindexPast != nullptr);\n     int nTimeDiff = pindex->GetMedianTimePast() - pindexPast->GetMedianTimePast();\n     int nTxDiff = pindex->nChainTx - pindexPast->nChainTx;\n "
      },
      {
        "sha": "8a28c239540f07c9c4aba166fa17de1a091a23bf",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
        "patch": "@@ -459,11 +459,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(CheckFinalTx(CTransaction(tx), flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(CTransaction(tx), flags)); // Sequence locks fail\n \n+    const int SEQUENCE_LOCK_TIME = 512; // Sequence locks pass 512 seconds later\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += SEQUENCE_LOCK_TIME; //Trick the MedianTimePast\n     BOOST_CHECK(SequenceLocks(CTransaction(tx), flags, prevheights, CreateBlockIndex(::ChainActive().Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime -= SEQUENCE_LOCK_TIME; //undo tricked MTP\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n@@ -508,9 +509,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // but relative locked txs will if inconsistently added to mempool.\n     // For now these will still generate a valid template until BIP68 soft fork\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3U);\n-    // However if we advance height by 1 and time by 512, all of them should be mined\n-    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    // However if we advance height by 1 and time by SEQUENCE_LOCK_TIME, all of them should be mined\n+    for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++) {\n+        CBlockIndex* ancestor = ::ChainActive().Tip()->GetAncestor(::ChainActive().Tip()->nHeight - i);\n+        assert(ancestor != nullptr);\n+        ancestor->nTime += SEQUENCE_LOCK_TIME; // Trick the MedianTimePast\n+    }\n     ::ChainActive().Tip()->nHeight++;\n     SetMockTime(::ChainActive().Tip()->GetMedianTimePast() + 1);\n "
      },
      {
        "sha": "85865bfb1b923b1b59f50b95d86422ed225ffdd6",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
        "patch": "@@ -327,6 +327,12 @@ bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flag\n                 }\n             }\n             lp->maxInputBlock = tip->GetAncestor(maxInputHeight);\n+            // tip->GetAncestor(maxInputHeight) should never return a nullptr\n+            // because maxInputHeight is always less than the tip height.\n+            // It would, however, be a bad bug to continue execution, since a\n+            // LockPoints object with the maxInputBlock member set to nullptr\n+            // signifies no relative lock time.\n+            assert(lp->maxInputBlock);\n         }\n     }\n     return EvaluateSequenceLocks(index, lockPair);\n@@ -4450,6 +4456,7 @@ bool CChainState::ReplayBlocks(const CChainParams& params)\n     int nForkHeight = pindexFork ? pindexFork->nHeight : 0;\n     for (int nHeight = nForkHeight + 1; nHeight <= pindexNew->nHeight; ++nHeight) {\n         const CBlockIndex* pindex = pindexNew->GetAncestor(nHeight);\n+        assert(pindex != nullptr);\n         LogPrintf(\"Rolling forward %s (%i)\\n\", pindex->GetBlockHash().ToString(), nHeight);\n         uiInterface.ShowProgress(_(\"Replaying blocks...\").translated, (int) ((nHeight - nForkHeight) * 100.0 / (pindexNew->nHeight - nForkHeight)) , false);\n         if (!RollforwardBlock(pindex, cache, params)) return false;"
      },
      {
        "sha": "bd3421683f2b91c03d6daf7f120bf165c9904a95",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b11df4afefaa3c56c22f570cc4f324cd1c2ac689/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=b11df4afefaa3c56c22f570cc4f324cd1c2ac689",
        "patch": "@@ -106,6 +106,7 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n \n     // Find beginning of period\n     const CBlockIndex* pindexEndOfPrevPeriod = pindex->GetAncestor(pindex->nHeight - ((pindex->nHeight + 1) % stats.period));\n+    assert(pindexEndOfPrevPeriod != nullptr);\n     stats.elapsed = pindex->nHeight - pindexEndOfPrevPeriod->nHeight;\n \n     // Count from current block to beginning of period\n@@ -146,6 +147,7 @@ int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex*\n     // if we are computing for the first block of a period, then pindexPrev points to the last block of the previous period.\n     // The parent of the genesis block is represented by nullptr.\n     pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+    assert(pindexPrev != nullptr);\n \n     const CBlockIndex* previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n "
      }
    ]
  }
]