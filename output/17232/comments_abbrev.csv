practicalswift,2019-10-23 20:31:15,"Concept ACK\n\nExplicit is better than implicit.\n\nIn case the assumptions do not hold then a predictable assertion failure is the better alternative.",https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-545623000,545623000,
jnewbery,2019-10-30 19:10:03,Code review ACK 59f51d5647d00ca30d431ff1d6f90edaa78f7951,https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-548068795,548068795,
practicalswift,2019-11-01 09:31:37,"@adamjonas Thanks for making implicit assumptions explicit by adding assertions and documentation.\n\nIf you want to continue working on making currently implicit `!= nullptr` assumptions explicit you might want to try compiling with `-Wnull-dereference` to see what the compiler regards as potential null pointer dereferences.\n\nFWIW gcc 7.4.0 with `-Wnull-dereference` against current `master`",https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-548723899,548723899,
ryanofsky,2019-11-01 13:36:01,"> If you want to continue working on making currently implicit `!= nullptr` assumptions explicit you might want to try compiling with `-Wnull-dereference` to see what the compiler regards as potential null pointer dereferences.\n\nI'm not sure there's much benefit to fixing these disabled warnings relative to the cost of implementing and reviewing the fixes. But there are going to be future PRs,",https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-548789748,548789748,
MarcoFalke,2019-11-01 17:13:18,"Hitting an assertion is always better than a segmentation fault, so while none of the `-Wnull-dereference` warnings are serious, it still makes sense to get rid of them in the long run. Either by replacing them with references where possible, as suggested by ryanofsky, or adding an `assert` where references are not applicable.",https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-548872496,548872496,
adamjonas,2019-11-21 16:41:04,"I'm happy to follow up and keep working on these, but I'd prefer to open a separate PR(s) to address the other instances and maintain a low burden of review.",https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-557169422,557169422,
DrahtBot,2020-05-28 00:44:40,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-635022498,635022498,
adamjonas,2020-08-16 00:36:42,Going to close this for lack of interest. Maybe @MarcoFalke or @fanquake could label it up for grabs if someone wants to pick it back up again?,https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-674462455,674462455,
practicalswift,2020-08-16 15:57:04,@adamjonas Would you be willing to re-open this given renewed reviewer interest? :),https://github.com/bitcoin/bitcoin/pull/17232#issuecomment-674543926,674543926,
jonatack,2019-10-23 19:15:53,"While touching this code, it may be nice to hoist the various `512` magic values in this test (described in one place, the comment in line 461) to a well-named constant and move the comment to its definition. Perhaps also fix the uneven code spacing at the beginning of the comments.",https://github.com/bitcoin/bitcoin/pull/17232#discussion_r338231140,338231140,src/test/miner_tests.cpp
practicalswift,2019-10-23 20:28:30,"If this assertion did not hold we wouldn't necessarily dereference any null pointer, would we? Could this assertion be moved to a place where it is obvious that an assertion failure is better than continued execution? Unlike the other cases it is not entirely obvious here.",https://github.com/bitcoin/bitcoin/pull/17232#discussion_r338261820,338261820,src/validation.cpp
adamjonas,2019-10-29 19:23:37,Cleaned up as suggested. Thanks!,https://github.com/bitcoin/bitcoin/pull/17232#discussion_r340279754,340279754,src/test/miner_tests.cpp
MarcoFalke,2019-10-29 19:26:36,We don't use assert in rpc code anymore. please use the `CHECK_NONFATAL` to return a bug report to the user instead of crashing the whole server,https://github.com/bitcoin/bitcoin/pull/17232#discussion_r340280945,340280945,src/rpc/blockchain.cpp
adamjonas,2019-10-29 19:27:03,"`tip->GetAncestor(maxInputHeight)` shouldn't return a nullptr because maxInputHeight is always less than the tip height, but did leave a comment explaining why we'd stop execution if that ever happened. ",https://github.com/bitcoin/bitcoin/pull/17232#discussion_r340281120,340281120,src/validation.cpp
adamjonas,2019-10-29 19:41:28,Updated,https://github.com/bitcoin/bitcoin/pull/17232#discussion_r340286966,340286966,src/rpc/blockchain.cpp
jonatack,2020-08-16 10:36:59,"```diff\n- const CBlockIndex* ancestor = block.GetAncestor(std::max(nCoinHeight-1, 0));\n+ const CBlockIndex* ancestor = block.GetAncestor(std::max(nCoinHeight - 1, 0));\n```",https://github.com/bitcoin/bitcoin/pull/17232#discussion_r471096112,471096112,src/consensus/tx_verify.cpp
jonatack,2020-08-16 10:38:25,"```diff\n- for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++) {\n+ for (int i = 0; i < CBlockIndex::nMedianTimeSpan; ++i) {\n```",https://github.com/bitcoin/bitcoin/pull/17232#discussion_r471096219,471096219,src/test/miner_tests.cpp
