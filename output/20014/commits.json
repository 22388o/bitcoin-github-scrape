[
  {
    "sha": "b3972bca9f74b3e75918676ef029f1964b0622a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzk3MmJjYTlmNzRiM2U3NTkxODY3NmVmMDI5ZjE5NjRiMDYyMmEx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-25T11:55:40Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-09-25T12:23:01Z"
      },
      "message": "doc: Mention signet in -help output",
      "tree": {
        "sha": "a5ebaf96a0f567e7aa1a78c69e0f1eb5e7a5c761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5ebaf96a0f567e7aa1a78c69e0f1eb5e7a5c761"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3972bca9f74b3e75918676ef029f1964b0622a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl9t4SUACgkQQQEIES5+\nqB8ftQ/7BQYP2oqB9Tz0XOMKVwA+RYg1u1KwAkPNpVXz0ej+HVbQNOWVaYYsKgvg\n26pqiQ7hV3FltwL0FCw5ccBsIbiIh5yYMLGa4J/JI8Gaz2xD7rApGJvk9svz9v0n\nI4IQ3SFBlQDCOPNLPI15eJojMH8mJgQwvf9uzv/z4hZEviBzR+i8iHv42Hht1XbH\n9FsNux/UQQV91P/B9mQ4nsNa3a+rwxaImPLQwoFv2H/2uuuaBUYPxbloQ+YhGYwV\nB9odg48a3CI+41+3neZtvxRtxJKEJZNR5swMxnszCefoNPEzdSHNi6rJdf1m8sKU\nhynBhW4jRFtwtXbun/1K50MPt72I4dbiVQhmnOYmNvOc2XnCXtlifMxuvQwG4Z0Y\nbW+308offf4y98qAWOTm8/Mo2wTGeOJ4wE/ifLmj/3YK51z3xcqzSw4tR2Po+eRi\n+ha+Bb+t+syixPwCkAM+RtdnhOTAlEjoyfS6KK+J2IxqY5WHQ6YqTLhTCMDbv24m\nNEzLuJG0SGiMdyW221kl7RJ9/3lfzH4LTVHFL/SUM0NL6rcvi0jc/VsqXndf7hnM\n1vXsU6JpcWArR0VFvv4cjoQNFlgiE1pTHzKVZJ1Xbei794lg+ZjMdbn+CcEztPim\nv8IMQByB/N2iJwa9Hov6DwgHDBVOu/jTyGaqX2wr0JhZCoDKTEQ=\n=LapC\n-----END PGP SIGNATURE-----",
        "payload": "tree a5ebaf96a0f567e7aa1a78c69e0f1eb5e7a5c761\nparent 1b313cacc99a1b372238f9036abed5491f9d28f7\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601034940 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1601036581 +0300\n\ndoc: Mention signet in -help output\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3972bca9f74b3e75918676ef029f1964b0622a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3972bca9f74b3e75918676ef029f1964b0622a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3972bca9f74b3e75918676ef029f1964b0622a1/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b313cacc99a1b372238f9036abed5491f9d28f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b313cacc99a1b372238f9036abed5491f9d28f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b313cacc99a1b372238f9036abed5491f9d28f7"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 10,
      "deletions": 7
    },
    "files": [
      {
        "sha": "aec4177b19de78252de90947b56667b88177170e",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3972bca9f74b3e75918676ef029f1964b0622a1/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3972bca9f74b3e75918676ef029f1964b0622a1/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=b3972bca9f74b3e75918676ef029f1964b0622a1",
        "patch": "@@ -51,6 +51,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n+    const auto signetBaseParams = CreateBaseChainParams(CBaseChainParams::SIGNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n \n     argsman.AddArg(\"-version\", \"Print version and exit\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -66,7 +67,7 @@ static void SetupCliArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-rpcconnect=<ip>\", strprintf(\"Send commands to node running on <ip> (default: %s)\", DEFAULT_RPCCONNECT), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Connect to JSON-RPC on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcuser=<user>\", \"Username for JSON-RPC connections\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwait\", \"Wait for RPC server to start\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-rpcwallet=<walletname>\", \"Send RPC for non-default wallet on RPC server (needs to exactly match corresponding -wallet option passed to bitcoind). This changes the RPC endpoint used, e.g. http://127.0.0.1:8332/wallet/<walletname>\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);"
      },
      {
        "sha": "f19e72e9abdd318f2e97a453d20b945ac4524d72",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3972bca9f74b3e75918676ef029f1964b0622a1/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3972bca9f74b3e75918676ef029f1964b0622a1/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=b3972bca9f74b3e75918676ef029f1964b0622a1",
        "patch": "@@ -18,13 +18,13 @@ const std::string CBaseChainParams::REGTEST = \"regtest\";\n \n void SetupChainParamsBaseOptions(ArgsManager& argsman)\n {\n-    argsman.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-chain=<chain>\", \"Use the chain <chain> (default: main). Allowed values: main, test, signet, regtest\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-signet\", \"Use the signet chain. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n }"
      },
      {
        "sha": "3ddb19051fc95e163b4a733486a2028632f7abdb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3972bca9f74b3e75918676ef029f1964b0622a1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3972bca9f74b3e75918676ef029f1964b0622a1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b3972bca9f74b3e75918676ef029f1964b0622a1",
        "patch": "@@ -378,9 +378,11 @@ void SetupServerArgs(NodeContext& node)\n \n     const auto defaultBaseParams = CreateBaseChainParams(CBaseChainParams::MAIN);\n     const auto testnetBaseParams = CreateBaseChainParams(CBaseChainParams::TESTNET);\n+    const auto signetBaseParams = CreateBaseChainParams(CBaseChainParams::SIGNET);\n     const auto regtestBaseParams = CreateBaseChainParams(CBaseChainParams::REGTEST);\n     const auto defaultChainParams = CreateChainParams(CBaseChainParams::MAIN);\n     const auto testnetChainParams = CreateChainParams(CBaseChainParams::TESTNET);\n+    const auto signetChainParams = CreateChainParams(CBaseChainParams::SIGNET);\n     const auto regtestChainParams = CreateChainParams(CBaseChainParams::REGTEST);\n \n     // Hidden Options\n@@ -393,7 +395,7 @@ void SetupServerArgs(NodeContext& node)\n #if HAVE_SYSTEM\n     argsman.AddArg(\"-alertnotify=<cmd>\", \"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #endif\n-    argsman.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-assumevalid=<hex>\", strprintf(\"If this block is in the chain assume that it and its ancestors are valid and potentially skip their script verification (0 to verify all, default: %s, testnet: %s, signet: %s)\", defaultChainParams->GetConsensus().defaultAssumeValid.GetHex(), testnetChainParams->GetConsensus().defaultAssumeValid.GetHex(), signetChainParams->GetConsensus().defaultAssumeValid.GetHex()), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-blocksdir=<dir>\", \"Specify directory to hold blocks subdirectory for *.dat files (default: <datadir>)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n #if HAVE_SYSTEM\n     argsman.AddArg(\"-blocknotify=<cmd>\", \"Execute command when the best block changes (%s in cmd is replaced by block hash)\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -411,7 +413,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-maxmempool=<n>\", strprintf(\"Keep the transaction memory pool below <n> megabytes (default: %u)\", DEFAULT_MAX_MEMPOOL_SIZE), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-maxorphantx=<n>\", strprintf(\"Keep at most <n> unconnectable transactions in memory (default: %u)\", DEFAULT_MAX_ORPHAN_TRANSACTIONS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-mempoolexpiry=<n>\", strprintf(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\", DEFAULT_MEMPOOL_EXPIRY), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n+    argsman.AddArg(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s, signet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex(), signetChainParams->GetConsensus().nMinimumChainWork.GetHex()), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-par=<n>\", strprintf(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\",\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -455,7 +457,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-peerblockfilters\", strprintf(\"Serve compact block filters to peers per BIP 157 (default: %u)\", DEFAULT_PEERBLOCKFILTERS), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port> (default: %u, testnet: %u signet: %u, regtest: %u)\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -565,7 +567,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-rpcbind=<addr>[:port]\", \"Bind to given address to listen for JSON-RPC connections. Do not expose the RPC server to untrusted networks such as the public internet! This option is ignored unless -rpcallowip is also passed. Port is optional and overrides -rpcport. Use [host]:port notation for IPv6. This option can be specified multiple times (default: 127.0.0.1 and ::1 i.e., localhost)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpccookiefile=<loc>\", \"Location of the auth cookie. Relative paths will be prefixed by a net-specific datadir location. (default: data dir)\", ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcpassword=<pw>\", \"Password for JSON-RPC connections\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::RPC);\n-    argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n+    argsman.AddArg(\"-rpcport=<port>\", strprintf(\"Listen for JSON-RPC connections on <port> (default: %u, testnet: %u, signet: %u, regtest: %u)\", defaultBaseParams->RPCPort(), testnetBaseParams->RPCPort(), signetBaseParams->RPCPort(), regtestBaseParams->RPCPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcserialversion\", strprintf(\"Sets the serialization of raw transaction or block hex returned in non-verbose mode, non-segwit(0) or segwit(1) (default: %d)\", DEFAULT_RPC_SERIALIZE_VERSION), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcservertimeout=<n>\", strprintf(\"Timeout during HTTP requests (default: %d)\", DEFAULT_HTTP_SERVER_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::RPC);\n     argsman.AddArg(\"-rpcthreads=<n>\", strprintf(\"Set the number of threads to service RPC calls (default: %d)\", DEFAULT_HTTP_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::RPC);"
      }
    ]
  }
]