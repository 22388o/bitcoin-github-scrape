[
  {
    "sha": "916130348ca803d762db912307b247f60f9aacd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTYxMzAzNDhjYTgwM2Q3NjJkYjkxMjMwN2IyNDdmNjBmOWFhY2Q2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-06T16:05:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-01-07T16:09:24Z"
      },
      "message": "Introduce 10 minute block download timeout\n\nThis will disconnect peers that do not transfer a block in 10 minutes, plus\n5 minutes for every previously queued block with validated headers\n(accomodating downstream bandwidth down to a few kilobytes per second - below\nthat the node would have trouble staying synchronized anyway).",
      "tree": {
        "sha": "ba6b52fd0360d12df757eeebcaa23ecf85839d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba6b52fd0360d12df757eeebcaa23ecf85839d8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/916130348ca803d762db912307b247f60f9aacd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916130348ca803d762db912307b247f60f9aacd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/916130348ca803d762db912307b247f60f9aacd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/916130348ca803d762db912307b247f60f9aacd6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e4578af0fc3944bff3c77f93b6aafe3a77e6f8a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 17,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e7a339296600ae452e0558c1820ad2a76b33ea70",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/916130348ca803d762db912307b247f60f9aacd6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/916130348ca803d762db912307b247f60f9aacd6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=916130348ca803d762db912307b247f60f9aacd6",
        "patch": "@@ -139,9 +139,14 @@ namespace {\n         uint256 hash;\n         CBlockIndex *pindex;  //! Optional.\n         int64_t nTime;  //! Time of \"getdata\" request in microseconds.\n+        int nValidatedQueuedBefore;  //! Number of blocks queued with validated headers (globally) at the time this one is requested.\n+        bool fValidatedHeaders;  //! Whether this block has validated headers at the time of request.\n     };\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> > mapBlocksInFlight;\n \n+    /** Number of blocks in flight with validated headers. */\n+    int nQueuedValidatedHeaders = 0;\n+\n     /** Number of preferable block download peers. */\n     int nPreferredDownload = 0;\n \n@@ -323,6 +328,7 @@ void MarkBlockAsReceived(const uint256& hash) {\n     map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator itInFlight = mapBlocksInFlight.find(hash);\n     if (itInFlight != mapBlocksInFlight.end()) {\n         CNodeState *state = State(itInFlight->second.first);\n+        nQueuedValidatedHeaders -= itInFlight->second.second->fValidatedHeaders;\n         state->vBlocksInFlight.erase(itInFlight->second.second);\n         state->nBlocksInFlight--;\n         state->nStallingSince = 0;\n@@ -338,7 +344,8 @@ void MarkBlockAsInFlight(NodeId nodeid, const uint256& hash, CBlockIndex *pindex\n     // Make sure it's not listed somewhere already.\n     MarkBlockAsReceived(hash);\n \n-    QueuedBlock newentry = {hash, pindex, GetTimeMicros()};\n+    QueuedBlock newentry = {hash, pindex, GetTimeMicros(), nQueuedValidatedHeaders, pindex != NULL};\n+    nQueuedValidatedHeaders += newentry.fValidatedHeaders;\n     list<QueuedBlock>::iterator it = state->vBlocksInFlight.insert(state->vBlocksInFlight.end(), newentry);\n     state->nBlocksInFlight++;\n     mapBlocksInFlight[hash] = std::make_pair(nodeid, it);\n@@ -4527,6 +4534,15 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             LogPrintf(\"Peer=%d is stalling block download, disconnecting\\n\", pto->id);\n             pto->fDisconnect = true;\n         }\n+        // In case there is a block that has been in flight from this peer for (1 + 0.5 * N) times the block interval\n+        // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n+        // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n+        // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n+        // to unreasonably increase our timeout.\n+        if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * Params().TargetSpacing() * (2 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n+            LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);\n+            pto->fDisconnect = true;\n+        }\n \n         //\n         // Message: getdata (blocks)"
      }
    ]
  }
]