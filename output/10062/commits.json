[
  {
    "sha": "899476b3bdcf655430d11c736294fd1a8369f5b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTk0NzZiM2JkY2Y2NTU0MzBkMTFjNzM2Mjk0ZmQxYTgzNjlmNWI1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-03-23T06:05:13Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-03-23T06:05:13Z"
      },
      "message": "[net] Clean up the net.h file.",
      "tree": {
        "sha": "b64e360c092374b20bb2bc57a206fc1910e15535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b64e360c092374b20bb2bc57a206fc1910e15535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/899476b3bdcf655430d11c736294fd1a8369f5b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJY02WaAAoJEFevdi2zNTMiEREQAIn/zuP1mKfzy8/RLjWCRuC/\nkYgA9/eoX606Gc7jNakqgV6E7TdHj8/Q0E7ykzdjK1BpCtKUIoZDaGM7A0j0IvQS\nc+MF67kIvZi/xo4LY9dUKu22XT1vVlD8miBk+8W7smXfXKABeUl7hXUHGCUf5kTk\nFp58wsXSXJwpqJRAv9xwzgaySPWhO4X2WBofAZ3XwAlzrFwGgAzMnzGO7efgWQly\nrurDDIfTrw9hwT8c7vBi7uywmqP9BM6NWToWqFTYoAQpaMYmNmHi/9XUa6xqlDkV\nmAZcvOlCARFxxwZEydpyMNP/UohmIJTDWK/SiD5ex/dY+RECqwVn+/JnlsyF7KTS\n1IUSU/+Yl9RJ2s+ZDwLG1bsWkXyY0Ds8fepOc/5NkdUN1wKhVUe07fCBmp99pLGP\npmFv38uyU4v2xZS+3ehDTiYGsyq89kGHUhCHfYp3nfQNoYTPNhJhjGTNGikc25TI\nGIka+EBNYMzMosUy9Q9+NszFto0SbZQO+s8VNXMfzSYyzBZLHs+2G7RlgFIt2exi\nif1ud4Uyaz/M1aeo8PZdQgpglRqp5gvFzCWqbIZsiTp5PnGI2uKGBv8hBfEB8lCP\nvQU8IHN0cK9vDd4qUHPnN1B4+JvVN2PXc3JoEjck42U6+XOOb8+XCrkUXjxNKPkn\nIkxp5+CTELA9l0puuCha\n=Mdeo\n-----END PGP SIGNATURE-----",
        "payload": "tree b64e360c092374b20bb2bc57a206fc1910e15535\nparent 02d64bd929c9663ba38e96721c6dbd89972d043d\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1490249113 -0700\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1490249113 -0700\n\n[net] Clean up the net.h file.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899476b3bdcf655430d11c736294fd1a8369f5b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/899476b3bdcf655430d11c736294fd1a8369f5b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/899476b3bdcf655430d11c736294fd1a8369f5b5/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02d64bd929c9663ba38e96721c6dbd89972d043d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02d64bd929c9663ba38e96721c6dbd89972d043d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02d64bd929c9663ba38e96721c6dbd89972d043d"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 83,
      "deletions": 131
    },
    "files": [
      {
        "sha": "b3966476a2cd3dec8fe581024741967a570fbf8d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/899476b3bdcf655430d11c736294fd1a8369f5b5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/899476b3bdcf655430d11c736294fd1a8369f5b5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=899476b3bdcf655430d11c736294fd1a8369f5b5",
        "patch": "@@ -628,7 +628,7 @@ void CNode::SetAddrLocal(const CService& addrLocalIn) {\n \n #undef X\n #define X(name) stats.name = name\n-void CNode::copyStats(CNodeStats &stats)\n+void CNode::CopyStats(CNodeStats &stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n@@ -2467,7 +2467,7 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n         CNode* pnode = *it;\n         vstats.emplace_back();\n-        pnode->copyStats(vstats.back());\n+        pnode->CopyStats(vstats.back());\n     }\n }\n \n@@ -2619,17 +2619,17 @@ unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n+    nLocalHostNonce(nLocalHostNonceIn),\n+    nLocalServices(nLocalServicesIn),\n+    nMyStartingHeight(nMyStartingHeightIn),\n+    nSendVersion(0),\n     nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     fInbound(fInboundIn),\n     id(idIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n-    filterInventoryKnown(50000, 0.000001),\n-    nLocalHostNonce(nLocalHostNonceIn),\n-    nLocalServices(nLocalServicesIn),\n-    nMyStartingHeight(nMyStartingHeightIn),\n-    nSendVersion(0)\n+    filterInventoryKnown(50000, 0.000001)\n {\n     nServices = NODE_NONE;\n     nServicesExpected = NODE_NONE;"
      },
      {
        "sha": "697ed9a0b874430b58348df8032abd6ab2bd5c73",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 76,
        "deletions": 124,
        "changes": 200,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/899476b3bdcf655430d11c736294fd1a8369f5b5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/899476b3bdcf655430d11c736294fd1a8369f5b5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=899476b3bdcf655430d11c736294fd1a8369f5b5",
        "patch": "@@ -559,14 +559,36 @@ class CNetMessage {\n /** Information about a peer */\n class CNode\n {\n+private:\n     friend class CConnman;\n+\n+    const uint64_t nLocalHostNonce;\n+\n+    const ServiceFlags nLocalServices;      ///< Services offered to this peer\n+    const int nMyStartingHeight;\n+    int nSendVersion;\n+    std::list<CNetMessage> vRecvMsg;        ///< Used only by SocketHandler thread\n+\n+    mutable CCriticalSection cs_addrName;\n+    std::string addrName;\n+\n+    CService addrLocal;\n+    mutable CCriticalSection cs_addrLocal;\n+\n+    CNode(const CNode&);\n+    void operator=(const CNode&);\n+\n+protected:\n+    mapMsgCmdSize mapSendBytesPerMsgCmd;\n+    mapMsgCmdSize mapRecvBytesPerMsgCmd;\n+\n public:\n     // socket\n     std::atomic<ServiceFlags> nServices;\n     ServiceFlags nServicesExpected;\n     SOCKET hSocket;\n-    size_t nSendSize; // total size of all vSendMsg entries\n-    size_t nSendOffset; // offset inside the first vSendMsg already sent\n+    size_t nSendSize;                       ///< total size of all vSendMsg entries\n+    size_t nSendOffset;                     ///< offset inside the first vSendMsg already sent\n     uint64_t nSendBytes;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n@@ -589,25 +611,31 @@ class CNode\n     std::atomic<int64_t> nTimeOffset;\n     const CAddress addr;\n     std::atomic<int> nVersion;\n-    // strSubVer is whatever byte array we read from the wire. However, this field is intended\n-    // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n-    // store the sanitized version in cleanSubVer. The original should be used when dealing with\n-    // the network or wire types and the cleaned string used when displayed or logged.\n-    std::string strSubVer, cleanSubVer;\n-    CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n-    bool fWhitelisted; // This peer can bypass DoS banning.\n-    bool fFeeler; // If true this node is being used as a short lived feeler.\n+    /**\n+     * strSubVer is whatever byte array we read from the wire. However, this field is intended\n+     * to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n+     * store the sanitized version in cleanSubVer. The original should be used when dealing with\n+     * the network or wire types and the cleaned string used when displayed or logged.\n+     */\n+    std::string strSubVer;\n+    std::string cleanSubVer;\n+    CCriticalSection cs_SubVer;             ///< Used for both cleanSubVer and strSubVer\n+    bool fWhitelisted;                      ///< This peer can bypass DoS banning.\n+    bool fFeeler;                           ///< If true this node is being used as a short lived feeler.\n     bool fOneShot;\n     bool fAddnode;\n     bool fClient;\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;\n     std::atomic_bool fDisconnect;\n-    // We use fRelayTxes for two purposes -\n-    // a) it allows us to not relay tx invs before receiving the peer's version message\n-    // b) the peer may tell us in its version message that we should not relay tx invs\n-    //    unless it loads a bloom filter.\n-    bool fRelayTxes; //protected by cs_filter\n+    /**\n+     * We use fRelayTxes for two purposes -\n+     * a) it allows us to not relay tx invs before receiving the peer's version message\n+     * b) the peer may tell us in its version message that we should not relay tx invs\n+     *    unless it loads a bloom filter.\n+     * Protected by cs_filter.\n+     */\n+    bool fRelayTxes;\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n@@ -618,12 +646,7 @@ class CNode\n     const uint64_t nKeyedNetGroup;\n     std::atomic_bool fPauseRecv;\n     std::atomic_bool fPauseSend;\n-protected:\n-\n-    mapMsgCmdSize mapSendBytesPerMsgCmd;\n-    mapMsgCmdSize mapRecvBytesPerMsgCmd;\n \n-public:\n     uint256 hashContinue;\n     std::atomic<int> nStartingHeight;\n \n@@ -635,24 +658,28 @@ class CNode\n     int64_t nNextAddrSend;\n     int64_t nNextLocalAddrSend;\n \n-    // inventory based relay\n-    CRollingBloomFilter filterInventoryKnown;\n-    // Set of transaction ids we still have to announce.\n-    // They are sorted by the mempool before relay, so the order is not important.\n+    CRollingBloomFilter filterInventoryKnown; ///< inventory based relay\n+    /**\n+     * Set of transaction ids we still have to announce.\n+     * They are sorted by the mempool before relay, so the order is not important.\n+     */\n     std::set<uint256> setInventoryTxToSend;\n-    // List of block ids we still have announce.\n-    // There is no final sorting before sending, as they are always sent immediately\n-    // and in the order requested.\n+    /**\n+     * List of block ids we still have to announce.\n+     * There is no final sorting before sending, as they are always sent immediately\n+     * and in the order requested.\n+     */\n     std::vector<uint256> vInventoryBlockToSend;\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n     int64_t nNextInvSend;\n-    // Used for headers announcements - unfiltered blocks to relay\n-    // Also protected by cs_inventory\n+    /**\n+     * Used for headers announcements - unfiltered blocks to relay.\n+     * Also protected by cs_inventory\n+     */\n     std::vector<uint256> vBlockHashesToAnnounce;\n-    // Used for BIP35 mempool sending, also protected by cs_inventory\n-    bool fSendMempool;\n+    bool fSendMempool;                      ///< Used for BIP35 mempool sending, also protected by cs_inventory\n \n     // Last time a \"MEMPOOL\" request was serviced.\n     std::atomic<int64_t> timeLastMempoolReq;\n@@ -662,97 +689,40 @@ class CNode\n     std::atomic<int64_t> nLastTXTime;\n \n     // Ping time measurement:\n-    // The pong reply we're expecting, or 0 if no pong expected.\n-    std::atomic<uint64_t> nPingNonceSent;\n-    // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    std::atomic<int64_t> nPingUsecStart;\n-    // Last measured round-trip time.\n-    std::atomic<int64_t> nPingUsecTime;\n-    // Best measured round-trip time.\n-    std::atomic<int64_t> nMinPingUsecTime;\n-    // Whether a ping is requested.\n-    std::atomic<bool> fPingQueued;\n-    // Minimum fee rate with which to filter inv's to this node\n-    CAmount minFeeFilter;\n+    std::atomic<uint64_t> nPingNonceSent;   ///< The pong reply we're expecting, or 0 if no pong expected.\n+    std::atomic<int64_t> nPingUsecStart;    ///< Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n+    std::atomic<int64_t> nPingUsecTime;     ///< Last measured round-trip time.\n+    std::atomic<int64_t> nMinPingUsecTime;  ///< Best measured round-trip time.\n+    std::atomic<bool> fPingQueued;          ///< Whether a ping is requested.\n+    CAmount minFeeFilter;                   ///< Minimum fee rate with which to filter inv's to this node\n     CCriticalSection cs_feeFilter;\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n-private:\n-    CNode(const CNode&);\n-    void operator=(const CNode&);\n-\n-\n-    const uint64_t nLocalHostNonce;\n-    // Services offered to this peer\n-    const ServiceFlags nLocalServices;\n-    const int nMyStartingHeight;\n-    int nSendVersion;\n-    std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n-\n-    mutable CCriticalSection cs_addrName;\n-    std::string addrName;\n-\n-    CService addrLocal;\n-    mutable CCriticalSection cs_addrLocal;\n-public:\n-\n-    NodeId GetId() const {\n-      return id;\n-    }\n+    NodeId GetId()                        const { return id; }\n+    uint64_t GetLocalNonce()              const { return nLocalHostNonce; }\n+    int GetMyStartingHeight()             const { return nMyStartingHeight; }\n+    ServiceFlags GetLocalServices()       const { return nLocalServices; }\n \n-    uint64_t GetLocalNonce() const {\n-      return nLocalHostNonce;\n-    }\n-\n-    int GetMyStartingHeight() const {\n-      return nMyStartingHeight;\n-    }\n-\n-    int GetRefCount()\n-    {\n-        assert(nRefCount >= 0);\n-        return nRefCount;\n-    }\n+    int GetRefCount()                           { assert(nRefCount >= 0); return nRefCount; }\n+    void SetRecvVersion(int nVersionIn)         { nRecvVersion = nVersionIn; }\n+    int GetRecvVersion()                        { return nRecvVersion; }\n+    CNode* AddRef()                             { nRefCount++; return this; }\n+    void Release()                              { nRefCount--; }\n+    void AddAddressKnown(const CAddress& _addr) { addrKnown.insert(_addr.GetKey()); }\n+    void AddInventoryKnown(const CInv& inv)     { LOCK(cs_inventory); filterInventoryKnown.insert(inv.hash); }\n \n     bool ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete);\n-\n-    void SetRecvVersion(int nVersionIn)\n-    {\n-        nRecvVersion = nVersionIn;\n-    }\n-    int GetRecvVersion()\n-    {\n-        return nRecvVersion;\n-    }\n     void SetSendVersion(int nVersionIn);\n     int GetSendVersion() const;\n \n     CService GetAddrLocal() const;\n     //! May not be called more than once\n     void SetAddrLocal(const CService& addrLocalIn);\n \n-    CNode* AddRef()\n-    {\n-        nRefCount++;\n-        return this;\n-    }\n-\n-    void Release()\n-    {\n-        nRefCount--;\n-    }\n-\n-\n-\n-    void AddAddressKnown(const CAddress& _addr)\n-    {\n-        addrKnown.insert(_addr.GetKey());\n-    }\n-\n     void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)\n     {\n         // Known checking here is only to save space from duplicates.\n@@ -767,15 +737,6 @@ class CNode\n         }\n     }\n \n-\n-    void AddInventoryKnown(const CInv& inv)\n-    {\n-        {\n-            LOCK(cs_inventory);\n-            filterInventoryKnown.insert(inv.hash);\n-        }\n-    }\n-\n     void PushInventory(const CInv& inv)\n     {\n         LOCK(cs_inventory);\n@@ -798,22 +759,13 @@ class CNode\n \n     void CloseSocketDisconnect();\n \n-    void copyStats(CNodeStats &stats);\n-\n-    ServiceFlags GetLocalServices() const\n-    {\n-        return nLocalServices;\n-    }\n+    void CopyStats(CNodeStats &stats);\n \n     std::string GetAddrName() const;\n     //! Sets the addrName only if it was not previously set\n     void MaybeSetAddrName(const std::string& addrNameIn);\n };\n \n-\n-\n-\n-\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);\n "
      }
    ]
  }
]