petertodd,2013-09-23T13:43:28Z,@mikehearn I wrote up that proof-of-tx propagation idea we talked about a few weeks ago and posted it to the email list.\n\nGiven that fee estimation is still going to result in users getting their transactions stuck with few ways to fix the problem I think we'd be much better off pursuing tx-replacement first rather than easily sybilled fee estimation. Replacement can be implemented in a zero-con,https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24920395,24920395,
gavinandresen,2013-09-23T19:30:46Z,"@petertodd:  re: replacement: I haven't seen any reports of people using un-hacked reference code having transactions permanently stuck, so I don't see any need for transaction replacement yet. And this code should be strictly better at getting the fee or priority right the first time than the hard-coded rules we have now.\n\n@mikehearn: a 'txrejected' message when refusing to relay a transaction ",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24947299,24947299,
petertodd,2013-09-23T22:43:09Z,"@gavinandresen I've seen them get stuck for a dozen blocks - pretty poor user experience. No amount of fee estimation can predict the future, IE the network getting backlogged due to a string of bad luck.\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24961518,24961518,
sipa,2013-09-23T22:44:51Z,"I think getting wallets to deal well with non-confirming transactions is required for this anyway. We should detect conflicts of wallets with the mempool and the blockchain, and be able to mark non-confirming transactions as dead. If we have that, we'll have much more freedom to experiment with things like this.\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24961638,24961638,
petertodd,2013-09-23T22:56:51Z,"@sipa https://github.com/bitcoin/bitcoin/pull/2596 was going to be able to better handle those cases, although I haven't seen any action on that patch lately.\n\nI think the correct logic is for the wallet to replace any existing transaction it sees with another transparently provided that at least one input is conflicting (making it not possible for both to be mined) and all outputs with scriptPu",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24962258,24962258,
luke-jr,2013-09-23T23:01:12Z,"Is there a summary of the logic used? How does it handle out-of-band mining arrangements, spam filters that use different logic than its own, etc?\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24962486,24962486,
sipa,2013-09-23T23:06:19Z,"@luke-jr That's the reason for suggesting looking at transaction remaining in the memory pool, rather than transactions being accepted.\n\nSee it this way: the P2P network is one way to distribute transactions to miners, but we shouldn't assume it's the only one. The memory pool is how we observe this distribution channel specifically. The block chain is the result of all miner's transactions comb",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24962795,24962795,
petertodd,2013-09-23T23:25:58Z,@sipa @luke-jr That's not what this patch implements: https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R19 and https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R340 - tx estimate data is added when a transaction is included in a block. Any miner who is accepting out-of-band payment for transactions previous,https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24963784,24963784,
sipa,2013-09-23T23:32:29Z,"@petertodd Oh, I didn't claim this patch did. Just explaining why I suggested using not-included-transactions (which Gavin mentioned in the pullreq).\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24964095,24964095,
sipa,2013-09-23T23:34:41Z,"@gavinandresen Maybe looking at mined transactions gives a bit better estimation than by looking at those that don't, but if that means a system that is more easily gamed (which is what it seems, to me), that's not necessarily worth it.\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24964200,24964200,
petertodd,2013-09-23T23:39:41Z,"@sipa Oh, sorry. Agreed on disliking easily gamed systems, especially given that we've got some fairly large transaction makers like bc.i who might very well have enough volume to create large amounts of out-of-band payments. (@luke-jr eligius has an agreement with mt. gox or something to mine tx's right?)\n\nAnyway, the tx's getting stuck by accident problem is a good enough reason to do things d",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24964444,24964444,
petertodd,2013-09-23T23:52:37Z,"@luke-jr Also come to think of it the estimation code can't handle child-pays-for-parent properly either, particularly cases where one child pays for multiple parents. Similarly it doesn't properly handle anomalies in the average fee-per-kb paid by larger transactions compared to smaller ones, which will be the case given the tendency for wallets to apply minimum fees for small transactions. (a si",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24965097,24965097,
luke-jr,2013-09-24T00:21:33Z,"@sipa On the other hand, only looking at not-included-in-blocks fails to account for better spam filters on miners (for example, many miners filter out DP spam using non-mainline algorithms). So we definitely need to consider both sides of the spectrum.\n\n@petertodd I think you have a good case that we need transaction replacement, but we also need to get away from hard-coded fees too. Until @gav",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24966361,24966361,
mikehearn,2013-09-24T08:24:22Z,"We're not going to do anything that breaks unconfirmed transactions.\n\nbitcoinj already has some support for dead tx handling, although it's incomplete/buggy. However it's for double spends. We don't have reports of transactions getting stuck due to lack of fees from people using un-modified bitcoinj based wallets. When transactions don't go through for some reason it tends to be for other reason",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24983496,24983496,
gavinandresen,2013-09-24T09:42:26Z,"@petertodd : I am not claiming that this is the perfect solution. I am claiming that it is strictly better than the code that exists in the reference implementation today. You have a habit of claiming that things are ""impossible"" and simply being wrong (estimating can easily be extended to related-groups-of-transactions instead of single transactions for parent-pays functionality, for example).\n\",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-24989399,24989399,
gmaxwell,2013-09-24T13:36:22Z,"@mikehearn ""Regular bitcoind nodes know when it's got full because they have the mempool, but other types of wallet don't."", no they don't— they don't make use of the knowledge. I suspect it wouldn't be super useful... I've never seen a stuck report that I could attribute to that.\n\n(ah, I was busily typing out saying that I couldn't believe you weren't getting stuck reports— But android wallet d",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25003508,25003508,
petertodd,2013-09-24T13:54:45Z,"@mikehearn Any users of bitcoinj out there who are often making large (1K+) transactions? Because the default rules are to have a minimum absolute transaction fee most people are paying at least twice the minimum fee/KB, and there's lots of traffic paying absolute minimums. In any case ""stuck"" is relative: if a transaction won't confirm for a few hours because everything else is paid more fees tha",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25005323,25005323,
gmaxwell,2013-09-24T13:59:13Z,"@gavinandresen  ""Child pays for parent""\n\n@petertodd you sure about that? CPFP means that a block may contain a bunch of too-low-fee transactions which just got accepted because of a high fee parent. This means that CPFP will also distort the metric here.\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25005800,25005800,
petertodd,2013-09-24T14:01:08Z,"@gmaxwell I pointed out that problem above; by ""current algorithms"" luke and I mean what is in the current version, not this patch.\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25006014,25006014,
luke-jr,2013-09-24T21:09:44Z,"@mikehearn ""Stuck"" means never confirming, not merely delayed (as is the case with no-fee transactions that don't meet the 27kB limit - eventually, they'll get to be in the highest priority 27 kB!). The delay for no-fee transactions is by-design and intentional. It's fine for mempool-less nodes.\n\n@gavinandresen Off-chain side deals: for example, MtGox publishes a list of their outstanding txids,",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25042780,25042780,
petertodd,2013-09-24T22:25:28Z,"@luke-jr You know, given you already do this for MtGox it'd be really useful if Eligius had a program that used the inputs.io API to accept off-chain payments to artificially add priority to a given txid. At the simplest you'd just have to publish an inputs.io account name (""prioritize_tx@eligius.st"") and tell people to put the txid in the ""notes"" field; pass whatever amount they pay as the argume",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25047743,25047743,
mikehearn,2013-10-04T08:42:23Z,"Mempool-less (i.e. SPV/ultralite) clients aren't going to create transactions that routinely take hours or days to confirm, that's not what users want. I don't know who or what is using the free area right now, but I guess it's not smartphone clients.\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25683827,25683827,
gavinandresen,2013-10-09T05:32:47Z,"Anybody have a good theory for why the win32 pull-tester build is breaking:\n\n```\nIn file included from /usr/lib/gcc/i586-mingw32msvc/4.2.1-sjlj/../../../../i586-mingw32msvc/include/windows.h:50,\n                 from allocators.h:23,\n                 from serialize.h:22,\n                 from core.h:9,\n                 from main.h:12,\n                 from txmempool.cpp:11:\n/usr/lib/gcc/i",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25947703,25947703,
wtogami,2013-10-09T05:53:42Z,Perhaps look into conditional situations from other preprocessor variables that cause PVECTORED_EXCEPTION_HANDLER to be defined or not.\n\n`i586-mingw32msvc-g++ -E -dM $(mktemp --suffix=.h)`\n\nYou can read the actual preprocessor defines from here.  Add more compile flags to match the exact build environment.\n,https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25948290,25948290,
wtogami,2013-10-09T05:55:28Z,I believe the concerns above pertaining to the real potential for stuck transactions from fee misestimation have not been adequately addressed.\n,https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25948333,25948333,
gavinandresen,2013-10-09T06:44:38Z,"@wtogami: RE: stuck transactions:\n\nOk, let me see if I can address those concerns.\n\nBefore this pull request, clients assume that if a transaction has a fee greater than 0.0001 XBT or a priority greater than 54million then it will be confirmed.\n\nSo, before this pull request, if transaction volumes goes up, those assumptions break, and people will see transactions never confirm.\n\nI believe ",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25949898,25949898,
wtogami,2013-10-09T07:19:25Z,i586-mingw32msvc?  Should pulltester be using that when the official win32 gitian binary will be built by 12.04's i686-w64-mingw32 instead?\n,https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25951201,25951201,
Diapolo,2013-10-09T10:31:28Z,@wtogami I agree and I'm sure Gavin and Matt are working on upgrading the @BitcoinPullTester build environment. It should match the one in our release process as close as possible IMHO.\n,https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25961045,25961045,
petertodd,2013-10-09T10:48:56Z,@gavinandresen My point was the mining code still has fixed CTransaction::nMinTxFee and CTransaction::dMinFreePriority logic; the fee estimator will happily estimate fees that are less than those minimums and transactions will get stuck in that case. If you make the fee estimation have a fixed lower bound then you'd have a system that's strictly better than the current one.\n\nAnyway right now the,https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25961921,25961921,
gavinandresen,2013-10-09T13:01:26Z,"@petertodd: RE: fixed lower:  that would ruin the entire point, which is to let fees float up or down based on miner behavior.\n\nRE: ""we have the opposite problem now"" : EXACTLY MY POINT. The hard-coded fees are not high enough to guarantee speedy transaction confirmation.\n\nRE: what to do if a transaction doesn't get relayed/mined:  I like Mike's idea of a ""txrejected"" message from your peers i",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25968848,25968848,
petertodd,2013-10-09T13:29:50Z,"@gavinandresen Both cases where I show estimatefees being fooled into a too low fee are things that can happen without actual transaction volume pressure, and result in worse outcomes than the current code; add a fixed minimum and estimate fees will never make a worse decision than the current code. Once that's done we can consider merging.\n\nLong term as I said before we need to have the ability",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-25970908,25970908,
petertodd,2013-10-10T04:44:57Z,"Also, this patch is broken right now on my system and always creates transactions with no fee at all, even on low priority coins, and even when the paytxfee option is set. (estimatefees returns fee value estimates, so I don't think it's a startup issue)\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-26028815,26028815,
mikehearn,2013-10-10T08:42:47Z,"I think it might be time to introduce a more general error message construct into the protocol. TX rejection is just one way that nodes can choose to drop or reject messages. There's also block rejection, command rejection, etc.\n\nAlthough it's a little bit more work (sorry Gavin!) it's probably not a big piece of code to spec and write. Just a new ""error"" message with some appropriate fields to ",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-26037354,26037354,
BitcoinPullTester,2013-10-11T06:01:33Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/d3f8fef5726f8588c118b7562004c93f021a2e5e for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tes",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-26116316,26116316,
gavinandresen,2013-10-11T21:32:09Z,"I'm going to close this as ""not ready for merge.""\n\nMy TODO before bringing it back:\n\n1) Test plan\n2) Figure out some way to unit test CreateTransaction and the should-a-transaction-have-a-fee logic.\n3) ""error"" protocol message\n",https://github.com/bitcoin/bitcoin/pull/3024#issuecomment-26176003,26176003,
petertodd,2013-10-09T09:59:33Z,Suggestion: call this GetSumValueOut()\n,https://github.com/bitcoin/bitcoin/pull/3024#discussion_r6851456,6851456,src/core.cpp
Diapolo,2013-10-09T10:33:22Z,Aren't similar functions in util.h or at least used there by our helper functions?\n,https://github.com/bitcoin/bitcoin/pull/3024#discussion_r6852050,6852050,src/core.h
Diapolo,2013-10-09T10:39:53Z,Any comment about these values anywhere?\n,https://github.com/bitcoin/bitcoin/pull/3024#discussion_r6852159,6852159,src/test/miner_tests.cpp
