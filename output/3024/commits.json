[
  {
    "sha": "d8315d1650373e6609cfda921160fd51f6608a99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODMxNWQxNjUwMzczZTY2MDljZmRhOTIxMTYwZmQ1MWY2NjA4YTk5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:45:59Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:48:53Z"
      },
      "message": "Remove include of windows.h from allocators.h\n\nCreate an allocators.cpp, and move all of the #ifdef WIN32\ncode and the #include of windows.h into it.\n\nTwo motives for this cleanup:\n1. I'm getting a weird error in windows.h in my smartfee branch.\n2. allocators.h is included (indirectly) just about everywhere, so\nthis should speed up Windows compiles quite a lot.",
      "tree": {
        "sha": "70a5dcccf893486bbd69dc4357021310a9d6bdb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70a5dcccf893486bbd69dc4357021310a9d6bdb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8315d1650373e6609cfda921160fd51f6608a99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8315d1650373e6609cfda921160fd51f6608a99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8315d1650373e6609cfda921160fd51f6608a99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8315d1650373e6609cfda921160fd51f6608a99/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26002aa444d4ee4986d623e0ad45cca02e803bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26002aa444d4ee4986d623e0ad45cca02e803bc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26002aa444d4ee4986d623e0ad45cca02e803bc5"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 68,
      "deletions": 54
    },
    "files": [
      {
        "sha": "49249fedc77a56f556dae1048238daab4d2126ff",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8315d1650373e6609cfda921160fd51f6608a99/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8315d1650373e6609cfda921160fd51f6608a99/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d8315d1650373e6609cfda921160fd51f6608a99",
        "patch": "@@ -31,7 +31,7 @@ obj/build.h: FORCE\n \t  $(abs_top_srcdir)\n version.o: obj/build.h\n \n-libbitcoin_a_SOURCES = addrman.cpp alert.cpp bitcoinrpc.cpp bloom.cpp \\\n+libbitcoin_a_SOURCES = addrman.cpp alert.cpp allocators.cpp bitcoinrpc.cpp bloom.cpp \\\n   chainparams.cpp checkpoints.cpp core.cpp crypter.cpp db.cpp hash.cpp \\\n   init.cpp key.cpp keystore.cpp leveldb.cpp main.cpp miner.cpp \\\n   netbase.cpp net.cpp noui.cpp protocol.cpp rpcblockchain.cpp rpcdump.cpp \\"
      },
      {
        "sha": "b239b623d8e6ebac57782ae3eb377ed2d165bf5e",
        "filename": "src/allocators.cpp",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.cpp?ref=d8315d1650373e6609cfda921160fd51f6608a99",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"allocators.h\"\n+\n+#ifdef WIN32\n+#ifdef _WIN32_WINNT\n+#undef _WIN32_WINNT\n+#endif\n+#define _WIN32_WINNT 0x0501\n+#define WIN32_LEAN_AND_MEAN 1\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n+#include <windows.h>\n+// This is used to attempt to keep keying material out of swap\n+// Note that VirtualLock does not provide this as a guarantee on Windows,\n+// but, in practice, memory that has been VirtualLock'd almost never gets written to\n+// the pagefile except in rare circumstances where memory is extremely low.\n+#else\n+#include <sys/mman.h>\n+#include <limits.h> // for PAGESIZE\n+#include <unistd.h> // for sysconf\n+#endif\n+\n+/** Determine system page size in bytes */\n+static inline size_t GetSystemPageSize()\n+{\n+    size_t page_size;\n+#if defined(WIN32)\n+    SYSTEM_INFO sSysInfo;\n+    GetSystemInfo(&sSysInfo);\n+    page_size = sSysInfo.dwPageSize;\n+#elif defined(PAGESIZE) // defined in limits.h\n+    page_size = PAGESIZE;\n+#else // assume some POSIX OS\n+    page_size = sysconf(_SC_PAGESIZE);\n+#endif\n+    return page_size;\n+}\n+\n+bool MemoryPageLocker::Lock(const void *addr, size_t len)\n+{\n+#ifdef WIN32\n+    return VirtualLock(const_cast<void*>(addr), len);\n+#else\n+    return mlock(addr, len) == 0;\n+#endif\n+}\n+\n+bool MemoryPageLocker::Unlock(const void *addr, size_t len)\n+{\n+#ifdef WIN32\n+    return VirtualUnlock(const_cast<void*>(addr), len);\n+#else\n+    return munlock(addr, len) == 0;\n+#endif\n+}\n+\n+LockedPageManager::LockedPageManager() : LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n+{\n+}\n+"
      },
      {
        "sha": "fd6f51b27eb63b9fba85b1eba0b804045eae7482",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 3,
        "deletions": 53,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8315d1650373e6609cfda921160fd51f6608a99/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=d8315d1650373e6609cfda921160fd51f6608a99",
        "patch": "@@ -11,25 +11,6 @@\n #include <map>\n #include <openssl/crypto.h> // for OPENSSL_cleanse()\n \n-#ifdef WIN32\n-#ifdef _WIN32_WINNT\n-#undef _WIN32_WINNT\n-#endif\n-#define _WIN32_WINNT 0x0501\n-#define WIN32_LEAN_AND_MEAN 1\n-#ifndef NOMINMAX\n-#define NOMINMAX\n-#endif\n-#include <windows.h>\n-// This is used to attempt to keep keying material out of swap\n-// Note that VirtualLock does not provide this as a guarantee on Windows,\n-// but, in practice, memory that has been VirtualLock'd almost never gets written to\n-// the pagefile except in rare circumstances where memory is extremely low.\n-#else\n-#include <sys/mman.h>\n-#include <limits.h> // for PAGESIZE\n-#include <unistd.h> // for sysconf\n-#endif\n \n /**\n  * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n@@ -115,21 +96,6 @@ template <class Locker> class LockedPageManagerBase\n     Histogram histogram;\n };\n \n-/** Determine system page size in bytes */\n-static inline size_t GetSystemPageSize()\n-{\n-    size_t page_size;\n-#if defined(WIN32)\n-    SYSTEM_INFO sSysInfo;\n-    GetSystemInfo(&sSysInfo);\n-    page_size = sSysInfo.dwPageSize;\n-#elif defined(PAGESIZE) // defined in limits.h\n-    page_size = PAGESIZE;\n-#else // assume some POSIX OS\n-    page_size = sysconf(_SC_PAGESIZE);\n-#endif\n-    return page_size;\n-}\n \n /**\n  * OS-dependent memory page locking/unlocking.\n@@ -141,25 +107,11 @@ class MemoryPageLocker\n     /** Lock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Lock(const void *addr, size_t len)\n-    {\n-#ifdef WIN32\n-        return VirtualLock(const_cast<void*>(addr), len);\n-#else\n-        return mlock(addr, len) == 0;\n-#endif\n-    }\n+    bool Lock(const void *addr, size_t len);\n     /** Unlock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Unlock(const void *addr, size_t len)\n-    {\n-#ifdef WIN32\n-        return VirtualUnlock(const_cast<void*>(addr), len);\n-#else\n-        return munlock(addr, len) == 0;\n-#endif\n-    }\n+    bool Unlock(const void *addr, size_t len);\n };\n \n /**\n@@ -171,9 +123,7 @@ class LockedPageManager: public LockedPageManagerBase<MemoryPageLocker>\n public:\n     static LockedPageManager instance; // instantiated in util.cpp\n private:\n-    LockedPageManager():\n-        LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n-    {}\n+    LockedPageManager();\n };\n \n //"
      }
    ]
  },
  {
    "sha": "862399bd337dd7305057d18ac1b549eddb08cdad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjIzOTliZDMzN2RkNzMwNTA1N2QxOGFjMWI1NDllZGRiMDhjZGFk",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-27T06:12:43Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "Send multiple inv messages if mempool.size > MAX_INV_SZ\n\nChanges the response to the 'mempool' command so that if\nthe memory pool has more than MAX_INV_SZ transactions (50,000)\nit will respond with multiple 'inv' messages.",
      "tree": {
        "sha": "c9ffe095a6154570199d299423e8ecbe57e77c59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9ffe095a6154570199d299423e8ecbe57e77c59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/862399bd337dd7305057d18ac1b549eddb08cdad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/862399bd337dd7305057d18ac1b549eddb08cdad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/862399bd337dd7305057d18ac1b549eddb08cdad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/862399bd337dd7305057d18ac1b549eddb08cdad/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8315d1650373e6609cfda921160fd51f6608a99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8315d1650373e6609cfda921160fd51f6608a99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8315d1650373e6609cfda921160fd51f6608a99"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34b5d08a7635d771d8370dfb86dd07d6e1eb50ae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/862399bd337dd7305057d18ac1b549eddb08cdad/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/862399bd337dd7305057d18ac1b549eddb08cdad/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=862399bd337dd7305057d18ac1b549eddb08cdad",
        "patch": "@@ -3833,8 +3833,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(mempool.lookup(hash), hash)) ||\n                (!pfrom->pfilter))\n                 vInv.push_back(inv);\n-            if (vInv.size() == MAX_INV_SZ)\n-                break;\n+            if (vInv.size() == MAX_INV_SZ) {\n+                pfrom->PushMessage(\"inv\", vInv);\n+                vInv.clear();\n+            }\n         }\n         if (vInv.size() > 0)\n             pfrom->PushMessage(\"inv\", vInv);"
      }
    ]
  },
  {
    "sha": "0a13d8230687456001543fe692eec9d501f79d36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTEzZDgyMzA2ODc0NTYwMDE1NDNmZTY5MmVlYzlkNTAxZjc5ZDM2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-27T05:51:57Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "Refactor: CTxMempool class to its own txmempool.{cpp,h}",
      "tree": {
        "sha": "e257edcc3f55bee6277cee8f58a59bdab3738c3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e257edcc3f55bee6277cee8f58a59bdab3738c3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a13d8230687456001543fe692eec9d501f79d36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a13d8230687456001543fe692eec9d501f79d36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a13d8230687456001543fe692eec9d501f79d36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a13d8230687456001543fe692eec9d501f79d36/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "862399bd337dd7305057d18ac1b549eddb08cdad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/862399bd337dd7305057d18ac1b549eddb08cdad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/862399bd337dd7305057d18ac1b549eddb08cdad"
      }
    ],
    "stats": {
      "total": 747,
      "additions": 390,
      "deletions": 357
    },
    "files": [
      {
        "sha": "6e1255f156552af9fdf6bbc82eeb87a67d550698",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a13d8230687456001543fe692eec9d501f79d36/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a13d8230687456001543fe692eec9d501f79d36/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0a13d8230687456001543fe692eec9d501f79d36",
        "patch": "@@ -17,7 +17,7 @@ BITCOIN_CORE_H = addrman.h alert.h allocators.h base58.h bignum.h \\\n   clientversion.h compat.h core.h crypter.h db.h hash.h init.h \\\n   key.h keystore.h leveldb.h limitedmap.h main.h miner.h mruset.h \\\n   netbase.h net.h protocol.h script.h serialize.h sync.h threadsafety.h \\\n-  txdb.h ui_interface.h uint256.h util.h version.h walletdb.h wallet.h\n+  txdb.h txmempool.h ui_interface.h uint256.h util.h version.h walletdb.h wallet.h\n \n JSON_H = json/json_spirit.h json/json_spirit_error_position.h \\\n   json/json_spirit_reader.h json/json_spirit_reader_template.h \\\n@@ -36,7 +36,7 @@ libbitcoin_a_SOURCES = addrman.cpp alert.cpp allocators.cpp bitcoinrpc.cpp bloom\n   init.cpp key.cpp keystore.cpp leveldb.cpp main.cpp miner.cpp \\\n   netbase.cpp net.cpp noui.cpp protocol.cpp rpcblockchain.cpp rpcdump.cpp \\\n   rpcmining.cpp rpcnet.cpp rpcrawtransaction.cpp rpcwallet.cpp script.cpp \\\n-  sync.cpp txdb.cpp util.cpp version.cpp wallet.cpp walletdb.cpp $(JSON_H) \\\n+  sync.cpp txdb.cpp txmempool.cpp util.cpp version.cpp wallet.cpp walletdb.cpp $(JSON_H) \\\n   $(BITCOIN_CORE_H)\n \n nodist_libbitcoin_a_SOURCES = $(top_srcdir)/src/obj/build.h"
      },
      {
        "sha": "6e2f609fcfc77c342fa82e97ef9be31381a48ad7",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a13d8230687456001543fe692eec9d501f79d36/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a13d8230687456001543fe692eec9d501f79d36/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=0a13d8230687456001543fe692eec9d501f79d36",
        "patch": "@@ -4,6 +4,7 @@\n #ifndef CHECKQUEUE_H\n #define CHECKQUEUE_H\n \n+#include <boost/foreach.hpp>\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/locks.hpp>\n #include <boost/thread/condition_variable.hpp>"
      },
      {
        "sha": "01d1b07df441bd351b8a57a9a835eba65ca43b7e",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a13d8230687456001543fe692eec9d501f79d36/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a13d8230687456001543fe692eec9d501f79d36/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=0a13d8230687456001543fe692eec9d501f79d36",
        "patch": "@@ -4,6 +4,7 @@\n #ifndef BITCOIN_LIMITEDMAP_H\n #define BITCOIN_LIMITEDMAP_H\n \n+#include <assert.h> // TODO: remove\n #include <map>\n #include <deque>\n "
      },
      {
        "sha": "3bbc33de55c75c4c482b7895422745cc822a38e5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 312,
        "changes": 321,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a13d8230687456001543fe692eec9d501f79d36/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a13d8230687456001543fe692eec9d501f79d36/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0a13d8230687456001543fe692eec9d501f79d36",
        "patch": "@@ -3,18 +3,20 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/algorithm/string/replace.hpp>\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n+\n #include \"alert.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n+#include \"checkqueue.h\"\n #include \"db.h\"\n-#include \"txdb.h\"\n-#include \"net.h\"\n #include \"init.h\"\n+#include \"net.h\"\n+#include \"txdb.h\"\n+#include \"txmempool.h\"\n #include \"ui_interface.h\"\n-#include \"checkqueue.h\"\n-#include \"chainparams.h\"\n-#include <boost/algorithm/string/replace.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n \n using namespace std;\n using namespace boost;\n@@ -28,7 +30,6 @@ set<CWallet*> setpwalletRegistered;\n \n CCriticalSection cs_main;\n \n-CTxMemPool mempool;\n unsigned int nTransactionsUpdated = 0;\n \n map<uint256, CBlockIndex*> mapBlockIndex;\n@@ -112,14 +113,6 @@ bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n     return false;\n }\n \n-// erases transaction with the given hash from all wallets\n-void static EraseFromWallets(uint256 hash)\n-{\n-    LOCK(cs_setpwalletRegistered);\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->EraseFromWallet(hash);\n-}\n-\n // make sure all wallets know about the given transaction, in the given block\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n@@ -770,302 +763,6 @@ int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mod\n     return nMinFee;\n }\n \n-void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n-{\n-    LOCK(cs);\n-\n-    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(hashTx, 0));\n-\n-    // iterate over all COutPoints in mapNextTx whose hash equals the provided hashTx\n-    while (it != mapNextTx.end() && it->first.hash == hashTx) {\n-        coins.Spend(it->first.n); // and remove those outputs from coins\n-        it++;\n-    }\n-}\n-\n-bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectInsaneFee)\n-{\n-    if (pfMissingInputs)\n-        *pfMissingInputs = false;\n-\n-    if (!CheckTransaction(tx, state))\n-        return error(\"CTxMemPool::accept() : CheckTransaction failed\");\n-\n-    // Coinbase is only valid in a block, not as a loose transaction\n-    if (tx.IsCoinBase())\n-        return state.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));\n-\n-    // To help v0.1.5 clients who would see it as a negative number\n-    if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n-        return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n-\n-    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n-    string reason;\n-    if (Params().NetworkID() == CChainParams::MAIN && !IsStandardTx(tx, reason))\n-        return error(\"CTxMemPool::accept() : nonstandard transaction: %s\",\n-                     reason.c_str());\n-\n-    // is it already in the memory pool?\n-    uint256 hash = tx.GetHash();\n-    {\n-        LOCK(cs);\n-        if (mapTx.count(hash))\n-            return false;\n-    }\n-\n-    // Check for conflicts with in-memory transactions\n-    CTransaction* ptxOld = NULL;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n-    {\n-        COutPoint outpoint = tx.vin[i].prevout;\n-        if (mapNextTx.count(outpoint))\n-        {\n-            // Disable replacement feature for now\n-            return false;\n-\n-            // Allow replacing with a newer version of the same transaction\n-            if (i != 0)\n-                return false;\n-            ptxOld = mapNextTx[outpoint].ptx;\n-            if (IsFinalTx(*ptxOld))\n-                return false;\n-            if (!tx.IsNewerThan(*ptxOld))\n-                return false;\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                COutPoint outpoint = tx.vin[i].prevout;\n-                if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n-                    return false;\n-            }\n-            break;\n-        }\n-    }\n-\n-    {\n-        CCoinsView dummy;\n-        CCoinsViewCache view(dummy);\n-\n-        {\n-        LOCK(cs);\n-        CCoinsViewMemPool viewMemPool(*pcoinsTip, *this);\n-        view.SetBackend(viewMemPool);\n-\n-        // do we already have it?\n-        if (view.HaveCoins(hash))\n-            return false;\n-\n-        // do all inputs exist?\n-        // Note that this does not check for the presence of actual outputs (see the next check for that),\n-        // only helps filling in pfMissingInputs (to determine missing vs spent).\n-        BOOST_FOREACH(const CTxIn txin, tx.vin) {\n-            if (!view.HaveCoins(txin.prevout.hash)) {\n-                if (pfMissingInputs)\n-                    *pfMissingInputs = true;\n-                return false;\n-            }\n-        }\n-\n-        // are the actual inputs available?\n-        if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"CTxMemPool::accept() : inputs already spent\"));\n-\n-        // Bring the best block into scope\n-        view.GetBestBlock();\n-\n-        // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n-        view.SetBackend(dummy);\n-        }\n-\n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (Params().NetworkID() == CChainParams::MAIN && !AreInputsStandard(tx, view))\n-            return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n-\n-        // Note: if you modify this code to accept non-standard transactions, then\n-        // you should add code here to check that the transaction does a\n-        // reasonable number of ECDSA signature verifications.\n-\n-        int64 nFees = view.GetValueIn(tx)-GetValueOut(tx);\n-        unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-\n-        // Don't accept it if it can't get into a block\n-        int64 txMinFee = GetMinFee(tx, true, GMF_RELAY);\n-        if (fLimitFree && nFees < txMinFee)\n-            return error(\"CTxMemPool::accept() : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n-                         hash.ToString().c_str(),\n-                         nFees, txMinFee);\n-\n-        // Continuously rate-limit free transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < CTransaction::nMinRelayTxFee)\n-        {\n-            static double dFreeCount;\n-            static int64 nLastTime;\n-            int64 nNow = GetTime();\n-\n-            LOCK(cs);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n-            if (fDebug)\n-                LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n-        }\n-\n-        if (fRejectInsaneFee && nFees > CTransaction::nMinRelayTxFee * 10000)\n-            return error(\"CTxMemPool::accept() : insane fees %s, %\"PRI64d\" > %\"PRI64d,\n-                         hash.ToString().c_str(),\n-                         nFees, CTransaction::nMinRelayTxFee * 10000);\n-\n-        // Check against previous transactions\n-        // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC))\n-        {\n-            return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().c_str());\n-        }\n-    }\n-\n-    // Store transaction in memory\n-    {\n-        LOCK(cs);\n-        if (ptxOld)\n-        {\n-            LogPrint(\"mempool\", \"CTxMemPool::accept() : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());\n-            remove(*ptxOld);\n-        }\n-        addUnchecked(hash, tx);\n-    }\n-\n-    ///// are we sure this is ok when loading transactions or restoring block txes\n-    // If updated, erase old tx from wallet\n-    if (ptxOld)\n-        EraseFromWallets(ptxOld->GetHash());\n-    SyncWithWallets(hash, tx, NULL, true);\n-\n-    LogPrint(\"mempool\", \"CTxMemPool::accept() : accepted %s (poolsz %\"PRIszu\")\\n\",\n-           hash.ToString().c_str(),\n-           mapTx.size());\n-    return true;\n-}\n-\n-\n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTransaction &tx)\n-{\n-    // Add to memory pool without checking anything.  Don't call this directly,\n-    // call CTxMemPool::accept to properly check the transaction first.\n-    {\n-        mapTx[hash] = tx;\n-        for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            mapNextTx[tx.vin[i].prevout] = CInPoint(&mapTx[hash], i);\n-        nTransactionsUpdated++;\n-    }\n-    return true;\n-}\n-\n-\n-bool CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n-{\n-    // Remove transaction from memory pool\n-    {\n-        LOCK(cs);\n-        uint256 hash = tx.GetHash();\n-        if (fRecursive) {\n-            for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-                std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n-                if (it != mapNextTx.end())\n-                    remove(*it->second.ptx, true);\n-            }\n-        }\n-        if (mapTx.count(hash))\n-        {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                mapNextTx.erase(txin.prevout);\n-            mapTx.erase(hash);\n-            nTransactionsUpdated++;\n-        }\n-    }\n-    return true;\n-}\n-\n-bool CTxMemPool::removeConflicts(const CTransaction &tx)\n-{\n-    // Remove transactions which depend on inputs of tx, recursively\n-    LOCK(cs);\n-    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n-        std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n-        if (it != mapNextTx.end()) {\n-            const CTransaction &txConflict = *it->second.ptx;\n-            if (txConflict != tx)\n-                remove(txConflict, true);\n-        }\n-    }\n-    return true;\n-}\n-\n-void CTxMemPool::clear()\n-{\n-    LOCK(cs);\n-    mapTx.clear();\n-    mapNextTx.clear();\n-    ++nTransactionsUpdated;\n-}\n-\n-bool CTxMemPool::fChecks = false;\n-\n-void CTxMemPool::check(CCoinsViewCache *pcoins) const\n-{\n-    if (!fChecks)\n-        return;\n-\n-    LogPrintf(\"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n-\n-    LOCK(cs);\n-    for (std::map<uint256, CTransaction>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n-        unsigned int i = 0;\n-        BOOST_FOREACH(const CTxIn &txin, it->second.vin) {\n-            // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n-            if (it2 != mapTx.end()) {\n-                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());\n-            } else {\n-                CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n-                assert(coins.IsAvailable(txin.prevout.n));\n-            }\n-            // Check whether its inputs are marked in mapNextTx.\n-            std::map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);\n-            assert(it3 != mapNextTx.end());\n-            assert(it3->second.ptx == &it->second);\n-            assert(it3->second.n == i);\n-            i++;\n-        }\n-    }\n-    for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n-        uint256 hash = it->second.ptx->GetHash();\n-        std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(hash);\n-        assert(it2 != mapTx.end());\n-        assert(&it2->second == it->second.ptx);\n-        assert(it2->second.vin.size() > it->second.n);\n-        assert(it->first == it->second.ptx->vin[it->second.n].prevout);\n-    }\n-}\n-\n-void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n-{\n-    vtxid.clear();\n-\n-    LOCK(cs);\n-    vtxid.reserve(mapTx.size());\n-    for (map<uint256, CTransaction>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n-        vtxid.push_back((*mi).first);\n-}\n-\n-\n \n \n int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const"
      },
      {
        "sha": "f045931f82f4bbbe1d828e9cc122b85be7dbbbe0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 43,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a13d8230687456001543fe692eec9d501f79d36/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a13d8230687456001543fe692eec9d501f79d36/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0a13d8230687456001543fe692eec9d501f79d36",
        "patch": "@@ -12,20 +12,20 @@\n #include \"core.h\"\n #include \"bignum.h\"\n #include \"sync.h\"\n+#include \"txmempool.h\"\n #include \"net.h\"\n #include \"script.h\"\n \n #include <list>\n \n-class CWallet;\n+class CAddress;\n class CBlock;\n class CBlockIndex;\n-class CKeyItem;\n-class CReserveKey;\n-\n-class CAddress;\n class CInv;\n+class CKeyItem;\n class CNode;\n+class CReserveKey;\n+class CWallet;\n \n struct CBlockIndexWorkComparator;\n \n@@ -1074,44 +1074,6 @@ class CBlockLocator\n \n \n \n-\n-\n-class CTxMemPool\n-{\n-public:\n-    static bool fChecks;\n-    mutable CCriticalSection cs;\n-    std::map<uint256, CTransaction> mapTx;\n-    std::map<COutPoint, CInPoint> mapNextTx;\n-\n-    bool accept(CValidationState &state, const CTransaction &tx, bool fLimitFree, bool* pfMissingInputs, bool fRejectInsaneFee = false);\n-    bool addUnchecked(const uint256& hash, const CTransaction &tx);\n-    bool remove(const CTransaction &tx, bool fRecursive = false);\n-    bool removeConflicts(const CTransaction &tx);\n-    void clear();\n-    void queryHashes(std::vector<uint256>& vtxid);\n-    void pruneSpent(const uint256& hash, CCoins &coins);\n-    void check(CCoinsViewCache *pcoins) const;\n-\n-    unsigned long size()\n-    {\n-        LOCK(cs);\n-        return mapTx.size();\n-    }\n-\n-    bool exists(uint256 hash)\n-    {\n-        return (mapTx.count(hash) != 0);\n-    }\n-\n-    CTransaction& lookup(uint256 hash)\n-    {\n-        return mapTx[hash];\n-    }\n-};\n-\n-extern CTxMemPool mempool;\n-\n struct CCoinsStats\n {\n     int nHeight;"
      },
      {
        "sha": "b1f325022a20aea9c576e7e7a9b7e6b88b4789cf",
        "filename": "src/txmempool.cpp",
        "status": "added",
        "additions": 311,
        "deletions": 0,
        "changes": 311,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a13d8230687456001543fe692eec9d501f79d36/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a13d8230687456001543fe692eec9d501f79d36/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0a13d8230687456001543fe692eec9d501f79d36",
        "patch": "@@ -0,0 +1,311 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"wallet.h\"\n+\n+CTxMemPool mempool;\n+\n+// erases transaction with the given hash from all wallets\n+void static EraseFromWallets(uint256 hash)\n+{\n+    LOCK(cs_setpwalletRegistered);\n+    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n+        pwallet->EraseFromWallet(hash);\n+}\n+\n+void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n+{\n+    LOCK(cs);\n+\n+    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(hashTx, 0));\n+\n+    // iterate over all COutPoints in mapNextTx whose hash equals the provided hashTx\n+    while (it != mapNextTx.end() && it->first.hash == hashTx) {\n+        coins.Spend(it->first.n); // and remove those outputs from coins\n+        it++;\n+    }\n+}\n+\n+bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, bool fRejectInsaneFee)\n+{\n+    if (pfMissingInputs)\n+        *pfMissingInputs = false;\n+\n+    if (!CheckTransaction(tx, state))\n+        return error(\"CTxMemPool::accept() : CheckTransaction failed\");\n+\n+    // Coinbase is only valid in a block, not as a loose transaction\n+    if (tx.IsCoinBase())\n+        return state.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));\n+\n+    // To help v0.1.5 clients who would see it as a negative number\n+    if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n+        return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n+\n+    // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n+    string reason;\n+    if (Params().NetworkID() == CChainParams::MAIN && !IsStandardTx(tx, reason))\n+        return error(\"CTxMemPool::accept() : nonstandard transaction: %s\",\n+                     reason.c_str());\n+\n+    // is it already in the memory pool?\n+    uint256 hash = tx.GetHash();\n+    {\n+        LOCK(cs);\n+        if (mapTx.count(hash))\n+            return false;\n+    }\n+\n+    // Check for conflicts with in-memory transactions\n+    CTransaction* ptxOld = NULL;\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        COutPoint outpoint = tx.vin[i].prevout;\n+        if (mapNextTx.count(outpoint))\n+        {\n+            // Disable replacement feature for now\n+            return false;\n+\n+            // Allow replacing with a newer version of the same transaction\n+            if (i != 0)\n+                return false;\n+            ptxOld = mapNextTx[outpoint].ptx;\n+            if (IsFinalTx(*ptxOld))\n+                return false;\n+            if (!tx.IsNewerThan(*ptxOld))\n+                return false;\n+            for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            {\n+                COutPoint outpoint = tx.vin[i].prevout;\n+                if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n+                    return false;\n+            }\n+            break;\n+        }\n+    }\n+\n+    {\n+        CCoinsView dummy;\n+        CCoinsViewCache view(dummy);\n+\n+        {\n+        LOCK(cs);\n+        CCoinsViewMemPool viewMemPool(*pcoinsTip, *this);\n+        view.SetBackend(viewMemPool);\n+\n+        // do we already have it?\n+        if (view.HaveCoins(hash))\n+            return false;\n+\n+        // do all inputs exist?\n+        // Note that this does not check for the presence of actual outputs (see the next check for that),\n+        // only helps filling in pfMissingInputs (to determine missing vs spent).\n+        BOOST_FOREACH(const CTxIn txin, tx.vin) {\n+            if (!view.HaveCoins(txin.prevout.hash)) {\n+                if (pfMissingInputs)\n+                    *pfMissingInputs = true;\n+                return false;\n+            }\n+        }\n+\n+        // are the actual inputs available?\n+        if (!view.HaveInputs(tx))\n+            return state.Invalid(error(\"CTxMemPool::accept() : inputs already spent\"));\n+\n+        // Bring the best block into scope\n+        view.GetBestBlock();\n+\n+        // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n+        view.SetBackend(dummy);\n+        }\n+\n+        // Check for non-standard pay-to-script-hash in inputs\n+        if (Params().NetworkID() == CChainParams::MAIN && !AreInputsStandard(tx, view))\n+            return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n+\n+        // Note: if you modify this code to accept non-standard transactions, then\n+        // you should add code here to check that the transaction does a\n+        // reasonable number of ECDSA signature verifications.\n+\n+        int64 nFees = view.GetValueIn(tx)-GetValueOut(tx);\n+        unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+\n+        // Don't accept it if it can't get into a block\n+        int64 txMinFee = GetMinFee(tx, true, GMF_RELAY);\n+        if (fLimitFree && nFees < txMinFee)\n+            return error(\"CTxMemPool::accept() : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n+                         hash.ToString().c_str(),\n+                         nFees, txMinFee);\n+\n+        // Continuously rate-limit free transactions\n+        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n+        // be annoying or make others' transactions take longer to confirm.\n+        if (fLimitFree && nFees < CTransaction::nMinRelayTxFee)\n+        {\n+            static double dFreeCount;\n+            static int64 nLastTime;\n+            int64 nNow = GetTime();\n+\n+            LOCK(cs);\n+\n+            // Use an exponentially decaying ~10-minute window:\n+            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+            nLastTime = nNow;\n+            // -limitfreerelay unit is thousand-bytes-per-minute\n+            // At default rate it would take over a month to fill 1GB\n+            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+                return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n+            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            dFreeCount += nSize;\n+        }\n+\n+        if (fRejectInsaneFee && nFees > CTransaction::nMinRelayTxFee * 10000)\n+            return error(\"CTxMemPool::accept() : insane fees %s, %\"PRI64d\" > %\"PRI64d,\n+                         hash.ToString().c_str(),\n+                         nFees, CTransaction::nMinRelayTxFee * 10000);\n+\n+        // Check against previous transactions\n+        // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n+        if (!CheckInputs(tx, state, view, true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC))\n+        {\n+            return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().c_str());\n+        }\n+    }\n+\n+    // Store transaction in memory\n+    {\n+        LOCK(cs);\n+        if (ptxOld)\n+        {\n+            LogPrint(\"mempool\", \"CTxMemPool::accept() : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());\n+            remove(*ptxOld);\n+        }\n+        addUnchecked(hash, tx);\n+    }\n+\n+    ///// are we sure this is ok when loading transactions or restoring block txes\n+    // If updated, erase old tx from wallet\n+    if (ptxOld)\n+        EraseFromWallets(ptxOld->GetHash());\n+    SyncWithWallets(hash, tx, NULL, true);\n+\n+    LogPrint(\"mempool\", \"CTxMemPool::accept() : accepted %s (poolsz %\"PRIszu\")\\n\",\n+             hash.ToString().c_str(),\n+             mapTx.size());\n+    return true;\n+}\n+\n+\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTransaction &tx)\n+{\n+    // Add to memory pool without checking anything.  Don't call this directly,\n+    // call CTxMemPool::accept to properly check the transaction first.\n+    {\n+        mapTx[hash] = tx;\n+        for (unsigned int i = 0; i < tx.vin.size(); i++)\n+            mapNextTx[tx.vin[i].prevout] = CInPoint(&mapTx[hash], i);\n+        nTransactionsUpdated++;\n+    }\n+    return true;\n+}\n+\n+\n+bool CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n+{\n+    // Remove transaction from memory pool\n+    {\n+        LOCK(cs);\n+        uint256 hash = tx.GetHash();\n+        if (fRecursive) {\n+            for (unsigned int i = 0; i < tx.vout.size(); i++) {\n+                std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n+                if (it != mapNextTx.end())\n+                    remove(*it->second.ptx, true);\n+            }\n+        }\n+        if (mapTx.count(hash))\n+        {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+                mapNextTx.erase(txin.prevout);\n+            mapTx.erase(hash);\n+            nTransactionsUpdated++;\n+        }\n+    }\n+    return true;\n+}\n+\n+bool CTxMemPool::removeConflicts(const CTransaction &tx)\n+{\n+    // Remove transactions which depend on inputs of tx, recursively\n+    LOCK(cs);\n+    BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n+        if (it != mapNextTx.end()) {\n+            const CTransaction &txConflict = *it->second.ptx;\n+            if (txConflict != tx)\n+                remove(txConflict, true);\n+        }\n+    }\n+    return true;\n+}\n+\n+void CTxMemPool::clear()\n+{\n+    LOCK(cs);\n+    mapTx.clear();\n+    mapNextTx.clear();\n+    ++nTransactionsUpdated;\n+}\n+\n+bool CTxMemPool::fChecks = false;\n+\n+void CTxMemPool::check(CCoinsViewCache *pcoins) const\n+{\n+    if (!fChecks)\n+        return;\n+\n+    LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n+\n+    LOCK(cs);\n+    for (std::map<uint256, CTransaction>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+        unsigned int i = 0;\n+        BOOST_FOREACH(const CTxIn &txin, it->second.vin) {\n+            // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n+            std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            if (it2 != mapTx.end()) {\n+                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());\n+            } else {\n+                CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n+                assert(coins.IsAvailable(txin.prevout.n));\n+            }\n+            // Check whether its inputs are marked in mapNextTx.\n+            std::map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);\n+            assert(it3 != mapNextTx.end());\n+            assert(it3->second.ptx == &it->second);\n+            assert(it3->second.n == i);\n+            i++;\n+        }\n+    }\n+    for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n+        uint256 hash = it->second.ptx->GetHash();\n+        std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(hash);\n+        assert(it2 != mapTx.end());\n+        assert(&it2->second == it->second.ptx);\n+        assert(it2->second.vin.size() > it->second.n);\n+        assert(it->first == it->second.ptx->vin[it->second.n].prevout);\n+    }\n+}\n+\n+void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n+{\n+    vtxid.clear();\n+\n+    LOCK(cs);\n+    vtxid.reserve(mapTx.size());\n+    for (map<uint256, CTransaction>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n+        vtxid.push_back((*mi).first);\n+}"
      },
      {
        "sha": "60403a763308514c0cdb011f933f8d6afe1faf80",
        "filename": "src/txmempool.h",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a13d8230687456001543fe692eec9d501f79d36/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a13d8230687456001543fe692eec9d501f79d36/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0a13d8230687456001543fe692eec9d501f79d36",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_TXMEMPOOL_H\n+#define BITCOIN_TXMEMPOOL_H\n+\n+#include \"uint256.h\"\n+\n+class CCoinsViewCache;\n+class CTransaction;\n+class CValidationState;\n+\n+/*\n+ * CTxMemPool stores valid-according-to-the-current-best-chain\n+ * transactions that may be included in the next block.\n+ * \n+ * Transactions are added when they are seen on the network\n+ * (or created by the local node), but not all transactions seen\n+ * are added to the pool: if a new transaction double-spends\n+ * an input of a transaction in the pool, it is dropped,\n+ * as are non-standard transactions.\n+ */\n+class CTxMemPool\n+{\n+public:\n+    static bool fChecks;\n+    mutable CCriticalSection cs;\n+    std::map<uint256, CTransaction> mapTx;\n+    std::map<COutPoint, CInPoint> mapNextTx;\n+\n+    bool accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                bool* pfMissingInputs, bool fRejectInsaneFee=false);\n+    bool addUnchecked(const uint256& hash, const CTransaction &tx);\n+    bool remove(const CTransaction &tx, bool fRecursive = false);\n+    bool removeConflicts(const CTransaction &tx);\n+    void clear();\n+    void queryHashes(std::vector<uint256>& vtxid);\n+    void pruneSpent(const uint256& hash, CCoins &coins);\n+    void check(CCoinsViewCache *pcoins) const;\n+\n+    unsigned long size()\n+    {\n+        LOCK(cs);\n+        return mapTx.size();\n+    }\n+\n+    bool exists(uint256 hash)\n+    {\n+        return (mapTx.count(hash) != 0);\n+    }\n+\n+    CTransaction& lookup(uint256 hash)\n+    {\n+        return mapTx[hash];\n+    }\n+};\n+\n+extern CTxMemPool mempool;\n+\n+#endif /* BITCOIN_TXMEMPOOL_H */"
      }
    ]
  },
  {
    "sha": "6c4129305bc745534a719497a3a42e6f475fc629",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzQxMjkzMDViYzc0NTUzNGE3MTk0OTdhM2E0MmU2ZjQ3NWZjNjI5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-30T02:48:09Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "Mempool refactors/cleanups\n\nRemove mempool locktime support for obsolete 0.1.5 clients\n\nRefactor: CTxMemPool::lookup\n\nlookup now returns a boolean and, if lookup is successful,\na CTransaction. Cuts down on number of lines of code and\npotential for error.\n\nIt also acquires the CriticalSection itself; I'm working towards\nmaking CTxMemPool better encapsulated.\n\nRefactor: CTxMemPool.fSanityCheck\n\nEncapsulate the sanity-check flag.",
      "tree": {
        "sha": "1d33ae72c756ed7f56d12b556ec053390070c11e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d33ae72c756ed7f56d12b556ec053390070c11e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c4129305bc745534a719497a3a42e6f475fc629",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c4129305bc745534a719497a3a42e6f475fc629",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c4129305bc745534a719497a3a42e6f475fc629",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c4129305bc745534a719497a3a42e6f475fc629/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a13d8230687456001543fe692eec9d501f79d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a13d8230687456001543fe692eec9d501f79d36",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a13d8230687456001543fe692eec9d501f79d36"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 43,
      "deletions": 23
    },
    "files": [
      {
        "sha": "2c1ffbdaf6bf095157cd1f8c4ccd5b3d0dccc5cc",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4129305bc745534a719497a3a42e6f475fc629/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4129305bc745534a719497a3a42e6f475fc629/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6c4129305bc745534a719497a3a42e6f475fc629",
        "patch": "@@ -433,7 +433,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     if (mapMultiArgs.count(\"-debug\")) fDebug = true;\n     fBenchmark = GetBoolArg(\"-benchmark\", false);\n-    mempool.fChecks = GetBoolArg(\"-checkmempool\", RegTest());\n+    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", RegTest()));\n     Checkpoints::fEnabled = GetBoolArg(\"-checkpoints\", true);\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency"
      },
      {
        "sha": "e99a7136a61e67106dc5703d9dfb55402bfaae39",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4129305bc745534a719497a3a42e6f475fc629/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4129305bc745534a719497a3a42e6f475fc629/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6c4129305bc745534a719497a3a42e6f475fc629",
        "patch": "@@ -369,8 +369,8 @@ CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn)\n bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) {\n     if (base->GetCoins(txid, coins))\n         return true;\n-    if (mempool.exists(txid)) {\n-        const CTransaction &tx = mempool.lookup(txid);\n+    CTransaction tx;\n+    if (mempool.lookup(txid, tx)) {\n         coins = CCoins(tx, MEMPOOL_HEIGHT);\n         return true;\n     }\n@@ -834,10 +834,8 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n     {\n         LOCK(cs_main);\n         {\n-            LOCK(mempool.cs);\n-            if (mempool.exists(hash))\n+            if (mempool.lookup(hash, txOut))\n             {\n-                txOut = mempool.lookup(hash);\n                 return true;\n             }\n         }\n@@ -3044,9 +3042,8 @@ void static ProcessGetData(CNode* pfrom)\n                     }\n                 }\n                 if (!pushed && inv.type == MSG_TX) {\n-                    LOCK(mempool.cs);\n-                    if (mempool.exists(inv.hash)) {\n-                        CTransaction tx = mempool.lookup(inv.hash);\n+                    CTransaction tx;\n+                    if (mempool.lookup(inv.hash, tx)) {\n                         CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n                         ss.reserve(1000);\n                         ss << tx;\n@@ -3527,7 +3524,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         vector<CInv> vInv;\n         BOOST_FOREACH(uint256& hash, vtxid) {\n             CInv inv(MSG_TX, hash);\n-            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(mempool.lookup(hash), hash)) ||\n+            CTransaction tx;\n+            bool fInMemPool = mempool.lookup(hash, tx);\n+            assert(fInMemPool); // we're iterating the mempool, so it had better found!\n+            if ((pfrom->pfilter && pfrom->pfilter->IsRelevantAndUpdate(tx, hash)) ||\n                (!pfrom->pfilter))\n                 vInv.push_back(inv);\n             if (vInv.size() == MAX_INV_SZ) {"
      },
      {
        "sha": "d2127411b06aaf87b5f35adac10e77f905423fd7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4129305bc745534a719497a3a42e6f475fc629/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4129305bc745534a719497a3a42e6f475fc629/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6c4129305bc745534a719497a3a42e6f475fc629",
        "patch": "@@ -16,6 +16,14 @@ void static EraseFromWallets(uint256 hash)\n         pwallet->EraseFromWallet(hash);\n }\n \n+CTxMemPool::CTxMemPool()\n+{\n+    // Sanity checks off by default for performance, because otherwise\n+    // accepting transactions becomes O(N^2) where N is the number\n+    // of transactions in the pool\n+    fSanityCheck = false;\n+}\n+\n void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n {\n     LOCK(cs);\n@@ -42,10 +50,6 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n     if (tx.IsCoinBase())\n         return state.DoS(100, error(\"CTxMemPool::accept() : coinbase as individual tx\"));\n \n-    // To help v0.1.5 clients who would see it as a negative number\n-    if ((int64)tx.nLockTime > std::numeric_limits<int>::max())\n-        return error(\"CTxMemPool::accept() : not accepting nLockTime beyond 2038 yet\");\n-\n     // Rather not work on nonstandard transactions (unless -testnet/-regtest)\n     string reason;\n     if (Params().NetworkID() == CChainParams::MAIN && !IsStandardTx(tx, reason))\n@@ -261,11 +265,9 @@ void CTxMemPool::clear()\n     ++nTransactionsUpdated;\n }\n \n-bool CTxMemPool::fChecks = false;\n-\n void CTxMemPool::check(CCoinsViewCache *pcoins) const\n {\n-    if (!fChecks)\n+    if (!fSanityCheck)\n         return;\n \n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n@@ -309,3 +311,12 @@ void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n     for (map<uint256, CTransaction>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n         vtxid.push_back((*mi).first);\n }\n+\n+bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n+{\n+    LOCK(cs);\n+    std::map<uint256, CTransaction>::const_iterator i = mapTx.find(hash);\n+    if (i == mapTx.end()) return false;\n+    result = i->second;\n+    return true;\n+}"
      },
      {
        "sha": "1b2ff90f737e76ae392b72211a12f5c191041698",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c4129305bc745534a719497a3a42e6f475fc629/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c4129305bc745534a719497a3a42e6f475fc629/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=6c4129305bc745534a719497a3a42e6f475fc629",
        "patch": "@@ -23,12 +23,25 @@ class CValidationState;\n  */\n class CTxMemPool\n {\n+private:\n+    bool fSanityCheck; // Normally false, true if -checkmempool or -regtest\n+\n public:\n-    static bool fChecks;\n     mutable CCriticalSection cs;\n     std::map<uint256, CTransaction> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n+    CTxMemPool();\n+    \n+    /*\n+     * If sanity-checking is turned on, check makes sure the pool is\n+     * consistent (does not contain two transactions that spend the same inputs,\n+     * all inputs are in the mapNextTx array). If sanity-checking is turned off,\n+     * check does nothing.\n+     */\n+    void check(CCoinsViewCache *pcoins) const;\n+    void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n+\n     bool accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                 bool* pfMissingInputs, bool fRejectInsaneFee=false);\n     bool addUnchecked(const uint256& hash, const CTransaction &tx);\n@@ -37,7 +50,6 @@ class CTxMemPool\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n-    void check(CCoinsViewCache *pcoins) const;\n \n     unsigned long size()\n     {\n@@ -50,10 +62,7 @@ class CTxMemPool\n         return (mapTx.count(hash) != 0);\n     }\n \n-    CTransaction& lookup(uint256 hash)\n-    {\n-        return mapTx[hash];\n-    }\n+    bool lookup(uint256 hash, CTransaction& result) const;\n };\n \n extern CTxMemPool mempool;"
      }
    ]
  },
  {
    "sha": "ba52fb95930407116e960c15bf93632a3aeb19f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTUyZmI5NTkzMDQwNzExNmU5NjBjMTViZjkzNjMyYTNhZWIxOWY2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-08-30T04:12:39Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "Refactor: move GetValueIn(tx) to tx.GetValueIn()\n\nGetValueIn makes more sense as a CTransaction member.",
      "tree": {
        "sha": "4129ec8c878598b4ac4e37228ccf2cb82d929b36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4129ec8c878598b4ac4e37228ccf2cb82d929b36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba52fb95930407116e960c15bf93632a3aeb19f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba52fb95930407116e960c15bf93632a3aeb19f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba52fb95930407116e960c15bf93632a3aeb19f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba52fb95930407116e960c15bf93632a3aeb19f6/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c4129305bc745534a719497a3a42e6f475fc629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c4129305bc745534a719497a3a42e6f475fc629",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c4129305bc745534a719497a3a42e6f475fc629"
      }
    ],
    "stats": {
      "total": 259,
      "additions": 173,
      "deletions": 86
    },
    "files": [
      {
        "sha": "3e4423936054c39056876087d4c9326370485ac0",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/foreach.hpp>\n+\n #include \"core.h\"\n #include \"util.h\"\n \n@@ -107,6 +109,23 @@ bool CTransaction::IsNewerThan(const CTransaction& old) const\n     return fNewer;\n }\n \n+/** Amount of bitcoins spent by the transaction.\n+    @return sum of all outputs (note: does not include fees)\n+ */\n+int64 CTransaction::GetValueOut() const\n+{\n+    int64 nValueOut = 0;\n+    BOOST_FOREACH(const CTxOut& txout, this->vout)\n+    {\n+        nValueOut += txout.nValue;\n+        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n+            throw std::runtime_error(\"GetValueOut() : value out of range\");\n+    }\n+    return nValueOut;\n+}\n+\n+\n+\n std::string CTransaction::ToString() const\n {\n     std::string str;"
      },
      {
        "sha": "fcb0ab3862c22aeaa3f5ecb1bad8aced08a4bc7d",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -11,6 +11,10 @@\n \n #include <stdio.h>\n \n+/** No amount larger than this (in satoshi) is valid */\n+static const int64 MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+\n class CTransaction;\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n@@ -49,11 +53,11 @@ class COutPoint\n class CInPoint\n {\n public:\n-    CTransaction* ptx;\n+    const CTransaction* ptx;\n     unsigned int n;\n \n     CInPoint() { SetNull(); }\n-    CInPoint(CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n+    CInPoint(const CTransaction* ptxIn, unsigned int nIn) { ptx = ptxIn; n = nIn; }\n     void SetNull() { ptx = NULL; n = (unsigned int) -1; }\n     bool IsNull() const { return (ptx == NULL && n == (unsigned int) -1); }\n };\n@@ -221,6 +225,11 @@ class CTransaction\n         return (vin.size() == 1 && vin[0].prevout.IsNull());\n     }\n \n+    /** Returns sum of all outputs (note: does not include fees) */\n+    int64 GetValueOut() const;\n+    // Note: GetValueIn is a method on CCoinsViewCache, because\n+    // it requires looking up the values of previous inputs\n+\n     friend bool operator==(const CTransaction& a, const CTransaction& b)\n     {\n         return (a.nVersion  == b.nVersion &&"
      },
      {
        "sha": "48a964ad436fcbee8b20b7505f824b57e75c8fc5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 20,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -521,21 +521,6 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64 nBlockTime)\n     return true;\n }\n \n-/** Amount of bitcoins spent by the transaction.\n-    @return sum of all outputs (note: does not include fees)\n- */\n-int64 GetValueOut(const CTransaction& tx)\n-{\n-    int64 nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-    {\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"GetValueOut() : value out of range\");\n-    }\n-    return nValueOut;\n-}\n-\n //\n // Check transaction inputs, and make sure any\n // pay-to-script-hash transactions are evaluating IsStandard scripts\n@@ -1312,6 +1297,22 @@ int64 CCoinsViewCache::GetValueIn(const CTransaction& tx)\n     return nResult;\n }\n \n+double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight)\n+{\n+    if (tx.IsCoinBase())\n+        return 0.0;\n+    double dResult = 0.0;\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n+        const CCoins &coins = GetCoins(txin.prevout.hash);\n+        assert(coins.IsAvailable(txin.prevout.n));\n+        if (coins.nHeight < nHeight) {\n+            dResult += coins.vout[txin.prevout.n].nValue * (nHeight-coins.nHeight);\n+        }\n+    }\n+    return dResult / ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight, const uint256 &txhash)\n {\n     // mark inputs spent\n@@ -1396,11 +1397,12 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n         }\n \n-        if (nValueIn < GetValueOut(tx))\n+        int64 nValueOut = tx.GetValueOut();\n+        if (nValueIn < nValueOut)\n             return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString().c_str()));\n \n         // Tally transaction fees\n-        int64 nTxFee = nValueIn - GetValueOut(tx);\n+        int64 nTxFee = nValueIn - nValueOut;\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString().c_str()));\n         nFees += nTxFee;\n@@ -1647,7 +1649,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n                      return state.DoS(100, error(\"ConnectBlock() : too many sigops\"));\n             }\n \n-            nFees += view.GetValueIn(tx)-GetValueOut(tx);\n+            nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n             if (!CheckInputs(tx, state, view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n@@ -1667,8 +1669,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     if (fBenchmark)\n         LogPrintf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)block.vtx.size(), 0.001 * nTime, 0.001 * nTime / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n-    if (GetValueOut(block.vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n-        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n+    if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n+        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)));\n \n     if (!control.Wait())\n         return state.DoS(100, false);"
      },
      {
        "sha": "07092032f8e4c33691255571b80b5ad34c0c02dc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -47,9 +47,6 @@ static const unsigned int BLOCKFILE_CHUNK_SIZE = 0x1000000; // 16 MiB\n static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n-/** No amount larger than this (in satoshi) is valid */\n-static const int64 MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n@@ -324,11 +321,6 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n \n bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64 nBlockTime = 0);\n \n-/** Amount of bitcoins spent by the transaction.\n-    @return sum of all outputs (note: does not include fees)\n- */\n-int64 GetValueOut(const CTransaction& tx);\n-\n /** Undo information for a CBlock */\n class CBlockUndo\n {\n@@ -1174,6 +1166,15 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @see CTransaction::FetchInputs\n      */\n     int64 GetValueIn(const CTransaction& tx);\n+    \n+    /** Priority of tx at given height\n+        Like GetValueIn(), lightweight clients might not be able to calculate this.\n+ \n+        @param[in] tx  transaction for which we want priority\n+        @param[in] nHeight  height at which to calculate priority\n+        @return  sum(Value of inputs * #confirmations) / tx size\n+    */\n+    double GetPriority(const CTransaction& tx, int nHeight);\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx);"
      },
      {
        "sha": "57acf177a33295aa316aeec91a298dbf615c01b8",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -89,12 +89,12 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n class COrphan\n {\n public:\n-    CTransaction* ptx;\n+    const CTransaction* ptx;\n     set<uint256> setDependsOn;\n     double dPriority;\n     double dFeePerKb;\n \n-    COrphan(CTransaction* ptxIn)\n+    COrphan(const CTransaction* ptxIn)\n     {\n         ptx = ptxIn;\n         dPriority = dFeePerKb = 0;\n@@ -114,7 +114,7 @@ uint64 nLastBlockTx = 0;\n uint64 nLastBlockSize = 0;\n \n // We want to sort transactions by priority and fee, so:\n-typedef boost::tuple<double, double, CTransaction*> TxPriority;\n+typedef boost::tuple<double, double, const CTransaction*> TxPriority;\n class TxPriorityCompare\n {\n     bool byFee;\n@@ -187,9 +187,9 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         // This vector will be sorted into a priority queue:\n         vector<TxPriority> vecPriority;\n         vecPriority.reserve(mempool.mapTx.size());\n-        for (map<uint256, CTransaction>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n+        for (map<uint256, CTxMemPoolEntry>::iterator mi = mempool.mapTx.begin(); mi != mempool.mapTx.end(); ++mi)\n         {\n-            CTransaction& tx = (*mi).second;\n+            const CTransaction& tx = mi->second.getTx();\n             if (tx.IsCoinBase() || !IsFinalTx(tx))\n                 continue;\n \n@@ -224,7 +224,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                     }\n                     mapDependers[txin.prevout.hash].push_back(porphan);\n                     porphan->setDependsOn.insert(txin.prevout.hash);\n-                    nTotalIn += mempool.mapTx[txin.prevout.hash].vout[txin.prevout.n].nValue;\n+                    nTotalIn += mempool.mapTx[txin.prevout.hash].getTx().vout[txin.prevout.n].nValue;\n                     continue;\n                 }\n                 const CCoins &coins = view.GetCoins(txin.prevout.hash);\n@@ -245,15 +245,15 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // This is a more accurate fee-per-kilobyte than is used by the client code, because the\n             // client code rounds up the size to the nearest 1K. That's good, because it gives an\n             // incentive to create smaller transactions.\n-            double dFeePerKb =  double(nTotalIn-GetValueOut(tx)) / (double(nTxSize)/1000.0);\n+            double dFeePerKb =  double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0);\n \n             if (porphan)\n             {\n                 porphan->dPriority = dPriority;\n                 porphan->dFeePerKb = dFeePerKb;\n             }\n             else\n-                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &(*mi).second));\n+                vecPriority.push_back(TxPriority(dPriority, dFeePerKb, &tx));\n         }\n \n         // Collect transactions into block\n@@ -270,7 +270,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Take highest priority transaction off the priority queue:\n             double dPriority = vecPriority.front().get<0>();\n             double dFeePerKb = vecPriority.front().get<1>();\n-            CTransaction& tx = *(vecPriority.front().get<2>());\n+            const CTransaction& tx = *(vecPriority.front().get<2>());\n \n             std::pop_heap(vecPriority.begin(), vecPriority.end(), comparer);\n             vecPriority.pop_back();\n@@ -302,7 +302,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64 nTxFees = view.GetValueIn(tx)-GetValueOut(tx);\n+            int64 nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)"
      },
      {
        "sha": "4be873d9c7344bed1c59e2acce3ada102936c224",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -188,7 +188,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nValue) + \"<br>\";\n                 }\n \n-                int64 nTxFee = nDebit - GetValueOut(wtx);\n+                int64 nTxFee = nDebit - wtx.GetValueOut();\n                 if (nTxFee > 0)\n                     strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nTxFee) + \"<br>\";\n             }"
      },
      {
        "sha": "655775e2a1b97cb15d124d853ca9e2034ad75af7",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -89,7 +89,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64 nTxFee = nDebit - GetValueOut(wtx);\n+            int64 nTxFee = nDebit - wtx.GetValueOut();\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {"
      },
      {
        "sha": "78f5d11e8597bd20d9e680e7100694ced6e42888",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -1235,7 +1235,7 @@ Value gettransaction(const Array& params, bool fHelp)\n     int64 nCredit = wtx.GetCredit();\n     int64 nDebit = wtx.GetDebit();\n     int64 nNet = nCredit - nDebit;\n-    int64 nFee = (wtx.IsFromMe() ? GetValueOut(wtx) - nDebit : 0);\n+    int64 nFee = (wtx.IsFromMe() ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe())"
      },
      {
        "sha": "3ce1f7c45d8aaa36e237740b9d3df7341ddbdf7b",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -97,7 +97,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, tx);\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n@@ -117,7 +117,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, tx);\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n@@ -126,7 +126,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // orphan in mempool\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -136,15 +136,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -155,7 +155,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -168,12 +168,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey.SetDestination(script.GetID());\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash,tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -184,10 +184,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, tx);\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, 111.0, 11));\n     BOOST_CHECK(pblocktemplate = CreateNewBlockWithKey(reservekey));\n     delete pblocktemplate;\n     mempool.clear();"
      },
      {
        "sha": "3e90f972b6da64092f51a981e0d6971fbf977708",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 30,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -16,6 +16,32 @@ void static EraseFromWallets(uint256 hash)\n         pwallet->EraseFromWallet(hash);\n }\n \n+CTxMemPoolEntry::CTxMemPoolEntry()\n+{\n+    nHeight = MEMPOOL_HEIGHT;\n+}\n+\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, int64 _nFee, double _dPriority,\n+                                 unsigned int _nHeight):\n+    tx(_tx), nFee(_nFee), dPriority(_dPriority), nHeight(_nHeight)\n+{\n+    nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+}\n+\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n+{\n+    *this = other;\n+}\n+\n+double\n+CTxMemPoolEntry::getPriority(unsigned int currentHeight) const\n+{\n+    int64 nValueIn = tx.GetValueOut()+nFee;\n+    double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nTxSize;\n+    double dResult = dPriority + deltaPriority;\n+    return dResult;\n+}\n+\n CTxMemPool::CTxMemPool()\n {\n     // Sanity checks off by default for performance, because otherwise\n@@ -65,7 +91,7 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n     }\n \n     // Check for conflicts with in-memory transactions\n-    CTransaction* ptxOld = NULL;\n+    const CTransaction* ptxOld = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n@@ -92,11 +118,10 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n         }\n     }\n \n+    unsigned int nBestBlockHeight = 0;\n+    CCoinsView dummy;\n+    CCoinsViewCache view(dummy);\n     {\n-        CCoinsView dummy;\n-        CCoinsViewCache view(dummy);\n-\n-        {\n         LOCK(cs);\n         CCoinsViewMemPool viewMemPool(*pcoinsTip, *this);\n         view.SetBackend(viewMemPool);\n@@ -121,12 +146,12 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n             return state.Invalid(error(\"CTxMemPool::accept() : inputs already spent\"));\n \n         // Bring the best block into scope\n-        view.GetBestBlock();\n+        nBestBlockHeight = view.GetBestBlock()->nHeight;\n \n         // we have all inputs cached now, so switch back to dummy, so we don't need to keep lock on mempool\n         view.SetBackend(dummy);\n-        }\n-\n+    }\n+    {\n         // Check for non-standard pay-to-script-hash in inputs\n         if (Params().NetworkID() == CChainParams::MAIN && !AreInputsStandard(tx, view))\n             return error(\"CTxMemPool::accept() : nonstandard transaction input\");\n@@ -135,8 +160,13 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n         // you should add code here to check that the transaction does a\n         // reasonable number of ECDSA signature verifications.\n \n-        int64 nFees = view.GetValueIn(tx)-GetValueOut(tx);\n-        unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n+        int64 nValueIn = view.GetValueIn(tx);\n+        int64 nValueOut = tx.GetValueOut();\n+        int64 nFees = nValueIn-nValueOut;\n+        double dPriority = view.GetPriority(tx, nBestBlockHeight);\n+\n+        CTxMemPoolEntry entry(tx, nFees, dPriority, nBestBlockHeight);\n+        unsigned int nSize = entry.getTxSize();\n \n         // Don't accept it if it can't get into a block\n         int64 txMinFee = GetMinFee(tx, true, GMF_RELAY);\n@@ -178,17 +208,13 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().c_str());\n         }\n-    }\n-\n-    // Store transaction in memory\n-    {\n-        LOCK(cs);\n+        // Store transaction in memory\n         if (ptxOld)\n         {\n             LogPrint(\"mempool\", \"CTxMemPool::accept() : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());\n             remove(*ptxOld);\n         }\n-        addUnchecked(hash, tx);\n+        addUnchecked(hash, entry);\n     }\n \n     ///// are we sure this is ok when loading transactions or restoring block txes\n@@ -204,14 +230,16 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n }\n \n \n-bool CTxMemPool::addUnchecked(const uint256& hash, const CTransaction &tx)\n+bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n {\n     // Add to memory pool without checking anything.  Don't call this directly,\n     // call CTxMemPool::accept to properly check the transaction first.\n     {\n-        mapTx[hash] = tx;\n+        LOCK(cs);\n+        mapTx[hash] = entry;\n+        const CTransaction& tx = mapTx[hash].getTx();\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            mapNextTx[tx.vin[i].prevout] = CInPoint(&mapTx[hash], i);\n+            mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n         nTransactionsUpdated++;\n     }\n     return true;\n@@ -273,31 +301,34 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     LOCK(cs);\n-    for (std::map<uint256, CTransaction>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n-        BOOST_FOREACH(const CTxIn &txin, it->second.vin) {\n+        const CTransaction& tx = it->second.getTx();\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n-                assert(it2->second.vout.size() > txin.prevout.n && !it2->second.vout[txin.prevout.n].IsNull());\n+                const CTransaction& tx2 = it2->second.getTx();\n+                assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n             } else {\n                 CCoins &coins = pcoins->GetCoins(txin.prevout.hash);\n                 assert(coins.IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx.\n             std::map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);\n             assert(it3 != mapNextTx.end());\n-            assert(it3->second.ptx == &it->second);\n+            assert(it3->second.ptx == &tx);\n             assert(it3->second.n == i);\n             i++;\n         }\n     }\n     for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();\n-        std::map<uint256, CTransaction>::const_iterator it2 = mapTx.find(hash);\n+        std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n+        const CTransaction& tx = it2->second.getTx();\n         assert(it2 != mapTx.end());\n-        assert(&it2->second == it->second.ptx);\n-        assert(it2->second.vin.size() > it->second.n);\n+        assert(&tx == it->second.ptx);\n+        assert(tx.vin.size() > it->second.n);\n         assert(it->first == it->second.ptx->vin[it->second.n].prevout);\n     }\n }\n@@ -308,15 +339,15 @@ void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n \n     LOCK(cs);\n     vtxid.reserve(mapTx.size());\n-    for (map<uint256, CTransaction>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n+    for (map<uint256, CTxMemPoolEntry>::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n         vtxid.push_back((*mi).first);\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n {\n     LOCK(cs);\n-    std::map<uint256, CTransaction>::const_iterator i = mapTx.find(hash);\n+    std::map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end()) return false;\n-    result = i->second;\n+    result = i->second.getTx();\n     return true;\n }"
      },
      {
        "sha": "197a1b56e88a2b6f955d24dbdb7bdafbaa348b76",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 27,
        "deletions": 2,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -11,6 +11,31 @@ class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n \n+/*\n+ * CTxMemPool stores these:\n+ */\n+class CTxMemPoolEntry\n+{\n+private:\n+    CTransaction tx;\n+    int64 nFee; // Cached to avoid expensive parent-transaction lookups\n+    size_t nTxSize; // ... and avoid recomputing tx size\n+    double dPriority; // Priority when entering the mempool\n+    unsigned int nHeight; // Chain height when entering the mempool\n+\n+public:\n+    CTxMemPoolEntry(const CTransaction& _tx, int64 _nFee, double _dPriority,\n+                    unsigned int nHeight);\n+    CTxMemPoolEntry();\n+    CTxMemPoolEntry(const CTxMemPoolEntry& other);\n+\n+    const CTransaction& getTx() const { return this->tx; }\n+    double getPriority(unsigned int currentHeight) const;\n+    int64 getFee() const { return nFee; }\n+    size_t getTxSize() const { return nTxSize; }\n+    unsigned int getHeight() const { return nHeight; }\n+};\n+\n /*\n  * CTxMemPool stores valid-according-to-the-current-best-chain\n  * transactions that may be included in the next block.\n@@ -28,7 +53,7 @@ class CTxMemPool\n \n public:\n     mutable CCriticalSection cs;\n-    std::map<uint256, CTransaction> mapTx;\n+    std::map<uint256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n     CTxMemPool();\n@@ -44,7 +69,7 @@ class CTxMemPool\n \n     bool accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                 bool* pfMissingInputs, bool fRejectInsaneFee=false);\n-    bool addUnchecked(const uint256& hash, const CTransaction &tx);\n+    bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n     bool remove(const CTransaction &tx, bool fRecursive = false);\n     bool removeConflicts(const CTransaction &tx);\n     void clear();"
      },
      {
        "sha": "611bad3c7c859ee5e3f457977c8e60875f338f34",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba52fb95930407116e960c15bf93632a3aeb19f6/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba52fb95930407116e960c15bf93632a3aeb19f6/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ba52fb95930407116e960c15bf93632a3aeb19f6",
        "patch": "@@ -666,7 +666,7 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived,\n     int64 nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64 nValueOut = GetValueOut(*this);\n+        int64 nValueOut = this->GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n "
      }
    ]
  },
  {
    "sha": "2f7b1210320b82481c6c4d16b56c41b91567ce11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjdiMTIxMDMyMGI4MjQ4MWM2YzRkMTZiNTZjNDFiOTE1NjdjZTEx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-03T02:34:39Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "Add verbose flag to getrawmempool",
      "tree": {
        "sha": "864ad55936deabb8ac7ed1be7f27f1d9459067b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/864ad55936deabb8ac7ed1be7f27f1d9459067b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f7b1210320b82481c6c4d16b56c41b91567ce11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f7b1210320b82481c6c4d16b56c41b91567ce11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f7b1210320b82481c6c4d16b56c41b91567ce11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f7b1210320b82481c6c4d16b56c41b91567ce11/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba52fb95930407116e960c15bf93632a3aeb19f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba52fb95930407116e960c15bf93632a3aeb19f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba52fb95930407116e960c15bf93632a3aeb19f6"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 43,
      "deletions": 8
    },
    "files": [
      {
        "sha": "1c329ccb9342e953bff18fe942c69576e1b01b57",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f7b1210320b82481c6c4d16b56c41b91567ce11/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f7b1210320b82481c6c4d16b56c41b91567ce11/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=2f7b1210320b82481c6c4d16b56c41b91567ce11",
        "patch": "@@ -1243,6 +1243,7 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"verifychain\"            && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);\n+    if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n \n     return params;\n }"
      },
      {
        "sha": "670b41abbc290e3e9d901820e5957dfa1d1f6960",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 8,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f7b1210320b82481c6c4d16b56c41b91567ce11/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f7b1210320b82481c6c4d16b56c41b91567ce11/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=2f7b1210320b82481c6c4d16b56c41b91567ce11",
        "patch": "@@ -122,19 +122,53 @@ Value settxfee(const Array& params, bool fHelp)\n \n Value getrawmempool(const Array& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 0)\n+    if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getrawmempool\\n\"\n+            \"getrawmempool [verbose=false]\\n\"\n             \"Returns all transaction ids in memory pool.\");\n \n-    vector<uint256> vtxid;\n-    mempool.queryHashes(vtxid);\n+    bool fVerbose = false;\n+    if (params.size() > 0)\n+        fVerbose = params[0].get_bool();\n \n-    Array a;\n-    BOOST_FOREACH(const uint256& hash, vtxid)\n-        a.push_back(hash.ToString());\n+    if (fVerbose)\n+    {\n+        LOCK(mempool.cs);\n+        Object o;\n+        BOOST_FOREACH(const PAIRTYPE(uint256, CTxMemPoolEntry)& entry, mempool.mapTx)\n+        {\n+            const uint256& hash = entry.first;\n+            const CTxMemPoolEntry& e = entry.second;\n+            Object info;\n+            info.push_back(Pair(\"size\", (int)e.getTxSize()));\n+            info.push_back(Pair(\"fee\", (int)e.getFee()));\n+            info.push_back(Pair(\"height\", (int)e.getHeight()));\n+            info.push_back(Pair(\"startingpriority\", e.getPriority(e.getHeight())));\n+            info.push_back(Pair(\"currentpriority\", e.getPriority(nBestHeight)));\n+            const CTransaction& tx = e.getTx();\n+            Array dependsOn;\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            {\n+                if (mempool.exists(txin.prevout.hash))\n+                    dependsOn.push_back(txin.prevout.hash.ToString());\n+            }\n+            if (!dependsOn.empty())\n+                info.push_back(Pair(\"dependson\", dependsOn));\n+            o.push_back(Pair(hash.ToString(), info));\n+        }\n+        return o;\n+    }\n+    else\n+    {\n+        vector<uint256> vtxid;\n+        mempool.queryHashes(vtxid);\n \n-    return a;\n+        Array a;\n+        BOOST_FOREACH(const uint256& hash, vtxid)\n+            a.push_back(hash.ToString());\n+\n+        return a;\n+    }\n }\n \n Value getblockhash(const Array& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "e1bcce50dd8a49879f291d9eed7f2d7401132f06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWJjY2U1MGRkOGE0OTg3OWYyOTFkOWVlZDdmMmQ3NDAxMTMyZjA2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-03T03:13:49Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "estimatefees JSON-RPC method\n\nWatches memory pool transactions to estimate miner's selection\npolicy, and, therefore, fee/priority needed to get into a block.",
      "tree": {
        "sha": "66c5b08f4b205dee32e635813b2535925e4e9e3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66c5b08f4b205dee32e635813b2535925e4e9e3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1bcce50dd8a49879f291d9eed7f2d7401132f06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1bcce50dd8a49879f291d9eed7f2d7401132f06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1bcce50dd8a49879f291d9eed7f2d7401132f06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1bcce50dd8a49879f291d9eed7f2d7401132f06/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f7b1210320b82481c6c4d16b56c41b91567ce11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f7b1210320b82481c6c4d16b56c41b91567ce11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f7b1210320b82481c6c4d16b56c41b91567ce11"
      }
    ],
    "stats": {
      "total": 262,
      "additions": 208,
      "deletions": 54
    },
    "files": [
      {
        "sha": "0a7646bbbbad8a2e73ea49cce2a50521556eefc9",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "patch": "@@ -292,6 +292,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"lockunspent\",            &lockunspent,            false,     false,      true },\n     { \"listlockunspent\",        &listlockunspent,        false,     false,      true },\n     { \"verifychain\",            &verifychain,            true,      false,      false },\n+    { \"estimatefees\",           &estimatefees,           true,      true,       false },\n };\n \n CRPCTable::CRPCTable()\n@@ -1244,6 +1245,8 @@ Array RPCConvertValues(const std::string &strMethod, const std::vector<std::stri\n     if (strMethod == \"verifychain\"            && n > 1) ConvertTo<boost::int64_t>(params[1]);\n     if (strMethod == \"keypoolrefill\"          && n > 0) ConvertTo<boost::int64_t>(params[0]);\n     if (strMethod == \"getrawmempool\"          && n > 0) ConvertTo<bool>(params[0]);\n+    if (strMethod == \"estimatefees\"           && n > 0) ConvertTo<double>(params[0]);\n+    if (strMethod == \"estimatefees\"           && n > 1) ConvertTo<double>(params[1]);\n \n     return params;\n }"
      },
      {
        "sha": "0bf37d8037df11c3dccf741ebc4636cea167070d",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "patch": "@@ -223,5 +223,6 @@ extern json_spirit::Value getblock(const json_spirit::Array& params, bool fHelp)\n extern json_spirit::Value gettxoutsetinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gettxout(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value verifychain(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value estimatefees(const json_spirit::Array& params, bool fHelp);\n \n #endif"
      },
      {
        "sha": "1a566cbb53754d97365e5deadccb6274516ee0ff",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "patch": "@@ -1777,7 +1777,6 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     }\n \n     // Connect longer branch\n-    vector<CTransaction> vDelete;\n     BOOST_FOREACH(CBlockIndex *pindex, vConnect) {\n         CBlock block;\n         if (!ReadBlockFromDisk(block, pindex))\n@@ -1793,9 +1792,12 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         if (fBenchmark)\n             LogPrintf(\"- Connect: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n \n-        // Queue memory transactions to delete\n+        // Remove txns from memory queue\n         BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-            vDelete.push_back(tx);\n+        {\n+            mempool.remove(tx.GetHash(), false, pindex->nHeight-1);\n+            mempool.removeConflicts(tx);\n+        }\n     }\n \n     // Flush changes to global coin state\n@@ -1835,13 +1837,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         // ignore validation errors in resurrected transactions\n         CValidationState stateDummy;\n         if (!mempool.accept(stateDummy, tx, false, NULL))\n-            mempool.remove(tx, true);\n-    }\n-\n-    // Delete redundant memory transactions that are in the connected branch\n-    BOOST_FOREACH(CTransaction& tx, vDelete) {\n-        mempool.remove(tx);\n-        mempool.removeConflicts(tx);\n+            mempool.remove(tx.GetHash(), true);\n     }\n \n     mempool.check(pcoinsTip);"
      },
      {
        "sha": "9cd14d570b8d285115fdadf29a3f1793fe926bf6",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 0,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "patch": "@@ -3,6 +3,8 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <boost/assign/list_of.hpp>\n+\n #include \"chainparams.h\"\n #include \"db.h\"\n #include \"init.h\"\n@@ -451,3 +453,58 @@ Value submitblock(const Array& params, bool fHelp)\n \n     return Value::null;\n }\n+\n+Value estimatefees(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() > 2)\n+        throw runtime_error(\n+            \"estimatefees [prioritymedian=0.1] [feemedian=0.5]\\n\"\n+            \"Estimates the priority or fee a transaction needs\\n\"\n+            \"to be relayed across the network and included in\\n\"\n+            \"the block chain.\\n\"\n+            \"\\n\"\n+            \"prioritymedian and feemedian are values from 0.0\\n\"\n+            \"to 1.0, where 0.0 will return the smallest\\n\"\n+            \"recently-included-in-a-block priority (or fee) seen,\\n\"\n+            \"1.0 the largest, and 0.5 the median priority (or fee)\\n\"\n+            \"for transactions that were broadcast on the network and\\n\"\n+            \"included in a block.\\n\"\n+            \"\\n\"\n+            \"The default value for prioritymedian (0.1) is\\n\"\n+            \"chosen to return a priority for free transactions that\\n\"\n+            \"will eventually be confirmed, but might take several hours.\\n\"\n+            \"The default value for feemedian (0.5) returns how much\\n\"\n+            \"fee you should include to have your transactions confirmed\\n\"\n+            \"in an average amount of time.\\n\"\n+            \"\\n\"\n+            \"Values returned are:\\n\"\n+            \" freepriority : priority needed to out-compete a prioritymedian\\n\"\n+            \"  fraction of free transactions to be relayed and included in blocks.\\n\"\n+            \" feeperbyte : fee, in satoshis/byte, needed to out-compete a\\n\"\n+            \"  feemedian fraction of fee-paying transactions.\\n\"\n+            \"\\n\"\n+            \"Values of -1.0 are returned if not enough transactions\\n\"\n+            \"have been seen to make a good estimate.\");\n+\n+    RPCTypeCheck(params, boost::assign::list_of(real_type)(real_type));\n+\n+    double dPriorityMedian = 0.1;\n+    if (params.size() > 0)\n+        dPriorityMedian = params[0].get_real();\n+    if (dPriorityMedian < 0.0 || dPriorityMedian > 1.0)\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid priority median (must be 0.0 to 1.0)\");\n+    double dFeeMedian = 0.5;\n+    if (params.size() > 1)\n+        dFeeMedian = params[1].get_real();\n+    if (dFeeMedian < 0.0 || dFeeMedian > 1.0)\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid fee median (must be 0.0 to 1.0)\");\n+\n+    double dPriority, dFee;\n+    mempool.estimateFees(dPriorityMedian, dPriority, dFeeMedian, dFee);\n+\n+    Object result;\n+    result.push_back(Pair(\"freepriority\", dPriority));\n+    result.push_back(Pair(\"feeperbyte\", dFee));\n+\n+    return result;\n+}"
      },
      {
        "sha": "4cd369d01ea10bf924170d85d2ad49d20225b007",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 136,
        "deletions": 43,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "patch": "@@ -3,18 +3,121 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <assert.h>\n+#include <boost/multi_index_container.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+\n #include \"main.h\"\n #include \"wallet.h\"\n \n+using namespace ::boost;\n+using namespace ::boost::multi_index;\n+\n CTxMemPool mempool;\n \n-// erases transaction with the given hash from all wallets\n-void static EraseFromWallets(uint256 hash)\n+// CMinerPolicyEstimator is told when transactions exit the\n+// memory pool because they are included in blocks, and uses\n+// that information to estimate the priority needed for\n+// free transactions to be included in blocks and the\n+// fee needed for fee-paying transactions.\n+\n+struct TimeValue\n {\n-    LOCK(cs_setpwalletRegistered);\n-    BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n-        pwallet->EraseFromWallet(hash);\n-}\n+    int64 t;\n+    double v;\n+    TimeValue(int64 _t, double _v) : t(_t), v(_v) { }\n+};\n+typedef multi_index_container<\n+    TimeValue,\n+    indexed_by<\n+        // Sort by time inserted\n+        ordered_non_unique<member<TimeValue,int64,&TimeValue::t > >,\n+\n+        // Sort by value\n+        ordered_non_unique<member<TimeValue,double,&TimeValue::v > >\n+        >\n+> SortedValues ;\n+\n+class CMinerPolicyEstimator\n+{\n+private:\n+    size_t nMin, nMax;\n+    SortedValues byPriority;\n+    SortedValues byFee;\n+\n+    // Results of estimate() are cached between new blocks, because\n+    // the estimate doesn't change until a new block pulls transactions\n+    // from the memory pool and because the transaction relaying code\n+    // calls estimate on every transaction to decide whether or not it\n+    // should be relayed.\n+    map<double, double> byPriorityCache;\n+    map<double, double> byFeeCache;\n+\n+    // Estimate what value is required to be chosen above\n+    // fraction of other transactions (fraction is 0.0 to 1.0)\n+    // Returns -1.0 if not enough data has been collected to\n+    // give a good estimate.\n+    double estimate(const SortedValues& values, double fraction, map<double,double>& cache)\n+    {\n+        assert(fraction >= 0.0 && fraction <= 1.0);\n+        if (values.size() < nMin) return -1.0;\n+\n+        map<double,double>::iterator cached = cache.find(fraction);\n+        if (cached != cache.end())\n+            return cached->second;\n+\n+        size_t n = size_t(values.size()*fraction);\n+        if (n > 0) --n;\n+        SortedValues::nth_index<1>::type::iterator it=values.get<1>().begin();\n+        std::advance(it, n);\n+        cache[fraction] = it->v;\n+        return it->v;\n+    }\n+\n+public:\n+    CMinerPolicyEstimator(size_t _nMin, size_t _nMax) : nMin(_nMin), nMax(_nMax)\n+    {\n+    }\n+\n+    void resize(SortedValues& what, size_t n)\n+    {\n+        while (what.size() > n)\n+            what.erase(what.begin());\n+    }\n+\n+    void add(const CTxMemPoolEntry& entry, int nBlockHeight)\n+    {\n+        if (nBlockHeight < 0 || entry.getTxSize() == 0) return;\n+        double dFeePerByte = entry.getFee() / (double)entry.getTxSize();\n+        double dPriority = entry.getPriority(nBlockHeight);\n+        if (dPriority == 0 && dFeePerByte > 0)\n+        {\n+            byFee.insert(TimeValue(GetTimeMillis(), dFeePerByte));\n+            resize(byFee, nMax);\n+            byFeeCache.clear();\n+        }\n+        else if (dFeePerByte == 0 && dPriority > 0)\n+        {\n+            byPriority.insert(TimeValue(GetTimeMillis(), dPriority));\n+            resize(byPriority, nMax);\n+            byPriorityCache.clear();\n+        }\n+        // Ignore transactions with both fee and priority > 0,\n+        // because we can't tell why miners included them (might\n+        // have been priority, might have been fee)\n+    }\n+\n+    double estimatePriority(double fraction)\n+    {\n+        return estimate(byPriority, fraction, byPriorityCache);\n+    }\n+    double estimateFee(double fraction)\n+    {\n+        return estimate(byFee, fraction, byFeeCache);\n+    }\n+\n+};\n \n CTxMemPoolEntry::CTxMemPoolEntry()\n {\n@@ -48,6 +151,14 @@ CTxMemPool::CTxMemPool()\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n     fSanityCheck = false;\n+    // 100 and 10,000 values here are arbitrary, but work\n+    // well in practice.\n+    minerPolicyEstimator = new CMinerPolicyEstimator(100, 10000);\n+}\n+\n+CTxMemPool::~CTxMemPool()\n+{\n+    delete minerPolicyEstimator;\n }\n \n void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n@@ -91,30 +202,13 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n     }\n \n     // Check for conflicts with in-memory transactions\n-    const CTransaction* ptxOld = NULL;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n         if (mapNextTx.count(outpoint))\n         {\n             // Disable replacement feature for now\n             return false;\n-\n-            // Allow replacing with a newer version of the same transaction\n-            if (i != 0)\n-                return false;\n-            ptxOld = mapNextTx[outpoint].ptx;\n-            if (IsFinalTx(*ptxOld))\n-                return false;\n-            if (!tx.IsNewerThan(*ptxOld))\n-                return false;\n-            for (unsigned int i = 0; i < tx.vin.size(); i++)\n-            {\n-                COutPoint outpoint = tx.vin[i].prevout;\n-                if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n-                    return false;\n-            }\n-            break;\n         }\n     }\n \n@@ -209,18 +303,9 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().c_str());\n         }\n         // Store transaction in memory\n-        if (ptxOld)\n-        {\n-            LogPrint(\"mempool\", \"CTxMemPool::accept() : replacing tx %s with new version\\n\", ptxOld->GetHash().ToString().c_str());\n-            remove(*ptxOld);\n-        }\n         addUnchecked(hash, entry);\n     }\n \n-    ///// are we sure this is ok when loading transactions or restoring block txes\n-    // If updated, erase old tx from wallet\n-    if (ptxOld)\n-        EraseFromWallets(ptxOld->GetHash());\n     SyncWithWallets(hash, tx, NULL, true);\n \n     LogPrint(\"mempool\", \"CTxMemPool::accept() : accepted %s (poolsz %\"PRIszu\")\\n\",\n@@ -246,26 +331,27 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry)\n }\n \n \n-bool CTxMemPool::remove(const CTransaction &tx, bool fRecursive)\n+bool CTxMemPool::remove(const uint256& hash, bool fRecursive, int nBlockHeight)\n {\n     // Remove transaction from memory pool\n     {\n         LOCK(cs);\n-        uint256 hash = tx.GetHash();\n+        if (mapTx.count(hash) == 0)\n+            return false;\n+        const CTxMemPoolEntry& entry = mapTx[hash];\n+        const CTransaction& tx = entry.getTx();\n         if (fRecursive) {\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n                 if (it != mapNextTx.end())\n-                    remove(*it->second.ptx, true);\n+                    remove(it->second.ptx->GetHash(), true, nBlockHeight);\n             }\n         }\n-        if (mapTx.count(hash))\n-        {\n-            BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-                mapNextTx.erase(txin.prevout);\n-            mapTx.erase(hash);\n-            nTransactionsUpdated++;\n-        }\n+        minerPolicyEstimator->add(entry, nBlockHeight);\n+        BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+            mapNextTx.erase(txin.prevout);\n+        mapTx.erase(hash);\n+        nTransactionsUpdated++;\n     }\n     return true;\n }\n@@ -279,7 +365,7 @@ bool CTxMemPool::removeConflicts(const CTransaction &tx)\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second.ptx;\n             if (txConflict != tx)\n-                remove(txConflict, true);\n+                remove(txConflict.GetHash(), true);\n         }\n     }\n     return true;\n@@ -351,3 +437,10 @@ bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n     result = i->second.getTx();\n     return true;\n }\n+\n+void CTxMemPool::estimateFees(double dPriorityMedian, double& dPriority, double dFeeMedian, double& dFee)\n+{\n+    LOCK(cs);\n+    dPriority = minerPolicyEstimator->estimatePriority(dPriorityMedian);\n+    dFee = minerPolicyEstimator->estimateFee(dFeeMedian);\n+}"
      },
      {
        "sha": "ac772bf63b5446ea4cfda60d8017710c1b82641d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1bcce50dd8a49879f291d9eed7f2d7401132f06/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "patch": "@@ -10,6 +10,7 @@\n class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n+class CMinerPolicyEstimator;\n \n /*\n  * CTxMemPool stores these:\n@@ -50,13 +51,15 @@ class CTxMemPool\n {\n private:\n     bool fSanityCheck; // Normally false, true if -checkmempool or -regtest\n+    CMinerPolicyEstimator* minerPolicyEstimator; // For estimating transaction fees\n \n public:\n     mutable CCriticalSection cs;\n     std::map<uint256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n \n     CTxMemPool();\n+    ~CTxMemPool();\n     \n     /*\n      * If sanity-checking is turned on, check makes sure the pool is\n@@ -70,11 +73,12 @@ class CTxMemPool\n     bool accept(CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                 bool* pfMissingInputs, bool fRejectInsaneFee=false);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry);\n-    bool remove(const CTransaction &tx, bool fRecursive = false);\n+    bool remove(const uint256 &hash, bool fRecursive = false, int nBlockHeight = -1);\n     bool removeConflicts(const CTransaction &tx);\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n+    void estimateFees(double dPriorityMedian, double& dPriority, double dFeeMedian, double& dFee);\n \n     unsigned long size()\n     {"
      }
    ]
  },
  {
    "sha": "74471385edb039df8f3ee4d52d122eb1510796d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDQ3MTM4NWVkYjAzOWRmOGYzZWU0ZDUyZDEyMmViMTUxMDc5NmQz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-12T05:38:16Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "Save/restore mempool",
      "tree": {
        "sha": "9bfb251e5c379ce80b67d25e49db1660b7624a78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bfb251e5c379ce80b67d25e49db1660b7624a78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74471385edb039df8f3ee4d52d122eb1510796d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74471385edb039df8f3ee4d52d122eb1510796d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74471385edb039df8f3ee4d52d122eb1510796d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74471385edb039df8f3ee4d52d122eb1510796d3/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1bcce50dd8a49879f291d9eed7f2d7401132f06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1bcce50dd8a49879f291d9eed7f2d7401132f06"
      }
    ],
    "stats": {
      "total": 161,
      "additions": 151,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a3c1d192b7d10576762cf113db8ded14f5a87dcb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74471385edb039df8f3ee4d52d122eb1510796d3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74471385edb039df8f3ee4d52d122eb1510796d3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=74471385edb039df8f3ee4d52d122eb1510796d3",
        "patch": "@@ -113,6 +113,7 @@ void Shutdown()\n         bitdb.Flush(false);\n     GenerateBitcoins(false, NULL);\n     StopNode();\n+    mempool.Write();\n     {\n         LOCK(cs_main);\n         if (pwalletMain)\n@@ -943,6 +944,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n         nWalletDBUpdated++;\n     }\n \n+    // It is OK if mempool.Read() fails; starting out with an empty memory pool is not\n+    // a problem, it gets filled quickly.\n+    mempool.Read();\n+    LogPrintf(\"Read %lu mempool transactions\\n\", mempool.size());\n+\n     // ********************************************************* Step 9: import blocks\n \n     // scan for better chains in the block chain database, that are not yet connected in the active best chain"
      },
      {
        "sha": "02c10966b0a74ebd92e4ef874e593f57475e73e3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 139,
        "deletions": 10,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74471385edb039df8f3ee4d52d122eb1510796d3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74471385edb039df8f3ee4d52d122eb1510796d3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=74471385edb039df8f3ee4d52d122eb1510796d3",
        "patch": "@@ -11,11 +11,14 @@\n #include \"main.h\"\n #include \"wallet.h\"\n \n+using namespace std;\n using namespace ::boost;\n using namespace ::boost::multi_index;\n \n CTxMemPool mempool;\n \n+static const char* MEMPOOL_FILENAME=\"mempool.dat\";\n+\n // CMinerPolicyEstimator is told when transactions exit the\n // memory pool because they are included in blocks, and uses\n // that information to estimate the priority needed for\n@@ -75,6 +78,31 @@ class CMinerPolicyEstimator\n         return it->v;\n     }\n \n+    bool Write(CAutoFile& fileout, const SortedValues& values)\n+    {\n+        fileout << values.size();\n+        SortedValues::nth_index<1>::type::iterator it=values.get<1>().begin();\n+        while (it != values.get<1>().end())\n+        {\n+            fileout << it->t << it->v;\n+            it++;\n+        }\n+        return true;\n+    }\n+    bool Read(CAutoFile& filein, SortedValues& values)\n+    {\n+        size_t n;\n+        filein >> n;\n+        for (size_t i = 0; i < n; i++)\n+        {\n+            int64 t;\n+            double v;\n+            filein >> t >> v;\n+            values.insert(TimeValue(t, v));\n+        }\n+        return true;\n+    }\n+\n public:\n     CMinerPolicyEstimator(size_t _nMin, size_t _nMax) : nMin(_nMin), nMax(_nMax)\n     {\n@@ -117,6 +145,14 @@ class CMinerPolicyEstimator\n         return estimate(byFee, fraction, byFeeCache);\n     }\n \n+    bool Write(CAutoFile& fileout)\n+    {\n+        return Write(fileout, byPriority) && Write(fileout, byFee);\n+    }\n+    bool Read(CAutoFile& filein)\n+    {\n+        return Read(filein, byPriority) && Read(filein, byFee);\n+    }\n };\n \n CTxMemPoolEntry::CTxMemPoolEntry()\n@@ -165,7 +201,7 @@ void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n {\n     LOCK(cs);\n \n-    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(hashTx, 0));\n+    map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(hashTx, 0));\n \n     // iterate over all COutPoints in mapNextTx whose hash equals the provided hashTx\n     while (it != mapNextTx.end() && it->first.hash == hashTx) {\n@@ -342,7 +378,7 @@ bool CTxMemPool::remove(const uint256& hash, bool fRecursive, int nBlockHeight)\n         const CTransaction& tx = entry.getTx();\n         if (fRecursive) {\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n-                std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n+                map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(hash, i));\n                 if (it != mapNextTx.end())\n                     remove(it->second.ptx->GetHash(), true, nBlockHeight);\n             }\n@@ -361,7 +397,7 @@ bool CTxMemPool::removeConflicts(const CTransaction &tx)\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n-        std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n+        map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second.ptx;\n             if (txConflict != tx)\n@@ -387,12 +423,12 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     LOCK(cs);\n-    for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n+    for (map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         const CTransaction& tx = it->second.getTx();\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             // Check that every mempool transaction's inputs refer to available coins, or other mempool tx's.\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+            map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n                 const CTransaction& tx2 = it2->second.getTx();\n                 assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n@@ -401,16 +437,16 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n                 assert(coins.IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx.\n-            std::map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);\n+            map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);\n             assert(it3 != mapNextTx.end());\n             assert(it3->second.ptx == &tx);\n             assert(it3->second.n == i);\n             i++;\n         }\n     }\n-    for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n+    for (map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n         uint256 hash = it->second.ptx->GetHash();\n-        std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n+        map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(hash);\n         const CTransaction& tx = it2->second.getTx();\n         assert(it2 != mapTx.end());\n         assert(&tx == it->second.ptx);\n@@ -419,7 +455,7 @@ void CTxMemPool::check(CCoinsViewCache *pcoins) const\n     }\n }\n \n-void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n+void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n {\n     vtxid.clear();\n \n@@ -432,7 +468,7 @@ void CTxMemPool::queryHashes(std::vector<uint256>& vtxid)\n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n {\n     LOCK(cs);\n-    std::map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n+    map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end()) return false;\n     result = i->second.getTx();\n     return true;\n@@ -444,3 +480,96 @@ void CTxMemPool::estimateFees(double dPriorityMedian, double& dPriority, double\n     dPriority = minerPolicyEstimator->estimatePriority(dPriorityMedian);\n     dFee = minerPolicyEstimator->estimateFee(dFeeMedian);\n }\n+\n+void CTxMemPool::writeEntry(CAutoFile& file, const uint256& txid, std::set<uint256>& alreadyWritten)\n+{\n+    if (alreadyWritten.count(txid)) return;\n+    alreadyWritten.insert(txid);\n+    CTxMemPoolEntry& entry = mapTx[txid];\n+    // Write txns we depend on first:\n+    BOOST_FOREACH(const CTxIn txin, entry.getTx().vin)\n+    {\n+        const uint256& prevout = txin.prevout.hash;\n+        if (mapTx.count(prevout))\n+            writeEntry(file, prevout, alreadyWritten);\n+    }\n+    file << entry.getTx();\n+}\n+\n+//\n+// Format of the mempool.dat file:\n+//  32-bit versionRequiredToRead\n+//  32-bit versionThatWrote\n+//  32-bit-number of priority data points\n+//  [ (time,priority) ]\n+//  32-bit-number of fee data points\n+//  [ (time,fee) ]\n+//  32-bit-number of transactions\n+//  [ serialized transactions ]\n+//\n+bool CTxMemPool::Write()\n+{\n+    boost::filesystem::path path = GetDataDir() / MEMPOOL_FILENAME;\n+    FILE *file = fopen(path.string().c_str(), \"wb\"); // Overwrites any older mempool (which is fine)\n+    CAutoFile fileout = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    if (!fileout)\n+        return error(\"CTxMemPool::Write() : open failed\");\n+\n+    fileout << CLIENT_VERSION; // version required to read\n+    fileout << CLIENT_VERSION; // version that wrote the file\n+\n+    std::set<uint256> alreadyWritten; // Used to write parents before dependents\n+    try {\n+        LOCK(cs);\n+        minerPolicyEstimator->Write(fileout);\n+        fileout << mapTx.size();\n+        for (map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin();\n+             it != mapTx.end(); it++)\n+        {\n+            writeEntry(fileout, it->first, alreadyWritten);\n+        }\n+    }\n+    catch (std::exception &e) {\n+        return error(\"CTxMemPool::Write() : I/O error\");\n+    }\n+\n+    return true;\n+}\n+\n+bool CTxMemPool::Read()\n+{\n+    boost::filesystem::path path = GetDataDir() / MEMPOOL_FILENAME;\n+    FILE *file = fopen(path.string().c_str(), \"rb\");\n+    if (!file) return true; // No mempool.dat: OK\n+    CAutoFile filein = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    if (!filein)\n+        return error(\"CTxMemPool::Read() : open failed\");\n+\n+    try {\n+        int nVersionRequired, nVersionThatWrote;\n+        filein >> nVersionRequired >> nVersionThatWrote;\n+\n+        if (nVersionRequired > CLIENT_VERSION)\n+            return error(\"CTxMemPool::Read() : up-version (%d) mempool.dat\", nVersionRequired);\n+\n+        minerPolicyEstimator->Read(filein);\n+        size_t nTx;\n+        filein >> nTx;\n+\n+        for (size_t i = 0; i < nTx; i++)\n+        {\n+            CTransaction tx;\n+            filein >> tx;\n+        \n+            CValidationState state;\n+            bool fMissingInputs;\n+            accept(state, tx, false, &fMissingInputs);\n+            assert(state.IsValid() && !fMissingInputs);\n+        }\n+    }\n+    catch (std::exception &e) {\n+        return error(\"CTxMemPool::Read() : I/O error or stream data corrupted\");\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "5817f2548112be6eb61be6f08bf2d2236636b53d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74471385edb039df8f3ee4d52d122eb1510796d3/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74471385edb039df8f3ee4d52d122eb1510796d3/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=74471385edb039df8f3ee4d52d122eb1510796d3",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"uint256.h\"\n \n+class CAutoFile;\n class CCoinsViewCache;\n class CTransaction;\n class CValidationState;\n@@ -53,6 +54,8 @@ class CTxMemPool\n     bool fSanityCheck; // Normally false, true if -checkmempool or -regtest\n     CMinerPolicyEstimator* minerPolicyEstimator; // For estimating transaction fees\n \n+    void writeEntry(CAutoFile& file, const uint256& txid, std::set<uint256>& alreadyWritten);\n+\n public:\n     mutable CCriticalSection cs;\n     std::map<uint256, CTxMemPoolEntry> mapTx;\n@@ -92,6 +95,9 @@ class CTxMemPool\n     }\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n+\n+    bool Write();\n+    bool Read();\n };\n \n extern CTxMemPool mempool;"
      }
    ]
  },
  {
    "sha": "c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjZmZDRhN2ExNTdiMDk1MTE0YjNlZWIzZTRmOGNhNjlmODI1MGYz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-14T06:23:20Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "New relay policy\n\nUse estimated miner policy to accept all high fee or priority transactions,\nbut start dropping low fee/priority transactions (and drop almost all\nvery-low-fee, very-low-priority transactions).",
      "tree": {
        "sha": "25c1c33dbd5c727033b87bca681d885fe46de359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25c1c33dbd5c727033b87bca681d885fe46de359"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74471385edb039df8f3ee4d52d122eb1510796d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74471385edb039df8f3ee4d52d122eb1510796d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74471385edb039df8f3ee4d52d122eb1510796d3"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 70,
      "deletions": 28
    },
    "files": [
      {
        "sha": "65695757603192349169f3c181a09b58c8e0d05d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 69,
        "deletions": 27,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
        "patch": "@@ -298,33 +298,72 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n         CTxMemPoolEntry entry(tx, nFees, dPriority, nBestBlockHeight);\n         unsigned int nSize = entry.getTxSize();\n \n-        // Don't accept it if it can't get into a block\n-        int64 txMinFee = GetMinFee(tx, true, GMF_RELAY);\n-        if (fLimitFree && nFees < txMinFee)\n-            return error(\"CTxMemPool::accept() : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n-                         hash.ToString().c_str(),\n-                         nFees, txMinFee);\n+        // If -mintxfee is set, then use it instead of\n+        // trying to estimate other miner's policies.\n+        static double dHardFeeCutoff = 0.0;\n+        if (dHardFeeCutoff == 0.0)\n+        {\n+            int64 n = 0;\n+            if (mapArgs.count(\"-mintxfee\") && ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n+            {\n+                // n is satoshis-per-1000-bytes, dHardFeeCutoff is\n+                // satoshis-per-byte, so:\n+                dHardFeeCutoff = n/1000.0;\n+            }\n+            else dHardFeeCutoff = -1.0;\n+        }\n \n-        // Continuously rate-limit free transactions\n-        // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n-        // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nFees < CTransaction::nMinRelayTxFee)\n+        //\n+        // The less likely a transaction is to get into a block, the\n+        // less likely we are to relay it.\n+        // So: find the lowest 1% fee/priority transaction that recently made it into\n+        // a block, and start rejecting transactions below that cutoff. 1% is arbitrary;\n+        // we want fuzziness around the \"relay/don't relay\" cutoff, because we want to\n+        // give miners some below-the-cutoff transactions that they might choose to include,\n+        // which will drive the cutoff down. But we don't want to use zero because\n+        // that would make it easy and cheap for a rogue miner to game by including one\n+        // very-low-fee or very-low-priority transaction in their blocks. We do want to err\n+        // on the side of relaying MORE, so 1% was chosen as the cutoff.\n+        //\n+        // Or, another way of thinking about it: we want to give miners a good selection\n+        // of transactions to include (or not) in their blocks, but we also want to make\n+        // it hard for a \"penny-flooder\" to waste network bandwidth. So we relay all\n+        // transactions above the 1% cutoff, most of the transactions near our estimate of\n+        // what a reasonable miner will (eventually) accept, and almost none that we estimate\n+        // have little chance of making it into a block.\n+        // \n+        // Economically rational miners might want to try to drive the feeCutoff up, so\n+        // users pay higher average fees. However, the only way for them to do that is to flood\n+        // the memory pool with high-fee transactions to try to drive up the 1%-median value;\n+        // but doing that will cost them directly in lost fees (other miners will include those\n+        // transactions in their blocks and take the fees). Miners have no incentive to drive\n+        // down the fee cutoff.\n+        // The priority cutoff for free transactions can't easily be manipulated because transaction\n+        // priority is a naturally limited resource that depends on how many large, old inputs\n+        // you have available to spend.\n+        //\n+        double priorityCutoff;\n+        double feeCutoff;\n+        estimateFees(0.01, priorityCutoff, 0.01, feeCutoff, true);\n+        if (dHardFeeCutoff > 0.0)\n+            feeCutoff = dHardFeeCutoff;\n+\n+        double dFee = (double)nFees/(double)nSize;\n+        if (dFee < feeCutoff && dPriority < priorityCutoff)\n         {\n-            static double dFreeCount;\n-            static int64 nLastTime;\n-            int64 nNow = GetTime();\n-\n-            LOCK(cs);\n-\n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return error(\"CTxMemPool::accept() : free transaction rejected by rate limiter\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n+            bool fAccept = false;\n+\n+            if (dHardFeeCutoff < 0.0)\n+            {   // Marginal transaction given a chance:\n+                // insecure_rand returns unsigned 32-bit int, divide by\n+                // 32-bit maximum value to get [0,1] inclusive range:\n+                double dRand = insecure_rand() / (double)0xFFFFFFFF;\n+                double r = max(dFee/feeCutoff, dPriority/priorityCutoff);\n+                fAccept = (r*r > dRand); // exponentially less likely to include as r goes to zero\n+            }\n+            LogPrint(\"mempool\", \"CTxMemPool::accept() : %s %s, satoshi/byte=%.3g, pri=%.3g\\n\",\n+                     hash.ToString().c_str(), (fAccept?\"marginal accept\":\"rejected\"), dFee, dPriority);\n+            if (!fAccept) return false;\n         }\n \n         if (fRejectInsaneFee && nFees > CTransaction::nMinRelayTxFee * 10000)\n@@ -474,11 +513,15 @@ bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n     return true;\n }\n \n-void CTxMemPool::estimateFees(double dPriorityMedian, double& dPriority, double dFeeMedian, double& dFee)\n+void CTxMemPool::estimateFees(double dPriorityMedian, double& dPriority, double dFeeMedian, double& dFee, bool fUseHardCoded)\n {\n     LOCK(cs);\n     dPriority = minerPolicyEstimator->estimatePriority(dPriorityMedian);\n+    // Hard-coded priority is 1-BTC, 144-confirmation old, 250-byte txn:\n+    if (dPriority < 0 && fUseHardCoded) dPriority = COIN*144 / 250;\n     dFee = minerPolicyEstimator->estimateFee(dFeeMedian);\n+    // Hard-coded fee is 10,000 satoshis per kilobyte (10 satoshis per byte):\n+    if (dFee < 0 && fUseHardCoded) dFee = 10.0;\n }\n \n void CTxMemPool::writeEntry(CAutoFile& file, const uint256& txid, std::set<uint256>& alreadyWritten)\n@@ -564,7 +607,6 @@ bool CTxMemPool::Read()\n             CValidationState state;\n             bool fMissingInputs;\n             accept(state, tx, false, &fMissingInputs);\n-            assert(state.IsValid() && !fMissingInputs);\n         }\n     }\n     catch (std::exception &e) {"
      },
      {
        "sha": "27edf32ad4873d0c66653832e2c58e21a25053c0",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
        "patch": "@@ -81,7 +81,7 @@ class CTxMemPool\n     void clear();\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n-    void estimateFees(double dPriorityMedian, double& dPriority, double dFeeMedian, double& dFee);\n+    void estimateFees(double dPriorityMedian, double& dPriority, double dFeeMedian, double& dFee, bool fUseHardCoded=false);\n \n     unsigned long size()\n     {"
      }
    ]
  },
  {
    "sha": "4ad26983055abfb9b9d3df02fe31d92926270447",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWQyNjk4MzA1NWFiZmI5YjlkM2RmMDJmZTMxZDkyOTI2MjcwNDQ3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-15T22:50:56Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:34Z"
      },
      "message": "Refactor AllowFree(dPriority) --> CTransaction::dMinFreePriority\n\nAlso moved CTransaction static vars from main.cpp to core.cpp\nAnd added new knob for miners: -minfreepriority to override\ndefault COIN*144/250.",
      "tree": {
        "sha": "523d8ac623e3d690e4f206518e5325984a677697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/523d8ac623e3d690e4f206518e5325984a677697"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ad26983055abfb9b9d3df02fe31d92926270447",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ad26983055abfb9b9d3df02fe31d92926270447",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ad26983055abfb9b9d3df02fe31d92926270447",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ad26983055abfb9b9d3df02fe31d92926270447/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c26fd4a7a157b095114b3eeb3e4f8ca69f8250f3"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 17,
      "deletions": 14
    },
    "files": [
      {
        "sha": "a3efb34571b05dccbf6b73d8530dafb7d0551e9d",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad26983055abfb9b9d3df02fe31d92926270447/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad26983055abfb9b9d3df02fe31d92926270447/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=4ad26983055abfb9b9d3df02fe31d92926270447",
        "patch": "@@ -8,6 +8,13 @@\n #include \"core.h\"\n #include \"util.h\"\n \n+/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n+int64 CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n+/** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */\n+int64 CTransaction::nMinRelayTxFee = 10000; // Override with -minrelaytxfee\n+/** Mining: priorities smaller than this are not eligible for free-transaction area */\n+double CTransaction::dMinFreePriority = COIN * 144 / 250;\n+\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);"
      },
      {
        "sha": "11e0e811671e45a7f3013bbb4fc22ee3455d84b2",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad26983055abfb9b9d3df02fe31d92926270447/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad26983055abfb9b9d3df02fe31d92926270447/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=4ad26983055abfb9b9d3df02fe31d92926270447",
        "patch": "@@ -184,6 +184,7 @@ class CTransaction\n public:\n     static int64 nMinTxFee;\n     static int64 nMinRelayTxFee;\n+    static double dMinFreePriority;\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n     std::vector<CTxIn> vin;"
      },
      {
        "sha": "0cebc2954597f120e6874f6aa762b1a45f6b73cd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad26983055abfb9b9d3df02fe31d92926270447/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad26983055abfb9b9d3df02fe31d92926270447/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4ad26983055abfb9b9d3df02fe31d92926270447",
        "patch": "@@ -499,6 +499,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n         else\n             return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"].c_str()));\n     }\n+    if (mapArgs.count(\"-minfreepriority\"))\n+    {\n+        double dPriority = atof(mapArgs[\"-minfreepriority\"].c_str());\n+        if (dPriority < 0)\n+            return InitError(strprintf(_(\"Invalid amount for -minfreepriority=<priority>: '%s'\"), mapArgs[\"-minfreepriority\"].c_str()));\n+        CTransaction::dMinFreePriority = dPriority;\n+    }\n \n     if (mapArgs.count(\"-paytxfee\"))\n     {"
      },
      {
        "sha": "54244d507f8fa60c7af13da142ba4592b0584ca9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad26983055abfb9b9d3df02fe31d92926270447/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad26983055abfb9b9d3df02fe31d92926270447/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4ad26983055abfb9b9d3df02fe31d92926270447",
        "patch": "@@ -50,11 +50,6 @@ bool fTxIndex = false;\n unsigned int nCoinCacheSize = 5000;\n bool fHaveGUI = false;\n \n-/** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n-int64 CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n-/** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */\n-int64 CTransaction::nMinRelayTxFee = 10000;\n-\n CMedianFilter<int> cPeerBlockCounts(8, 0); // Amount of blocks that other nodes claim to have\n \n map<uint256, CBlock*> mapOrphanBlocks;"
      },
      {
        "sha": "9ad1a7ed0d2fa4b8e5c376bf0681df997df2e51b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad26983055abfb9b9d3df02fe31d92926270447/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad26983055abfb9b9d3df02fe31d92926270447/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=4ad26983055abfb9b9d3df02fe31d92926270447",
        "patch": "@@ -294,13 +294,6 @@ unsigned int GetLegacySigOpCount(const CTransaction& tx);\n unsigned int GetP2SHSigOpCount(const CTransaction& tx, CCoinsViewCache& mapInputs);\n \n \n-inline bool AllowFree(double dPriority)\n-{\n-    // Large (in bytes) low-priority (new, small-coin) transactions\n-    // need a fee.\n-    return dPriority > COIN * 144 / 250;\n-}\n-\n // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n // This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n // instead of being performed inline."
      },
      {
        "sha": "e853c272da2bfb3d6be5e0ad45f458f6b103f540",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad26983055abfb9b9d3df02fe31d92926270447/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad26983055abfb9b9d3df02fe31d92926270447/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4ad26983055abfb9b9d3df02fe31d92926270447",
        "patch": "@@ -292,7 +292,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Prioritize by fee once past the priority size or we run out of high-priority\n             // transactions:\n             if (!fSortedByFee &&\n-                ((nBlockSize + nTxSize >= nBlockPrioritySize) || !AllowFree(dPriority)))\n+                ((nBlockSize + nTxSize >= nBlockPrioritySize) || dPriority < CTransaction::dMinFreePriority))\n             {\n                 fSortedByFee = true;\n                 comparer = TxPriorityCompare(fSortedByFee);"
      },
      {
        "sha": "7cb65f1e65b08a963ef406d0a2c97cd0674f567b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ad26983055abfb9b9d3df02fe31d92926270447/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ad26983055abfb9b9d3df02fe31d92926270447/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4ad26983055abfb9b9d3df02fe31d92926270447",
        "patch": "@@ -1303,7 +1303,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n \n                 // Check that enough fee is included\n                 int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n-                bool fAllowFree = AllowFree(dPriority);\n+                bool fAllowFree = (dPriority > CTransaction::dMinFreePriority);\n                 int64 nMinFee = GetMinFee(wtxNew, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {"
      }
    ]
  },
  {
    "sha": "b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmM3OWMzNTAwMjg3NjYxMmQxZmIzOWIxYmI3ZGNkYWI2OGVjZmQ3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-18T23:17:50Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:35Z"
      },
      "message": "remove GetMinFee, replace with mempool.estimate",
      "tree": {
        "sha": "874a805ed008200cb6316eed4b587a36760f0af7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/874a805ed008200cb6316eed4b587a36760f0af7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ad26983055abfb9b9d3df02fe31d92926270447",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ad26983055abfb9b9d3df02fe31d92926270447",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ad26983055abfb9b9d3df02fe31d92926270447"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 84,
      "deletions": 64
    },
    "files": [
      {
        "sha": "78605c05441e2f64678ba75fbdb8b32a7dfed7c7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "patch": "@@ -711,38 +711,6 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode)\n-{\n-    // Base fee is either nMinTxFee or nMinRelayTxFee\n-    int64 nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n-\n-    unsigned int nBytes = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-    int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n-\n-    if (fAllowFree)\n-    {\n-        // There is a free transaction area in blocks created by most miners,\n-        // * If we are relaying we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 1000\n-        //   to be considered to fall into this category\n-        // * If we are creating a transaction we allow transactions up to DEFAULT_BLOCK_PRIORITY_SIZE - 17000\n-        //   (= 10000) to be considered safe and assume they can likely make it into this section\n-        if (nBytes < (mode == GMF_SEND ? (DEFAULT_BLOCK_PRIORITY_SIZE - 17000) : (DEFAULT_BLOCK_PRIORITY_SIZE - 1000)))\n-            nMinFee = 0;\n-    }\n-\n-    // To limit dust spam, require base fee if any output is less than 0.01\n-    if (nMinFee < nBaseFee)\n-    {\n-        BOOST_FOREACH(const CTxOut& txout, tx.vout)\n-            if (txout.nValue < CENT)\n-                nMinFee = nBaseFee;\n-    }\n-\n-    if (!MoneyRange(nMinFee))\n-        nMinFee = MAX_MONEY;\n-    return nMinFee;\n-}\n-\n \n \n int CMerkleTx::GetDepthInMainChain(CBlockIndex* &pindexRet) const"
      },
      {
        "sha": "9b036e266ef7cc0e225c592dfcf8ecac56881f20",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "patch": "@@ -253,14 +253,6 @@ struct CDiskTxPos : public CDiskBlockPos\n \n \n \n-enum GetMinFee_mode\n-{\n-    GMF_RELAY,\n-    GMF_SEND,\n-};\n-\n-int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode);\n-\n //\n // Check transaction inputs, and make sure any\n // pay-to-script-hash transactions are evaluating IsStandard scripts"
      },
      {
        "sha": "e319655cb01c76e0fc08ec47643783322319c896",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "patch": "@@ -197,6 +197,17 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return SendCoinsReturn(AmountWithFeeExceedsBalance);\n     }\n \n+\n+    // TODO: let users choose between \"low fee, don't care how long it takes\"\n+    // and \"confirm quickly, please\" ? E.g.\n+    // low fee == estimateFees(0.1, ... 0.2 ...)\n+    // confirm quickly == estimateFees(0.5, ... 0.75 ...)\n+    double dMinFreePriority;\n+    double dFeePerByte;\n+    mempool.estimateFees(0.1, dMinFreePriority, 0.5, dFeePerByte, true);\n+    if (nTransactionFee > 0)\n+        dFeePerByte = nTransactionFee/1000.0; // Convert from satoshis-per-kilobyte\n+\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n \n@@ -206,7 +217,9 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n \n         CWalletTx *newTx = transaction.getTransaction();\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange, nFeeRequired, strFailReason);\n+        bool fCreated = wallet->CreateTransaction(vecSend, *newTx, *keyChange,\n+                                                  dMinFreePriority, dFeePerByte,\n+                                                  nFeeRequired, strFailReason);\n         transaction.setTransactionFee(nFeeRequired);\n \n         if(!fCreated)"
      },
      {
        "sha": "52f91f61e1bf6d3bac6fa2a2ab7a709b86d49be5",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 3,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "patch": "@@ -59,6 +59,25 @@ string AccountFromValue(const Value& value)\n     return strAccount;\n }\n \n+void\n+GetFeePolicy(double& dMinFreePriority, double& dFeePerByte)\n+{\n+    // If -paytxfee is set:\n+    if (nTransactionFee > 0)\n+    {\n+        // Never send for free:\n+        dMinFreePriority = std::numeric_limits<double>::max();\n+        // Convert satoshis-per-1000-bytes to satoshis-per-byte:\n+        dFeePerByte = (double)nTransactionFee / 1000.0;\n+    }\n+    else\n+    {\n+        // Default is to send for free if it is fairly likely to get into next few,\n+        // otherwise use median transaction fee:\n+        mempool.estimateFees(0.1, dMinFreePriority, 0.5, dFeePerByte, true);\n+    }\n+}\n+\n Value getinfo(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -299,7 +318,9 @@ Value sendtoaddress(const Array& params, bool fHelp)\n     if (pwalletMain->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n \n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    double dMinFreePriority, dFeePerByte;\n+    GetFeePolicy(dMinFreePriority, dFeePerByte);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, dMinFreePriority, dFeePerByte, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n@@ -650,7 +671,9 @@ Value sendfrom(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n-    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, wtx);\n+    double dMinFreePriority, dFeePerByte;\n+    GetFeePolicy(dMinFreePriority, dFeePerByte);\n+    string strError = pwalletMain->SendMoneyToDestination(address.Get(), nAmount, dMinFreePriority, dFeePerByte, wtx);\n     if (strError != \"\")\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n \n@@ -707,10 +730,16 @@ Value sendmany(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n+\n+    double dMinFreePriority, dFeePerByte;\n+    GetFeePolicy(dMinFreePriority, dFeePerByte);\n+\n     CReserveKey keyChange(pwalletMain);\n     int64 nFeeRequired = 0;\n     string strFailReason;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n+    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, \n+                                                   dMinFreePriority, dFeePerByte,\n+                                                   nFeeRequired, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     if (!pwalletMain->CommitTransaction(wtx, keyChange))"
      },
      {
        "sha": "4e6117b592327bc48add3ab8d1de0bd5b4483587",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 16,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "patch": "@@ -1169,7 +1169,9 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason)\n+                                CWalletTx& wtxNew, CReserveKey& reservekey,\n+                                double dMinFreePriority, double dFeePerByte,\n+                                int64& nFeeRet, std::string& strFailReason)\n {\n     int64 nValue = 0;\n     BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n@@ -1231,9 +1233,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 }\n \n                 int64 nChange = nValueIn - nValue - nFeeRet;\n-                // if sub-cent change is required, the fee must be raised to at least nMinTxFee\n+                // if sub-CENT change is required, the fee must be raised to at least nMinTxFee\n                 // or until nChange becomes zero\n-                // NOTE: this depends on the exact behaviour of GetMinFee\n+                // NOTE: this code can be removed when miners/relay nodes upgrade \n+                // and allow free transactions to have outputs less than CENT.\n                 if (nFeeRet < CTransaction::nMinTxFee && nChange > 0 && nChange < CENT)\n                 {\n                     int64 nMoveToFee = min(nChange, CTransaction::nMinTxFee - nFeeRet);\n@@ -1301,14 +1304,14 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 }\n                 dPriority /= nBytes;\n \n-                // Check that enough fee is included\n-                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n-                bool fAllowFree = (dPriority > CTransaction::dMinFreePriority);\n-                int64 nMinFee = GetMinFee(wtxNew, fAllowFree, GMF_SEND);\n-                if (nFeeRet < max(nPayFee, nMinFee))\n+                if (nBytes > 1000 || dPriority > dMinFreePriority)\n                 {\n-                    nFeeRet = max(nPayFee, nMinFee);\n-                    continue;\n+                    int64 nMinFee = dFeePerByte*nBytes;\n+                    if (nFeeRet < nMinFee)\n+                    {\n+                        nFeeRet = nMinFee;\n+                        continue; // Try again with higher fee\n+                    }\n                 }\n \n                 // Fill vtxPrev by copying from previous transactions vtxPrev\n@@ -1323,11 +1326,13 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n }\n \n bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason)\n+                                CWalletTx& wtxNew, CReserveKey& reservekey,\n+                                double dMinFreePriority, double dFeePerByte,\n+                                int64& nFeeRet, std::string& strFailReason)\n {\n     vector< pair<CScript, int64> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n-    return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason);\n+    return CreateTransaction(vecSend, wtxNew, reservekey, dMinFreePriority, dFeePerByte, nFeeRet, strFailReason);\n }\n \n // Call after CreateTransaction unless you want to abort\n@@ -1382,7 +1387,9 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, \n+                          double dMinFreePriority, double dFeePerByte,\n+                          CWalletTx& wtxNew, bool fAskFee)\n {\n     CReserveKey reservekey(this);\n     int64 nFeeRequired;\n@@ -1394,7 +1401,8 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n         return strError;\n     }\n     string strError;\n-    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n+    if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, dMinFreePriority, dFeePerByte,\n+                           nFeeRequired, strError))\n     {\n         if (nValue + nFeeRequired > GetBalance())\n             strError = strprintf(_(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\"), FormatMoney(nFeeRequired).c_str());\n@@ -1413,7 +1421,9 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n \n-string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue,\n+                                       double dMinFreePriority, double dFeePerByte,\n+                                       CWalletTx& wtxNew, bool fAskFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1425,7 +1435,7 @@ string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nVal\n     CScript scriptPubKey;\n     scriptPubKey.SetDestination(address);\n \n-    return SendMoney(scriptPubKey, nValue, wtxNew, fAskFee);\n+    return SendMoney(scriptPubKey, nValue, dMinFreePriority, dFeePerByte, wtxNew, fAskFee);\n }\n \n "
      },
      {
        "sha": "4252008138928cd04672e338ccf06ec136b37111",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "patch": "@@ -207,12 +207,20 @@ class CWallet : public CCryptoKeyStore\n     int64 GetUnconfirmedBalance() const;\n     int64 GetImmatureBalance() const;\n     bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason);\n+                           CWalletTx& wtxNew, CReserveKey& reservekey,\n+                           double dMinFreePriority, double dFeePerByte,\n+                           int64& nFeeRet, std::string& strFailReason);\n     bool CreateTransaction(CScript scriptPubKey, int64 nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason);\n+                           CWalletTx& wtxNew, CReserveKey& reservekey,\n+                           double dMinFreePriority, double dFeePerByte,\n+                           int64& nFeeRet, std::string& strFailReason);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoney(CScript scriptPubKey, int64 nValue,\n+                          double dMinFreePriority, double dFeePerByte,\n+                          CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue,\n+                                       double dMinFreePriority, double dFeePerByte,\n+                                       CWalletTx& wtxNew, bool fAskFee=false);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);"
      }
    ]
  },
  {
    "sha": "cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDg5ZThkODAwMDBlMDEwNDRiMTA5NWQwNTZlMWQxMGNhN2I5YWU0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-23T02:37:52Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:35Z"
      },
      "message": "Un-harcode the \"is dust\" test, use mempool estimate of min fee",
      "tree": {
        "sha": "1abd3ccbcb7a270229b8a43600bde51f4e9dde4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1abd3ccbcb7a270229b8a43600bde51f4e9dde4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c79c35002876612d1fb39b1bb7dcdab68ecfd7"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 28,
      "deletions": 19
    },
    "files": [
      {
        "sha": "bc76ceab2ee05b9bc501639d93ae6522ebc8198a",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "patch": "@@ -147,19 +147,6 @@ class CTxOut\n \n     uint256 GetHash() const;\n \n-    bool IsDust(int64 nMinRelayTxFee) const\n-    {\n-        // \"Dust\" is defined in terms of CTransaction::nMinRelayTxFee,\n-        // which has units satoshis-per-kilobyte.\n-        // If you'd pay more than 1/3 in fees\n-        // to spend something, then we consider it dust.\n-        // A typical txout is 34 bytes big, and will\n-        // need a CTxIn of at least 148 bytes to spend,\n-        // so dust is a txout less than 54 uBTC\n-        // (5460 satoshis) with default nMinRelayTxFee\n-        return ((nValue*1000)/(3*((int)GetSerializeSize(SER_DISK,0)+148)) < nMinRelayTxFee);\n-    }\n-\n     friend bool operator==(const CTxOut& a, const CTxOut& b)\n     {\n         return (a.nValue       == b.nValue &&"
      },
      {
        "sha": "d4a2260817dbc63fda2687730318e5ac830a4aaa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "patch": "@@ -490,7 +490,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n             reason = \"scriptpubkey\";\n             return false;\n         }\n-        if (txout.IsDust(CTransaction::nMinRelayTxFee)) {\n+        if (mempool.isDust(txout)) {\n             reason = \"dust\";\n             return false;\n         }"
      },
      {
        "sha": "4e526e70732905c8fb5afa8a26624f0b1a71b240",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "patch": "@@ -153,7 +153,7 @@ bool isDust(const QString& address, qint64 amount)\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script; script.SetDestination(dest);\n     CTxOut txOut(amount, script);\n-    return txOut.IsDust(CTransaction::nMinRelayTxFee);\n+    return mempool.isDust(txOut);\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "16487fb6ecefe35b6daf7b05bdd04272cfab7978",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "patch": "@@ -442,7 +442,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<Sen\n     qint64 totalAmount = 0;\n     foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (txOut.IsDust(CTransaction::nMinRelayTxFee)) {\n+        if (mempool.isDust(txOut)) {\n             QString message = QObject::tr(\"Requested payment amount (%1) too small\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second));\n "
      },
      {
        "sha": "766395e00503248941c7bd314590657014f14391",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "patch": "@@ -144,7 +144,6 @@ class CMinerPolicyEstimator\n     {\n         return estimate(byFee, fraction, byFeeCache);\n     }\n-\n     bool Write(CAutoFile& fileout)\n     {\n         return Write(fileout, byPriority) && Write(fileout, byFee);\n@@ -524,6 +523,28 @@ void CTxMemPool::estimateFees(double dPriorityMedian, double& dPriority, double\n     if (dFee < 0 && fUseHardCoded) dFee = 10.0;\n }\n \n+bool CTxMemPool::isDust(const CTxOut& txout)\n+{\n+    // \"Dust\" is defined as outputs so small\n+    // (in value) that they would require that\n+    // more than 1/3 of their value in fees to\n+    // have a reasonable chance of being accepted into\n+    // a block right now.\n+    // Fees are per-byte, so:\n+    int nSize = (int)::GetSerializeSize(txout, SER_DISK,0);\n+    // ... and assume it will need a 148-byte CTxIn to spend:\n+    nSize += 148;\n+\n+    // Use 0.01 (lowest 1%) as threshold to estimate fee-per-byte:\n+    double dMinFee, dUnused;\n+    estimateFees(0.01, dUnused, 0.01, dMinFee, true);\n+\n+    // Need to pay more than 1/3 of value?\n+    bool fIsDust = dMinFee*nSize > txout.nValue/3;\n+    return fIsDust;\n+}\n+\n+\n void CTxMemPool::writeEntry(CAutoFile& file, const uint256& txid, std::set<uint256>& alreadyWritten)\n {\n     if (alreadyWritten.count(txid)) return;"
      },
      {
        "sha": "4b989e61abc84479f31f7b1d2ffea609f2bab686",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "patch": "@@ -82,6 +82,7 @@ class CTxMemPool\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n     void estimateFees(double dPriorityMedian, double& dPriority, double dFeeMedian, double& dFee, bool fUseHardCoded=false);\n+    bool isDust(const CTxOut& txout);\n \n     unsigned long size()\n     {"
      },
      {
        "sha": "083eb5bf8decec8da052d3d0dc42691d509f3843",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd89e8d80000e01044b1095d056e1d10ca7b9ae4/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "patch": "@@ -1207,7 +1207,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n-                    if (txout.IsDust(CTransaction::nMinRelayTxFee))\n+                    if (mempool.isDust(txout))\n                     {\n                         strFailReason = _(\"Transaction amount too small\");\n                         return false;\n@@ -1267,7 +1267,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust(CTransaction::nMinRelayTxFee))\n+                    if (mempool.isDust(newTxOut))\n                     {\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();"
      }
    ]
  },
  {
    "sha": "a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWRjNzI0NmExZjZkMGI4MGM2MWZjZjNlOGU4MTczMjQwZjg5MTU3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-23T03:48:41Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:35Z"
      },
      "message": "Remove CTransaction::nMinRelayTxFee",
      "tree": {
        "sha": "7e0c043ab5e35d8528bebbb6288575b7e50ed0ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e0c043ab5e35d8528bebbb6288575b7e50ed0ea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd89e8d80000e01044b1095d056e1d10ca7b9ae4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd89e8d80000e01044b1095d056e1d10ca7b9ae4"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 4,
      "deletions": 10
    },
    "files": [
      {
        "sha": "dd2ee85e3f77ca3b36151ebc9e893a11c9801756",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
        "patch": "@@ -10,8 +10,7 @@\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n int64 CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n-/** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */\n-int64 CTransaction::nMinRelayTxFee = 10000; // Override with -minrelaytxfee\n+\n /** Mining: priorities smaller than this are not eligible for free-transaction area */\n double CTransaction::dMinFreePriority = COIN * 144 / 250;\n "
      },
      {
        "sha": "90388c41dd95b1c1d2e8a4cafc746b4c756d218e",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
        "patch": "@@ -170,7 +170,6 @@ class CTransaction\n {\n public:\n     static int64 nMinTxFee;\n-    static int64 nMinRelayTxFee;\n     static double dMinFreePriority;\n     static const int CURRENT_VERSION=1;\n     int nVersion;"
      },
      {
        "sha": "e06d65e60db93897984cf301aaf75e01575b1f17",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
        "patch": "@@ -493,11 +493,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n-        int64 n = 0;\n-        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n-            CTransaction::nMinRelayTxFee = n;\n-        else\n-            return InitError(strprintf(_(\"Invalid amount for -minrelaytxfee=<amount>: '%s'\"), mapArgs[\"-minrelaytxfee\"].c_str()));\n+        LogPrintf(\"Warning: -minrelaytxfee obsolete, use -mintxfee\\n\");\n     }\n     if (mapArgs.count(\"-minfreepriority\"))\n     {"
      },
      {
        "sha": "dd5bfd80657fbc4a5efc79e4f67f9a5cd0b5c1b0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
        "patch": "@@ -365,10 +365,10 @@ bool CTxMemPool::accept(CValidationState &state, const CTransaction &tx, bool fL\n             if (!fAccept) return false;\n         }\n \n-        if (fRejectInsaneFee && nFees > CTransaction::nMinRelayTxFee * 10000)\n+        if (fRejectInsaneFee && nFees > feeCutoff * 10000)\n             return error(\"CTxMemPool::accept() : insane fees %s, %\"PRI64d\" > %\"PRI64d,\n                          hash.ToString().c_str(),\n-                         nFees, CTransaction::nMinRelayTxFee * 10000);\n+                         nFees, (int64)(feeCutoff * 10000));\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks."
      }
    ]
  },
  {
    "sha": "d3f8fef5726f8588c118b7562004c93f021a2e5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Y4ZmVmNTcyNmY4NTg4YzExOGI3NTYyMDA0YzkzZjAyMWEyZTVl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-09-23T04:44:09Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-10-09T06:53:35Z"
      },
      "message": "Update release notes with fee changes",
      "tree": {
        "sha": "a23f85593742163344b3e8ca5154696c07f3958e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a23f85593742163344b3e8ca5154696c07f3958e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f8fef5726f8588c118b7562004c93f021a2e5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f8fef5726f8588c118b7562004c93f021a2e5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f8fef5726f8588c118b7562004c93f021a2e5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f8fef5726f8588c118b7562004c93f021a2e5e/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5dc7246a1f6d0b80c61fcf3e8e8173240f89157"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "585e35008534e00da00507169df9828a2e2b9b1d",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f8fef5726f8588c118b7562004c93f021a2e5e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f8fef5726f8588c118b7562004c93f021a2e5e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d3f8fef5726f8588c118b7562004c93f021a2e5e",
        "patch": "@@ -1,3 +1,25 @@\n (note: this is a temporary file, to be added-to by anybody, and deleted at\n release time)\n \n+Fee changes\n+\n+Fee-handling code has been rewritten, so that transaction fees paid are adjusted\n+based on the transactions that miners are including in blocks instead of\n+being arbitrarily hard-coded.\n+\n+RPC changes\n+\n+getrawmempool : now has an optional 'verbose' boolean flag, if true\n+reports information on each memory pool transaction.\n+\n+New RPC methods\n+\n+estimatefees : Returns estimate of priority or fee needed to get\n+transactions accepted into blocks.\n+\n+Command-line changes\n+\n+-limitfreerelay and -minrelaytxfee options are obsolete. \n+They are replaced with dropping transactions that are unlikely\n+to be included in the next several blocks.\n+"
      }
    ]
  }
]