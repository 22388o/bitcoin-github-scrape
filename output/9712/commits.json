[
  {
    "sha": "29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWM1MzI4OWE5ZTZiYjM0YTA5OGVhODdkOTIzOTY4ZTNhYzZkNzVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T18:07:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-07T18:07:29Z"
      },
      "message": "bench: Fix initialization order in registration\n\nThe initialization order of global data structures in different\nimplementation units is undefined. Making use of this is essentially\ngambling on what the linker does, the so-called [Static initialization\norder fiasco](https://isocpp.org/wiki/faq/ctors#static-init-order).\n\nIn this case it apparently worked on Linux but failed on OpenBSD and\nFreeBSD.\n\nTo create it on first use, make the registration structure local to\na function.\n\nFixes #8910.",
      "tree": {
        "sha": "5f9a42f47526e1daa742ac1adeb6617eef37740f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f9a42f47526e1daa742ac1adeb6617eef37740f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29c53289a9e6bb34a098ea87d923968e3ac6d75d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c53289a9e6bb34a098ea87d923968e3ac6d75d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b709fe7ffc44ae14bbd2403cdfbfa4fcf94cef6b"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3c9df4f713c1408ebf8ffe4bc0fc1fe8d0217902",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "patch": "@@ -9,7 +9,10 @@\n #include <iomanip>\n #include <sys/time.h>\n \n-std::map<std::string, benchmark::BenchFunction> benchmark::BenchRunner::benchmarks;\n+benchmark::BenchRunner::BenchmarkMap &benchmark::BenchRunner::benchmarks() {\n+    static std::map<std::string, benchmark::BenchFunction> benchmarks_map;\n+    return benchmarks_map;\n+}\n \n static double gettimedouble(void) {\n     struct timeval tv;\n@@ -19,7 +22,7 @@ static double gettimedouble(void) {\n \n benchmark::BenchRunner::BenchRunner(std::string name, benchmark::BenchFunction func)\n {\n-    benchmarks.insert(std::make_pair(name, func));\n+    benchmarks().insert(std::make_pair(name, func));\n }\n \n void\n@@ -29,12 +32,9 @@ benchmark::BenchRunner::RunAll(double elapsedTimeForOne)\n     std::cout << \"#Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \",\"\n               << \"min_cycles\" << \",\" << \"max_cycles\" << \",\" << \"average_cycles\" << \"\\n\";\n \n-    for (std::map<std::string,benchmark::BenchFunction>::iterator it = benchmarks.begin();\n-         it != benchmarks.end(); ++it) {\n-\n-        State state(it->first, elapsedTimeForOne);\n-        benchmark::BenchFunction& func = it->second;\n-        func(state);\n+    for (const auto &p: benchmarks()) {\n+        State state(p.first, elapsedTimeForOne);\n+        p.second(state);\n     }\n     perf_fini();\n }"
      },
      {
        "sha": "0e7605c726779776554ff7af6a95778eae5d05e0",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c53289a9e6bb34a098ea87d923968e3ac6d75d/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=29c53289a9e6bb34a098ea87d923968e3ac6d75d",
        "patch": "@@ -63,7 +63,8 @@ namespace benchmark {\n \n     class BenchRunner\n     {\n-        static std::map<std::string, BenchFunction> benchmarks;\n+        typedef std::map<std::string, BenchFunction> BenchmarkMap;\n+        static BenchmarkMap &benchmarks();\n \n     public:\n         BenchRunner(std::string name, BenchFunction func);"
      }
    ]
  }
]