[
  {
    "sha": "4848e711076c6ebc5d841feb83baeb6d2bc76c94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODQ4ZTcxMTA3NmM2ZWJjNWQ4NDFmZWI4M2JhZWI2ZDJiYzc2Yzk0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-26T09:05:59Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-26T09:05:59Z"
      },
      "message": "scripted-diff: Use [[nodiscard]] (C++17) instead of NODISCARD\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/NODISCARD/[[nodiscard]]/g\" $(git grep -l \"NODISCARD\" \":(exclude)src/bench/nanobench.h\" \":(exclude)src/attributes.h\")\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "f72d2a024c8ddc89c6915d586e936185cbfc2e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f72d2a024c8ddc89c6915d586e936185cbfc2e77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4848e711076c6ebc5d841feb83baeb6d2bc76c94",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4848e711076c6ebc5d841feb83baeb6d2bc76c94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4848e711076c6ebc5d841feb83baeb6d2bc76c94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4848e711076c6ebc5d841feb83baeb6d2bc76c94/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50091592dd875a1c94030dbed74112b003732d68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50091592dd875a1c94030dbed74112b003732d68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50091592dd875a1c94030dbed74112b003732d68"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 54,
      "deletions": 54
    },
    "files": [
      {
        "sha": "780846c6c53849da717ff1bc17daae4b33d8f16e",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -35,7 +35,7 @@ static const int8_t mapBase58[256] = {\n     -1,-1,-1,-1,-1,-1,-1,-1, -1,-1,-1,-1,-1,-1,-1,-1,\n };\n \n-NODISCARD static bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_len)\n+[[nodiscard]] static bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_len)\n {\n     // Skip leading spaces.\n     while (*psz && IsSpace(*psz))\n@@ -141,7 +141,7 @@ std::string EncodeBase58Check(Span<const unsigned char> input)\n     return EncodeBase58(vch);\n }\n \n-NODISCARD static bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len)\n+[[nodiscard]] static bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n     if (!DecodeBase58(psz, vchRet, max_ret_len > std::numeric_limits<int>::max() - 4 ? std::numeric_limits<int>::max() : max_ret_len + 4) ||\n         (vchRet.size() < 4)) {"
      },
      {
        "sha": "60551a12aea44133d2bd6ab1c8660574fb45dc93",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -29,7 +29,7 @@ std::string EncodeBase58(Span<const unsigned char> input);\n  * Decode a base58-encoded string (str) into a byte vector (vchRet).\n  * return true if decoding is successful.\n  */\n-NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n+[[nodiscard]] bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n  * Encode a byte span into a base58-encoded string, including checksum\n@@ -40,6 +40,6 @@ std::string EncodeBase58Check(Span<const unsigned char> input);\n  * Decode a base58-encoded string (str) that includes a checksum into a byte\n  * vector (vchRet), return true if decoding is successful\n  */\n-NODISCARD bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n+[[nodiscard]] bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n #endif // BITCOIN_BASE58_H"
      },
      {
        "sha": "aaee9c445d32f9c5b5492bc99efb57ff99276876",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -22,8 +22,8 @@ class UniValue;\n // core_read.cpp\n CScript ParseScript(const std::string& s);\n std::string ScriptToAsmStr(const CScript& script, const bool fAttemptSighashDecode = false);\n-NODISCARD bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n-NODISCARD bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n+[[nodiscard]] bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no_witness = false, bool try_witness = true);\n+[[nodiscard]] bool DecodeHexBlk(CBlock&, const std::string& strHexBlk);\n bool DecodeHexBlockHeader(CBlockHeader&, const std::string& hex_header);\n \n /**"
      },
      {
        "sha": "083ac12523c2b9166e5cbf68be4dab27654cbe7f",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -197,7 +197,7 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL\n }\n \n /** Single-SHA256 a 32-byte input (represented as uint256). */\n-NODISCARD uint256 SHA256Uint256(const uint256& input);\n+[[nodiscard]] uint256 SHA256Uint256(const uint256& input);\n \n unsigned int MurmurHash3(unsigned int nHashSeed, Span<const unsigned char> vDataToHash);\n "
      },
      {
        "sha": "468860d5e0d5880772745153b1b0c09ed21228a4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -113,7 +113,7 @@ static fs::path GetPidFile(const ArgsManager& args)\n     return AbsPathForConfigVal(fs::path(args.GetArg(\"-pid\", BITCOIN_PID_FILENAME)));\n }\n \n-NODISCARD static bool CreatePidFile(const ArgsManager& args)\n+[[nodiscard]] static bool CreatePidFile(const ArgsManager& args)\n {\n     fsbridge::ofstream file{GetPidFile(args)};\n     if (file) {"
      },
      {
        "sha": "0c016ff04e162f14c85fb17c9123fba9eaa08156",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -36,6 +36,6 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n  * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+[[nodiscard]] TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "bb7f39323bf7f6e91ad4db56dd4dddecf4ce39fd",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -22,7 +22,7 @@ enum class OutputType {\n \n extern const std::array<OutputType, 3> OUTPUT_TYPES;\n \n-NODISCARD bool ParseOutputType(const std::string& str, OutputType& output_type);\n+[[nodiscard]] bool ParseOutputType(const std::string& str, OutputType& output_type);\n const std::string& FormatOutputType(OutputType type);\n \n /**"
      },
      {
        "sha": "b566726ee38cdcec6261f1ca2d092d95c45b7b1c",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -398,7 +398,7 @@ struct PartiallySignedTransaction\n \n     /** Merge psbt into this. The two psbts must have the same underlying CTransaction (i.e. the\n       * same actual Bitcoin transaction.) Returns true if the merge succeeded, false otherwise. */\n-    NODISCARD bool Merge(const PartiallySignedTransaction& psbt);\n+    [[nodiscard]] bool Merge(const PartiallySignedTransaction& psbt);\n     bool AddInput(const CTxIn& txin, PSBTInput& psbtin);\n     bool AddOutput(const CTxOut& txout, const PSBTOutput& psbtout);\n     PartiallySignedTransaction() {}\n@@ -605,11 +605,11 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n  * @param[in]  psbtxs the PSBTs to combine\n  * @return error (OK if we successfully combined the transactions, other error if they were not compatible)\n  */\n-NODISCARD TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n+[[nodiscard]] TransactionError CombinePSBTs(PartiallySignedTransaction& out, const std::vector<PartiallySignedTransaction>& psbtxs);\n \n //! Decode a base64ed PSBT into a PartiallySignedTransaction\n-NODISCARD bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n+[[nodiscard]] bool DecodeBase64PSBT(PartiallySignedTransaction& decoded_psbt, const std::string& base64_psbt, std::string& error);\n //! Decode a raw (binary blob) PSBT into a PartiallySignedTransaction\n-NODISCARD bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n+[[nodiscard]] bool DecodeRawPSBT(PartiallySignedTransaction& decoded_psbt, const std::string& raw_psbt, std::string& error);\n \n #endif // BITCOIN_PSBT_H"
      },
      {
        "sha": "8d8fa185ba517350fdc2c2a4f5c6d953f19ddbbf",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -731,7 +731,7 @@ enum class ParseScriptContext {\n };\n \n /** Parse a key path, being passed a split list of elements (the first element is ignored). */\n-NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out, std::string& error)\n+[[nodiscard]] bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath& out, std::string& error)\n {\n     for (size_t i = 1; i < split.size(); ++i) {\n         Span<const char> elem = split[i];"
      },
      {
        "sha": "6bfcf242d03a3cb4c1cec462b8b924a0e53d4ec7",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -38,7 +38,7 @@ class CCoinsViewTest : public CCoinsView\n     std::map<COutPoint, Coin> map_;\n \n public:\n-    NODISCARD bool GetCoin(const COutPoint& outpoint, Coin& coin) const override\n+    [[nodiscard]] bool GetCoin(const COutPoint& outpoint, Coin& coin) const override\n     {\n         std::map<COutPoint, Coin>::const_iterator it = map_.find(outpoint);\n         if (it == map_.end()) {"
      },
      {
        "sha": "37e136dbb3a1b63acf84e6feccd714adc209ab79",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -35,23 +35,23 @@\n #include <string>\n #include <vector>\n \n-NODISCARD inline std::vector<uint8_t> ConsumeRandomLengthByteVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n+[[nodiscard]] inline std::vector<uint8_t> ConsumeRandomLengthByteVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n {\n     const std::string s = fuzzed_data_provider.ConsumeRandomLengthString(max_length);\n     return {s.begin(), s.end()};\n }\n \n-NODISCARD inline std::vector<bool> ConsumeRandomLengthBitVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n+[[nodiscard]] inline std::vector<bool> ConsumeRandomLengthBitVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n {\n     return BytesToBits(ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length));\n }\n \n-NODISCARD inline CDataStream ConsumeDataStream(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n+[[nodiscard]] inline CDataStream ConsumeDataStream(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n {\n     return {ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length), SER_NETWORK, INIT_PROTO_VERSION};\n }\n \n-NODISCARD inline std::vector<std::string> ConsumeRandomLengthStringVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_vector_size = 16, const size_t max_string_length = 16) noexcept\n+[[nodiscard]] inline std::vector<std::string> ConsumeRandomLengthStringVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_vector_size = 16, const size_t max_string_length = 16) noexcept\n {\n     const size_t n_elements = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, max_vector_size);\n     std::vector<std::string> r;\n@@ -62,7 +62,7 @@ NODISCARD inline std::vector<std::string> ConsumeRandomLengthStringVector(Fuzzed\n }\n \n template <typename T>\n-NODISCARD inline std::vector<T> ConsumeRandomLengthIntegralVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_vector_size = 16) noexcept\n+[[nodiscard]] inline std::vector<T> ConsumeRandomLengthIntegralVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_vector_size = 16) noexcept\n {\n     const size_t n_elements = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, max_vector_size);\n     std::vector<T> r;\n@@ -73,7 +73,7 @@ NODISCARD inline std::vector<T> ConsumeRandomLengthIntegralVector(FuzzedDataProv\n }\n \n template <typename T>\n-NODISCARD inline std::optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n+[[nodiscard]] inline std::optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n {\n     const std::vector<uint8_t> buffer = ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length);\n     CDataStream ds{buffer, SER_NETWORK, INIT_PROTO_VERSION};\n@@ -86,35 +86,35 @@ NODISCARD inline std::optional<T> ConsumeDeserializable(FuzzedDataProvider& fuzz\n     return obj;\n }\n \n-NODISCARD inline opcodetype ConsumeOpcodeType(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline opcodetype ConsumeOpcodeType(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     return static_cast<opcodetype>(fuzzed_data_provider.ConsumeIntegralInRange<uint32_t>(0, MAX_OPCODE));\n }\n \n-NODISCARD inline CAmount ConsumeMoney(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline CAmount ConsumeMoney(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     return fuzzed_data_provider.ConsumeIntegralInRange<CAmount>(0, MAX_MONEY);\n }\n \n-NODISCARD inline int64_t ConsumeTime(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline int64_t ConsumeTime(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     static const int64_t time_min = ParseISO8601DateTime(\"1970-01-01T00:00:00Z\");\n     static const int64_t time_max = ParseISO8601DateTime(\"9999-12-31T23:59:59Z\");\n     return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(time_min, time_max);\n }\n \n-NODISCARD inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline CScript ConsumeScript(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     const std::vector<uint8_t> b = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n     return {b.begin(), b.end()};\n }\n \n-NODISCARD inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     return CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n }\n \n-NODISCARD inline uint160 ConsumeUInt160(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline uint160 ConsumeUInt160(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     const std::vector<uint8_t> v160 = fuzzed_data_provider.ConsumeBytes<uint8_t>(160 / 8);\n     if (v160.size() != 160 / 8) {\n@@ -123,7 +123,7 @@ NODISCARD inline uint160 ConsumeUInt160(FuzzedDataProvider& fuzzed_data_provider\n     return uint160{v160};\n }\n \n-NODISCARD inline uint256 ConsumeUInt256(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline uint256 ConsumeUInt256(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     const std::vector<uint8_t> v256 = fuzzed_data_provider.ConsumeBytes<uint8_t>(256 / 8);\n     if (v256.size() != 256 / 8) {\n@@ -132,12 +132,12 @@ NODISCARD inline uint256 ConsumeUInt256(FuzzedDataProvider& fuzzed_data_provider\n     return uint256{v256};\n }\n \n-NODISCARD inline arith_uint256 ConsumeArithUInt256(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline arith_uint256 ConsumeArithUInt256(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     return UintToArith256(ConsumeUInt256(fuzzed_data_provider));\n }\n \n-NODISCARD inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n+[[nodiscard]] inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzzed_data_provider, const CTransaction& tx) noexcept\n {\n     // Avoid:\n     // policy/feerate.cpp:28:34: runtime error: signed integer overflow: 34873208148477500 * 1000 cannot be represented in type 'long'\n@@ -152,7 +152,7 @@ NODISCARD inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzze\n     return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n }\n \n-NODISCARD inline CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     CTxDestination tx_destination;\n     switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n@@ -190,7 +190,7 @@ NODISCARD inline CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_\n }\n \n template <typename T>\n-NODISCARD bool MultiplicationOverflow(const T i, const T j) noexcept\n+[[nodiscard]] bool MultiplicationOverflow(const T i, const T j) noexcept\n {\n     static_assert(std::is_integral<T>::value, \"Integral required.\");\n     if (std::numeric_limits<T>::is_signed) {\n@@ -213,7 +213,7 @@ NODISCARD bool MultiplicationOverflow(const T i, const T j) noexcept\n }\n \n template <class T>\n-NODISCARD bool AdditionOverflow(const T i, const T j) noexcept\n+[[nodiscard]] bool AdditionOverflow(const T i, const T j) noexcept\n {\n     static_assert(std::is_integral<T>::value, \"Integral required.\");\n     if (std::numeric_limits<T>::is_signed) {\n@@ -223,7 +223,7 @@ NODISCARD bool AdditionOverflow(const T i, const T j) noexcept\n     return std::numeric_limits<T>::max() - i < j;\n }\n \n-NODISCARD inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n+[[nodiscard]] inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsViewCache& inputs) noexcept\n {\n     for (const CTxIn& tx_in : tx.vin) {\n         const Coin& coin = inputs.AccessCoin(tx_in.prevout);\n@@ -238,7 +238,7 @@ NODISCARD inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsVie\n  * Returns a byte vector of specified size regardless of the number of remaining bytes available\n  * from the fuzzer. Pads with zero value bytes if needed to achieve the specified size.\n  */\n-NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataProvider& fuzzed_data_provider, const size_t length) noexcept\n+[[nodiscard]] inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataProvider& fuzzed_data_provider, const size_t length) noexcept\n {\n     std::vector<uint8_t> result(length);\n     const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(length);\n@@ -419,7 +419,7 @@ class FuzzedFileProvider\n     }\n };\n \n-NODISCARD inline FuzzedFileProvider ConsumeFile(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline FuzzedFileProvider ConsumeFile(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     return {fuzzed_data_provider};\n }\n@@ -440,7 +440,7 @@ class FuzzedAutoFileProvider\n     }\n };\n \n-NODISCARD inline FuzzedAutoFileProvider ConsumeAutoFile(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+[[nodiscard]] inline FuzzedAutoFileProvider ConsumeAutoFile(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n     return {fuzzed_data_provider};\n }"
      },
      {
        "sha": "8f86f2aaa6445ef58a149d307b6ca15274f200d8",
        "filename": "src/util/bip32.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/bip32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/bip32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -10,7 +10,7 @@\n #include <vector>\n \n /** Parse an HD keypaths like \"m/7/0'/2000\". */\n-NODISCARD bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n+[[nodiscard]] bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypath);\n \n /** Write HD keypaths as strings */\n std::string WriteHDKeypath(const std::vector<uint32_t>& keypath);"
      },
      {
        "sha": "da7f673cda13573475ac468d23b3248be16af8f2",
        "filename": "src/util/moneystr.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/moneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/moneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -19,6 +19,6 @@\n  */\n std::string FormatMoney(const CAmount& n);\n /** Parse an amount denoted in full coins. E.g. \"0.0034\" supplied on the command line. **/\n-NODISCARD bool ParseMoney(const std::string& str, CAmount& nRet);\n+[[nodiscard]] bool ParseMoney(const std::string& str, CAmount& nRet);\n \n #endif // BITCOIN_UTIL_MONEYSTR_H"
      },
      {
        "sha": "f3d54a2ac9e3f63f20d14bae14513d245a1b89da",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -280,7 +280,7 @@ std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n-NODISCARD static bool ParsePrechecks(const std::string& str)\n+[[nodiscard]] static bool ParsePrechecks(const std::string& str)\n {\n     if (str.empty()) // No empty string allowed\n         return false;"
      },
      {
        "sha": "8ee43c620be17e63a80ec6b991c6f55b50148c85",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -101,42 +101,42 @@ constexpr inline bool IsSpace(char c) noexcept {\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseInt32(const std::string& str, int32_t *out);\n+[[nodiscard]] bool ParseInt32(const std::string& str, int32_t *out);\n \n /**\n  * Convert string to signed 64-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseInt64(const std::string& str, int64_t *out);\n+[[nodiscard]] bool ParseInt64(const std::string& str, int64_t *out);\n \n /**\n  * Convert decimal string to unsigned 8-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseUInt8(const std::string& str, uint8_t *out);\n+[[nodiscard]] bool ParseUInt8(const std::string& str, uint8_t *out);\n \n /**\n  * Convert decimal string to unsigned 32-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseUInt32(const std::string& str, uint32_t *out);\n+[[nodiscard]] bool ParseUInt32(const std::string& str, uint32_t *out);\n \n /**\n  * Convert decimal string to unsigned 64-bit integer with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid integer,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseUInt64(const std::string& str, uint64_t *out);\n+[[nodiscard]] bool ParseUInt64(const std::string& str, uint64_t *out);\n \n /**\n  * Convert string to double with strict parse error feedback.\n  * @returns true if the entire string could be parsed as valid double,\n  *   false if not the entire string could be parsed or when overflow or underflow occurred.\n  */\n-NODISCARD bool ParseDouble(const std::string& str, double *out);\n+[[nodiscard]] bool ParseDouble(const std::string& str, double *out);\n \n /**\n  * Convert a span of bytes to a lower-case hexadecimal string.\n@@ -170,7 +170,7 @@ bool TimingResistantEqual(const T& a, const T& b)\n  * @returns true on success, false on error.\n  * @note The result must be in the range (-10^18,10^18), otherwise an overflow error will trigger.\n  */\n-NODISCARD bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n+[[nodiscard]] bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out);\n \n /** Convert from one power-of-2 number base to another. */\n template<int frombits, int tobits, bool pad, typename O, typename I>"
      },
      {
        "sha": "5ffdc80d8841dcac5bc1105766e1a268070d466e",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -15,7 +15,7 @@\n #include <string>\n #include <vector>\n \n-NODISCARD inline std::string TrimString(const std::string& str, const std::string& pattern = \" \\f\\n\\r\\t\\v\")\n+[[nodiscard]] inline std::string TrimString(const std::string& str, const std::string& pattern = \" \\f\\n\\r\\t\\v\")\n {\n     std::string::size_type front = str.find_first_not_of(pattern);\n     if (front == std::string::npos) {\n@@ -59,7 +59,7 @@ inline std::string Join(const std::vector<std::string>& list, const std::string&\n /**\n  * Check if a string does not contain any embedded NUL (\\0) characters\n  */\n-NODISCARD inline bool ValidAsCString(const std::string& str) noexcept\n+[[nodiscard]] inline bool ValidAsCString(const std::string& str) noexcept\n {\n     return str.size() == strlen(str.c_str());\n }\n@@ -80,7 +80,7 @@ std::string ToString(const T& t)\n  * Check whether a container begins with the given prefix.\n  */\n template <typename T1, size_t PREFIX_LEN>\n-NODISCARD inline bool HasPrefix(const T1& obj,\n+[[nodiscard]] inline bool HasPrefix(const T1& obj,\n                                 const std::array<uint8_t, PREFIX_LEN>& prefix)\n {\n     return obj.size() >= PREFIX_LEN &&"
      },
      {
        "sha": "78ebf751bf21fdd0d26eb401c2de62f9a5f37381",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4848e711076c6ebc5d841feb83baeb6d2bc76c94/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "patch": "@@ -188,7 +188,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n+    [[nodiscard]] bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n      * Returns true if settings values from the default section should be used,\n@@ -220,8 +220,8 @@ class ArgsManager\n      */\n     void SelectConfigNetwork(const std::string& network);\n \n-    NODISCARD bool ParseParameters(int argc, const char* const argv[], std::string& error);\n-    NODISCARD bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n+    [[nodiscard]] bool ParseParameters(int argc, const char* const argv[], std::string& error);\n+    [[nodiscard]] bool ReadConfigFiles(std::string& error, bool ignore_invalid_keys = false);\n \n     /**\n      * Log warnings for options in m_section_only_args when"
      }
    ]
  },
  {
    "sha": "79bff8e48aca961ec271b0d592aca9278b981e2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWJmZjhlNDhhY2E5NjFlYzI3MWIwZDU5MmFjYTkyNzhiOTgxZTJm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-26T09:07:33Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-11-26T09:07:33Z"
      },
      "message": "Remove NODISCARD",
      "tree": {
        "sha": "7f6c82361d24c13f0c815f9d98dcd51521d12308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f6c82361d24c13f0c815f9d98dcd51521d12308"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79bff8e48aca961ec271b0d592aca9278b981e2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79bff8e48aca961ec271b0d592aca9278b981e2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79bff8e48aca961ec271b0d592aca9278b981e2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79bff8e48aca961ec271b0d592aca9278b981e2f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4848e711076c6ebc5d841feb83baeb6d2bc76c94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4848e711076c6ebc5d841feb83baeb6d2bc76c94"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 0,
      "deletions": 13
    },
    "files": [
      {
        "sha": "995c24e13f0450ab5d70dea1852f409bdae69f2f",
        "filename": "src/attributes.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79bff8e48aca961ec271b0d592aca9278b981e2f/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79bff8e48aca961ec271b0d592aca9278b981e2f/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=79bff8e48aca961ec271b0d592aca9278b981e2f",
        "patch": "@@ -6,19 +6,6 @@\n #ifndef BITCOIN_ATTRIBUTES_H\n #define BITCOIN_ATTRIBUTES_H\n \n-#if defined(__has_cpp_attribute)\n-#  if __has_cpp_attribute(nodiscard)\n-#    define NODISCARD [[nodiscard]]\n-#  endif\n-#endif\n-#ifndef NODISCARD\n-#  if defined(_MSC_VER) && _MSC_VER >= 1700\n-#    define NODISCARD _Check_return_\n-#  else\n-#    define NODISCARD __attribute__((warn_unused_result))\n-#  endif\n-#endif\n-\n #if defined(__clang__)\n #  if __has_attribute(lifetimebound)\n #    define LIFETIMEBOUND [[clang::lifetimebound]]"
      }
    ]
  }
]