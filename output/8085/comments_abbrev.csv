NicolasDorier,2016-05-23T04:04:14Z,"nit typo: ""SocketSendData re**s**urns written size""\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-220883338,220883338,
sipa,2016-05-24T16:37:34Z,#8082 moves mapRelay from net to main. I think it indeed belongs with node processing code and not in base networking code.\n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-221330283,221330283,
theuni,2016-05-24T16:48:43Z,"@sipa Indeed, that's definitely the correct approach and the change here can be dropped.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-221333543,221333543,
theuni,2016-05-26T01:30:23Z,"@laanwj I pushed a bunch of new commits to address the review you gave me. The commit history doesn't really make sense now, though, as there's a good bit of reverting. Please let me know if you'd like me to squash down to a more logical history for easier review, or continue to pile up changes and squash at the end.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-221754643,221754643,
theuni,2016-05-27T05:34:00Z,"Rebased to master and squashed down changes so that the history makes sense again.\n\nThough there's still a good bit left to do, I think this is a good stopping point. I'll avoid making further changes here unless requested.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-222063946,222063946,
theuni,2016-06-06T21:21:00Z,"Rebased to master after #8082, and dropped that commit here. Should be ready for review.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-224092243,224092243,
kazcw,2016-06-10T20:42:10Z,utACK the src/*.* changes at f86d0be (with minor notes in comments) [didn't review the subdirectory stuff thoroughly; I'm less familiar with that code]\n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-225290282,225290282,
theuni,2016-06-10T21:14:09Z,"@kazcw Thanks for the excellent review! I'll pick this back up in ~2 weeks. Obviously if that's going to stall progress on lock refactors too much, go ahead with them and I'll cope with it here.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-225297383,225297383,
JeremyRubin,2016-06-15T15:11:59Z,"utack, other than the atomic::store problem I marked this refactor seems safe.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-226218468,226218468,
theuni,2016-06-28T08:48:02Z,"Addressed most (all?) of the comments here, and added some commits.\n\nFor future comparison, the current tip is https://github.com/theuni/bitcoin/commit/f96d164f83239e74288ea6a707228be9a4f3ae27. I'll now work on rebasing to master.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-228989553,228989553,
btcdrak,2016-08-24T20:23:27Z,needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-242195853,242195853,
laanwj,2016-08-25T06:50:21Z,"Yes, needs rebase, should be merged not very long after that IMO\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-242296120,242296120,
theuni,2016-08-30T17:44:00Z,"I have this rebased locally, I've been pulling out more controversial chunks for individual PR. Would you prefer to just do it all in one go here?\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-243520576,243520576,
btcdrak,2016-08-30T17:44:54Z,@theuni all in one go please. \n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-243520853,243520853,
theuni,2016-08-31T03:26:12Z,"ok, will push up a rebased version tomorrow.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-243648138,243648138,
theuni,2016-08-31T18:24:14Z,"Rebased. This has been rebased through lots of changes, though I believe the newer stuff is accounted for.\n\nI'd recommend taking a look at the final CConnman first to get an idea of how it looks, then each individual commit should make more sense.\n\n@jonasschnelli 1cf69d418576a0096f8f3e83494a107774dde2ed is included as we discussed, so that kicking can be done in a more straightforward way, but",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-243855266,243855266,
jonasschnelli,2016-09-01T13:23:54Z,"~~Started IBDing a node with this PR (`-listen=0`, connected to a in-sync mainnet node on the same system). Its built with `--enable-debug` and IBDs with `-debug=net`, `-prune=550` and `-dbcache=4000`.~~\n\n~~Reached progress `progress=0.097296` after 4h where I normally do a full IBD (with `--enable-debug`)  under 4h on the same machine.~~\n\n~~Either the `-debug=net` is causing the slow down or ",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-244077083,244077083,
theuni,2016-09-02T02:16:08Z,@jonasschnelli Thanks for having a look. I'll try to reproduce.\n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-244265995,244265995,
laanwj,2016-09-08T07:19:50Z,"> Either the -debug=net is causing the slow down \n\nHah, I wouldn't be surprised. Thanks for testing.\n\nIs this performance regression serious enough to block this, or shouldit be solved later? This is a large change, which has had a lot of review by now, and it again needs rebase...\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245514444,245514444,
jonasschnelli,2016-09-08T07:21:50Z,Sorry this was my fault in doing benchmark in conjunctions with `--enable-debug`\n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245514822,245514822,
laanwj,2016-09-08T07:34:35Z,"> Sorry this was my fault in doing benchmark in conjunctions with --enable-debug\n\nOk, good to know\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245517235,245517235,
sipa,2016-09-08T13:24:41Z,"Concept and overall code review ACK. I think you still need to address https://github.com/bitcoin/bitcoin/pull/8085/files#r66671033. I also left a number of nits in various commits, but none of them are blockers.\n\nNeeds rebase, though.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245595815,245595815,
theuni,2016-09-08T13:33:11Z,"@sipa Yikes, thanks for noticing the missed changes. I'll rebase now and make sure that matches.\nThanks for the review!\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245598279,245598279,
theuni,2016-09-08T17:18:09Z,"Rebased, fixed up the salt changes, and squashed the win32 build fix.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245671135,245671135,
laanwj,2016-09-09T08:47:23Z,Thanks for the review @sipa.\n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245855971,245855971,
laanwj,2016-09-09T09:44:59Z,ACK 0103c5b\n,https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-245868868,245868868,
sipa,2016-09-11T14:05:32Z,"@rebroad It was wrong, as is explained in the commit. If two connections arrive before the version message cycles back, nLocalHostNonce would be overwritten by the second connection before the comparison occurs.\n",https://github.com/bitcoin/bitcoin/pull/8085#issuecomment-246181943,246181943,
sipa,2016-05-24T14:50:32Z,"This won't work. It needs to be a ConnMan-scoped variable, not a CNode-scoped one, as the nonce will come back through another link than the one we sent it through.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r64405836,64405836,src/net.h
theuni,2016-05-24T16:13:08Z,"@sipa See https://github.com/bitcoin/bitcoin/pull/8085/commits/46cf6754cf6ac7bab76fb61ad9494741de235f6c#diff-9a82240fe7dfe86564178691cc57f2f1R351.\n\nI started by simply moving this to CConnman as you suggest, but it's racy and dependent on the optimistic send succeeding (nonce is set in one thread, tested in another). With this change, I believe we now guard against rapid-fire connections that ma",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r64423396,64423396,src/net.h
sipa,2016-05-24T16:17:14Z,"Nevermind, indeed.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r64424128,64424128,src/net.h
kazcw,2016-06-10T19:12:28Z,"I don't see g_connman requiring any refcounting, could this be a plain unique_ptr?\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66666522,66666522,src/init.cpp
theuni,2016-06-10T19:22:43Z,"This was originally passed around differently, but refactored to essentially be a unique_ptr. So yes :)\n\nThough it's worth mentioning that the global is only temporary until the rpc/qt interfaces learn how to accept/maintain an instance. So it's probably even more important to not encourage any sharing semantics.\n\nWill change.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66667844,66667844,src/init.cpp
kazcw,2016-06-10T19:23:29Z,Lifetime safety is more robust without the existence of constructed-not-started and stopped-not-destructed twilight states. What do you think about doing the Start/Stop stuff in the ctor/dtor -- would the stuff that AppInit2 currently does between construction and Start make sense to put into the CConnman::Options?\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66667939,66667939,src/net.cpp
kazcw,2016-06-10T19:34:18Z,"Nit: std::function indirection is fairly heavyweight, templating these would make the functors inlineable.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66669196,66669196,src/net.h
kazcw,2016-06-10T19:43:19Z,Nit: could use a comment documenting connman nullability.\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66670406,66670406,src/main.cpp
kazcw,2016-06-10T19:48:22Z,"There's a newer version of this initialization in master from #8173, the commit is 8884830.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66671033,66671033,src/main.cpp
theuni,2016-06-10T19:55:06Z,"The reason for start/stop doesn't really become obvious until the async behavior comes in. As a next step, all of the connecting/resolving behavior will be replaced with async events handled via callbacks. It's necessary to be able to have some basic connman functionality before the event thread spins up (or in case it's never going to). The most straightforward example is that we'll want to stop ",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66671837,66671837,src/net.cpp
theuni,2016-06-10T19:57:02Z,Good point.\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66672120,66672120,src/net.h
theuni,2016-06-10T20:01:40Z,"Agreed, will do. In case it's not clear, the intention is to allow us to avoid skipping the network altogether for utility functions. Beyond the startup stuff where it's currently skipped, in the future it may be interesting to do things like on-the-fly reindexing without having to shut down.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66672713,66672713,src/main.cpp
theuni,2016-06-10T20:02:41Z,"Thanks, I'll note this for the next rebase round.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66672857,66672857,src/main.cpp
kazcw,2016-06-10T20:28:56Z,"I'd be more comfortable with a builder doing those binds or something -- it just seems like it would be easy for a future change to introduce an unchecked dependency on the CConnman state, that could make for subtle and unpredictable bugs. But this is a complex change you're certainly more familiar with than I, so ACK however you decide to ensure safety against that kind of case.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66676159,66676159,src/net.cpp
theuni,2016-06-10T20:39:01Z,"Roger. I see your point and agree, I'm just trying to avoid overthinking this until the async stuff is added. Once it's all hooked up, maybe we can switch to a model where Start() returns some kind of object that guarantees a certain state that CConnman does not.\n\nThe alternative would be to move out things that don't require a running state (addrman/bandb as examples) and let them have separate",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r66677551,66677551,src/net.cpp
JeremyRubin,2016-06-14T19:10:53Z,"nit: unclear why interface is in options when it doesn't really seem to be an option. Perhaps having a struct Context to hold state such as interface, scheduler, and threadgroup would be a better encapsulation.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67036736,67036736,src/net.h
JeremyRubin,2016-06-14T20:10:07Z,"note: This section is a bit more than just a code move, but it seems to have no functional change.\n(the couple lines around this section)\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67046665,67046665,src/rpc/net.cpp
JeremyRubin,2016-06-14T23:21:20Z,"Nit: I would rename `ForEachNode` as `ForEachNodeContinueIf` or something to signify that the return value being true is critical. I would then make a version of `ForEachNode` that does not check for the return value.\n- This is more consistent\* with other ""foreach"" API's generally, eg, boost foreach or javascript foreach iterate over all elements\n  - although boost foreach does allow break\n- I",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67075817,67075817,src/net.cpp
JeremyRubin,2016-06-14T23:26:42Z,"Nit: appears correct, but isn't this the same code as in RelayTransaction?\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67076355,67076355,src/wallet/wallet.cpp
theuni,2016-06-15T01:17:37Z,"Ack. I meant to document these, but self-doc would be better.\n\nThe intention is to use these internally later, for example to replace the\nFindNode's which iterate and early-return when possible, to avoid holding\nthe lock longer than necessary.\n\nBut since those changes aren't part of this pull, I think that simply\ndropping the bool return and reintroducing it as ForEachNodeContinueIf\nlater ",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67085848,67085848,src/net.cpp
theuni,2016-06-15T01:20:16Z,"Yes, but it's simple enough that I didn't bother factoring it out. No\nreason not to, except that there's not an obvious place to stick it.\nOn Jun 14, 2016 19:26, ""Jeremy Rubin"" notifications@github.com wrote:\n\n> In src/wallet/wallet.cpp\n> https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67076355:\n> \n> > @@ -1342,8 +1342,15 @@ bool CWalletTx::RelayWalletTransaction(CConnman\* connman",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67086047,67086047,src/wallet/wallet.cpp
theuni,2016-06-15T01:25:47Z,"This will eventually hold pointers to several structures, chainparams for\nexample.\n\nIt may be reasonable to split it into a set of truly immutable options, and\nstateful app pointers.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67086457,67086457,src/net.h
JeremyRubin,2016-06-15T14:54:37Z,"I'm not sure this actually presents a bug, but it might at least exhibit some undesired behavior.\n\nThis should replace the value only if it is greater than the previous value, unless it is desirable to roll back (but this seems like a different case?).\n\n~~This may also not play well with out of order headers.~~ (ignore, headers aren't processed here/should be in order)\n\nIn any case, I'm not ",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67177507,67177507,src/net.cpp
JeremyRubin,2016-06-15T15:02:05Z,may want to null check...\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67179071,67179071,src/net.cpp
JeremyRubin,2016-06-15T15:02:15Z,may want to null check...\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67179115,67179115,src/net.cpp
JeremyRubin,2016-06-15T15:10:26Z,"nit: I think I would separate out the GetBoolArg put it into Options.\n\nThen keep the calls to MapPort into Start/Stop.\n\nseems a little more pragmatic & good for debugging (e.g., can dump a nodes options and know how the node was configured)\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67180772,67180772,src/init.cpp
kazcw,2016-06-15T19:51:27Z,"ChainParams seems like it could qualify as an option. In the long term I think it would make more sense for the UI to connect to the various backend signals rather than the net layer having any knowledge of the UI, but that change seems outside the scope of this PR.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67233085,67233085,src/net.h
JeremyRubin,2016-06-15T22:37:14Z,I'll take care of it...\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67258821,67258821,src/net.cpp
instagibbs,2016-06-16T14:00:41Z,nit: perhaps just add 0 if !g_connman or some relevant message\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67349082,67349082,src/rpc/misc.cpp
kazcw,2016-06-16T14:21:32Z,"nit: I think this could use documentation that the setter requires cs_main to be held to prevent older values from overwriting newer values. Also, I don't see any other data that would need to be synchronized with the height via acquire/release semantics; if there are no writes before the release that need to be visible side-effects after the acquire, relaxed load/store would be clearer.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67352999,67352999,src/net.cpp
JeremyRubin,2016-06-16T14:45:28Z,"@kazcw see https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67177507.\n\nI don't even think holding cs_main would help unless the new height is also checked to be > than the old one (suppose an orphaned block gets relayed, this would decrease the height).\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67358096,67358096,src/net.cpp
kazcw,2016-06-16T16:09:24Z,"Oh, I see... that issue is not introduced by this PR; what's called GetHeight in main and is not treated as non-decreasing is used in net as a ""best height"". Ensuring modification order for nBestHeight matches the order established by cs_main would be sufficient to maintain the current behaviour.\n\nIt does seem like it would be better to have a high-water-mark variable protected by cs_main that m",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67374422,67374422,src/net.cpp
JeremyRubin,2016-06-16T20:07:37Z,I would agree that this PR doesn't need any behavior change. Perhaps just renaming BestHeight -> LastSeenHeight or something. Also a proper best height is semantically unclear -- is it MaxHeight or MaxWorkHeight\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r67414899,67414899,src/net.cpp
theuni,2016-06-28T07:58:40Z,"Yes, I plan to move the remaining args into Options as a next step. There are a handful left to go still.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r68712667,68712667,src/init.cpp
theuni,2016-06-28T07:58:51Z,"Yep, thanks.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r68712690,68712690,src/net.cpp
theuni,2016-06-28T08:37:48Z,"Yea, I don't believe this deviates from the current behavior much, other than slightly obfuscating the exact current known height, since the value is grabbed at connection time now rather than during the handshake.\n\nThough there's the advantage of using the accurate cached value based on a push event, rather than requiring a lock-and-pull as before. I don't think there's any need to try to repli",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r68718012,68718012,src/net.cpp
sipa,2016-09-08T10:56:57Z,"Just a tip, and not a suggestion to change in this PR right now, you can just say 'struct ListenSocket;' here, and fully define it in the cpp file as 'struct CConnman::ListenSocket { ... };', since I don't think any of the users of this class need the fully materialized definition.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r77985078,77985078,src/net.h
sipa,2016-09-08T11:01:44Z,I am _so_ happy to see these globals-disguised-as-static-fields disappear!\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r77985660,77985660,src/net.h
sipa,2016-09-08T11:11:31Z,Style nit: space after if.\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r77986785,77986785,src/rpc/net.cpp
sipa,2016-09-08T12:01:29Z,"Not being very familiar with c++11 lambdas yet, what is the reason for explicitly listing the captures, rather than using [=] ?\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r77992333,77992333,src/main.cpp
sipa,2016-09-08T12:20:02Z,"A universal reference rvalue seems unnecessary here, since they're just pointers you can copy.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r77994574,77994574,src/net.cpp
sipa,2016-09-08T12:29:26Z,Neat.\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r77995773,77995773,src/net.cpp
sipa,2016-09-08T13:11:44Z,I don't think this matters much.\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78002025,78002025,src/net.cpp
sipa,2016-09-08T13:17:20Z,"rvalue reference for options?\n\nEDIT: nevermind, all of the fields are primitives.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78002897,78002897,src/net.h
theuni,2016-09-08T13:20:16Z,"Just personal preference, I like being explicit about what the lambda is changing. In this case, = is probably desirable, it's [&] that I try to avoid.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78003400,78003400,src/main.cpp
theuni,2016-09-08T13:22:08Z,"Yea, this is just a habit I've picked up. See the ""notes"" here: http://en.cppreference.com/w/cpp/language/range-for\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78003705,78003705,src/net.cpp
sipa,2016-09-08T13:25:08Z,Seems reasonable.\n,https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78004260,78004260,src/main.cpp
theuni,2016-09-08T13:25:40Z,"Hmm, I've never had luck with forward-declaring nested classes. I'll give it a shot!\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78004355,78004355,src/net.h
theuni,2016-09-08T13:29:20Z,"They're passed by value so that they can be std::move'd in if desired, but as-is, all members are fundamental, so they'll all be copied anyway\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78005054,78005054,src/net.h
sipa,2016-09-08T13:29:35Z,"It seems you can use [=,x&,y&,...] as well to mean ""capture everything by value, but x and y by reference"", neat.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78005094,78005094,src/main.cpp
theuni,2016-09-08T13:44:00Z,"Ah, perfect. That's great as a general rule.\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78007960,78007960,src/main.cpp
rebroad,2016-09-11T10:02:30Z,"I think the current naming is a little confusing as to be a function of pfrom implies that the ""Local"" Services are local to pfrom. ""nLocalServices"" seemed more intuitively compatible with talking about the services local to our peer. \n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78291571,78291571,src/main.cpp
rebroad,2016-09-11T10:22:52Z,"The code isn't as simple as it used to be - what was wrong with ""nNonce == nLocalHostNonce""? it was so much clearer what the code was doing before...\n",https://github.com/bitcoin/bitcoin/pull/8085#discussion_r78291920,78291920,src/main.cpp
