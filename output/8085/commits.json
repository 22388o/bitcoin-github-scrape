[
  {
    "sha": "531214fb100c14e62921085cd68cabe2b20ee0eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzEyMTRmYjEwMGMxNGU2MjkyMTA4NWNkNjhjYWJlMmIyMGVlMGVi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-19T19:38:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:03:22Z"
      },
      "message": "gui: add NodeID to the peer table",
      "tree": {
        "sha": "e670b843a76489a8928a24795cb624e159da9dfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e670b843a76489a8928a24795cb624e159da9dfb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/531214fb100c14e62921085cd68cabe2b20ee0eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531214fb100c14e62921085cd68cabe2b20ee0eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/531214fb100c14e62921085cd68cabe2b20ee0eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531214fb100c14e62921085cd68cabe2b20ee0eb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc308068d69c6c9aa629ee3c4ce75e1d1cf08b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc308068d69c6c9aa629ee3c4ce75e1d1cf08b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc308068d69c6c9aa629ee3c4ce75e1d1cf08b5"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "444e35de8af5c845736f43cb9379e983dba99b65",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=531214fb100c14e62921085cd68cabe2b20ee0eb",
        "patch": "@@ -291,17 +291,17 @@ void copyEntryData(QAbstractItemView *view, int column, int role)\n     }\n }\n \n-QString getEntryData(QAbstractItemView *view, int column, int role)\n+QVariant getEntryData(QAbstractItemView *view, int column, int role)\n {\n     if(!view || !view->selectionModel())\n-        return QString();\n+        return QVariant();\n     QModelIndexList selection = view->selectionModel()->selectedRows(column);\n \n     if(!selection.isEmpty()) {\n         // Return first item\n-        return (selection.at(0).data(role).toString());\n+        return (selection.at(0).data(role));\n     }\n-    return QString();\n+    return QVariant();\n }\n \n QString getSaveFileName(QWidget *parent, const QString &caption, const QString &dir,"
      },
      {
        "sha": "d5a658e7c0addced8214ca16f576a217f695e62f",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=531214fb100c14e62921085cd68cabe2b20ee0eb",
        "patch": "@@ -70,7 +70,7 @@ namespace GUIUtil\n        @param[in] role    Data role to extract from the model\n        @see  TransactionView::copyLabel, TransactionView::copyAmount, TransactionView::copyAddress\n      */\n-    QString getEntryData(QAbstractItemView *view, int column, int role);\n+    QVariant getEntryData(QAbstractItemView *view, int column, int role);\n \n     void setClipboard(const QString& str);\n "
      },
      {
        "sha": "0eb28f4ae18e85eaa079f4305c1c66184517c362",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=531214fb100c14e62921085cd68cabe2b20ee0eb",
        "patch": "@@ -24,6 +24,8 @@ bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombine\n \n     switch(column)\n     {\n+    case PeerTableModel::NetNodeId:\n+        return pLeft->nodeid < pRight->nodeid;\n     case PeerTableModel::Address:\n         return pLeft->addrName.compare(pRight->addrName) < 0;\n     case PeerTableModel::Subversion:\n@@ -114,7 +116,7 @@ PeerTableModel::PeerTableModel(ClientModel *parent) :\n     clientModel(parent),\n     timer(0)\n {\n-    columns << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping Time\");\n+    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping Time\");\n     priv = new PeerTablePriv();\n     // default to unsorted\n     priv->sortColumn = -1;\n@@ -160,6 +162,8 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n     if (role == Qt::DisplayRole) {\n         switch(index.column())\n         {\n+        case NetNodeId:\n+            return rec->nodeStats.nodeid;\n         case Address:\n             return QString::fromStdString(rec->nodeStats.addrName);\n         case Subversion:"
      },
      {
        "sha": "a4f7bbdb3d7084c60382c29317d4740eab3cc4b8",
        "filename": "src/qt/peertablemodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/peertablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/peertablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.h?ref=531214fb100c14e62921085cd68cabe2b20ee0eb",
        "patch": "@@ -52,9 +52,10 @@ class PeerTableModel : public QAbstractTableModel\n     void stopAutoRefresh();\n \n     enum ColumnIndex {\n-        Address = 0,\n-        Subversion = 1,\n-        Ping = 2\n+        NetNodeId = 0,\n+        Address = 1,\n+        Subversion = 2,\n+        Ping = 3\n     };\n \n     /** @name Methods overridden from QAbstractTableModel"
      },
      {
        "sha": "e5720dd70e0cd463e374736ea4238a7073ba921a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/531214fb100c14e62921085cd68cabe2b20ee0eb/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=531214fb100c14e62921085cd68cabe2b20ee0eb",
        "patch": "@@ -877,7 +877,7 @@ void RPCConsole::showBanTableContextMenu(const QPoint& point)\n void RPCConsole::disconnectSelectedNode()\n {\n     // Get currently selected peer address\n-    QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address);\n+    QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address).toString();\n     // Find the node, disconnect it and clear the selected node\n     if (CNode *bannedNode = FindNode(strNode.toStdString())) {\n         bannedNode->fDisconnect = true;\n@@ -891,7 +891,7 @@ void RPCConsole::banSelectedNode(int bantime)\n         return;\n \n     // Get currently selected peer address\n-    QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address);\n+    QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address).toString();\n     // Find possible nodes, ban it and clear the selected node\n     if (FindNode(strNode.toStdString())) {\n         std::string nStr = strNode.toStdString();\n@@ -915,7 +915,7 @@ void RPCConsole::unbanSelectedNode()\n         return;\n \n     // Get currently selected ban address\n-    QString strNode = GUIUtil::getEntryData(ui->banlistWidget, 0, BanTableModel::Address);\n+    QString strNode = GUIUtil::getEntryData(ui->banlistWidget, 0, BanTableModel::Address).toString();\n     CSubNet possibleSubnet;\n \n     LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);"
      }
    ]
  },
  {
    "sha": "d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTNiMTRkYzVkZGZiOTM3YjBjYzE4YmU0MjViOWQwNDhjZWZiNjZi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T04:13:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:03:22Z"
      },
      "message": "net: move CBanDB and CAddrDB out of net.h/cpp\n\nThis will eventually solve a circular dependency",
      "tree": {
        "sha": "34ef01ca454822012869ee98a81189b79802c6d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34ef01ca454822012869ee98a81189b79802c6d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "531214fb100c14e62921085cd68cabe2b20ee0eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/531214fb100c14e62921085cd68cabe2b20ee0eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/531214fb100c14e62921085cd68cabe2b20ee0eb"
      }
    ],
    "stats": {
      "total": 615,
      "additions": 323,
      "deletions": 292
    },
    "files": [
      {
        "sha": "ebdddc87f54a250702bc88091aae9e840b35efde",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
        "patch": "@@ -71,6 +71,7 @@ endif\n .PHONY: FORCE check-symbols check-security\n # bitcoin core #\n BITCOIN_CORE_H = \\\n+  addrdb.h \\\n   addrman.h \\\n   base58.h \\\n   bloom.h \\\n@@ -164,6 +165,7 @@ libbitcoin_server_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(MINIUPNPC_CP\n libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n+  addrdb.cpp \\\n   bloom.cpp \\\n   blockencodings.cpp \\\n   chain.cpp \\"
      },
      {
        "sha": "ddf41f92de0eaba944b32e674f2e4c431292e040",
        "filename": "src/addrdb.cpp",
        "status": "added",
        "additions": 218,
        "deletions": 0,
        "changes": 218,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/addrdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/addrdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.cpp?ref=d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
        "patch": "@@ -0,0 +1,218 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"addrdb.h\"\n+\n+#include \"addrman.h\"\n+#include \"chainparams.h\"\n+#include \"clientversion.h\"\n+#include \"hash.h\"\n+#include \"random.h\"\n+#include \"streams.h\"\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+\n+#include <boost/filesystem.hpp>\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const banmap_t& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(banmap_t& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n+    uint64_t dataSize = 0;\n+    // Don't try to resize to a negative number if file is small\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n+    std::vector<unsigned char> vchData;\n+    vchData.resize(dataSize);\n+    uint256 hashIn;\n+\n+    // read data and checksum from file\n+    try {\n+        filein.read((char *)&vchData[0], dataSize);\n+        filein >> hashIn;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    filein.fclose();\n+\n+    CDataStream ssBanlist(vchData, SER_DISK, CLIENT_VERSION);\n+\n+    // verify stored checksum matches input data\n+    uint256 hashTmp = Hash(ssBanlist.begin(), ssBanlist.end());\n+    if (hashIn != hashTmp)\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n+\n+    unsigned char pchMsgTmp[4];\n+    try {\n+        // de-serialize file header (network specific magic number) and ..\n+        ssBanlist >> FLATDATA(pchMsgTmp);\n+\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n+            return error(\"%s: Invalid network magic number\", __func__);\n+\n+        // de-serialize address data into one CAddrMan object\n+        ssBanlist >> banSet;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+\n+    return true;\n+}\n+\n+CAddrDB::CAddrDB()\n+{\n+    pathAddr = GetDataDir() / \"peers.dat\";\n+}\n+\n+bool CAddrDB::Write(const CAddrMan& addr)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"peers.dat.%04x\", randv);\n+\n+    // serialize addresses, checksum data up to that point, then append csum\n+    CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n+    ssPeers << FLATDATA(Params().MessageStart());\n+    ssPeers << addr;\n+    uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n+    ssPeers << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssPeers;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing peers.dat, if any, with new peers.dat.XXXX\n+    if (!RenameOver(pathTmp, pathAddr))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CAddrDB::Read(CAddrMan& addr)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n+\n+    // use file size to size memory buffer\n+    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n+    uint64_t dataSize = 0;\n+    // Don't try to resize to a negative number if file is small\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n+    std::vector<unsigned char> vchData;\n+    vchData.resize(dataSize);\n+    uint256 hashIn;\n+\n+    // read data and checksum from file\n+    try {\n+        filein.read((char *)&vchData[0], dataSize);\n+        filein >> hashIn;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    filein.fclose();\n+\n+    CDataStream ssPeers(vchData, SER_DISK, CLIENT_VERSION);\n+\n+    // verify stored checksum matches input data\n+    uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n+    if (hashIn != hashTmp)\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n+\n+    return Read(addr, ssPeers);\n+}\n+\n+bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n+{\n+    unsigned char pchMsgTmp[4];\n+    try {\n+        // de-serialize file header (network specific magic number) and ..\n+        ssPeers >> FLATDATA(pchMsgTmp);\n+\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n+            return error(\"%s: Invalid network magic number\", __func__);\n+\n+        // de-serialize address data into one CAddrMan object\n+        ssPeers >> addr;\n+    }\n+    catch (const std::exception& e) {\n+        // de-serialization has failed, ensure addrman is left in a clean state\n+        addr.Clear();\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "3ffcfe3e17468b3c7d6f797c0f80ea72cb278511",
        "filename": "src/addrdb.h",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
        "patch": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ADDRDB_H\n+#define BITCOIN_ADDRDB_H\n+\n+#include \"serialize.h\"\n+\n+#include <string>\n+#include <map>\n+#include <boost/filesystem/path.hpp>\n+\n+class CSubNet;\n+class CAddrMan;\n+\n+typedef enum BanReason\n+{\n+    BanReasonUnknown          = 0,\n+    BanReasonNodeMisbehaving  = 1,\n+    BanReasonManuallyAdded    = 2\n+} BanReason;\n+\n+class CBanEntry\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime;\n+    int64_t nBanUntil;\n+    uint8_t banReason;\n+\n+    CBanEntry()\n+    {\n+        SetNull();\n+    }\n+\n+    CBanEntry(int64_t nCreateTimeIn)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTimeIn;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        READWRITE(nBanUntil);\n+        READWRITE(banReason);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CBanEntry::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        nBanUntil = 0;\n+        banReason = BanReasonUnknown;\n+    }\n+\n+    std::string banReasonToString()\n+    {\n+        switch (banReason) {\n+        case BanReasonNodeMisbehaving:\n+            return \"node misbehaving\";\n+        case BanReasonManuallyAdded:\n+            return \"manually added\";\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+};\n+\n+typedef std::map<CSubNet, CBanEntry> banmap_t;\n+\n+/** Access to the (IP) address database (peers.dat) */\n+class CAddrDB\n+{\n+private:\n+    boost::filesystem::path pathAddr;\n+public:\n+    CAddrDB();\n+    bool Write(const CAddrMan& addr);\n+    bool Read(CAddrMan& addr);\n+    bool Read(CAddrMan& addr, CDataStream& ssPeers);\n+};\n+\n+/** Access to the banlist database (banlist.dat) */\n+class CBanDB\n+{\n+private:\n+    boost::filesystem::path pathBanlist;\n+public:\n+    CBanDB();\n+    bool Write(const banmap_t& banSet);\n+    bool Read(banmap_t& banSet);\n+};\n+\n+#endif // BITCOIN_ADDRDB_H"
      },
      {
        "sha": "cee149ee7ee060000f020c0988b28cc338e66b80",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 209,
        "changes": 209,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
        "patch": "@@ -2356,114 +2356,6 @@ void CNode::Fuzz(int nChance)\n     Fuzz(2);\n }\n \n-//\n-// CAddrDB\n-//\n-\n-CAddrDB::CAddrDB()\n-{\n-    pathAddr = GetDataDir() / \"peers.dat\";\n-}\n-\n-bool CAddrDB::Write(const CAddrMan& addr)\n-{\n-    // Generate random temporary filename\n-    unsigned short randv = 0;\n-    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n-    std::string tmpfn = strprintf(\"peers.dat.%04x\", randv);\n-\n-    // serialize addresses, checksum data up to that point, then append csum\n-    CDataStream ssPeers(SER_DISK, CLIENT_VERSION);\n-    ssPeers << FLATDATA(Params().MessageStart());\n-    ssPeers << addr;\n-    uint256 hash = Hash(ssPeers.begin(), ssPeers.end());\n-    ssPeers << hash;\n-\n-    // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n-    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n-    if (fileout.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n-\n-    // Write and commit header, data\n-    try {\n-        fileout << ssPeers;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n-    }\n-    FileCommit(fileout.Get());\n-    fileout.fclose();\n-\n-    // replace existing peers.dat, if any, with new peers.dat.XXXX\n-    if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"%s: Rename-into-place failed\", __func__);\n-\n-    return true;\n-}\n-\n-bool CAddrDB::Read(CAddrMan& addr)\n-{\n-    // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n-    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n-\n-    // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n-    uint64_t dataSize = 0;\n-    // Don't try to resize to a negative number if file is small\n-    if (fileSize >= sizeof(uint256))\n-        dataSize = fileSize - sizeof(uint256);\n-    std::vector<unsigned char> vchData;\n-    vchData.resize(dataSize);\n-    uint256 hashIn;\n-\n-    // read data and checksum from file\n-    try {\n-        filein.read((char *)&vchData[0], dataSize);\n-        filein >> hashIn;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-    filein.fclose();\n-\n-    CDataStream ssPeers(vchData, SER_DISK, CLIENT_VERSION);\n-\n-    // verify stored checksum matches input data\n-    uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n-    if (hashIn != hashTmp)\n-        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n-\n-    return Read(addr, ssPeers);\n-}\n-\n-bool CAddrDB::Read(CAddrMan& addr, CDataStream& ssPeers)\n-{\n-    unsigned char pchMsgTmp[4];\n-    try {\n-        // de-serialize file header (network specific magic number) and ..\n-        ssPeers >> FLATDATA(pchMsgTmp);\n-\n-        // ... verify the network matches ours\n-        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s: Invalid network magic number\", __func__);\n-\n-        // de-serialize address data into one CAddrMan object\n-        ssPeers >> addr;\n-    }\n-    catch (const std::exception& e) {\n-        // de-serialization has failed, ensure addrman is left in a clean state\n-        addr.Clear();\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-\n-    return true;\n-}\n-\n unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n \n@@ -2649,107 +2541,6 @@ void CNode::EndMessage(const char* pszCommand) UNLOCK_FUNCTION(cs_vSend)\n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n \n-//\n-// CBanDB\n-//\n-\n-CBanDB::CBanDB()\n-{\n-    pathBanlist = GetDataDir() / \"banlist.dat\";\n-}\n-\n-bool CBanDB::Write(const banmap_t& banSet)\n-{\n-    // Generate random temporary filename\n-    unsigned short randv = 0;\n-    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n-    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n-\n-    // serialize banlist, checksum data up to that point, then append csum\n-    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n-    ssBanlist << FLATDATA(Params().MessageStart());\n-    ssBanlist << banSet;\n-    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n-    ssBanlist << hash;\n-\n-    // open temp output file, and associate with CAutoFile\n-    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n-    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n-    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n-    if (fileout.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n-\n-    // Write and commit header, data\n-    try {\n-        fileout << ssBanlist;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n-    }\n-    FileCommit(fileout.Get());\n-    fileout.fclose();\n-\n-    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n-    if (!RenameOver(pathTmp, pathBanlist))\n-        return error(\"%s: Rename-into-place failed\", __func__);\n-\n-    return true;\n-}\n-\n-bool CBanDB::Read(banmap_t& banSet)\n-{\n-    // open input file, and associate with CAutoFile\n-    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n-    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n-        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n-\n-    // use file size to size memory buffer\n-    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n-    uint64_t dataSize = 0;\n-    // Don't try to resize to a negative number if file is small\n-    if (fileSize >= sizeof(uint256))\n-        dataSize = fileSize - sizeof(uint256);\n-    std::vector<unsigned char> vchData;\n-    vchData.resize(dataSize);\n-    uint256 hashIn;\n-\n-    // read data and checksum from file\n-    try {\n-        filein.read((char *)&vchData[0], dataSize);\n-        filein >> hashIn;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-    filein.fclose();\n-\n-    CDataStream ssBanlist(vchData, SER_DISK, CLIENT_VERSION);\n-\n-    // verify stored checksum matches input data\n-    uint256 hashTmp = Hash(ssBanlist.begin(), ssBanlist.end());\n-    if (hashIn != hashTmp)\n-        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n-\n-    unsigned char pchMsgTmp[4];\n-    try {\n-        // de-serialize file header (network specific magic number) and ..\n-        ssBanlist >> FLATDATA(pchMsgTmp);\n-\n-        // ... verify the network matches ours\n-        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s: Invalid network magic number\", __func__);\n-\n-        // de-serialize address data into one CAddrMan object\n-        ssBanlist >> banSet;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n-    }\n-\n-    return true;\n-}\n-\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }"
      },
      {
        "sha": "0d1c62e428fb64728cc92da25b4de0c80ccb973f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 83,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93b14dc5ddfb937b0cc18be425b9d048cefb66b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_NET_H\n #define BITCOIN_NET_H\n \n+#include \"addrdb.h\"\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n@@ -256,67 +257,6 @@ class CNetMessage {\n };\n \n \n-typedef enum BanReason\n-{\n-    BanReasonUnknown          = 0,\n-    BanReasonNodeMisbehaving  = 1,\n-    BanReasonManuallyAdded    = 2\n-} BanReason;\n-\n-class CBanEntry\n-{\n-public:\n-    static const int CURRENT_VERSION=1;\n-    int nVersion;\n-    int64_t nCreateTime;\n-    int64_t nBanUntil;\n-    uint8_t banReason;\n-\n-    CBanEntry()\n-    {\n-        SetNull();\n-    }\n-\n-    CBanEntry(int64_t nCreateTimeIn)\n-    {\n-        SetNull();\n-        nCreateTime = nCreateTimeIn;\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(this->nVersion);\n-        nVersion = this->nVersion;\n-        READWRITE(nCreateTime);\n-        READWRITE(nBanUntil);\n-        READWRITE(banReason);\n-    }\n-\n-    void SetNull()\n-    {\n-        nVersion = CBanEntry::CURRENT_VERSION;\n-        nCreateTime = 0;\n-        nBanUntil = 0;\n-        banReason = BanReasonUnknown;\n-    }\n-\n-    std::string banReasonToString()\n-    {\n-        switch (banReason) {\n-        case BanReasonNodeMisbehaving:\n-            return \"node misbehaving\";\n-        case BanReasonManuallyAdded:\n-            return \"manually added\";\n-        default:\n-            return \"unknown\";\n-        }\n-    }\n-};\n-\n-typedef std::map<CSubNet, CBanEntry> banmap_t;\n-\n /** Information about a peer */\n class CNode\n {\n@@ -819,28 +759,6 @@ class CNode\n class CTransaction;\n void RelayTransaction(const CTransaction& tx);\n \n-/** Access to the (IP) address database (peers.dat) */\n-class CAddrDB\n-{\n-private:\n-    boost::filesystem::path pathAddr;\n-public:\n-    CAddrDB();\n-    bool Write(const CAddrMan& addr);\n-    bool Read(CAddrMan& addr);\n-    bool Read(CAddrMan& addr, CDataStream& ssPeers);\n-};\n-\n-/** Access to the banlist database (banlist.dat) */\n-class CBanDB\n-{\n-private:\n-    boost::filesystem::path pathBanlist;\n-public:\n-    CBanDB();\n-    bool Write(const banmap_t& banSet);\n-    bool Read(banmap_t& banSet);\n-};\n \n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);"
      }
    ]
  },
  {
    "sha": "cd16f48028f54327d4afba9c1f91f25d0b072aa5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDE2ZjQ4MDI4ZjU0MzI3ZDRhZmJhOWMxZjkxZjI1ZDBiMDcyYWE1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T18:47:18Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:04:35Z"
      },
      "message": "net: Create CConnman to encapsulate p2p connections",
      "tree": {
        "sha": "898569d833ac7d3f40e6cf3129262321894ac6db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/898569d833ac7d3f40e6cf3129262321894ac6db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd16f48028f54327d4afba9c1f91f25d0b072aa5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd16f48028f54327d4afba9c1f91f25d0b072aa5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd16f48028f54327d4afba9c1f91f25d0b072aa5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd16f48028f54327d4afba9c1f91f25d0b072aa5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93b14dc5ddfb937b0cc18be425b9d048cefb66b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d93b14dc5ddfb937b0cc18be425b9d048cefb66b"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 112,
      "deletions": 54
    },
    "files": [
      {
        "sha": "d8c66d872bb18e4ca8672cc895d6d16218142d26",
        "filename": "src/addrdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/addrdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/addrdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrdb.h?ref=cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "patch": "@@ -14,6 +14,7 @@\n \n class CSubNet;\n class CAddrMan;\n+class CDataStream;\n \n typedef enum BanReason\n {"
      },
      {
        "sha": "6aaa7bfc5db003022b3fa1f9ab0c1fc12f08f6c8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "patch": "@@ -42,6 +42,7 @@\n #endif\n #include <stdint.h>\n #include <stdio.h>\n+#include <memory>\n \n #ifndef WIN32\n #include <signal.h>\n@@ -70,6 +71,7 @@ static const bool DEFAULT_REST_ENABLE = false;\n static const bool DEFAULT_DISABLE_SAFEMODE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n+std::unique_ptr<CConnman> g_connman;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -197,7 +199,9 @@ void Shutdown()\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n #endif\n-    StopNode();\n+    StopNode(*g_connman);\n+    g_connman.reset();\n+\n     StopTorControl();\n     UnregisterNodeSignals(GetNodeSignals());\n \n@@ -1101,6 +1105,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization\n \n+    assert(!g_connman);\n+    g_connman = std::unique_ptr<CConnman>(new CConnman());\n+    CConnman& connman = *g_connman;\n+\n     RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n@@ -1497,7 +1505,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n-    StartNode(threadGroup, scheduler);\n+    std::string strNodeError;\n+    if(!StartNode(connman, threadGroup, scheduler, strNodeError))\n+        return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "6177dc04ff4c173d46218ac8e516815723ae7212",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 50,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "patch": "@@ -65,13 +65,6 @@\n namespace {\n     const int MAX_OUTBOUND_CONNECTIONS = 8;\n     const int MAX_FEELER_CONNECTIONS = 1;\n-\n-    struct ListenSocket {\n-        SOCKET socket;\n-        bool whitelisted;\n-\n-        ListenSocket(SOCKET _socket, bool _whitelisted) : socket(_socket), whitelisted(_whitelisted) {}\n-    };\n }\n \n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n@@ -1015,7 +1008,7 @@ static bool AttemptToEvictConnection() {\n     return false;\n }\n \n-static void AcceptConnection(const ListenSocket& hListenSocket) {\n+void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n@@ -1089,7 +1082,7 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n }\n \n-void ThreadSocketHandler()\n+void CConnman::ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n     while (true)\n@@ -1497,7 +1490,7 @@ static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredSe\n }\n \n \n-void ThreadDNSAddressSeed()\n+void CConnman::ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n     if ((addrman.size() > 0) &&\n@@ -1577,7 +1570,7 @@ void DumpData()\n     DumpBanlist();\n }\n \n-void static ProcessOneShot()\n+void CConnman::ProcessOneShot()\n {\n     std::string strDest;\n     {\n@@ -1595,7 +1588,7 @@ void static ProcessOneShot()\n     }\n }\n \n-void ThreadOpenConnections()\n+void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n     if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0)\n@@ -1791,7 +1784,7 @@ std::vector<AddedNodeInfo> GetAddedNodeInfo()\n     return ret;\n }\n \n-void ThreadOpenAddedConnections()\n+void CConnman::ThreadOpenAddedConnections()\n {\n     {\n         LOCK(cs_vAddedNodes);\n@@ -1848,7 +1841,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSem\n }\n \n \n-void ThreadMessageHandler()\n+void CConnman::ThreadMessageHandler()\n {\n     boost::mutex condition_mutex;\n     boost::unique_lock<boost::mutex> lock(condition_mutex);\n@@ -2064,7 +2057,11 @@ void static Discover(boost::thread_group& threadGroup)\n #endif\n }\n \n-void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n+CConnman::CConnman()\n+{\n+}\n+\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n {\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n@@ -2102,6 +2099,17 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     fAddressesInitialized = true;\n \n+    Discover(threadGroup);\n+\n+    bool ret = connman.Start(threadGroup, strNodeError);\n+\n+    // Dump network addresses\n+    scheduler.scheduleEvery(DumpData, DUMP_ADDRESSES_INTERVAL);\n+    return ret;\n+}\n+\n+bool CConnman::Start(boost::thread_group& threadGroup, std::string& strNodeError)\n+{\n     if (semOutbound == NULL) {\n         // initialize semaphore\n         int nMaxOutbound = std::min((MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS), nMaxConnections);\n@@ -2114,50 +2122,45 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n     }\n \n-    Discover(threadGroup);\n-\n     //\n     // Start threads\n     //\n \n     if (!GetBoolArg(\"-dnsseed\", true))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n-        threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"dnsseed\", &ThreadDNSAddressSeed));\n+        threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"dnsseed\", boost::function<void()>(boost::bind(&CConnman::ThreadDNSAddressSeed, this))));\n \n     // Map ports with UPnP\n     MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n \n     // Send and receive from sockets, accept connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"net\", &ThreadSocketHandler));\n+    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"net\", boost::function<void()>(boost::bind(&CConnman::ThreadSocketHandler, this))));\n \n     // Initiate outbound connections from -addnode\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"addcon\", &ThreadOpenAddedConnections));\n+    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"addcon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenAddedConnections, this))));\n \n     // Initiate outbound connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"opencon\", &ThreadOpenConnections));\n+    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"opencon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenConnections, this))));\n \n     // Process messages\n-    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n+    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"msghand\", boost::function<void()>(boost::bind(&CConnman::ThreadMessageHandler, this))));\n \n-    // Dump network addresses\n-    scheduler.scheduleEvery(&DumpData, DUMP_ADDRESSES_INTERVAL);\n+    return true;\n }\n \n-bool StopNode()\n+bool StopNode(CConnman& connman)\n {\n     LogPrintf(\"StopNode()\\n\");\n     MapPort(false);\n-    if (semOutbound)\n-        for (int i=0; i<(MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS); i++)\n-            semOutbound->post();\n \n     if (fAddressesInitialized)\n     {\n         DumpData();\n         fAddressesInitialized = false;\n     }\n \n+    connman.Stop();\n     return true;\n }\n \n@@ -2168,28 +2171,6 @@ class CNetCleanup\n \n     ~CNetCleanup()\n     {\n-        // Close sockets\n-        BOOST_FOREACH(CNode* pnode, vNodes)\n-            if (pnode->hSocket != INVALID_SOCKET)\n-                CloseSocket(pnode->hSocket);\n-        BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n-            if (hListenSocket.socket != INVALID_SOCKET)\n-                if (!CloseSocket(hListenSocket.socket))\n-                    LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n-\n-        // clean up some globals (to help leak detection)\n-        BOOST_FOREACH(CNode *pnode, vNodes)\n-            delete pnode;\n-        BOOST_FOREACH(CNode *pnode, vNodesDisconnected)\n-            delete pnode;\n-        vNodes.clear();\n-        vNodesDisconnected.clear();\n-        vhListenSocket.clear();\n-        delete semOutbound;\n-        semOutbound = NULL;\n-        delete pnodeLocalHost;\n-        pnodeLocalHost = NULL;\n-\n #ifdef WIN32\n         // Shutdown Windows Sockets\n         WSACleanup();\n@@ -2198,6 +2179,38 @@ class CNetCleanup\n }\n instance_of_cnetcleanup;\n \n+void CConnman::Stop()\n+{\n+    if (semOutbound)\n+        for (int i=0; i<(MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS); i++)\n+            semOutbound->post();\n+\n+    // Close sockets\n+    BOOST_FOREACH(CNode* pnode, vNodes)\n+        if (pnode->hSocket != INVALID_SOCKET)\n+            CloseSocket(pnode->hSocket);\n+    BOOST_FOREACH(ListenSocket& hListenSocket, vhListenSocket)\n+        if (hListenSocket.socket != INVALID_SOCKET)\n+            if (!CloseSocket(hListenSocket.socket))\n+                LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n+\n+    // clean up some globals (to help leak detection)\n+    BOOST_FOREACH(CNode *pnode, vNodes)\n+        delete pnode;\n+    BOOST_FOREACH(CNode *pnode, vNodesDisconnected)\n+        delete pnode;\n+    vNodes.clear();\n+    vNodesDisconnected.clear();\n+    vhListenSocket.clear();\n+    delete semOutbound;\n+    semOutbound = NULL;\n+    delete pnodeLocalHost;\n+    pnodeLocalHost = NULL;\n+}\n+\n+CConnman::~CConnman()\n+{\n+}\n \n void RelayTransaction(const CTransaction& tx)\n {"
      },
      {
        "sha": "7f212f233c758b72ce5ea6ca27c1cbfef2ca7595",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "patch": "@@ -21,6 +21,7 @@\n #include <atomic>\n #include <deque>\n #include <stdint.h>\n+#include <memory>\n \n #ifndef WIN32\n #include <arpa/inet.h>\n@@ -93,11 +94,36 @@ CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n+\n+struct ListenSocket {\n+    SOCKET socket;\n+    bool whitelisted;\n+\n+    ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}\n+};\n+\n+class CConnman\n+{\n+public:\n+    CConnman();\n+    ~CConnman();\n+    bool Start(boost::thread_group& threadGroup, std::string& strNodeError);\n+    void Stop();\n+private:\n+    void ThreadOpenAddedConnections();\n+    void ProcessOneShot();\n+    void ThreadOpenConnections();\n+    void ThreadMessageHandler();\n+    void AcceptConnection(const ListenSocket& hListenSocket);\n+    void ThreadSocketHandler();\n+    void ThreadDNSAddressSeed();\n+};\n+extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler);\n-bool StopNode();\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError);\n+bool StopNode(CConnman& connman);\n void SocketSendData(CNode *pnode);\n \n struct CombinerAll"
      },
      {
        "sha": "ed74418e3426dccfab7b9e3d27756c868c53a113",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "patch": "@@ -26,6 +26,8 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/thread.hpp>\n \n+std::unique_ptr<CConnman> g_connman;\n+\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n@@ -43,13 +45,15 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n BasicTestingSetup::~BasicTestingSetup()\n {\n         ECC_Stop();\n+        g_connman.reset();\n }\n \n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n     const CChainParams& chainparams = Params();\n         // Ideally we'd move all the RPC tests to the functional testing framework\n         // instead of unit tests, but for now we need these here.\n+\n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n         pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n@@ -68,6 +72,8 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n+        g_connman = std::unique_ptr<CConnman>(new CConnman());\n+        connman = g_connman.get();\n         RegisterNodeSignals(GetNodeSignals());\n }\n "
      },
      {
        "sha": "9819a7097dc75ef9159294657ee6a7948d92c79f",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd16f48028f54327d4afba9c1f91f25d0b072aa5/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "patch": "@@ -27,10 +27,12 @@ struct BasicTestingSetup {\n /** Testing setup that configures a complete environment.\n  * Included are data directory, coins database, script check threads setup.\n  */\n+class CConnman;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n+    CConnman* connman;\n \n     TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      }
    ]
  },
  {
    "sha": "d7349ca50d000573d60064d4b295be308357d58e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzM0OWNhNTBkMDAwNTczZDYwMDY0ZDRiMjk1YmUzMDgzNTdkNThl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-26T17:10:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:04:35Z"
      },
      "message": "net: Add rpc error for missing/disabled p2p functionality",
      "tree": {
        "sha": "3df674968cd4ca4317e00e79bb13dd96a750904c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3df674968cd4ca4317e00e79bb13dd96a750904c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7349ca50d000573d60064d4b295be308357d58e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7349ca50d000573d60064d4b295be308357d58e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7349ca50d000573d60064d4b295be308357d58e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7349ca50d000573d60064d4b295be308357d58e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd16f48028f54327d4afba9c1f91f25d0b072aa5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd16f48028f54327d4afba9c1f91f25d0b072aa5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1d2ef0e41e67e82f5520c15b370d598497ec96e6",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7349ca50d000573d60064d4b295be308357d58e/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7349ca50d000573d60064d4b295be308357d58e/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=d7349ca50d000573d60064d4b295be308357d58e",
        "patch": "@@ -63,6 +63,7 @@ enum RPCErrorCode\n     RPC_CLIENT_NODE_NOT_ADDED       = -24, //!< Node has not been added before\n     RPC_CLIENT_NODE_NOT_CONNECTED   = -29, //!< Node to disconnect not found in connected nodes\n     RPC_CLIENT_INVALID_IP_OR_SUBNET = -30, //!< Invalid IP/Subnet\n+    RPC_CLIENT_P2P_DISABLED         = -31, //!< No valid connection manager instance found\n \n     //! Wallet errors\n     RPC_WALLET_ERROR                = -4,  //!< Unspecified problem with wallet (key not found etc.)"
      }
    ]
  },
  {
    "sha": "8d58c4d81f18e9a51d11ee354434cf55d03a4add",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDU4YzRkODFmMThlOWE1MWQxMWVlMzU0NDM0Y2Y1NWQwM2E0YWRk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-26T18:26:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:04:35Z"
      },
      "message": "net: Pass CConnman around as needed",
      "tree": {
        "sha": "3fd6d59b0e7f8cd037c123c0ebea1ad59a385dcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fd6d59b0e7f8cd037c123c0ebea1ad59a385dcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d58c4d81f18e9a51d11ee354434cf55d03a4add",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d58c4d81f18e9a51d11ee354434cf55d03a4add",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d58c4d81f18e9a51d11ee354434cf55d03a4add",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d58c4d81f18e9a51d11ee354434cf55d03a4add/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7349ca50d000573d60064d4b295be308357d58e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7349ca50d000573d60064d4b295be308357d58e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7349ca50d000573d60064d4b295be308357d58e"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 34,
      "deletions": 32
    },
    "files": [
      {
        "sha": "32859ebc26388df2509aab63699eab2ca0ddc0fd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -3016,7 +3016,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock, CConnman* connman) {\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     do {\n@@ -3731,7 +3731,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman)\n {\n     {\n         LOCK(cs_main);\n@@ -3753,7 +3753,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n \n     NotifyHeaderTip();\n \n-    if (!ActivateBestChain(state, chainparams, pblock))\n+    if (!ActivateBestChain(state, chainparams, pblock, connman))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -4891,7 +4891,7 @@ uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params\n     return nFetchFlags;\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams)\n+bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman)\n {\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n@@ -5680,7 +5680,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     txn.blockhash = cmpctblock.header.GetHash();\n                     CDataStream blockTxnMsg(SER_NETWORK, PROTOCOL_VERSION);\n                     blockTxnMsg << txn;\n-                    return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams);\n+                    return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman);\n                 } else {\n                     req.blockhash = pindex->GetBlockHash();\n                     pfrom->PushMessage(NetMsgType::GETBLOCKTXN, req);\n@@ -5701,7 +5701,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 headers.push_back(cmpctblock.header);\n                 CDataStream vHeadersMsg(SER_NETWORK, PROTOCOL_VERSION);\n                 vHeadersMsg << headers;\n-                return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams);\n+                return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman);\n             }\n         }\n \n@@ -5737,7 +5737,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n             CValidationState state;\n-            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n+            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL, &connman);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -5913,7 +5913,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n+        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL, &connman);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -6163,7 +6163,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n }\n \n // requires LOCK(cs_vRecvMsg)\n-bool ProcessMessages(CNode* pfrom)\n+bool ProcessMessages(CNode* pfrom, CConnman& connman)\n {\n     const CChainParams& chainparams = Params();\n     //if (fDebug)\n@@ -6240,7 +6240,7 @@ bool ProcessMessages(CNode* pfrom)\n         bool fRet = false;\n         try\n         {\n-            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams);\n+            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman);\n             boost::this_thread::interruption_point();\n         }\n         catch (const std::ios_base::failure& e)\n@@ -6305,7 +6305,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto)\n+bool SendMessages(CNode* pto, CConnman& connman)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {"
      },
      {
        "sha": "2646d8f86b0a37fb93863cc234f0a17c1e930a33",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -34,6 +34,7 @@ class CBlockTreeDB;\n class CBloomFilter;\n class CChainParams;\n class CInv;\n+class CConnman;\n class CScriptCheck;\n class CTxMemPool;\n class CValidationInterface;\n@@ -222,7 +223,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -240,13 +241,14 @@ bool LoadBlockIndex();\n /** Unload database information */\n void UnloadBlockIndex();\n /** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom);\n+bool ProcessMessages(CNode* pfrom, CConnman& connman);\n /**\n  * Send queued protocol messages to be sent to a give node.\n  *\n  * @param[in]   pto             The node which we are sending messages to.\n+ * @param[in]   connman         The connection manager for that node.\n  */\n-bool SendMessages(CNode* pto);\n+bool SendMessages(CNode* pto, CConnman& connman);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n@@ -262,7 +264,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL, CConnman* connman = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**"
      },
      {
        "sha": "b99989b289eb347500b3db300a3237de1b065342",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -1869,7 +1869,7 @@ void CConnman::ThreadMessageHandler()\n                 TRY_LOCK(pnode->cs_vRecvMsg, lockRecv);\n                 if (lockRecv)\n                 {\n-                    if (!GetNodeSignals().ProcessMessages(pnode))\n+                    if (!GetNodeSignals().ProcessMessages(pnode, *this))\n                         pnode->CloseSocketDisconnect();\n \n                     if (pnode->nSendSize < SendBufferSize())\n@@ -1887,7 +1887,7 @@ void CConnman::ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    GetNodeSignals().SendMessages(pnode);\n+                    GetNodeSignals().SendMessages(pnode, *this);\n             }\n             boost::this_thread::interruption_point();\n         }"
      },
      {
        "sha": "d2a38e7dc4ff910bc7387898e1b1720d6e8477cb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -145,8 +145,8 @@ struct CombinerAll\n struct CNodeSignals\n {\n     boost::signals2::signal<int ()> GetHeight;\n-    boost::signals2::signal<bool (CNode*), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*), CombinerAll> SendMessages;\n+    boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> ProcessMessages;\n+    boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n     boost::signals2::signal<void (NodeId)> FinalizeNode;\n };"
      },
      {
        "sha": "d600383c4bc185e73f0a5b3a061fd8b37d70655e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -1133,7 +1133,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params());\n+        ActivateBestChain(state, Params(), NULL, g_connman.get());\n     }\n \n     if (!state.IsValid()) {\n@@ -1171,7 +1171,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     }\n \n     CValidationState state;\n-    ActivateBestChain(state, Params());\n+    ActivateBestChain(state, Params(), NULL, g_connman.get());\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());"
      },
      {
        "sha": "63ecf49ecd69770b09c2ab40254c8bc86fb02262",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -131,7 +131,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             continue;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL))\n+        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL, g_connman.get()))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -754,7 +754,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL);\n+    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL, g_connman.get());\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "10529cda9e6bc8170fceba63042fe997e2ac8050",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -49,19 +49,19 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1);\n+    SendMessages(&dummyNode1, *connman);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2);\n+    SendMessages(&dummyNode2, *connman);\n     BOOST_CHECK(!CNode::IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(CNode::IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2);\n+    SendMessages(&dummyNode2, *connman);\n     BOOST_CHECK(CNode::IsBanned(addr2));\n }\n \n@@ -73,13 +73,13 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1);\n+    SendMessages(&dummyNode1, *connman);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1);\n+    SendMessages(&dummyNode1, *connman);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1);\n+    SendMessages(&dummyNode1, *connman);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     mapArgs.erase(\"-banscore\");\n }\n@@ -95,7 +95,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode);\n+    SendMessages(&dummyNode, *connman);\n     BOOST_CHECK(CNode::IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      },
      {
        "sha": "d3aa2364d1f7b48d9e70ddc9007b3cdae0eb9e70",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -222,7 +222,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL, connman));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "b1ceef4f64d0714407e7c73692664ec1235443ea",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d58c4d81f18e9a51d11ee354434cf55d03a4add/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "patch": "@@ -124,7 +124,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n+    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL, connman);\n \n     CBlock result = block;\n     delete pblocktemplate;"
      }
    ]
  },
  {
    "sha": "5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjQ0NmRkNWIxMWQ0ZjQwMzU1NGJjMmRkNWE3YTk0YzdkMjA0MjJh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-25T00:56:17Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:04:35Z"
      },
      "message": "net: Pass CConnection to wallet rather than using the global",
      "tree": {
        "sha": "a17d2662531e4ddde04872bd75a4924be36de2b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a17d2662531e4ddde04872bd75a4924be36de2b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d58c4d81f18e9a51d11ee354434cf55d03a4add",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d58c4d81f18e9a51d11ee354434cf55d03a4add"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 30,
      "deletions": 20
    },
    "files": [
      {
        "sha": "4dc9d71eea0110bd8984e221e4c610e5c89af9fc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "patch": "@@ -6431,7 +6431,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            GetMainSignals().Broadcast(nTimeBestReceived);\n+            GetMainSignals().Broadcast(nTimeBestReceived, &connman);\n         }\n \n         //"
      },
      {
        "sha": "73851e97fc1f132bb631154f4f12a027f6510878",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "patch": "@@ -328,7 +328,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         }\n \n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        if(!wallet->CommitTransaction(*newTx, *keyChange))\n+        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get()))\n             return TransactionCommitFailed;\n \n         CTransaction* t = (CTransaction*)newTx;"
      },
      {
        "sha": "6ddf37658d854ab1fd9cbf1c9f5caf499df642b2",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "patch": "@@ -18,7 +18,7 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.Inventory.connect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n-    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n+    g_signals.Broadcast.connect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.BlockChecked.connect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n     g_signals.ScriptForMining.connect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockFound.connect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n@@ -28,7 +28,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.BlockFound.disconnect(boost::bind(&CValidationInterface::ResetRequestCount, pwalletIn, _1));\n     g_signals.ScriptForMining.disconnect(boost::bind(&CValidationInterface::GetScriptForMining, pwalletIn, _1));\n     g_signals.BlockChecked.disconnect(boost::bind(&CValidationInterface::BlockChecked, pwalletIn, _1, _2));\n-    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1));\n+    g_signals.Broadcast.disconnect(boost::bind(&CValidationInterface::ResendWalletTransactions, pwalletIn, _1, _2));\n     g_signals.Inventory.disconnect(boost::bind(&CValidationInterface::Inventory, pwalletIn, _1));\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));"
      },
      {
        "sha": "0c91ec8308eed580295671ad0decb840ead0671f",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "patch": "@@ -13,6 +13,7 @@ class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n class CBlockIndex;\n+class CConnman;\n class CReserveScript;\n class CTransaction;\n class CValidationInterface;\n@@ -37,7 +38,7 @@ class CValidationInterface {\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n-    virtual void ResendWalletTransactions(int64_t nBestBlockTime) {}\n+    virtual void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) {}\n     virtual void BlockChecked(const CBlock&, const CValidationState&) {}\n     virtual void GetScriptForMining(boost::shared_ptr<CReserveScript>&) {};\n     virtual void ResetRequestCount(const uint256 &hash) {};\n@@ -58,7 +59,7 @@ struct CMainSignals {\n     /** Notifies listeners about an inventory item being seen on the network. */\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     /** Tells listeners to broadcast their data. */\n-    boost::signals2::signal<void (int64_t nBestBlockTime)> Broadcast;\n+    boost::signals2::signal<void (int64_t nBestBlockTime, CConnman* connman)> Broadcast;\n     /** Notifies listeners of a block validation result */\n     boost::signals2::signal<void (const CBlock&, const CValidationState&)> BlockChecked;\n     /** Notifies listeners that a key for mining is required (coinbase) */"
      },
      {
        "sha": "a399f8ad9f3b9189ed9b5647d2433ec6204f5df3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "patch": "@@ -346,6 +346,9 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n     if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n@@ -362,7 +365,7 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n-    if (!pwalletMain->CommitTransaction(wtxNew, reservekey))\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get()))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n }\n \n@@ -891,6 +894,9 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n+    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n     string strAccount = AccountFromValue(params[0]);\n     UniValue sendTo = params[1].get_obj();\n     int nMinDepth = 1;\n@@ -953,7 +959,7 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange))\n+    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get()))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n \n     return wtx.GetHash().GetHex();\n@@ -2308,9 +2314,12 @@ UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n             \"Returns array of transaction ids that were re-broadcast.\\n\"\n             );\n \n+    if (!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    std::vector<uint256> txids = pwalletMain->ResendWalletTransactionsBefore(GetTime());\n+    std::vector<uint256> txids = pwalletMain->ResendWalletTransactionsBefore(GetTime(), g_connman.get());\n     UniValue result(UniValue::VARR);\n     BOOST_FOREACH(const uint256& txid, txids)\n     {"
      },
      {
        "sha": "4396c2a2b0125b79314a59c36bda928caab6f5e1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "patch": "@@ -1453,7 +1453,7 @@ void CWallet::ReacceptWalletTransactions()\n     }\n }\n \n-bool CWalletTx::RelayWalletTransaction()\n+bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n {\n     assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase())\n@@ -1688,7 +1688,7 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& tx) const\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n-std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)\n+std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman)\n {\n     std::vector<uint256> result;\n \n@@ -1706,13 +1706,13 @@ std::vector<uint256> CWallet::ResendWalletTransactionsBefore(int64_t nTime)\n     BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n     {\n         CWalletTx& wtx = *item.second;\n-        if (wtx.RelayWalletTransaction())\n+        if (wtx.RelayWalletTransaction(connman))\n             result.push_back(wtx.GetHash());\n     }\n     return result;\n }\n \n-void CWallet::ResendWalletTransactions(int64_t nBestBlockTime)\n+void CWallet::ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman)\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n@@ -1730,7 +1730,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime)\n \n     // Rebroadcast unconfirmed txes older than 5 minutes before the last\n     // block was found:\n-    std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60);\n+    std::vector<uint256> relayed = ResendWalletTransactionsBefore(nBestBlockTime-5*60, connman);\n     if (!relayed.empty())\n         LogPrintf(\"%s: rebroadcast %u unconfirmed transactions\\n\", __func__, relayed.size());\n }\n@@ -2447,7 +2447,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n+bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman)\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n@@ -2481,7 +2481,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n                 LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n                 return false;\n             }\n-            wtxNew.RelayWalletTransaction();\n+            wtxNew.RelayWalletTransaction(connman);\n         }\n     }\n     return true;"
      },
      {
        "sha": "7a771350cba433f5bc0bef236987dcfc843af48c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "patch": "@@ -401,7 +401,7 @@ class CWalletTx : public CMerkleTx\n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n-    bool RelayWalletTransaction();\n+    bool RelayWalletTransaction(CConnman* connman);\n \n     std::set<uint256> GetConflicts() const;\n };\n@@ -748,8 +748,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime);\n-    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime);\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman);\n+    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -770,7 +770,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n+    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman);\n \n     bool AddAccountingEntry(const CAccountingEntry&, CWalletDB & pwalletdb);\n "
      }
    ]
  },
  {
    "sha": "02137f11e2ea5d153f433493639730587836a1e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjEzN2YxMWUyZWE1ZDE1M2Y0MzM0OTM2Mzk3MzA1ODc4MzZhMWUz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T19:46:00Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:06:24Z"
      },
      "message": "net: Move socket binding into CConnman",
      "tree": {
        "sha": "9d46cc20dbc21c6220adb1f62fe1485ae7f724f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d46cc20dbc21c6220adb1f62fe1485ae7f724f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02137f11e2ea5d153f433493639730587836a1e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02137f11e2ea5d153f433493639730587836a1e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02137f11e2ea5d153f433493639730587836a1e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02137f11e2ea5d153f433493639730587836a1e3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b446dd5b11d4f403554bc2dd5a7a94c7d20422a"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b0ffb7a40e35f24774d6c8884139337c8f21e9e3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02137f11e2ea5d153f433493639730587836a1e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02137f11e2ea5d153f433493639730587836a1e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=02137f11e2ea5d153f433493639730587836a1e3",
        "patch": "@@ -273,11 +273,11 @@ void HandleSIGHUP(int)\n     fReopenDebugLog = true;\n }\n \n-bool static Bind(const CService &addr, unsigned int flags) {\n+bool static Bind(CConnman& connman, const CService &addr, unsigned int flags) {\n     if (!(flags & BF_EXPLICIT) && IsLimited(addr))\n         return false;\n     std::string strError;\n-    if (!BindListenPort(addr, strError, (flags & BF_WHITELIST) != 0)) {\n+    if (!connman.BindListenPort(addr, strError, (flags & BF_WHITELIST) != 0)) {\n         if (flags & BF_REPORT_ERROR)\n             return InitError(strError);\n         return false;\n@@ -1198,22 +1198,22 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false))\n                     return InitError(ResolveErrMsg(\"bind\", strBind));\n-                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n+                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR));\n             }\n             BOOST_FOREACH(const std::string& strBind, mapMultiArgs[\"-whitebind\"]) {\n                 CService addrBind;\n                 if (!Lookup(strBind.c_str(), addrBind, 0, false))\n                     return InitError(ResolveErrMsg(\"whitebind\", strBind));\n                 if (addrBind.GetPort() == 0)\n                     return InitError(strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind));\n-                fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n+                fBound |= Bind(connman, addrBind, (BF_EXPLICIT | BF_REPORT_ERROR | BF_WHITELIST));\n             }\n         }\n         else {\n             struct in_addr inaddr_any;\n             inaddr_any.s_addr = INADDR_ANY;\n-            fBound |= Bind(CService(in6addr_any, GetListenPort()), BF_NONE);\n-            fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n+            fBound |= Bind(connman, CService(in6addr_any, GetListenPort()), BF_NONE);\n+            fBound |= Bind(connman, CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE);\n         }\n         if (!fBound)\n             return InitError(_(\"Failed to listen on any port. Use -listen=0 if you want this.\"));"
      },
      {
        "sha": "0069820004c5809216a1c20f203b69c92ce49372",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02137f11e2ea5d153f433493639730587836a1e3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02137f11e2ea5d153f433493639730587836a1e3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=02137f11e2ea5d153f433493639730587836a1e3",
        "patch": "@@ -84,7 +84,6 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64_t nLocalHostNonce = 0;\n-static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n bool fAddressesInitialized = false;\n@@ -1908,7 +1907,7 @@ void CConnman::ThreadMessageHandler()\n \n \n \n-bool BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)\n+bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, bool fWhitelisted)\n {\n     strError = \"\";\n     int nOne = 1;"
      },
      {
        "sha": "4d87408e3237ddf451dae7ba0178df95103b6963",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02137f11e2ea5d153f433493639730587836a1e3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02137f11e2ea5d153f433493639730587836a1e3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=02137f11e2ea5d153f433493639730587836a1e3",
        "patch": "@@ -95,28 +95,32 @@ CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n \n-struct ListenSocket {\n-    SOCKET socket;\n-    bool whitelisted;\n-\n-    ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}\n-};\n-\n class CConnman\n {\n public:\n     CConnman();\n     ~CConnman();\n     bool Start(boost::thread_group& threadGroup, std::string& strNodeError);\n     void Stop();\n+    bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n+\n private:\n+    struct ListenSocket {\n+        SOCKET socket;\n+        bool whitelisted;\n+\n+        ListenSocket(SOCKET socket_, bool whitelisted_) : socket(socket_), whitelisted(whitelisted_) {}\n+    };\n+\n     void ThreadOpenAddedConnections();\n     void ProcessOneShot();\n     void ThreadOpenConnections();\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n+\n+    std::vector<ListenSocket> vhListenSocket;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);"
      }
    ]
  },
  {
    "sha": "b1a5f4320878e34eb998737dce333270dd83e436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWE1ZjQzMjA4NzhlMzRlYjk5ODczN2RjZTMzMzI3MGRkODNlNDM2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T19:59:10Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:06:24Z"
      },
      "message": "net: move OpenNetworkConnection into CConnman",
      "tree": {
        "sha": "2b1a9a94fb1008b3e4b1936fb55d3e83cb998aac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b1a9a94fb1008b3e4b1936fb55d3e83cb998aac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1a5f4320878e34eb998737dce333270dd83e436",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a5f4320878e34eb998737dce333270dd83e436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1a5f4320878e34eb998737dce333270dd83e436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a5f4320878e34eb998737dce333270dd83e436/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02137f11e2ea5d153f433493639730587836a1e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02137f11e2ea5d153f433493639730587836a1e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02137f11e2ea5d153f433493639730587836a1e3"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "83a96205a35d045b715ca11f46bfaadfd97795cd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1a5f4320878e34eb998737dce333270dd83e436/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1a5f4320878e34eb998737dce333270dd83e436/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b1a5f4320878e34eb998737dce333270dd83e436",
        "patch": "@@ -375,7 +375,7 @@ CNode* FindNode(const NodeId nodeid)\n     return NULL;\n }\n \n-CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n+CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n         if (IsLocal(addrConnect))\n@@ -1809,7 +1809,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler)\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler)\n {\n     //\n     // Initiate outbound network connection"
      },
      {
        "sha": "e0c317ae46525bcfa8ea74d1bcc6553525778904",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1a5f4320878e34eb998737dce333270dd83e436/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1a5f4320878e34eb998737dce333270dd83e436/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b1a5f4320878e34eb998737dce333270dd83e436",
        "patch": "@@ -93,7 +93,6 @@ CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n-bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n \n class CConnman\n {\n@@ -103,6 +102,7 @@ class CConnman\n     bool Start(boost::thread_group& threadGroup, std::string& strNodeError);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n+    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n \n private:\n     struct ListenSocket {\n@@ -120,6 +120,8 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n+    CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n+\n     std::vector<ListenSocket> vhListenSocket;\n };\n extern std::unique_ptr<CConnman> g_connman;"
      },
      {
        "sha": "edf33c70be72f380fa923fbd83401759153eca9e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1a5f4320878e34eb998737dce333270dd83e436/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1a5f4320878e34eb998737dce333270dd83e436/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=b1a5f4320878e34eb998737dce333270dd83e436",
        "patch": "@@ -214,12 +214,15 @@ UniValue addnode(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n         );\n \n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n     string strNode = params[0].get_str();\n \n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        OpenNetworkConnection(addr, false, NULL, strNode.c_str());\n+        g_connman->OpenNetworkConnection(addr, false, NULL, strNode.c_str());\n         return NullUniValue;\n     }\n "
      }
    ]
  },
  {
    "sha": "aaf018e3b79417ecfd39291a8c100df77969d77a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWYwMThlM2I3OTQxN2VjZmQzOTI5MWE4YzEwMGRmNzc5NjlkNzdh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-24T22:59:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:06:24Z"
      },
      "message": "net: handle nodesignals in CConnman",
      "tree": {
        "sha": "aebdb2c2dbdd1f2d0eb967222cc7f246b16c55d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aebdb2c2dbdd1f2d0eb967222cc7f246b16c55d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaf018e3b79417ecfd39291a8c100df77969d77a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaf018e3b79417ecfd39291a8c100df77969d77a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aaf018e3b79417ecfd39291a8c100df77969d77a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaf018e3b79417ecfd39291a8c100df77969d77a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1a5f4320878e34eb998737dce333270dd83e436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a5f4320878e34eb998737dce333270dd83e436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1a5f4320878e34eb998737dce333270dd83e436"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 31,
      "deletions": 19
    },
    "files": [
      {
        "sha": "bd85fa8f07060dd0fe6b8f8430892662ff99128f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaf018e3b79417ecfd39291a8c100df77969d77a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaf018e3b79417ecfd39291a8c100df77969d77a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=aaf018e3b79417ecfd39291a8c100df77969d77a",
        "patch": "@@ -348,15 +348,16 @@ void InitializeNode(NodeId nodeid, const CNode *pnode) {\n     state.address = pnode->addr;\n }\n \n-void FinalizeNode(NodeId nodeid) {\n+void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n+    fUpdateConnectionTime = false;\n     LOCK(cs_main);\n     CNodeState *state = State(nodeid);\n \n     if (state->fSyncStarted)\n         nSyncStarted--;\n \n     if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n-        AddressCurrentlyConnected(state->address);\n+        fUpdateConnectionTime = true;\n     }\n \n     BOOST_FOREACH(const QueuedBlock& entry, state->vBlocksInFlight) {"
      },
      {
        "sha": "26bf477e999cf7aff98e888aa6145c6220ddc49c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 16,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaf018e3b79417ecfd39291a8c100df77969d77a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaf018e3b79417ecfd39291a8c100df77969d77a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=aaf018e3b79417ecfd39291a8c100df77969d77a",
        "patch": "@@ -313,12 +313,6 @@ bool IsReachable(const CNetAddr& addr)\n     return IsReachable(net);\n }\n \n-void AddressCurrentlyConnected(const CService& addr)\n-{\n-    addrman.Connected(addr);\n-}\n-\n-\n uint64_t CNode::nTotalBytesRecv = 0;\n uint64_t CNode::nTotalBytesSent = 0;\n CCriticalSection CNode::cs_totalBytesRecv;\n@@ -431,6 +425,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n \n         // Add node\n         CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n+        GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n         {\n@@ -1070,6 +1065,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     }\n \n     CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+    GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n \n@@ -1139,7 +1135,7 @@ void CConnman::ThreadSocketHandler()\n                     if (fDelete)\n                     {\n                         vNodesDisconnected.remove(pnode);\n-                        delete pnode;\n+                        DeleteNode(pnode);\n                     }\n                 }\n             }\n@@ -2119,6 +2115,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, std::string& strNodeError\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n         pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n+        GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n     //\n@@ -2194,19 +2191,32 @@ void CConnman::Stop()\n                 LogPrintf(\"CloseSocket(hListenSocket) failed with error %s\\n\", NetworkErrorString(WSAGetLastError()));\n \n     // clean up some globals (to help leak detection)\n-    BOOST_FOREACH(CNode *pnode, vNodes)\n-        delete pnode;\n-    BOOST_FOREACH(CNode *pnode, vNodesDisconnected)\n-        delete pnode;\n+    BOOST_FOREACH(CNode *pnode, vNodes) {\n+        DeleteNode(pnode);\n+    }\n+    BOOST_FOREACH(CNode *pnode, vNodesDisconnected) {\n+        DeleteNode(pnode);\n+    }\n     vNodes.clear();\n     vNodesDisconnected.clear();\n     vhListenSocket.clear();\n     delete semOutbound;\n     semOutbound = NULL;\n-    delete pnodeLocalHost;\n+    if(pnodeLocalHost)\n+        DeleteNode(pnodeLocalHost);\n     pnodeLocalHost = NULL;\n }\n \n+void CConnman::DeleteNode(CNode* pnode)\n+{\n+    assert(pnode);\n+    bool fUpdateConnectionTime = false;\n+    GetNodeSignals().FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n+    if(fUpdateConnectionTime)\n+        addrman.Connected(pnode->addr);\n+    delete pnode;\n+}\n+\n CConnman::~CConnman()\n {\n }\n@@ -2442,8 +2452,6 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     // Be shy and don't send version until we hear\n     if (hSocket != INVALID_SOCKET && !fInbound)\n         PushVersion();\n-\n-    GetNodeSignals().InitializeNode(GetId(), this);\n }\n \n CNode::~CNode()\n@@ -2452,8 +2460,6 @@ CNode::~CNode()\n \n     if (pfilter)\n         delete pfilter;\n-\n-    GetNodeSignals().FinalizeNode(GetId());\n }\n \n void CNode::AskFor(const CInv& inv)"
      },
      {
        "sha": "b9dfaa0f403457f2a16a3f102ac33a299c06fcc4",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaf018e3b79417ecfd39291a8c100df77969d77a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaf018e3b79417ecfd39291a8c100df77969d77a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=aaf018e3b79417ecfd39291a8c100df77969d77a",
        "patch": "@@ -121,6 +121,7 @@ class CConnman\n     void ThreadDNSAddressSeed();\n \n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n+    void DeleteNode(CNode* pnode);\n \n     std::vector<ListenSocket> vhListenSocket;\n };\n@@ -154,7 +155,7 @@ struct CNodeSignals\n     boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> ProcessMessages;\n     boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n-    boost::signals2::signal<void (NodeId)> FinalizeNode;\n+    boost::signals2::signal<void (NodeId, bool&)> FinalizeNode;\n };\n \n "
      },
      {
        "sha": "007ea79f9edf0620fe812507cbbbecb36b903e6a",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaf018e3b79417ecfd39291a8c100df77969d77a/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaf018e3b79417ecfd39291a8c100df77969d77a/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=aaf018e3b79417ecfd39291a8c100df77969d77a",
        "patch": "@@ -47,6 +47,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CNode::ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n+    GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman);\n@@ -55,6 +56,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n+    GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman);\n@@ -71,6 +73,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n+    GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman);\n@@ -92,6 +95,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode(INVALID_SOCKET, addr, \"\", true);\n+    GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);"
      }
    ]
  },
  {
    "sha": "a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGYzZDNjZGFkNjMwMTAzZDkxOWE0ZWM4MDJjNDEzYjg3ZmExZjFh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T21:43:11Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:12:57Z"
      },
      "message": "net: move ban and addrman functions into CConnman",
      "tree": {
        "sha": "b02339d74322cb6e6243a4b1bba743a374f4f439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b02339d74322cb6e6243a4b1bba743a374f4f439"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aaf018e3b79417ecfd39291a8c100df77969d77a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaf018e3b79417ecfd39291a8c100df77969d77a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aaf018e3b79417ecfd39291a8c100df77969d77a"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 174,
      "deletions": 132
    },
    "files": [
      {
        "sha": "f3babb71d219de73c33f30b5e312daae79746cdf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "patch": "@@ -4944,7 +4944,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            addrman.SetServices(pfrom->addr, pfrom->nServices);\n+            connman.SetServices(pfrom->addr, pfrom->nServices);\n         }\n         if (pfrom->nServicesExpected & ~pfrom->nServices)\n         {\n@@ -5038,12 +5038,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n \n             // Get recent addresses\n-            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n+            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || connman.GetAddressCount() < 1000)\n             {\n                 pfrom->PushMessage(NetMsgType::GETADDR);\n                 pfrom->fGetAddr = true;\n             }\n-            addrman.Good(pfrom->addr);\n+            connman.MarkAddressGood(pfrom->addr);\n         }\n \n         pfrom->fSuccessfullyConnected = true;\n@@ -5108,7 +5108,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         vRecv >> vAddr;\n \n         // Don't want addr from older versions unless seeding\n-        if (pfrom->nVersion < CADDR_TIME_VERSION && addrman.size() > 1000)\n+        if (pfrom->nVersion < CADDR_TIME_VERSION && connman.GetAddressCount() > 1000)\n             return true;\n         if (vAddr.size() > 1000)\n         {\n@@ -5160,7 +5160,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (fReachable)\n                 vAddrOk.push_back(addr);\n         }\n-        addrman.Add(vAddrOk, pfrom->addr, 2 * 60 * 60);\n+        connman.AddNewAddresses(vAddrOk, pfrom->addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)\n@@ -5950,7 +5950,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        vector<CAddress> vAddr = addrman.GetAddr();\n+        vector<CAddress> vAddr = connman.GetAddresses();\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n             pfrom->PushAddress(addr);\n     }\n@@ -6393,7 +6393,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n                 else\n                 {\n-                    CNode::Ban(pto->addr, BanReasonNodeMisbehaving);\n+                    connman.Ban(pto->addr, BanReasonNodeMisbehaving);\n                 }\n             }\n             state.fShouldBan = false;"
      },
      {
        "sha": "eeb84fca7a20b828566899e4a54cfbbdab24489c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 49,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "patch": "@@ -84,9 +84,7 @@ std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64_t nLocalHostNonce = 0;\n-CAddrMan addrman;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n-bool fAddressesInitialized = false;\n std::string strSubVersion;\n \n std::vector<CNode*> vNodes;\n@@ -446,21 +444,21 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     return NULL;\n }\n \n-static void DumpBanlist()\n+void CConnman::DumpBanlist()\n {\n-    CNode::SweepBanned(); // clean unused entries (if bantime has expired)\n+    SweepBanned(); // clean unused entries (if bantime has expired)\n \n-    if (!CNode::BannedSetIsDirty())\n+    if (!BannedSetIsDirty())\n         return;\n \n     int64_t nStart = GetTimeMillis();\n \n     CBanDB bandb;\n     banmap_t banmap;\n-    CNode::SetBannedSetDirty(false);\n-    CNode::GetBanned(banmap);\n+    SetBannedSetDirty(false);\n+    GetBanned(banmap);\n     if (!bandb.Write(banmap))\n-        CNode::SetBannedSetDirty(true);\n+        SetBannedSetDirty(true);\n \n     LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n         banmap.size(), GetTimeMillis() - nStart);\n@@ -501,11 +499,7 @@ void CNode::PushVersion()\n \n \n \n-banmap_t CNode::setBanned;\n-CCriticalSection CNode::cs_setBanned;\n-bool CNode::setBannedIsDirty;\n-\n-void CNode::ClearBanned()\n+void CConnman::ClearBanned()\n {\n     {\n         LOCK(cs_setBanned);\n@@ -516,7 +510,7 @@ void CNode::ClearBanned()\n     uiInterface.BannedListChanged();\n }\n \n-bool CNode::IsBanned(CNetAddr ip)\n+bool CConnman::IsBanned(CNetAddr ip)\n {\n     bool fResult = false;\n     {\n@@ -533,7 +527,7 @@ bool CNode::IsBanned(CNetAddr ip)\n     return fResult;\n }\n \n-bool CNode::IsBanned(CSubNet subnet)\n+bool CConnman::IsBanned(CSubNet subnet)\n {\n     bool fResult = false;\n     {\n@@ -549,12 +543,12 @@ bool CNode::IsBanned(CSubNet subnet)\n     return fResult;\n }\n \n-void CNode::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+void CConnman::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n     CSubNet subNet(addr);\n     Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n }\n \n-void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n     CBanEntry banEntry(GetTime());\n     banEntry.banReason = banReason;\n     if (bantimeoffset <= 0)\n@@ -585,12 +579,12 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n         DumpBanlist(); //store banlist to disk immediately if user requested ban\n }\n \n-bool CNode::Unban(const CNetAddr &addr) {\n+bool CConnman::Unban(const CNetAddr &addr) {\n     CSubNet subNet(addr);\n     return Unban(subNet);\n }\n \n-bool CNode::Unban(const CSubNet &subNet) {\n+bool CConnman::Unban(const CSubNet &subNet) {\n     {\n         LOCK(cs_setBanned);\n         if (!setBanned.erase(subNet))\n@@ -602,20 +596,20 @@ bool CNode::Unban(const CSubNet &subNet) {\n     return true;\n }\n \n-void CNode::GetBanned(banmap_t &banMap)\n+void CConnman::GetBanned(banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n     banMap = setBanned; //create a thread safe copy\n }\n \n-void CNode::SetBanned(const banmap_t &banMap)\n+void CConnman::SetBanned(const banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n     setBanned = banMap;\n     setBannedIsDirty = true;\n }\n \n-void CNode::SweepBanned()\n+void CConnman::SweepBanned()\n {\n     int64_t now = GetTime();\n \n@@ -636,13 +630,13 @@ void CNode::SweepBanned()\n     }\n }\n \n-bool CNode::BannedSetIsDirty()\n+bool CConnman::BannedSetIsDirty()\n {\n     LOCK(cs_setBanned);\n     return setBannedIsDirty;\n }\n \n-void CNode::SetBannedSetDirty(bool dirty)\n+void CConnman::SetBannedSetDirty(bool dirty)\n {\n     LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n     setBannedIsDirty = dirty;\n@@ -1047,7 +1041,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&set, sizeof(int));\n #endif\n \n-    if (CNode::IsBanned(addr) && !whitelisted)\n+    if (IsBanned(addr) && !whitelisted)\n     {\n         LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -1548,7 +1542,7 @@ void CConnman::ThreadDNSAddressSeed()\n \n \n \n-void DumpAddresses()\n+void CConnman::DumpAddresses()\n {\n     int64_t nStart = GetTimeMillis();\n \n@@ -1559,7 +1553,7 @@ void DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n-void DumpData()\n+void CConnman::DumpData()\n {\n     DumpAddresses();\n     DumpBanlist();\n@@ -1813,7 +1807,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     boost::this_thread::interruption_point();\n     if (!pszDest) {\n         if (IsLocal(addrConnect) ||\n-            FindNode((CNetAddr)addrConnect) || CNode::IsBanned(addrConnect) ||\n+            FindNode((CNetAddr)addrConnect) || IsBanned(addrConnect) ||\n             FindNode(addrConnect.ToStringIPPort()))\n             return false;\n     } else if (FindNode(std::string(pszDest)))\n@@ -2054,10 +2048,22 @@ void static Discover(boost::thread_group& threadGroup)\n \n CConnman::CConnman()\n {\n+    setBannedIsDirty = false;\n+    fAddressesInitialized = false;\n }\n \n bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n {\n+    Discover(threadGroup);\n+\n+    bool ret = connman.Start(threadGroup, scheduler, strNodeError);\n+\n+    return ret;\n+}\n+\n+bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n+{\n+\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2078,33 +2084,22 @@ bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler&\n     CBanDB bandb;\n     banmap_t banmap;\n     if (bandb.Read(banmap)) {\n-        CNode::SetBanned(banmap); // thread save setter\n-        CNode::SetBannedSetDirty(false); // no need to write down, just read data\n-        CNode::SweepBanned(); // sweep out unused entries\n+        SetBanned(banmap); // thread save setter\n+        SetBannedSetDirty(false); // no need to write down, just read data\n+        SweepBanned(); // sweep out unused entries\n \n         LogPrint(\"net\", \"Loaded %d banned node ips/subnets from banlist.dat  %dms\\n\",\n             banmap.size(), GetTimeMillis() - nStart);\n     } else {\n         LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n-        CNode::SetBannedSetDirty(true); // force write\n+        SetBannedSetDirty(true); // force write\n         DumpBanlist();\n     }\n \n     uiInterface.InitMessage(_(\"Starting network threads...\"));\n \n     fAddressesInitialized = true;\n \n-    Discover(threadGroup);\n-\n-    bool ret = connman.Start(threadGroup, strNodeError);\n-\n-    // Dump network addresses\n-    scheduler.scheduleEvery(DumpData, DUMP_ADDRESSES_INTERVAL);\n-    return ret;\n-}\n-\n-bool CConnman::Start(boost::thread_group& threadGroup, std::string& strNodeError)\n-{\n     if (semOutbound == NULL) {\n         // initialize semaphore\n         int nMaxOutbound = std::min((MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS), nMaxConnections);\n@@ -2142,6 +2137,9 @@ bool CConnman::Start(boost::thread_group& threadGroup, std::string& strNodeError\n     // Process messages\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"msghand\", boost::function<void()>(boost::bind(&CConnman::ThreadMessageHandler, this))));\n \n+    // Dump network addresses\n+    scheduler.scheduleEvery(boost::bind(&CConnman::DumpData, this), DUMP_ADDRESSES_INTERVAL);\n+\n     return true;\n }\n \n@@ -2150,12 +2148,6 @@ bool StopNode(CConnman& connman)\n     LogPrintf(\"StopNode()\\n\");\n     MapPort(false);\n \n-    if (fAddressesInitialized)\n-    {\n-        DumpData();\n-        fAddressesInitialized = false;\n-    }\n-\n     connman.Stop();\n     return true;\n }\n@@ -2181,6 +2173,12 @@ void CConnman::Stop()\n         for (int i=0; i<(MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS); i++)\n             semOutbound->post();\n \n+    if (fAddressesInitialized)\n+    {\n+        DumpData();\n+        fAddressesInitialized = false;\n+    }\n+\n     // Close sockets\n     BOOST_FOREACH(CNode* pnode, vNodes)\n         if (pnode->hSocket != INVALID_SOCKET)\n@@ -2221,6 +2219,36 @@ CConnman::~CConnman()\n {\n }\n \n+size_t CConnman::GetAddressCount() const\n+{\n+    return addrman.size();\n+}\n+\n+void CConnman::SetServices(const CService &addr, ServiceFlags nServices)\n+{\n+    addrman.SetServices(addr, nServices);\n+}\n+\n+void CConnman::MarkAddressGood(const CAddress& addr)\n+{\n+    addrman.Good(addr);\n+}\n+\n+void CConnman::AddNewAddress(const CAddress& addr, const CAddress& addrFrom, int64_t nTimePenalty)\n+{\n+    addrman.Add(addr, addrFrom, nTimePenalty);\n+}\n+\n+void CConnman::AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty)\n+{\n+    addrman.Add(vAddr, addrFrom, nTimePenalty);\n+}\n+\n+std::vector<CAddress> CConnman::GetAddresses()\n+{\n+    return addrman.GetAddr();\n+}\n+\n void RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());"
      },
      {
        "sha": "65dafb4fd926c4aa24ab423c37e1ca769173d6e8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 49,
        "deletions": 40,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_NET_H\n \n #include \"addrdb.h\"\n+#include \"addrman.h\"\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n@@ -87,7 +88,6 @@ unsigned int SendBufferSize();\n typedef int NodeId;\n \n void AddOneShot(const std::string& strDest);\n-void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n@@ -99,11 +99,44 @@ class CConnman\n public:\n     CConnman();\n     ~CConnman();\n-    bool Start(boost::thread_group& threadGroup, std::string& strNodeError);\n+    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n \n+    // Addrman functions\n+    size_t GetAddressCount() const;\n+    void SetServices(const CService &addr, ServiceFlags nServices);\n+    void MarkAddressGood(const CAddress& addr);\n+    void AddNewAddress(const CAddress& addr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n+    void AddNewAddresses(const std::vector<CAddress>& vAddr, const CAddress& addrFrom, int64_t nTimePenalty = 0);\n+    std::vector<CAddress> GetAddresses();\n+    void AddressCurrentlyConnected(const CService& addr);\n+\n+    // Denial-of-service detection/prevention\n+    // The idea is to detect peers that are behaving\n+    // badly and disconnect/ban them, but do it in a\n+    // one-coding-mistake-won't-shatter-the-entire-network\n+    // way.\n+    // IMPORTANT:  There should be nothing I can give a\n+    // node that it will forward on that will make that\n+    // node's peers drop it. If there is, an attacker\n+    // can isolate a node and/or try to split the network.\n+    // Dropping a node for sending stuff that is invalid\n+    // now but might be valid in a later version is also\n+    // dangerous, because it can cause a network split\n+    // between nodes running old code and nodes running\n+    // new code.\n+    void Ban(const CNetAddr& netAddr, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void Ban(const CSubNet& subNet, const BanReason& reason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    void ClearBanned(); // needed for unit testing\n+    bool IsBanned(CNetAddr ip);\n+    bool IsBanned(CSubNet subnet);\n+    bool Unban(const CNetAddr &ip);\n+    bool Unban(const CSubNet &ip);\n+    void GetBanned(banmap_t &banmap);\n+    void SetBanned(const banmap_t &banmap);\n+\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -122,8 +155,22 @@ class CConnman\n \n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n     void DeleteNode(CNode* pnode);\n+    //!check is the banlist has unwritten changes\n+    bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    void SetBannedSetDirty(bool dirty=true);\n+    //!clean unused entries (if bantime has expired)\n+    void SweepBanned();\n+    void DumpAddresses();\n+    void DumpData();\n+    void DumpBanlist();\n \n     std::vector<ListenSocket> vhListenSocket;\n+    banmap_t setBanned;\n+    CCriticalSection cs_setBanned;\n+    bool setBannedIsDirty;\n+    bool fAddressesInitialized;\n+    CAddrMan addrman;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n@@ -195,7 +242,6 @@ extern ServiceFlags nLocalServices;\n extern ServiceFlags nRelevantServices;\n extern bool fRelayTxes;\n extern uint64_t nLocalHostNonce;\n-extern CAddrMan addrman;\n \n /** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n@@ -347,12 +393,6 @@ class CNode\n     const uint64_t nKeyedNetGroup;\n protected:\n \n-    // Denial-of-service detection/prevention\n-    // Key is IP address, value is banned-until-time\n-    static banmap_t setBanned;\n-    static CCriticalSection cs_setBanned;\n-    static bool setBannedIsDirty;\n-\n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n     static std::vector<CSubNet> vWhitelistedRange;\n@@ -722,37 +762,6 @@ class CNode\n \n     void CloseSocketDisconnect();\n \n-    // Denial-of-service detection/prevention\n-    // The idea is to detect peers that are behaving\n-    // badly and disconnect/ban them, but do it in a\n-    // one-coding-mistake-won't-shatter-the-entire-network\n-    // way.\n-    // IMPORTANT:  There should be nothing I can give a\n-    // node that it will forward on that will make that\n-    // node's peers drop it. If there is, an attacker\n-    // can isolate a node and/or try to split the network.\n-    // Dropping a node for sending stuff that is invalid\n-    // now but might be valid in a later version is also\n-    // dangerous, because it can cause a network split\n-    // between nodes running old code and nodes running\n-    // new code.\n-    static void ClearBanned(); // needed for unit testing\n-    static bool IsBanned(CNetAddr ip);\n-    static bool IsBanned(CSubNet subnet);\n-    static void Ban(const CNetAddr &ip, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    static void Ban(const CSubNet &subNet, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    static bool Unban(const CNetAddr &ip);\n-    static bool Unban(const CSubNet &ip);\n-    static void GetBanned(banmap_t &banmap);\n-    static void SetBanned(const banmap_t &banmap);\n-\n-    //!check is the banlist has unwritten changes\n-    static bool BannedSetIsDirty();\n-    //!set the \"dirty\" flag for the banlist\n-    static void SetBannedSetDirty(bool dirty=true);\n-    //!clean unused entries (if bantime has expired)\n-    static void SweepBanned();\n-\n     void copyStats(CNodeStats &stats);\n \n     static bool IsWhitelistedRange(const CNetAddr &ip);"
      },
      {
        "sha": "6e11e2390473303b6c013e9b29d4b141754cbdad",
        "filename": "src/qt/bantablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/qt/bantablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/qt/bantablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bantablemodel.cpp?ref=a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "patch": "@@ -48,7 +48,8 @@ class BanTablePriv\n     void refreshBanlist()\n     {\n         banmap_t banMap;\n-        CNode::GetBanned(banMap);\n+        if(g_connman)\n+            g_connman->GetBanned(banMap);\n \n         cachedBanlist.clear();\n #if QT_VERSION >= 0x040700"
      },
      {
        "sha": "708be6b646e8a022f272658b06ade73ed13446b8",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 16,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "patch": "@@ -887,26 +887,23 @@ void RPCConsole::disconnectSelectedNode()\n \n void RPCConsole::banSelectedNode(int bantime)\n {\n-    if (!clientModel)\n+    if (!clientModel || !g_connman)\n         return;\n \n     // Get currently selected peer address\n     QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address).toString();\n     // Find possible nodes, ban it and clear the selected node\n-    if (FindNode(strNode.toStdString())) {\n-        std::string nStr = strNode.toStdString();\n-        std::string addr;\n-        int port = 0;\n-        SplitHostPort(nStr, port, addr);\n-\n-        CNetAddr resolved;\n-        if(!LookupHost(addr.c_str(), resolved, false))\n-            return;\n-        CNode::Ban(resolved, BanReasonManuallyAdded, bantime);\n+    std::string nStr = strNode.toStdString();\n+    std::string addr;\n+    int port = 0;\n+    SplitHostPort(nStr, port, addr);\n \n-        clearSelectedNode();\n-        clientModel->getBanTableModel()->refresh();\n-    }\n+    CNetAddr resolved;\n+    if(!LookupHost(addr.c_str(), resolved, false))\n+        return;\n+    g_connman->Ban(resolved, BanReasonManuallyAdded, bantime);\n+    clearSelectedNode();\n+    clientModel->getBanTableModel()->refresh();\n }\n \n void RPCConsole::unbanSelectedNode()\n@@ -919,9 +916,9 @@ void RPCConsole::unbanSelectedNode()\n     CSubNet possibleSubnet;\n \n     LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n-    if (possibleSubnet.IsValid())\n+    if (possibleSubnet.IsValid() && g_connman)\n     {\n-        CNode::Unban(possibleSubnet);\n+        g_connman->Unban(possibleSubnet);\n         clientModel->getBanTableModel()->refresh();\n     }\n }"
      },
      {
        "sha": "0244da9fea746a51d9c317f880a5488acdbd0260",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "patch": "@@ -488,6 +488,8 @@ UniValue setban(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n                             + HelpExampleRpc(\"setban\", \"\\\"192.168.0.6\\\", \\\"add\\\", 86400\")\n                             );\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     CSubNet subNet;\n     CNetAddr netAddr;\n@@ -509,7 +511,7 @@ UniValue setban(const UniValue& params, bool fHelp)\n \n     if (strCommand == \"add\")\n     {\n-        if (isSubnet ? CNode::IsBanned(subNet) : CNode::IsBanned(netAddr))\n+        if (isSubnet ? g_connman->IsBanned(subNet) : g_connman->IsBanned(netAddr))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n@@ -520,11 +522,11 @@ UniValue setban(const UniValue& params, bool fHelp)\n         if (params.size() == 4 && params[3].isTrue())\n             absolute = true;\n \n-        isSubnet ? CNode::Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : CNode::Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+        isSubnet ? g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if (!( isSubnet ? CNode::Unban(subNet) : CNode::Unban(netAddr) ))\n+        if (!( isSubnet ? g_connman->Unban(subNet) : g_connman->Unban(netAddr) ))\n             throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n     }\n     return NullUniValue;\n@@ -541,8 +543,11 @@ UniValue listbanned(const UniValue& params, bool fHelp)\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                             );\n \n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n     banmap_t banMap;\n-    CNode::GetBanned(banMap);\n+    g_connman->GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n     for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n@@ -570,8 +575,10 @@ UniValue clearbanned(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                             );\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    CNode::ClearBanned();\n+    g_connman->ClearBanned();\n \n     return NullUniValue;\n }"
      },
      {
        "sha": "412f94f40d9dddd22e092280f99ab93993311c65",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0f3d3cdad630103d919a4ec802c413b87fa1f1a/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "patch": "@@ -44,52 +44,52 @@ BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n-    CNode::ClearBanned();\n+    connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     SendMessages(&dummyNode1, *connman);\n-    BOOST_CHECK(CNode::IsBanned(addr1));\n-    BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n+    BOOST_CHECK(connman->IsBanned(addr1));\n+    BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman);\n-    BOOST_CHECK(!CNode::IsBanned(addr2)); // 2 not banned yet...\n-    BOOST_CHECK(CNode::IsBanned(addr1));  // ... but 1 still should be\n+    BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n+    BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n     SendMessages(&dummyNode2, *connman);\n-    BOOST_CHECK(CNode::IsBanned(addr2));\n+    BOOST_CHECK(connman->IsBanned(addr2));\n }\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n-    CNode::ClearBanned();\n+    connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n     SendMessages(&dummyNode1, *connman);\n-    BOOST_CHECK(!CNode::IsBanned(addr1));\n+    BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n     SendMessages(&dummyNode1, *connman);\n-    BOOST_CHECK(!CNode::IsBanned(addr1));\n+    BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n     SendMessages(&dummyNode1, *connman);\n-    BOOST_CHECK(CNode::IsBanned(addr1));\n+    BOOST_CHECK(connman->IsBanned(addr1));\n     mapArgs.erase(\"-banscore\");\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n-    CNode::ClearBanned();\n+    connman->ClearBanned();\n     int64_t nStartTime = GetTime();\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n@@ -100,13 +100,13 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n     Misbehaving(dummyNode.GetId(), 100);\n     SendMessages(&dummyNode, *connman);\n-    BOOST_CHECK(CNode::IsBanned(addr));\n+    BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);\n-    BOOST_CHECK(CNode::IsBanned(addr));\n+    BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60*24+1);\n-    BOOST_CHECK(!CNode::IsBanned(addr));\n+    BOOST_CHECK(!connman->IsBanned(addr));\n }\n \n CTransaction RandomOrphan()"
      }
    ]
  },
  {
    "sha": "502dd3a8a0bc0d12744e75f84a22cc12074c5683",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDJkZDNhOGEwYmMwZDEyNzQ0ZTc1Zjg0YTIyY2MxMjA3NGM1Njgz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T21:51:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:12:57Z"
      },
      "message": "net: Add oneshot functions to CConnman",
      "tree": {
        "sha": "cc228980d8a946d02cf3f8203e15e293c43ed7c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc228980d8a946d02cf3f8203e15e293c43ed7c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/502dd3a8a0bc0d12744e75f84a22cc12074c5683",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/502dd3a8a0bc0d12744e75f84a22cc12074c5683",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/502dd3a8a0bc0d12744e75f84a22cc12074c5683",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/502dd3a8a0bc0d12744e75f84a22cc12074c5683/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0f3d3cdad630103d919a4ec802c413b87fa1f1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0f3d3cdad630103d919a4ec802c413b87fa1f1a"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "719b648c04cfdd243a2b028fb503c5f4ba8836a8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/502dd3a8a0bc0d12744e75f84a22cc12074c5683/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/502dd3a8a0bc0d12744e75f84a22cc12074c5683/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=502dd3a8a0bc0d12744e75f84a22cc12074c5683",
        "patch": "@@ -1230,7 +1230,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n \n     BOOST_FOREACH(const std::string& strDest, mapMultiArgs[\"-seednode\"])\n-        AddOneShot(strDest);\n+        connman.AddOneShot(strDest);\n \n #if ENABLE_ZMQ\n     pzmqNotificationInterface = CZMQNotificationInterface::CreateWithArguments(mapArgs);"
      },
      {
        "sha": "045939c2ea19fa53f10f54fef62192571cbaabd0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/502dd3a8a0bc0d12744e75f84a22cc12074c5683/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/502dd3a8a0bc0d12744e75f84a22cc12074c5683/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=502dd3a8a0bc0d12744e75f84a22cc12074c5683",
        "patch": "@@ -91,9 +91,6 @@ std::vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-static std::deque<std::string> vOneShots;\n-CCriticalSection cs_vOneShots;\n-\n std::vector<std::string> vAddedNodes;\n CCriticalSection cs_vAddedNodes;\n \n@@ -107,7 +104,7 @@ boost::condition_variable messageHandlerCondition;\n static CNodeSignals g_signals;\n CNodeSignals& GetNodeSignals() { return g_signals; }\n \n-void AddOneShot(const std::string& strDest)\n+void CConnman::AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n     vOneShots.push_back(strDest);"
      },
      {
        "sha": "81de7f5a98f06962b1dc0e1473cb30b5d6b34faa",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/502dd3a8a0bc0d12744e75f84a22cc12074c5683/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/502dd3a8a0bc0d12744e75f84a22cc12074c5683/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=502dd3a8a0bc0d12744e75f84a22cc12074c5683",
        "patch": "@@ -87,7 +87,6 @@ unsigned int SendBufferSize();\n \n typedef int NodeId;\n \n-void AddOneShot(const std::string& strDest);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n@@ -137,6 +136,7 @@ class CConnman\n     void GetBanned(banmap_t &banmap);\n     void SetBanned(const banmap_t &banmap);\n \n+    void AddOneShot(const std::string& strDest);\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -171,6 +171,8 @@ class CConnman\n     bool setBannedIsDirty;\n     bool fAddressesInitialized;\n     CAddrMan addrman;\n+    std::deque<std::string> vOneShots;\n+    CCriticalSection cs_vOneShots;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);"
      }
    ]
  },
  {
    "sha": "8ae2dac1c65349e4620422a43b7fa9d49af52c11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWUyZGFjMWM2NTM0OWU0NjIwNDIyYTQzYjdmYTlkNDlhZjUyYzEx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T22:12:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:12:58Z"
      },
      "message": "net: move added node functions to CConnman",
      "tree": {
        "sha": "01bce145e22f6b1319fe9b68eb71f1af05962f00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01bce145e22f6b1319fe9b68eb71f1af05962f00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ae2dac1c65349e4620422a43b7fa9d49af52c11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ae2dac1c65349e4620422a43b7fa9d49af52c11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ae2dac1c65349e4620422a43b7fa9d49af52c11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ae2dac1c65349e4620422a43b7fa9d49af52c11/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "502dd3a8a0bc0d12744e75f84a22cc12074c5683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/502dd3a8a0bc0d12744e75f84a22cc12074c5683",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/502dd3a8a0bc0d12744e75f84a22cc12074c5683"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 46,
      "deletions": 28
    },
    "files": [
      {
        "sha": "8ca6df0f9ba0932c1a1b5f357f4a906a62d919b5",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 4,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ae2dac1c65349e4620422a43b7fa9d49af52c11/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ae2dac1c65349e4620422a43b7fa9d49af52c11/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8ae2dac1c65349e4620422a43b7fa9d49af52c11",
        "patch": "@@ -91,9 +91,6 @@ std::vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-std::vector<std::string> vAddedNodes;\n-CCriticalSection cs_vAddedNodes;\n-\n NodeId nLastNodeId = 0;\n CCriticalSection cs_nLastNodeId;\n \n@@ -1718,7 +1715,7 @@ void CConnman::ThreadOpenConnections()\n     }\n }\n \n-std::vector<AddedNodeInfo> GetAddedNodeInfo()\n+std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n {\n     std::vector<AddedNodeInfo> ret;\n \n@@ -2246,6 +2243,30 @@ std::vector<CAddress> CConnman::GetAddresses()\n     return addrman.GetAddr();\n }\n \n+bool CConnman::AddNode(const std::string& strNode)\n+{\n+    LOCK(cs_vAddedNodes);\n+    for(std::vector<std::string>::const_iterator it = vAddedNodes.begin(); it != vAddedNodes.end(); ++it) {\n+        if (strNode == *it)\n+            return false;\n+    }\n+\n+    vAddedNodes.push_back(strNode);\n+    return true;\n+}\n+\n+bool CConnman::RemoveAddedNode(const std::string& strNode)\n+{\n+    LOCK(cs_vAddedNodes);\n+    for(std::vector<std::string>::iterator it = vAddedNodes.begin(); it != vAddedNodes.end(); ++it) {\n+        if (strNode == *it) {\n+            vAddedNodes.erase(it);\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n void RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());"
      },
      {
        "sha": "f343646cba78e08afcccca8ee0014f2200de51b9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ae2dac1c65349e4620422a43b7fa9d49af52c11/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ae2dac1c65349e4620422a43b7fa9d49af52c11/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8ae2dac1c65349e4620422a43b7fa9d49af52c11",
        "patch": "@@ -87,6 +87,14 @@ unsigned int SendBufferSize();\n \n typedef int NodeId;\n \n+struct AddedNodeInfo\n+{\n+    std::string strAddedNode;\n+    CService resolvedAddress;\n+    bool fConnected;\n+    bool fInbound;\n+};\n+\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CSubNet& subNet);\n CNode* FindNode(const std::string& addrName);\n@@ -137,6 +145,11 @@ class CConnman\n     void SetBanned(const banmap_t &banmap);\n \n     void AddOneShot(const std::string& strDest);\n+\n+    bool AddNode(const std::string& node);\n+    bool RemoveAddedNode(const std::string& node);\n+    std::vector<AddedNodeInfo> GetAddedNodeInfo();\n+\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -173,6 +186,8 @@ class CConnman\n     CAddrMan addrman;\n     std::deque<std::string> vOneShots;\n     CCriticalSection cs_vOneShots;\n+    std::vector<std::string> vAddedNodes;\n+    CCriticalSection cs_vAddedNodes;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n@@ -252,9 +267,6 @@ extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n-extern std::vector<std::string> vAddedNodes;\n-extern CCriticalSection cs_vAddedNodes;\n-\n extern NodeId nLastNodeId;\n extern CCriticalSection cs_nLastNodeId;\n \n@@ -807,14 +819,4 @@ void RelayTransaction(const CTransaction& tx);\n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);\n \n-struct AddedNodeInfo\n-{\n-    std::string strAddedNode;\n-    CService resolvedAddress;\n-    bool fConnected;\n-    bool fInbound;\n-};\n-\n-std::vector<AddedNodeInfo> GetAddedNodeInfo();\n-\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "ab475f7125ffb9eb50f005216a9a47176262fffc",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ae2dac1c65349e4620422a43b7fa9d49af52c11/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ae2dac1c65349e4620422a43b7fa9d49af52c11/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=8ae2dac1c65349e4620422a43b7fa9d49af52c11",
        "patch": "@@ -226,23 +226,15 @@ UniValue addnode(const UniValue& params, bool fHelp)\n         return NullUniValue;\n     }\n \n-    LOCK(cs_vAddedNodes);\n-    vector<string>::iterator it = vAddedNodes.begin();\n-    for(; it != vAddedNodes.end(); it++)\n-        if (strNode == *it)\n-            break;\n-\n     if (strCommand == \"add\")\n     {\n-        if (it != vAddedNodes.end())\n+        if(!g_connman->AddNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Node already added\");\n-        vAddedNodes.push_back(strNode);\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if (it == vAddedNodes.end())\n+        if(!g_connman->RemoveAddedNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n-        vAddedNodes.erase(it);\n     }\n \n     return NullUniValue;\n@@ -299,7 +291,10 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getaddednodeinfo\", \"true, \\\"192.168.0.201\\\"\")\n         );\n \n-    std::vector<AddedNodeInfo> vInfo = GetAddedNodeInfo();\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    std::vector<AddedNodeInfo> vInfo = g_connman->GetAddedNodeInfo();\n \n     if (params.size() == 1) {\n         bool found = false;"
      }
    ]
  },
  {
    "sha": "c0569c7fa1e25599b3f1d6a16b15ec23052021da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDU2OWM3ZmExZTI1NTk5YjNmMWQ2YTE2YjE1ZWMyMzA1MjAyMWRh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T22:30:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:12:58Z"
      },
      "message": "net: Add most functions needed for vNodes to CConnman",
      "tree": {
        "sha": "608dc14407c8f28de2d6480910a13883dc47cefe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/608dc14407c8f28de2d6480910a13883dc47cefe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0569c7fa1e25599b3f1d6a16b15ec23052021da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0569c7fa1e25599b3f1d6a16b15ec23052021da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0569c7fa1e25599b3f1d6a16b15ec23052021da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0569c7fa1e25599b3f1d6a16b15ec23052021da/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ae2dac1c65349e4620422a43b7fa9d49af52c11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ae2dac1c65349e4620422a43b7fa9d49af52c11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ae2dac1c65349e4620422a43b7fa9d49af52c11"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 123,
      "deletions": 48
    },
    "files": [
      {
        "sha": "e1cfc565d6051d8f281eea7dc3e716cd52fdee61",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -2267,6 +2267,72 @@ bool CConnman::RemoveAddedNode(const std::string& strNode)\n     return false;\n }\n \n+size_t CConnman::GetNodeCount(NumConnections flags)\n+{\n+    LOCK(cs_vNodes);\n+    if (flags == CConnman::CONNECTIONS_ALL) // Shortcut if we want total\n+        return vNodes.size();\n+\n+    int nNum = 0;\n+    for(std::vector<CNode*>::const_iterator it = vNodes.begin(); it != vNodes.end(); ++it)\n+        if (flags & ((*it)->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n+            nNum++;\n+\n+    return nNum;\n+}\n+\n+void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n+{\n+    vstats.clear();\n+    LOCK(cs_vNodes);\n+    vstats.reserve(vNodes.size());\n+    for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n+        CNode* pnode = *it;\n+        CNodeStats stats;\n+        pnode->copyStats(stats);\n+        vstats.push_back(stats);\n+    }\n+}\n+\n+bool CConnman::DisconnectAddress(const CNetAddr& netAddr)\n+{\n+    if (CNode* pnode = FindNode(netAddr)) {\n+        pnode->fDisconnect = true;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CConnman::DisconnectSubnet(const CSubNet& subNet)\n+{\n+    if (CNode* pnode = FindNode(subNet)) {\n+        pnode->fDisconnect = true;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CConnman::DisconnectNode(const std::string& strNode)\n+{\n+    if (CNode* pnode = FindNode(strNode)) {\n+        pnode->fDisconnect = true;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool CConnman::DisconnectNode(NodeId id)\n+{\n+    LOCK(cs_vNodes);\n+    for(CNode* pnode : vNodes) {\n+        if (id == pnode->id) {\n+            pnode->fDisconnect = true;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n void RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());"
      },
      {
        "sha": "9e2408cd7052b8cc9eb04cd1407baf4073fa394d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -101,9 +101,18 @@ CNode* FindNode(const std::string& addrName);\n CNode* FindNode(const CService& ip);\n CNode* FindNode(const NodeId id); //TODO: Remove this\n \n+class CNodeStats;\n class CConnman\n {\n public:\n+\n+    enum NumConnections {\n+        CONNECTIONS_NONE = 0,\n+        CONNECTIONS_IN = (1U << 0),\n+        CONNECTIONS_OUT = (1U << 1),\n+        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),\n+    };\n+\n     CConnman();\n     ~CConnman();\n     bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError);\n@@ -150,6 +159,13 @@ class CConnman\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n \n+    size_t GetNodeCount(NumConnections num);\n+    void GetNodeStats(std::vector<CNodeStats>& vstats);\n+    bool DisconnectAddress(const CNetAddr& addr);\n+    bool DisconnectNode(const std::string& node);\n+    bool DisconnectNode(NodeId id);\n+    bool DisconnectSubnet(const CSubNet& subnet);\n+\n private:\n     struct ListenSocket {\n         SOCKET socket;"
      },
      {
        "sha": "f72bbfe6bbd09461fd2922a9254ace1173d8ee0a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -50,16 +50,18 @@ ClientModel::~ClientModel()\n \n int ClientModel::getNumConnections(unsigned int flags) const\n {\n-    LOCK(cs_vNodes);\n-    if (flags == CONNECTIONS_ALL) // Shortcut if we want total\n-        return vNodes.size();\n-\n-    int nNum = 0;\n-    BOOST_FOREACH(const CNode* pnode, vNodes)\n-        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n-            nNum++;\n-\n-    return nNum;\n+    CConnman::NumConnections connections = CConnman::CONNECTIONS_NONE;\n+\n+    if(flags == CONNECTIONS_IN)\n+        connections = CConnman::CONNECTIONS_IN;\n+    else if (flags == CONNECTIONS_OUT)\n+        connections = CConnman::CONNECTIONS_OUT;\n+    else if (flags == CONNECTIONS_ALL)\n+        connections = CConnman::CONNECTIONS_ALL;\n+\n+    if(g_connman)\n+         return g_connman->GetNodeCount(connections);\n+    return 0;\n }\n \n int ClientModel::getNumBlocks() const"
      },
      {
        "sha": "a820bd791f70b4f520fe55d8fd3e60342ab1d4a3",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -54,24 +54,21 @@ class PeerTablePriv\n     void refreshPeers()\n     {\n         {\n-            TRY_LOCK(cs_vNodes, lockNodes);\n-            if (!lockNodes)\n-            {\n-                // skip the refresh if we can't immediately get the lock\n-                return;\n-            }\n             cachedNodeStats.clear();\n+            std::vector<CNodeStats> vstats;\n+            if(g_connman)\n+                g_connman->GetNodeStats(vstats);\n #if QT_VERSION >= 0x040700\n-            cachedNodeStats.reserve(vNodes.size());\n+            cachedNodeStats.reserve(vstats.size());\n #endif\n-            Q_FOREACH (CNode* pnode, vNodes)\n+            Q_FOREACH (const CNodeStats& nodestats, vstats)\n             {\n                 CNodeCombinedStats stats;\n                 stats.nodeStateStats.nMisbehavior = 0;\n                 stats.nodeStateStats.nSyncHeight = -1;\n                 stats.nodeStateStats.nCommonHeight = -1;\n                 stats.fNodeStateStatsAvailable = false;\n-                pnode->copyStats(stats.nodeStats);\n+                stats.nodeStats = nodestats;\n                 cachedNodeStats.append(stats);\n             }\n         }"
      },
      {
        "sha": "f35f401d06b44d235f24525eb9f6f74d041983c1",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -876,13 +876,13 @@ void RPCConsole::showBanTableContextMenu(const QPoint& point)\n \n void RPCConsole::disconnectSelectedNode()\n {\n+    if(!g_connman)\n+        return;\n     // Get currently selected peer address\n-    QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address).toString();\n+    NodeId id = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::NetNodeId).toInt();\n     // Find the node, disconnect it and clear the selected node\n-    if (CNode *bannedNode = FindNode(strNode.toStdString())) {\n-        bannedNode->fDisconnect = true;\n+    if(g_connman->DisconnectNode(id))\n         clearSelectedNode();\n-    }\n }\n \n void RPCConsole::banSelectedNode(int bantime)"
      },
      {
        "sha": "7794ac619d212e8897a8822595977682f723e135",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -457,7 +457,10 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    if (vNodes.empty())\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+\n+    if (g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n \n     if (IsInitialBlockDownload())"
      },
      {
        "sha": "f9f1615614cd960dfa21f5787da5722dc1c65eaf",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -89,7 +89,8 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n #endif\n     obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n-    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n+    if(g_connman)\n+        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n     obj.push_back(Pair(\"proxy\",         (proxy.IsValid() ? proxy.proxy.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       Params().TestnetToBeDeprecatedFieldRPC()));"
      },
      {
        "sha": "0d494a2e792ae95508e75acc472c82342ffe8db1",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 23,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0569c7fa1e25599b3f1d6a16b15ec23052021da/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "patch": "@@ -36,9 +36,10 @@ UniValue getconnectioncount(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getconnectioncount\", \"\")\n         );\n \n-    LOCK2(cs_main, cs_vNodes);\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    return (int)vNodes.size();\n+    return (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n UniValue ping(const UniValue& params, bool fHelp)\n@@ -64,19 +65,6 @@ UniValue ping(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n-{\n-    vstats.clear();\n-\n-    LOCK(cs_vNodes);\n-    vstats.reserve(vNodes.size());\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n-        CNodeStats stats;\n-        pnode->copyStats(stats);\n-        vstats.push_back(stats);\n-    }\n-}\n-\n UniValue getpeerinfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)\n@@ -127,10 +115,11 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"getpeerinfo\", \"\")\n         );\n \n-    LOCK(cs_main);\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     vector<CNodeStats> vstats;\n-    CopyNodeStats(vstats);\n+    g_connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n@@ -253,11 +242,12 @@ UniValue disconnectnode(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n         );\n \n-    CNode* pNode = FindNode(params[0].get_str());\n-    if (pNode == NULL)\n-        throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    pNode->fDisconnect = true;\n+    bool ret = g_connman->DisconnectNode(params[0].get_str());\n+    if (!ret)\n+        throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n \n     return NullUniValue;\n }\n@@ -435,15 +425,15 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-\n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\",    strSubVersion));\n     obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n-    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n+    if(g_connman)\n+        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n     UniValue localAddresses(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "53347f0cb99e514815e44a56439a4a10012238f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzM0N2YwY2I5OWU1MTQ4MTVlNDRhNTY0MzlhNGExMDAxMjIzOGY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-16T23:13:12Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: create generic functor accessors and move vNodes to CConnman",
      "tree": {
        "sha": "fc5baefe46ef918143904a299fd8aa5083097eda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc5baefe46ef918143904a299fd8aa5083097eda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53347f0cb99e514815e44a56439a4a10012238f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53347f0cb99e514815e44a56439a4a10012238f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53347f0cb99e514815e44a56439a4a10012238f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53347f0cb99e514815e44a56439a4a10012238f8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0569c7fa1e25599b3f1d6a16b15ec23052021da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0569c7fa1e25599b3f1d6a16b15ec23052021da"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 164,
      "deletions": 73
    },
    "files": [
      {
        "sha": "af598d48739a2bac764e74b9a5ccfca29423c490",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 32,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53347f0cb99e514815e44a56439a4a10012238f8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53347f0cb99e514815e44a56439a4a10012238f8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=53347f0cb99e514815e44a56439a4a10012238f8",
        "patch": "@@ -470,7 +470,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n-void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pfrom) {\n+void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pfrom, CConnman& connman) {\n     if (nLocalServices & NODE_WITNESS) {\n         // Don't ever request compact blocks when segwit is enabled.\n         return;\n@@ -484,11 +484,12 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pf\n         if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n             // As per BIP152, we only get 3 of our peers to announce\n             // blocks using compact encodings.\n-            CNode* pnodeStop = FindNode(lNodesAnnouncingHeaderAndIDs.front());\n-            if (pnodeStop) {\n+            bool found = connman.ForNode(lNodesAnnouncingHeaderAndIDs.front(), [fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n                 pnodeStop->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n+                return true;\n+            });\n+            if(found)\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n-            }\n         }\n         fAnnounceUsingCMPCTBLOCK = true;\n         pfrom->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n@@ -3089,15 +3090,15 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 int nBlockEstimate = 0;\n                 if (fCheckpointsEnabled)\n                     nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n-                {\n-                    LOCK(cs_vNodes);\n-                    BOOST_FOREACH(CNode* pnode, vNodes) {\n+                if(connman) {\n+                    connman->ForEachNode([nNewHeight, nBlockEstimate, &vHashes](CNode* pnode) {\n                         if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n                             BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n                                 pnode->PushBlockHash(hash);\n                             }\n                         }\n-                    }\n+                        return true;\n+                    });\n                 }\n                 // Notify external listeners about the new tip.\n                 if (!vHashes.empty()) {\n@@ -4726,6 +4727,45 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     return true;\n }\n \n+static void RelayTransaction(const CTransaction& tx, CConnman& connman)\n+{\n+    CInv inv(MSG_TX, tx.GetHash());\n+    connman.ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+        return true;\n+    });\n+}\n+\n+static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connman)\n+{\n+    int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n+\n+    // Relay to a limited number of other nodes\n+    // Use deterministic randomness to send to the same nodes for 24 hours\n+    // at a time so the addrKnowns of the chosen nodes prevent repeats\n+    static const uint64_t salt0 = GetRand(std::numeric_limits<uint64_t>::max());\n+    static const uint64_t salt1 = GetRand(std::numeric_limits<uint64_t>::max());\n+    uint64_t hashAddr = addr.GetHash();\n+    std::multimap<uint64_t, CNode*> mapMix;\n+    const CSipHasher hasher = CSipHasher(salt0, salt1).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+\n+    auto sortfunc = [&mapMix, &hasher](CNode* pnode) {\n+        if (pnode->nVersion >= CADDR_TIME_VERSION) {\n+            uint64_t hashKey = CSipHasher(hasher).Write(pnode->id).Finalize();\n+            mapMix.emplace(hashKey, pnode);\n+        }\n+        return true;\n+    };\n+\n+    auto pushfunc = [&addr, &mapMix, &nRelayNodes] {\n+        for (auto mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n+            mi->second->PushAddress(addr);\n+    };\n+\n+    connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n+}\n+\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n@@ -5135,26 +5175,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n             {\n                 // Relay to a limited number of other nodes\n-                {\n-                    LOCK(cs_vNodes);\n-                    // Use deterministic randomness to send to the same nodes for 24 hours\n-                    // at a time so the addrKnowns of the chosen nodes prevent repeats\n-                    static const uint64_t salt0 = GetRand(std::numeric_limits<uint64_t>::max());\n-                    static const uint64_t salt1 = GetRand(std::numeric_limits<uint64_t>::max());\n-                    uint64_t hashAddr = addr.GetHash();\n-                    multimap<uint64_t, CNode*> mapMix;\n-                    const CSipHasher hasher = CSipHasher(salt0, salt1).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n-                    BOOST_FOREACH(CNode* pnode, vNodes)\n-                    {\n-                        if (pnode->nVersion < CADDR_TIME_VERSION)\n-                            continue;\n-                        uint64_t hashKey = CSipHasher(hasher).Write(pnode->id).Finalize();\n-                        mapMix.insert(make_pair(hashKey, pnode));\n-                    }\n-                    int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n-                    for (multimap<uint64_t, CNode*>::iterator mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n-                        ((*mi).second)->PushAddress(addr);\n-                }\n+                RelayAddress(addr, fReachable, connman);\n             }\n             // Do not store addresses outside our network\n             if (fReachable)\n@@ -5448,7 +5469,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs)) {\n             mempool.check(pcoinsTip);\n-            RelayTransaction(tx);\n+            RelayTransaction(tx, connman);\n             for (unsigned int i = 0; i < tx.vout.size(); i++) {\n                 vWorkQueue.emplace_back(inv.hash, i);\n             }\n@@ -5485,7 +5506,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         continue;\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2)) {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                        RelayTransaction(orphanTx);\n+                        RelayTransaction(orphanTx, connman);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                             vWorkQueue.emplace_back(orphanHash, i);\n                         }\n@@ -5560,7 +5581,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 int nDoS = 0;\n                 if (!state.IsInvalid(nDoS) || nDoS == 0) {\n                     LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->id);\n-                    RelayTransaction(tx);\n+                    RelayTransaction(tx, connman);\n                 } else {\n                     LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->id, FormatStateMessage(state));\n                 }\n@@ -5886,7 +5907,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(nLocalServices & NODE_WITNESS)) {\n                         // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n                         // with this block! Let's get them to announce using compact blocks in the future.\n-                        MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom);\n+                        MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n                     }"
      },
      {
        "sha": "f20f63e04d2738ed7081a5700ffe9825006b87f6",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 19,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53347f0cb99e514815e44a56439a4a10012238f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53347f0cb99e514815e44a56439a4a10012238f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=53347f0cb99e514815e44a56439a4a10012238f8",
        "patch": "@@ -87,8 +87,6 @@ uint64_t nLocalHostNonce = 0;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n std::string strSubVersion;\n \n-std::vector<CNode*> vNodes;\n-CCriticalSection cs_vNodes;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n NodeId nLastNodeId = 0;\n@@ -315,7 +313,7 @@ uint64_t CNode::nMaxOutboundTotalBytesSentInCycle = 0;\n uint64_t CNode::nMaxOutboundTimeframe = 60*60*24; //1 day\n uint64_t CNode::nMaxOutboundCycleStartTime = 0;\n \n-CNode* FindNode(const CNetAddr& ip)\n+CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -324,7 +322,7 @@ CNode* FindNode(const CNetAddr& ip)\n     return NULL;\n }\n \n-CNode* FindNode(const CSubNet& subNet)\n+CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -333,7 +331,7 @@ CNode* FindNode(const CSubNet& subNet)\n     return NULL;\n }\n \n-CNode* FindNode(const std::string& addrName)\n+CNode* CConnman::FindNode(const std::string& addrName)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -342,7 +340,7 @@ CNode* FindNode(const std::string& addrName)\n     return NULL;\n }\n \n-CNode* FindNode(const CService& addr)\n+CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n@@ -351,16 +349,6 @@ CNode* FindNode(const CService& addr)\n     return NULL;\n }\n \n-//TODO: This is used in only one place in main, and should be removed\n-CNode* FindNode(const NodeId nodeid)\n-{\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n-        if (pnode->GetId() == nodeid)\n-            return (pnode);\n-    return NULL;\n-}\n-\n CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n@@ -899,7 +887,8 @@ static bool CompareNodeTXTime(const NodeEvictionCandidate &a, const NodeEviction\n  *   to forge.  In order to partition a node the attacker must be\n  *   simultaneously better at all of them than honest peers.\n  */\n-static bool AttemptToEvictConnection() {\n+bool CConnman::AttemptToEvictConnection()\n+{\n     std::vector<NodeEvictionCandidate> vEvictionCandidates;\n     {\n         LOCK(cs_vNodes);\n@@ -2320,7 +2309,6 @@ bool CConnman::DisconnectNode(const std::string& strNode)\n     }\n     return false;\n }\n-\n bool CConnman::DisconnectNode(NodeId id)\n {\n     LOCK(cs_vNodes);\n@@ -2333,7 +2321,7 @@ bool CConnman::DisconnectNode(NodeId id)\n     return false;\n }\n \n-void RelayTransaction(const CTransaction& tx)\n+void CConnman::RelayTransaction(const CTransaction& tx)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n     LOCK(cs_vNodes);\n@@ -2671,6 +2659,63 @@ void CNode::EndMessage(const char* pszCommand) UNLOCK_FUNCTION(cs_vSend)\n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n \n+bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n+{\n+    CNode* found = nullptr;\n+    LOCK(cs_vNodes);\n+    for (auto&& pnode : vNodes) {\n+        if(pnode->id == id) {\n+            found = pnode;\n+            break;\n+        }\n+    }\n+    return found != nullptr && func(found);\n+}\n+\n+bool CConnman::ForEachNode(std::function<bool(CNode* pnode)> func)\n+{\n+    LOCK(cs_vNodes);\n+    for (auto&& node : vNodes)\n+        if(!func(node))\n+            return false;\n+    return true;\n+}\n+\n+bool CConnman::ForEachNode(std::function<bool(const CNode* pnode)> func) const\n+{\n+    LOCK(cs_vNodes);\n+    for (const auto& node : vNodes)\n+        if(!func(node))\n+            return false;\n+    return true;\n+}\n+\n+bool CConnman::ForEachNodeThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post)\n+{\n+    bool ret = true;\n+    LOCK(cs_vNodes);\n+    for (auto&& node : vNodes)\n+        if(!pre(node)) {\n+            ret = false;\n+            break;\n+        }\n+    post();\n+    return ret;\n+}\n+\n+bool CConnman::ForEachNodeThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const\n+{\n+    bool ret = true;\n+    LOCK(cs_vNodes);\n+    for (const auto& node : vNodes)\n+        if(!pre(node)) {\n+            ret = false;\n+            break;\n+        }\n+    post();\n+    return ret;\n+}\n+\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }"
      },
      {
        "sha": "5b1e80bfbe3a89fccf02b4df2aad46bc9b859fd9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53347f0cb99e514815e44a56439a4a10012238f8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53347f0cb99e514815e44a56439a4a10012238f8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=53347f0cb99e514815e44a56439a4a10012238f8",
        "patch": "@@ -95,12 +95,7 @@ struct AddedNodeInfo\n     bool fInbound;\n };\n \n-CNode* FindNode(const CNetAddr& ip);\n-CNode* FindNode(const CSubNet& subNet);\n-CNode* FindNode(const std::string& addrName);\n-CNode* FindNode(const CService& ip);\n-CNode* FindNode(const NodeId id); //TODO: Remove this\n-\n+class CTransaction;\n class CNodeStats;\n class CConnman\n {\n@@ -120,6 +115,14 @@ class CConnman\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n \n+    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n+    bool ForEachNode(std::function<bool(CNode* pnode)> func);\n+    bool ForEachNode(std::function<bool(const CNode* pnode)> func) const;\n+    bool ForEachNodeThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post);\n+    bool ForEachNodeThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const;\n+\n+    void RelayTransaction(const CTransaction& tx);\n+\n     // Addrman functions\n     size_t GetAddressCount() const;\n     void SetServices(const CService &addr, ServiceFlags nServices);\n@@ -182,6 +185,12 @@ class CConnman\n     void ThreadSocketHandler();\n     void ThreadDNSAddressSeed();\n \n+    CNode* FindNode(const CNetAddr& ip);\n+    CNode* FindNode(const CSubNet& subNet);\n+    CNode* FindNode(const std::string& addrName);\n+    CNode* FindNode(const CService& addr);\n+\n+    bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n     void DeleteNode(CNode* pnode);\n     //!check is the banlist has unwritten changes\n@@ -204,6 +213,8 @@ class CConnman\n     CCriticalSection cs_vOneShots;\n     std::vector<std::string> vAddedNodes;\n     CCriticalSection cs_vAddedNodes;\n+    std::vector<CNode*> vNodes;\n+    mutable CCriticalSection cs_vNodes;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n@@ -279,8 +290,6 @@ extern uint64_t nLocalHostNonce;\n /** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n \n-extern std::vector<CNode*> vNodes;\n-extern CCriticalSection cs_vNodes;\n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n extern NodeId nLastNodeId;\n@@ -828,8 +837,6 @@ class CNode\n \n \n \n-class CTransaction;\n-void RelayTransaction(const CTransaction& tx);\n \n \n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */"
      },
      {
        "sha": "ffd377b4892fd5ff5b0d63e703cfc4077a744eb6",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53347f0cb99e514815e44a56439a4a10012238f8/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53347f0cb99e514815e44a56439a4a10012238f8/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=53347f0cb99e514815e44a56439a4a10012238f8",
        "patch": "@@ -472,14 +472,17 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     // atomically with the time change to prevent peers from being\n     // disconnected because we think we haven't communicated with them\n     // in a long time.\n-    LOCK2(cs_main, cs_vNodes);\n+    LOCK(cs_main);\n \n     RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n     SetMockTime(params[0].get_int64());\n \n     uint64_t t = GetTime();\n-    BOOST_FOREACH(CNode* pnode, vNodes) {\n-        pnode->nLastSend = pnode->nLastRecv = t;\n+    if(g_connman) {\n+        g_connman->ForEachNode([t](CNode* pnode) {\n+            pnode->nLastSend = pnode->nLastRecv = t;\n+            return true;\n+        });\n     }\n \n     return NullUniValue;"
      },
      {
        "sha": "509b57aa726ed1c3ce3d1df91b9477e34537b4ac",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53347f0cb99e514815e44a56439a4a10012238f8/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53347f0cb99e514815e44a56439a4a10012238f8/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=53347f0cb99e514815e44a56439a4a10012238f8",
        "patch": "@@ -55,13 +55,14 @@ UniValue ping(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"ping\", \"\")\n         );\n \n-    // Request that each node send a ping during next message processing pass\n-    LOCK2(cs_main, cs_vNodes);\n-\n-    BOOST_FOREACH(CNode* pNode, vNodes) {\n-        pNode->fPingQueued = true;\n-    }\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n+    // Request that each node send a ping during next message processing pass\n+    g_connman->ForEachNode([](CNode* pnode) {\n+        pnode->fPingQueued = true;\n+        return true;\n+    });\n     return NullUniValue;\n }\n "
      },
      {
        "sha": "3daf1681f314af88a167c2775a14bac2f1244d96",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53347f0cb99e514815e44a56439a4a10012238f8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53347f0cb99e514815e44a56439a4a10012238f8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=53347f0cb99e514815e44a56439a4a10012238f8",
        "patch": "@@ -891,8 +891,15 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n-    RelayTransaction(tx);\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n+    CInv inv(MSG_TX, hashTx);\n+    g_connman->ForEachNode([&inv](CNode* pnode)\n+    {\n+        pnode->PushInventory(inv);\n+        return true;\n+    });\n     return hashTx.GetHex();\n }\n "
      },
      {
        "sha": "fd8b056bfca0334d4329dcb9004f2c4575926236",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53347f0cb99e514815e44a56439a4a10012238f8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53347f0cb99e514815e44a56439a4a10012238f8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=53347f0cb99e514815e44a56439a4a10012238f8",
        "patch": "@@ -1460,8 +1460,15 @@ bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n     {\n         if (GetDepthInMainChain() == 0 && !isAbandoned() && InMempool()) {\n             LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n-            RelayTransaction((CTransaction)*this);\n-            return true;\n+            if (connman) {\n+                CInv inv(MSG_TX, GetHash());\n+                connman->ForEachNode([&inv](CNode* pnode)\n+                {\n+                    pnode->PushInventory(inv);\n+                    return true;\n+                });\n+                return true;\n+            }\n         }\n     }\n     return false;"
      }
    ]
  },
  {
    "sha": "6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzE5ZDkyMzYxZmU0YWZiMjZkZmE1ZDQ4YTA3NDhiODRiY2E2ZjEy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-17T22:34:32Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move whitelist functions into CConnman",
      "tree": {
        "sha": "30bcc560bc99a3f7ad0e258c5945810d5a8f419c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30bcc560bc99a3f7ad0e258c5945810d5a8f419c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c19d92361fe4afb26dfa5d48a0748b84bca6f12/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53347f0cb99e514815e44a56439a4a10012238f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53347f0cb99e514815e44a56439a4a10012238f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53347f0cb99e514815e44a56439a4a10012238f8"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 12,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f618e5ccc566f66216df79ed22ba497ef6fd3477",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c19d92361fe4afb26dfa5d48a0748b84bca6f12/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c19d92361fe4afb26dfa5d48a0748b84bca6f12/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
        "patch": "@@ -1146,7 +1146,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             LookupSubNet(net.c_str(), subnet);\n             if (!subnet.IsValid())\n                 return InitError(strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net));\n-            CNode::AddWhitelistedRange(subnet);\n+            connman.AddWhitelistedRange(subnet);\n         }\n     }\n "
      },
      {
        "sha": "eb312ef1e4d86688c416b683f18d45a13bc9c9e1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c19d92361fe4afb26dfa5d48a0748b84bca6f12/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c19d92361fe4afb26dfa5d48a0748b84bca6f12/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
        "patch": "@@ -625,10 +625,7 @@ void CConnman::SetBannedSetDirty(bool dirty)\n }\n \n \n-std::vector<CSubNet> CNode::vWhitelistedRange;\n-CCriticalSection CNode::cs_vWhitelistedRange;\n-\n-bool CNode::IsWhitelistedRange(const CNetAddr &addr) {\n+bool CConnman::IsWhitelistedRange(const CNetAddr &addr) {\n     LOCK(cs_vWhitelistedRange);\n     BOOST_FOREACH(const CSubNet& subnet, vWhitelistedRange) {\n         if (subnet.Match(addr))\n@@ -637,7 +634,7 @@ bool CNode::IsWhitelistedRange(const CNetAddr &addr) {\n     return false;\n }\n \n-void CNode::AddWhitelistedRange(const CSubNet &subnet) {\n+void CConnman::AddWhitelistedRange(const CSubNet &subnet) {\n     LOCK(cs_vWhitelistedRange);\n     vWhitelistedRange.push_back(subnet);\n }\n@@ -992,7 +989,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))\n             LogPrintf(\"Warning: Unknown socket family\\n\");\n \n-    bool whitelisted = hListenSocket.whitelisted || CNode::IsWhitelistedRange(addr);\n+    bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n     {\n         LOCK(cs_vNodes);\n         BOOST_FOREACH(CNode* pnode, vNodes)"
      },
      {
        "sha": "8d9925265dba69c7e05b1b90b34df230bae12e23",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c19d92361fe4afb26dfa5d48a0748b84bca6f12/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c19d92361fe4afb26dfa5d48a0748b84bca6f12/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
        "patch": "@@ -169,6 +169,7 @@ class CConnman\n     bool DisconnectNode(NodeId id);\n     bool DisconnectSubnet(const CSubNet& subnet);\n \n+    void AddWhitelistedRange(const CSubNet &subnet);\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -192,6 +193,8 @@ class CConnman\n \n     bool AttemptToEvictConnection();\n     CNode* ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure);\n+    bool IsWhitelistedRange(const CNetAddr &addr);\n+\n     void DeleteNode(CNode* pnode);\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n@@ -203,6 +206,11 @@ class CConnman\n     void DumpData();\n     void DumpBanlist();\n \n+    // Whitelisted ranges. Any node connecting from these is automatically\n+    // whitelisted (as well as those connecting to whitelisted binds).\n+    std::vector<CSubNet> vWhitelistedRange;\n+    CCriticalSection cs_vWhitelistedRange;\n+\n     std::vector<ListenSocket> vhListenSocket;\n     banmap_t setBanned;\n     CCriticalSection cs_setBanned;\n@@ -432,11 +440,6 @@ class CNode\n     const uint64_t nKeyedNetGroup;\n protected:\n \n-    // Whitelisted ranges. Any node connecting from these is automatically\n-    // whitelisted (as well as those connecting to whitelisted binds).\n-    static std::vector<CSubNet> vWhitelistedRange;\n-    static CCriticalSection cs_vWhitelistedRange;\n-\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd;\n \n@@ -803,9 +806,6 @@ class CNode\n \n     void copyStats(CNodeStats &stats);\n \n-    static bool IsWhitelistedRange(const CNetAddr &ip);\n-    static void AddWhitelistedRange(const CSubNet &subnet);\n-\n     // Network stats\n     static void RecordBytesRecv(uint64_t bytes);\n     static void RecordBytesSent(uint64_t bytes);"
      }
    ]
  },
  {
    "sha": "551e0887db9034b1e6490a267ba864b1d26ff469",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTFlMDg4N2RiOTAzNGIxZTY0OTBhMjY3YmE4NjRiMWQyNmZmNDY5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-18T00:20:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move nLastNodeId to CConnman",
      "tree": {
        "sha": "c2e305d10dd06a3f33242e3b72c61d25b48e0dcc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2e305d10dd06a3f33242e3b72c61d25b48e0dcc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/551e0887db9034b1e6490a267ba864b1d26ff469",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/551e0887db9034b1e6490a267ba864b1d26ff469",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/551e0887db9034b1e6490a267ba864b1d26ff469",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/551e0887db9034b1e6490a267ba864b1d26ff469/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c19d92361fe4afb26dfa5d48a0748b84bca6f12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c19d92361fe4afb26dfa5d48a0748b84bca6f12"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 25,
      "deletions": 23
    },
    "files": [
      {
        "sha": "8bc8ecc436fd2068be3cd224e19bd5284079e71a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551e0887db9034b1e6490a267ba864b1d26ff469/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551e0887db9034b1e6490a267ba864b1d26ff469/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=551e0887db9034b1e6490a267ba864b1d26ff469",
        "patch": "@@ -89,9 +89,6 @@ std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-NodeId nLastNodeId = 0;\n-CCriticalSection cs_nLastNodeId;\n-\n static CSemaphore *semOutbound = NULL;\n boost::condition_variable messageHandlerCondition;\n \n@@ -404,7 +401,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n+        CNode* pnode = new CNode(GetNewNodeId(), hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n         GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n@@ -1038,7 +1035,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(hSocket, addr, \"\", true);\n+    CNode* pnode = new CNode(GetNewNodeId(), hSocket, addr, \"\", true);\n     GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n@@ -2030,6 +2027,7 @@ CConnman::CConnman()\n {\n     setBannedIsDirty = false;\n     fAddressesInitialized = false;\n+    nLastNodeId = 0;\n }\n \n bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n@@ -2041,9 +2039,13 @@ bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler&\n     return ret;\n }\n \n-bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n+NodeId CConnman::GetNewNodeId()\n {\n+    return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n+}\n \n+bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n+{\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2089,7 +2091,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n+        pnodeLocalHost = new CNode(GetNewNodeId(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n         GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n@@ -2478,7 +2480,7 @@ void CNode::Fuzz(int nChance)\n unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n \n-CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n     nKeyedNetGroup(CalculateKeyedNetGroup(addrIn)),\n@@ -2531,16 +2533,12 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     minFeeFilter = 0;\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n+    id = idIn;\n \n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n \n-    {\n-        LOCK(cs_nLastNodeId);\n-        id = nLastNodeId++;\n-    }\n-\n     if (fLogIPs)\n         LogPrint(\"net\", \"Added connection to %s peer=%d\\n\", addrName, id);\n     else"
      },
      {
        "sha": "36043b0b8cb008ba6ba9b0c3be763b97fb5671c5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551e0887db9034b1e6490a267ba864b1d26ff469/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551e0887db9034b1e6490a267ba864b1d26ff469/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=551e0887db9034b1e6490a267ba864b1d26ff469",
        "patch": "@@ -196,6 +196,9 @@ class CConnman\n     bool IsWhitelistedRange(const CNetAddr &addr);\n \n     void DeleteNode(CNode* pnode);\n+\n+    NodeId GetNewNodeId();\n+\n     //!check is the banlist has unwritten changes\n     bool BannedSetIsDirty();\n     //!set the \"dirty\" flag for the banlist\n@@ -223,6 +226,7 @@ class CConnman\n     CCriticalSection cs_vAddedNodes;\n     std::vector<CNode*> vNodes;\n     mutable CCriticalSection cs_vNodes;\n+    std::atomic<NodeId> nLastNodeId;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n@@ -300,9 +304,6 @@ extern int nMaxConnections;\n \n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n-extern NodeId nLastNodeId;\n-extern CCriticalSection cs_nLastNodeId;\n-\n /** Subversion as sent to the P2P network in `version` messages */\n extern std::string strSubVersion;\n \n@@ -501,7 +502,7 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:"
      },
      {
        "sha": "652a8e2ceadf72d8de07b8c0bbfc6b98bc39db03",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551e0887db9034b1e6490a267ba864b1d26ff469/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551e0887db9034b1e6490a267ba864b1d26ff469/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=551e0887db9034b1e6490a267ba864b1d26ff469",
        "patch": "@@ -40,13 +40,15 @@ CService ip(uint32_t i)\n     return CService(CNetAddr(s), Params().GetDefaultPort());\n }\n \n+static NodeId id = 0;\n+\n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n@@ -55,7 +57,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n+    CNode dummyNode2(id++, INVALID_SOCKET, addr2, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n@@ -72,7 +74,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n@@ -94,7 +96,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(INVALID_SOCKET, addr, \"\", true);\n+    CNode dummyNode(id++, INVALID_SOCKET, addr, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n "
      },
      {
        "sha": "00fb757167717937fd433829a88c5ee3b809e8c2",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/551e0887db9034b1e6490a267ba864b1d26ff469/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/551e0887db9034b1e6490a267ba864b1d26ff469/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=551e0887db9034b1e6490a267ba864b1d26ff469",
        "patch": "@@ -153,6 +153,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n BOOST_AUTO_TEST_CASE(cnode_simple_test)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n+    NodeId id = 0;\n \n     in_addr ipv4Addr;\n     ipv4Addr.s_addr = 0xa0b0c001;\n@@ -162,12 +163,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode1 = new CNode(id++, hSocket, addr, pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode2 = new CNode(id++, hSocket, addr, pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      }
    ]
  },
  {
    "sha": "960cf2e4058a9c195bf64e1aecb46024f9ef022a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjBjZjJlNDA1OGE5YzE5NWJmNjRlMWFlY2I0NjAyNGY5ZWYwMjJh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-18T00:21:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move nLocalHostNonce to CConnman\n\nThis behavior seems to have been quite racy and broken.\n\nMove nLocalHostNonce into CNode, and check received nonces against all\nnon-fully-connected nodes. If there's a match, assume we've connected\nto ourself.",
      "tree": {
        "sha": "4f1400221f79419d8942fe48961c4ef24886c0e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f1400221f79419d8942fe48961c4ef24886c0e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/960cf2e4058a9c195bf64e1aecb46024f9ef022a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/960cf2e4058a9c195bf64e1aecb46024f9ef022a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/960cf2e4058a9c195bf64e1aecb46024f9ef022a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/960cf2e4058a9c195bf64e1aecb46024f9ef022a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "551e0887db9034b1e6490a267ba864b1d26ff469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/551e0887db9034b1e6490a267ba864b1d26ff469",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/551e0887db9034b1e6490a267ba864b1d26ff469"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 19,
      "deletions": 4
    },
    "files": [
      {
        "sha": "43ccb6374c35ed7486851f21268af093db4b63f5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/960cf2e4058a9c195bf64e1aecb46024f9ef022a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/960cf2e4058a9c195bf64e1aecb46024f9ef022a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=960cf2e4058a9c195bf64e1aecb46024f9ef022a",
        "patch": "@@ -5025,7 +5025,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n \n         // Disconnect if we connected to ourself\n-        if (nNonce == nLocalHostNonce && nNonce > 1)\n+        if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n         {\n             LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n             pfrom->fDisconnect = true;"
      },
      {
        "sha": "71b4b01688201c4d81728c5c172edc025855d70c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/960cf2e4058a9c195bf64e1aecb46024f9ef022a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/960cf2e4058a9c195bf64e1aecb46024f9ef022a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=960cf2e4058a9c195bf64e1aecb46024f9ef022a",
        "patch": "@@ -83,7 +83,6 @@ CCriticalSection cs_mapLocalHost;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n-uint64_t nLocalHostNonce = 0;\n int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n std::string strSubVersion;\n \n@@ -346,6 +345,16 @@ CNode* CConnman::FindNode(const CService& addr)\n     return NULL;\n }\n \n+bool CConnman::CheckIncomingNonce(uint64_t nonce)\n+{\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pnode, vNodes) {\n+        if (!pnode->fSuccessfullyConnected && !pnode->fInbound && pnode->GetLocalNonce() == nonce)\n+            return false;\n+    }\n+    return true;\n+}\n+\n CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCountFailure)\n {\n     if (pszDest == NULL) {\n@@ -465,7 +474,6 @@ void CNode::PushVersion()\n     int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(), addr.nServices));\n     CAddress addrMe = GetLocalAddress(&addr);\n-    GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n     if (fLogIPs)\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n     else\n@@ -2535,6 +2543,8 @@ CNode::CNode(NodeId idIn, SOCKET hSocketIn, const CAddress& addrIn, const std::s\n     nextSendTimeFeeFilter = 0;\n     id = idIn;\n \n+    GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n+\n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;"
      },
      {
        "sha": "32668045c5ed7404303e8f1b54f1a75855c00d3b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/960cf2e4058a9c195bf64e1aecb46024f9ef022a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/960cf2e4058a9c195bf64e1aecb46024f9ef022a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=960cf2e4058a9c195bf64e1aecb46024f9ef022a",
        "patch": "@@ -114,6 +114,7 @@ class CConnman\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n+    bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n     bool ForEachNode(std::function<bool(CNode* pnode)> func);\n@@ -297,7 +298,6 @@ extern bool fListen;\n extern ServiceFlags nLocalServices;\n extern ServiceFlags nRelevantServices;\n extern bool fRelayTxes;\n-extern uint64_t nLocalHostNonce;\n \n /** Maximum number of connections to simultaneously allow (aka connection slots) */\n extern int nMaxConnections;\n@@ -523,12 +523,17 @@ class CNode\n \n     static uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n \n+    uint64_t nLocalHostNonce;\n public:\n \n     NodeId GetId() const {\n       return id;\n     }\n \n+    uint64_t GetLocalNonce() const {\n+      return nLocalHostNonce;\n+    }\n+\n     int GetRefCount()\n     {\n         assert(nRefCount >= 0);"
      }
    ]
  },
  {
    "sha": "ee44fa95761724a83a76dd862a36bd9af0fc021f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTQ0ZmE5NTc2MTcyNGE4M2E3NmRkODYyYTM2YmQ5YWYwZmMwMjFm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-19T01:33:54Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move messageHandlerCondition to CConnman",
      "tree": {
        "sha": "ea026cedd0635c5d424041536c83f84a3b12ec8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea026cedd0635c5d424041536c83f84a3b12ec8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee44fa95761724a83a76dd862a36bd9af0fc021f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee44fa95761724a83a76dd862a36bd9af0fc021f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee44fa95761724a83a76dd862a36bd9af0fc021f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee44fa95761724a83a76dd862a36bd9af0fc021f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "960cf2e4058a9c195bf64e1aecb46024f9ef022a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/960cf2e4058a9c195bf64e1aecb46024f9ef022a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/960cf2e4058a9c195bf64e1aecb46024f9ef022a"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 9,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a62ee2291c2f6aee757124499542ee753f453abb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee44fa95761724a83a76dd862a36bd9af0fc021f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee44fa95761724a83a76dd862a36bd9af0fc021f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ee44fa95761724a83a76dd862a36bd9af0fc021f",
        "patch": "@@ -89,7 +89,6 @@ std::string strSubVersion;\n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n static CSemaphore *semOutbound = NULL;\n-boost::condition_variable messageHandlerCondition;\n \n // Signals for message handling\n static CNodeSignals g_signals;\n@@ -688,8 +687,9 @@ void CNode::copyStats(CNodeStats &stats)\n #undef X\n \n // requires LOCK(cs_vRecvMsg)\n-bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n+bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n+    complete = false;\n     while (nBytes > 0) {\n \n         // get current incomplete message, or create a new one\n@@ -728,7 +728,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes)\n             i->second += msg.hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n             msg.nTime = GetTimeMicros();\n-            messageHandlerCondition.notify_one();\n+            complete = true;\n         }\n     }\n \n@@ -1247,8 +1247,11 @@ void CConnman::ThreadSocketHandler()\n                         int nBytes = recv(pnode->hSocket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n                         if (nBytes > 0)\n                         {\n-                            if (!pnode->ReceiveMsgBytes(pchBuf, nBytes))\n+                            bool notify = false;\n+                            if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n                                 pnode->CloseSocketDisconnect();\n+                            if(notify)\n+                                messageHandlerCondition.notify_one();\n                             pnode->nLastRecv = GetTime();\n                             pnode->nRecvBytes += nBytes;\n                             pnode->RecordBytesRecv(nBytes);"
      },
      {
        "sha": "0e83ff4a0c99b73f1c377e80e0481d91c2256384",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee44fa95761724a83a76dd862a36bd9af0fc021f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee44fa95761724a83a76dd862a36bd9af0fc021f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ee44fa95761724a83a76dd862a36bd9af0fc021f",
        "patch": "@@ -228,6 +228,7 @@ class CConnman\n     std::vector<CNode*> vNodes;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n+    boost::condition_variable messageHandlerCondition;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n@@ -550,7 +551,7 @@ class CNode\n     }\n \n     // requires LOCK(cs_vRecvMsg)\n-    bool ReceiveMsgBytes(const char *pch, unsigned int nBytes);\n+    bool ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete);\n \n     // requires LOCK(cs_vRecvMsg)\n     void SetRecvVersion(int nVersionIn)"
      }
    ]
  },
  {
    "sha": "adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGY1ZDRjMmU0ZTdhMjk3OWE2Y2E2ZGU4MDYxNTFmZTA0YzIzMTYy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-21T10:04:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: SocketSendData returns written size",
      "tree": {
        "sha": "00608baf1c5e60f0858685ba54421def4cb91341",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00608baf1c5e60f0858685ba54421def4cb91341"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adf5d4c2e4e7a2979a6ca6de806151fe04c23162/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ee44fa95761724a83a76dd862a36bd9af0fc021f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee44fa95761724a83a76dd862a36bd9af0fc021f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee44fa95761724a83a76dd862a36bd9af0fc021f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "aded8d05d3fb53e5c650f79ae672734dc4351741",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adf5d4c2e4e7a2979a6ca6de806151fe04c23162/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adf5d4c2e4e7a2979a6ca6de806151fe04c23162/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
        "patch": "@@ -791,9 +791,10 @@ int CNetMessage::readData(const char *pch, unsigned int nBytes)\n \n \n // requires LOCK(cs_vSend)\n-void SocketSendData(CNode *pnode)\n+size_t SocketSendData(CNode *pnode)\n {\n     std::deque<CSerializeData>::iterator it = pnode->vSendMsg.begin();\n+    size_t nSentSize = 0;\n \n     while (it != pnode->vSendMsg.end()) {\n         const CSerializeData &data = *it;\n@@ -804,6 +805,7 @@ void SocketSendData(CNode *pnode)\n             pnode->nSendBytes += nBytes;\n             pnode->nSendOffset += nBytes;\n             pnode->RecordBytesSent(nBytes);\n+            nSentSize += nBytes;\n             if (pnode->nSendOffset == data.size()) {\n                 pnode->nSendOffset = 0;\n                 pnode->nSendSize -= data.size();\n@@ -832,6 +834,7 @@ void SocketSendData(CNode *pnode)\n         assert(pnode->nSendSize == 0);\n     }\n     pnode->vSendMsg.erase(pnode->vSendMsg.begin(), it);\n+    return nSentSize;\n }\n \n static std::list<CNode*> vNodesDisconnected;"
      },
      {
        "sha": "503e009c49886340c921ec902aefb394dac34cfe",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adf5d4c2e4e7a2979a6ca6de806151fe04c23162/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adf5d4c2e4e7a2979a6ca6de806151fe04c23162/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
        "patch": "@@ -236,7 +236,7 @@ unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError);\n bool StopNode(CConnman& connman);\n-void SocketSendData(CNode *pnode);\n+size_t SocketSendData(CNode *pnode);\n \n struct CombinerAll\n {"
      }
    ]
  },
  {
    "sha": "63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2NhZmE2MzI5ZTFhMGExZGFmMmQzMjQ5MzFhY2E0MmJhMWNiYjE5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-19T01:44:42Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move send/recv statistics to CConnman",
      "tree": {
        "sha": "c41aea400167d9e92eb6ac5fd624f4d08da6eda6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c41aea400167d9e92eb6ac5fd624f4d08da6eda6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adf5d4c2e4e7a2979a6ca6de806151fe04c23162",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adf5d4c2e4e7a2979a6ca6de806151fe04c23162"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 99,
      "deletions": 84
    },
    "files": [
      {
        "sha": "a7f893c24fef0a41e78b1276685d976905eb84f9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "patch": "@@ -1240,7 +1240,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     }\n #endif\n     if (mapArgs.count(\"-maxuploadtarget\")) {\n-        CNode::SetMaxOutboundTarget(GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET)*1024*1024);\n+        connman.SetMaxOutboundTarget(GetArg(\"-maxuploadtarget\", DEFAULT_MAX_UPLOAD_TARGET)*1024*1024);\n     }\n \n     // ********************************************************* Step 7: load block chain"
      },
      {
        "sha": "019db0bdb39e01e1e57dc8f2fa96720115fe2e2d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "patch": "@@ -4766,7 +4766,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n \n@@ -4808,7 +4808,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n                 // never disconnect whitelisted nodes\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n-                if (send && CNode::OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+                if (send && connman.OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n                     LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n@@ -5312,7 +5312,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom, chainparams.GetConsensus());\n+        ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n     }\n \n \n@@ -5986,7 +5986,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        if (CNode::OutboundTargetReached(false) && !pfrom->fWhitelisted)\n+        if (connman.OutboundTargetReached(false) && !pfrom->fWhitelisted)\n         {\n             LogPrint(\"net\", \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n             pfrom->fDisconnect = true;\n@@ -6202,7 +6202,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman)\n     bool fOk = true;\n \n     if (!pfrom->vRecvGetData.empty())\n-        ProcessGetData(pfrom, chainparams.GetConsensus());\n+        ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n \n     // this maintains the order of responses\n     if (!pfrom->vRecvGetData.empty()) return fOk;"
      },
      {
        "sha": "0787b16ad6039c3f5802dab86d5d2d6a17f5b07e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 28,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "patch": "@@ -298,15 +298,6 @@ bool IsReachable(const CNetAddr& addr)\n     return IsReachable(net);\n }\n \n-uint64_t CNode::nTotalBytesRecv = 0;\n-uint64_t CNode::nTotalBytesSent = 0;\n-CCriticalSection CNode::cs_totalBytesRecv;\n-CCriticalSection CNode::cs_totalBytesSent;\n-\n-uint64_t CNode::nMaxOutboundLimit = 0;\n-uint64_t CNode::nMaxOutboundTotalBytesSentInCycle = 0;\n-uint64_t CNode::nMaxOutboundTimeframe = 60*60*24; //1 day\n-uint64_t CNode::nMaxOutboundCycleStartTime = 0;\n \n CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n@@ -804,7 +795,6 @@ size_t SocketSendData(CNode *pnode)\n             pnode->nLastSend = GetTime();\n             pnode->nSendBytes += nBytes;\n             pnode->nSendOffset += nBytes;\n-            pnode->RecordBytesSent(nBytes);\n             nSentSize += nBytes;\n             if (pnode->nSendOffset == data.size()) {\n                 pnode->nSendOffset = 0;\n@@ -1176,9 +1166,15 @@ void CConnman::ThreadSocketHandler()\n                 // * We process a message in the buffer (message handler thread).\n                 {\n                     TRY_LOCK(pnode->cs_vSend, lockSend);\n-                    if (lockSend && !pnode->vSendMsg.empty()) {\n-                        FD_SET(pnode->hSocket, &fdsetSend);\n-                        continue;\n+                    if (lockSend) {\n+                        if (pnode->nOptimisticBytesWritten) {\n+                            RecordBytesSent(pnode->nOptimisticBytesWritten);\n+                            pnode->nOptimisticBytesWritten = 0;\n+                        }\n+                        if (!pnode->vSendMsg.empty()) {\n+                            FD_SET(pnode->hSocket, &fdsetSend);\n+                            continue;\n+                        }\n                     }\n                 }\n                 {\n@@ -1257,7 +1253,7 @@ void CConnman::ThreadSocketHandler()\n                                 messageHandlerCondition.notify_one();\n                             pnode->nLastRecv = GetTime();\n                             pnode->nRecvBytes += nBytes;\n-                            pnode->RecordBytesRecv(nBytes);\n+                            RecordBytesRecv(nBytes);\n                         }\n                         else if (nBytes == 0)\n                         {\n@@ -1289,8 +1285,11 @@ void CConnman::ThreadSocketHandler()\n             if (FD_ISSET(pnode->hSocket, &fdsetSend))\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n-                if (lockSend)\n-                    SocketSendData(pnode);\n+                if (lockSend) {\n+                    size_t nBytes = SocketSendData(pnode);\n+                    if (nBytes)\n+                        RecordBytesSent(nBytes);\n+                }\n             }\n \n             //\n@@ -2060,6 +2059,13 @@ NodeId CConnman::GetNewNodeId()\n \n bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n {\n+    nTotalBytesRecv = 0;\n+    nTotalBytesSent = 0;\n+    nMaxOutboundLimit = 0;\n+    nMaxOutboundTotalBytesSentInCycle = 0;\n+    nMaxOutboundTimeframe = 60*60*24; //1 day\n+    nMaxOutboundCycleStartTime = 0;\n+\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2344,13 +2350,13 @@ void CConnman::RelayTransaction(const CTransaction& tx)\n     }\n }\n \n-void CNode::RecordBytesRecv(uint64_t bytes)\n+void CConnman::RecordBytesRecv(uint64_t bytes)\n {\n     LOCK(cs_totalBytesRecv);\n     nTotalBytesRecv += bytes;\n }\n \n-void CNode::RecordBytesSent(uint64_t bytes)\n+void CConnman::RecordBytesSent(uint64_t bytes)\n {\n     LOCK(cs_totalBytesSent);\n     nTotalBytesSent += bytes;\n@@ -2367,7 +2373,7 @@ void CNode::RecordBytesSent(uint64_t bytes)\n     nMaxOutboundTotalBytesSentInCycle += bytes;\n }\n \n-void CNode::SetMaxOutboundTarget(uint64_t limit)\n+void CConnman::SetMaxOutboundTarget(uint64_t limit)\n {\n     LOCK(cs_totalBytesSent);\n     uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SERIALIZED_SIZE;\n@@ -2377,19 +2383,19 @@ void CNode::SetMaxOutboundTarget(uint64_t limit)\n         LogPrintf(\"Max outbound target is very small (%s bytes) and will be overshot. Recommended minimum is %s bytes.\\n\", nMaxOutboundLimit, recommendedMinimum);\n }\n \n-uint64_t CNode::GetMaxOutboundTarget()\n+uint64_t CConnman::GetMaxOutboundTarget()\n {\n     LOCK(cs_totalBytesSent);\n     return nMaxOutboundLimit;\n }\n \n-uint64_t CNode::GetMaxOutboundTimeframe()\n+uint64_t CConnman::GetMaxOutboundTimeframe()\n {\n     LOCK(cs_totalBytesSent);\n     return nMaxOutboundTimeframe;\n }\n \n-uint64_t CNode::GetMaxOutboundTimeLeftInCycle()\n+uint64_t CConnman::GetMaxOutboundTimeLeftInCycle()\n {\n     LOCK(cs_totalBytesSent);\n     if (nMaxOutboundLimit == 0)\n@@ -2403,7 +2409,7 @@ uint64_t CNode::GetMaxOutboundTimeLeftInCycle()\n     return (cycleEndTime < now) ? 0 : cycleEndTime - GetTime();\n }\n \n-void CNode::SetMaxOutboundTimeframe(uint64_t timeframe)\n+void CConnman::SetMaxOutboundTimeframe(uint64_t timeframe)\n {\n     LOCK(cs_totalBytesSent);\n     if (nMaxOutboundTimeframe != timeframe)\n@@ -2415,7 +2421,7 @@ void CNode::SetMaxOutboundTimeframe(uint64_t timeframe)\n     nMaxOutboundTimeframe = timeframe;\n }\n \n-bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n+bool CConnman::OutboundTargetReached(bool historicalBlockServingLimit)\n {\n     LOCK(cs_totalBytesSent);\n     if (nMaxOutboundLimit == 0)\n@@ -2435,7 +2441,7 @@ bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n     return false;\n }\n \n-uint64_t CNode::GetOutboundTargetBytesLeft()\n+uint64_t CConnman::GetOutboundTargetBytesLeft()\n {\n     LOCK(cs_totalBytesSent);\n     if (nMaxOutboundLimit == 0)\n@@ -2444,13 +2450,13 @@ uint64_t CNode::GetOutboundTargetBytesLeft()\n     return (nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit) ? 0 : nMaxOutboundLimit - nMaxOutboundTotalBytesSentInCycle;\n }\n \n-uint64_t CNode::GetTotalBytesRecv()\n+uint64_t CConnman::GetTotalBytesRecv()\n {\n     LOCK(cs_totalBytesRecv);\n     return nTotalBytesRecv;\n }\n \n-uint64_t CNode::GetTotalBytesSent()\n+uint64_t CConnman::GetTotalBytesSent()\n {\n     LOCK(cs_totalBytesSent);\n     return nTotalBytesSent;\n@@ -2548,6 +2554,7 @@ CNode::CNode(NodeId idIn, SOCKET hSocketIn, const CAddress& addrIn, const std::s\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n     id = idIn;\n+    nOptimisticBytesWritten = 0;\n \n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n \n@@ -2665,7 +2672,7 @@ void CNode::EndMessage(const char* pszCommand) UNLOCK_FUNCTION(cs_vSend)\n \n     // If write queue empty, attempt \"optimistic write\"\n     if (it == vSendMsg.begin())\n-        SocketSendData(this);\n+        nOptimisticBytesWritten += SocketSendData(this);\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }"
      },
      {
        "sha": "e2d98a90d1a9612c3491471aab873f7fb5ff8adb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 42,
        "deletions": 40,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "patch": "@@ -171,6 +171,31 @@ class CConnman\n     bool DisconnectSubnet(const CSubNet& subnet);\n \n     void AddWhitelistedRange(const CSubNet &subnet);\n+\n+    //!set the max outbound target in bytes\n+    void SetMaxOutboundTarget(uint64_t limit);\n+    uint64_t GetMaxOutboundTarget();\n+\n+    //!set the timeframe for the max outbound target\n+    void SetMaxOutboundTimeframe(uint64_t timeframe);\n+    uint64_t GetMaxOutboundTimeframe();\n+\n+    //!check if the outbound target is reached\n+    // if param historicalBlockServingLimit is set true, the function will\n+    // response true if the limit for serving historical blocks has been reached\n+    bool OutboundTargetReached(bool historicalBlockServingLimit);\n+\n+    //!response the bytes left in the current max outbound cycle\n+    // in case of no limit, it will always response 0\n+    uint64_t GetOutboundTargetBytesLeft();\n+\n+    //!response the time in second left in the current max outbound cycle\n+    // in case of no limit, it will always response 0\n+    uint64_t GetMaxOutboundTimeLeftInCycle();\n+\n+    uint64_t GetTotalBytesRecv();\n+    uint64_t GetTotalBytesSent();\n+\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -210,6 +235,22 @@ class CConnman\n     void DumpData();\n     void DumpBanlist();\n \n+    // Network stats\n+    void RecordBytesRecv(uint64_t bytes);\n+    void RecordBytesSent(uint64_t bytes);\n+\n+    // Network usage totals\n+    CCriticalSection cs_totalBytesRecv;\n+    CCriticalSection cs_totalBytesSent;\n+    uint64_t nTotalBytesRecv;\n+    uint64_t nTotalBytesSent;\n+\n+    // outbound limit & stats\n+    uint64_t nMaxOutboundTotalBytesSentInCycle;\n+    uint64_t nMaxOutboundCycleStartTime;\n+    uint64_t nMaxOutboundLimit;\n+    uint64_t nMaxOutboundTimeframe;\n+\n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n     std::vector<CSubNet> vWhitelistedRange;\n@@ -396,6 +437,7 @@ class CNode\n     CDataStream ssSend;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n+    uint64_t nOptimisticBytesWritten;\n     uint64_t nSendBytes;\n     std::deque<CSerializeData> vSendMsg;\n     CCriticalSection cs_vSend;\n@@ -507,18 +549,6 @@ class CNode\n     ~CNode();\n \n private:\n-    // Network usage totals\n-    static CCriticalSection cs_totalBytesRecv;\n-    static CCriticalSection cs_totalBytesSent;\n-    static uint64_t nTotalBytesRecv;\n-    static uint64_t nTotalBytesSent;\n-\n-    // outbound limit & stats\n-    static uint64_t nMaxOutboundTotalBytesSentInCycle;\n-    static uint64_t nMaxOutboundCycleStartTime;\n-    static uint64_t nMaxOutboundLimit;\n-    static uint64_t nMaxOutboundTimeframe;\n-\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n@@ -812,34 +842,6 @@ class CNode\n     void CloseSocketDisconnect();\n \n     void copyStats(CNodeStats &stats);\n-\n-    // Network stats\n-    static void RecordBytesRecv(uint64_t bytes);\n-    static void RecordBytesSent(uint64_t bytes);\n-\n-    static uint64_t GetTotalBytesRecv();\n-    static uint64_t GetTotalBytesSent();\n-\n-    //!set the max outbound target in bytes\n-    static void SetMaxOutboundTarget(uint64_t limit);\n-    static uint64_t GetMaxOutboundTarget();\n-\n-    //!set the timeframe for the max outbound target\n-    static void SetMaxOutboundTimeframe(uint64_t timeframe);\n-    static uint64_t GetMaxOutboundTimeframe();\n-\n-    //!check if the outbound target is reached\n-    // if param historicalBlockServingLimit is set true, the function will\n-    // response true if the limit for serving historical blocks has been reached\n-    static bool OutboundTargetReached(bool historicalBlockServingLimit);\n-\n-    //!response the bytes left in the current max outbound cycle\n-    // in case of no limit, it will always response 0\n-    static uint64_t GetOutboundTargetBytesLeft();\n-\n-    //!response the time in second left in the current max outbound cycle\n-    // in case of no limit, it will always response 0\n-    static uint64_t GetMaxOutboundTimeLeftInCycle();\n };\n \n "
      },
      {
        "sha": "83c78850e2a544cdd4898359cf1291a13809aa11",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "patch": "@@ -72,12 +72,16 @@ int ClientModel::getNumBlocks() const\n \n quint64 ClientModel::getTotalBytesRecv() const\n {\n-    return CNode::GetTotalBytesRecv();\n+    if(!g_connman)\n+        return 0;\n+    return g_connman->GetTotalBytesRecv();\n }\n \n quint64 ClientModel::getTotalBytesSent() const\n {\n-    return CNode::GetTotalBytesSent();\n+    if(!g_connman)\n+        return 0;\n+    return g_connman->GetTotalBytesSent();\n }\n \n QDateTime ClientModel::getLastBlockDate() const"
      },
      {
        "sha": "4fe58239928c2fe0b09a6d9ff5a8bb1f0ab0a060",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cafa6329e1a0a1daf2d324931aca42ba1cbb19/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "patch": "@@ -347,19 +347,21 @@ UniValue getnettotals(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"getnettotals\", \"\")\n             + HelpExampleRpc(\"getnettotals\", \"\")\n        );\n+    if(!g_connman)\n+        throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"totalbytesrecv\", CNode::GetTotalBytesRecv()));\n-    obj.push_back(Pair(\"totalbytessent\", CNode::GetTotalBytesSent()));\n+    obj.push_back(Pair(\"totalbytesrecv\", g_connman->GetTotalBytesRecv()));\n+    obj.push_back(Pair(\"totalbytessent\", g_connman->GetTotalBytesSent()));\n     obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.push_back(Pair(\"timeframe\", CNode::GetMaxOutboundTimeframe()));\n-    outboundLimit.push_back(Pair(\"target\", CNode::GetMaxOutboundTarget()));\n-    outboundLimit.push_back(Pair(\"target_reached\", CNode::OutboundTargetReached(false)));\n-    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !CNode::OutboundTargetReached(true)));\n-    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", CNode::GetOutboundTargetBytesLeft()));\n-    outboundLimit.push_back(Pair(\"time_left_in_cycle\", CNode::GetMaxOutboundTimeLeftInCycle()));\n+    outboundLimit.push_back(Pair(\"timeframe\", g_connman->GetMaxOutboundTimeframe()));\n+    outboundLimit.push_back(Pair(\"target\", g_connman->GetMaxOutboundTarget()));\n+    outboundLimit.push_back(Pair(\"target_reached\", g_connman->OutboundTargetReached(false)));\n+    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true)));\n+    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft()));\n+    outboundLimit.push_back(Pair(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle()));\n     obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n     return obj;\n }"
      }
    ]
  },
  {
    "sha": "be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTljNzk2ZGM1MWMwNWNhYjBiODRkMmU2NmM5Mjg5NzNjNmU1ZWQ2",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-19T04:01:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move SendBufferSize/ReceiveFloodSize to CConnman",
      "tree": {
        "sha": "5ee7a73b713fcdc8501db979e867782b56e8ac7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ee7a73b713fcdc8501db979e867782b56e8ac7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9c796dc51c05cab0b84d2e66c928973c6e5ed6/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63cafa6329e1a0a1daf2d324931aca42ba1cbb19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63cafa6329e1a0a1daf2d324931aca42ba1cbb19"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 23,
      "deletions": 10
    },
    "files": [
      {
        "sha": "db9d0d3f186d115b13e48e24db191b8a264b0a19",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9c796dc51c05cab0b84d2e66c928973c6e5ed6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9c796dc51c05cab0b84d2e66c928973c6e5ed6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
        "patch": "@@ -4769,14 +4769,15 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n+    unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n     vector<CInv> vNotFound;\n \n     LOCK(cs_main);\n \n     while (it != pfrom->vRecvGetData.end()) {\n         // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->nSendSize >= SendBufferSize())\n+        if (pfrom->nSendSize >= nMaxSendBufferSize)\n             break;\n \n         const CInv &inv = *it;\n@@ -4934,6 +4935,8 @@ uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params\n \n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman)\n {\n+    unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n+\n     LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n@@ -5283,7 +5286,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Track requests for our stuff\n             GetMainSignals().Inventory(inv.hash);\n \n-            if (pfrom->nSendSize > (SendBufferSize() * 2)) {\n+            if (pfrom->nSendSize > (nMaxSendBufferSize * 2)) {\n                 Misbehaving(pfrom->GetId(), 50);\n                 return error(\"send buffer size() = %u\", pfrom->nSendSize);\n             }\n@@ -6188,6 +6191,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n bool ProcessMessages(CNode* pfrom, CConnman& connman)\n {\n     const CChainParams& chainparams = Params();\n+    unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n     //if (fDebug)\n     //    LogPrintf(\"%s(%u messages)\\n\", __func__, pfrom->vRecvMsg.size());\n \n@@ -6210,7 +6214,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman)\n     std::deque<CNetMessage>::iterator it = pfrom->vRecvMsg.begin();\n     while (!pfrom->fDisconnect && it != pfrom->vRecvMsg.end()) {\n         // Don't bother if send buffer is too full to respond anyway\n-        if (pfrom->nSendSize >= SendBufferSize())\n+        if (pfrom->nSendSize >= nMaxSendBufferSize)\n             break;\n \n         // get next message"
      },
      {
        "sha": "2839474cb95c870b08bf1d6b8223f8591fded38d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9c796dc51c05cab0b84d2e66c928973c6e5ed6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9c796dc51c05cab0b84d2e66c928973c6e5ed6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
        "patch": "@@ -1181,7 +1181,7 @@ void CConnman::ThreadSocketHandler()\n                     TRY_LOCK(pnode->cs_vRecvMsg, lockRecv);\n                     if (lockRecv && (\n                         pnode->vRecvMsg.empty() || !pnode->vRecvMsg.front().complete() ||\n-                        pnode->GetTotalRecvSize() <= ReceiveFloodSize()))\n+                        pnode->GetTotalRecvSize() <= GetReceiveFloodSize()))\n                         FD_SET(pnode->hSocket, &fdsetRecv);\n                 }\n             }\n@@ -1851,7 +1851,7 @@ void CConnman::ThreadMessageHandler()\n                     if (!GetNodeSignals().ProcessMessages(pnode, *this))\n                         pnode->CloseSocketDisconnect();\n \n-                    if (pnode->nSendSize < SendBufferSize())\n+                    if (pnode->nSendSize < GetSendBufferSize())\n                     {\n                         if (!pnode->vRecvGetData.empty() || (!pnode->vRecvMsg.empty() && pnode->vRecvMsg[0].complete()))\n                         {\n@@ -2041,6 +2041,8 @@ CConnman::CConnman()\n     setBannedIsDirty = false;\n     fAddressesInitialized = false;\n     nLastNodeId = 0;\n+    nSendBufferMaxSize = 0;\n+    nReceiveFloodSize = 0;\n }\n \n bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n@@ -2066,6 +2068,9 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     nMaxOutboundTimeframe = 60*60*24; //1 day\n     nMaxOutboundCycleStartTime = 0;\n \n+    nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    nReceiveFloodSize = 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2497,8 +2502,8 @@ void CNode::Fuzz(int nChance)\n     Fuzz(2);\n }\n \n-unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER); }\n-unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER); }\n+unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n+unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n CNode::CNode(NodeId idIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),"
      },
      {
        "sha": "e5fbf65492224d2953869caf88dedff663e89adb",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be9c796dc51c05cab0b84d2e66c928973c6e5ed6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be9c796dc51c05cab0b84d2e66c928973c6e5ed6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
        "patch": "@@ -82,9 +82,6 @@ static const ServiceFlags REQUIRED_SERVICES = NODE_NETWORK;\n // NOTE: When adjusting this, update rpcnet:setban's help (\"24h\")\n static const unsigned int DEFAULT_MISBEHAVING_BANTIME = 60 * 60 * 24;  // Default 24-hour ban\n \n-unsigned int ReceiveFloodSize();\n-unsigned int SendBufferSize();\n-\n typedef int NodeId;\n \n struct AddedNodeInfo\n@@ -170,6 +167,8 @@ class CConnman\n     bool DisconnectNode(NodeId id);\n     bool DisconnectSubnet(const CSubNet& subnet);\n \n+    unsigned int GetSendBufferSize() const;\n+\n     void AddWhitelistedRange(const CSubNet &subnet);\n \n     //!set the max outbound target in bytes\n@@ -235,6 +234,8 @@ class CConnman\n     void DumpData();\n     void DumpBanlist();\n \n+    unsigned int GetReceiveFloodSize() const;\n+\n     // Network stats\n     void RecordBytesRecv(uint64_t bytes);\n     void RecordBytesSent(uint64_t bytes);\n@@ -256,6 +257,9 @@ class CConnman\n     std::vector<CSubNet> vWhitelistedRange;\n     CCriticalSection cs_vWhitelistedRange;\n \n+    unsigned int nSendBufferMaxSize;\n+    unsigned int nReceiveFloodSize;\n+\n     std::vector<ListenSocket> vhListenSocket;\n     banmap_t setBanned;\n     CCriticalSection cs_setBanned;"
      }
    ]
  },
  {
    "sha": "bd72937dc462b86f0e84184b270a232f7bfaa8db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDcyOTM3ZGM0NjJiODZmMGU4NDE4NGIyNzBhMjMyZjdiZmFhOGRi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-19T04:04:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move nLocalServices/nRelevantServices to CConnman\n\nThese are in-turn passed to CNode at connection time. This allows us to offer\ndifferent services to different peers (or test the effects of doing so).",
      "tree": {
        "sha": "7d36243302d3001bb36b9fdb27e8642568e814ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d36243302d3001bb36b9fdb27e8642568e814ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd72937dc462b86f0e84184b270a232f7bfaa8db",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd72937dc462b86f0e84184b270a232f7bfaa8db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd72937dc462b86f0e84184b270a232f7bfaa8db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd72937dc462b86f0e84184b270a232f7bfaa8db/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be9c796dc51c05cab0b84d2e66c928973c6e5ed6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be9c796dc51c05cab0b84d2e66c928973c6e5ed6"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 54,
      "deletions": 34
    },
    "files": [
      {
        "sha": "644d6721e4b00eca7580f5c78c566509f660d3d2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "patch": "@@ -982,6 +982,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Option to startup with mocktime set (used for regression testing):\n     SetMockTime(GetArg(\"-mocktime\", 0)); // SetMockTime(0) is a no-op\n \n+    ServiceFlags nLocalServices = NODE_NETWORK;\n+    ServiceFlags nRelevantServices = NODE_NETWORK;\n+\n     if (GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n@@ -1506,7 +1509,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         StartTorControl(threadGroup, scheduler);\n \n     std::string strNodeError;\n-    if(!StartNode(connman, threadGroup, scheduler, strNodeError))\n+    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, strNodeError))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "a916cbc12d3a3781012f02962599345bccd02d8f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "patch": "@@ -471,7 +471,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n }\n \n void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pfrom, CConnman& connman) {\n-    if (nLocalServices & NODE_WITNESS) {\n+    if (pfrom->GetLocalServices() & NODE_WITNESS) {\n         // Don't ever request compact blocks when segwit is enabled.\n         return;\n     }\n@@ -4945,7 +4945,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     }\n \n \n-    if (!(nLocalServices & NODE_BLOOM) &&\n+    if (!(pfrom->GetLocalServices() & NODE_BLOOM) &&\n               (strCommand == NetMsgType::FILTERLOAD ||\n                strCommand == NetMsgType::FILTERADD ||\n                strCommand == NetMsgType::FILTERCLEAR))\n@@ -5068,7 +5068,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             // Advertise our address\n             if (fListen && !IsInitialBlockDownload())\n             {\n-                CAddress addr = GetLocalAddress(&pfrom->addr);\n+                CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices());\n                 if (addr.IsRoutable())\n                 {\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n@@ -5263,7 +5263,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n                         (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                         inv.type |= nFetchFlags;\n-                        if (nodestate->fProvidesHeaderAndIDs && !(nLocalServices & NODE_WITNESS))\n+                        if (nodestate->fProvidesHeaderAndIDs && !(pfrom->GetLocalServices() & NODE_WITNESS))\n                             vToFetch.push_back(CInv(MSG_CMPCT_BLOCK, inv.hash));\n                         else\n                             vToFetch.push_back(inv);\n@@ -5907,7 +5907,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n-                    if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(nLocalServices & NODE_WITNESS)) {\n+                    if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(pfrom->GetLocalServices() & NODE_WITNESS)) {\n                         // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n                         // with this block! Let's get them to announce using compact blocks in the future.\n                         MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n@@ -5982,7 +5982,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     else if (strCommand == NetMsgType::MEMPOOL)\n     {\n-        if (!(nLocalServices & NODE_BLOOM) && !pfrom->fWhitelisted)\n+        if (!(pfrom->GetLocalServices() & NODE_BLOOM) && !pfrom->fWhitelisted)\n         {\n             LogPrint(\"net\", \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom->GetId());\n             pfrom->fDisconnect = true;"
      },
      {
        "sha": "66e3d91f4a11a2f335301730198fffa2d1273269",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "patch": "@@ -69,15 +69,11 @@ namespace {\n \n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n-/** Services this node implementation cares about */\n-ServiceFlags nRelevantServices = NODE_NETWORK;\n-\n //\n // Global state variables\n //\n bool fDiscover = true;\n bool fListen = true;\n-ServiceFlags nLocalServices = NODE_NETWORK;\n bool fRelayTxes = true;\n CCriticalSection cs_mapLocalHost;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n@@ -155,7 +151,7 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n // Otherwise, return the unroutable 0.0.0.0 but filled in with\n // the normal parameters, since the IP may be changed to a useful\n // one by discovery.\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n {\n     CAddress ret(CService(CNetAddr(),GetListenPort()), NODE_NONE);\n     CService addr;\n@@ -187,7 +183,7 @@ void AdvertiseLocal(CNode *pnode)\n {\n     if (fListen && pnode->fSuccessfullyConnected)\n     {\n-        CAddress addrLocal = GetLocalAddress(&pnode->addr);\n+        CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n         // address than we do.\n@@ -400,7 +396,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(GetNewNodeId(), hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n+        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n         GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n@@ -463,7 +459,7 @@ void CNode::PushVersion()\n \n     int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(), addr.nServices));\n-    CAddress addrMe = GetLocalAddress(&addr);\n+    CAddress addrMe = GetLocalAddress(&addr, nLocalServices);\n     if (fLogIPs)\n         LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n     else\n@@ -1036,7 +1032,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(GetNewNodeId(), hSocket, addr, \"\", true);\n+    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, hSocket, addr, \"\", true);\n     GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n@@ -2045,11 +2041,11 @@ CConnman::CConnman()\n     nReceiveFloodSize = 0;\n }\n \n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, std::string& strNodeError)\n {\n     Discover(threadGroup);\n \n-    bool ret = connman.Start(threadGroup, scheduler, strNodeError);\n+    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, strNodeError);\n \n     return ret;\n }\n@@ -2059,13 +2055,15 @@ NodeId CConnman::GetNewNodeId()\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n }\n \n-bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError)\n+bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, std::string& strNodeError)\n {\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n     nMaxOutboundLimit = 0;\n     nMaxOutboundTotalBytesSentInCycle = 0;\n     nMaxOutboundTimeframe = 60*60*24; //1 day\n+    nLocalServices = nLocalServicesIn;\n+    nRelevantServices = nRelevantServicesIn;\n     nMaxOutboundCycleStartTime = 0;\n \n     nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n@@ -2116,7 +2114,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(GetNewNodeId(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n+        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n         GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n@@ -2467,6 +2465,11 @@ uint64_t CConnman::GetTotalBytesSent()\n     return nTotalBytesSent;\n }\n \n+ServiceFlags CConnman::GetLocalServices() const\n+{\n+    return nLocalServices;\n+}\n+\n void CNode::Fuzz(int nChance)\n {\n     if (!fSuccessfullyConnected) return; // Don't fuzz initial handshake\n@@ -2505,7 +2508,7 @@ void CNode::Fuzz(int nChance)\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n-CNode::CNode(NodeId idIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n     nKeyedNetGroup(CalculateKeyedNetGroup(addrIn)),\n@@ -2560,6 +2563,7 @@ CNode::CNode(NodeId idIn, SOCKET hSocketIn, const CAddress& addrIn, const std::s\n     nextSendTimeFeeFilter = 0;\n     id = idIn;\n     nOptimisticBytesWritten = 0;\n+    nLocalServices = nLocalServicesIn;\n \n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n "
      },
      {
        "sha": "25e473c5fc30f45170e52112d01557bdb06243d6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "patch": "@@ -107,7 +107,7 @@ class CConnman\n \n     CConnman();\n     ~CConnman();\n-    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError);\n+    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, std::string& strNodeError);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n@@ -171,6 +171,8 @@ class CConnman\n \n     void AddWhitelistedRange(const CSubNet &subnet);\n \n+    ServiceFlags GetLocalServices() const;\n+\n     //!set the max outbound target in bytes\n     void SetMaxOutboundTarget(uint64_t limit);\n     uint64_t GetMaxOutboundTarget();\n@@ -274,12 +276,18 @@ class CConnman\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n     boost::condition_variable messageHandlerCondition;\n+\n+    /** Services this instance offers */\n+    ServiceFlags nLocalServices;\n+\n+    /** Services this instance cares about */\n+    ServiceFlags nRelevantServices;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError);\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, std::string& strNodeError);\n bool StopNode(CConnman& connman);\n size_t SocketSendData(CNode *pnode);\n \n@@ -336,13 +344,11 @@ bool IsLocal(const CService& addr);\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(enum Network net);\n bool IsReachable(const CNetAddr &addr);\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n+CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices);\n \n \n extern bool fDiscover;\n extern bool fListen;\n-extern ServiceFlags nLocalServices;\n-extern ServiceFlags nRelevantServices;\n extern bool fRelayTxes;\n \n /** Maximum number of connections to simultaneously allow (aka connection slots) */\n@@ -549,7 +555,7 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(NodeId id, SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:\n@@ -559,6 +565,7 @@ class CNode\n     static uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n \n     uint64_t nLocalHostNonce;\n+    ServiceFlags nLocalServices;\n public:\n \n     NodeId GetId() const {\n@@ -846,6 +853,11 @@ class CNode\n     void CloseSocketDisconnect();\n \n     void copyStats(CNodeStats &stats);\n+\n+    ServiceFlags GetLocalServices() const\n+    {\n+        return nLocalServices;\n+    }\n };\n \n "
      },
      {
        "sha": "61b6b62c9a0b6bd54829a89ae554b64570ac4c71",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "patch": "@@ -432,7 +432,8 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\",    strSubVersion));\n     obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n-    obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n+    if(g_connman)\n+        obj.push_back(Pair(\"localservices\", strprintf(\"%016x\", g_connman->GetLocalServices())));\n     obj.push_back(Pair(\"localrelay\",     fRelayTxes));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n     if(g_connman)"
      },
      {
        "sha": "2265f43a6e14c36cb439a4620000d37e53059cc1",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, INVALID_SOCKET, addr2, \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, INVALID_SOCKET, addr, \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n "
      },
      {
        "sha": "1019b12c1c57ac6a10aaadf12ad443c017b4ad31",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd72937dc462b86f0e84184b270a232f7bfaa8db/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "patch": "@@ -163,12 +163,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(id++, hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode1 = new CNode(id++, NODE_NETWORK, hSocket, addr, pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(id++, hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode2 = new CNode(id++, NODE_NETWORK, hSocket, addr, pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      }
    ]
  },
  {
    "sha": "8a593694b1495656411717fbae5d3167576df973",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTU5MzY5NGIxNDk1NjU2NDExNzE3ZmJhZTVkMzE2NzU3NmRmOTcz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-04-19T04:15:52Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move semOutbound to CConnman",
      "tree": {
        "sha": "295d3d46f37b1c1cb68f0ef02c5cdb3defebe010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/295d3d46f37b1c1cb68f0ef02c5cdb3defebe010"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a593694b1495656411717fbae5d3167576df973",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a593694b1495656411717fbae5d3167576df973",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a593694b1495656411717fbae5d3167576df973",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a593694b1495656411717fbae5d3167576df973/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd72937dc462b86f0e84184b270a232f7bfaa8db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd72937dc462b86f0e84184b270a232f7bfaa8db"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "853c0cdd65f76650810776f870e08cdb5c84584d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a593694b1495656411717fbae5d3167576df973/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a593694b1495656411717fbae5d3167576df973/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8a593694b1495656411717fbae5d3167576df973",
        "patch": "@@ -84,8 +84,6 @@ std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-static CSemaphore *semOutbound = NULL;\n-\n // Signals for message handling\n static CNodeSignals g_signals;\n CNodeSignals& GetNodeSignals() { return g_signals; }\n@@ -2039,6 +2037,7 @@ CConnman::CConnman()\n     nLastNodeId = 0;\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n+    semOutbound = NULL;\n }\n \n bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, std::string& strNodeError)"
      },
      {
        "sha": "36ebadf13cb194a6ced489cfda8554069066067f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a593694b1495656411717fbae5d3167576df973/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a593694b1495656411717fbae5d3167576df973/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8a593694b1495656411717fbae5d3167576df973",
        "patch": "@@ -282,6 +282,8 @@ class CConnman\n \n     /** Services this instance cares about */\n     ServiceFlags nRelevantServices;\n+\n+    CSemaphore *semOutbound;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);"
      }
    ]
  },
  {
    "sha": "fdf69ff21aef8ed8071a757979f4239537f7afba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGY2OWZmMjFhZWY4ZWQ4MDcxYTc1Nzk3OWY0MjM5NTM3ZjdhZmJh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-22T07:52:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: move max/max-outbound to CConnman",
      "tree": {
        "sha": "638189832dc1ea475da4747811cdbbc1d4ce4de5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/638189832dc1ea475da4747811cdbbc1d4ce4de5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdf69ff21aef8ed8071a757979f4239537f7afba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf69ff21aef8ed8071a757979f4239537f7afba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf69ff21aef8ed8071a757979f4239537f7afba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf69ff21aef8ed8071a757979f4239537f7afba/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a593694b1495656411717fbae5d3167576df973",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a593694b1495656411717fbae5d3167576df973",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a593694b1495656411717fbae5d3167576df973"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 22,
      "deletions": 18
    },
    "files": [
      {
        "sha": "599dac39b256287e20db4deafb1ad0c453a8045a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf69ff21aef8ed8071a757979f4239537f7afba/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf69ff21aef8ed8071a757979f4239537f7afba/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fdf69ff21aef8ed8071a757979f4239537f7afba",
        "patch": "@@ -861,7 +861,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Make sure enough file descriptors are available\n     int nBind = std::max((int)mapArgs.count(\"-bind\") + (int)mapArgs.count(\"-whitebind\"), 1);\n     int nUserMaxConnections = GetArg(\"-maxconnections\", DEFAULT_MAX_PEER_CONNECTIONS);\n-    nMaxConnections = std::max(nUserMaxConnections, 0);\n+    int nMaxConnections = std::max(nUserMaxConnections, 0);\n \n     // Trim requested connection counts, to fit into system limitations\n     nMaxConnections = std::max(std::min(nMaxConnections, (int)(FD_SETSIZE - nBind - MIN_CORE_FILEDESCRIPTORS)), 0);\n@@ -1509,7 +1509,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         StartTorControl(threadGroup, scheduler);\n \n     std::string strNodeError;\n-    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, strNodeError))\n+    int nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n+    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, strNodeError))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "fe4daaaebf03a8d1e8a3ea579425ce92d30c4a8a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf69ff21aef8ed8071a757979f4239537f7afba/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf69ff21aef8ed8071a757979f4239537f7afba/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fdf69ff21aef8ed8071a757979f4239537f7afba",
        "patch": "@@ -63,7 +63,6 @@\n \n \n namespace {\n-    const int MAX_OUTBOUND_CONNECTIONS = 8;\n     const int MAX_FEELER_CONNECTIONS = 1;\n }\n \n@@ -79,7 +78,6 @@ CCriticalSection cs_mapLocalHost;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n-int nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n@@ -974,7 +972,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n     int nInbound = 0;\n-    int nMaxInbound = nMaxConnections - (MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS);\n+    int nMaxInbound = nMaxConnections - (nMaxOutbound + MAX_FEELER_CONNECTIONS);\n     assert(nMaxInbound > 0);\n \n     if (hSocket != INVALID_SOCKET)\n@@ -1626,7 +1624,7 @@ void CConnman::ThreadOpenConnections()\n                 }\n             }\n         }\n-        assert(nOutbound <= (MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS));\n+        assert(nOutbound <= (nMaxOutbound + MAX_FEELER_CONNECTIONS));\n \n         // Feeler Connections\n         //\n@@ -1641,7 +1639,7 @@ void CConnman::ThreadOpenConnections()\n         //  * Only make a feeler connection once every few minutes.\n         //\n         bool fFeeler = false;\n-        if (nOutbound >= MAX_OUTBOUND_CONNECTIONS) {\n+        if (nOutbound >= nMaxOutbound) {\n             int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n             if (nTime > nNextFeeler) {\n                 nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n@@ -2038,13 +2036,15 @@ CConnman::CConnman()\n     nSendBufferMaxSize = 0;\n     nReceiveFloodSize = 0;\n     semOutbound = NULL;\n+    nMaxConnections = 0;\n+    nMaxOutbound = 0;\n }\n \n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, std::string& strNodeError)\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnectionsIn, int nMaxOutboundIn, std::string& strNodeError)\n {\n     Discover(threadGroup);\n \n-    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, strNodeError);\n+    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnectionsIn, nMaxOutboundIn, strNodeError);\n \n     return ret;\n }\n@@ -2054,7 +2054,7 @@ NodeId CConnman::GetNewNodeId()\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n }\n \n-bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, std::string& strNodeError)\n+bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, std::string& strNodeError)\n {\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n@@ -2065,6 +2065,9 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n     nRelevantServices = nRelevantServicesIn;\n     nMaxOutboundCycleStartTime = 0;\n \n+    nMaxConnections = nMaxConnectionsIn;\n+    nMaxOutbound = std::min((nMaxOutboundIn), nMaxConnections);\n+\n     nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     nReceiveFloodSize = 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n \n@@ -2106,8 +2109,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n \n     if (semOutbound == NULL) {\n         // initialize semaphore\n-        int nMaxOutbound = std::min((MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS), nMaxConnections);\n-        semOutbound = new CSemaphore(nMaxOutbound);\n+        semOutbound = new CSemaphore(std::min((nMaxOutbound + MAX_FEELER_CONNECTIONS), nMaxConnections));\n     }\n \n     if (pnodeLocalHost == NULL) {\n@@ -2174,7 +2176,7 @@ instance_of_cnetcleanup;\n void CConnman::Stop()\n {\n     if (semOutbound)\n-        for (int i=0; i<(MAX_OUTBOUND_CONNECTIONS + MAX_FEELER_CONNECTIONS); i++)\n+        for (int i=0; i<(nMaxOutbound + MAX_FEELER_CONNECTIONS); i++)\n             semOutbound->post();\n \n     if (fAddressesInitialized)"
      },
      {
        "sha": "0859190d3679dc5d1cfd3daa0bd4ee9869d1d201",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdf69ff21aef8ed8071a757979f4239537f7afba/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdf69ff21aef8ed8071a757979f4239537f7afba/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fdf69ff21aef8ed8071a757979f4239537f7afba",
        "patch": "@@ -54,6 +54,8 @@ static const unsigned int MAX_ADDR_TO_SEND = 1000;\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of strSubVer in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n+/** Maximum number of outgoing nodes */\n+static const int MAX_OUTBOUND_CONNECTIONS = 8;\n /** -listen default */\n static const bool DEFAULT_LISTEN = true;\n /** -upnp default */\n@@ -107,7 +109,7 @@ class CConnman\n \n     CConnman();\n     ~CConnman();\n-    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, std::string& strNodeError);\n+    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, std::string& strNodeError);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n@@ -284,12 +286,14 @@ class CConnman\n     ServiceFlags nRelevantServices;\n \n     CSemaphore *semOutbound;\n+    int nMaxConnections;\n+    int nMaxOutbound;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, std::string& strNodeError);\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnections, int nMaxOutbound, std::string& strNodeError);\n bool StopNode(CConnman& connman);\n size_t SocketSendData(CNode *pnode);\n \n@@ -353,9 +357,6 @@ extern bool fDiscover;\n extern bool fListen;\n extern bool fRelayTxes;\n \n-/** Maximum number of connections to simultaneously allow (aka connection slots) */\n-extern int nMaxConnections;\n-\n extern limitedmap<uint256, int64_t> mapAlreadyAskedFor;\n \n /** Subversion as sent to the P2P network in `version` messages */"
      }
    ]
  },
  {
    "sha": "f60b9059e4958245bda82e9656c52a31d5268ad9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjBiOTA1OWU0OTU4MjQ1YmRhODJlOTY1NmM1MmEzMWQ1MjY4YWQ5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-24T20:42:17Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:06Z"
      },
      "message": "net: Pass best block known height into CConnman\n\nCConnman then passes the current best height into CNode at creation time.\n\nThis way CConnman/CNode have no dependency on main for height, and the signals\nonly move in one direction.\n\nThis also helps to prevent identity leakage a tiny bit. Before this change, an\nattacker could theoretically make 2 connections on different interfaces. They\nwould connect fully on one, and only establish the initial connection on the\nother. Once they receive a new block, they would relay it to your first\nconnection, and immediately commence the version handshake on the second. Since\nthe new block height is reflected immediately, they could attempt to learn\nwhether the two connections were correlated.\n\nThis is, of course, incredibly unlikely to work due to the small timings\ninvolved and receipt from other senders. But it doesn't hurt to lock-in\nnBestHeight at the time of connection, rather than letting the remote choose\nthe time.",
      "tree": {
        "sha": "ebe2791c74d053d270d9057a5237dc85b9c5fb2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebe2791c74d053d270d9057a5237dc85b9c5fb2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f60b9059e4958245bda82e9656c52a31d5268ad9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b9059e4958245bda82e9656c52a31d5268ad9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b9059e4958245bda82e9656c52a31d5268ad9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b9059e4958245bda82e9656c52a31d5268ad9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdf69ff21aef8ed8071a757979f4239537f7afba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdf69ff21aef8ed8071a757979f4239537f7afba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdf69ff21aef8ed8071a757979f4239537f7afba"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 43,
      "deletions": 31
    },
    "files": [
      {
        "sha": "4dce8be819cb5602a65cc4d7bc53e0ec1833770f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b9059e4958245bda82e9656c52a31d5268ad9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b9059e4958245bda82e9656c52a31d5268ad9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f60b9059e4958245bda82e9656c52a31d5268ad9",
        "patch": "@@ -1510,7 +1510,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     std::string strNodeError;\n     int nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n-    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, strNodeError))\n+    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, chainActive.Height(), strNodeError))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "1835d9712b025095ff8454605bc3a9a0003afa77",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b9059e4958245bda82e9656c52a31d5268ad9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b9059e4958245bda82e9656c52a31d5268ad9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f60b9059e4958245bda82e9656c52a31d5268ad9",
        "patch": "@@ -325,12 +325,6 @@ CNodeState *State(NodeId pnode) {\n     return &it->second;\n }\n \n-int GetHeight()\n-{\n-    LOCK(cs_main);\n-    return chainActive.Height();\n-}\n-\n void UpdatePreferredDownload(CNode* node, CNodeState* state)\n {\n     nPreferredDownload -= state->fPreferredDownload;\n@@ -639,7 +633,6 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n \n void RegisterNodeSignals(CNodeSignals& nodeSignals)\n {\n-    nodeSignals.GetHeight.connect(&GetHeight);\n     nodeSignals.ProcessMessages.connect(&ProcessMessages);\n     nodeSignals.SendMessages.connect(&SendMessages);\n     nodeSignals.InitializeNode.connect(&InitializeNode);\n@@ -648,7 +641,6 @@ void RegisterNodeSignals(CNodeSignals& nodeSignals)\n \n void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n {\n-    nodeSignals.GetHeight.disconnect(&GetHeight);\n     nodeSignals.ProcessMessages.disconnect(&ProcessMessages);\n     nodeSignals.SendMessages.disconnect(&SendMessages);\n     nodeSignals.InitializeNode.disconnect(&InitializeNode);\n@@ -3058,6 +3050,8 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n+        if(connman)\n+            connman->SetBestHeight(nNewHeight);\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock"
      },
      {
        "sha": "d510952551a33e315c7985792301db8b1fbb67b3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b9059e4958245bda82e9656c52a31d5268ad9/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b9059e4958245bda82e9656c52a31d5268ad9/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f60b9059e4958245bda82e9656c52a31d5268ad9",
        "patch": "@@ -392,7 +392,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n+        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addrConnect, pszDest ? pszDest : \"\", false);\n         GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n@@ -451,17 +451,15 @@ void CNode::CloseSocketDisconnect()\n \n void CNode::PushVersion()\n {\n-    int nBestHeight = GetNodeSignals().GetHeight().get_value_or(0);\n-\n     int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(), addr.nServices));\n     CAddress addrMe = GetLocalAddress(&addr, nLocalServices);\n     if (fLogIPs)\n-        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n+        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nMyStartingHeight, addrMe.ToString(), addrYou.ToString(), id);\n     else\n-        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n+        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nMyStartingHeight, addrMe.ToString(), id);\n     PushMessage(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalServices, nTime, addrYou, addrMe,\n-                nLocalHostNonce, strSubVersion, nBestHeight, ::fRelayTxes);\n+                nLocalHostNonce, strSubVersion, nMyStartingHeight, ::fRelayTxes);\n }\n \n \n@@ -1028,7 +1026,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, hSocket, addr, \"\", true);\n+    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addr, \"\", true);\n     GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n@@ -2038,13 +2036,14 @@ CConnman::CConnman()\n     semOutbound = NULL;\n     nMaxConnections = 0;\n     nMaxOutbound = 0;\n+    nBestHeight = 0;\n }\n \n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnectionsIn, int nMaxOutboundIn, std::string& strNodeError)\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, std::string& strNodeError)\n {\n     Discover(threadGroup);\n \n-    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnectionsIn, nMaxOutboundIn, strNodeError);\n+    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnectionsIn, nMaxOutboundIn, nBestHeightIn, strNodeError);\n \n     return ret;\n }\n@@ -2054,7 +2053,7 @@ NodeId CConnman::GetNewNodeId()\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n }\n \n-bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, std::string& strNodeError)\n+bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, std::string& strNodeError)\n {\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n@@ -2071,6 +2070,8 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n     nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     nReceiveFloodSize = 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n \n+    SetBestHeight(nBestHeightIn);\n+\n     uiInterface.InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n@@ -2115,7 +2116,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n+        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices));\n         GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n@@ -2471,6 +2472,16 @@ ServiceFlags CConnman::GetLocalServices() const\n     return nLocalServices;\n }\n \n+void CConnman::SetBestHeight(int height)\n+{\n+    nBestHeight.store(height, std::memory_order_release);\n+}\n+\n+int CConnman::GetBestHeight() const\n+{\n+    return nBestHeight.load(std::memory_order_acquire);\n+}\n+\n void CNode::Fuzz(int nChance)\n {\n     if (!fSuccessfullyConnected) return; // Don't fuzz initial handshake\n@@ -2509,7 +2520,7 @@ void CNode::Fuzz(int nChance)\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n     nKeyedNetGroup(CalculateKeyedNetGroup(addrIn)),\n@@ -2567,6 +2578,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const\n     nLocalServices = nLocalServicesIn;\n \n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n+    nMyStartingHeight = nMyStartingHeightIn;\n \n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "852822d85b71c9a3034c40e96130cc0d48bfbb82",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b9059e4958245bda82e9656c52a31d5268ad9/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b9059e4958245bda82e9656c52a31d5268ad9/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f60b9059e4958245bda82e9656c52a31d5268ad9",
        "patch": "@@ -109,7 +109,7 @@ class CConnman\n \n     CConnman();\n     ~CConnman();\n-    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, std::string& strNodeError);\n+    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, std::string& strNodeError);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n@@ -199,6 +199,10 @@ class CConnman\n     uint64_t GetTotalBytesRecv();\n     uint64_t GetTotalBytesSent();\n \n+    void SetBestHeight(int height);\n+    int GetBestHeight() const;\n+\n+\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -288,12 +292,13 @@ class CConnman\n     CSemaphore *semOutbound;\n     int nMaxConnections;\n     int nMaxOutbound;\n+    std::atomic<int> nBestHeight;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnections, int nMaxOutbound, std::string& strNodeError);\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnections, int nMaxOutbound, int nBestHeightIn, std::string& strNodeError);\n bool StopNode(CConnman& connman);\n size_t SocketSendData(CNode *pnode);\n \n@@ -315,7 +320,6 @@ struct CombinerAll\n // Signals for message handling\n struct CNodeSignals\n {\n-    boost::signals2::signal<int ()> GetHeight;\n     boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> ProcessMessages;\n     boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> SendMessages;\n     boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n@@ -558,7 +562,7 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:\n@@ -569,6 +573,7 @@ class CNode\n \n     uint64_t nLocalHostNonce;\n     ServiceFlags nLocalServices;\n+    int nMyStartingHeight;\n public:\n \n     NodeId GetId() const {"
      },
      {
        "sha": "33f107d84bfdd820dc4b7dcf28bac654eb0eb313",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b9059e4958245bda82e9656c52a31d5268ad9/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b9059e4958245bda82e9656c52a31d5268ad9/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=f60b9059e4958245bda82e9656c52a31d5268ad9",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, INVALID_SOCKET, addr2, \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, INVALID_SOCKET, addr1, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, INVALID_SOCKET, addr, \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n "
      },
      {
        "sha": "bc9a98ab04cf8ddb20dde398593e70d5bd92325e",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60b9059e4958245bda82e9656c52a31d5268ad9/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60b9059e4958245bda82e9656c52a31d5268ad9/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=f60b9059e4958245bda82e9656c52a31d5268ad9",
        "patch": "@@ -154,6 +154,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n {\n     SOCKET hSocket = INVALID_SOCKET;\n     NodeId id = 0;\n+    int height = 0;\n \n     in_addr ipv4Addr;\n     ipv4Addr.s_addr = 0xa0b0c001;\n@@ -163,12 +164,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(id++, NODE_NETWORK, hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(id++, NODE_NETWORK, hSocket, addr, pszDest, fInboundIn);\n+    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      }
    ]
  },
  {
    "sha": "e81a602cf02edfb21c3ec097bd7cf71f189ed783",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODFhNjAyY2YwMmVkZmIyMWMzZWMwOTdiZDdjZjcxZjE4OWVkNzgz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-26T01:26:46Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:07Z"
      },
      "message": "net: pass CClientUIInterface into CConnman",
      "tree": {
        "sha": "4740757392d73e64450bfcdff898d3bc07bbe591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4740757392d73e64450bfcdff898d3bc07bbe591"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e81a602cf02edfb21c3ec097bd7cf71f189ed783",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81a602cf02edfb21c3ec097bd7cf71f189ed783",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e81a602cf02edfb21c3ec097bd7cf71f189ed783",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81a602cf02edfb21c3ec097bd7cf71f189ed783/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60b9059e4958245bda82e9656c52a31d5268ad9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60b9059e4958245bda82e9656c52a31d5268ad9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60b9059e4958245bda82e9656c52a31d5268ad9"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 23,
      "deletions": 13
    },
    "files": [
      {
        "sha": "9e2ed62a922b9519c554467335717397842cc105",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81a602cf02edfb21c3ec097bd7cf71f189ed783/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81a602cf02edfb21c3ec097bd7cf71f189ed783/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e81a602cf02edfb21c3ec097bd7cf71f189ed783",
        "patch": "@@ -1510,7 +1510,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     std::string strNodeError;\n     int nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n-    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, chainActive.Height(), strNodeError))\n+    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, chainActive.Height(), &uiInterface, strNodeError))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "13218b4221fbde4ac7b0e7a12f04d5be63c86432",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81a602cf02edfb21c3ec097bd7cf71f189ed783/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81a602cf02edfb21c3ec097bd7cf71f189ed783/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e81a602cf02edfb21c3ec097bd7cf71f189ed783",
        "patch": "@@ -474,7 +474,8 @@ void CConnman::ClearBanned()\n         setBannedIsDirty = true;\n     }\n     DumpBanlist(); //store banlist to disk\n-    uiInterface.BannedListChanged();\n+    if(clientInterface)\n+        clientInterface->BannedListChanged();\n }\n \n bool CConnman::IsBanned(CNetAddr ip)\n@@ -534,7 +535,8 @@ void CConnman::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t ba\n         else\n             return;\n     }\n-    uiInterface.BannedListChanged();\n+    if(clientInterface)\n+        clientInterface->BannedListChanged();\n     {\n         LOCK(cs_vNodes);\n         BOOST_FOREACH(CNode* pnode, vNodes) {\n@@ -558,7 +560,8 @@ bool CConnman::Unban(const CSubNet &subNet) {\n             return false;\n         setBannedIsDirty = true;\n     }\n-    uiInterface.BannedListChanged();\n+    if(clientInterface)\n+        clientInterface->BannedListChanged();\n     DumpBanlist(); //store banlist to disk immediately\n     return true;\n }\n@@ -1104,7 +1107,8 @@ void CConnman::ThreadSocketHandler()\n         }\n         if(vNodes.size() != nPrevNodeCount) {\n             nPrevNodeCount = vNodes.size();\n-            uiInterface.NotifyNumConnectionsChanged(nPrevNodeCount);\n+            if(clientInterface)\n+                clientInterface->NotifyNumConnectionsChanged(nPrevNodeCount);\n         }\n \n         //\n@@ -2037,13 +2041,14 @@ CConnman::CConnman()\n     nMaxConnections = 0;\n     nMaxOutbound = 0;\n     nBestHeight = 0;\n+    clientInterface = NULL;\n }\n \n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, std::string& strNodeError)\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError)\n {\n     Discover(threadGroup);\n \n-    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnectionsIn, nMaxOutboundIn, nBestHeightIn, strNodeError);\n+    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnectionsIn, nMaxOutboundIn, nBestHeightIn, interfaceIn, strNodeError);\n \n     return ret;\n }\n@@ -2053,7 +2058,7 @@ NodeId CConnman::GetNewNodeId()\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n }\n \n-bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, std::string& strNodeError)\n+bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError)\n {\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n@@ -2072,7 +2077,9 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n \n     SetBestHeight(nBestHeightIn);\n \n-    uiInterface.InitMessage(_(\"Loading addresses...\"));\n+    clientInterface = interfaceIn;\n+    if (clientInterface)\n+        clientInterface->InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat\n     int64_t nStart = GetTimeMillis();\n     {\n@@ -2085,8 +2092,8 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n             DumpAddresses();\n         }\n     }\n-\n-    uiInterface.InitMessage(_(\"Loading banlist...\"));\n+    if (clientInterface)\n+        clientInterface->InitMessage(_(\"Loading banlist...\"));\n     // Load addresses from banlist.dat\n     nStart = GetTimeMillis();\n     CBanDB bandb;"
      },
      {
        "sha": "a45e18da6725df9ba11fc316cc12c73dbcd76ccd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81a602cf02edfb21c3ec097bd7cf71f189ed783/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81a602cf02edfb21c3ec097bd7cf71f189ed783/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e81a602cf02edfb21c3ec097bd7cf71f189ed783",
        "patch": "@@ -96,6 +96,8 @@ struct AddedNodeInfo\n \n class CTransaction;\n class CNodeStats;\n+class CClientUIInterface;\n+\n class CConnman\n {\n public:\n@@ -109,7 +111,7 @@ class CConnman\n \n     CConnman();\n     ~CConnman();\n-    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, std::string& strNodeError);\n+    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);\n@@ -293,12 +295,13 @@ class CConnman\n     int nMaxConnections;\n     int nMaxOutbound;\n     std::atomic<int> nBestHeight;\n+    CClientUIInterface* clientInterface;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnections, int nMaxOutbound, int nBestHeightIn, std::string& strNodeError);\n+bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnections, int nMaxOutbound, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError);\n bool StopNode(CConnman& connman);\n size_t SocketSendData(CNode *pnode);\n "
      }
    ]
  },
  {
    "sha": "bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWZhNWZjNWExYmEzMzMzN2I1ZWIzZDhhZTI0YmEyZmFjMjk0OWY4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-27T03:29:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T16:24:07Z"
      },
      "message": "net: Drop StartNode/StopNode and use CConnman directly",
      "tree": {
        "sha": "5d166b29ad0378d7e8394e21271ad9863d515b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d166b29ad0378d7e8394e21271ad9863d515b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e81a602cf02edfb21c3ec097bd7cf71f189ed783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81a602cf02edfb21c3ec097bd7cf71f189ed783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e81a602cf02edfb21c3ec097bd7cf71f189ed783"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 11,
      "deletions": 26
    },
    "files": [
      {
        "sha": "4e1c8e1b611840ce166cf03e509506aa01f73cda",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
        "patch": "@@ -199,7 +199,8 @@ void Shutdown()\n     if (pwalletMain)\n         pwalletMain->Flush(false);\n #endif\n-    StopNode(*g_connman);\n+    MapPort(false);\n+    g_connman->Stop();\n     g_connman.reset();\n \n     StopTorControl();\n@@ -1508,9 +1509,14 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (GetBoolArg(\"-listenonion\", DEFAULT_LISTEN_ONION))\n         StartTorControl(threadGroup, scheduler);\n \n+    Discover(threadGroup);\n+\n+    // Map ports with UPnP\n+    MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n+\n     std::string strNodeError;\n     int nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n-    if(!StartNode(connman, threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, chainActive.Height(), &uiInterface, strNodeError))\n+    if(!connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, chainActive.Height(), &uiInterface, strNodeError))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "15c066cd7ce4da2d3010b62731fbdd27ec341647",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 22,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
        "patch": "@@ -1979,7 +1979,7 @@ bool CConnman::BindListenPort(const CService &addrBind, std::string& strError, b\n     return true;\n }\n \n-void static Discover(boost::thread_group& threadGroup)\n+void Discover(boost::thread_group& threadGroup)\n {\n     if (!fDiscover)\n         return;\n@@ -2044,15 +2044,6 @@ CConnman::CConnman()\n     clientInterface = NULL;\n }\n \n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError)\n-{\n-    Discover(threadGroup);\n-\n-    bool ret = connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnectionsIn, nMaxOutboundIn, nBestHeightIn, interfaceIn, strNodeError);\n-\n-    return ret;\n-}\n-\n NodeId CConnman::GetNewNodeId()\n {\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n@@ -2136,9 +2127,6 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n     else\n         threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"dnsseed\", boost::function<void()>(boost::bind(&CConnman::ThreadDNSAddressSeed, this))));\n \n-    // Map ports with UPnP\n-    MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n-\n     // Send and receive from sockets, accept connections\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"net\", boost::function<void()>(boost::bind(&CConnman::ThreadSocketHandler, this))));\n \n@@ -2157,15 +2145,6 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, Se\n     return true;\n }\n \n-bool StopNode(CConnman& connman)\n-{\n-    LogPrintf(\"StopNode()\\n\");\n-    MapPort(false);\n-\n-    connman.Stop();\n-    return true;\n-}\n-\n class CNetCleanup\n {\n public:\n@@ -2183,6 +2162,7 @@ instance_of_cnetcleanup;\n \n void CConnman::Stop()\n {\n+    LogPrintf(\"%s\\n\",__func__);\n     if (semOutbound)\n         for (int i=0; i<(nMaxOutbound + MAX_FEELER_CONNECTIONS); i++)\n             semOutbound->post();"
      },
      {
        "sha": "e08409e81e217aaebb48f179ec7c339535d2879a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
        "patch": "@@ -298,11 +298,10 @@ class CConnman\n     CClientUIInterface* clientInterface;\n };\n extern std::unique_ptr<CConnman> g_connman;\n+void Discover(boost::thread_group& threadGroup);\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n-bool StartNode(CConnman& connman, boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServices, ServiceFlags nRelevantServices, int nMaxConnections, int nMaxOutbound, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError);\n-bool StopNode(CConnman& connman);\n size_t SocketSendData(CNode *pnode);\n \n struct CombinerAll"
      }
    ]
  },
  {
    "sha": "a19553b992f40b9f98e6e0be4cd529a89746ef50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTk1NTNiOTkyZjQwYjlmOThlNmUwYmU0Y2Q1MjlhODk3NDZlZjUw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-27T03:53:08Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T17:04:29Z"
      },
      "message": "net: Introduce CConnection::Options to avoid passing so many params",
      "tree": {
        "sha": "7d8bdf280d59714df83e438324867ff374d15bb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d8bdf280d59714df83e438324867ff374d15bb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a19553b992f40b9f98e6e0be4cd529a89746ef50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19553b992f40b9f98e6e0be4cd529a89746ef50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a19553b992f40b9f98e6e0be4cd529a89746ef50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19553b992f40b9f98e6e0be4cd529a89746ef50/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bafa5fc5a1ba33337b5eb3d8ae24ba2fac2949f8"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 26,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e1080364393df6bc56889c7efab6e996c6ed5983",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a19553b992f40b9f98e6e0be4cd529a89746ef50/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a19553b992f40b9f98e6e0be4cd529a89746ef50/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a19553b992f40b9f98e6e0be4cd529a89746ef50",
        "patch": "@@ -1515,8 +1515,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     MapPort(GetBoolArg(\"-upnp\", DEFAULT_UPNP));\n \n     std::string strNodeError;\n-    int nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n-    if(!connman.Start(threadGroup, scheduler, nLocalServices, nRelevantServices, nMaxConnections, nMaxOutbound, chainActive.Height(), &uiInterface, strNodeError))\n+    CConnman::Options connOptions;\n+    connOptions.nLocalServices = nLocalServices;\n+    connOptions.nRelevantServices = nRelevantServices;\n+    connOptions.nMaxConnections = nMaxConnections;\n+    connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n+    connOptions.nBestHeight = chainActive.Height();\n+    connOptions.uiInterface = &uiInterface;\n+\n+    if(!connman.Start(threadGroup, scheduler, strNodeError, connOptions))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "8ea600b371cae5091ffcda82f345b0daf8d798b4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a19553b992f40b9f98e6e0be4cd529a89746ef50/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a19553b992f40b9f98e6e0be4cd529a89746ef50/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a19553b992f40b9f98e6e0be4cd529a89746ef50",
        "patch": "@@ -2049,26 +2049,26 @@ NodeId CConnman::GetNewNodeId()\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n }\n \n-bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError)\n+bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError, Options connOptions)\n {\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n     nMaxOutboundLimit = 0;\n     nMaxOutboundTotalBytesSentInCycle = 0;\n     nMaxOutboundTimeframe = 60*60*24; //1 day\n-    nLocalServices = nLocalServicesIn;\n-    nRelevantServices = nRelevantServicesIn;\n     nMaxOutboundCycleStartTime = 0;\n \n-    nMaxConnections = nMaxConnectionsIn;\n-    nMaxOutbound = std::min((nMaxOutboundIn), nMaxConnections);\n+    nRelevantServices = connOptions.nRelevantServices;\n+    nLocalServices = connOptions.nLocalServices;\n+    nMaxConnections = connOptions.nMaxConnections;\n+    nMaxOutbound = std::min((connOptions.nMaxOutbound), nMaxConnections);\n \n     nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     nReceiveFloodSize = 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n \n-    SetBestHeight(nBestHeightIn);\n+    SetBestHeight(connOptions.nBestHeight);\n \n-    clientInterface = interfaceIn;\n+    clientInterface = connOptions.uiInterface;\n     if (clientInterface)\n         clientInterface->InitMessage(_(\"Loading addresses...\"));\n     // Load addresses from peers.dat"
      },
      {
        "sha": "8067ee68a7d39d03e6e496e13b5b3072abfff51f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a19553b992f40b9f98e6e0be4cd529a89746ef50/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a19553b992f40b9f98e6e0be4cd529a89746ef50/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a19553b992f40b9f98e6e0be4cd529a89746ef50",
        "patch": "@@ -109,9 +109,18 @@ class CConnman\n         CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),\n     };\n \n+    struct Options\n+    {\n+        ServiceFlags nLocalServices = NODE_NONE;\n+        ServiceFlags nRelevantServices = NODE_NONE;\n+        int nMaxConnections = 0;\n+        int nMaxOutbound = 0;\n+        int nBestHeight = 0;\n+        CClientUIInterface* uiInterface = nullptr;\n+    };\n     CConnman();\n     ~CConnman();\n-    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, ServiceFlags nLocalServicesIn, ServiceFlags nRelevantServicesIn, int nMaxConnectionsIn, int nMaxOutboundIn, int nBestHeightIn, CClientUIInterface* interfaceIn, std::string& strNodeError);\n+    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError, Options options);\n     void Stop();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false, bool fFeeler = false);"
      }
    ]
  },
  {
    "sha": "fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJmOGJjNDdmYTE3ZGVjY2IyODFiNzUwZmY2YzQ4NDAyYzViMWNl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-27T04:00:02Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T17:06:00Z"
      },
      "message": "net: add nSendBufferMaxSize/nReceiveFloodSize to CConnection::Options",
      "tree": {
        "sha": "1d46e25e4ceb8401d6b373f40fea839de2980fa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d46e25e4ceb8401d6b373f40fea839de2980fa9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a19553b992f40b9f98e6e0be4cd529a89746ef50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19553b992f40b9f98e6e0be4cd529a89746ef50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a19553b992f40b9f98e6e0be4cd529a89746ef50"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8f7cef20c1266b686659e1e8ee62376858ecf8ad",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
        "patch": "@@ -1522,6 +1522,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n     connOptions.nBestHeight = chainActive.Height();\n     connOptions.uiInterface = &uiInterface;\n+    connOptions.nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n+    connOptions.nReceiveFloodSize = 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n \n     if(!connman.Start(threadGroup, scheduler, strNodeError, connOptions))\n         return InitError(strNodeError);"
      },
      {
        "sha": "9b18a32743b4f8bb0254634564492af33e262ccf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
        "patch": "@@ -2063,8 +2063,8 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     nMaxConnections = connOptions.nMaxConnections;\n     nMaxOutbound = std::min((connOptions.nMaxOutbound), nMaxConnections);\n \n-    nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n-    nReceiveFloodSize = 1000*GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n+    nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n+    nReceiveFloodSize = connOptions.nSendBufferMaxSize;\n \n     SetBestHeight(connOptions.nBestHeight);\n "
      },
      {
        "sha": "a50066da9a9ab002b57dac2e1906bb2f428b73f3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
        "patch": "@@ -117,6 +117,8 @@ class CConnman\n         int nMaxOutbound = 0;\n         int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n+        unsigned int nSendBufferMaxSize = 0;\n+        unsigned int nReceiveFloodSize = 0;\n     };\n     CConnman();\n     ~CConnman();"
      }
    ]
  },
  {
    "sha": "98591c50273b13cfc5419548b527280d6a84a43d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODU5MWM1MDI3M2IxM2NmYzU0MTk1NDhiNTI3MjgwZDZhODRhNDNk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-27T05:00:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T17:06:05Z"
      },
      "message": "net: move vNodesDisconnected into CConnman",
      "tree": {
        "sha": "db5ea02ec973007718d80d81c2474ecdddd13aa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db5ea02ec973007718d80d81c2474ecdddd13aa0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98591c50273b13cfc5419548b527280d6a84a43d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98591c50273b13cfc5419548b527280d6a84a43d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98591c50273b13cfc5419548b527280d6a84a43d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98591c50273b13cfc5419548b527280d6a84a43d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2f8bc47fa17deccb281b750ff6c48402c5b1ce"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "508b0dd962e90f793d138b214f273033c27589bb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98591c50273b13cfc5419548b527280d6a84a43d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98591c50273b13cfc5419548b527280d6a84a43d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=98591c50273b13cfc5419548b527280d6a84a43d",
        "patch": "@@ -820,8 +820,6 @@ size_t SocketSendData(CNode *pnode)\n     return nSentSize;\n }\n \n-static std::list<CNode*> vNodesDisconnected;\n-\n struct NodeEvictionCandidate\n {\n     NodeId id;"
      },
      {
        "sha": "018126d67706a85c2538af201552506854cfd0bd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98591c50273b13cfc5419548b527280d6a84a43d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98591c50273b13cfc5419548b527280d6a84a43d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=98591c50273b13cfc5419548b527280d6a84a43d",
        "patch": "@@ -292,6 +292,7 @@ class CConnman\n     std::vector<std::string> vAddedNodes;\n     CCriticalSection cs_vAddedNodes;\n     std::vector<CNode*> vNodes;\n+    std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n     boost::condition_variable messageHandlerCondition;"
      }
    ]
  },
  {
    "sha": "d1a2295f0d58423652b124b48fc887a9721b765c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWEyMjk1ZjBkNTg0MjM2NTJiMTI0YjQ4ZmM4ODdhOTcyMWI3NjVj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-06-15T23:28:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T17:06:05Z"
      },
      "message": "Made the ForEachNode* functions in src/net.cpp more pragmatic and self documenting",
      "tree": {
        "sha": "72922e98c159106a37c8efdc2670630ab814f8cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72922e98c159106a37c8efdc2670630ab814f8cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1a2295f0d58423652b124b48fc887a9721b765c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a2295f0d58423652b124b48fc887a9721b765c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a2295f0d58423652b124b48fc887a9721b765c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a2295f0d58423652b124b48fc887a9721b765c/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98591c50273b13cfc5419548b527280d6a84a43d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98591c50273b13cfc5419548b527280d6a84a43d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98591c50273b13cfc5419548b527280d6a84a43d"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 41,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e4c9ce5626a43c3987172e1fca567f172f639bf7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a2295f0d58423652b124b48fc887a9721b765c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a2295f0d58423652b124b48fc887a9721b765c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d1a2295f0d58423652b124b48fc887a9721b765c",
        "patch": "@@ -3091,7 +3091,6 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                                 pnode->PushBlockHash(hash);\n                             }\n                         }\n-                        return true;\n                     });\n                 }\n                 // Notify external listeners about the new tip.\n@@ -4727,7 +4726,6 @@ static void RelayTransaction(const CTransaction& tx, CConnman& connman)\n     connman.ForEachNode([&inv](CNode* pnode)\n     {\n         pnode->PushInventory(inv);\n-        return true;\n     });\n }\n \n@@ -4749,7 +4747,6 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n             uint64_t hashKey = CSipHasher(hasher).Write(pnode->id).Finalize();\n             mapMix.emplace(hashKey, pnode);\n         }\n-        return true;\n     };\n \n     auto pushfunc = [&addr, &mapMix, &nRelayNodes] {"
      },
      {
        "sha": "bf5cc07db1927cdc7b15eec115583159d6bbaa81",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a2295f0d58423652b124b48fc887a9721b765c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a2295f0d58423652b124b48fc887a9721b765c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d1a2295f0d58423652b124b48fc887a9721b765c",
        "patch": "@@ -2697,7 +2697,7 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n     return found != nullptr && func(found);\n }\n \n-bool CConnman::ForEachNode(std::function<bool(CNode* pnode)> func)\n+bool CConnman::ForEachNodeContinueIf(std::function<bool(CNode* pnode)> func)\n {\n     LOCK(cs_vNodes);\n     for (auto&& node : vNodes)\n@@ -2706,7 +2706,7 @@ bool CConnman::ForEachNode(std::function<bool(CNode* pnode)> func)\n     return true;\n }\n \n-bool CConnman::ForEachNode(std::function<bool(const CNode* pnode)> func) const\n+bool CConnman::ForEachNodeContinueIf(std::function<bool(const CNode* pnode)> func) const\n {\n     LOCK(cs_vNodes);\n     for (const auto& node : vNodes)\n@@ -2715,7 +2715,7 @@ bool CConnman::ForEachNode(std::function<bool(const CNode* pnode)> func) const\n     return true;\n }\n \n-bool CConnman::ForEachNodeThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post)\n+bool CConnman::ForEachNodeContinueIfThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post)\n {\n     bool ret = true;\n     LOCK(cs_vNodes);\n@@ -2728,7 +2728,7 @@ bool CConnman::ForEachNodeThen(std::function<bool(CNode* pnode)> pre, std::funct\n     return ret;\n }\n \n-bool CConnman::ForEachNodeThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const\n+bool CConnman::ForEachNodeContinueIfThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const\n {\n     bool ret = true;\n     LOCK(cs_vNodes);\n@@ -2741,6 +2741,35 @@ bool CConnman::ForEachNodeThen(std::function<bool(const CNode* pnode)> pre, std:\n     return ret;\n }\n \n+void CConnman::ForEachNode(std::function<void(CNode* pnode)> func)\n+{\n+    LOCK(cs_vNodes);\n+    for (auto&& node : vNodes)\n+        func(node);\n+}\n+\n+void CConnman::ForEachNode(std::function<void(const CNode* pnode)> func) const\n+{\n+    LOCK(cs_vNodes);\n+    for (const auto& node : vNodes)\n+        func(node);\n+}\n+\n+void CConnman::ForEachNodeThen(std::function<void(CNode* pnode)> pre, std::function<void()> post)\n+{\n+    LOCK(cs_vNodes);\n+    for (auto&& node : vNodes)\n+\t\tpre(node);\n+    post();\n+}\n+\n+void CConnman::ForEachNodeThen(std::function<void(const CNode* pnode)> pre, std::function<void()> post) const\n+{\n+    LOCK(cs_vNodes);\n+    for (const auto& node : vNodes)\n+\t\tpre(node);\n+    post();\n+}\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }"
      },
      {
        "sha": "6ee0430f2214c6e3d8deb8e51e9f33b4d3169efd",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a2295f0d58423652b124b48fc887a9721b765c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a2295f0d58423652b124b48fc887a9721b765c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d1a2295f0d58423652b124b48fc887a9721b765c",
        "patch": "@@ -129,10 +129,14 @@ class CConnman\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n-    bool ForEachNode(std::function<bool(CNode* pnode)> func);\n-    bool ForEachNode(std::function<bool(const CNode* pnode)> func) const;\n-    bool ForEachNodeThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post);\n-    bool ForEachNodeThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const;\n+    bool ForEachNodeContinueIf(std::function<bool(CNode* pnode)> func);\n+    bool ForEachNodeContinueIf(std::function<bool(const CNode* pnode)> func) const;\n+    bool ForEachNodeContinueIfThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post);\n+    bool ForEachNodeContinueIfThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const;\n+    void ForEachNode(std::function<void(CNode* pnode)> func);\n+    void ForEachNode(std::function<void(const CNode* pnode)> func) const;\n+    void ForEachNodeThen(std::function<void(CNode* pnode)> pre, std::function<void()> post);\n+    void ForEachNodeThen(std::function<void(const CNode* pnode)> pre, std::function<void()> post) const;\n \n     void RelayTransaction(const CTransaction& tx);\n "
      },
      {
        "sha": "2b5782367ce1679c5fc4f92b0b2476a5d525e475",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a2295f0d58423652b124b48fc887a9721b765c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a2295f0d58423652b124b48fc887a9721b765c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d1a2295f0d58423652b124b48fc887a9721b765c",
        "patch": "@@ -481,7 +481,6 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     if(g_connman) {\n         g_connman->ForEachNode([t](CNode* pnode) {\n             pnode->nLastSend = pnode->nLastRecv = t;\n-            return true;\n         });\n     }\n "
      },
      {
        "sha": "b011029f51c29bacf8b0732c258dbddec889d634",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a2295f0d58423652b124b48fc887a9721b765c/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a2295f0d58423652b124b48fc887a9721b765c/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d1a2295f0d58423652b124b48fc887a9721b765c",
        "patch": "@@ -61,7 +61,6 @@ UniValue ping(const UniValue& params, bool fHelp)\n     // Request that each node send a ping during next message processing pass\n     g_connman->ForEachNode([](CNode* pnode) {\n         pnode->fPingQueued = true;\n-        return true;\n     });\n     return NullUniValue;\n }"
      },
      {
        "sha": "d2ad0a52b700475e8fb2049fbf6a614b00337d2d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a2295f0d58423652b124b48fc887a9721b765c/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a2295f0d58423652b124b48fc887a9721b765c/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d1a2295f0d58423652b124b48fc887a9721b765c",
        "patch": "@@ -898,7 +898,6 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     g_connman->ForEachNode([&inv](CNode* pnode)\n     {\n         pnode->PushInventory(inv);\n-        return true;\n     });\n     return hashTx.GetHex();\n }"
      },
      {
        "sha": "60ac2ea16611ba7a412dc854ee31b65e5a60958c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1a2295f0d58423652b124b48fc887a9721b765c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1a2295f0d58423652b124b48fc887a9721b765c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d1a2295f0d58423652b124b48fc887a9721b765c",
        "patch": "@@ -1465,7 +1465,6 @@ bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n                 connman->ForEachNode([&inv](CNode* pnode)\n                 {\n                     pnode->PushInventory(inv);\n-                    return true;\n                 });\n                 return true;\n             }"
      }
    ]
  },
  {
    "sha": "e700cd0bc885340563df9e6b7a5b6c6603b8c984",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzAwY2QwYmM4ODUzNDA1NjNkZjllNmI3YTViNmM2NjAzYjhjOTg0",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "jeremy.l.rubin@gmail.com",
        "date": "2016-06-20T01:42:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T17:06:05Z"
      },
      "message": "Convert ForEachNode* functions to take a templated function argument rather than a std::function to eliminate std::function overhead",
      "tree": {
        "sha": "b8891fceb520ab61ffd67a2b5c9fa5c5bf892a4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8891fceb520ab61ffd67a2b5c9fa5c5bf892a4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e700cd0bc885340563df9e6b7a5b6c6603b8c984",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e700cd0bc885340563df9e6b7a5b6c6603b8c984",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e700cd0bc885340563df9e6b7a5b6c6603b8c984",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e700cd0bc885340563df9e6b7a5b6c6603b8c984/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1a2295f0d58423652b124b48fc887a9721b765c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1a2295f0d58423652b124b48fc887a9721b765c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1a2295f0d58423652b124b48fc887a9721b765c"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 82,
      "deletions": 81
    },
    "files": [
      {
        "sha": "19c14e105e59724de71b3cda0cbf984e31419025",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 73,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e700cd0bc885340563df9e6b7a5b6c6603b8c984/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e700cd0bc885340563df9e6b7a5b6c6603b8c984/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e700cd0bc885340563df9e6b7a5b6c6603b8c984",
        "patch": "@@ -2697,79 +2697,6 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n     return found != nullptr && func(found);\n }\n \n-bool CConnman::ForEachNodeContinueIf(std::function<bool(CNode* pnode)> func)\n-{\n-    LOCK(cs_vNodes);\n-    for (auto&& node : vNodes)\n-        if(!func(node))\n-            return false;\n-    return true;\n-}\n-\n-bool CConnman::ForEachNodeContinueIf(std::function<bool(const CNode* pnode)> func) const\n-{\n-    LOCK(cs_vNodes);\n-    for (const auto& node : vNodes)\n-        if(!func(node))\n-            return false;\n-    return true;\n-}\n-\n-bool CConnman::ForEachNodeContinueIfThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post)\n-{\n-    bool ret = true;\n-    LOCK(cs_vNodes);\n-    for (auto&& node : vNodes)\n-        if(!pre(node)) {\n-            ret = false;\n-            break;\n-        }\n-    post();\n-    return ret;\n-}\n-\n-bool CConnman::ForEachNodeContinueIfThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const\n-{\n-    bool ret = true;\n-    LOCK(cs_vNodes);\n-    for (const auto& node : vNodes)\n-        if(!pre(node)) {\n-            ret = false;\n-            break;\n-        }\n-    post();\n-    return ret;\n-}\n-\n-void CConnman::ForEachNode(std::function<void(CNode* pnode)> func)\n-{\n-    LOCK(cs_vNodes);\n-    for (auto&& node : vNodes)\n-        func(node);\n-}\n-\n-void CConnman::ForEachNode(std::function<void(const CNode* pnode)> func) const\n-{\n-    LOCK(cs_vNodes);\n-    for (const auto& node : vNodes)\n-        func(node);\n-}\n-\n-void CConnman::ForEachNodeThen(std::function<void(CNode* pnode)> pre, std::function<void()> post)\n-{\n-    LOCK(cs_vNodes);\n-    for (auto&& node : vNodes)\n-\t\tpre(node);\n-    post();\n-}\n-\n-void CConnman::ForEachNodeThen(std::function<void(const CNode* pnode)> pre, std::function<void()> post) const\n-{\n-    LOCK(cs_vNodes);\n-    for (const auto& node : vNodes)\n-\t\tpre(node);\n-    post();\n-}\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }"
      },
      {
        "sha": "97604ca56e679a8dc603ffe349aad81f3d25ad88",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 82,
        "deletions": 8,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e700cd0bc885340563df9e6b7a5b6c6603b8c984/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e700cd0bc885340563df9e6b7a5b6c6603b8c984/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=e700cd0bc885340563df9e6b7a5b6c6603b8c984",
        "patch": "@@ -129,14 +129,88 @@ class CConnman\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n-    bool ForEachNodeContinueIf(std::function<bool(CNode* pnode)> func);\n-    bool ForEachNodeContinueIf(std::function<bool(const CNode* pnode)> func) const;\n-    bool ForEachNodeContinueIfThen(std::function<bool(CNode* pnode)> pre, std::function<void()> post);\n-    bool ForEachNodeContinueIfThen(std::function<bool(const CNode* pnode)> pre, std::function<void()> post) const;\n-    void ForEachNode(std::function<void(CNode* pnode)> func);\n-    void ForEachNode(std::function<void(const CNode* pnode)> func) const;\n-    void ForEachNodeThen(std::function<void(CNode* pnode)> pre, std::function<void()> post);\n-    void ForEachNodeThen(std::function<void(const CNode* pnode)> pre, std::function<void()> post) const;\n+\n+    template<typename Callable>\n+    bool ForEachNodeContinueIf(Callable&& func)\n+    {\n+        LOCK(cs_vNodes);\n+        for (auto&& node : vNodes)\n+            if(!func(node))\n+                return false;\n+        return true;\n+    };\n+\n+    template<typename Callable>\n+    bool ForEachNodeContinueIf(Callable&& func) const\n+    {\n+        LOCK(cs_vNodes);\n+        for (const auto& node : vNodes)\n+            if(!func(node))\n+                return false;\n+        return true;\n+    };\n+\n+    template<typename Callable, typename CallableAfter>\n+    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post)\n+    {\n+        bool ret = true;\n+        LOCK(cs_vNodes);\n+        for (auto&& node : vNodes)\n+            if(!pre(node)) {\n+                ret = false;\n+                break;\n+            }\n+        post();\n+        return ret;\n+    };\n+\n+    template<typename Callable, typename CallableAfter>\n+    bool ForEachNodeContinueIfThen(Callable&& pre, CallableAfter&& post) const\n+    {\n+        bool ret = true;\n+        LOCK(cs_vNodes);\n+        for (const auto& node : vNodes)\n+            if(!pre(node)) {\n+                ret = false;\n+                break;\n+            }\n+        post();\n+        return ret;\n+    };\n+\n+    template<typename Callable>\n+    void ForEachNode(Callable&& func)\n+    {\n+        LOCK(cs_vNodes);\n+        for (auto&& node : vNodes)\n+            func(node);\n+    };\n+\n+    template<typename Callable>\n+    void ForEachNode(Callable&& func) const\n+    {\n+        LOCK(cs_vNodes);\n+        for (const auto& node : vNodes)\n+            func(node);\n+    };\n+\n+    template<typename Callable, typename CallableAfter>\n+    void ForEachNodeThen(Callable&& pre, CallableAfter&& post)\n+    {\n+        LOCK(cs_vNodes);\n+        for (auto&& node : vNodes)\n+            pre(node);\n+        post();\n+    };\n+\n+    template<typename Callable, typename CallableAfter>\n+    void ForEachNodeThen(Callable&& pre, CallableAfter&& post) const\n+    {\n+        LOCK(cs_vNodes);\n+        for (const auto& node : vNodes)\n+            pre(node);\n+        post();\n+    };\n \n     void RelayTransaction(const CTransaction& tx);\n "
      }
    ]
  },
  {
    "sha": "0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTAzYzViOTBmYTYxYjVkMTU5YTgyNWZjYjVhMDVjYTMxZDBkMWMz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-08-31T17:17:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-09-08T17:06:05Z"
      },
      "message": "net: move MAX_FEELER_CONNECTIONS into connman",
      "tree": {
        "sha": "ce713e812247644bb48b2b95d3c99343bf95dbb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce713e812247644bb48b2b95d3c99343bf95dbb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e700cd0bc885340563df9e6b7a5b6c6603b8c984",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e700cd0bc885340563df9e6b7a5b6c6603b8c984",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e700cd0bc885340563df9e6b7a5b6c6603b8c984"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "a8b2cde36bb7227a84d6ba869bf9a27aad20a9b4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3",
        "patch": "@@ -1520,6 +1520,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nRelevantServices = nRelevantServices;\n     connOptions.nMaxConnections = nMaxConnections;\n     connOptions.nMaxOutbound = std::min(MAX_OUTBOUND_CONNECTIONS, connOptions.nMaxConnections);\n+    connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chainActive.Height();\n     connOptions.uiInterface = &uiInterface;\n     connOptions.nSendBufferMaxSize = 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);"
      },
      {
        "sha": "b39ef9f54a1af3d93c0c3a173434b156dee2755c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3",
        "patch": "@@ -61,11 +61,6 @@\n #endif\n #endif\n \n-\n-namespace {\n-    const int MAX_FEELER_CONNECTIONS = 1;\n-}\n-\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n //\n@@ -971,7 +966,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     SOCKET hSocket = accept(hListenSocket.socket, (struct sockaddr*)&sockaddr, &len);\n     CAddress addr;\n     int nInbound = 0;\n-    int nMaxInbound = nMaxConnections - (nMaxOutbound + MAX_FEELER_CONNECTIONS);\n+    int nMaxInbound = nMaxConnections - (nMaxOutbound + nMaxFeeler);\n     assert(nMaxInbound > 0);\n \n     if (hSocket != INVALID_SOCKET)\n@@ -1624,7 +1619,7 @@ void CConnman::ThreadOpenConnections()\n                 }\n             }\n         }\n-        assert(nOutbound <= (nMaxOutbound + MAX_FEELER_CONNECTIONS));\n+        assert(nOutbound <= (nMaxOutbound + nMaxFeeler));\n \n         // Feeler Connections\n         //\n@@ -2060,6 +2055,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     nLocalServices = connOptions.nLocalServices;\n     nMaxConnections = connOptions.nMaxConnections;\n     nMaxOutbound = std::min((connOptions.nMaxOutbound), nMaxConnections);\n+    nMaxFeeler = connOptions.nMaxFeeler;\n \n     nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n     nReceiveFloodSize = connOptions.nSendBufferMaxSize;\n@@ -2106,7 +2102,7 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n \n     if (semOutbound == NULL) {\n         // initialize semaphore\n-        semOutbound = new CSemaphore(std::min((nMaxOutbound + MAX_FEELER_CONNECTIONS), nMaxConnections));\n+        semOutbound = new CSemaphore(std::min((nMaxOutbound + nMaxFeeler), nMaxConnections));\n     }\n \n     if (pnodeLocalHost == NULL) {\n@@ -2162,7 +2158,7 @@ void CConnman::Stop()\n {\n     LogPrintf(\"%s\\n\",__func__);\n     if (semOutbound)\n-        for (int i=0; i<(nMaxOutbound + MAX_FEELER_CONNECTIONS); i++)\n+        for (int i=0; i<(nMaxOutbound + nMaxFeeler); i++)\n             semOutbound->post();\n \n     if (fAddressesInitialized)"
      },
      {
        "sha": "a48ee02c44906ac2721c5db18edde4e166ca54e6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0103c5b90fa61b5d159a825fcb5a05ca31d0d1c3",
        "patch": "@@ -115,6 +115,7 @@ class CConnman\n         ServiceFlags nRelevantServices = NODE_NONE;\n         int nMaxConnections = 0;\n         int nMaxOutbound = 0;\n+        int nMaxFeeler = 0;\n         int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n         unsigned int nSendBufferMaxSize = 0;\n@@ -384,6 +385,7 @@ class CConnman\n     CSemaphore *semOutbound;\n     int nMaxConnections;\n     int nMaxOutbound;\n+    int nMaxFeeler;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n };"
      }
    ]
  }
]