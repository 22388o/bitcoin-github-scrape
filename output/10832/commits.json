[
  {
    "sha": "dba485d65168794d8be39bd5e8de8777e7085434",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmE0ODVkNjUxNjg3OTRkOGJlMzliZDVlOGRlODc3N2U3MDg1NDM0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-15T08:46:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-07-17T12:56:52Z"
      },
      "message": "init: Factor out AppInitLockDataDirectory\n\nAlternative to #10818, alternative solution to #10815.\n\nAfter this change: All the AppInit steps before and inclusive\nAppInitLockDataDirectory must not have Shutdown() called in case of\nfailure. Only when AppInitMain fails, Shutdown should be called.\n\nChanges the GUI and bitcoind code to consistently do this.",
      "tree": {
        "sha": "8d5436757050d19f9cfe850ec968c83ac664f62a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d5436757050d19f9cfe850ec968c83ac664f62a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dba485d65168794d8be39bd5e8de8777e7085434",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZbLQWAAoJEB5K7WKYbNJdesEIAJ9Og6vY69s02QB0CSoTu+p5\n+R1wagZnKOsqP9Ib1L1cmbyCsvG/ThB9Y2rLmzkjJeh1Qq2uAT8qc7p7GGRLNvYN\n3vRBUyiZU5g+tR2szSGzcuq4M+ItcIAosXMdRAgO/5pxp/OLn8ZCRJo3NsNb6JJA\nfmzVmXWGczLUDUhGab2DJeK4j1GZvP+pxcXxh/i5snmDN4Xiphz/SRbV8I9fsQk7\ndgpgtxB9W3hFXlBFU4mQYWpugJJgNS4zdA3qfjXHmiuPfrrqXlLjSTDqQCmZER2w\nxHgG5xvTFr4R2UcpgEKC2h+a52cG7zrZct5WTowHUIoBN0KQPBwWcHWeeWifrDk=\n=IL24\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d5436757050d19f9cfe850ec968c83ac664f62a\nparent 8fdd23a224ba236874ef662c4ca311b002dbcab3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1500108366 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1500296212 +0200\n\ninit: Factor out AppInitLockDataDirectory\n\nAlternative to #10818, alternative solution to #10815.\n\nAfter this change: All the AppInit steps before and inclusive\nAppInitLockDataDirectory must not have Shutdown() called in case of\nfailure. Only when AppInitMain fails, Shutdown should be called.\n\nChanges the GUI and bitcoind code to consistently do this.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba485d65168794d8be39bd5e8de8777e7085434",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dba485d65168794d8be39bd5e8de8777e7085434",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dba485d65168794d8be39bd5e8de8777e7085434/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fdd23a224ba236874ef662c4ca311b002dbcab3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fdd23a224ba236874ef662c4ca311b002dbcab3"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 67,
      "deletions": 30
    },
    "files": [
      {
        "sha": "f3844e9d479a9ad093a842a0016a45e985995f38",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -159,7 +159,12 @@ bool AppInit(int argc, char* argv[])\n             return false;\n #endif // HAVE_DECL_DAEMON\n         }\n-\n+        // Lock data directory after daemonization\n+        if (!AppInitLockDataDirectory())\n+        {\n+            // If locking the data directory failed, exit immediately\n+            exit(EXIT_FAILURE);\n+        }\n         fRet = AppInitMain(threadGroup, scheduler);\n     }\n     catch (const std::exception& e) {"
      },
      {
        "sha": "d9b98be739d8fe6fcf3ca3417c9e7a2ee49d4f84",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -1170,21 +1170,27 @@ bool AppInitSanityChecks()\n         return InitError(strprintf(_(\"Initialization sanity check failed. %s is shutting down.\"), _(PACKAGE_NAME)));\n \n     // Probe the data directory lock to give an early error message, if possible\n+    // We cannot hold the data directory lock here, as the forking for daemon() hasn't yet happened,\n+    // and a fork will cause weird behavior to it.\n     return LockDataDirectory(true);\n }\n \n-bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+bool AppInitLockDataDirectory()\n {\n-    const CChainParams& chainparams = Params();\n-    // ********************************************************* Step 4a: application initialization\n     // After daemonization get the data directory lock again and hold on to it until exit\n     // This creates a slight window for a race condition to happen, however this condition is harmless: it\n     // will at most make us exit without printing a message to console.\n     if (!LockDataDirectory(false)) {\n         // Detailed error printed inside LockDataDirectory\n         return false;\n     }\n+    return true;\n+}\n \n+bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n+{\n+    const CChainParams& chainparams = Params();\n+    // ********************************************************* Step 4a: application initialization\n #ifndef WIN32\n     CreatePidFile(GetPidFile(), getpid());\n #endif"
      },
      {
        "sha": "a0a824738cfe723ce68bbf0d1f01e3f508e1f85c",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -27,27 +27,33 @@ void InitLogging();\n void InitParameterInteraction();\n \n /** Initialize bitcoin core: Basic context setup.\n- *  @note This can be done before daemonization.\n+ *  @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n bool AppInitBasicSetup();\n /**\n  * Initialization: parameter interaction.\n- * @note This can be done before daemonization.\n+ * @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitBasicSetup should have been called.\n  */\n bool AppInitParameterInteraction();\n /**\n  * Initialization sanity checks: ecc init, sanity checks, dir lock.\n- * @note This can be done before daemonization.\n+ * @note This can be done before daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitParameterInteraction should have been called.\n  */\n bool AppInitSanityChecks();\n /**\n- * Bitcoin core main initialization.\n- * @note This should only be done after daemonization.\n+ * Lock bitcoin core data directory.\n+ * @note This should only be done after daemonization. Do not call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitSanityChecks should have been called.\n  */\n+bool AppInitLockDataDirectory();\n+/**\n+ * Bitcoin core main initialization.\n+ * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n+ * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n+ */\n bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler);\n \n /** The help message mode determines what help message to show */"
      },
      {
        "sha": "4a4116c67024cc4bf2f927b708d9f06fcad9345b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 21,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dba485d65168794d8be39bd5e8de8777e7085434/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dba485d65168794d8be39bd5e8de8777e7085434/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=dba485d65168794d8be39bd5e8de8777e7085434",
        "patch": "@@ -178,6 +178,10 @@ class BitcoinCore: public QObject\n     Q_OBJECT\n public:\n     explicit BitcoinCore();\n+    /** Basic initialization, before starting initialization/shutdown thread.\n+     * Return true on success.\n+     */\n+    static bool baseInitialize();\n \n public Q_SLOTS:\n     void initialize();\n@@ -270,26 +274,32 @@ void BitcoinCore::handleRunawayException(const std::exception *e)\n     Q_EMIT runawayException(QString::fromStdString(GetWarnings(\"gui\")));\n }\n \n+bool BitcoinCore::baseInitialize()\n+{\n+    if (!AppInitBasicSetup())\n+    {\n+        return false;\n+    }\n+    if (!AppInitParameterInteraction())\n+    {\n+        return false;\n+    }\n+    if (!AppInitSanityChecks())\n+    {\n+        return false;\n+    }\n+    if (!AppInitLockDataDirectory())\n+    {\n+        return false;\n+    }\n+    return true;\n+}\n+\n void BitcoinCore::initialize()\n {\n     try\n     {\n         qDebug() << __func__ << \": Running initialization in thread\";\n-        if (!AppInitBasicSetup())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n-        if (!AppInitParameterInteraction())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n-        if (!AppInitSanityChecks())\n-        {\n-            Q_EMIT initializeResult(false);\n-            return;\n-        }\n         bool rv = AppInitMain(threadGroup, scheduler);\n         Q_EMIT initializeResult(rv);\n     } catch (const std::exception& e) {\n@@ -689,23 +699,33 @@ int main(int argc, char *argv[])\n     if (GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n+    int rv = EXIT_SUCCESS;\n     try\n     {\n         app.createWindow(networkStyle.data());\n-        app.requestInitialize();\n+        // Perform base initialization before spinning up initialization/shutdown thread\n+        // This is acceptable because this function only contains steps that are quick to execute,\n+        // so the GUI thread won't be held up.\n+        if (BitcoinCore::baseInitialize()) {\n+            app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n-        WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n+            WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"%1 didn't yet exit safely...\").arg(QObject::tr(PACKAGE_NAME)), (HWND)app.getMainWinId());\n #endif\n-        app.exec();\n-        app.requestShutdown();\n-        app.exec();\n+            app.exec();\n+            app.requestShutdown();\n+            app.exec();\n+            rv = app.getReturnValue();\n+        } else {\n+            // A dialog with detailed error will have been shown by InitError()\n+            rv = EXIT_FAILURE;\n+        }\n     } catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"Runaway exception\");\n         app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"Runaway exception\");\n         app.handleRunawayException(QString::fromStdString(GetWarnings(\"gui\")));\n     }\n-    return app.getReturnValue();\n+    return rv;\n }\n #endif // BITCOIN_QT_TEST"
      }
    ]
  }
]