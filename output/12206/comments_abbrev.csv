MarcoFalke,2018-01-17T01:33:18Z,"Obviously all other functional tests are affected as well. I will try to fix them in a later commit, but the above fix is needed the most as it is almost always failing on travis.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358165352,358165352,
promag,2018-01-17T01:35:05Z,Concept ACK. Not sure the test should handle this way. IMO some sync_mempool(flush_scheduler=True) would be better?,https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358165674,358165674,
MarcoFalke,2018-01-17T01:50:13Z,"Yeah. Maybe an alternative would be to always catch up with the queue?\n\n\n```diff\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -1279,23 +1279,7 @@ void CWallet::BlockUntilSyncedToCurrentChain() {\n     AssertLockNotHeld(cs_main);\n     AssertLockNotHeld(cs_wallet);\n \n-    {\n-        // Skip the queue-draining stuff if we know we're caught up with\n-        // chai",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358168381,358168381,
meshcollider,2018-01-17T11:38:00Z,"I think @promag was suggesting a different way for the tests to handle it, not to change the core code btw.\n\nCurrent approach seems fine to me at least for now,\nutACK https://github.com/bitcoin/bitcoin/pull/12206/commits/fadc3f6249a9eddaa3078e570a4465162032195e ",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358278979,358278979,
MarcoFalke,2018-01-17T13:29:16Z,"I am not aware of a way to flush the scheduler from outside the code without modifying the code or mining a block. Though, I might be misssing something.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358304305,358304305,
promag,2018-01-17T13:54:52Z,"I was suggesting adding a RPC to just do `SyncWithValidationInterfaceQueue` or whatever. \n\nFeels weird to replace assertions with poll.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358311150,358311150,
MarcoFalke,2018-01-17T15:43:57Z,"Yes, I plan to do something like that after branch off of 0.16. At this point I'd feel bad to delay 0.16 by spawning unnecessary review-load on the queue.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358344752,358344752,
TheBlueMatt,2018-01-17T21:05:50Z,"I agree with @promag here, and that fix should be just as/more simple/obvious than even this fix. Just add an RPC that calls SyncWithValidationInterfaceQueue() and call that at the end of sync_mempools(), at least then its much more obvious the fix is complete, and should require a lower review burden.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358444996,358444996,
MarcoFalke,2018-01-17T21:50:47Z,Introduced the new `syncwithvalidationinterfacequeue` rpc as requested by @TheBlueMatt and @promag ,https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358459395,358459395,
laanwj,2018-01-18T14:06:54Z,utACK fa1e69e,https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-358656142,358656142,
jnewbery,2018-01-22T17:01:37Z,"utACK fa1e69e52bf8de08b1ce7a774416aa7a8d20068b\n\nOne comment: this places a brand new RPC in the mainline test setup path, which will make efforts like #12134 more difficult. I think binaries from commits prior to this will fail running any test scripts from this commit onwards, because the test code will try to call a non-existent RPC.\n\nNot a reason not to merge, but something to keep in m",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-359492682,359492682,
MarcoFalke,2018-01-22T18:11:36Z,"@jnewbery This is true for every release, since every release adds new rpcs.\n\nAlso it should be trivial to work around in python with a one or two-line change.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-359513901,359513901,
jnewbery,2018-01-22T18:23:29Z,"> since every release adds new rpcs\n\nindeed, but not all RPCs are called in the mainline `setup_nodes()` method.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-359517408,359517408,
MarcoFalke,2018-01-22T18:53:00Z,"That looks like an overkill. Currently `setup_network` is only called after the chain was set up and I don't think there are any plans to change this in the near future. Syncing the (empty) mempools just after a ""fresh"" chain was set up is probably just wasting time on travis.",https://github.com/bitcoin/bitcoin/pull/12206#issuecomment-359526219,359526219,
promag,2018-01-17T21:58:51Z,"Sort, alignment... :trollface: ",https://github.com/bitcoin/bitcoin/pull/12206#discussion_r162191720,162191720,src/rpc/blockchain.cpp
promag,2018-01-18T00:45:40Z,Not sure but `src/rpc/misc.cpp` is a better place?,https://github.com/bitcoin/bitcoin/pull/12206#discussion_r162222603,162222603,src/rpc/blockchain.cpp
promag,2018-01-18T00:47:35Z,"How about not making it optional? If there is such need in the future, add it then?",https://github.com/bitcoin/bitcoin/pull/12206#discussion_r162222871,162222871,test/functional/test_framework/util.py
MarcoFalke,2018-01-18T01:22:22Z,"Right now it is overkilling, i.e. always flushing. But that is not necessary, as for non-wallet functional tests and also most wallet functional test it can be turned off. I will leave the ""turning it off"" for later.",https://github.com/bitcoin/bitcoin/pull/12206#discussion_r162227313,162227313,test/functional/test_framework/util.py
MarcoFalke,2018-01-18T01:24:48Z,"My understanding is that `blockchain.cpp` also contains mempool rpcs. And this one is about mempool, no?",https://github.com/bitcoin/bitcoin/pull/12206#discussion_r162227619,162227619,src/rpc/blockchain.cpp
promag,2018-01-18T01:29:15Z,"Ok, so minimal diff for now.",https://github.com/bitcoin/bitcoin/pull/12206#discussion_r162228176,162228176,test/functional/test_framework/util.py
promag,2018-01-18T01:32:40Z,Ok.,https://github.com/bitcoin/bitcoin/pull/12206#discussion_r162228616,162228616,src/rpc/blockchain.cpp
