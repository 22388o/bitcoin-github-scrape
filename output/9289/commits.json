[
  {
    "sha": "7325b1556684158461c9c0df056c9d071444b54e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzI1YjE1NTY2ODQxNTg0NjFjOWMwZGYwNTZjOWQwNzE0NDRiNTRl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-27T22:11:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-03T22:53:09Z"
      },
      "message": "net: a few small cleanups before replacing boost threads\n\n- Drop the interruption point directly after the pnode allocation. This would\n    be leaky if hit.\n- Rearrange thread creation so that the socket handler comes first",
      "tree": {
        "sha": "191dd644161c06211bd041502f968c757ece4677",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/191dd644161c06211bd041502f968c757ece4677"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7325b1556684158461c9c0df056c9d071444b54e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7325b1556684158461c9c0df056c9d071444b54e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7325b1556684158461c9c0df056c9d071444b54e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7325b1556684158461c9c0df056c9d071444b54e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a524b8e8fe69ef487fd8ea1b4f7a03f473ed201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a524b8e8fe69ef487fd8ea1b4f7a03f473ed201",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a524b8e8fe69ef487fd8ea1b4f7a03f473ed201"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9c58577f104cd7031b17e0715920d6eb5e100383",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7325b1556684158461c9c0df056c9d071444b54e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7325b1556684158461c9c0df056c9d071444b54e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7325b1556684158461c9c0df056c9d071444b54e",
        "patch": "@@ -1806,7 +1806,6 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         return false;\n \n     CNode* pnode = ConnectNode(addrConnect, pszDest, fCountFailure);\n-    boost::this_thread::interruption_point();\n \n     if (!pnode)\n         return false;\n@@ -2146,14 +2145,14 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     // Start threads\n     //\n \n+    // Send and receive from sockets, accept connections\n+    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"net\", boost::function<void()>(boost::bind(&CConnman::ThreadSocketHandler, this))));\n+\n     if (!GetBoolArg(\"-dnsseed\", true))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n         threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"dnsseed\", boost::function<void()>(boost::bind(&CConnman::ThreadDNSAddressSeed, this))));\n \n-    // Send and receive from sockets, accept connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"net\", boost::function<void()>(boost::bind(&CConnman::ThreadSocketHandler, this))));\n-\n     // Initiate outbound connections from -addnode\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"addcon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenAddedConnections, this))));\n "
      }
    ]
  },
  {
    "sha": "799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTlkZjkxMTVmMjYyZmJjMjVjMmMyNzM3Y2NkOGE0ZTFiMjBlNWIw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-27T22:12:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-03T22:53:09Z"
      },
      "message": "net: add CThreadInterrupt and InterruptibleSleep",
      "tree": {
        "sha": "6f146cd1c5ae50626955b2b31de244d0a746ba4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f146cd1c5ae50626955b2b31de244d0a746ba4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7325b1556684158461c9c0df056c9d071444b54e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7325b1556684158461c9c0df056c9d071444b54e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7325b1556684158461c9c0df056c9d071444b54e"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3428d4613d6f847c91e7742e6269425ddd0e6c0b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
        "patch": "@@ -138,6 +138,7 @@ BITCOIN_CORE_H = \\\n   support/lockedpool.h \\\n   sync.h \\\n   threadsafety.h \\\n+  threadinterrupt.h \\\n   timedata.h \\\n   torcontrol.h \\\n   txdb.h \\\n@@ -327,6 +328,7 @@ libbitcoin_util_a_SOURCES = \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n+  threadinterrupt.cpp \\\n   util.cpp \\\n   utilmoneystr.cpp \\\n   utilstrencodings.cpp \\"
      },
      {
        "sha": "9d691079edbace09c7fed33e1361ecf2ad4cf775",
        "filename": "src/threadinterrupt.cpp",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0/src/threadinterrupt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0/src/threadinterrupt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.cpp?ref=799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"threadinterrupt.h\"\n+\n+CThreadInterrupt::operator bool() const\n+{\n+    return flag.load(std::memory_order_acquire);\n+}\n+\n+void CThreadInterrupt::reset()\n+{\n+    flag.store(false, std::memory_order_release);\n+}\n+\n+void CThreadInterrupt::operator()()\n+{\n+    {\n+        std::unique_lock<std::mutex> lock(mut);\n+        flag.store(true, std::memory_order_release);\n+    }\n+    cond.notify_all();\n+}\n+\n+bool CThreadInterrupt::sleep_for(std::chrono::milliseconds rel_time)\n+{\n+    std::unique_lock<std::mutex> lock(mut);\n+    return !cond.wait_for(lock, rel_time, [this]() { return flag.load(std::memory_order_acquire); });\n+}\n+\n+bool CThreadInterrupt::sleep_for(std::chrono::seconds rel_time)\n+{\n+    return sleep_for(std::chrono::duration_cast<std::chrono::milliseconds>(rel_time));\n+}\n+\n+bool CThreadInterrupt::sleep_for(std::chrono::minutes rel_time)\n+{\n+    return sleep_for(std::chrono::duration_cast<std::chrono::milliseconds>(rel_time));\n+}"
      },
      {
        "sha": "54e31028089f2031178739aa3792289ed30aaa00",
        "filename": "src/threadinterrupt.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0/src/threadinterrupt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0/src/threadinterrupt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadinterrupt.h?ref=799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_THREADINTERRUPT_H\n+#define BITCOIN_THREADINTERRUPT_H\n+\n+#include <atomic>\n+#include <chrono>\n+#include <condition_variable>\n+#include <mutex>\n+\n+/*\n+    A helper class for interruptible sleeps. Calling operator() will interrupt\n+    any current sleep, and after that point operator bool() will return true\n+    until reset.\n+*/\n+class CThreadInterrupt\n+{\n+public:\n+    explicit operator bool() const;\n+    void operator()();\n+    void reset();\n+    bool sleep_for(std::chrono::milliseconds rel_time);\n+    bool sleep_for(std::chrono::seconds rel_time);\n+    bool sleep_for(std::chrono::minutes rel_time);\n+\n+private:\n+    std::condition_variable cond;\n+    std::mutex mut;\n+    std::atomic<bool> flag;\n+};\n+\n+#endif //BITCOIN_THREADINTERRUPT_H"
      }
    ]
  },
  {
    "sha": "0985052319263bd7ca9744af3504682b3ea8e21a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTg1MDUyMzE5MjYzYmQ3Y2E5NzQ0YWYzNTA0NjgyYjNlYThlMjFh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-27T22:12:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-03T22:53:09Z"
      },
      "message": "net: make net interruptible\n\nAlso now that net threads are interruptible, switch them to use std\nthreads/binds/mutexes/condvars.",
      "tree": {
        "sha": "cc74f7747c52fa8de11b50683058af319f0f50d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc74f7747c52fa8de11b50683058af319f0f50d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0985052319263bd7ca9744af3504682b3ea8e21a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0985052319263bd7ca9744af3504682b3ea8e21a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0985052319263bd7ca9744af3504682b3ea8e21a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0985052319263bd7ca9744af3504682b3ea8e21a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/799df9115f262fbc25c2c2737ccd8a4e1b20e5b0"
      }
    ],
    "stats": {
      "total": 128,
      "additions": 91,
      "deletions": 37
    },
    "files": [
      {
        "sha": "7a493cc1959abc0e9729c5578a07dbb7cae4a341",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0985052319263bd7ca9744af3504682b3ea8e21a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0985052319263bd7ca9744af3504682b3ea8e21a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0985052319263bd7ca9744af3504682b3ea8e21a",
        "patch": "@@ -176,6 +176,8 @@ void Interrupt(boost::thread_group& threadGroup)\n     InterruptRPC();\n     InterruptREST();\n     InterruptTorControl();\n+    if (g_connman)\n+        g_connman->Interrupt();\n     threadGroup.interrupt_all();\n }\n \n@@ -1572,7 +1574,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxOutboundTimeframe = nMaxOutboundTimeframe;\n     connOptions.nMaxOutboundLimit = nMaxOutboundLimit;\n \n-    if(!connman.Start(threadGroup, scheduler, strNodeError, connOptions))\n+    if (!connman.Start(scheduler, strNodeError, connOptions))\n         return InitError(strNodeError);\n \n     // ********************************************************* Step 12: finished"
      },
      {
        "sha": "a66679cd85bad30975ee10538fb14c4c8700ae62",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 34,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0985052319263bd7ca9744af3504682b3ea8e21a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0985052319263bd7ca9744af3504682b3ea8e21a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0985052319263bd7ca9744af3504682b3ea8e21a",
        "patch": "@@ -1042,7 +1042,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n void CConnman::ThreadSocketHandler()\n {\n     unsigned int nPrevNodeCount = 0;\n-    while (true)\n+    while (!interruptNet)\n     {\n         //\n         // Disconnect nodes\n@@ -1180,7 +1180,8 @@ void CConnman::ThreadSocketHandler()\n \n         int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n                              &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        boost::this_thread::interruption_point();\n+        if (interruptNet)\n+            return;\n \n         if (nSelect == SOCKET_ERROR)\n         {\n@@ -1193,7 +1194,8 @@ void CConnman::ThreadSocketHandler()\n             }\n             FD_ZERO(&fdsetSend);\n             FD_ZERO(&fdsetError);\n-            MilliSleep(timeout.tv_usec/1000);\n+            if (!interruptNet.sleep_for(std::chrono::milliseconds(timeout.tv_usec/1000)))\n+                return;\n         }\n \n         //\n@@ -1219,7 +1221,8 @@ void CConnman::ThreadSocketHandler()\n         }\n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n-            boost::this_thread::interruption_point();\n+            if (interruptNet)\n+                return;\n \n             //\n             // Receive\n@@ -1241,7 +1244,7 @@ void CConnman::ThreadSocketHandler()\n                             if (!pnode->ReceiveMsgBytes(pchBuf, nBytes, notify))\n                                 pnode->CloseSocketDisconnect();\n                             if(notify)\n-                                messageHandlerCondition.notify_one();\n+                                condMsgProc.notify_one();\n                             pnode->nLastRecv = GetTime();\n                             pnode->nRecvBytes += nBytes;\n                             RecordBytesRecv(nBytes);\n@@ -1469,7 +1472,8 @@ void CConnman::ThreadDNSAddressSeed()\n     //  less influence on the network topology, and reduces traffic to the seeds.\n     if ((addrman.size() > 0) &&\n         (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n-        MilliSleep(11 * 1000);\n+        if (!interruptNet.sleep_for(std::chrono::seconds(11)))\n+            return;\n \n         LOCK(cs_vNodes);\n         int nRelevant = 0;\n@@ -1580,10 +1584,12 @@ void CConnman::ThreadOpenConnections()\n                 OpenNetworkConnection(addr, false, NULL, strAddr.c_str());\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n-                    MilliSleep(500);\n+                    if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n+                        return;\n                 }\n             }\n-            MilliSleep(500);\n+            if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n+                return;\n         }\n     }\n \n@@ -1592,14 +1598,16 @@ void CConnman::ThreadOpenConnections()\n \n     // Minimum time before next feeler connection (in microseconds).\n     int64_t nNextFeeler = PoissonNextSend(nStart*1000*1000, FEELER_INTERVAL);\n-    while (true)\n+    while (!interruptNet)\n     {\n         ProcessOneShot();\n \n-        MilliSleep(500);\n+        if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n+            return;\n \n         CSemaphoreGrant grant(*semOutbound);\n-        boost::this_thread::interruption_point();\n+        if (interruptNet)\n+            return;\n \n         // Add seed nodes if DNS seeds are all down (an infrastructure attack?).\n         if (addrman.size() == 0 && (GetTime() - nStart > 60)) {\n@@ -1657,7 +1665,7 @@ void CConnman::ThreadOpenConnections()\n \n         int64_t nANow = GetAdjustedTime();\n         int nTries = 0;\n-        while (true)\n+        while (!interruptNet)\n         {\n             CAddrInfo addr = addrman.Select(fFeeler);\n \n@@ -1700,7 +1708,8 @@ void CConnman::ThreadOpenConnections()\n             if (fFeeler) {\n                 // Add small amount of random noise before connection to avoid synchronization.\n                 int randsleep = GetRandInt(FEELER_SLEEP_WINDOW * 1000);\n-                MilliSleep(randsleep);\n+                if (!interruptNet.sleep_for(std::chrono::milliseconds(randsleep)))\n+                    return;\n                 LogPrint(\"net\", \"Making feeler connection to %s\\n\", addrConnect.ToString());\n             }\n \n@@ -1779,11 +1788,12 @@ void CConnman::ThreadOpenAddedConnections()\n                 // OpenNetworkConnection can detect existing connections to that IP/port.\n                 CService service(LookupNumeric(info.strAddedNode.c_str(), Params().GetDefaultPort()));\n                 OpenNetworkConnection(CAddress(service, NODE_NONE), false, &grant, info.strAddedNode.c_str(), false);\n-                MilliSleep(500);\n+                if (!interruptNet.sleep_for(std::chrono::milliseconds(500)))\n+                    return;\n             }\n         }\n-\n-        MilliSleep(120000); // Retry every 2 minutes\n+        if (!interruptNet.sleep_for(std::chrono::minutes(2)))\n+            return;\n     }\n }\n \n@@ -1793,7 +1803,9 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     //\n     // Initiate outbound network connection\n     //\n-    boost::this_thread::interruption_point();\n+    if (interruptNet) {\n+        return false;\n+    }\n     if (!fNetworkActive) {\n         return false;\n     }\n@@ -1819,13 +1831,9 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     return true;\n }\n \n-\n void CConnman::ThreadMessageHandler()\n {\n-    boost::mutex condition_mutex;\n-    boost::unique_lock<boost::mutex> lock(condition_mutex);\n-\n-    while (true)\n+    while (!flagInterruptMsgProc)\n     {\n         std::vector<CNode*> vNodesCopy;\n         {\n@@ -1860,15 +1868,17 @@ void CConnman::ThreadMessageHandler()\n                     }\n                 }\n             }\n-            boost::this_thread::interruption_point();\n+            if (flagInterruptMsgProc)\n+                return;\n \n             // Send messages\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n                     GetNodeSignals().SendMessages(pnode, *this);\n             }\n-            boost::this_thread::interruption_point();\n+            if (flagInterruptMsgProc)\n+                return;\n         }\n \n         {\n@@ -1877,8 +1887,10 @@ void CConnman::ThreadMessageHandler()\n                 pnode->Release();\n         }\n \n-        if (fSleep)\n-            messageHandlerCondition.timed_wait(lock, boost::posix_time::microsec_clock::universal_time() + boost::posix_time::milliseconds(100));\n+        if (fSleep) {\n+            std::unique_lock<std::mutex> lock(mutexMsgProc);\n+            condMsgProc.wait_until(lock, std::chrono::steady_clock::now() + std::chrono::milliseconds(100));\n+        }\n     }\n }\n \n@@ -2070,14 +2082,15 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     nMaxOutbound = 0;\n     nBestHeight = 0;\n     clientInterface = NULL;\n+    flagInterruptMsgProc = false;\n }\n \n NodeId CConnman::GetNewNodeId()\n {\n     return nLastNodeId.fetch_add(1, std::memory_order_relaxed);\n }\n \n-bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError, Options connOptions)\n+bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options connOptions)\n {\n     nTotalBytesRecv = 0;\n     nTotalBytesSent = 0;\n@@ -2144,24 +2157,26 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     //\n     // Start threads\n     //\n+    interruptNet.reset();\n+    flagInterruptMsgProc = false;\n \n     // Send and receive from sockets, accept connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"net\", boost::function<void()>(boost::bind(&CConnman::ThreadSocketHandler, this))));\n+    threadSocketHandler = std::thread(&TraceThread<std::function<void()> >, \"net\", std::function<void()>(std::bind(&CConnman::ThreadSocketHandler, this)));\n \n     if (!GetBoolArg(\"-dnsseed\", true))\n         LogPrintf(\"DNS seeding disabled\\n\");\n     else\n-        threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"dnsseed\", boost::function<void()>(boost::bind(&CConnman::ThreadDNSAddressSeed, this))));\n+        threadDNSAddressSeed = std::thread(&TraceThread<std::function<void()> >, \"dnsseed\", std::function<void()>(std::bind(&CConnman::ThreadDNSAddressSeed, this)));\n \n     // Initiate outbound connections from -addnode\n-    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"addcon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenAddedConnections, this))));\n+    threadOpenAddedConnections = std::thread(&TraceThread<std::function<void()> >, \"addcon\", std::function<void()>(std::bind(&CConnman::ThreadOpenAddedConnections, this)));\n \n     // Initiate outbound connections unless connect=0\n     if (!mapMultiArgs.count(\"-connect\") || mapMultiArgs.at(\"-connect\").size() != 1 || mapMultiArgs.at(\"-connect\")[0] != \"0\")\n-        threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"opencon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenConnections, this))));\n+        threadOpenConnections = std::thread(&TraceThread<std::function<void()> >, \"opencon\", std::function<void()>(std::bind(&CConnman::ThreadOpenConnections, this)));\n \n     // Process messages\n-    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"msghand\", boost::function<void()>(boost::bind(&CConnman::ThreadMessageHandler, this))));\n+    threadMessageHandler = std::thread(&TraceThread<std::function<void()> >, \"msghand\", std::function<void()>(std::bind(&CConnman::ThreadMessageHandler, this)));\n \n     // Dump network addresses\n     scheduler.scheduleEvery(boost::bind(&CConnman::DumpData, this), DUMP_ADDRESSES_INTERVAL);\n@@ -2184,12 +2199,33 @@ class CNetCleanup\n }\n instance_of_cnetcleanup;\n \n-void CConnman::Stop()\n+void CConnman::Interrupt()\n {\n-    LogPrintf(\"%s\\n\",__func__);\n+    {\n+        std::lock_guard<std::mutex> lock(mutexMsgProc);\n+        flagInterruptMsgProc = true;\n+    }\n+    condMsgProc.notify_all();\n+\n+    interruptNet();\n+\n     if (semOutbound)\n         for (int i=0; i<(nMaxOutbound + nMaxFeeler); i++)\n             semOutbound->post();\n+}\n+\n+void CConnman::Stop()\n+{\n+    if (threadMessageHandler.joinable())\n+        threadMessageHandler.join();\n+    if (threadOpenConnections.joinable())\n+        threadOpenConnections.join();\n+    if (threadOpenAddedConnections.joinable())\n+        threadOpenAddedConnections.join();\n+    if (threadDNSAddressSeed.joinable())\n+        threadDNSAddressSeed.join();\n+    if (threadSocketHandler.joinable())\n+        threadSocketHandler.join();\n \n     if (fAddressesInitialized)\n     {\n@@ -2232,6 +2268,7 @@ void CConnman::DeleteNode(CNode* pnode)\n \n CConnman::~CConnman()\n {\n+    Interrupt();\n     Stop();\n }\n "
      },
      {
        "sha": "b26f28326577c24e043e1a1ceffeca9c61ba6415",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 17,
        "deletions": 2,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0985052319263bd7ca9744af3504682b3ea8e21a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0985052319263bd7ca9744af3504682b3ea8e21a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0985052319263bd7ca9744af3504682b3ea8e21a",
        "patch": "@@ -19,11 +19,14 @@\n #include \"streams.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n+#include \"threadinterrupt.h\"\n \n #include <atomic>\n #include <deque>\n #include <stdint.h>\n+#include <thread>\n #include <memory>\n+#include <condition_variable>\n \n #ifndef WIN32\n #include <arpa/inet.h>\n@@ -142,8 +145,9 @@ class CConnman\n     };\n     CConnman(uint64_t seed0, uint64_t seed1);\n     ~CConnman();\n-    bool Start(boost::thread_group& threadGroup, CScheduler& scheduler, std::string& strNodeError, Options options);\n+    bool Start(CScheduler& scheduler, std::string& strNodeError, Options options);\n     void Stop();\n+    void Interrupt();\n     bool BindListenPort(const CService &bindAddr, std::string& strError, bool fWhitelisted = false);\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n@@ -402,7 +406,6 @@ class CConnman\n     std::list<CNode*> vNodesDisconnected;\n     mutable CCriticalSection cs_vNodes;\n     std::atomic<NodeId> nLastNodeId;\n-    boost::condition_variable messageHandlerCondition;\n \n     /** Services this instance offers */\n     ServiceFlags nLocalServices;\n@@ -419,6 +422,18 @@ class CConnman\n \n     /** SipHasher seeds for deterministic randomness */\n     const uint64_t nSeed0, nSeed1;\n+\n+    std::condition_variable condMsgProc;\n+    std::mutex mutexMsgProc;\n+    std::atomic<bool> flagInterruptMsgProc;\n+\n+    CThreadInterrupt interruptNet;\n+\n+    std::thread threadDNSAddressSeed;\n+    std::thread threadSocketHandler;\n+    std::thread threadOpenAddedConnections;\n+    std::thread threadOpenConnections;\n+    std::thread threadMessageHandler;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      }
    ]
  },
  {
    "sha": "d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Q3MDU2ZDJhNTYyMzAxYjM3NzBjNGVkZTFkZmM4ZmZiMDBjZjRi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-27T22:13:04Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-03T22:56:20Z"
      },
      "message": "net: make net processing interruptible",
      "tree": {
        "sha": "bf1afce0daac6bf2e8b71a181e2bcdf8b27e655c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf1afce0daac6bf2e8b71a181e2bcdf8b27e655c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0985052319263bd7ca9744af3504682b3ea8e21a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0985052319263bd7ca9744af3504682b3ea8e21a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0985052319263bd7ca9744af3504682b3ea8e21a"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 39,
      "deletions": 27
    },
    "files": [
      {
        "sha": "bbfada4301f4dabaa52628bfaca05d2819b52fe1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
        "patch": "@@ -1856,7 +1856,7 @@ void CConnman::ThreadMessageHandler()\n                 TRY_LOCK(pnode->cs_vRecvMsg, lockRecv);\n                 if (lockRecv)\n                 {\n-                    if (!GetNodeSignals().ProcessMessages(pnode, *this))\n+                    if (!GetNodeSignals().ProcessMessages(pnode, *this, flagInterruptMsgProc))\n                         pnode->CloseSocketDisconnect();\n \n                     if (pnode->nSendSize < GetSendBufferSize())\n@@ -1875,7 +1875,7 @@ void CConnman::ThreadMessageHandler()\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n-                    GetNodeSignals().SendMessages(pnode, *this);\n+                    GetNodeSignals().SendMessages(pnode, *this, flagInterruptMsgProc);\n             }\n             if (flagInterruptMsgProc)\n                 return;"
      },
      {
        "sha": "89c08da8695a930f8d8ced2e75d36d854b14590e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
        "patch": "@@ -460,8 +460,8 @@ struct CombinerAll\n // Signals for message handling\n struct CNodeSignals\n {\n-    boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, CConnman&), CombinerAll> SendMessages;\n+    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> ProcessMessages;\n+    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> SendMessages;\n     boost::signals2::signal<void (CNode*, CConnman&)> InitializeNode;\n     boost::signals2::signal<void (NodeId, bool&)> FinalizeNode;\n };"
      },
      {
        "sha": "f3a04080d14d421cb9a87b8144a5aa0a24891e23",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
        "patch": "@@ -886,7 +886,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n@@ -901,7 +901,9 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n \n         const CInv &inv = *it;\n         {\n-            boost::this_thread::interruption_point();\n+            if (interruptMsgProc)\n+                return;\n+\n             it++;\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n@@ -1055,7 +1057,7 @@ uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params\n     return nFetchFlags;\n }\n \n-bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman)\n+bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n \n@@ -1295,7 +1297,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         int64_t nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n         {\n-            boost::this_thread::interruption_point();\n+            if (interruptMsgProc)\n+                return true;\n \n             if ((addr.nServices & REQUIRED_SERVICES) != REQUIRED_SERVICES)\n                 continue;\n@@ -1377,7 +1380,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             CInv &inv = vInv[nInv];\n \n-            boost::this_thread::interruption_point();\n+            if (interruptMsgProc)\n+                return true;\n \n             bool fAlreadyHave = AlreadyHave(inv);\n             LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n@@ -1439,7 +1443,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n \n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n-        ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n+        ProcessGetData(pfrom, chainparams.GetConsensus(), connman, interruptMsgProc);\n     }\n \n \n@@ -1513,7 +1517,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             inv.type = State(pfrom->GetId())->fWantsCmpctWitness ? MSG_WITNESS_BLOCK : MSG_BLOCK;\n             inv.hash = req.blockhash;\n             pfrom->vRecvGetData.push_back(inv);\n-            ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n+            ProcessGetData(pfrom, chainparams.GetConsensus(), connman, interruptMsgProc);\n             return true;\n         }\n \n@@ -1925,10 +1929,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n         if (fRevertToHeaderProcessing)\n-            return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman);\n+            return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n         if (fBlockReconstructed) {\n             // If we got here, we were able to optimistically reconstruct a\n@@ -2441,7 +2445,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n }\n \n // requires LOCK(cs_vRecvMsg)\n-bool ProcessMessages(CNode* pfrom, CConnman& connman)\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     unsigned int nMaxSendBufferSize = connman.GetSendBufferSize();\n@@ -2459,7 +2463,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman)\n     bool fOk = true;\n \n     if (!pfrom->vRecvGetData.empty())\n-        ProcessGetData(pfrom, chainparams.GetConsensus(), connman);\n+        ProcessGetData(pfrom, chainparams.GetConsensus(), connman, interruptMsgProc);\n \n     // this maintains the order of responses\n     if (!pfrom->vRecvGetData.empty()) return fOk;\n@@ -2520,8 +2524,9 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman)\n         bool fRet = false;\n         try\n         {\n-            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman);\n-            boost::this_thread::interruption_point();\n+            fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc);\n+            if (interruptMsgProc)\n+                return true;\n         }\n         catch (const std::ios_base::failure& e)\n         {\n@@ -2585,7 +2590,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman& connman)\n+bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {"
      },
      {
        "sha": "9e76cad505694d50f04a7112fcb61b2b990baad0",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
        "patch": "@@ -39,13 +39,14 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n void Misbehaving(NodeId nodeid, int howmuch);\n \n /** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman);\n+bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interrupt);\n /**\n  * Send queued protocol messages to be sent to a give node.\n  *\n  * @param[in]   pto             The node which we are sending messages to.\n  * @param[in]   connman         The connection manager for that node.\n+ * @param[in]   interrupt       Interrupt condition for processing threads\n  */\n-bool SendMessages(CNode* pto, CConnman& connman);\n+bool SendMessages(CNode* pto, CConnman& connman, std::atomic<bool>& interrupt);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "35edf60a2b21daca16a87386ee6dfec92bed2b94",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 7,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
        "patch": "@@ -47,14 +47,16 @@ BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n+    std::atomic<bool> interruptDummy(false);\n+\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1, *connman);\n+    SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n@@ -64,16 +66,18 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, *connman);\n+    SendMessages(&dummyNode2, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, *connman);\n+    SendMessages(&dummyNode2, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n }\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n+    std::atomic<bool> interruptDummy(false);\n+\n     connman->ClearBanned();\n     ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -82,19 +86,21 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1, *connman);\n+    SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1, *connman);\n+    SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1, *connman);\n+    SendMessages(&dummyNode1, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n+    std::atomic<bool> interruptDummy(false);\n+\n     connman->ClearBanned();\n     int64_t nStartTime = GetTime();\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n@@ -106,7 +112,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode, *connman);\n+    SendMessages(&dummyNode, *connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      }
    ]
  },
  {
    "sha": "5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2IwZmNlZTgxMzdkNmRlOGQyYjk1MjVhYTQ1ZmQxMWFiMjIzMWM4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-27T22:13:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-03T22:56:21Z"
      },
      "message": "net: remove thread_interrupted catch\n\nThis is now a std::thread, so there's no hope of catching a boost interruption\npoint.",
      "tree": {
        "sha": "e922306ddea2d69cf8e6a547880c1631c9a6027a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e922306ddea2d69cf8e6a547880c1631c9a6027a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d7056d2a562301b3770c4ede1dfc8ffb00cf4b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e0c12d853056f3e0b8a2d692dddb04169901d8c6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8",
        "patch": "@@ -2551,9 +2551,6 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, std::atomic<bool>& interru\n                 PrintExceptionContinue(&e, \"ProcessMessages()\");\n             }\n         }\n-        catch (const boost::thread_interrupted&) {\n-            throw;\n-        }\n         catch (const std::exception& e) {\n             PrintExceptionContinue(&e, \"ProcessMessages()\");\n         } catch (...) {"
      }
    ]
  },
  {
    "sha": "8b3159ef0a912da67c545a3d24f4558f8df866e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjMxNTllZjBhOTEyZGE2N2M1NDVhM2QyNGY0NTU4ZjhkZjg2NmU0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-27T22:13:31Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-03T22:56:21Z"
      },
      "message": "net: make proxy receives interruptible",
      "tree": {
        "sha": "d98a7bc50b3b21faec735afd103d34ca22b54936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d98a7bc50b3b21faec735afd103d34ca22b54936"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b3159ef0a912da67c545a3d24f4558f8df866e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b3159ef0a912da67c545a3d24f4558f8df866e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b3159ef0a912da67c545a3d24f4558f8df866e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b3159ef0a912da67c545a3d24f4558f8df866e4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cb0fcee8137d6de8d2b9525aa45fd11ab2231c8"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7e16e2382fa79c410840d566a20a6600083eee83",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b3159ef0a912da67c545a3d24f4558f8df866e4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b3159ef0a912da67c545a3d24f4558f8df866e4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8b3159ef0a912da67c545a3d24f4558f8df866e4",
        "patch": "@@ -2157,6 +2157,7 @@ bool CConnman::Start(CScheduler& scheduler, std::string& strNodeError, Options c\n     //\n     // Start threads\n     //\n+    InterruptSocks5(false);\n     interruptNet.reset();\n     flagInterruptMsgProc = false;\n \n@@ -2208,6 +2209,7 @@ void CConnman::Interrupt()\n     condMsgProc.notify_all();\n \n     interruptNet();\n+    InterruptSocks5(true);\n \n     if (semOutbound)\n         for (int i=0; i<(nMaxOutbound + nMaxFeeler); i++)"
      },
      {
        "sha": "87c7abd7c1f2a3139d581f2083c8c4fa1a8bc023",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b3159ef0a912da67c545a3d24f4558f8df866e4/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b3159ef0a912da67c545a3d24f4558f8df866e4/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=8b3159ef0a912da67c545a3d24f4558f8df866e4",
        "patch": "@@ -19,6 +19,7 @@\n #ifdef HAVE_GETADDRINFO_A\n #include <netdb.h>\n #endif\n+#include <atomic>\n \n #ifndef WIN32\n #if HAVE_INET_PTON\n@@ -44,6 +45,7 @@ bool fNameLookup = DEFAULT_NAME_LOOKUP;\n \n // Need ample time for negotiation for very slow proxies such as Tor (milliseconds)\n static const int SOCKS5_RECV_TIMEOUT = 20 * 1000;\n+static std::atomic<bool> interruptSocks5Recv(false);\n \n enum Network ParseNetwork(std::string net) {\n     boost::to_lower(net);\n@@ -206,7 +208,7 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n /**\n  * Read bytes from socket. This will either read the full number of bytes requested\n  * or return False on error or timeout.\n- * This function can be interrupted by boost thread interrupt.\n+ * This function can be interrupted by calling InterruptSocks5()\n  *\n  * @param data Buffer to receive into\n  * @param len  Length of data to receive\n@@ -246,7 +248,8 @@ bool static InterruptibleRecv(char* data, size_t len, int timeout, SOCKET& hSock\n                 return false;\n             }\n         }\n-        boost::this_thread::interruption_point();\n+        if (interruptSocks5Recv)\n+            return false;\n         curTime = GetTimeMillis();\n     }\n     return len == 0;\n@@ -715,3 +718,8 @@ bool SetSocketNonBlocking(SOCKET& hSocket, bool fNonBlocking)\n \n     return true;\n }\n+\n+void InterruptSocks5(bool interrupt)\n+{\n+    interruptSocks5Recv = interrupt;\n+}"
      },
      {
        "sha": "9ff8102bd7dc3425e3003f78c7e772ee8be12a37",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b3159ef0a912da67c545a3d24f4558f8df866e4/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b3159ef0a912da67c545a3d24f4558f8df866e4/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=8b3159ef0a912da67c545a3d24f4558f8df866e4",
        "patch": "@@ -63,5 +63,6 @@ bool SetSocketNonBlocking(SOCKET& hSocket, bool fNonBlocking);\n  * Convert milliseconds to a struct timeval for e.g. select.\n  */\n struct timeval MillisToTimeval(int64_t nTimeout);\n+void InterruptSocks5(bool interrupt);\n \n #endif // BITCOIN_NETBASE_H"
      }
    ]
  },
  {
    "sha": "67ee4ec9015592c8447955356adfcbb1bf473e32",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2VlNGVjOTAxNTU5MmM4NDQ3OTU1MzU2YWRmY2JiMWJmNDczZTMy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-12-27T22:13:51Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-01-03T22:56:21Z"
      },
      "message": "net: misc header cleanups",
      "tree": {
        "sha": "c6c51f412004c64eaced222e369e4b1a95991b4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6c51f412004c64eaced222e369e4b1a95991b4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67ee4ec9015592c8447955356adfcbb1bf473e32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67ee4ec9015592c8447955356adfcbb1bf473e32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67ee4ec9015592c8447955356adfcbb1bf473e32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67ee4ec9015592c8447955356adfcbb1bf473e32/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b3159ef0a912da67c545a3d24f4558f8df866e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b3159ef0a912da67c545a3d24f4558f8df866e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b3159ef0a912da67c545a3d24f4558f8df866e4"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "66c8539154528352f17a7d6d95603d548be39043",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67ee4ec9015592c8447955356adfcbb1bf473e32/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67ee4ec9015592c8447955356adfcbb1bf473e32/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=67ee4ec9015592c8447955356adfcbb1bf473e32",
        "patch": "@@ -35,8 +35,6 @@\n #include <miniupnpc/upnperrors.h>\n #endif\n \n-#include <boost/filesystem.hpp>\n-#include <boost/thread.hpp>\n \n #include <math.h>\n "
      },
      {
        "sha": "afa3c3b13ee28855218db4640830017e47c0a9a0",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67ee4ec9015592c8447955356adfcbb1bf473e32/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67ee4ec9015592c8447955356adfcbb1bf473e32/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=67ee4ec9015592c8447955356adfcbb1bf473e32",
        "patch": "@@ -16,21 +16,14 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#ifdef HAVE_GETADDRINFO_A\n-#include <netdb.h>\n-#endif\n #include <atomic>\n \n #ifndef WIN32\n-#if HAVE_INET_PTON\n-#include <arpa/inet.h>\n-#endif\n #include <fcntl.h>\n #endif\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n-#include <boost/thread.hpp>\n \n #if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0"
      }
    ]
  }
]