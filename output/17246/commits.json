[
  {
    "sha": "6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjE0NDBlOGE1NWI0ZWNjMDVjYjA5NzcyNWExOWFlNTVmMGY5ODAx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-12T10:27:56Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T15:35:09Z"
      },
      "message": "[wallet] translate \"Keypool ran out\" message",
      "tree": {
        "sha": "ba03636fbb3dde17ba55f881c0d4233cabfb2f28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba03636fbb3dde17ba55f881c0d4233cabfb2f28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl24XC0ACgkQV/+b28ww\nEAkSVA/9GJCPzm1DVUs88S+TY9nCH5Cq2AMmqSOOvk5tiLYULXow8CrKb+RiF4Ff\nGKfqlPEPeucKogaZAFRylaoL2VFbhPlaAgLd/OtCvqh7kBdj76Rw9xzQmwykWCRK\nWtIcLDpK0h1nj152QcTirXfv0VW+W1aifekyzcPfkNp0mNHyfbEPQRjyS/TwgsoN\n77jxeuHTe28xZobOyHoC9ifjU+G4hdZP+Dqy0HciAUCCJ8UPuNpHoYwTqP84cjSR\nIfZlEfSyPpDqRd9N3ncek58apmPVSzHCGX9nFZ8gtIE7oCOVLdd7DNdSH77+6soM\nNJmzULM8dFk3rpDP1QsMPKpo5FdeZEXsaIOSsllSoclaQNvDMxxzw+huf8KNS+RD\nL6VrCGUJFm5VzrGvjlQCndlYqE+LyXkA2BDARm+lcycB7Minqh+otDglFYAmEzvx\nLIXYTu4D7hi64oc4iCxtS7EuFJHKn97UFwsUYT/1ZkPvhSyPl5j+saTnltto/7oZ\ntij+Zuncr7zCAYfNabLnCBRWwNU/N/VhPLPmnXxFmzmHx8zDNNjqhoYlc8ZIJ90c\nsKfeWKVf6RiUiaePRVCrohLTrPC9outrNN+svNjdGNR0AXlZZ/T/y8tVL+M+gifO\n7aC1JwicyMJs6tdXtwsPYpjwxU9eQTTBaRSPjNShoHN2TkmJIEw=\n=c3zV\n-----END PGP SIGNATURE-----",
        "payload": "tree ba03636fbb3dde17ba55f881c0d4233cabfb2f28\nparent 6a97e8a060f7632bbaee27d3de8035dc6ebe3895\nauthor Sjors Provoost <sjors@sprovoost.nl> 1570876076 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1572363309 +0100\n\n[wallet] translate \"Keypool ran out\" message\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1440e8a55b4ecc05cb097725a19ae55f0f9801/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a97e8a060f7632bbaee27d3de8035dc6ebe3895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a97e8a060f7632bbaee27d3de8035dc6ebe3895",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a97e8a060f7632bbaee27d3de8035dc6ebe3895"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d560766f4cdba63d732282e1e0299b2526c4f590",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b1440e8a55b4ecc05cb097725a19ae55f0f9801/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b1440e8a55b4ecc05cb097725a19ae55f0f9801/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
        "patch": "@@ -20,7 +20,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, const std::\n     // Generate a new key that is added to wallet\n     CPubKey new_key;\n     if (!GetKeyFromPool(new_key)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n     LearnRelatedScripts(new_key, type);"
      },
      {
        "sha": "f2d315ae7d94f5c4e898b584185b71cc45441d75",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b1440e8a55b4ecc05cb097725a19ae55f0f9801/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b1440e8a55b4ecc05cb097725a19ae55f0f9801/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
        "patch": "@@ -2539,7 +2539,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 bool ret = reservedest.GetReservedDestination(change_type, dest, true);\n                 if (!ret)\n                 {\n-                    strFailReason = \"Keypool ran out, please call keypoolrefill first\";\n+                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\").translated;\n                     return false;\n                 }\n \n@@ -3055,7 +3055,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n \n     ReserveDestination reservedest(this);\n     if (!reservedest.GetReservedDestination(type, dest, true)) {\n-        error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "6af7fded0616576140a78c9e04609f74b89bbd75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWY3ZmRlZDA2MTY1NzYxNDBhNzhjOWUwNDYwOWY3NGI4OWJiZDc1",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-23T13:11:25Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T15:35:09Z"
      },
      "message": "[wallet] CreateTransaction: simplify change address check",
      "tree": {
        "sha": "524ce46d6a63224a8ad08c71a1f6fca00e32ec28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/524ce46d6a63224a8ad08c71a1f6fca00e32ec28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6af7fded0616576140a78c9e04609f74b89bbd75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl24XC0ACgkQV/+b28ww\nEAn0sQ//exOoamT03+wzGS1qtHnUbzoAR2FJfC9a/L12eXDMEnXBt90v8MiWqdzD\n1f3ag+DesHGDDL09K2CqwOY5tLIh8KzXv3c4XKkUecxYwIsoyBDeARgh4GXmLDfD\ntv/4B7HlONZxHWMKkJ+OYVLPMBqeZAhUAuVj6gOLHAm2VPbnYVda9NvdX96noL2N\n+KUOobt6IbGF9FUeRHrS53zSQ+fdQDfckJ+5F05grktwupAU+06N1kpJtpLB/sLA\n9yzyyvNa68+EaClEipJ1b7ReIvCYfDbQvNWqC8uUWJkqlcHc+1ns291bqJ088UpK\nOsMbEhG6M6CbTObuoAg8bAzMyiilrPNs4mQSGE5QjZlJg0mnzlze1NfV7ninQE70\nN1OYb4NrdVmR53Uq2cTGOYE1vhBZpRUE4gOvCuPWPGEW9ZNebfQPJgTqSyUp7hv9\n/wnE8OC3d2tCSSKOGy6bXBTahTqeCxIUr5lGmGO6uRWjmOu6hUsz6CL7ywvyP1Lh\nngseGJYxXat1WVuyRLjlFr7NBeuKnzk8xoRz0SnALoTVBw2IA4yNZkef9DpeylB1\ns6WhsYE1FEWRc0ctdIIfPNTsihivVofLEfRB7S5rsVj0CY9OXkXnKGk/MsjMVLHl\n+vdYUgic/sfuLLJtbPOk5zzaf6QDeGt/3XdWfEd8A5Yu5iQwIiU=\n=A+0z\n-----END PGP SIGNATURE-----",
        "payload": "tree 524ce46d6a63224a8ad08c71a1f6fca00e32ec28\nparent 6b1440e8a55b4ecc05cb097725a19ae55f0f9801\nauthor Sjors Provoost <sjors@sprovoost.nl> 1571836285 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1572363309 +0100\n\n[wallet] CreateTransaction: simplify change address check\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af7fded0616576140a78c9e04609f74b89bbd75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6af7fded0616576140a78c9e04609f74b89bbd75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af7fded0616576140a78c9e04609f74b89bbd75/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b1440e8a55b4ecc05cb097725a19ae55f0f9801",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b1440e8a55b4ecc05cb097725a19ae55f0f9801"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 5,
      "deletions": 10
    },
    "files": [
      {
        "sha": "90106ccda5ffe161310eb685913ea2f048270cde",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af7fded0616576140a78c9e04609f74b89bbd75/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af7fded0616576140a78c9e04609f74b89bbd75/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6af7fded0616576140a78c9e04609f74b89bbd75",
        "patch": "@@ -2530,19 +2530,14 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 //  post-backup change.\n \n                 // Reserve a new key pair from key pool\n-                if (!CanGetAddresses(true)) {\n-                    strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\").translated;\n-                    return false;\n-                }\n                 CTxDestination dest;\n                 const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n-                bool ret = reservedest.GetReservedDestination(change_type, dest, true);\n-                if (!ret)\n-                {\n-                    strFailReason = _(\"Keypool ran out, please call keypoolrefill first\").translated;\n+                if (reservedest.GetReservedDestination(change_type, dest, true)) {\n+                    scriptChange = GetScriptForDestination(dest);\n+                } else {\n+                    strFailReason = _(\"Can't generate a change-address key. Please call keypoolrefill first.\").translated;\n                     return false;\n                 }\n-\n                 scriptChange = GetScriptForDestination(dest);\n             }\n             CTxOut change_prototype_txout(0, scriptChange);"
      },
      {
        "sha": "1e7a449baab64ff22ad819aaac50dc9018482e12",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af7fded0616576140a78c9e04609f74b89bbd75/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af7fded0616576140a78c9e04609f74b89bbd75/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=6af7fded0616576140a78c9e04609f74b89bbd75",
        "patch": "@@ -525,7 +525,7 @@ def test_locked_wallet(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Can't generate a change-address key. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      }
    ]
  },
  {
    "sha": "388b153f9ea7ae9cc47e928e08d4f244ee624571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODhiMTUzZjllYTdhZTljYzQ3ZTkyOGUwOGQ0ZjI0NGVlNjI0NTcx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-23T13:21:50Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T15:35:10Z"
      },
      "message": "[wallet] allow transaction without change if keypool is empty",
      "tree": {
        "sha": "6c38edc24f16dc25950dbd3835d2f17bc944fc43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c38edc24f16dc25950dbd3835d2f17bc944fc43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/388b153f9ea7ae9cc47e928e08d4f244ee624571",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl24XC4ACgkQV/+b28ww\nEAmXRxAAroLDNdlesJ0HP6/Hb7h8nocZwF84LS5RHdBy+6rgXK856X7P8HxBoTb/\n9M2yQvOTE9cv8dSdOVWIN9ovsXqPYa5UY3yfErEaa3kcIX8D41v1sICLrSCL5MxI\nuou/Nlk8ixwwiQoTT3D4H1rLSfqawSnRYVFZ3QdKPPfLz0Gn2m0eo8mwxT1UHnVW\n7wi+CJMxMk3x4hh6f8sLLg3XvTVpq+MaqSXNRBsCDQSP12m0ATO2A3oyUqG3cCn1\nvXF4ZXO83LtZBn8X35ouDHAnj6ev7rZhm+l8YFTpMXTo5OXw1lI5dLxKOcH3eSXh\nF3JMezo9AxFahASMFJuWGBYH/4U10Tj4cGEvrqpz3R79iSXTIeEXGl86cepHTXfM\n6z3QvmrmHH0amngJFbby/NgMMKZhOoD5dTNhftMfKo9r804HPldG0TsM5te4F04X\nPvF315pRdLUDRPX4K/SdnpuOO5OFEXbkXzCi6H/hMrTp9LMwrkxMSb1j/9eIAxGB\ntu3gWDREEKlIprQMc1P4PDE1KwnZLfzgc32DY3whixGpFHQqnGNKSKrJD+txHprX\neu/l9e7qUE92Km+XpwlNERLvnz1Tw8yDbqr/7+EhDnv59sxD985aLbrk4WUSU77r\nbGOdHXKJEgRszfq/VEsCuatZ0A2WGNbyv0j1nwWIekxMf4L+/6Y=\n=6ARp\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c38edc24f16dc25950dbd3835d2f17bc944fc43\nparent 6af7fded0616576140a78c9e04609f74b89bbd75\nauthor Sjors Provoost <sjors@sprovoost.nl> 1571836910 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1572363310 +0100\n\n[wallet] allow transaction without change if keypool is empty\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/388b153f9ea7ae9cc47e928e08d4f244ee624571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/388b153f9ea7ae9cc47e928e08d4f244ee624571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/388b153f9ea7ae9cc47e928e08d4f244ee624571/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af7fded0616576140a78c9e04609f74b89bbd75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af7fded0616576140a78c9e04609f74b89bbd75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af7fded0616576140a78c9e04609f74b89bbd75"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 70,
      "deletions": 11
    },
    "files": [
      {
        "sha": "4f01ddca91560c8497bb14f13dd5e269d1dce16a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/388b153f9ea7ae9cc47e928e08d4f244ee624571/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/388b153f9ea7ae9cc47e928e08d4f244ee624571/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=388b153f9ea7ae9cc47e928e08d4f244ee624571",
        "patch": "@@ -2517,6 +2517,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             // TODO: pass in scriptChange instead of reservedest so\n             // change transaction isn't always pay-to-bitcoin-address\n             CScript scriptChange;\n+            assert(scriptChange.empty());\n \n             // coin control: send change to custom address\n             if (!boost::get<CNoDestination>(&coin_control.destChange)) {\n@@ -2529,14 +2530,14 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 //  rediscover unknown transactions that were written with keys of ours to recover\n                 //  post-backup change.\n \n-                // Reserve a new key pair from key pool\n+                // Reserve a new key pair from key pool. If it fails, provide a dummy\n+                // destination in case we don't need change.\n                 CTxDestination dest;\n                 const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n                 if (reservedest.GetReservedDestination(change_type, dest, true)) {\n                     scriptChange = GetScriptForDestination(dest);\n                 } else {\n-                    strFailReason = _(\"Can't generate a change-address key. Please call keypoolrefill first.\").translated;\n-                    return false;\n+                    strFailReason = _(\"Can't generate a transaction without change. Please call keypoolrefill first.\").translated;\n                 }\n                 scriptChange = GetScriptForDestination(dest);\n             }\n@@ -2749,6 +2750,11 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 coin_selection_params.use_bnb = false;\n                 continue;\n             }\n+\n+            // Give up if change keypool ran out and we failed to find a solution without change:\n+            if (scriptChange.empty() && nChangePosInOut != -1) {\n+                return false;\n+            }\n         }\n \n         // Shuffle selected coins and fill in final vin"
      },
      {
        "sha": "12c40cf1dabc4150af625123413b504b654e5c67",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/388b153f9ea7ae9cc47e928e08d4f244ee624571/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/388b153f9ea7ae9cc47e928e08d4f244ee624571/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=388b153f9ea7ae9cc47e928e08d4f244ee624571",
        "patch": "@@ -521,11 +521,16 @@ def test_locked_wallet(self):\n         self.nodes[1].getnewaddress()\n         self.nodes[1].getrawchangeaddress()\n         inputs = []\n-        outputs = {self.nodes[0].getnewaddress():1.1}\n+        outputs = {self.nodes[0].getnewaddress():1.09999500}\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        # fund a transaction that does not require a new key for the change output\n+        self.nodes[1].fundrawtransaction(rawtx)\n+\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_rpc_error(-4, \"Can't generate a change-address key. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n+        outputs = {self.nodes[0].getnewaddress():1.1}\n+        rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n+        assert_raises_rpc_error(-4, \"Can't generate a transaction without change. Please call keypoolrefill first.\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)"
      },
      {
        "sha": "1deecc0fff7498220780d49e9c13bbe6226e5be8",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 54,
        "deletions": 6,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/388b153f9ea7ae9cc47e928e08d4f244ee624571/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/388b153f9ea7ae9cc47e928e08d4f244ee624571/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=388b153f9ea7ae9cc47e928e08d4f244ee624571",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\"\n \n import time\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n@@ -53,12 +54,12 @@ def run_test(self):\n         assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n         # drain the external keys\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n-        addr.add(nodes[0].getnewaddress())\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n+        addr.add(nodes[0].getnewaddress(address_type=\"bech32\"))\n         assert len(addr) == 6\n         # the next one should fail\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n@@ -82,5 +83,52 @@ def run_test(self):\n         assert_equal(wi['keypoolsize_hd_internal'], 100)\n         assert_equal(wi['keypoolsize'], 100)\n \n+        # create a blank wallet\n+        nodes[0].createwallet(wallet_name='w2', blank=True)\n+        w2 = nodes[0].get_wallet_rpc('w2')\n+\n+        # refer to initial wallet as w1\n+        w1 = nodes[0].get_wallet_rpc('')\n+\n+        # import private key and fund it\n+        address = addr.pop()\n+        privkey = w1.dumpprivkey(address)\n+        res = w2.importmulti([{'scriptPubKey': {'address': address}, 'keys': [privkey], 'timestamp': 'now'}])\n+        assert_equal(res[0]['success'], True)\n+        w1.walletpassphrase('test', 100)\n+\n+        res = w1.sendtoaddress(address=address, amount=0.00010000)\n+        nodes[0].generate(1)\n+        destination = addr.pop()\n+\n+        # Using a fee rate (10 sat / byte) well above the minimum relay rate\n+        # creating a 5,000 sat transaction with change should not be possible\n+        assert_raises_rpc_error(-4, \"Can't generate a transaction without change. Please call keypoolrefill first.\", w2.walletcreatefundedpsbt, inputs=[], outputs=[{addr.pop(): 0.00005000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+\n+        # creating a 10,000 sat transaction without change, with a manual input, should still be possible\n+        res = w2.walletcreatefundedpsbt(inputs=w2.listunspent(), outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+\n+        # creating a 10,000 sat transaction without change should still be possible\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+        # should work without subtractFeeFromOutputs if the exact fee is subtracted from the amount\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00008900}], options={\"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+\n+        # dust change should be removed\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00008800}], options={\"feeRate\": 0.00010})\n+        assert_equal(\"psbt\" in res, True)\n+\n+        # create a transaction without change at the maximum fee rate, such that the output is still spendable:\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.0008824})\n+        assert_equal(\"psbt\" in res, True)\n+        assert_equal(res[\"fee\"], Decimal(\"0.00009706\"))\n+\n+        # creating a 10,000 sat transaction with a manual change address should be possible\n+        res = w2.walletcreatefundedpsbt(inputs=[], outputs=[{destination: 0.00010000}], options={\"subtractFeeFromOutputs\": [0], \"feeRate\": 0.00010, \"changeAddress\": addr.pop()})\n+        assert_equal(\"psbt\" in res, True)\n+\n+\n if __name__ == '__main__':\n     KeyPoolTest().main()"
      }
    ]
  },
  {
    "sha": "d29efe647e80e4867ab88679bc5c2b7fa21a1237",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjllZmU2NDdlODBlNDg2N2FiODg2NzliYzVjMmI3ZmEyMWExMjM3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-24T17:05:11Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-29T15:38:07Z"
      },
      "message": "[wallet] enable BnB for subtractFeeFromOutputs\n\nThis allows skipping the knapsack solver when we can't generate a change address.",
      "tree": {
        "sha": "3046b0c7b91136091001548343605900f87f7d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3046b0c7b91136091001548343605900f87f7d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d29efe647e80e4867ab88679bc5c2b7fa21a1237",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAl24XN8ACgkQV/+b28ww\nEAkRkg/9EeC4QJSmwN9d73odSpKdiGTtWECsRVirMqEwnC/Ii+xzrmRzSifkX+bN\nyXeqi0ojXcPxlsKxakFPpYlKNZ/UiQnDYcbRDHgHz9nnnI7sipZimF1hflX7MBTG\nLCz6vI+njY+CDLa0ec9wkQ/L/k/OCxDWrKl5l2e59QmmVodnu8MVQ7dhr/RrhWZ8\nP9EyL4Bt1gGnjWT0aNSacXLpVn9yJBg69A6Lq4R0BL8K9gSK4zVqXC4KNf4x0zeD\n5UWb21NrDhyUd0xRB7mFI5VriRed8/eLfqWkw12KjShjeWHQLCcqZbuFJMmZmJ0H\nFIGVEK1LAGORvIkHQlT/NTGlc2+rL+D4nqFnhPRAcXak3IHt3xzStiwe1VjkGv7a\nyRPkBOemonNlGAnjd4Yy0JitPyExrNroQj/uHdBy6gyv5+NBn6L3KBteP4tsXErg\nA3jL+yWoezAoY1FEmgjt9KElR3D7TAaMcd602ziq5GBWxHukrL/wod4idEanfvWb\n+fyTwsCGLW3klpH7Ns35uMO9dZgAAG2YFk6KZxM6M1mlhJsjsN8AINlws4xC1BpP\npFv9cqjqt78eORd4JJeZlmvvqD4ILT5oe6tx0W7qO5RoY8ekBgHrMn8hg9p5lBqY\n59ccCIusvbIz2rx0Tjka0mv/Bgbzkd5TsYJbta1Brw8lOxNYYEg=\n=rujX\n-----END PGP SIGNATURE-----",
        "payload": "tree 3046b0c7b91136091001548343605900f87f7d55\nparent 388b153f9ea7ae9cc47e928e08d4f244ee624571\nauthor Sjors Provoost <sjors@sprovoost.nl> 1571936711 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1572363487 +0100\n\n[wallet] enable BnB for subtractFeeFromOutputs\n\nThis allows skipping the knapsack solver when we can't generate a change address.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d29efe647e80e4867ab88679bc5c2b7fa21a1237",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d29efe647e80e4867ab88679bc5c2b7fa21a1237",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d29efe647e80e4867ab88679bc5c2b7fa21a1237/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "388b153f9ea7ae9cc47e928e08d4f244ee624571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/388b153f9ea7ae9cc47e928e08d4f244ee624571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/388b153f9ea7ae9cc47e928e08d4f244ee624571"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 74,
      "deletions": 33
    },
    "files": [
      {
        "sha": "59daf8f4448451b96a1b1cd0552c5519fb228a2e",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=d29efe647e80e4867ab88679bc5c2b7fa21a1237",
        "patch": "@@ -47,7 +47,7 @@ static void CoinSelection(benchmark::State& state)\n     }\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n-    const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0);\n+    const CoinSelectionParams coin_selection_params(/* use_bnb */ true, /* use_knapsack */ true, /* subtract_fee_from_outputs */ false, 34, 148, CFeeRate(0), 0);\n     while (state.KeepRunning()) {\n         std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;\n@@ -98,7 +98,7 @@ static void BnBExhaustion(benchmark::State& state)\n     while (state.KeepRunning()) {\n         // Benchmark\n         CAmount target = make_hard_case(17, utxo_pool);\n-        SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees); // Should exhaust\n+        SelectCoinsBnB(utxo_pool, target, 0, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false); // Should exhaust\n \n         // Cleanup\n         utxo_pool.clear();"
      },
      {
        "sha": "33dad8aef357058b71aaf49ee2e9694622c70128",
        "filename": "src/wallet/coinselection.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/coinselection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/coinselection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.cpp?ref=d29efe647e80e4867ab88679bc5c2b7fa21a1237",
        "patch": "@@ -62,14 +62,14 @@ struct {\n \n static const size_t TOTAL_TRIES = 100000;\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees)\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees, bool subtract_fee_from_outputs)\n {\n     out_set.clear();\n     CAmount curr_value = 0;\n \n     std::vector<bool> curr_selection; // select the utxo at this index\n     curr_selection.reserve(utxo_pool.size());\n-    CAmount actual_target = not_input_fees + target_value;\n+    CAmount actual_target = (subtract_fee_from_outputs ? 0 : not_input_fees) + target_value;\n \n     // Calculate curr_available_value\n     CAmount curr_available_value = 0;"
      },
      {
        "sha": "d4134d5e7548e9d264469bb764a02cfb694af39b",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=d29efe647e80e4867ab88679bc5c2b7fa21a1237",
        "patch": "@@ -93,7 +93,7 @@ struct OutputGroup\n     bool EligibleForSpending(const CoinEligibilityFilter& eligibility_filter) const;\n };\n \n-bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees);\n+bool SelectCoinsBnB(std::vector<OutputGroup>& utxo_pool, const CAmount& target_value, const CAmount& cost_of_change, std::set<CInputCoin>& out_set, CAmount& value_ret, CAmount not_input_fees, bool subtract_fee_from_outputs);\n \n // Original coin selection algorithm as a fallback\n bool KnapsackSolver(const CAmount& nTargetValue, std::vector<OutputGroup>& groups, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet);"
      },
      {
        "sha": "e52e107a3bbbe81d843b72bd2407c15b59b815fb",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 16,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=d29efe647e80e4867ab88679bc5c2b7fa21a1237",
        "patch": "@@ -35,7 +35,7 @@ static CAmount balance = 0;\n CoinEligibilityFilter filter_standard(1, 6, 0);\n CoinEligibilityFilter filter_confirmed(1, 1, 0);\n CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n-CoinSelectionParams coin_selection_params(false, 0, 0, CFeeRate(0), 0);\n+CoinSelectionParams coin_selection_params(/* use_bnb */ false, /* use_knapsack */ true, /* subtract_fee_from_outputs */ false, 0, 0, CFeeRate(0), 0);\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n {\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     /////////////////////////\n \n     // Empty utxo pool\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     selection.clear();\n \n     // Add utxos\n@@ -147,15 +147,15 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Select 1 Cent\n     add_coin(1 * CENT, 1, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 1 * CENT);\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 2 Cent\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 2 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 2 * CENT);\n     actual_selection.clear();\n@@ -164,14 +164,14 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Select 5 Cent\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 5 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 5 * CENT);\n     actual_selection.clear();\n     selection.clear();\n \n     // Select 11 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 11 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     actual_selection.clear();\n     selection.clear();\n \n@@ -181,7 +181,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n     add_coin(1 * CENT, 1, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     actual_selection.clear();\n@@ -192,21 +192,21 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     add_coin(5 * CENT, 5, actual_selection);\n     add_coin(3 * CENT, 3, actual_selection);\n     add_coin(2 * CENT, 2, actual_selection);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 10 * CENT, 5000, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     BOOST_CHECK_EQUAL(value_ret, 10 * CENT);\n     // FIXME: this test is redundant with the above, because 1 Cent is selected, not \"too small\"\n     // BOOST_CHECK(equal_sets(selection, actual_selection));\n \n     // Select 0.25 Cent, not possible\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 0.25 * CENT, 0.5 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     actual_selection.clear();\n     selection.clear();\n \n     // Iteration exhaustion test\n     CAmount target = make_hard_case(17, utxo_pool);\n-    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret, not_input_fees)); // Should exhaust\n+    BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false)); // Should exhaust\n     target = make_hard_case(14, utxo_pool);\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret, not_input_fees)); // Should not exhaust\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), target, 0, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false)); // Should not exhaust\n \n     // Test same value early bailout optimization\n     utxo_pool.clear();\n@@ -223,7 +223,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     for (int i = 0; i < 50000; ++i) {\n         add_coin(5 * CENT, 7, utxo_pool);\n     }\n-    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret, not_input_fees));\n+    BOOST_CHECK(SelectCoinsBnB(GroupCoins(utxo_pool), 30 * CENT, 5000, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     BOOST_CHECK_EQUAL(value_ret, 30 * CENT);\n     BOOST_CHECK(equal_sets(selection, actual_selection));\n \n@@ -237,11 +237,11 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n     // Run 100 times, to make sure it is never finding a solution\n     for (int i = 0; i < 100; ++i) {\n-        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT, selection, value_ret, not_input_fees));\n+        BOOST_CHECK(!SelectCoinsBnB(GroupCoins(utxo_pool), 1 * CENT, 2 * CENT, selection, value_ret, not_input_fees, /* subtract_fee_from_outputs */ false));\n     }\n \n     // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n-    CoinSelectionParams coin_selection_params_bnb(true, 0, 0, CFeeRate(3000), 0);\n+    CoinSelectionParams coin_selection_params_bnb(/* use_bnb */ true, /* use_knapsack */ true, /* subtract_fee_from_outputs */ false, 0, 0, CFeeRate(3000), 0);\n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n     bool bnb_used;\n@@ -250,6 +250,19 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     vCoins.at(0).nInputBytes = 40; // Make sure that it has a negative effective value. The next check should assert if this somehow got through. Otherwise it will fail\n     BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n \n+    // Repeat with knapsack explicitly disabled\n+    coin_selection_params_bnb.use_knapsack = false;\n+    BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+\n+    // Test fees subtracted from output:\n+    empty_wallet();\n+    add_coin(1 * CENT);\n+    vCoins.at(0).nInputBytes = 40;\n+    BOOST_CHECK(!testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+    coin_selection_params_bnb.subtract_fee_from_outputs = true;\n+    BOOST_CHECK(testWallet.SelectCoinsMinConf( 1 * CENT, filter_standard, GroupCoins(vCoins), setCoinsRet, nValueRet, coin_selection_params_bnb, bnb_used));\n+    BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+\n     // Make sure that we aren't using BnB when there are preset inputs\n     empty_wallet();\n     add_coin(5 * CENT);\n@@ -590,14 +603,19 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n         CAmount target = rand.randrange(balance - 1000) + 1000;\n \n         // Perform selection\n-        CoinSelectionParams coin_selection_params_knapsack(false, 34, 148, CFeeRate(0), 0);\n-        CoinSelectionParams coin_selection_params_bnb(true, 34, 148, CFeeRate(0), 0);\n+        CoinSelectionParams coin_selection_params_knapsack(/* use_bnb */ false, /* use_knapsack */ true, /* subtract_fee_from_outputs */ false, 34, 148, CFeeRate(0), 0);\n+        CoinSelectionParams coin_selection_params_bnb(/* use_bnb */ true, /* use_knapsack */ true, /* subtract_fee_from_outputs */ false, 34, 148, CFeeRate(0), 0);\n         CoinSet out_set;\n         CAmount out_value = 0;\n         bool bnb_used = false;\n         BOOST_CHECK(testWallet.SelectCoinsMinConf(target, filter_standard, GroupCoins(vCoins), out_set, out_value, coin_selection_params_bnb, bnb_used) ||\n                     testWallet.SelectCoinsMinConf(target, filter_standard, GroupCoins(vCoins), out_set, out_value, coin_selection_params_knapsack, bnb_used));\n         BOOST_CHECK_GE(out_value, target);\n+\n+        // Repeat with knapsack explicitly disabled\n+        coin_selection_params_bnb.use_knapsack = false;\n+        BOOST_CHECK(testWallet.SelectCoinsMinConf(target, filter_standard, GroupCoins(vCoins), out_set, out_value, coin_selection_params_bnb, bnb_used));\n+        BOOST_CHECK_GE(out_value, target);\n     }\n }\n "
      },
      {
        "sha": "0c3c80bfd4f522550dbc615351ae43927e685893",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 11,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d29efe647e80e4867ab88679bc5c2b7fa21a1237",
        "patch": "@@ -2186,12 +2186,19 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n             group.effective_value = 0;\n             for (auto it = group.m_outputs.begin(); it != group.m_outputs.end(); ) {\n                 const CInputCoin& coin = *it;\n-                CAmount effective_value = coin.txout.nValue - (coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes));\n+                CAmount effective_value = coin.txout.nValue;\n+                CAmount cost_to_spend = coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n+                effective_value -= cost_to_spend;\n                 // Only include outputs that are positive effective value (i.e. not dust)\n                 if (effective_value > 0) {\n                     group.fee += coin.m_input_bytes < 0 ? 0 : coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n                     group.long_term_fee += coin.m_input_bytes < 0 ? 0 : long_term_feerate.GetFee(coin.m_input_bytes);\n                     group.effective_value += effective_value;\n+                    if (coin_selection_params.subtract_fee_from_outputs) {\n+                        // Don't include dust, but otherwise ignore cost to spend\n+                        // in BnB coin selection.\n+                        group.effective_value += cost_to_spend;\n+                    }\n                     ++it;\n                 } else {\n                     it = group.Discard(coin);\n@@ -2202,7 +2209,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         // Calculate the fees for things that aren't inputs\n         CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n         bnb_used = true;\n-        return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n+        return SelectCoinsBnB(utxo_pool, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees, coin_selection_params.subtract_fee_from_outputs);\n     } else {\n         // Filter by the min conf specs and add to utxo_pool\n         for (const OutputGroup& group : groups) {\n@@ -2513,11 +2520,17 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n             AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n \n+            if (nSubtractFeeFromAmount > 0) {\n+                coin_selection_params.subtract_fee_from_outputs = true;\n+            }\n+\n             // Create change script that will be used if we need change\n             // TODO: pass in scriptChange instead of reservedest so\n             // change transaction isn't always pay-to-bitcoin-address\n             CScript scriptChange;\n             assert(scriptChange.empty());\n+            CTxOut change_prototype_txout;\n+            assert(change_prototype_txout.IsNull());\n \n             // coin control: send change to custom address\n             if (!boost::get<CNoDestination>(&coin_control.destChange)) {\n@@ -2537,11 +2550,13 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 if (reservedest.GetReservedDestination(change_type, dest, true)) {\n                     scriptChange = GetScriptForDestination(dest);\n                 } else {\n-                    strFailReason = _(\"Can't generate a transaction without change. Please call keypoolrefill first.\").translated;\n+                    // Only use BnB, except when there are pre selected coins,\n+                    // which BnB does not support yet:\n+                    coin_selection_params.use_knapsack = coin_control.HasSelected();\n                 }\n                 scriptChange = GetScriptForDestination(dest);\n             }\n-            CTxOut change_prototype_txout(0, scriptChange);\n+            change_prototype_txout = CTxOut(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n             CFeeRate discard_rate = GetDiscardRate(*this);\n@@ -2555,7 +2570,6 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n \n             // BnB selector is the only selector used when this is true.\n             // That should only happen on the first pass through the loop.\n-            coin_selection_params.use_bnb = nSubtractFeeFromAmount == 0; // If we are doing subtract fee from recipient, then don't use BnB\n             // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n@@ -2604,6 +2618,10 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     txNew.vout.push_back(txout);\n                 }\n \n+                if (!coin_selection_params.use_bnb && !coin_selection_params.use_knapsack) {\n+                    break;\n+                }\n+\n                 // Choose coins to use\n                 bool bnb_used;\n                 if (pick_new_inputs) {\n@@ -2620,12 +2638,16 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                     coin_selection_params.effective_fee = nFeeRateNeeded;\n                     if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n                     {\n+                        if (scriptChange.empty()) {\n+                            strFailReason = _(\"Can't generate a transaction without change. Please call keypoolrefill first.\").translated;\n+                            return false;\n+                        }\n                         // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack.\n                         if (bnb_used) {\n                             coin_selection_params.use_bnb = false;\n                             continue;\n-                        }\n-                        else {\n+                        } else {\n+                            // Manual coin selection failed, or invalid / non-wallet outputs were selected:\n                             strFailReason = _(\"Insufficient funds\").translated;\n                             return false;\n                         }\n@@ -2751,10 +2773,9 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 continue;\n             }\n \n-            // Give up if change keypool ran out and we failed to find a solution without change:\n-            if (scriptChange.empty() && nChangePosInOut != -1) {\n-                return false;\n-            }\n+            // If change keypool ran out and we failed to find a solution without change,\n+            // we should already have returned\n+            assert(!scriptChange.empty() || nChangePosInOut == -1);\n         }\n \n         // Shuffle selected coins and fill in final vin"
      },
      {
        "sha": "370c4328ed4682b62f73576336c0cc25d5724ba0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d29efe647e80e4867ab88679bc5c2b7fa21a1237/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d29efe647e80e4867ab88679bc5c2b7fa21a1237",
        "patch": "@@ -571,12 +571,14 @@ class COutput\n struct CoinSelectionParams\n {\n     bool use_bnb = true;\n+    bool use_knapsack = true;\n+    bool subtract_fee_from_outputs = false;\n     size_t change_output_size = 0;\n     size_t change_spend_size = 0;\n     CFeeRate effective_fee = CFeeRate(0);\n     size_t tx_noinputs_size = 0;\n \n-    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n+    CoinSelectionParams(bool use_bnb, bool use_knapsack, bool subtract_fee_from_outputs, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size) : use_bnb(use_bnb), change_output_size(change_output_size), change_spend_size(change_spend_size), effective_fee(effective_fee), tx_noinputs_size(tx_noinputs_size) {}\n     CoinSelectionParams() {}\n };\n "
      }
    ]
  }
]