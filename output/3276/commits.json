[
  {
    "sha": "b2864d2fb35fa85e32c76e111f8900598e0bb69d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjg2NGQyZmIzNWZhODVlMzJjNzZlMTExZjg5MDA1OThlMGJiNjlk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-11-18T00:25:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-12-08T13:51:37Z"
      },
      "message": "Add main-specific node state",
      "tree": {
        "sha": "e34d33bf5a9309ce4e60ba1e1889a5bf1b6c7beb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e34d33bf5a9309ce4e60ba1e1889a5bf1b6c7beb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2864d2fb35fa85e32c76e111f8900598e0bb69d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2864d2fb35fa85e32c76e111f8900598e0bb69d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2864d2fb35fa85e32c76e111f8900598e0bb69d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2864d2fb35fa85e32c76e111f8900598e0bb69d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70370ae502df8756f3a067a00ccd61b9fc819581",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70370ae502df8756f3a067a00ccd61b9fc819581",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70370ae502df8756f3a067a00ccd61b9fc819581"
      }
    ],
    "stats": {
      "total": 206,
      "additions": 158,
      "deletions": 48
    },
    "files": [
      {
        "sha": "df3cedc202351c2d63a490e1efb3b612ea53575c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -120,6 +120,7 @@ void Shutdown()\n     GenerateBitcoins(false, NULL, 0);\n #endif\n     StopNode();\n+    UnregisterNodeSignals(GetNodeSignals());\n     {\n         LOCK(cs_main);\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "d130e9705eb5df18b8844bb1022793cfcbc033a2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 90,
        "deletions": 12,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -153,24 +153,75 @@ void SyncWithWallets(const uint256 &hash, const CTransaction &tx, const CBlock *\n // Registration of network node signals.\n //\n \n-int static GetHeight()\n+namespace {\n+// Maintain validation-specific state about nodes, protected by cs_main, instead\n+// by CNode's own locks. This simplifies asynchronous operation, where\n+// processing of incoming data is done after the ProcessMessage call returns,\n+// and we're no longer holding the node's locks.\n+struct CNodeState {\n+    int nMisbehavior;\n+    bool fShouldBan;\n+    std::string name;\n+\n+    CNodeState() {\n+        nMisbehavior = 0;\n+        fShouldBan = false;\n+    }\n+};\n+\n+map<NodeId, CNodeState> mapNodeState;\n+\n+// Requires cs_main.\n+CNodeState *State(NodeId pnode) {\n+    map<NodeId, CNodeState>::iterator it = mapNodeState.find(pnode);\n+    if (it == mapNodeState.end())\n+        return NULL;\n+    return &it->second;\n+}\n+\n+int GetHeight()\n {\n     LOCK(cs_main);\n     return chainActive.Height();\n }\n \n+void InitializeNode(NodeId nodeid, const CNode *pnode) {\n+    LOCK(cs_main);\n+    CNodeState &state = mapNodeState.insert(std::make_pair(nodeid, CNodeState())).first->second;\n+    state.name = pnode->addrName;\n+}\n+\n+void FinalizeNode(NodeId nodeid) {\n+    LOCK(cs_main);\n+    mapNodeState.erase(nodeid);\n+}\n+}\n+\n+bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n+    LOCK(cs_main);\n+    CNodeState *state = State(nodeid);\n+    if (state == NULL)\n+        return false;\n+    stats.nMisbehavior = state->nMisbehavior;\n+    return true;\n+}\n+\n void RegisterNodeSignals(CNodeSignals& nodeSignals)\n {\n     nodeSignals.GetHeight.connect(&GetHeight);\n     nodeSignals.ProcessMessages.connect(&ProcessMessages);\n     nodeSignals.SendMessages.connect(&SendMessages);\n+    nodeSignals.InitializeNode.connect(&InitializeNode);\n+    nodeSignals.FinalizeNode.connect(&FinalizeNode);\n }\n \n void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n {\n     nodeSignals.GetHeight.disconnect(&GetHeight);\n     nodeSignals.ProcessMessages.disconnect(&ProcessMessages);\n     nodeSignals.SendMessages.disconnect(&SendMessages);\n+    nodeSignals.InitializeNode.disconnect(&InitializeNode);\n+    nodeSignals.FinalizeNode.disconnect(&FinalizeNode);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -2915,6 +2966,23 @@ bool static AlreadyHave(const CInv& inv)\n }\n \n \n+void Misbehaving(NodeId pnode, int howmuch)\n+{\n+    if (howmuch == 0)\n+        return;\n+\n+    CNodeState *state = State(pnode);\n+    if (state == NULL)\n+        return;\n+\n+    state->nMisbehavior += howmuch;\n+    if (state->nMisbehavior >= GetArg(\"-banscore\", 100))\n+    {\n+        LogPrintf(\"Misbehaving: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", state->name.c_str(), state->nMisbehavior-howmuch, state->nMisbehavior);\n+        state->fShouldBan = true;\n+    } else\n+        LogPrintf(\"Misbehaving: %s (%d -> %d)\\n\", state->name.c_str(), state->nMisbehavior-howmuch, state->nMisbehavior);\n+}\n \n void static ProcessGetData(CNode* pfrom)\n {\n@@ -3048,7 +3116,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (pfrom->nVersion != 0)\n         {\n             pfrom->PushMessage(\"reject\", strCommand, REJECT_DUPLICATE, string(\"Duplicate version message\"));\n-            pfrom->Misbehaving(1);\n+            Misbehaving(pfrom->GetId(), 1);\n             return false;\n         }\n \n@@ -3153,7 +3221,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     else if (pfrom->nVersion == 0)\n     {\n         // Must have a version message before anything else\n-        pfrom->Misbehaving(1);\n+        Misbehaving(pfrom->GetId(), 1);\n         return false;\n     }\n \n@@ -3174,7 +3242,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             return true;\n         if (vAddr.size() > 1000)\n         {\n-            pfrom->Misbehaving(20);\n+            Misbehaving(pfrom->GetId(), 20);\n             return error(\"message addr size() = %\"PRIszu\"\", vAddr.size());\n         }\n \n@@ -3237,7 +3305,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n-            pfrom->Misbehaving(20);\n+            Misbehaving(pfrom->GetId(), 20);\n             return error(\"message inv size() = %\"PRIszu\"\", vInv.size());\n         }\n \n@@ -3288,7 +3356,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         vRecv >> vInv;\n         if (vInv.size() > MAX_INV_SZ)\n         {\n-            pfrom->Misbehaving(20);\n+            Misbehaving(pfrom->GetId(), 20);\n             return error(\"message getdata size() = %\"PRIszu\"\", vInv.size());\n         }\n \n@@ -3461,7 +3529,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                state.GetRejectReason(), inv.hash);\n             if (nDoS > 0)\n-                pfrom->Misbehaving(nDoS);\n+                Misbehaving(pfrom->GetId(), nDoS);\n         }\n     }\n \n@@ -3488,7 +3556,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             pfrom->PushMessage(\"reject\", strCommand, state.GetRejectCode(),\n                                state.GetRejectReason(), inv.hash);\n             if (nDoS > 0)\n-                pfrom->Misbehaving(nDoS);\n+                Misbehaving(pfrom->GetId(), nDoS);\n         }\n     }\n \n@@ -3631,7 +3699,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 // This isn't a Misbehaving(100) (immediate ban) because the\n                 // peer might be an older or different implementation with\n                 // a different signature key, etc.\n-                pfrom->Misbehaving(10);\n+                Misbehaving(pfrom->GetId(), 10);\n             }\n         }\n     }\n@@ -3644,7 +3712,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         if (!filter.IsWithinSizeConstraints())\n             // There is no excuse for sending a too-large filter\n-            pfrom->Misbehaving(100);\n+            Misbehaving(pfrom->GetId(), 100);\n         else\n         {\n             LOCK(pfrom->cs_filter);\n@@ -3665,13 +3733,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // and thus, the maximum size any matched object can have) in a filteradd message\n         if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n         {\n-            pfrom->Misbehaving(100);\n+            Misbehaving(pfrom->GetId(), 100);\n         } else {\n             LOCK(pfrom->cs_filter);\n             if (pfrom->pfilter)\n                 pfrom->pfilter->insert(vData);\n             else\n-                pfrom->Misbehaving(100);\n+                Misbehaving(pfrom->GetId(), 100);\n         }\n     }\n \n@@ -3936,6 +4004,16 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (!lockMain)\n             return true;\n \n+        if (State(pto->GetId())->fShouldBan) {\n+            if (pto->addr.IsLocal())\n+                LogPrintf(\"Warning: not banning local node %s!\\n\", pto->addr.ToString().c_str());\n+            else {\n+                pto->fDisconnect = true;\n+                CNode::Ban(pto->addr);\n+            }\n+            State(pto->GetId())->fShouldBan = false;\n+        }\n+\n         // Start block sync\n         if (pto->fStartSync && !fImporting && !fReindex) {\n             pto->fStartSync = false;"
      },
      {
        "sha": "c52f37cc87122330c7a8985e2dacfee03f9875f3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -110,6 +110,7 @@ class CTxUndo;\n class CScriptCheck;\n class CValidationState;\n class CWalletInterface;\n+struct CNodeStateStats;\n \n struct CBlockTemplate;\n \n@@ -182,6 +183,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash);\n bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n /** Abort with a message */\n bool AbortNode(const std::string &msg);\n+/** Get statistics from node state */\n+bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n@@ -194,6 +197,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n \n \n+struct CNodeStateStats {\n+    int nMisbehavior;\n+};\n+\n struct CDiskBlockPos\n {\n     int nFile;"
      },
      {
        "sha": "a6a04cdd46a93326171e1ebcd9c46a9fd7b847f9",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 22,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -80,6 +80,9 @@ CCriticalSection cs_setservAddNodeAddresses;\n vector<std::string> vAddedNodes;\n CCriticalSection cs_vAddedNodes;\n \n+NodeId nLastNodeId = 0;\n+CCriticalSection cs_nLastNodeId;\n+\n static CSemaphore *semOutbound = NULL;\n \n // Signals for message handling\n@@ -581,35 +584,21 @@ bool CNode::IsBanned(CNetAddr ip)\n     return fResult;\n }\n \n-bool CNode::Misbehaving(int howmuch)\n-{\n-    if (addr.IsLocal())\n+bool CNode::Ban(const CNetAddr &addr) {\n+    int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n     {\n-        LogPrintf(\"Warning: Local node %s misbehaving (delta: %d)!\\n\", addrName.c_str(), howmuch);\n-        return false;\n+        LOCK(cs_setBanned);\n+        if (setBanned[addr] < banTime)\n+            setBanned[addr] = banTime;\n     }\n-\n-    nMisbehavior += howmuch;\n-    if (nMisbehavior >= GetArg(\"-banscore\", 100))\n-    {\n-        int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n-        LogPrintf(\"Misbehaving: %s (%d -> %d) DISCONNECTING\\n\", addr.ToString().c_str(), nMisbehavior-howmuch, nMisbehavior);\n-        {\n-            LOCK(cs_setBanned);\n-            if (setBanned[addr] < banTime)\n-                setBanned[addr] = banTime;\n-        }\n-        CloseSocketDisconnect();\n-        return true;\n-    } else\n-        LogPrintf(\"Misbehaving: %s (%d -> %d)\\n\", addr.ToString().c_str(), nMisbehavior-howmuch, nMisbehavior);\n-    return false;\n+    return true;\n }\n \n #undef X\n #define X(name) stats.name = name\n void CNode::copyStats(CNodeStats &stats)\n {\n+    stats.nodeid = this->GetId();\n     X(nServices);\n     X(nLastSend);\n     X(nLastRecv);\n@@ -619,7 +608,6 @@ void CNode::copyStats(CNodeStats &stats)\n     X(cleanSubVer);\n     X(fInbound);\n     X(nStartingHeight);\n-    X(nMisbehavior);\n     X(nSendBytes);\n     X(nRecvBytes);\n     stats.fSyncNode = (this == pnodeSync);"
      },
      {
        "sha": "5835001739b934aaf49828899becceba29e6928d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 21,
        "deletions": 5,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -57,14 +57,19 @@ void StartNode(boost::thread_group& threadGroup);\n bool StopNode();\n void SocketSendData(CNode *pnode);\n \n+typedef int NodeId;\n+\n // Signals for message handling\n struct CNodeSignals\n {\n     boost::signals2::signal<int ()> GetHeight;\n     boost::signals2::signal<bool (CNode*)> ProcessMessages;\n     boost::signals2::signal<bool (CNode*, bool)> SendMessages;\n+    boost::signals2::signal<void (NodeId, const CNode*)> InitializeNode;\n+    boost::signals2::signal<void (NodeId)> FinalizeNode;\n };\n \n+\n CNodeSignals& GetNodeSignals();\n \n \n@@ -109,12 +114,14 @@ extern limitedmap<CInv, int64_t> mapAlreadyAskedFor;\n extern std::vector<std::string> vAddedNodes;\n extern CCriticalSection cs_vAddedNodes;\n \n-\n+extern NodeId nLastNodeId;\n+extern CCriticalSection cs_nLastNodeId;\n \n \n class CNodeStats\n {\n public:\n+    NodeId nodeid;\n     uint64_t nServices;\n     int64_t nLastSend;\n     int64_t nLastRecv;\n@@ -124,7 +131,6 @@ class CNodeStats\n     std::string cleanSubVer;\n     bool fInbound;\n     int nStartingHeight;\n-    int nMisbehavior;\n     uint64_t nSendBytes;\n     uint64_t nRecvBytes;\n     bool fSyncNode;\n@@ -223,13 +229,13 @@ class CNode\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n     int nRefCount;\n+    NodeId id;\n protected:\n \n     // Denial-of-service detection/prevention\n     // Key is IP address, value is banned-until-time\n     static std::map<CNetAddr, int64_t> setBanned;\n     static CCriticalSection cs_setBanned;\n-    int nMisbehavior;\n \n     // Basic fuzz-testing\n     void Fuzz(int nChance); // modifies ssSend\n@@ -289,7 +295,6 @@ class CNode\n         nStartingHeight = -1;\n         fStartSync = false;\n         fGetAddr = false;\n-        nMisbehavior = 0;\n         fRelayTxes = false;\n         setInventoryKnown.max_size(SendBufferSize() / 1000);\n         pfilter = new CBloomFilter();\n@@ -298,9 +303,16 @@ class CNode\n         nPingUsecTime = 0;\n         fPingQueued = false;\n \n+        {\n+            LOCK(cs_nLastNodeId);\n+            id = nLastNodeId++;\n+        }\n+\n         // Be shy and don't send version until we hear\n         if (hSocket != INVALID_SOCKET && !fInbound)\n             PushVersion();\n+\n+        GetNodeSignals().InitializeNode(GetId(), this);\n     }\n \n     ~CNode()\n@@ -312,6 +324,7 @@ class CNode\n         }\n         if (pfilter)\n             delete pfilter;\n+        GetNodeSignals().FinalizeNode(GetId());\n     }\n \n private:\n@@ -326,6 +339,9 @@ class CNode\n \n public:\n \n+    NodeId GetId() const {\n+      return id;\n+    }\n \n     int GetRefCount()\n     {\n@@ -673,7 +689,7 @@ class CNode\n     // new code.\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n-    bool Misbehaving(int howmuch); // 1 == a little, 100 == a lot\n+    static bool Ban(const CNetAddr &ip);\n     void copyStats(CNodeStats &stats);\n \n     // Network stats"
      },
      {
        "sha": "93811e80ed6becd81b8c75f8f293ef50339dd003",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -2,6 +2,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #include \"rpcserver.h\"\n+\n+\n+#include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n@@ -114,7 +117,8 @@ Value getpeerinfo(const Array& params, bool fHelp)\n \n     BOOST_FOREACH(const CNodeStats& stats, vstats) {\n         Object obj;\n-\n+        CNodeStateStats statestats;\n+        bool fStateStats = GetNodeStateStats(stats.nodeid, statestats);\n         obj.push_back(Pair(\"addr\", stats.addrName));\n         if (!(stats.addrLocal.empty()))\n             obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n@@ -134,7 +138,9 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n-        obj.push_back(Pair(\"banscore\", stats.nMisbehavior));\n+        if (fStateStats) {\n+            obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));\n+        }\n         if (stats.fSyncNode)\n             obj.push_back(Pair(\"syncnode\", true));\n "
      },
      {
        "sha": "fbca09b4dc1d3d91860e8687834fc1c8133c6e98",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 7,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -21,6 +21,7 @@\n // Tests this internal-to-main.cpp method:\n extern bool AddOrphanTx(const CTransaction& tx);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n+extern void Misbehaving(NodeId nodeid, int howmuch);\n extern std::map<uint256, CTransaction> mapOrphanTransactions;\n extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n \n@@ -38,16 +39,21 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CNode::ClearBanned();\n     CAddress addr1(ip(0xa0b0c001));\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n-    dummyNode1.Misbehaving(100); // Should get banned\n+    dummyNode1.nVersion = 1;\n+    Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n+    SendMessages(&dummyNode1, false);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     BOOST_CHECK(!CNode::IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002));\n     CNode dummyNode2(INVALID_SOCKET, addr2, \"\", true);\n-    dummyNode2.Misbehaving(50);\n+    dummyNode2.nVersion = 1;\n+    Misbehaving(dummyNode2.GetId(), 50);\n+    SendMessages(&dummyNode2, false);\n     BOOST_CHECK(!CNode::IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(CNode::IsBanned(addr1));  // ... but 1 still should be\n-    dummyNode2.Misbehaving(50);\n+    Misbehaving(dummyNode2.GetId(), 50);\n+    SendMessages(&dummyNode2, false);\n     BOOST_CHECK(CNode::IsBanned(addr2));\n }\n \n@@ -57,11 +63,15 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001));\n     CNode dummyNode1(INVALID_SOCKET, addr1, \"\", true);\n-    dummyNode1.Misbehaving(100);\n+    dummyNode1.nVersion = 1;\n+    Misbehaving(dummyNode1.GetId(), 100);\n+    SendMessages(&dummyNode1, false);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n-    dummyNode1.Misbehaving(10);\n+    Misbehaving(dummyNode1.GetId(), 10);\n+    SendMessages(&dummyNode1, false);\n     BOOST_CHECK(!CNode::IsBanned(addr1));\n-    dummyNode1.Misbehaving(1);\n+    Misbehaving(dummyNode1.GetId(), 1);\n+    SendMessages(&dummyNode1, false);\n     BOOST_CHECK(CNode::IsBanned(addr1));\n     mapArgs.erase(\"-banscore\");\n }\n@@ -74,8 +84,10 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n     CAddress addr(ip(0xa0b0c001));\n     CNode dummyNode(INVALID_SOCKET, addr, \"\", true);\n+    dummyNode.nVersion = 1;\n \n-    dummyNode.Misbehaving(100);\n+    Misbehaving(dummyNode.GetId(), 100);\n+    SendMessages(&dummyNode, false);\n     BOOST_CHECK(CNode::IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      },
      {
        "sha": "a4592fe803fe1751727284617d53038512767f75",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2864d2fb35fa85e32c76e111f8900598e0bb69d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=b2864d2fb35fa85e32c76e111f8900598e0bb69d",
        "patch": "@@ -47,11 +47,13 @@ struct TestingSetup {\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n             threadGroup.create_thread(&ThreadScriptCheck);\n+        RegisterNodeSignals(GetNodeSignals());\n     }\n     ~TestingSetup()\n     {\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n+        UnregisterNodeSignals(GetNodeSignals());\n #ifdef ENABLE_WALLET\n         delete pwalletMain;\n         pwalletMain = NULL;"
      }
    ]
  }
]