[
  {
    "sha": "fbd860287e6474bd7a61013796541bf2ea72d5cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmQ4NjAyODdlNjQ3NGJkN2E2MTAxMzc5NjU0MWJmMmVhNzJkNWNk",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-15T19:10:01Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-16T00:55:44Z"
      },
      "message": "Pass compiler flags down into leveldb make\n\nFixes issue#2288. Includes cleanups from Luke's pull 2243.",
      "tree": {
        "sha": "2cb4bd14ab1c17d81adb335d55902815befa5890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cb4bd14ab1c17d81adb335d55902815befa5890"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbd860287e6474bd7a61013796541bf2ea72d5cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd860287e6474bd7a61013796541bf2ea72d5cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd860287e6474bd7a61013796541bf2ea72d5cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd860287e6474bd7a61013796541bf2ea72d5cd/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f0fa79db290d5139c27409055b2035099afa6fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0fa79db290d5139c27409055b2035099afa6fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0fa79db290d5139c27409055b2035099afa6fd"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 28,
      "deletions": 21
    },
    "files": [
      {
        "sha": "169d22779458263c965cacea0f3504501bd13fdb",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd860287e6474bd7a61013796541bf2ea72d5cd/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd860287e6474bd7a61013796541bf2ea72d5cd/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "patch": "@@ -99,14 +99,14 @@ contains(BITCOIN_NEED_QT_PLUGINS, 1) {\n INCLUDEPATH += src/leveldb/include src/leveldb/helpers\n LIBS += $$PWD/src/leveldb/libleveldb.a $$PWD/src/leveldb/libmemenv.a\n !win32 {\n-    genleveldb.commands = cd $$PWD/src/leveldb && $(MAKE) libleveldb.a libmemenv.a\n+    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX $(MAKE) OPT=\\\"$$QMAKE_CXXFLAGS\\\" libleveldb.a libmemenv.a\n } else {\n     # make an educated guess about what the ranlib command is called\n     isEmpty(QMAKE_RANLIB) {\n         QMAKE_RANLIB = $$replace(QMAKE_STRIP, strip, ranlib)\n     }\n     LIBS += -lshlwapi\n-    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a\n+    genleveldb.commands = cd $$PWD/src/leveldb && CC=$$QMAKE_CC CXX=$$QMAKE_CXX TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) OPT=\\\"$$QMAKE_CXXFLAGS\\\" libleveldb.a libmemenv.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libleveldb.a && $$QMAKE_RANLIB $$PWD/src/leveldb/libmemenv.a\n }\n genleveldb.target = $$PWD/src/leveldb/libleveldb.a\n genleveldb.depends = FORCE"
      },
      {
        "sha": "4860a159976b90857f7c44998e116984d7972301",
        "filename": "contrib/gitian-descriptors/gitian-win32.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd860287e6474bd7a61013796541bf2ea72d5cd/contrib/gitian-descriptors/gitian-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd860287e6474bd7a61013796541bf2ea72d5cd/contrib/gitian-descriptors/gitian-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win32.yml?ref=fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "patch": "@@ -51,7 +51,7 @@ script: |\n   export LD_PRELOAD=/usr/lib/faketime/libfaketime.so.1\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  $HOME/qt/src/bin/qmake -spec unsupported/win32-g++-cross MINIUPNPC_LIB_PATH=$HOME/build/miniupnpc MINIUPNPC_INCLUDE_PATH=$HOME/build/ BDB_LIB_PATH=$HOME/build/db-4.8.30.NC/build_unix BDB_INCLUDE_PATH=$HOME/build/db-4.8.30.NC/build_unix BOOST_LIB_PATH=$HOME/build/boost_1_50_0/stage/lib BOOST_INCLUDE_PATH=$HOME/build/boost_1_50_0 BOOST_LIB_SUFFIX=-mt-s BOOST_THREAD_LIB_SUFFIX=_win32-mt-s OPENSSL_LIB_PATH=$HOME/build/openssl-1.0.1c OPENSSL_INCLUDE_PATH=$HOME/build/openssl-1.0.1c/include QRENCODE_LIB_PATH=$HOME/build/qrencode-3.2.0/.libs QRENCODE_INCLUDE_PATH=$HOME/build/qrencode-3.2.0 USE_QRCODE=1 INCLUDEPATH=$HOME/build DEFINES=BOOST_THREAD_USE_LIB BITCOIN_NEED_QT_PLUGINS=1 QMAKE_LRELEASE=lrelease QMAKE_CXXFLAGS=-frandom-seed=bitcoin QMAKE_LFLAGS=-frandom-seed=bitcoin USE_BUILD_INFO=1\n+  $HOME/qt/src/bin/qmake -spec unsupported/win32-g++-cross MINIUPNPC_LIB_PATH=$HOME/build/miniupnpc MINIUPNPC_INCLUDE_PATH=$HOME/build/ BDB_LIB_PATH=$HOME/build/db-4.8.30.NC/build_unix BDB_INCLUDE_PATH=$HOME/build/db-4.8.30.NC/build_unix BOOST_LIB_PATH=$HOME/build/boost_1_50_0/stage/lib BOOST_INCLUDE_PATH=$HOME/build/boost_1_50_0 BOOST_LIB_SUFFIX=-mt-s BOOST_THREAD_LIB_SUFFIX=_win32-mt-s OPENSSL_LIB_PATH=$HOME/build/openssl-1.0.1c OPENSSL_INCLUDE_PATH=$HOME/build/openssl-1.0.1c/include QRENCODE_LIB_PATH=$HOME/build/qrencode-3.2.0/.libs QRENCODE_INCLUDE_PATH=$HOME/build/qrencode-3.2.0 USE_QRCODE=1 INCLUDEPATH=$HOME/build DEFINES=BOOST_THREAD_USE_LIB BITCOIN_NEED_QT_PLUGINS=1 QMAKE_LRELEASE=lrelease QMAKE_CXXFLAGS=-frandom-seed=bitcoin USE_BUILD_INFO=1\n   make $MAKEOPTS\n   cp release/bitcoin-qt.exe $OUTDIR/\n   #"
      },
      {
        "sha": "f6c3a8ad7ee09684e02db3a8be14f733bbdbdcf1",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "patch": "@@ -4,6 +4,9 @@\n \n DEPSDIR:=/usr/i586-mingw32msvc\n \n+CC ?= i586-mingw32msvc-gcc\n+CXX ?= i586-mingw32msvc-g++\n+\n USE_UPNP:=0\n USE_IPV6:=1\n \n@@ -58,6 +61,7 @@ LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l w\n HEADERS = $(wildcard *.h)\n \n OBJS= \\\n+    leveldb/libleveldb.a \\\n     obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n@@ -95,27 +99,26 @@ all: bitcoind.exe\n DEFS += -I\"$(CURDIR)/leveldb/include\"\n DEFS += -I\"$(CURDIR)/leveldb/helpers\"\n leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && CC=i586-mingw32msvc-gcc CXX=i586-mingw32msvc-g++ TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS=\"$(INCLUDEPATHS)\" LDFLAGS=\"$(LIBPATHS)\" $(MAKE) libleveldb.a libmemenv.a && i586-mingw32msvc-ranlib libleveldb.a && i586-mingw32msvc-ranlib libmemenv.a && cd ..\n-obj/leveldb.o: leveldb/libleveldb.a\n+\t@echo \"Building LevelDB ...\" && cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(CFLAGS)\" libleveldb.a libmemenv.a && i586-mingw32msvc-ranlib libleveldb.a && i586-mingw32msvc-ranlib libmemenv.a && cd ..\n \n obj/build.h: FORCE\n \t/bin/sh ../share/genbuild.sh obj/build.h\n version.cpp: obj/build.h\n DEFS += -DHAVE_BUILD_INFO\n \n obj/%.o: %.cpp $(HEADERS)\n-\ti586-mingw32msvc-g++ -c $(CFLAGS) -o $@ $<\n+\t$(CXX) -c $(CFLAGS) -o $@ $<\n \n bitcoind.exe: $(OBJS:obj/%=obj/%)\n-\ti586-mingw32msvc-g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n+\t$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n \n TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n \n obj-test/%.o: test/%.cpp $(HEADERS)\n-\ti586-mingw32msvc-g++ -c $(TESTDEFS) $(CFLAGS) -o $@ $<\n+\t$(CXX) -c $(TESTDEFS) $(CFLAGS) -o $@ $<\n \n test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))\n-\ti586-mingw32msvc-g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework-mt-s $(LIBS)\n+\t$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework-mt-s $(LIBS)\n \n \n clean:"
      },
      {
        "sha": "2e092ff6863d275e0f658ca8cf564ab4cc50c9d7",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "patch": "@@ -15,6 +15,8 @@\n # 'make clean' assumes it is running inside a MSYS shell, and uses 'rm'\n # to remove files.\n \n+CXX ?= g++\n+\n USE_UPNP:=-\n USE_IPV6:=1\n \n@@ -67,6 +69,7 @@ LIBS += -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell\n HEADERS = $(wildcard *.h)\n \n OBJS= \\\n+    leveldb/libleveldb.a \\\n     obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n@@ -112,23 +115,21 @@ DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n \n leveldb/libleveldb.a:\n-\tcd leveldb && $(MAKE) OPT=\"$(DEBUGFLAGS)\" TARGET_OS=NATIVE_WINDOWS libleveldb.a libmemenv.a && cd ..\n-\n-obj/leveldb.o: leveldb/libleveldb.a\n+\tcd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(CFLAGS)\" TARGET_OS=NATIVE_WINDOWS libleveldb.a libmemenv.a && cd ..\n \n obj/%.o: %.cpp $(HEADERS)\n-\tg++ -c $(CFLAGS) -o $@ $<\n+\t$(CXX) -c $(CFLAGS) -o $@ $<\n \n bitcoind.exe: $(OBJS:obj/%=obj/%)\n-\tg++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n+\t$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)\n \n TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))\n \n obj-test/%.o: test/%.cpp $(HEADERS)\n-\tg++ -c $(TESTDEFS) $(CFLAGS) -o $@ $<\n+\t$(CXX) -c $(TESTDEFS) $(CFLAGS) -o $@ $<\n \n test_bitcoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))\n-\tg++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)\n+\t$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)\n \n clean:\n \trm -f bitcoind.exe test_bitcoin.exe"
      },
      {
        "sha": "cdee7812575fca68a2520f11e9966d579a084278",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "patch": "@@ -62,14 +62,15 @@ ifdef RELEASE\n # the same way.\n CFLAGS = -mmacosx-version-min=10.5 -arch i386 -O3\n else\n-CFLAGS = -g\n+DEBUGFLAGS = -g\n endif\n \n # ppc doesn't work because we don't support big-endian\n CFLAGS += -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \\\n     $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)\n \n OBJS= \\\n+    leveldb/libleveldb.a \\\n     obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n@@ -130,8 +131,7 @@ LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) libleveldb.a libmemenv.a && cd ..\n-obj/leveldb.o: leveldb/libleveldb.a\n+\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(CFLAGS)\" libleveldb.a libmemenv.a && cd ..\n \n # auto-generated dependencies:\n -include obj/*.P\n@@ -171,5 +171,6 @@ clean:\n \t-rm -f obj/*.P\n \t-rm -f obj-test/*.P\n \t-rm -f obj/build.h\n+\t-cd leveldb && $(MAKE) clean || true\n \n FORCE:"
      },
      {
        "sha": "ece2f59cf5a7092eb760ff57deb409810e65ab18",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd860287e6474bd7a61013796541bf2ea72d5cd/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "patch": "@@ -101,6 +101,7 @@ xCXXFLAGS=-O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-para\n xLDFLAGS=$(LDHARDENING) $(LDFLAGS)\n \n OBJS= \\\n+    leveldb/libleveldb.a \\\n     obj/alert.o \\\n     obj/version.o \\\n     obj/checkpoints.o \\\n@@ -142,12 +143,12 @@ test check: test_bitcoin FORCE\n #\n # LevelDB support\n #\n+MAKEOVERRIDES =\n LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/include)\n DEFS += $(addprefix -I,$(CURDIR)/leveldb/helpers)\n leveldb/libleveldb.a:\n-\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) libleveldb.a libmemenv.a && cd ..\n-obj/leveldb.o: leveldb/libleveldb.a\n+\t@echo \"Building LevelDB ...\" && cd leveldb && $(MAKE) CC=$(CC) CXX=$(CXX) OPT=\"$(xCXXFLAGS)\" libleveldb.a libmemenv.a && cd ..\n \n # auto-generated dependencies:\n -include obj/*.P\n@@ -187,5 +188,6 @@ clean:\n \t-rm -f obj/*.P\n \t-rm -f obj-test/*.P\n \t-rm -f obj/build.h\n+\t-cd leveldb && $(MAKE) clean || true\n \n FORCE:"
      }
    ]
  },
  {
    "sha": "efb6d9aae7595ee2c76aa898b94aed53f079390f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmI2ZDlhYWU3NTk1ZWUyYzc2YWE4OThiOTRhZWQ1M2YwNzkzOTBm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-15T21:53:50Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-16T00:55:44Z"
      },
      "message": "Minor build fixes\n\nTwo changes: make some linux-specific linker options linux and linker specific.\nAnd in the cross-compile environment, prefer the $HOME/qt/bin tools to\nwhatever might be somewhere else in the path.",
      "tree": {
        "sha": "3c7600952f484dbfe599757fdd9b8b1adabaf3c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c7600952f484dbfe599757fdd9b8b1adabaf3c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efb6d9aae7595ee2c76aa898b94aed53f079390f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb6d9aae7595ee2c76aa898b94aed53f079390f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efb6d9aae7595ee2c76aa898b94aed53f079390f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb6d9aae7595ee2c76aa898b94aed53f079390f/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd860287e6474bd7a61013796541bf2ea72d5cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd860287e6474bd7a61013796541bf2ea72d5cd"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1c6bc0a6543047171ca8277e45980039b7af8d90",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb6d9aae7595ee2c76aa898b94aed53f079390f/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb6d9aae7595ee2c76aa898b94aed53f079390f/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=efb6d9aae7595ee2c76aa898b94aed53f079390f",
        "patch": "@@ -29,19 +29,19 @@ contains(RELEASE, 1) {\n \n     !win32:!macx {\n         # Linux: static link\n-        LIBS += -Wl,-Bstatic\n+        LIBS += -Wl,-Bstatic -Wl,-z,relro -Wl,-z,now\n+        # for extra security (see: https://wiki.debian.org/Hardening)\n+        QMAKE_CXXFLAGS *= -D_FORTIFY_SOURCE=2\n     }\n }\n \n !win32 {\n-# for extra security against potential buffer overflows: enable GCCs Stack Smashing Protection\n-QMAKE_CXXFLAGS *= -fstack-protector-all\n-QMAKE_LFLAGS *= -fstack-protector-all\n-# We need to exclude this for Windows cross compile with MinGW 4.2.x, as it will result in a non-working executable!\n-# This can be enabled for Windows, when we switch to MinGW >= 4.4.x.\n+    # for extra security against potential buffer overflows: enable GCCs Stack Smashing Protection\n+    QMAKE_CXXFLAGS *= -fstack-protector-all\n+    QMAKE_LFLAGS *= -fstack-protector-all\n+    # Exclude on Windows cross compile with MinGW 4.2.x, as it will result in a non-working executable!\n+    # This can be enabled for Windows, when we switch to MinGW >= 4.4.x.\n }\n-# for extra security (see: https://wiki.debian.org/Hardening)\n-QMAKE_CXXFLAGS *= -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,-z,now\n # for extra security on Windows: enable ASLR and DEP via GCC linker flags\n win32:QMAKE_LFLAGS *= -Wl,--dynamicbase -Wl,--nxcompat\n # on Windows: enable GCC large address aware linker flag"
      },
      {
        "sha": "fd3b55325aebdee54eb30529e00696be865d0274",
        "filename": "contrib/gitian-descriptors/gitian-win32.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb6d9aae7595ee2c76aa898b94aed53f079390f/contrib/gitian-descriptors/gitian-win32.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb6d9aae7595ee2c76aa898b94aed53f079390f/contrib/gitian-descriptors/gitian-win32.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win32.yml?ref=efb6d9aae7595ee2c76aa898b94aed53f079390f",
        "patch": "@@ -24,7 +24,7 @@ script: |\n   cd $HOME/qt\n   unzip ../build/qt-win32-4.8.3-gitian-r1.zip\n   cd $HOME/build/\n-  export PATH=$PATH:$HOME/qt/bin/\n+  export PATH=$HOME/qt/bin/:$PATH\n   #\n   mkdir boost_1_50_0\n   cd boost_1_50_0"
      }
    ]
  },
  {
    "sha": "398774181a2d5575a0605e918944d85c5425d12e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTg3NzQxODFhMmQ1NTc1YTA2MDVlOTE4OTQ0ZDg1YzU0MjVkMTJl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-02-16T16:58:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-02-16T18:46:00Z"
      },
      "message": "Improve block database load error reporting",
      "tree": {
        "sha": "54bc4c16c4d8cbc864eaf445e1e3d95c18179dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54bc4c16c4d8cbc864eaf445e1e3d95c18179dd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/398774181a2d5575a0605e918944d85c5425d12e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398774181a2d5575a0605e918944d85c5425d12e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/398774181a2d5575a0605e918944d85c5425d12e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398774181a2d5575a0605e918944d85c5425d12e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f0fa79db290d5139c27409055b2035099afa6fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0fa79db290d5139c27409055b2035099afa6fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0fa79db290d5139c27409055b2035099afa6fd"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 90,
      "deletions": 26
    },
    "files": [
      {
        "sha": "99e89d9edc59f55045bf49b84376582d4ace6a8b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 18,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -82,6 +82,7 @@ void Shutdown(void* parg)\n     if (fFirstThread)\n     {\n         fShutdown = true;\n+        fRequestShutdown = true;\n         nTransactionsUpdated++;\n         bitdb.Flush(false);\n         {\n@@ -791,27 +792,69 @@ bool AppInit2()\n     nTotalCache -= nCoinDBCache;\n     nCoinCacheSize = nTotalCache / 300; // coins in memory require around 300 bytes\n \n-    uiInterface.InitMessage(_(\"Loading block index...\"));\n+    bool fLoaded = false;\n+    while (!fLoaded) {\n+        bool fReset = fReindex;\n+        std::string strLoadError;\n \n-    nStart = GetTimeMillis();\n-    pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n-    pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-    pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n-\n-    if (fReindex)\n-        pblocktree->WriteReindexing(true);\n-\n-    if (!LoadBlockIndex())\n-        return InitError(_(\"Error loading block database\"));\n+        uiInterface.InitMessage(_(\"Loading block index...\"));\n \n-    // Initialize the block index (no-op if non-empty database was already loaded)\n-    if (!InitBlockIndex())\n-        return InitError(_(\"Error initializing block database\"));\n-\n-    uiInterface.InitMessage(_(\"Verifying block database integrity...\"));\n+        nStart = GetTimeMillis();\n+        do {\n+            try {\n+                UnloadBlockIndex();\n+                delete pcoinsTip;\n+                delete pcoinsdbview;\n+                delete pblocktree;\n+\n+                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n+                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n+                pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+\n+                if (fReindex)\n+                    pblocktree->WriteReindexing(true);\n+\n+                if (!LoadBlockIndex()) {\n+                    strLoadError = _(\"Error loading block database\");\n+                    break;\n+                }\n+\n+                // Initialize the block index (no-op if non-empty database was already loaded)\n+                if (!InitBlockIndex()) {\n+                    strLoadError = _(\"Error initializing block database\");\n+                    break;\n+                }\n+\n+                uiInterface.InitMessage(_(\"Verifying block database integrity...\"));\n+                if (!VerifyDB()) {\n+                    strLoadError = _(\"Corrupted block database detected\");\n+                    break;\n+                }\n+            } catch(std::exception &e) {\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            }\n \n-    if (!VerifyDB())\n-        return InitError(_(\"Corrupted block database detected. Please restart the client with -reindex.\"));\n+            fLoaded = true;\n+        } while(false);\n+\n+        if (!fLoaded) {\n+            // first suggest a reindex\n+            if (!fReset) {\n+                bool fRet = uiInterface.ThreadSafeMessageBox(\n+                    strLoadError + \".\\n\" + _(\"Do you want to rebuild the block database now?\"),\n+                    \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n+                if (fRet) {\n+                    fReindex = true;\n+                    fRequestShutdown = false;\n+                } else {\n+                    return false;\n+                }\n+            } else {\n+                return InitError(strLoadError);\n+            }\n+        }\n+    }\n \n     if (mapArgs.count(\"-txindex\") && fTxIndex != GetBoolArg(\"-txindex\", false))\n         return InitError(_(\"You need to rebuild the databases using -reindex to change -txindex\"));"
      },
      {
        "sha": "3151a806dcb23fe9fbc1f22e801a61530b4b238c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -2653,6 +2653,18 @@ bool VerifyDB() {\n     return true;\n }\n \n+void UnloadBlockIndex()\n+{\n+    mapBlockIndex.clear();\n+    setBlockIndexValid.clear();\n+    pindexGenesisBlock = NULL;\n+    nBestHeight = 0;\n+    bnBestChainWork = 0;\n+    bnBestInvalidWork = 0;\n+    hashBestChain = 0;\n+    pindexBest = NULL;\n+}\n+\n bool LoadBlockIndex()\n {\n     if (fTestNet)"
      },
      {
        "sha": "4a217d174605c56041dcbfcc4f4f69bcb81ddec7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -139,6 +139,8 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n bool InitBlockIndex();\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n+/** Unload database information */\n+void UnloadBlockIndex();\n /** Verify consistency of the block and coin databases */\n bool VerifyDB();\n /** Print the loaded block tree */"
      },
      {
        "sha": "c0e00c471553f062a5ae2ae202b300a0115a677e",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -9,7 +9,7 @@\n \n #include <string>\n \n-static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n+static bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n     std::string strCaption;\n     // Check for usage of predefined caption\n@@ -29,7 +29,7 @@ static int noui_ThreadSafeMessageBox(const std::string& message, const std::stri\n \n     printf(\"%s: %s\\n\", strCaption.c_str(), message.c_str());\n     fprintf(stderr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n-    return 4;\n+    return false;\n }\n \n static bool noui_ThreadSafeAskFee(int64 /*nFeeRequired*/)"
      },
      {
        "sha": "afd8d71a0eca095b0b52649d31ef015b2bc36bae",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -34,23 +34,27 @@ Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n static BitcoinGUI *guiref;\n static QSplashScreen *splashref;\n \n-static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n+static bool ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n     // Message from network thread\n     if(guiref)\n     {\n         bool modal = (style & CClientUIInterface::MODAL);\n+        bool ret = false;\n         // In case of modal message, use blocking connection to wait for user to click a button\n         QMetaObject::invokeMethod(guiref, \"message\",\n                                    modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                    Q_ARG(QString, QString::fromStdString(caption)),\n                                    Q_ARG(QString, QString::fromStdString(message)),\n-                                   Q_ARG(unsigned int, style));\n+                                   Q_ARG(unsigned int, style),\n+                                   Q_ARG(bool*, &ret));\n+        return ret;\n     }\n     else\n     {\n         printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n         fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n+        return false;\n     }\n }\n "
      },
      {
        "sha": "d88470188381a5edf12a7a6a67ce35f6a0ecddbf",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -606,7 +606,7 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style)\n+void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)\n {\n     QString strTitle = tr(\"Bitcoin\") + \" - \";\n     // Default to information icon\n@@ -646,7 +646,9 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n             buttons = QMessageBox::Ok;\n \n         QMessageBox mBox((QMessageBox::Icon)nMBoxIcon, strTitle, message, buttons);\n-        mBox.exec();\n+        int r = mBox.exec();\n+        if (ret != NULL)\n+            *ret = r == QMessageBox::Ok;\n     }\n     else\n         notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);"
      },
      {
        "sha": "c684fcf249537987fa8f1e0683508eeb5f63d3df",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -126,8 +126,9 @@ public slots:\n        @param[in] message   the displayed text\n        @param[in] style     modality and style definitions (icon and used buttons - buttons only for message boxes)\n                             @see CClientUIInterface::MessageBoxFlags\n+       @param[in] ret       pointer to a bool that will be modified to whether Ok was clicked (modal only)\n     */\n-    void message(const QString &title, const QString &message, unsigned int style);\n+    void message(const QString &title, const QString &message, unsigned int style, bool *ret = NULL);\n     /** Asks the user whether to pay the transaction fee or to cancel the transaction.\n        It is currently not possible to pass a return value to another thread through\n        BlockingQueuedConnection, so an indirected pointer is used."
      },
      {
        "sha": "f7dbe208944e51d0242a493cc07c1af9ac76faf2",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/398774181a2d5575a0605e918944d85c5425d12e/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/398774181a2d5575a0605e918944d85c5425d12e/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=398774181a2d5575a0605e918944d85c5425d12e",
        "patch": "@@ -68,7 +68,7 @@ class CClientUIInterface\n     };\n \n     /** Show message box. */\n-    boost::signals2::signal<void (const std::string& message, const std::string& caption, unsigned int style)> ThreadSafeMessageBox;\n+    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;\n \n     /** Ask the user whether they want to pay a fee or not. */\n     boost::signals2::signal<bool (int64 nFeeRequired), boost::signals2::last_value<bool> > ThreadSafeAskFee;"
      }
    ]
  },
  {
    "sha": "1d83141803477f9625e301149fc9611f43f94592",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDgzMTQxODAzNDc3Zjk2MjVlMzAxMTQ5ZmM5NjExZjQzZjk0NTky",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-17T00:08:57Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-02-17T00:08:57Z"
      },
      "message": "Merge branch 'loaderror' of git://github.com/sipa/bitcoin",
      "tree": {
        "sha": "8f344ed7c1af45ab4da5dfbb77e8ca95a908c2d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f344ed7c1af45ab4da5dfbb77e8ca95a908c2d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d83141803477f9625e301149fc9611f43f94592",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d83141803477f9625e301149fc9611f43f94592",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d83141803477f9625e301149fc9611f43f94592",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d83141803477f9625e301149fc9611f43f94592/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "efb6d9aae7595ee2c76aa898b94aed53f079390f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb6d9aae7595ee2c76aa898b94aed53f079390f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efb6d9aae7595ee2c76aa898b94aed53f079390f"
      },
      {
        "sha": "398774181a2d5575a0605e918944d85c5425d12e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/398774181a2d5575a0605e918944d85c5425d12e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/398774181a2d5575a0605e918944d85c5425d12e"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 90,
      "deletions": 26
    },
    "files": [
      {
        "sha": "99e89d9edc59f55045bf49b84376582d4ace6a8b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 18,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -82,6 +82,7 @@ void Shutdown(void* parg)\n     if (fFirstThread)\n     {\n         fShutdown = true;\n+        fRequestShutdown = true;\n         nTransactionsUpdated++;\n         bitdb.Flush(false);\n         {\n@@ -791,27 +792,69 @@ bool AppInit2()\n     nTotalCache -= nCoinDBCache;\n     nCoinCacheSize = nTotalCache / 300; // coins in memory require around 300 bytes\n \n-    uiInterface.InitMessage(_(\"Loading block index...\"));\n+    bool fLoaded = false;\n+    while (!fLoaded) {\n+        bool fReset = fReindex;\n+        std::string strLoadError;\n \n-    nStart = GetTimeMillis();\n-    pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n-    pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-    pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n-\n-    if (fReindex)\n-        pblocktree->WriteReindexing(true);\n-\n-    if (!LoadBlockIndex())\n-        return InitError(_(\"Error loading block database\"));\n+        uiInterface.InitMessage(_(\"Loading block index...\"));\n \n-    // Initialize the block index (no-op if non-empty database was already loaded)\n-    if (!InitBlockIndex())\n-        return InitError(_(\"Error initializing block database\"));\n-\n-    uiInterface.InitMessage(_(\"Verifying block database integrity...\"));\n+        nStart = GetTimeMillis();\n+        do {\n+            try {\n+                UnloadBlockIndex();\n+                delete pcoinsTip;\n+                delete pcoinsdbview;\n+                delete pblocktree;\n+\n+                pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n+                pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n+                pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+\n+                if (fReindex)\n+                    pblocktree->WriteReindexing(true);\n+\n+                if (!LoadBlockIndex()) {\n+                    strLoadError = _(\"Error loading block database\");\n+                    break;\n+                }\n+\n+                // Initialize the block index (no-op if non-empty database was already loaded)\n+                if (!InitBlockIndex()) {\n+                    strLoadError = _(\"Error initializing block database\");\n+                    break;\n+                }\n+\n+                uiInterface.InitMessage(_(\"Verifying block database integrity...\"));\n+                if (!VerifyDB()) {\n+                    strLoadError = _(\"Corrupted block database detected\");\n+                    break;\n+                }\n+            } catch(std::exception &e) {\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            }\n \n-    if (!VerifyDB())\n-        return InitError(_(\"Corrupted block database detected. Please restart the client with -reindex.\"));\n+            fLoaded = true;\n+        } while(false);\n+\n+        if (!fLoaded) {\n+            // first suggest a reindex\n+            if (!fReset) {\n+                bool fRet = uiInterface.ThreadSafeMessageBox(\n+                    strLoadError + \".\\n\" + _(\"Do you want to rebuild the block database now?\"),\n+                    \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::BTN_ABORT);\n+                if (fRet) {\n+                    fReindex = true;\n+                    fRequestShutdown = false;\n+                } else {\n+                    return false;\n+                }\n+            } else {\n+                return InitError(strLoadError);\n+            }\n+        }\n+    }\n \n     if (mapArgs.count(\"-txindex\") && fTxIndex != GetBoolArg(\"-txindex\", false))\n         return InitError(_(\"You need to rebuild the databases using -reindex to change -txindex\"));"
      },
      {
        "sha": "3151a806dcb23fe9fbc1f22e801a61530b4b238c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -2653,6 +2653,18 @@ bool VerifyDB() {\n     return true;\n }\n \n+void UnloadBlockIndex()\n+{\n+    mapBlockIndex.clear();\n+    setBlockIndexValid.clear();\n+    pindexGenesisBlock = NULL;\n+    nBestHeight = 0;\n+    bnBestChainWork = 0;\n+    bnBestInvalidWork = 0;\n+    hashBestChain = 0;\n+    pindexBest = NULL;\n+}\n+\n bool LoadBlockIndex()\n {\n     if (fTestNet)"
      },
      {
        "sha": "4a217d174605c56041dcbfcc4f4f69bcb81ddec7",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -139,6 +139,8 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n bool InitBlockIndex();\n /** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n+/** Unload database information */\n+void UnloadBlockIndex();\n /** Verify consistency of the block and coin databases */\n bool VerifyDB();\n /** Print the loaded block tree */"
      },
      {
        "sha": "c0e00c471553f062a5ae2ae202b300a0115a677e",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -9,7 +9,7 @@\n \n #include <string>\n \n-static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n+static bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n     std::string strCaption;\n     // Check for usage of predefined caption\n@@ -29,7 +29,7 @@ static int noui_ThreadSafeMessageBox(const std::string& message, const std::stri\n \n     printf(\"%s: %s\\n\", strCaption.c_str(), message.c_str());\n     fprintf(stderr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n-    return 4;\n+    return false;\n }\n \n static bool noui_ThreadSafeAskFee(int64 /*nFeeRequired*/)"
      },
      {
        "sha": "afd8d71a0eca095b0b52649d31ef015b2bc36bae",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -34,23 +34,27 @@ Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n static BitcoinGUI *guiref;\n static QSplashScreen *splashref;\n \n-static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n+static bool ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n {\n     // Message from network thread\n     if(guiref)\n     {\n         bool modal = (style & CClientUIInterface::MODAL);\n+        bool ret = false;\n         // In case of modal message, use blocking connection to wait for user to click a button\n         QMetaObject::invokeMethod(guiref, \"message\",\n                                    modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n                                    Q_ARG(QString, QString::fromStdString(caption)),\n                                    Q_ARG(QString, QString::fromStdString(message)),\n-                                   Q_ARG(unsigned int, style));\n+                                   Q_ARG(unsigned int, style),\n+                                   Q_ARG(bool*, &ret));\n+        return ret;\n     }\n     else\n     {\n         printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n         fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n+        return false;\n     }\n }\n "
      },
      {
        "sha": "d88470188381a5edf12a7a6a67ce35f6a0ecddbf",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -606,7 +606,7 @@ void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style)\n+void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)\n {\n     QString strTitle = tr(\"Bitcoin\") + \" - \";\n     // Default to information icon\n@@ -646,7 +646,9 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n             buttons = QMessageBox::Ok;\n \n         QMessageBox mBox((QMessageBox::Icon)nMBoxIcon, strTitle, message, buttons);\n-        mBox.exec();\n+        int r = mBox.exec();\n+        if (ret != NULL)\n+            *ret = r == QMessageBox::Ok;\n     }\n     else\n         notificator->notify((Notificator::Class)nNotifyIcon, strTitle, message);"
      },
      {
        "sha": "c684fcf249537987fa8f1e0683508eeb5f63d3df",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -126,8 +126,9 @@ public slots:\n        @param[in] message   the displayed text\n        @param[in] style     modality and style definitions (icon and used buttons - buttons only for message boxes)\n                             @see CClientUIInterface::MessageBoxFlags\n+       @param[in] ret       pointer to a bool that will be modified to whether Ok was clicked (modal only)\n     */\n-    void message(const QString &title, const QString &message, unsigned int style);\n+    void message(const QString &title, const QString &message, unsigned int style, bool *ret = NULL);\n     /** Asks the user whether to pay the transaction fee or to cancel the transaction.\n        It is currently not possible to pass a return value to another thread through\n        BlockingQueuedConnection, so an indirected pointer is used."
      },
      {
        "sha": "f7dbe208944e51d0242a493cc07c1af9ac76faf2",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d83141803477f9625e301149fc9611f43f94592/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d83141803477f9625e301149fc9611f43f94592/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=1d83141803477f9625e301149fc9611f43f94592",
        "patch": "@@ -68,7 +68,7 @@ class CClientUIInterface\n     };\n \n     /** Show message box. */\n-    boost::signals2::signal<void (const std::string& message, const std::string& caption, unsigned int style)> ThreadSafeMessageBox;\n+    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;\n \n     /** Ask the user whether they want to pay a fee or not. */\n     boost::signals2::signal<bool (int64 nFeeRequired), boost::signals2::last_value<bool> > ThreadSafeAskFee;"
      }
    ]
  }
]