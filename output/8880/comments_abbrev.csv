sipa,2016-10-04T12:33:56Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251374950,251374950,
paveljanik,2016-10-04T13:23:18Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251386184,251386184,
btcdrak,2016-10-04T14:29:04Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251404622,251404622,
theuni,2016-10-04T15:24:43Z,utACK 2c09a5209ab00573a2422e1e65c437a6e2f59624\n,https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251421632,251421632,
laanwj,2016-10-04T16:05:57Z,"Added another commit:\n- protocol.h: Make enums in GetDataMsg concrete values: This concretizes the numbers and adds a comment to make it clear that these numbers are fixed by the protocol, and may avoid people forgetting to claim numbers in the future (e.g. issue #8500).\n",https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251433768,251433768,
laanwj,2016-10-05T11:33:59Z,Got rid of the awkward MSG_TYPE_MAX leftover _in between_ the enum values (and squashed). Thanks @paveljanik for noticing.\n,https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251650204,251650204,
sipa,2016-10-05T11:38:13Z,"The MSG_TYPE_MAX is a leftover from earlier code that got refactored in the\nsegwit PR. It delimited the maximum msg type that could be seen in an inv\n(as opposed to the next ones, which can only be seen in getdata).\n",https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251650889,251650889,
laanwj,2016-10-05T12:07:37Z,"> The MSG_TYPE_MAX is a leftover from earlier code that got refactored in thesegwit PR. \n\nOK, in historical context it makes sense, it just _looks_ weird now.\n",https://github.com/bitcoin/bitcoin/pull/8880#issuecomment-251656062,251656062,
paveljanik,2016-10-04T13:23:04Z,Comment removed. Is it OK?\n,https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81754651,81754651,src/protocol.h
theuni,2016-10-04T15:22:32Z,"nit: could make these constexprs instead while we're at it. No real reason other than cosmetic, though.\n",https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81782404,81782404,src/protocol.h
laanwj,2016-10-04T15:47:40Z,Huh yes now I look at it again using an enum here is a somewhat of a strange use of the C++ language.\n,https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81788363,81788363,src/protocol.h
laanwj,2016-10-04T15:52:32Z,"Though it looks like we use this kind of constant declaration in many places, and so does leveldb:\n\n```\narith_uint256.h:    enum { WIDTH=BITS/32 };\nchain.h:    enum { nMedianTimeSpan=11 };\nleveldb/db/skiplist.h:  enum { kMaxHeight = 12 };\nleveldb/helpers/memenv/memenv.cc:  enum { kBlockSize = 8 * 1024 };\n...\n```\n\nSo I suppose it's somewhat acceptable in some cases?\n",https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81789577,81789577,src/protocol.h
theuni,2016-10-04T16:37:18Z,"@laanwj Looks like several of those are hold-overs from c++03. In the case where there's no actual grouping and we're just using them as constants, I think constexpr's would be fine, but the enum is ofc acceptable as well.\n\nNevermind for here, we can discuss in a separate style guide PR.\n",https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81799351,81799351,src/protocol.h
laanwj,2016-10-05T02:16:59Z,See OP\n\n> and remove a deceptive TODO comment (this is just a dumb data structure describing the protocol and there's nothing to be gained from encapsulation at that level).\n,https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81890892,81890892,src/protocol.h
paveljanik,2016-10-05T10:45:42Z,MSG_TYPE_MAX is not used at all in the sources and looks strange in the middle...\n,https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81945997,81945997,src/protocol.h
laanwj,2016-10-05T11:24:44Z,HUH. That's a good catch. How could I have missed that one.\n,https://github.com/bitcoin/bitcoin/pull/8880#discussion_r81951431,81951431,src/protocol.h
