[
  {
    "sha": "f0fce0675d56b2226a993253731690ca864066c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGZjZTA2NzVkNTZiMjIyNmE5OTMyNTM3MzE2OTBjYTg2NDA2NmM4",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-10T00:52:37Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-12T14:25:50Z"
      },
      "message": "util: make EncodeBase58 consume Spans",
      "tree": {
        "sha": "25b8fb258913edec576cad0740f014f8fa643bef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25b8fb258913edec576cad0740f014f8fa643bef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0fce0675d56b2226a993253731690ca864066c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fce0675d56b2226a993253731690ca864066c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0fce0675d56b2226a993253731690ca864066c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fce0675d56b2226a993253731690ca864066c8/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd00d3b1f2036893419d1e8c514a8af2c4e4b1fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd00d3b1f2036893419d1e8c514a8af2c4e4b1fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd00d3b1f2036893419d1e8c514a8af2c4e4b1fb"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 13,
      "deletions": 23
    },
    "files": [
      {
        "sha": "715e4e78918ffc2c22c9ad7e38c144ee9418c9e0",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fce0675d56b2226a993253731690ca864066c8/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fce0675d56b2226a993253731690ca864066c8/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=f0fce0675d56b2226a993253731690ca864066c8",
        "patch": "@@ -84,21 +84,21 @@ bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch, int max_ret_\n     return true;\n }\n \n-std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n+std::string EncodeBase58(Span<const unsigned char> input)\n {\n     // Skip & count leading zeroes.\n     int zeroes = 0;\n     int length = 0;\n-    while (pbegin != pend && *pbegin == 0) {\n-        pbegin++;\n+    while (input.size() > 0 && input[0] == 0) {\n+        input = input.subspan(1);\n         zeroes++;\n     }\n     // Allocate enough space in big-endian base58 representation.\n-    int size = (pend - pbegin) * 138 / 100 + 1; // log(256) / log(58), rounded up.\n+    int size = input.size() * 138 / 100 + 1; // log(256) / log(58), rounded up.\n     std::vector<unsigned char> b58(size);\n     // Process the bytes.\n-    while (pbegin != pend) {\n-        int carry = *pbegin;\n+    while (input.size() > 0) {\n+        int carry = input[0];\n         int i = 0;\n         // Apply \"b58 = b58 * 256 + ch\".\n         for (std::vector<unsigned char>::reverse_iterator it = b58.rbegin(); (carry != 0 || i < length) && (it != b58.rend()); it++, i++) {\n@@ -109,7 +109,7 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n \n         assert(carry == 0);\n         length = i;\n-        pbegin++;\n+        input = input.subspan(1);\n     }\n     // Skip leading zeroes in base58 result.\n     std::vector<unsigned char>::iterator it = b58.begin() + (size - length);\n@@ -124,11 +124,6 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n     return str;\n }\n \n-std::string EncodeBase58(const std::vector<unsigned char>& vch)\n-{\n-    return EncodeBase58(vch.data(), vch.data() + vch.size());\n-}\n-\n bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len)\n {\n     if (!ValidAsCString(str)) {"
      },
      {
        "sha": "d9791d1dbe588c04d1887c916da2f9da029fd772",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fce0675d56b2226a993253731690ca864066c8/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fce0675d56b2226a993253731690ca864066c8/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=f0fce0675d56b2226a993253731690ca864066c8",
        "patch": "@@ -15,20 +15,15 @@\n #define BITCOIN_BASE58_H\n \n #include <attributes.h>\n+#include <span.h>\n \n #include <string>\n #include <vector>\n \n /**\n- * Encode a byte sequence as a base58-encoded string.\n- * pbegin and pend cannot be nullptr, unless both are.\n+ * Encode a byte span as a base58-encoded string\n  */\n-std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend);\n-\n-/**\n- * Encode a byte vector as a base58-encoded string\n- */\n-std::string EncodeBase58(const std::vector<unsigned char>& vch);\n+std::string EncodeBase58(Span<const unsigned char> input);\n \n /**\n  * Decode a base58-encoded string (psz) into a byte vector (vchRet)."
      },
      {
        "sha": "dee3ffeb6bba656ef55c46ba9f52364cc37fe159",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fce0675d56b2226a993253731690ca864066c8/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fce0675d56b2226a993253731690ca864066c8/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=f0fce0675d56b2226a993253731690ca864066c8",
        "patch": "@@ -20,7 +20,7 @@ static void Base58Encode(benchmark::Bench& bench)\n         }\n     };\n     bench.batch(buff.size()).unit(\"byte\").run([&] {\n-        EncodeBase58(buff.data(), buff.data() + buff.size());\n+        EncodeBase58(buff);\n     });\n }\n "
      },
      {
        "sha": "6e34aca0ebb4bacb0e6a39f9c4be64ad2833e16a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fce0675d56b2226a993253731690ca864066c8/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fce0675d56b2226a993253731690ca864066c8/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=f0fce0675d56b2226a993253731690ca864066c8",
        "patch": "@@ -94,7 +94,7 @@ static std::string DummyAddress(const CChainParams &params)\n     std::vector<unsigned char> sourcedata = params.Base58Prefix(CChainParams::PUBKEY_ADDRESS);\n     sourcedata.insert(sourcedata.end(), dummydata, dummydata + sizeof(dummydata));\n     for(int i=0; i<256; ++i) { // Try every trailing byte\n-        std::string s = EncodeBase58(sourcedata.data(), sourcedata.data() + sourcedata.size());\n+        std::string s = EncodeBase58(sourcedata);\n         if (!IsValidDestinationString(s)) {\n             return s;\n         }"
      },
      {
        "sha": "6a636f25749d5fe07e890611d165ee2bc0790137",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fce0675d56b2226a993253731690ca864066c8/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fce0675d56b2226a993253731690ca864066c8/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=f0fce0675d56b2226a993253731690ca864066c8",
        "patch": "@@ -33,7 +33,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n         std::vector<unsigned char> sourcedata = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n         BOOST_CHECK_MESSAGE(\n-                    EncodeBase58(sourcedata.data(), sourcedata.data() + sourcedata.size()) == base58string,\n+                    EncodeBase58(sourcedata) == base58string,\n                     strTest);\n     }\n }"
      }
    ]
  },
  {
    "sha": "356988e200b1debaa80d210d502d2d085c72dc64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTY5ODhlMjAwYjFkZWJhYTgwZDIxMGQ1MDJkMmQwODVjNzJkYzY0",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-10T01:03:10Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2020-08-12T14:25:50Z"
      },
      "message": "util: make EncodeBase58Check consume Spans",
      "tree": {
        "sha": "1d44ec1ddd069ffeb785acb30c438a6a08ea2a0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d44ec1ddd069ffeb785acb30c438a6a08ea2a0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/356988e200b1debaa80d210d502d2d085c72dc64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/356988e200b1debaa80d210d502d2d085c72dc64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/356988e200b1debaa80d210d502d2d085c72dc64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/356988e200b1debaa80d210d502d2d085c72dc64/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0fce0675d56b2226a993253731690ca864066c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fce0675d56b2226a993253731690ca864066c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0fce0675d56b2226a993253731690ca864066c8"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "18cd2090e0664ca9167162967ffa97501a404ab4",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356988e200b1debaa80d210d502d2d085c72dc64/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356988e200b1debaa80d210d502d2d085c72dc64/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=356988e200b1debaa80d210d502d2d085c72dc64",
        "patch": "@@ -132,10 +132,10 @@ bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, in\n     return DecodeBase58(str.c_str(), vchRet, max_ret_len);\n }\n \n-std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n+std::string EncodeBase58Check(Span<const unsigned char> input)\n {\n     // add 4-byte hash check to the end\n-    std::vector<unsigned char> vch(vchIn);\n+    std::vector<unsigned char> vch(input.begin(), input.end());\n     uint256 hash = Hash(vch);\n     vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n     return EncodeBase58(vch);"
      },
      {
        "sha": "b87664b78b5ec5c6bbcc9831d0143af0282e9cd5",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356988e200b1debaa80d210d502d2d085c72dc64/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356988e200b1debaa80d210d502d2d085c72dc64/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=356988e200b1debaa80d210d502d2d085c72dc64",
        "patch": "@@ -39,9 +39,9 @@ NODISCARD bool DecodeBase58(const char* psz, std::vector<unsigned char>& vchRet,\n NODISCARD bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet, int max_ret_len);\n \n /**\n- * Encode a byte vector into a base58-encoded string, including checksum\n+ * Encode a byte span into a base58-encoded string, including checksum\n  */\n-std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn);\n+std::string EncodeBase58Check(Span<const unsigned char> input);\n \n /**\n  * Decode a base58-encoded string (psz) that includes a checksum into a byte"
      },
      {
        "sha": "18cb5de196e2ab504aaff7a5ce686525d9c3f750",
        "filename": "src/bench/base58.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/356988e200b1debaa80d210d502d2d085c72dc64/src/bench/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/356988e200b1debaa80d210d502d2d085c72dc64/src/bench/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/base58.cpp?ref=356988e200b1debaa80d210d502d2d085c72dc64",
        "patch": "@@ -34,10 +34,8 @@ static void Base58CheckEncode(benchmark::Bench& bench)\n             200, 24\n         }\n     };\n-    std::vector<unsigned char> vch;\n-    vch.assign(buff.begin(), buff.end());\n     bench.batch(buff.size()).unit(\"byte\").run([&] {\n-        EncodeBase58Check(vch);\n+        EncodeBase58Check(buff);\n     });\n }\n "
      }
    ]
  }
]