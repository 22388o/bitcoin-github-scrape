[
  {
    "sha": "50fd77045e2f858a53486b5e02e1798c92ab946c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGZkNzcwNDVlMmY4NThhNTM0ODZiNWUwMmUxNzk4YzkyYWI5NDZj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-24T08:49:01Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-25T12:23:50Z"
      },
      "message": "[init] Read/decode asmap before constructing addrman\n\nCommit 181a1207 introduced an initialization order bug: CAddrMan's\nm_asmap must be set before deserializing peers.dat. Restore that\nordering.\n\nreview hint: use\n\n`git diff --color-moved=dimmed-zebra --color-moved-ws=ignore-all-space`",
      "tree": {
        "sha": "4c22f6863cea353a7b0aea4a478d762d5375e02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c22f6863cea353a7b0aea4a478d762d5375e02a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50fd77045e2f858a53486b5e02e1798c92ab946c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fd77045e2f858a53486b5e02e1798c92ab946c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50fd77045e2f858a53486b5e02e1798c92ab946c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fd77045e2f858a53486b5e02e1798c92ab946c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb09c26724e3f714b613788fc506f2ff3a208d2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb09c26724e3f714b613788fc506f2ff3a208d2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb09c26724e3f714b613788fc506f2ff3a208d2c"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 34,
      "deletions": 28
    },
    "files": [
      {
        "sha": "78025517f0b82843ec5bca1c2823a86b3e29da2f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 28,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50fd77045e2f858a53486b5e02e1798c92ab946c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50fd77045e2f858a53486b5e02e1798c92ab946c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=50fd77045e2f858a53486b5e02e1798c92ab946c",
        "patch": "@@ -1171,10 +1171,39 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     fDiscover = args.GetBoolArg(\"-discover\", true);\n     const bool ignores_incoming_txs{args.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY)};\n \n-    assert(!node.addrman);\n-    auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n-    node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n     {\n+        // Initialize addrman\n+        assert(!node.addrman);\n+\n+        // Read asmap file if configured\n+        std::vector<bool> asmap;\n+        if (args.IsArgSet(\"-asmap\")) {\n+            fs::path asmap_path = fs::path(args.GetArg(\"-asmap\", \"\"));\n+            if (asmap_path.empty()) {\n+                asmap_path = DEFAULT_ASMAP_FILENAME;\n+            }\n+            if (!asmap_path.is_absolute()) {\n+                asmap_path = gArgs.GetDataDirNet() / asmap_path;\n+            }\n+            if (!fs::exists(asmap_path)) {\n+                InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n+                return false;\n+            }\n+            asmap = CAddrMan::DecodeAsmap(asmap_path);\n+            if (asmap.size() == 0) {\n+                InitError(strprintf(_(\"Could not parse asmap file %s\"), asmap_path));\n+                return false;\n+            }\n+            const uint256 asmap_version = SerializeHash(asmap);\n+            LogPrintf(\"Using asmap version %s for IP bucketing\\n\", asmap_version.ToString());\n+        } else {\n+            LogPrintf(\"Using /16 prefix for IP bucketing\\n\");\n+        }\n+\n+        auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n+        node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n+        node.addrman->m_asmap = asmap;\n+\n         // Load addresses from peers.dat\n         uiInterface.InitMessage(_(\"Loading P2P addresses\u2026\").translated);\n         int64_t nStart = GetTimeMillis();\n@@ -1184,10 +1213,12 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         } else {\n             // Addrman can be in an inconsistent state after failure, reset it\n             node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n+            node.addrman->m_asmap = asmap;\n             LogPrintf(\"Recreating peers.dat\\n\");\n             adb.Write(*node.addrman);\n         }\n     }\n+\n     assert(!node.banman);\n     node.banman = std::make_unique<BanMan>(gArgs.GetDataDirNet() / \"banlist\", &uiInterface, args.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n     assert(!node.connman);\n@@ -1292,31 +1323,6 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             return InitError(ResolveErrMsg(\"externalip\", strAddr));\n     }\n \n-    // Read asmap file if configured\n-    if (args.IsArgSet(\"-asmap\")) {\n-        fs::path asmap_path = fs::path(args.GetArg(\"-asmap\", \"\"));\n-        if (asmap_path.empty()) {\n-            asmap_path = DEFAULT_ASMAP_FILENAME;\n-        }\n-        if (!asmap_path.is_absolute()) {\n-            asmap_path = gArgs.GetDataDirNet() / asmap_path;\n-        }\n-        if (!fs::exists(asmap_path)) {\n-            InitError(strprintf(_(\"Could not find asmap file %s\"), asmap_path));\n-            return false;\n-        }\n-        std::vector<bool> asmap = CAddrMan::DecodeAsmap(asmap_path);\n-        if (asmap.size() == 0) {\n-            InitError(strprintf(_(\"Could not parse asmap file %s\"), asmap_path));\n-            return false;\n-        }\n-        const uint256 asmap_version = SerializeHash(asmap);\n-        node.connman->SetAsmap(std::move(asmap));\n-        LogPrintf(\"Using asmap version %s for IP bucketing\\n\", asmap_version.ToString());\n-    } else {\n-        LogPrintf(\"Using /16 prefix for IP bucketing\\n\");\n-    }\n-\n #if ENABLE_ZMQ\n     g_zmq_notification_interface = CZMQNotificationInterface::Create();\n "
      }
    ]
  },
  {
    "sha": "593247872decd6d483a76e96d79433247226ad14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTMyNDc4NzJkZWNkNmQ0ODNhNzZlOTZkNzk0MzMyNDcyMjZhZDE0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-24T10:31:01Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-25T12:23:53Z"
      },
      "message": "[net] Remove CConnMan::SetAsmap()\n\nCAddrMan::m_asmap is now set directly in AppInitMain() so\nCConnMan::SetAsmap() is no longer required.",
      "tree": {
        "sha": "62b2d15a5dddf2c2fb03300855406ac5ffc13c01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62b2d15a5dddf2c2fb03300855406ac5ffc13c01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/593247872decd6d483a76e96d79433247226ad14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/593247872decd6d483a76e96d79433247226ad14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/593247872decd6d483a76e96d79433247226ad14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/593247872decd6d483a76e96d79433247226ad14/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50fd77045e2f858a53486b5e02e1798c92ab946c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50fd77045e2f858a53486b5e02e1798c92ab946c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50fd77045e2f858a53486b5e02e1798c92ab946c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "316425e6779a2fb4ffcc17fa6a3a2aca7fbb3b04",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/593247872decd6d483a76e96d79433247226ad14/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/593247872decd6d483a76e96d79433247226ad14/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=593247872decd6d483a76e96d79433247226ad14",
        "patch": "@@ -949,8 +949,6 @@ class CConnman\n     */\n     std::chrono::microseconds PoissonNextSendInbound(std::chrono::microseconds now, std::chrono::seconds average_interval);\n \n-    void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n-\n     /** Return true if we should disconnect the peer for failing an inactivity check. */\n     bool ShouldRunInactivityChecks(const CNode& node, std::optional<int64_t> now=std::nullopt) const;\n "
      },
      {
        "sha": "4116d5f343ed17342513acab9305da48dbe67827",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/593247872decd6d483a76e96d79433247226ad14/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/593247872decd6d483a76e96d79433247226ad14/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=593247872decd6d483a76e96d79433247226ad14",
        "patch": "@@ -103,12 +103,6 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n             [&] {\n                 connman.RemoveAddedNode(random_string);\n             },\n-            [&] {\n-                const std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-                if (SanityCheckASMap(asmap)) {\n-                    connman.SetAsmap(asmap);\n-                }\n-            },\n             [&] {\n                 connman.SetNetworkActive(fuzzed_data_provider.ConsumeBool());\n             },"
      }
    ]
  },
  {
    "sha": "f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTcyZjJiMjA0ODk5NGIzYjUwZjRjZmQ1ZGUxOWU0MGIxYWNmYjIy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-24T10:27:05Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-27T09:55:41Z"
      },
      "message": "[addrman] Set m_asmap in CAddrMan initializer list\n\nThis allows us to make it const.",
      "tree": {
        "sha": "f81adee0eac69d5d99be3b8b4f8b1f9e756169f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f81adee0eac69d5d99be3b8b4f8b1f9e756169f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "593247872decd6d483a76e96d79433247226ad14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/593247872decd6d483a76e96d79433247226ad14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/593247872decd6d483a76e96d79433247226ad14"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 38,
      "deletions": 36
    },
    "files": [
      {
        "sha": "03818213fe578fca4490ed09ad5b4481c71a6f4f",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -77,8 +77,9 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     return fChance;\n }\n \n-CAddrMan::CAddrMan(bool deterministic, int32_t consistency_check_ratio)\n-    : insecure_rand{deterministic}\n+CAddrMan::CAddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio)\n+    : m_asmap{std::move(asmap)}\n+    , insecure_rand{deterministic}\n     , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n     , m_consistency_check_ratio{consistency_check_ratio}\n {"
      },
      {
        "sha": "f9c12ba3f9ece4de982b2549b7e19fda0332b513",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -195,7 +195,7 @@ class CAddrMan\n     //\n     // If a new asmap was provided, the existing records\n     // would be re-bucketed accordingly.\n-    std::vector<bool> m_asmap;\n+    const std::vector<bool> m_asmap;\n \n     // Read asmap from provided binary file\n     static std::vector<bool> DecodeAsmap(fs::path path);\n@@ -471,7 +471,7 @@ class CAddrMan\n         Check();\n     }\n \n-    explicit CAddrMan(bool deterministic, int32_t consistency_check_ratio);\n+    explicit CAddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio);\n \n     ~CAddrMan()\n     {"
      },
      {
        "sha": "8fbb68c04caa878c16a24173a06fe8ddf6e39435",
        "filename": "src/bench/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/bench/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/bench/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/addrman.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -73,14 +73,14 @@ static void AddrManAdd(benchmark::Bench& bench)\n     CreateAddresses();\n \n     bench.run([&] {\n-        CAddrMan addrman{/* deterministic */ false, /* consistency_check_ratio */ 0};\n+        CAddrMan addrman{/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0};\n         AddAddressesToAddrMan(addrman);\n     });\n }\n \n static void AddrManSelect(benchmark::Bench& bench)\n {\n-    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n \n     FillAddrMan(addrman);\n \n@@ -92,7 +92,7 @@ static void AddrManSelect(benchmark::Bench& bench)\n \n static void AddrManGetAddr(benchmark::Bench& bench)\n {\n-    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n \n     FillAddrMan(addrman);\n \n@@ -114,7 +114,7 @@ static void AddrManGood(benchmark::Bench& bench)\n \n     std::vector<std::unique_ptr<CAddrMan>> addrmans(addrman_count);\n     for (size_t i{0}; i < addrman_count; ++i) {\n-        addrmans[i] = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+        addrmans[i] = std::make_unique<CAddrMan>(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n         FillAddrMan(*addrmans[i]);\n     }\n "
      },
      {
        "sha": "b74429866704848fdceca3fbcb2c3bbb440dc422",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -1201,8 +1201,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n         }\n \n         auto check_addrman = std::clamp<int32_t>(args.GetArg(\"-checkaddrman\", DEFAULT_ADDRMAN_CONSISTENCY_CHECKS), 0, 1000000);\n-        node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n-        node.addrman->m_asmap = asmap;\n+        node.addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n \n         // Load addresses from peers.dat\n         uiInterface.InitMessage(_(\"Loading P2P addresses\u2026\").translated);\n@@ -1212,8 +1211,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n             LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\", node.addrman->size(), GetTimeMillis() - nStart);\n         } else {\n             // Addrman can be in an inconsistent state after failure, reset it\n-            node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n-            node.addrman->m_asmap = asmap;\n+            node.addrman = std::make_unique<CAddrMan>(asmap, /* deterministic */ false, /* consistency_check_ratio */ check_addrman);\n             LogPrintf(\"Recreating peers.dat\\n\");\n             adb.Write(*node.addrman);\n         }"
      },
      {
        "sha": "e1b5df9502d58591a7e0c8741438361113449816",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -26,7 +26,7 @@ class CAddrManSerializationMock : public CAddrMan\n     virtual void Serialize(CDataStream& s) const = 0;\n \n     CAddrManSerializationMock()\n-        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 100)\n+        : CAddrMan(/* asmap */ std::vector<bool>(), /* deterministic */ true, /* consistency_check_ratio */ 100)\n     {}\n };\n \n@@ -82,10 +82,9 @@ class CAddrManTest : public CAddrMan\n public:\n     explicit CAddrManTest(bool makeDeterministic = true,\n                           std::vector<bool> asmap = std::vector<bool>())\n-        : CAddrMan(makeDeterministic, /* consistency_check_ratio */ 100)\n+        : CAddrMan(asmap, makeDeterministic, /* consistency_check_ratio */ 100)\n     {\n         deterministic = makeDeterministic;\n-        m_asmap = asmap;\n     }\n \n     CAddrInfo* Find(const CNetAddr& addr, int* pnId = nullptr)\n@@ -1024,7 +1023,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Test that the de-serialization does not throw an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanUncorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n \n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n@@ -1041,7 +1040,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     // Test that CAddrDB::Read creates an addrman with the correct number of addrs.\n     CDataStream ssPeers2 = AddrmanToStream(addrmanUncorrupted);\n \n-    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK(CAddrDB::Read(addrman2, ssPeers2));\n     BOOST_CHECK(addrman2.size() == 3);\n@@ -1055,7 +1054,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     // Test that the de-serialization of corrupted addrman throws an exception.\n     CDataStream ssPeers1 = AddrmanToStream(addrmanCorrupted);\n     bool exceptionThrown = false;\n-    CAddrMan addrman1(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman1(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman1.size() == 0);\n     try {\n         unsigned char pchMsgTmp[4];\n@@ -1071,7 +1070,7 @@ BOOST_AUTO_TEST_CASE(caddrdb_read_corrupted)\n     // Test that CAddrDB::Read fails if peers.dat is corrupt\n     CDataStream ssPeers2 = AddrmanToStream(addrmanCorrupted);\n \n-    CAddrMan addrman2(/* deterministic */ false, /* consistency_check_ratio */ 100);\n+    CAddrMan addrman2(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 100);\n     BOOST_CHECK(addrman2.size() == 0);\n     BOOST_CHECK(!CAddrDB::Read(addrman2, ssPeers2));\n }"
      },
      {
        "sha": "bc079451b4c1445c092a1100e5ac1119dca5f23f",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -28,17 +28,11 @@ class CAddrManDeterministic : public CAddrMan\n public:\n     FuzzedDataProvider& m_fuzzed_data_provider;\n \n-    explicit CAddrManDeterministic(FuzzedDataProvider& fuzzed_data_provider)\n-        : CAddrMan(/* deterministic */ true, /* consistency_check_ratio */ 0)\n+    explicit CAddrManDeterministic(std::vector<bool> asmap, FuzzedDataProvider& fuzzed_data_provider)\n+        : CAddrMan(std::move(asmap), /* deterministic */ true, /* consistency_check_ratio */ 0)\n         , m_fuzzed_data_provider(fuzzed_data_provider)\n     {\n         WITH_LOCK(cs, insecure_rand = FastRandomContext{ConsumeUInt256(fuzzed_data_provider)});\n-        if (fuzzed_data_provider.ConsumeBool()) {\n-            m_asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-            if (!SanityCheckASMap(m_asmap)) {\n-                m_asmap.clear();\n-            }\n-        }\n     }\n \n     /**\n@@ -228,7 +222,14 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    auto addr_man_ptr = std::make_unique<CAddrManDeterministic>(fuzzed_data_provider);\n+    std::vector<bool> asmap;\n+    if (fuzzed_data_provider.ConsumeBool()) {\n+        asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n+        if (!SanityCheckASMap(asmap)) {\n+            asmap.clear();\n+        }\n+    }\n+    auto addr_man_ptr = std::make_unique<CAddrManDeterministic>(asmap, fuzzed_data_provider);\n     if (fuzzed_data_provider.ConsumeBool()) {\n         const std::vector<uint8_t> serialized_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n         CDataStream ds(serialized_data, SER_DISK, INIT_PROTO_VERSION);\n@@ -237,7 +238,7 @@ FUZZ_TARGET_INIT(addrman, initialize_addrman)\n         try {\n             ds >> *addr_man_ptr;\n         } catch (const std::ios_base::failure&) {\n-            addr_man_ptr = std::make_unique<CAddrManDeterministic>(fuzzed_data_provider);\n+            addr_man_ptr = std::make_unique<CAddrManDeterministic>(asmap, fuzzed_data_provider);\n         }\n     }\n     CAddrManDeterministic& addr_man = *addr_man_ptr;\n@@ -306,9 +307,12 @@ FUZZ_TARGET_INIT(addrman_serdeser, initialize_addrman)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n \n-    CAddrManDeterministic addr_man1{fuzzed_data_provider};\n-    CAddrManDeterministic addr_man2{fuzzed_data_provider};\n-    addr_man2.m_asmap = addr_man1.m_asmap;\n+    std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n+    if (!SanityCheckASMap(asmap)) {\n+        asmap.clear();\n+    }\n+    CAddrManDeterministic addr_man1{asmap, fuzzed_data_provider};\n+    CAddrManDeterministic addr_man2{asmap, fuzzed_data_provider};\n \n     CDataStream data_stream(SER_NETWORK, PROTOCOL_VERSION);\n "
      },
      {
        "sha": "01741103e42202f91d6a6975f5d49cf9a0874962",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -25,7 +25,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    CAddrMan addrman(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan addrman(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n     CConnman connman{fuzzed_data_provider.ConsumeIntegral<uint64_t>(), fuzzed_data_provider.ConsumeIntegral<uint64_t>(), addrman, fuzzed_data_provider.ConsumeBool()};\n     CNetAddr random_netaddr;\n     CNode random_node = ConsumeNode(fuzzed_data_provider);"
      },
      {
        "sha": "8178878c301e9ab90747f504d26776864be69234",
        "filename": "src/test/fuzz/data_stream.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/data_stream.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/data_stream.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/data_stream.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -21,6 +21,6 @@ FUZZ_TARGET_INIT(data_stream_addr_man, initialize_data_stream_addr_man)\n {\n     FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n     CDataStream data_stream = ConsumeDataStream(fuzzed_data_provider);\n-    CAddrMan addr_man(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan addr_man(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n     CAddrDB::Read(addr_man, data_stream);\n }"
      },
      {
        "sha": "f4235a973a7582443ea5086d4c1fa082ef5bee5f",
        "filename": "src/test/fuzz/deserialize.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/deserialize.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/fuzz/deserialize.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/deserialize.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -188,7 +188,7 @@ FUZZ_TARGET_DESERIALIZE(blockmerkleroot, {\n     BlockMerkleRoot(block, &mutated);\n })\n FUZZ_TARGET_DESERIALIZE(addrman_deserialize, {\n-    CAddrMan am(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    CAddrMan am(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n     DeserializeFromFuzzingInput(buffer, am);\n })\n FUZZ_TARGET_DESERIALIZE(blockheader_deserialize, {"
      },
      {
        "sha": "ba6b3e32ea7a1cd4f754d274e042ef2dccd76742",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f572f2b2048994b3b50f4cfd5de19e40b1acfb22/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "patch": "@@ -193,7 +193,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n         throw std::runtime_error(strprintf(\"ActivateBestChain failed. (%s)\", state.ToString()));\n     }\n \n-    m_node.addrman = std::make_unique<CAddrMan>(/* deterministic */ false, /* consistency_check_ratio */ 0);\n+    m_node.addrman = std::make_unique<CAddrMan>(/* asmap */ std::vector<bool>(), /* deterministic */ false, /* consistency_check_ratio */ 0);\n     m_node.banman = std::make_unique<BanMan>(m_args.GetDataDirBase() / \"banlist\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,"
      }
    ]
  },
  {
    "sha": "f9002cb5dbd573cd9ca200de21319fa296e26055",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTAwMmNiNWRiZDU3M2NkOWNhMjAwZGUyMTMxOWZhMjk2ZTI2MDU1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-24T10:40:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-27T09:55:44Z"
      },
      "message": "[net] Rename the copyStats arg from m_asmap to asmap\n\nThe m_ prefix indicates that a variable is a data member. Using it as\na parameter name is misleading.\n\nAlso update the name of the function from copyStats to CopyStats to\ncomply with our style guide.",
      "tree": {
        "sha": "08b1018f1337809756e86afba92af4f224249c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08b1018f1337809756e86afba92af4f224249c6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9002cb5dbd573cd9ca200de21319fa296e26055",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9002cb5dbd573cd9ca200de21319fa296e26055",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9002cb5dbd573cd9ca200de21319fa296e26055",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9002cb5dbd573cd9ca200de21319fa296e26055/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f572f2b2048994b3b50f4cfd5de19e40b1acfb22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f572f2b2048994b3b50f4cfd5de19e40b1acfb22"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "65544352ee7e2d8c329ba35c60ea6f22534c60bd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9002cb5dbd573cd9ca200de21319fa296e26055/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9002cb5dbd573cd9ca200de21319fa296e26055/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f9002cb5dbd573cd9ca200de21319fa296e26055",
        "patch": "@@ -567,14 +567,14 @@ Network CNode::ConnectedThroughNetwork() const\n \n #undef X\n #define X(name) stats.name = name\n-void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n+void CNode::CopyStats(CNodeStats& stats, const std::vector<bool>& asmap)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n     X(addr);\n     X(addrBind);\n     stats.m_network = ConnectedThroughNetwork();\n-    stats.m_mapped_as = addr.GetMappedAS(m_asmap);\n+    stats.m_mapped_as = addr.GetMappedAS(asmap);\n     if (m_tx_relay != nullptr) {\n         LOCK(m_tx_relay->cs_filter);\n         stats.fRelayTxes = m_tx_relay->fRelayTxes;\n@@ -2819,7 +2819,7 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats) const\n     vstats.reserve(vNodes.size());\n     for (CNode* pnode : vNodes) {\n         vstats.emplace_back();\n-        pnode->copyStats(vstats.back(), addrman.m_asmap);\n+        pnode->CopyStats(vstats.back(), addrman.m_asmap);\n     }\n }\n "
      },
      {
        "sha": "2d9c29a05e9171ee0a5efe81722245a904b2baae",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9002cb5dbd573cd9ca200de21319fa296e26055/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9002cb5dbd573cd9ca200de21319fa296e26055/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f9002cb5dbd573cd9ca200de21319fa296e26055",
        "patch": "@@ -651,7 +651,7 @@ class CNode\n \n     void CloseSocketDisconnect();\n \n-    void copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap);\n+    void CopyStats(CNodeStats& stats, const std::vector<bool>& asmap);\n \n     ServiceFlags GetLocalServices() const\n     {"
      },
      {
        "sha": "e00b5b09bfe53256c2d32f7fe7f9912a33f861ea",
        "filename": "src/test/fuzz/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9002cb5dbd573cd9ca200de21319fa296e26055/src/test/fuzz/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9002cb5dbd573cd9ca200de21319fa296e26055/src/test/fuzz/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net.cpp?ref=f9002cb5dbd573cd9ca200de21319fa296e26055",
        "patch": "@@ -46,7 +46,7 @@ FUZZ_TARGET_INIT(net, initialize_net)\n                     return;\n                 }\n                 CNodeStats stats;\n-                node.copyStats(stats, asmap);\n+                node.CopyStats(stats, asmap);\n             },\n             [&] {\n                 const CNode* add_ref_node = node.AddRef();"
      }
    ]
  },
  {
    "sha": "5840476714ffebb2599999c85a23b52ebcff6090",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODQwNDc2NzE0ZmZlYmIyNTk5OTk5Yzg1YTIzYjUyZWJjZmY2MDkw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-24T10:47:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-27T10:01:43Z"
      },
      "message": "[addrman] Make m_asmap private\n\nAdd a GetAsmap() getter function that returns a reference to const.",
      "tree": {
        "sha": "9b3daa8e0ade595d00a092984ad09c422f5e0e85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b3daa8e0ade595d00a092984ad09c422f5e0e85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5840476714ffebb2599999c85a23b52ebcff6090",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5840476714ffebb2599999c85a23b52ebcff6090",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5840476714ffebb2599999c85a23b52ebcff6090",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5840476714ffebb2599999c85a23b52ebcff6090/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9002cb5dbd573cd9ca200de21319fa296e26055",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9002cb5dbd573cd9ca200de21319fa296e26055",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9002cb5dbd573cd9ca200de21319fa296e26055"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 25,
      "deletions": 23
    },
    "files": [
      {
        "sha": "67473ab2aa3b3228f58c41d09a5516201edcb808",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5840476714ffebb2599999c85a23b52ebcff6090/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5840476714ffebb2599999c85a23b52ebcff6090/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=5840476714ffebb2599999c85a23b52ebcff6090",
        "patch": "@@ -78,10 +78,10 @@ double CAddrInfo::GetChance(int64_t nNow) const\n }\n \n CAddrMan::CAddrMan(std::vector<bool> asmap, bool deterministic, int32_t consistency_check_ratio)\n-    : m_asmap{std::move(asmap)}\n-    , insecure_rand{deterministic}\n+    : insecure_rand{deterministic}\n     , nKey{deterministic ? uint256{1} : insecure_rand.rand256()}\n     , m_consistency_check_ratio{consistency_check_ratio}\n+    , m_asmap{std::move(asmap)}\n {\n     for (auto& bucket : vvNew) {\n         for (auto& entry : bucket) {"
      },
      {
        "sha": "3776e478ce4acdb353d1566e56ef285bfabbfda8",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 18,
        "deletions": 16,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5840476714ffebb2599999c85a23b52ebcff6090/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5840476714ffebb2599999c85a23b52ebcff6090/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=5840476714ffebb2599999c85a23b52ebcff6090",
        "patch": "@@ -181,22 +181,6 @@ static const int64_t ADDRMAN_TEST_WINDOW = 40*60; // 40 minutes\n class CAddrMan\n {\n public:\n-    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n-    // Should be always empty if no file was provided.\n-    // This mapping is then used for bucketing nodes in Addrman.\n-    //\n-    // If asmap is provided, nodes will be bucketed by\n-    // AS they belong to, in order to make impossible for a node\n-    // to connect to several nodes hosted in a single AS.\n-    // This is done in response to Erebus attack, but also to generally\n-    // diversify the connections every node creates,\n-    // especially useful when a large fraction of nodes\n-    // operate under a couple of cloud providers.\n-    //\n-    // If a new asmap was provided, the existing records\n-    // would be re-bucketed accordingly.\n-    const std::vector<bool> m_asmap;\n-\n     // Read asmap from provided binary file\n     static std::vector<bool> DecodeAsmap(fs::path path);\n \n@@ -593,6 +577,8 @@ class CAddrMan\n         Check();\n     }\n \n+    const std::vector<bool>& GetAsmap() const { return m_asmap; }\n+\n private:\n     //! A mutex to protect the inner data structures.\n     mutable Mutex cs;\n@@ -660,6 +646,22 @@ class CAddrMan\n     /** Perform consistency checks every m_consistency_check_ratio operations (if non-zero). */\n     const int32_t m_consistency_check_ratio;\n \n+    // Compressed IP->ASN mapping, loaded from a file when a node starts.\n+    // Should be always empty if no file was provided.\n+    // This mapping is then used for bucketing nodes in Addrman.\n+    //\n+    // If asmap is provided, nodes will be bucketed by\n+    // AS they belong to, in order to make impossible for a node\n+    // to connect to several nodes hosted in a single AS.\n+    // This is done in response to Erebus attack, but also to generally\n+    // diversify the connections every node creates,\n+    // especially useful when a large fraction of nodes\n+    // operate under a couple of cloud providers.\n+    //\n+    // If a new asmap was provided, the existing records\n+    // would be re-bucketed accordingly.\n+    const std::vector<bool> m_asmap;\n+\n     //! Find an entry.\n     CAddrInfo* Find(const CNetAddr& addr, int *pnId = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      },
      {
        "sha": "f4745f1f5d32c28143837800ecf881011460de3e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5840476714ffebb2599999c85a23b52ebcff6090/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5840476714ffebb2599999c85a23b52ebcff6090/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5840476714ffebb2599999c85a23b52ebcff6090",
        "patch": "@@ -1936,7 +1936,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                     case ConnectionType::BLOCK_RELAY:\n                     case ConnectionType::ADDR_FETCH:\n                     case ConnectionType::FEELER:\n-                        setConnected.insert(pnode->addr.GetGroup(addrman.m_asmap));\n+                        setConnected.insert(pnode->addr.GetGroup(addrman.GetAsmap()));\n                 } // no default case, so the compiler can warn about missing cases\n             }\n         }\n@@ -2010,7 +2010,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n                 m_anchors.pop_back();\n                 if (!addr.IsValid() || IsLocal(addr) || !IsReachable(addr) ||\n                     !HasAllDesirableServiceFlags(addr.nServices) ||\n-                    setConnected.count(addr.GetGroup(addrman.m_asmap))) continue;\n+                    setConnected.count(addr.GetGroup(addrman.GetAsmap()))) continue;\n                 addrConnect = addr;\n                 LogPrint(BCLog::NET, \"Trying to make an anchor connection to %s\\n\", addrConnect.ToString());\n                 break;\n@@ -2050,7 +2050,7 @@ void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n             }\n \n             // Require outbound connections, other than feelers, to be to distinct network groups\n-            if (!fFeeler && setConnected.count(addr.GetGroup(addrman.m_asmap))) {\n+            if (!fFeeler && setConnected.count(addr.GetGroup(addrman.GetAsmap()))) {\n                 break;\n             }\n \n@@ -2819,7 +2819,7 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats) const\n     vstats.reserve(vNodes.size());\n     for (CNode* pnode : vNodes) {\n         vstats.emplace_back();\n-        pnode->CopyStats(vstats.back(), addrman.m_asmap);\n+        pnode->CopyStats(vstats.back(), addrman.GetAsmap());\n     }\n }\n \n@@ -3082,7 +3082,7 @@ CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const\n \n uint64_t CConnman::CalculateKeyedNetGroup(const CAddress& ad) const\n {\n-    std::vector<unsigned char> vchNetGroup(ad.GetGroup(addrman.m_asmap));\n+    std::vector<unsigned char> vchNetGroup(ad.GetGroup(addrman.GetAsmap()));\n \n     return GetDeterministicRandomizer(RANDOMIZER_ID_NETGROUP).Write(vchNetGroup.data(), vchNetGroup.size()).Finalize();\n }"
      }
    ]
  },
  {
    "sha": "724c4975622bc22cedc3f3814dfc8e66cf8371f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjRjNDk3NTYyMmJjMjJjZWRjM2YzODE0ZGZjOGU2NmNmODM3MWY3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-25T12:30:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2021-08-27T10:01:45Z"
      },
      "message": "[fuzz] Add ConsumeAsmap() function",
      "tree": {
        "sha": "3473297b9f9b60aaa28b131a2af45a01e7df2114",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3473297b9f9b60aaa28b131a2af45a01e7df2114"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/724c4975622bc22cedc3f3814dfc8e66cf8371f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/724c4975622bc22cedc3f3814dfc8e66cf8371f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/724c4975622bc22cedc3f3814dfc8e66cf8371f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/724c4975622bc22cedc3f3814dfc8e66cf8371f7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5840476714ffebb2599999c85a23b52ebcff6090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5840476714ffebb2599999c85a23b52ebcff6090",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5840476714ffebb2599999c85a23b52ebcff6090"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e95126a80f8c654ea1cd8e3378065a9343f4ddae",
        "filename": "src/test/fuzz/addrman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/724c4975622bc22cedc3f3814dfc8e66cf8371f7/src/test/fuzz/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/724c4975622bc22cedc3f3814dfc8e66cf8371f7/src/test/fuzz/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/addrman.cpp?ref=724c4975622bc22cedc3f3814dfc8e66cf8371f7",
        "patch": "@@ -218,17 +218,18 @@ class CAddrManDeterministic : public CAddrMan\n     }\n };\n \n+[[nodiscard]] inline std::vector<bool> ConsumeAsmap(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n+    if (!SanityCheckASMap(asmap)) asmap.clear();\n+    return asmap;\n+}\n+\n FUZZ_TARGET_INIT(addrman, initialize_addrman)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n-    std::vector<bool> asmap;\n-    if (fuzzed_data_provider.ConsumeBool()) {\n-        asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-        if (!SanityCheckASMap(asmap)) {\n-            asmap.clear();\n-        }\n-    }\n+    std::vector<bool> asmap = ConsumeAsmap(fuzzed_data_provider);\n     auto addr_man_ptr = std::make_unique<CAddrManDeterministic>(asmap, fuzzed_data_provider);\n     if (fuzzed_data_provider.ConsumeBool()) {\n         const std::vector<uint8_t> serialized_data{ConsumeRandomLengthByteVector(fuzzed_data_provider)};\n@@ -307,10 +308,7 @@ FUZZ_TARGET_INIT(addrman_serdeser, initialize_addrman)\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n     SetMockTime(ConsumeTime(fuzzed_data_provider));\n \n-    std::vector<bool> asmap = ConsumeRandomLengthBitVector(fuzzed_data_provider);\n-    if (!SanityCheckASMap(asmap)) {\n-        asmap.clear();\n-    }\n+    std::vector<bool> asmap = ConsumeAsmap(fuzzed_data_provider);\n     CAddrManDeterministic addr_man1{asmap, fuzzed_data_provider};\n     CAddrManDeterministic addr_man2{asmap, fuzzed_data_provider};\n "
      }
    ]
  }
]