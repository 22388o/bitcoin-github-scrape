jonatack,2021-08-24 13:34:15,"I'm unable to build (with clang 13, CI seems to agree). The first commit compiles; testing. \n\n<details><summary>build output</summary><p>\n\n```\nbench/addrman.cpp:76:18: error: no matching constructor for initialization of 'CAddrMan'\n        CAddrMan addrman{/* deterministic */ false, /* consistency_check_ratio */ 0};\n                 ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-904647597,904647597,
jnewbery,2021-08-24 13:43:05,"> I'm unable to build (with clang 13, CI seems to agree)\n\nOops. I don't build with bench locally to save a bit of time. Now fixed.",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-904654593,904654593,
jonatack,2021-08-24 14:13:47,"Test with only the first commit: the addrman checks pass throughout, but I lost 18k addresses on startup, perhaps because I had the -asmap config option commented out to be able to run bitcoind on mainnet, and I uncommented it again to test.\n```\n2021-08-24T13:39:14Z [init] Opened asmap file ""/home/jon/projects/bitcoin/asmap/demo.map"" (932999 bytes) from disk\n2021-08-24T13:39:15Z [init] Using",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-904680566,904680566,
jonatack,2021-08-24 14:30:46,"<details><summary>Further testing seems ok (provided that losing addresses on rebucketing when toggling -asmap on/off is expected)</summary><p>\n\nRestarted after turning off -asmap:\n\n```\n2021-08-24T14:19:00Z [init] Using /16 prefix for IP bucketing\n2021-08-24T14:19:00Z [init] init message: Loading P2P addressesâ€¦\n2021-08-24T14:19:01Z [init] Bucketing method was updated, re-bucketing ad",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-904694941,904694941,
DrahtBot,2021-08-25 04:39:53,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22831](https://github.com/bitcoin/bitcoin/pull/22831) (p2p, bugfix: fix addrman tried table corruption on restart with a",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-905177302,905177302,
jnewbery,2021-08-25 12:35:02,"Thanks for the reviews @vasild @jonatack. I've addressed all your inline comments.\n\n@jonatack - If you have any suggested wording, I'm happy to incorporate it into the PR description.",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-905462254,905462254,
mzumsande,2021-08-28 18:41:54,"Tested ACK 724c4975622bc22cedc3f3814dfc8e66cf8371f7\n\nCode changes look correct to me.\nI verified that current master failed the addrman checks (`-checkaddrman`) when switching from no-asmap mode to asmap mode with an existing `peers.dat`, while I experienced no problems over multiple switches on this branch.",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-907671183,907671183,
jonatack,2021-08-29 19:30:25,"> Suggestions:\n> \n>     * link to [erisian.com.au/bitcoin-core-dev/log-2021-08-23.html#l-263](https://www.erisian.com.au/bitcoin-core-dev/log-2021-08-23.html#l-263) (up to line 382) in the PR description for context\n> \n>     * describe the symptoms/consequences of the issue and how to reproduce\n> \n>     * maybe save refactoring/renaming for a non-bug-fix\n> \n>     * add a passing/fa",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-907856179,907856179,
amitiuttarwar,2021-08-31 20:46:16,"approach ACK, I want to understand the `std::move` implications & then I'm ready to leave a review ACK. \ndid you consider making `m_asmap` an optional arg for the addrman constructor? \nbut overall, I like these changes- in addition to fixing the bug, making asmap a private & read-only member of addrman seems like an incremental improvement to me. ",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-909622667,909622667,
amitiuttarwar,2021-09-03 01:35:37,code review but utACK 724c497562,https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-912184276,912184276,
naumenkogs,2021-09-06 09:18:43,utACK 724c4975622bc22cedc3f3814dfc8e66cf8371f7,https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-913489764,913489764,
jamesob,2021-09-10 16:46:32,"> Addressed these suggestions in #22831 that pulls in the first commit here. That patch could be merged first and this one rebased on it (or vice-versa), or you could optionally pull in the test commits and use the PR description--as you prefer.\n\nWhy was this comment, made 12 days ago and 8 days before merge, ignored? \n\nIt would be one thing if this change was a straightforward revert or a",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-917050278,917050278,
jonatack,2021-09-10 18:11:14,"> Concept ACK [4ffc8b8](https://github.com/bitcoin/bitcoin/commit/4ffc8b81bc520fe66fbea9a597ab889a2647ca2e) modulo comments below and feedback from fuzzing people wrt invalidating affected corpii\n> \n> Suggestions:\n> \n>     * link to [erisian.com.au/bitcoin-core-dev/log-2021-08-23.html#l-263](https://www.erisian.com.au/bitcoin-core-dev/log-2021-08-23.html#l-263) (up to line 382) in the PR d",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-917108864,917108864,
MarcoFalke,2021-09-11 06:59:15,"There were 5 ACKs, including one tested ACK, before I added the 6th ACK. I think this number of review ACKs (in addition to the tests to verify the fix by people who didn't leave a comment) is sufficient to merge a pull request. This is overall a higher than average review interest compared to other pull reqeusts. If the alternative pull doesn't get any ACKs, it would appear slightly odd to me to ",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-917355217,917355217,
jnewbery,2021-09-13 12:59:46,"> Why was this comment, made 12 days ago and 8 days before merge, ignored?\n> \n> It would be one thing if this change was a straightforward revert or a simple reordering, but at face value it is not obvious that this change fixes the fairly severe bug that @jonatack discovered. It is troubling that a patch of this complexity was merged without an accompanying test verifying its efficacy, especi",https://github.com/bitcoin/bitcoin/pull/22791#issuecomment-918164710,918164710,
vasild,2021-08-24 16:01:12,What is the point of `{}`?,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r694991699,694991699,src/init.cpp
jonatack,2021-08-24 16:15:08,"4ffc8b81bc520fe66fb is there any benefit to making `m_asmap` private rather than a public data member? referencing our previous conversation:\n\n- https://github.com/bitcoin/bitcoin/pull/20210#issuecomment-766093925\n\n- https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#c131-avoid-trivial-getters-and-setters\n\n(otherwise, make the getter const?)\n```suggestion\n    const s",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695003334,695003334,src/addrman.h
vasild,2021-08-24 16:17:20,"nit:\n\n```suggestion\n    const std::vector<bool>& GetAsmap() const { return m_asmap; }\n```",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695005038,695005038,src/addrman.h
vasild,2021-08-24 16:19:04,"This pattern `asmap = Consume(); if (!Sanity()) { asmap.clear(); }` is used in two places. Maybe not worth it, but consider adding `ConsumeASMap()` to deduplicate it.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695006419,695006419,src/test/fuzz/addrman.cpp
jonatack,2021-08-24 16:37:22,"47ad0fd2644c4de7a11efa9c9e288f73d6c147e5 naming nit: `asmap_data` would allow more easily grepping for / distinguishing this new data structure in the code \n```suggestion\n        std::vector<bool> asmap_data;\n```",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695020652,695020652,src/init.cpp
jonatack,2021-08-24 16:39:31,"47ad0fd2644c4de7a11efa9c9e288f73d6c147e5 nit, why these outer brackets?",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695022214,695022214,src/init.cpp
jnewbery,2021-08-25 12:24:25,Removed,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695699110,695699110,src/init.cpp
jnewbery,2021-08-25 12:24:35,Thanks. Done.,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695699221,695699221,src/addrman.h
jnewbery,2021-08-25 12:30:27,Done,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695703548,695703548,src/test/fuzz/addrman.cpp
jnewbery,2021-08-25 12:31:13,I've made the getter const. I think removing the only public data member of CAddrMan is an improvement.,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695704111,695704111,src/addrman.h
jnewbery,2021-08-25 12:31:35,"Good suggestion, but will hold off doing it in this PR to reduce the diff. This part is mostly move-only.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695704407,695704407,src/init.cpp
jnewbery,2021-08-25 12:32:25,It limits the scope and makes it obvious that local variables like `asmap` and `adb` are not used outside this code block.,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r695705032,695705032,src/init.cpp
vasild,2021-08-26 07:36:36,"Previously the asmap assignment was inside `ConsumeBool()`, not anymore. To make it identical, this should be `vector asmap; if (ConsumeBool()) { asmap = ConsumeAsmap(); }`. I think it is fine now too, because in some cases `ConsumeAsmap()` will return an empty vector.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r696370758,696370758,src/test/fuzz/addrman.cpp
vasild,2021-08-26 07:41:20,"Commit 8a4c815dfef78eca6e481233195a5cfb171f3687 `[fuzz] Add ConsumeAsmap() function` contains this change:\n```diff\n-    const std::vector<bool>& GetAsmap() { return m_asmap; }\n+    const std::vector<bool>& GetAsmap() const { return m_asmap; }\n```\nwhich does not belong to it. Instead, that change should be squashed into 314e23e964ab7b333a2aec2cacb7c98b22daa8c2 `[addrman] Make m_asmap priv",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r696374214,696374214,src/addrman.h
vasild,2021-08-26 07:50:28,I guess this is fine either way. I like the reasoning in https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines.html#c131-avoid-trivial-getters-and-setters,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r696380951,696380951,src/addrman.h
vasild,2021-08-26 07:53:35,Functions do that better.,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r696383320,696383320,src/init.cpp
jnewbery,2021-08-26 09:28:18,"Right, I think `ConsumeAsmap()` will actually return an empty vector in most cases, since `SanityCheckASMap()` will fail for most random bool vectors.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r696457307,696457307,src/test/fuzz/addrman.cpp
jnewbery,2021-08-26 09:28:28,thanks. Fixed,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r696457401,696457401,src/addrman.h
laanwj,2021-08-27 08:32:44,"I'd prefer to use `std::optional<std::vector<bool>>` instead of a pointer here, as it more clearly communicates what the parameter is (as well as the copying semantics).",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r697256371,697256371,src/addrman.h
jnewbery,2021-08-27 08:46:54,"If we were going to change this, I think it'd be even easier just to pass a `std::vector<bool>`, and pass the empty vector if there was no asmap (which is what `m_asmap` gets set to in that case). What do you think?",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r697265506,697265506,src/addrman.h
vasild,2021-08-27 09:35:54,"Given that the class member is of type `std::vector<bool>` (not a pointer that can be NULL, nor an optional that can be without a value), maybe just passing `std::vector<bool>` would be ok. The checks whether asmap ""is present"" are `m_asmap.size() != 0`.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r697298430,697298430,src/addrman.h
jnewbery,2021-08-27 10:03:30,"ok, done!",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r697316933,697316933,src/addrman.h
laanwj,2021-08-27 10:04:35,"Sure, that would be more obvious, I hesitated to suggest it though because treating an empty vector as ""special"" value for absence is a CAddrMan implementation detail that might change later. But I'm ok with it, it's better than the pointer.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r697317574,697317574,src/addrman.h
vasild,2021-08-27 14:09:25,"I think performance is not important here because addrman constructor is not called frequently. Just mentioning: without the `std::move` it would copy the vector two times - once from the caller to the temporary argument and once from the temporary argument to `m_asmap`. With the `std::move` the second copy is avoided (a move is done instead), but the first copy is still done.\n\nFrom performanc",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r697472059,697472059,src/addrman.cpp
jnewbery,2021-08-27 14:31:26,"Right, the reason I originally used a pointer as an argument was that the asmap might be needed afterwards, so we can't just move from the argument. I wanted to avoid the two copies that you refer to above.\n\nAs you point out, performance is not important since we'll call this ctor at most twice (and almost always only once).",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r697489358,697489358,src/addrman.cpp
amitiuttarwar,2021-08-31 20:30:43,"question about use of `std::move` here - \n\nIf reading `peers.dat` causes issues, `init.cpp` will instantiate a `CAddrMan` twice, using the same asmap both times. Is this ok? I know that `std::move` is more of a suggestion than a command, so I'm wondering how this code would be interpreted. ",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r699652022,699652022,src/addrman.cpp
amitiuttarwar,2021-08-31 20:36:54,"commit: 5840476714ffebb2599999c85a23b52ebcff6090  _[addrman] Make m_asmap private_\n\nIs making the ordering of private members last in the initializer list a personal preference? I find it slightly odd that the initializer list no longer matches the order of the ctor args. Also you could have just introduced them in this order? =P ",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r699655721,699655721,src/addrman.cpp
vasild,2021-09-01 15:25:33,"The variable from `init.cpp` will be copied to the `CAddrMan` constructor into a temporary, used for the argument (this temporary is what is available inside the body of the constructor and will be automatically destroyed when the constructor returns). Then the constructor moves that temporary into the `m_asmap` member. So, the caller's variable from `init.cpp` will not be modified and can be reus",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r700323492,700323492,src/addrman.cpp
vasild,2021-09-01 15:29:46,"The order here must be the same as the order in which the variables are declared in the class, otherwise we get a compiler warning.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r700327345,700327345,src/addrman.cpp
amitiuttarwar,2021-09-01 15:42:30,"ah right, thanks ",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r700338434,700338434,src/addrman.cpp
amitiuttarwar,2021-09-03 01:21:07,"hm interesting, I've made some little toy programs to try to understand this behavior, and I see that the caller's variable can be reused, so that resolves my concern.\n\n~I'm not seeing the behavior of copying the temporary, but I'm going to resolve this conversation and explain further on the comment you linked.~ ",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r701521327,701521327,src/addrman.cpp
MarcoFalke,2021-09-06 10:38:48,The order could have been kept the same if it was moved to before `insecure_rand` in the header file,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r702798866,702798866,src/addrman.cpp
MarcoFalke,2021-09-06 10:39:25,please add LIFETIMEBOUND when returning a pointer to memory in `this`,https://github.com/bitcoin/bitcoin/pull/22791#discussion_r702799151,702799151,src/addrman.h
jnewbery,2021-09-07 14:49:20,"Good idea.\n\nI actually plan to fully encapsulate asmap in its own component in #22910, so we're not passing out references to private data.",https://github.com/bitcoin/bitcoin/pull/22791#discussion_r703582112,703582112,src/addrman.h
