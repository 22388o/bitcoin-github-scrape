[
  {
    "sha": "85f950a5c4cabddda23d7c5732ba25aa6e272b88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWY5NTBhNWM0Y2FiZGRkYTIzZDdjNTczMmJhMjVhYTZlMjcyYjg4",
    "commit": {
      "author": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-21T21:41:57Z"
      },
      "committer": {
        "name": "Jimmy Song",
        "email": "jaejoon@gmail.com",
        "date": "2017-04-28T21:21:30Z"
      },
      "message": "[test] Add tests for getconnectioncount, getnettotals and ping\n\n* Split run_test into 4 separate tests\n* Add 2 tests, getconnectioncount and getnettotals\n* getnettotals - Strategy of test is to get the network stats before and after a ping. The difference in bytes sent/received is the bytes needed for a ping/pong.",
      "tree": {
        "sha": "249fcb201933235df030e8859c766cb979d32916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/249fcb201933235df030e8859c766cb979d32916"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85f950a5c4cabddda23d7c5732ba25aa6e272b88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f950a5c4cabddda23d7c5732ba25aa6e272b88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85f950a5c4cabddda23d7c5732ba25aa6e272b88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f950a5c4cabddda23d7c5732ba25aa6e272b88/comments",
    "author": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimmysong",
      "id": 524761,
      "node_id": "MDQ6VXNlcjUyNDc2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/524761?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimmysong",
      "html_url": "https://github.com/jimmysong",
      "followers_url": "https://api.github.com/users/jimmysong/followers",
      "following_url": "https://api.github.com/users/jimmysong/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimmysong/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimmysong/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimmysong/subscriptions",
      "organizations_url": "https://api.github.com/users/jimmysong/orgs",
      "repos_url": "https://api.github.com/users/jimmysong/repos",
      "events_url": "https://api.github.com/users/jimmysong/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimmysong/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c924011f535c46b3bc02bef8b7e2a8ad559d78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c924011f535c46b3bc02bef8b7e2a8ad559d78d"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 34,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9eae14045502bf6db8b6f957b3c0a74870c7e425",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85f950a5c4cabddda23d7c5732ba25aa6e272b88/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85f950a5c4cabddda23d7c5732ba25aa6e272b88/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=85f950a5c4cabddda23d7c5732ba25aa6e272b88",
        "patch": "@@ -32,6 +32,39 @@ def setup_network(self):\n         self.sync_all()\n \n     def run_test(self):\n+        self._test_connection_count()\n+        self._test_getnettotals()\n+        self._test_getnetworkinginfo()\n+        self._test_getaddednodeinfo()\n+\n+    def _test_connection_count(self):\n+        # connect_nodes_bi connects each node to the other\n+        assert_equal(self.nodes[0].getconnectioncount(), 2)\n+\n+    def _test_getnettotals(self):\n+        # check that getnettotals totalbytesrecv and totalbytessent\n+        # are consistent with getpeerinfo\n+        peer_info = self.nodes[0].getpeerinfo()\n+        assert_equal(len(peer_info), 2)\n+        net_totals = self.nodes[0].getnettotals()\n+        assert_equal(sum([peer['bytesrecv'] for peer in peer_info]),\n+                     net_totals['totalbytesrecv'])\n+        assert_equal(sum([peer['bytessent'] for peer in peer_info]),\n+                     net_totals['totalbytessent'])\n+        # test getnettotals and getpeerinfo by doing a ping\n+        # the bytes sent/received should change\n+        # note ping and pong are 32 bytes each\n+        self.nodes[0].ping()\n+        time.sleep(0.1)\n+        peer_info_after_ping = self.nodes[0].getpeerinfo()\n+        net_totals_after_ping = self.nodes[0].getnettotals()\n+        for before, after in zip(peer_info, peer_info_after_ping):\n+            assert_equal(before['bytesrecv_per_msg']['pong'] + 32, after['bytesrecv_per_msg']['pong'])\n+            assert_equal(before['bytessent_per_msg']['ping'] + 32, after['bytessent_per_msg']['ping'])\n+        assert_equal(net_totals['totalbytesrecv'] + 32*2, net_totals_after_ping['totalbytesrecv'])\n+        assert_equal(net_totals['totalbytessent'] + 32*2, net_totals_after_ping['totalbytessent'])\n+\n+    def _test_getnetworkinginfo(self):\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n         assert_equal(self.nodes[0].getnetworkinfo()['connections'], 2)\n \n@@ -49,7 +82,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], True)\n         assert_equal(self.nodes[0].getnetworkinfo()['connections'], 2)\n \n-        # test getaddednodeinfo\n+    def _test_getaddednodeinfo(self):\n         assert_equal(self.nodes[0].getaddednodeinfo(), [])\n         # add a node (node2) to node0\n         ip_port = \"127.0.0.1:{}\".format(p2p_port(2))"
      }
    ]
  }
]