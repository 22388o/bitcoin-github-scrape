laanwj,2014-04-16T11:14:03Z,"Hmm - although it improves things, this is not yet complete. There are places left in the GUI code where chainActive is used directly without acquiring the appropriate lock. Will add a commit to fix these.\n\n**Edit**: fixed, should be complete now\n",https://github.com/bitcoin/bitcoin/pull/4058#issuecomment-40587412,40587412,
BitcoinPullTester,2014-04-18T11:22:15Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/55a1db4fa2cf62b9766ef382c1e14b3ecbdf67fe for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/4058#issuecomment-40802553,40802553,
cozz,2014-04-18T15:57:30Z,"Is it really necessary for the 4 lock-functions (isLockedCoin,lockCoin,unlockCoin,listLockedCoins) to\nacquire a cs_main lock?\n",https://github.com/bitcoin/bitcoin/pull/4058#issuecomment-40819564,40819564,
laanwj,2014-04-18T16:49:44Z,"@cozz It's better to err on the safe side. If it happens that the cs_wallet lock is acquired before the cs_main lock it will result in a deadlock. \n\nI've added cs_main locks everywhere before that the cs_wallet lock is taken _except_ if I could clearly see within the function that the main lock is not necessary (for example, for address book manipulation).\n\n(This does make the issue visible th",https://github.com/bitcoin/bitcoin/pull/4058#issuecomment-40823754,40823754,
sipa,2014-04-18T21:48:35Z,"ACK.\n\nSome of the wallet function may survive with smaller locks (in particular, just locking the mempool rather than whole of main), but let's do that later.\n",https://github.com/bitcoin/bitcoin/pull/4058#issuecomment-40847480,40847480,
wtogami,2014-04-20T11:35:26Z,http://nightly.bitcoin.it/0.9.99.0-20140420-4a102fa/\nhttps://github.com/nightlybitcoin/bitcoin/commits/0.9.99.0-20140420-4a102fa\nThis nightly build and later will contain this PR to more easily expose it to expose it to public testing.\n,https://github.com/bitcoin/bitcoin/pull/4058#issuecomment-40893061,40893061,
sipa,2014-04-15T15:49:33Z,"As IsInitialBlockDownload gets its own LOCK(cs_main), is this necessary? (I really prefer to keep the amount of time cs_main is locked minimal, as it's likely the most common cause for latency in processing)\n",https://github.com/bitcoin/bitcoin/pull/4058#discussion_r11641094,11641094,src/main.cpp
laanwj,2014-04-15T16:08:08Z,"It's not strictly necessary (it would get the lock either way), however, what is the use of a TRY_LOCK if a few lines before we do a non-try LOCK() of the same lock? That's why I moved the TRY_LOCK up, so that if the try fails it won't do IsInitialBlockDownload either...\n",https://github.com/bitcoin/bitcoin/pull/4058#discussion_r11642188,11642188,src/main.cpp
sipa,2014-04-15T16:11:08Z,Good point.\n,https://github.com/bitcoin/bitcoin/pull/4058#discussion_r11642338,11642338,src/main.cpp
laanwj,2014-04-15T16:18:10Z,I agree that keeping the time that cs_main is locked down would be good.It's even worse than the Big Kernel Lock :)  Finer-grained locking would be in order. \n\nIn the meantime: We could do TRY_LOCK and release the lock again multiple times?\n,https://github.com/bitcoin/bitcoin/pull/4058#discussion_r11642710,11642710,src/main.cpp
sipa,2014-04-18T21:47:39Z,"Let's do that in a different PR, if needed.\n",https://github.com/bitcoin/bitcoin/pull/4058#discussion_r11788255,11788255,src/main.cpp
