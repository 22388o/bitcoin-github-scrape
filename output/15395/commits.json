[
  {
    "sha": "fa9fe0eec845b7777675c0b630c297ca6a71725d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTlmZTBlZWM4NDViNzc3NzY3NWMwYjYzMGMyOTdjYTZhNzE3MjVk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T23:13:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T23:12:20Z"
      },
      "message": "test: fix whitespace in rpc_psbt.py",
      "tree": {
        "sha": "aa2cc272cd7948af6e76ae403a242f52c8125323",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa2cc272cd7948af6e76ae403a242f52c8125323"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9fe0eec845b7777675c0b630c297ca6a71725d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcY1LUAAoJEM4rdWl+aaVI38UL/1R9PEZ+wB+koszNPuI/9tZK\n4dlSD9H4zK3vj8am3e4EnDbtivduH+UI9QimgLs/nWcPlI0j3i5cuWZnaH38FU1y\n9EeMLkQrQXXgc+FwFBdyzEAQ48MakbcoLuTuw/Xc+MjAeoxJOH92ASA1ADTCk7+e\nqBCN0xij7FybOitYzyMLpxwsc2kocmaVApcgRQ9tNny3oCvCzrEBkt+LB4PESd3R\ncEyqKzBJ+j0h0j/lLsxhiRQUzZd7t8JSUDPTEvODRkpLV8rh4xhs1k7njNOC7Em0\nHVaQjADgFBW84JVnmMPbn8wc/cKcZxSFNARSpmIaXwp3OupCYtUvzO1X5yNFYjiX\nDqt+SnMGWqdcYtwolU/80HWFyU9H5a78RuJJaSU1nzctS2N0eZIavwD6pOF8Mm5H\nhzd6FaNzr0lBbln+R+2L/h1qFHeDIgseceAH3Wzi/M3hQWunWTK6+6/amMq2iDcg\nrwKno+Uvt1Or+4jWu1wVrZi40sKLlOof2TCagM6cXg==\n=Adfm\n-----END PGP SIGNATURE-----",
        "payload": "tree aa2cc272cd7948af6e76ae403a242f52c8125323\nparent d73918447faf168670b5dfdd55f6c19ed6dd8632\nauthor MarcoFalke <falke.marco@gmail.com> 1550013199 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550013140 -0500\n\ntest: fix whitespace in rpc_psbt.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9fe0eec845b7777675c0b630c297ca6a71725d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9fe0eec845b7777675c0b630c297ca6a71725d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9fe0eec845b7777675c0b630c297ca6a71725d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73918447faf168670b5dfdd55f6c19ed6dd8632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d73918447faf168670b5dfdd55f6c19ed6dd8632"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 23,
      "deletions": 22
    },
    "files": [
      {
        "sha": "464eb5e86bdb83dc219d38e9bbafbc1124adbb3e",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 23,
        "deletions": 22,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9fe0eec845b7777675c0b630c297ca6a71725d/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9fe0eec845b7777675c0b630c297ca6a71725d/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fa9fe0eec845b7777675c0b630c297ca6a71725d",
        "patch": "@@ -46,27 +46,27 @@ def test_utxo_conversion(self):\n \n         # Construct an unsigned PSBT on the online node (who doesn't know the output is Segwit, so will include a non-witness UTXO)\n         utxos = online_node.listunspent(addresses=[offline_addr])\n-        raw = online_node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{online_addr:0.9999}])\n+        raw = online_node.createrawtransaction([{\"txid\": utxos[0][\"txid\"], \"vout\": utxos[0][\"vout\"]}], [{online_addr: 0.9999}])\n         psbt = online_node.walletprocesspsbt(online_node.converttopsbt(raw))[\"psbt\"]\n-        assert(\"non_witness_utxo\" in mining_node.decodepsbt(psbt)[\"inputs\"][0])\n+        assert \"non_witness_utxo\" in mining_node.decodepsbt(psbt)[\"inputs\"][0]\n \n         # Have the offline node sign the PSBT (which will update the UTXO to segwit)\n         signed_psbt = offline_node.walletprocesspsbt(psbt)[\"psbt\"]\n-        assert(\"witness_utxo\" in mining_node.decodepsbt(signed_psbt)[\"inputs\"][0])\n+        assert \"witness_utxo\" in mining_node.decodepsbt(signed_psbt)[\"inputs\"][0]\n \n         # Make sure we can mine the resulting transaction\n         txid = mining_node.sendrawtransaction(mining_node.finalizepsbt(signed_psbt)[\"hex\"])\n         mining_node.generate(1)\n         sync_blocks([mining_node, online_node])\n-        assert_equal(online_node.gettxout(txid,0)[\"confirmations\"], 1)\n+        assert_equal(online_node.gettxout(txid, 0)[\"confirmations\"], 1)\n \n         # Reconnect\n         connect_nodes_bi(self.nodes, 0, 1)\n         connect_nodes_bi(self.nodes, 0, 2)\n \n     def run_test(self):\n         # Create and fund a raw tx for sending 10 BTC\n-        psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress():10})['psbt']\n+        psbtx1 = self.nodes[0].walletcreatefundedpsbt([], {self.nodes[2].getnewaddress(): 10})['psbt']\n \n         # Node 1 should not be able to add anything to it but still return the psbtx same as before\n         psbtx = self.nodes[1].walletprocesspsbt(psbtx1)['psbt']\n@@ -89,8 +89,8 @@ def run_test(self):\n         p2sh_p2wpkh = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n \n         # fund those addresses\n-        rawtx = self.nodes[0].createrawtransaction([], {p2sh:10, p2wsh:10, p2wpkh:10, p2sh_p2wsh:10, p2sh_p2wpkh:10, p2pkh:10})\n-        rawtx = self.nodes[0].fundrawtransaction(rawtx, {\"changePosition\":3})\n+        rawtx = self.nodes[0].createrawtransaction([], {p2sh: 10, p2wsh: 10, p2wpkh: 10, p2sh_p2wsh: 10, p2sh_p2wpkh: 10, p2pkh: 10})\n+        rawtx = self.nodes[0].fundrawtransaction(rawtx, {\"changePosition\": 3})\n         signed_tx = self.nodes[0].signrawtransactionwithwallet(rawtx['hex'])['hex']\n         txid = self.nodes[0].sendrawtransaction(signed_tx)\n         self.nodes[0].generate(6)\n@@ -119,13 +119,13 @@ def run_test(self):\n                 p2pkh_pos = out['n']\n \n         # spend single key from node 1\n-        rawtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99})['psbt']\n+        rawtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\": txid, \"vout\": p2wpkh_pos}, {\"txid\": txid, \"vout\": p2sh_p2wpkh_pos}, {\"txid\": txid, \"vout\": p2pkh_pos}], {self.nodes[1].getnewaddress(): 29.99})['psbt']\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(rawtx)\n         assert_equal(walletprocesspsbt_out['complete'], True)\n         self.nodes[1].sendrawtransaction(self.nodes[1].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n         # partially sign multisig things with node 1\n-        psbtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], {self.nodes[1].getnewaddress():29.99})['psbt']\n+        psbtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\": txid, \"vout\": p2wsh_pos}, {\"txid\": txid, \"vout\": p2sh_pos}, {\"txid\": txid, \"vout\": p2sh_p2wsh_pos}], {self.nodes[1].getnewaddress(): 29.99})['psbt']\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(psbtx)\n         psbtx = walletprocesspsbt_out['psbt']\n         assert_equal(walletprocesspsbt_out['complete'], False)\n@@ -136,11 +136,11 @@ def run_test(self):\n         self.nodes[2].sendrawtransaction(self.nodes[2].finalizepsbt(walletprocesspsbt_out['psbt'])['hex'])\n \n         # check that walletprocesspsbt fails to decode a non-psbt\n-        rawtx = self.nodes[1].createrawtransaction([{\"txid\":txid,\"vout\":p2wpkh_pos}], {self.nodes[1].getnewaddress():9.99})\n+        rawtx = self.nodes[1].createrawtransaction([{\"txid\": txid, \"vout\": p2wpkh_pos}], {self.nodes[1].getnewaddress(): 9.99})\n         assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[1].walletprocesspsbt, rawtx)\n \n         # Convert a non-psbt to psbt and make sure we can decode it\n-        rawtx = self.nodes[0].createrawtransaction([], {self.nodes[1].getnewaddress():10})\n+        rawtx = self.nodes[0].createrawtransaction([], {self.nodes[1].getnewaddress(): 10})\n         rawtx = self.nodes[0].fundrawtransaction(rawtx)\n         new_psbt = self.nodes[0].converttopsbt(rawtx['hex'])\n         self.nodes[0].decodepsbt(new_psbt)\n@@ -160,14 +160,14 @@ def run_test(self):\n         node1_addr = self.nodes[1].getnewaddress()\n         node2_addr = self.nodes[2].getnewaddress()\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n-        txid2 =self.nodes[0].sendtoaddress(node2_addr, 13)\n+        txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n         self.nodes[0].generate(6)\n         self.sync_all()\n         vout1 = find_output(self.nodes[1], txid1, 13)\n         vout2 = find_output(self.nodes[2], txid2, 13)\n \n         # Create a psbt spending outputs from nodes 1 and 2\n-        psbt_orig = self.nodes[0].createpsbt([{\"txid\":txid1,  \"vout\":vout1}, {\"txid\":txid2, \"vout\":vout2}], {self.nodes[0].getnewaddress():25.999})\n+        psbt_orig = self.nodes[0].createpsbt([{\"txid\": txid1, \"vout\": vout1}, {\"txid\": txid2, \"vout\": vout2}], {self.nodes[0].getnewaddress(): 25.999})\n \n         # Update psbts, should only have data for one input and not the other\n         psbt1 = self.nodes[1].walletprocesspsbt(psbt_orig)['psbt']\n@@ -190,34 +190,34 @@ def run_test(self):\n         # replaceable arg\n         block_height = self.nodes[0].getblockcount()\n         unspent = self.nodes[0].listunspent()[0]\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"replaceable\":True}, False)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\": unspent[\"txid\"], \"vout\": unspent[\"vout\"]}], [{self.nodes[2].getnewaddress(): unspent[\"amount\"] + 1}], block_height + 2, {\"replaceable\": True}, False)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n-           assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n-           assert \"bip32_derivs\" not in psbt_in\n-        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height+2)\n+            assert_equal(tx_in[\"sequence\"], MAX_BIP125_RBF_SEQUENCE)\n+            assert \"bip32_derivs\" not in psbt_in\n+        assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height + 2)\n \n         # Same construction with only locktime set\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height, {}, True)\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\": unspent[\"txid\"], \"vout\": unspent[\"vout\"]}], [{self.nodes[2].getnewaddress(): unspent[\"amount\"] + 1}], block_height, {}, True)\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in, psbt_in in zip(decoded_psbt[\"tx\"][\"vin\"], decoded_psbt[\"inputs\"]):\n             assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n             assert \"bip32_derivs\" in psbt_in\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], block_height)\n \n         # Same construction without optional arguments\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\": unspent[\"txid\"], \"vout\": unspent[\"vout\"]}], [{self.nodes[2].getnewaddress(): unspent[\"amount\"] + 1}])\n         decoded_psbt = self.nodes[0].decodepsbt(psbtx_info[\"psbt\"])\n         for tx_in in decoded_psbt[\"tx\"][\"vin\"]:\n             assert tx_in[\"sequence\"] > MAX_BIP125_RBF_SEQUENCE\n         assert_equal(decoded_psbt[\"tx\"][\"locktime\"], 0)\n \n         # Make sure change address wallet does not have P2SH innerscript access to results in success\n         # when attempting BnB coin selection\n-        self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}], block_height+2, {\"changeAddress\":self.nodes[1].getnewaddress()}, False)\n+        self.nodes[0].walletcreatefundedpsbt([], [{self.nodes[2].getnewaddress(): unspent[\"amount\"] + 1}], block_height + 2, {\"changeAddress\": self.nodes[1].getnewaddress()}, False)\n \n         # Regression test for 14473 (mishandling of already-signed witness transaction):\n-        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\":unspent[\"txid\"], \"vout\":unspent[\"vout\"]}], [{self.nodes[2].getnewaddress():unspent[\"amount\"]+1}])\n+        psbtx_info = self.nodes[0].walletcreatefundedpsbt([{\"txid\": unspent[\"txid\"], \"vout\": unspent[\"vout\"]}], [{self.nodes[2].getnewaddress(): unspent[\"amount\"] + 1}])\n         complete_psbt = self.nodes[0].walletprocesspsbt(psbtx_info[\"psbt\"])\n         double_processed_psbt = self.nodes[0].walletprocesspsbt(complete_psbt[\"psbt\"])\n         assert_equal(complete_psbt, double_processed_psbt)\n@@ -290,8 +290,9 @@ def run_test(self):\n \n         # Test that psbts with p2pkh outputs are created properly\n         p2pkh = self.nodes[0].getnewaddress(address_type='legacy')\n-        psbt = self.nodes[1].walletcreatefundedpsbt([], [{p2pkh : 1}], 0, {\"includeWatching\" : True}, True)\n+        psbt = self.nodes[1].walletcreatefundedpsbt([], [{p2pkh: 1}], 0, {\"includeWatching\": True}, True)\n         self.nodes[0].decodepsbt(psbt['psbt'])\n \n+\n if __name__ == '__main__':\n     PSBTTest().main()"
      }
    ]
  },
  {
    "sha": "fa15244fd05a435bc4c71342dab5f464b1916a38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTE1MjQ0ZmQwNWE0MzViYzRjNzEzNDJkYWI1ZjQ2NGIxOTE2YTM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T23:20:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-12T23:14:53Z"
      },
      "message": "test: Remove TODO comment to remove -txindex option",
      "tree": {
        "sha": "7bfe73fc7e10dd3c2f0b981ce579d4fcbf4e434d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bfe73fc7e10dd3c2f0b981ce579d4fcbf4e434d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa15244fd05a435bc4c71342dab5f464b1916a38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcY1NtAAoJEM4rdWl+aaVI4LYL/0IUVq8+GvSj605U5AZxnjDA\nas83kaEk9sBjlZKQI/I5peli2lr7aYvBVC/+rioqBfAGBMkFUAD5Pt48cDzFWyk+\nSjQd138s9MJie7XKPICgnRtBg1j6U3sSwtA9CACNZM4fVUqdhE/lrAOmW3wTxReB\n+7DQ4XCfsxsyT3RLwbo3x4xfvyT6BtiAx9Qv593KiWzrd12mYChwFrkN9UjaCWwy\nJtUdv4IMF0DqGVQtHi77QUF23mnHN56HAfXV7jUb/0/V4sULlfrGb79McR/ktq8b\nSoN+OeopfDR8RDrdEc//GQwzsOkai3kfFsxGQGcWML6wQnb+7w3wWqL7+18RuKi5\nUCJcqolrzJllTYh8p3EVWEpTUfhcTPMaj1CHuzdmjqCeV+C+2/8A8NdIYTo/YwHu\nSRWBf78RjG3/WaCocONnsnYHAYxEE/lxKm7ylfSexn21+4IQXoXU0q6mQrydr+Bj\n6mkbsNFL+AkLhEc4RCf0ahuoXE3Hc5QgeKY9JjSy2g==\n=bpDK\n-----END PGP SIGNATURE-----",
        "payload": "tree 7bfe73fc7e10dd3c2f0b981ce579d4fcbf4e434d\nparent fa9fe0eec845b7777675c0b630c297ca6a71725d\nauthor MarcoFalke <falke.marco@gmail.com> 1550013618 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1550013293 -0500\n\ntest: Remove TODO comment to remove -txindex option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa15244fd05a435bc4c71342dab5f464b1916a38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa15244fd05a435bc4c71342dab5f464b1916a38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa15244fd05a435bc4c71342dab5f464b1916a38/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9fe0eec845b7777675c0b630c297ca6a71725d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9fe0eec845b7777675c0b630c297ca6a71725d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9fe0eec845b7777675c0b630c297ca6a71725d"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 25,
      "deletions": 30
    },
    "files": [
      {
        "sha": "fe903dd82faa2c264331a6e0be9712e7b6914427",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fa15244fd05a435bc4c71342dab5f464b1916a38",
        "patch": "@@ -38,31 +38,31 @@ def find_spendable_utxo(node, min_value):\n \n     raise AssertionError(\"Unspent output equal or higher than %s not found\" % min_value)\n \n+\n+txs_mined = {}  # txindex from txid to blockhash\n+\n+\n class SegWitTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [\n             [\n                 \"-rpcserialversion=0\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=4\",\n                 \"-rpcserialversion=1\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n             [\n                 \"-blockversion=536870915\",\n                 \"-vbparams=segwit:0:999999999999\",\n                 \"-addresstype=legacy\",\n-                \"-txindex\"\n             ],\n         ]\n \n@@ -157,10 +157,10 @@ def run_test(self):\n \n         self.log.info(\"Verify previous witness txs skipped for mining can now be mined\")\n         assert_equal(len(self.nodes[2].getrawmempool()), 4)\n-        block = self.nodes[2].generate(1)  # block 432 (first block with new rules; 432 = 144 * 3)\n+        block_hash = self.nodes[2].generate(1)[0]  # block 432 (first block with new rules; 432 = 144 * 3)\n         sync_blocks(self.nodes)\n         assert_equal(len(self.nodes[2].getrawmempool()), 0)\n-        segwit_tx_list = self.nodes[2].getblock(block[0])[\"tx\"]\n+        segwit_tx_list = self.nodes[2].getblock(block_hash)[\"tx\"]\n         assert_equal(len(segwit_tx_list), 5)\n \n         self.log.info(\"Verify default node can't accept txs with missing witness\")\n@@ -174,15 +174,15 @@ def run_test(self):\n         self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n \n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n-        assert(self.nodes[2].getblock(block[0], False) != self.nodes[0].getblock(block[0], False))\n-        assert(self.nodes[1].getblock(block[0], False) == self.nodes[2].getblock(block[0], False))\n+        assert self.nodes[2].getblock(block_hash, False) != self.nodes[0].getblock(block_hash, False)\n+        assert self.nodes[1].getblock(block_hash, False) == self.nodes[2].getblock(block_hash, False)\n         for i in range(len(segwit_tx_list)):\n             tx = FromHex(CTransaction(), self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[2].getrawtransaction(segwit_tx_list[i]) != self.nodes[0].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i], 0) == self.nodes[2].getrawtransaction(segwit_tx_list[i]))\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) != self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[1].getrawtransaction(segwit_tx_list[i]) == self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"])\n-            assert(self.nodes[0].getrawtransaction(segwit_tx_list[i]) == bytes_to_hex_str(tx.serialize_without_witness()))\n+            assert self.nodes[2].getrawtransaction(segwit_tx_list[i], 0, block_hash) != self.nodes[0].getrawtransaction(segwit_tx_list[i], 0, block_hash)\n+            assert self.nodes[1].getrawtransaction(segwit_tx_list[i], 0, block_hash) == self.nodes[2].getrawtransaction(segwit_tx_list[i], 0, block_hash)\n+            assert self.nodes[0].getrawtransaction(segwit_tx_list[i], 0, block_hash) != self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"]\n+            assert self.nodes[1].getrawtransaction(segwit_tx_list[i], 0, block_hash) == self.nodes[2].gettransaction(segwit_tx_list[i])[\"hex\"]\n+            assert self.nodes[0].getrawtransaction(segwit_tx_list[i], 0, block_hash) == bytes_to_hex_str(tx.serialize_without_witness())\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n@@ -538,7 +538,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         tx.rehash()\n         signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n-        self.nodes[0].generate(1)\n+        txs_mined[txid] = self.nodes[0].generate(1)[0]\n         sync_blocks(self.nodes)\n         watchcount = 0\n         spendcount = 0\n@@ -581,7 +581,7 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n         tx = CTransaction()\n         for i in txids:\n             txtmp = CTransaction()\n-            txraw = self.nodes[0].getrawtransaction(i)\n+            txraw = self.nodes[0].getrawtransaction(i, 0, txs_mined[i])\n             f = BytesIO(hex_str_to_bytes(txraw))\n             txtmp.deserialize(f)\n             for j in range(len(txtmp.vout)):"
      },
      {
        "sha": "dda9c9898586c1057be299624fc704107ed4b804",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=fa15244fd05a435bc4c71342dab5f464b1916a38",
        "patch": "@@ -41,7 +41,6 @@ class RESTTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [[\"-rest\", \"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "5270c14704f2a5e55bd980fab5aedfa3e3e56bf7",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fa15244fd05a435bc4c71342dab5f464b1916a38",
        "patch": "@@ -13,14 +13,11 @@\n \n MAX_BIP125_RBF_SEQUENCE = 0xfffffffd\n \n-# Create one-input, one-output, no-fee transaction:\n-class PSBTTest(BitcoinTestFramework):\n \n+class PSBTTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 3\n-       # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [\"-txindex\"], [\"-txindex\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -161,10 +158,10 @@ def run_test(self):\n         node2_addr = self.nodes[2].getnewaddress()\n         txid1 = self.nodes[0].sendtoaddress(node1_addr, 13)\n         txid2 = self.nodes[0].sendtoaddress(node2_addr, 13)\n-        self.nodes[0].generate(6)\n+        block_hash = self.nodes[0].generate(6)[0]\n         self.sync_all()\n-        vout1 = find_output(self.nodes[1], txid1, 13)\n-        vout2 = find_output(self.nodes[2], txid2, 13)\n+        vout1 = find_output(self.nodes[1], txid1, 13, block_hash=block_hash)\n+        vout2 = find_output(self.nodes[2], txid2, 13, block_hash=block_hash)\n \n         # Create a psbt spending outputs from nodes 1 and 2\n         psbt_orig = self.nodes[0].createpsbt([{\"txid\": txid1, \"vout\": vout1}, {\"txid\": txid2, \"vout\": vout2}], {self.nodes[0].getnewaddress(): 25.999})"
      },
      {
        "sha": "c793cf00de82c81c13f59eae13eecea394eff4a3",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fa15244fd05a435bc4c71342dab5f464b1916a38",
        "patch": "@@ -42,7 +42,6 @@ class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n         self.extra_args = [[\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"], [\"-addresstype=legacy\", \"-txindex\"]]\n \n     def skip_test_if_missing_module(self):"
      },
      {
        "sha": "de401e25a94ac455aefb61710539d19fd8b57081",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa15244fd05a435bc4c71342dab5f464b1916a38",
        "patch": "@@ -410,12 +410,12 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n # Transaction/Block functions\n #############################\n \n-def find_output(node, txid, amount):\n+def find_output(node, txid, amount, *, block_hash=None):\n     \"\"\"\n     Return index to output of txid with value amount\n     Raises exception if there is none.\n     \"\"\"\n-    txdata = node.getrawtransaction(txid, 1)\n+    txdata = node.getrawtransaction(txid, 1, block_hash)\n     for i in range(len(txdata[\"vout\"])):\n         if txdata[\"vout\"][i][\"value\"] == amount:\n             return i"
      },
      {
        "sha": "c3cb2822ba099fb3b69ccb91dab09511cf5f01fb",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=fa15244fd05a435bc4c71342dab5f464b1916a38",
        "patch": "@@ -26,8 +26,10 @@\n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[\"-minrelaytxfee=0.00001\", \"-txindex\"], []]\n+        self.extra_args = [\n+            [\"-minrelaytxfee=0.00001\"],\n+            [],\n+        ]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      },
      {
        "sha": "a5df763eb0411acdaf97d9afcdbbebf4b298d181",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa15244fd05a435bc4c71342dab5f464b1916a38/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=fa15244fd05a435bc4c71342dab5f464b1916a38",
        "patch": "@@ -24,8 +24,6 @@ class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = True\n-        # TODO: remove -txindex. Currently required for getrawtransaction call.\n-        self.extra_args = [[], [], [\"-txindex\"], []]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()"
      }
    ]
  }
]