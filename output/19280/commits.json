[
  {
    "sha": "3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjBiZTVhYmFiOWUxOGU5OGE5MzIyYTBmNDUxZjBlMjJiMjBlYjAw",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-15T00:14:34Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-15T23:41:37Z"
      },
      "message": "Verify the block filter hash when reading from disk.\n\nDon't run the (relatively) expensive sanity check in GCSFilter constructor\nif we've checked the encoded filter hash.",
      "tree": {
        "sha": "be63941e8b0151aafbf7b07e5c93a094acd28395",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be63941e8b0151aafbf7b07e5c93a094acd28395"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eac65d99ddb27061e6ae0f9448887db86e2c0734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eac65d99ddb27061e6ae0f9448887db86e2c0734",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eac65d99ddb27061e6ae0f9448887db86e2c0734"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 24,
      "deletions": 18
    },
    "files": [
      {
        "sha": "7313fac1430a96efa7aa3a6af353bd35fce1aba7",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
        "patch": "@@ -78,7 +78,7 @@ GCSFilter::GCSFilter(const Params& params)\n     : m_params(params), m_N(0), m_F(0), m_encoded{0}\n {}\n \n-GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter)\n+GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter, const bool filter_checked)\n     : m_params(params), m_encoded(std::move(encoded_filter))\n {\n     VectorReader stream(GCS_SER_TYPE, GCS_SER_VERSION, m_encoded, 0);\n@@ -90,14 +90,16 @@ GCSFilter::GCSFilter(const Params& params, std::vector<unsigned char> encoded_fi\n     }\n     m_F = static_cast<uint64_t>(m_N) * static_cast<uint64_t>(m_params.m_M);\n \n-    // Verify that the encoded filter contains exactly N elements. If it has too much or too little\n-    // data, a std::ios_base::failure exception will be raised.\n-    BitStreamReader<VectorReader> bitreader(stream);\n-    for (uint64_t i = 0; i < m_N; ++i) {\n-        GolombRiceDecode(bitreader, m_params.m_P);\n-    }\n-    if (!stream.empty()) {\n-        throw std::ios_base::failure(\"encoded_filter contains excess data\");\n+    if (!filter_checked) {\n+        // Verify that the encoded filter contains exactly N elements. If it has too much or too little\n+        // data, a std::ios_base::failure exception will be raised.\n+        BitStreamReader<VectorReader> bitreader(stream);\n+        for (uint64_t i = 0; i < m_N; ++i) {\n+            GolombRiceDecode(bitreader, m_params.m_P);\n+        }\n+        if (!stream.empty()) {\n+            throw std::ios_base::failure(\"encoded_filter contains excess data\");\n+        }\n     }\n }\n \n@@ -250,14 +252,14 @@ static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n }\n \n BlockFilter::BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n-                         std::vector<unsigned char> filter)\n+                         std::vector<unsigned char> filter, const bool filter_checked)\n     : m_filter_type(filter_type), m_block_hash(block_hash)\n {\n     GCSFilter::Params params;\n     if (!BuildParams(params)) {\n         throw std::invalid_argument(\"unknown filter_type\");\n     }\n-    m_filter = GCSFilter(params, std::move(filter));\n+    m_filter = GCSFilter(params, std::move(filter), filter_checked);\n }\n \n BlockFilter::BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo)"
      },
      {
        "sha": "af054dbf34cdd1f3dd73fd7c31af09e80a4511c5",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
        "patch": "@@ -59,7 +59,7 @@ class GCSFilter\n     explicit GCSFilter(const Params& params = Params());\n \n     /** Reconstructs an already-created filter from an encoding. */\n-    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter);\n+    GCSFilter(const Params& params, std::vector<unsigned char> encoded_filter, const bool filter_checked=false);\n \n     /** Builds a new filter from the params and set of elements. */\n     GCSFilter(const Params& params, const ElementSet& elements);\n@@ -122,7 +122,7 @@ class BlockFilter\n \n     //! Reconstruct a BlockFilter from parts.\n     BlockFilter(BlockFilterType filter_type, const uint256& block_hash,\n-                std::vector<unsigned char> filter);\n+                std::vector<unsigned char> filter, const bool filter_checked=false);\n \n     //! Construct a new BlockFilter of the specified type from a block.\n     BlockFilter(BlockFilterType filter_type, const CBlock& block, const CBlockUndo& block_undo);"
      },
      {
        "sha": "69da7421f2f9206eebf98d4da59c8c1c1a3ee9f3",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
        "patch": "@@ -5,6 +5,7 @@\n #include <map>\n \n #include <dbwrapper.h>\n+#include <hash.h>\n #include <index/blockfilterindex.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -142,7 +143,7 @@ bool BlockFilterIndex::CommitInternal(CDBBatch& batch)\n     return BaseIndex::CommitInternal(batch);\n }\n \n-bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const\n+bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter, const uint256& hash) const\n {\n     CAutoFile filein(m_filter_fileseq->Open(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull()) {\n@@ -153,7 +154,10 @@ bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& f\n     std::vector<unsigned char> encoded_filter;\n     try {\n         filein >> block_hash >> encoded_filter;\n-        filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter));\n+        uint256 result;\n+        CHash256().Write(encoded_filter.data(), encoded_filter.size()).Finalize(result.begin());\n+        if (result != hash) return error(\"Checksum mismatch in filter decode.\");\n+        filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter), true);\n     }\n     catch (const std::exception& e) {\n         return error(\"%s: Failed to deserialize block filter from disk: %s\", __func__, e.what());\n@@ -380,7 +384,7 @@ bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter&\n         return false;\n     }\n \n-    return ReadFilterFromDisk(entry.pos, filter_out);\n+    return ReadFilterFromDisk(entry.pos, filter_out, entry.hash);\n }\n \n bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out)\n@@ -424,7 +428,7 @@ bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* st\n     filters_out.resize(entries.size());\n     auto filter_pos_it = filters_out.begin();\n     for (const auto& entry : entries) {\n-        if (!ReadFilterFromDisk(entry.pos, *filter_pos_it)) {\n+        if (!ReadFilterFromDisk(entry.pos, *filter_pos_it, entry.hash)) {\n             return false;\n         }\n         ++filter_pos_it;"
      },
      {
        "sha": "8ba1d330e42587f391f8dd5dfe8d747ecc27bd06",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f0be5abab9e18e98a9322a0f451f0e22b20eb00/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
        "patch": "@@ -35,7 +35,7 @@ class BlockFilterIndex final : public BaseIndex\n     FlatFilePos m_next_filter_pos;\n     std::unique_ptr<FlatFileSeq> m_filter_fileseq;\n \n-    bool ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const;\n+    bool ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter, const uint256& hash) const;\n     size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n \n     Mutex m_cs_headers_cache;"
      }
    ]
  },
  {
    "sha": "1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjdjMmEwN2M0N2I0NDI5MmJhNzFkOTQwOWZkMTNmZGJhYmI4Y2Q4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-15T16:30:22Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-15T23:41:43Z"
      },
      "message": "Add DecodeGCSFilter and BlockFilterGetHash benchmarks.\n\nAlso standardize on the BASIC filter parameters so we can compare between all the benchmarks.",
      "tree": {
        "sha": "053203caa6b49ba94cee930ff500a4186746110e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/053203caa6b49ba94cee930ff500a4186746110e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f0be5abab9e18e98a9322a0f451f0e22b20eb00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f0be5abab9e18e98a9322a0f451f0e22b20eb00"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 38,
      "deletions": 2
    },
    "files": [
      {
        "sha": "900a9d2e3ef6b6c0781a099f09d3e6f9c07f65ce",
        "filename": "src/bench/gcs_filter.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 2,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8/src/bench/gcs_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8/src/bench/gcs_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/gcs_filter.cpp?ref=1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8",
        "patch": "@@ -17,7 +17,7 @@ static void ConstructGCSFilter(benchmark::State& state)\n \n     uint64_t siphash_k0 = 0;\n     while (state.KeepRunning()) {\n-        GCSFilter filter({siphash_k0, 0, 20, 1 << 20}, elements);\n+        GCSFilter filter({siphash_k0, 0, BASIC_FILTER_P, BASIC_FILTER_M}, elements);\n \n         siphash_k0++;\n     }\n@@ -32,12 +32,48 @@ static void MatchGCSFilter(benchmark::State& state)\n         element[1] = static_cast<unsigned char>(i >> 8);\n         elements.insert(std::move(element));\n     }\n-    GCSFilter filter({0, 0, 20, 1 << 20}, elements);\n+    GCSFilter filter({0, 0, BASIC_FILTER_P, BASIC_FILTER_M}, elements);\n \n     while (state.KeepRunning()) {\n         filter.Match(GCSFilter::Element());\n     }\n }\n \n+static void DecodeGCSFilter(benchmark::State& state)\n+{\n+    GCSFilter::ElementSet elements;\n+    for (int i = 0; i < 10000; ++i) {\n+        GCSFilter::Element element(32);\n+        element[0] = static_cast<unsigned char>(i);\n+        element[1] = static_cast<unsigned char>(i >> 8);\n+        elements.insert(std::move(element));\n+    }\n+    GCSFilter filter({0, 0, BASIC_FILTER_P, BASIC_FILTER_M}, elements);\n+    auto encoded = filter.GetEncoded();\n+\n+    while (state.KeepRunning()) {\n+        GCSFilter filter({0, 0, BASIC_FILTER_P, BASIC_FILTER_M}, encoded);\n+    }\n+}\n+\n+static void BlockFilterGetHash(benchmark::State& state)\n+{\n+    GCSFilter::ElementSet elements;\n+    for (int i = 0; i < 10000; ++i) {\n+        GCSFilter::Element element(32);\n+        element[0] = static_cast<unsigned char>(i);\n+        element[1] = static_cast<unsigned char>(i >> 8);\n+        elements.insert(std::move(element));\n+    }\n+    GCSFilter filter({0, 0, BASIC_FILTER_P, BASIC_FILTER_M}, elements);\n+    BlockFilter block_filter(BlockFilterType::BASIC, {}, filter.GetEncoded());\n+\n+    while (state.KeepRunning()) {\n+        block_filter.GetHash();\n+    }\n+}\n+\n+BENCHMARK(BlockFilterGetHash, 10000);\n BENCHMARK(ConstructGCSFilter, 1000);\n+BENCHMARK(DecodeGCSFilter, 5000);\n BENCHMARK(MatchGCSFilter, 50 * 1000);"
      }
    ]
  },
  {
    "sha": "75e86b18846aa21a88463dfd3e710534afb6c104",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWU4NmIxODg0NmFhMjFhODg0NjNkZmQzZTcxMDUzNGFmYjZjMTA0",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-15T23:41:18Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2020-06-15T23:41:43Z"
      },
      "message": "Add DecodeCheckedGCSFilter benchmark",
      "tree": {
        "sha": "eb15f7c29fc6675e1bd325e6c9c2f9f5083bb981",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb15f7c29fc6675e1bd325e6c9c2f9f5083bb981"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75e86b18846aa21a88463dfd3e710534afb6c104",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e86b18846aa21a88463dfd3e710534afb6c104",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75e86b18846aa21a88463dfd3e710534afb6c104",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e86b18846aa21a88463dfd3e710534afb6c104/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b7c2a07c47b44292ba71d9409fd13fdbabb8cd8"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "661863950ae44d9853b42d29f49fbf465d3a95dd",
        "filename": "src/bench/gcs_filter.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e86b18846aa21a88463dfd3e710534afb6c104/src/bench/gcs_filter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e86b18846aa21a88463dfd3e710534afb6c104/src/bench/gcs_filter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/gcs_filter.cpp?ref=75e86b18846aa21a88463dfd3e710534afb6c104",
        "patch": "@@ -73,7 +73,24 @@ static void BlockFilterGetHash(benchmark::State& state)\n     }\n }\n \n+static void DecodeCheckedGCSFilter(benchmark::State& state)\n+{\n+    GCSFilter::ElementSet elements;\n+    for (int i = 0; i < 10000; ++i) {\n+        GCSFilter::Element element(32);\n+        element[0] = static_cast<unsigned char>(i);\n+        element[1] = static_cast<unsigned char>(i >> 8);\n+        elements.insert(std::move(element));\n+    }\n+    GCSFilter filter({0, 0, BASIC_FILTER_P, BASIC_FILTER_M}, elements);\n+    auto encoded = filter.GetEncoded();\n+\n+    while (state.KeepRunning()) {\n+        GCSFilter filter({0, 0, BASIC_FILTER_P, BASIC_FILTER_M}, encoded, true);\n+    }\n+}\n BENCHMARK(BlockFilterGetHash, 10000);\n BENCHMARK(ConstructGCSFilter, 1000);\n BENCHMARK(DecodeGCSFilter, 5000);\n+BENCHMARK(DecodeCheckedGCSFilter, 50000);\n BENCHMARK(MatchGCSFilter, 50 * 1000);"
      }
    ]
  }
]