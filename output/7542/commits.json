[
  {
    "sha": "9e072a6e66efbda7d39bf61eded21d2b324323be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTA3MmE2ZTY2ZWZiZGE3ZDM5YmY2MWVkZWQyMWQyYjMyNDMyM2Jl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-12T20:57:15Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-21T14:46:25Z"
      },
      "message": "Implement \"feefilter\" P2P message.\n\nThe \"feefilter\" p2p message is used to inform other nodes of your mempool min fee which is the feerate that any new transaction must meet to be accepted to your mempool.  This will allow them to filter invs to you according to this feerate.",
      "tree": {
        "sha": "c9e3686bb2b7cdb50254656a7302d66ac976f467",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9e3686bb2b7cdb50254656a7302d66ac976f467"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e072a6e66efbda7d39bf61eded21d2b324323be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e072a6e66efbda7d39bf61eded21d2b324323be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e072a6e66efbda7d39bf61eded21d2b324323be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e072a6e66efbda7d39bf61eded21d2b324323be/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29b2be6ad7898fcb871f6febbd45d0c7940398cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b2be6ad7898fcb871f6febbd45d0c7940398cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29b2be6ad7898fcb871f6febbd45d0c7940398cd"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 152,
      "deletions": 32
    },
    "files": [
      {
        "sha": "38ac91b2af8b4e59e6b4ed17d35e2309bf6925b7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -330,6 +330,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     }\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n+    strUsage += HelpMessageOpt(\"-feefilter\", strprintf(_(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\"), DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));"
      },
      {
        "sha": "36189f4ffc6280b878e0b7b55b53905223be6fb8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 13,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -17,10 +17,12 @@\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n+#include \"random.h\"\n #include \"script/script.h\"\n #include \"script/sigcache.h\"\n #include \"script/standard.h\"\n@@ -81,6 +83,7 @@ CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n CTxMemPool mempool(::minRelayTxFee);\n+FeeFilterRounder filterRounder(::minRelayTxFee);\n \n struct COrphanTx {\n     CTransaction tx;\n@@ -987,7 +990,7 @@ std::string FormatStateMessage(const CValidationState &state)\n }\n \n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, bool fLimitFree,\n-                              bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee,\n+                              bool* pfMissingInputs, CFeeRate* txFeeRate, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n     const uint256 hash = tx.GetHash();\n@@ -1144,6 +1147,9 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOps, lp);\n         unsigned int nSize = entry.GetTxSize();\n+        if (txFeeRate) {\n+            *txFeeRate = CFeeRate(nFees, nSize);\n+        }\n \n         // Check that the transaction doesn't have an excessive number of\n         // sigops, making it impossible to mine. Since the coinbase transaction\n@@ -1392,10 +1398,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+                        bool* pfMissingInputs, CFeeRate* txFeeRate, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, txFeeRate, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n@@ -2620,7 +2626,7 @@ bool static DisconnectTip(CValidationState& state, const Consensus::Params& cons\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, NULL, true)) {\n             mempool.removeRecursive(tx, removed);\n         } else if (mempool.exists(tx.GetHash())) {\n             vHashUpdate.push_back(tx.GetHash());\n@@ -4916,10 +4922,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         pfrom->setAskFor.erase(inv.hash);\n         mapAlreadyAskedFor.erase(inv);\n \n-        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n-        {\n+        CFeeRate txFeeRate = CFeeRate(0);\n+        if (!AlreadyHave(inv) && AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs, &txFeeRate)) {\n             mempool.check(pcoinsTip);\n-            RelayTransaction(tx);\n+            RelayTransaction(tx, txFeeRate);\n             vWorkQueue.push_back(inv.hash);\n \n             LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n@@ -4950,10 +4956,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n-                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2))\n-                    {\n+                    CFeeRate orphanFeeRate = CFeeRate(0);\n+                    if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2, &orphanFeeRate)) {\n                         LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n-                        RelayTransaction(orphanTx);\n+                        RelayTransaction(orphanTx, orphanFeeRate);\n                         vWorkQueue.push_back(orphanHash);\n                         vEraseQueue.push_back(orphanHash);\n                     }\n@@ -5006,7 +5012,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 int nDoS = 0;\n                 if (!state.IsInvalid(nDoS) || nDoS == 0) {\n                     LogPrintf(\"Force relaying tx %s from whitelisted peer=%d\\n\", tx.GetHash().ToString(), pfrom->id);\n-                    RelayTransaction(tx);\n+                    RelayTransaction(tx, txFeeRate);\n                 } else {\n                     LogPrintf(\"Not relaying invalid transaction %s from whitelisted peer=%d (%s)\\n\", tx.GetHash().ToString(), pfrom->id, FormatStateMessage(state));\n                 }\n@@ -5200,6 +5206,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n                 if (!pfrom->pfilter->IsRelevantAndUpdate(tx)) continue;\n             }\n+            if (pfrom->minFeeFilter) {\n+                CFeeRate feeRate;\n+                mempool.lookupFeeRate(hash, feeRate);\n+                LOCK(pfrom->cs_feeFilter);\n+                if (feeRate.GetFeePerK() < pfrom->minFeeFilter)\n+                    continue;\n+            }\n             vInv.push_back(inv);\n             if (vInv.size() == MAX_INV_SZ) {\n                 pfrom->PushMessage(NetMsgType::INV, vInv);\n@@ -5362,8 +5375,19 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         }\n     }\n \n-    else\n-    {\n+    else if (strCommand == NetMsgType::FEEFILTER) {\n+        CAmount newFeeFilter = 0;\n+        vRecv >> newFeeFilter;\n+        if (MoneyRange(newFeeFilter)) {\n+            {\n+                LOCK(pfrom->cs_feeFilter);\n+                pfrom->minFeeFilter = newFeeFilter;\n+            }\n+            LogPrint(\"net\", \"received: feefilter of %s from peer=%d\\n\", CFeeRate(newFeeFilter).ToString(), pfrom->id);\n+        }\n+    }\n+\n+    else {\n         // Ignore unknown commands for extensibility\n         LogPrint(\"net\", \"Unknown command \\\"%s\\\" from peer=%d\\n\", SanitizeString(strCommand), pfrom->id);\n     }\n@@ -5845,6 +5869,29 @@ bool SendMessages(CNode* pto)\n         if (!vGetData.empty())\n             pto->PushMessage(NetMsgType::GETDATA, vGetData);\n \n+        //\n+        // Message: feefilter\n+        //\n+        // We don't want white listed peers to filter txs to us if we have -whitelistforcerelay\n+        if (pto->nVersion >= FEEFILTER_VERSION && GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n+            !(pto->fWhitelisted && GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY))) {\n+            CAmount currentFilter = mempool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n+            int64_t timeNow = GetTimeMicros();\n+            if (timeNow > pto->nextSendTimeFeeFilter) {\n+                CAmount filterToSend = filterRounder.round(currentFilter);\n+                if (filterToSend != pto->lastSentFeeFilter) {\n+                    pto->PushMessage(NetMsgType::FEEFILTER, filterToSend);\n+                    pto->lastSentFeeFilter = filterToSend;\n+                }\n+                pto->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);\n+            }\n+            // If the fee filter has changed substantially and it's still more than MAX_FEEFILTER_CHANGE_DELAY\n+            // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n+            else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->nextSendTimeFeeFilter &&\n+                     (currentFilter < 3 * pto->lastSentFeeFilter / 4 || currentFilter > 4 * pto->lastSentFeeFilter / 3)) {\n+                pto->nextSendTimeFeeFilter = timeNow + (insecure_rand() % MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+            }\n+        }\n     }\n     return true;\n }"
      },
      {
        "sha": "0bfcfab2132e59b1a48c3259ffe3b3ed1a1a5c20",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -102,6 +102,10 @@ static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n /** Average delay between trickled inventory broadcasts in seconds.\n  *  Blocks, whitelisted receivers, and a random 25% of transactions bypass this. */\n static const unsigned int AVG_INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Average delay between feefilter broadcasts in seconds. */\n+static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n+/** Maximum feefilter broadcast delay after significant change. */\n+static const unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n \n static const unsigned int DEFAULT_LIMITFREERELAY = 15;\n static const bool DEFAULT_RELAYPRIORITY = true;\n@@ -117,6 +121,8 @@ static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n static const bool DEFAULT_TESTSAFEMODE = false;\n /** Default for -mempoolreplacement */\n static const bool DEFAULT_ENABLE_REPLACEMENT = true;\n+/** Default for using fee filter */\n+static const bool DEFAULT_FEEFILTER = true;\n \n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n@@ -282,7 +288,7 @@ void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+                        bool* pfMissingInputs, CFeeRate* txFeeRate, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);"
      },
      {
        "sha": "e8cc753a486d044d6677119e24bd963ee8c28b73",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -2053,20 +2053,15 @@ class CNetCleanup\n instance_of_cnetcleanup;\n \n \n-\n-\n-\n-\n-\n-void RelayTransaction(const CTransaction& tx)\n+void RelayTransaction(const CTransaction& tx, CFeeRate feerate)\n {\n     CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n     ss.reserve(10000);\n     ss << tx;\n-    RelayTransaction(tx, ss);\n+    RelayTransaction(tx, feerate, ss);\n }\n \n-void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n+void RelayTransaction(const CTransaction& tx, CFeeRate feerate, const CDataStream& ss)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n     {\n@@ -2087,6 +2082,11 @@ void RelayTransaction(const CTransaction& tx, const CDataStream& ss)\n     {\n         if(!pnode->fRelayTxes)\n             continue;\n+        {\n+            LOCK(pnode->cs_feeFilter);\n+            if (feerate.GetFeePerK() < pnode->minFeeFilter)\n+                continue;\n+        }\n         LOCK(pnode->cs_filter);\n         if (pnode->pfilter)\n         {\n@@ -2390,6 +2390,10 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nPingUsecTime = 0;\n     fPingQueued = false;\n     nMinPingUsecTime = std::numeric_limits<int64_t>::max();\n+    minFeeFilter = 0;\n+    lastSentFeeFilter = 0;\n+    nextSendTimeFeeFilter = 0;\n+\n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;"
      },
      {
        "sha": "ab9eb68d8577a263ba03d791353a095310ed9a73",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_NET_H\n #define BITCOIN_NET_H\n \n+#include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n #include \"limitedmap.h\"\n@@ -415,6 +416,11 @@ class CNode\n     int64_t nMinPingUsecTime;\n     // Whether a ping is requested.\n     bool fPingQueued;\n+    // Minimum fee rate with which to filter inv's to this node\n+    CAmount minFeeFilter;\n+    CCriticalSection cs_feeFilter;\n+    CAmount lastSentFeeFilter;\n+    int64_t nextSendTimeFeeFilter;\n \n     CNode(SOCKET hSocketIn, const CAddress &addrIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n@@ -766,8 +772,8 @@ class CNode\n \n \n class CTransaction;\n-void RelayTransaction(const CTransaction& tx);\n-void RelayTransaction(const CTransaction& tx, const CDataStream& ss);\n+void RelayTransaction(const CTransaction& tx, CFeeRate feerate);\n+void RelayTransaction(const CTransaction& tx, CFeeRate feerate, const CDataStream& ss);\n \n /** Access to the (IP) address database (peers.dat) */\n class CAddrDB"
      },
      {
        "sha": "7b0e8b7d08cf7465d4520b83a64370071be114c8",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"amount.h\"\n #include \"primitives/transaction.h\"\n+#include \"random.h\"\n #include \"streams.h\"\n #include \"txmempool.h\"\n #include \"util.h\"\n@@ -580,3 +581,21 @@ void CBlockPolicyEstimator::Read(CAutoFile& filein)\n     priStats.Read(filein);\n     nBestSeenHeight = nFileBestSeenHeight;\n }\n+\n+FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n+{\n+    CAmount minFeeLimit = minIncrementalFee.GetFeePerK() / 2;\n+    feeset.insert(0);\n+    for (double bucketBoundary = minFeeLimit; bucketBoundary <= MAX_FEERATE; bucketBoundary *= FEE_SPACING) {\n+        feeset.insert(bucketBoundary);\n+    }\n+}\n+\n+CAmount FeeFilterRounder::round(CAmount currentMinFee)\n+{\n+    std::set<double>::iterator it = feeset.lower_bound(currentMinFee);\n+    if ((it != feeset.begin() && insecure_rand() % 3 != 0) || it == feeset.end()) {\n+        it--;\n+    }\n+    return *it;\n+}"
      },
      {
        "sha": "cdd984de7d5fc2fb318eb980fcb8f9389e5fe53b",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -286,4 +286,17 @@ class CBlockPolicyEstimator\n     CFeeRate feeLikely, feeUnlikely;\n     double priLikely, priUnlikely;\n };\n+\n+class FeeFilterRounder\n+{\n+public:\n+    /** Create new FeeFilterRounder */\n+    FeeFilterRounder(const CFeeRate& minIncrementalFee);\n+\n+    /** Quantize a minimum fee for privacy purpose before broadcast **/\n+    CAmount round(CAmount currentMinFee);\n+\n+private:\n+    std::set<double> feeset;\n+};\n #endif /*BITCOIN_POLICYESTIMATOR_H */"
      },
      {
        "sha": "8c4bd057254a3c68b73d4f1ce2d85d0393a55464",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -34,6 +34,7 @@ const char *FILTERADD=\"filteradd\";\n const char *FILTERCLEAR=\"filterclear\";\n const char *REJECT=\"reject\";\n const char *SENDHEADERS=\"sendheaders\";\n+const char *FEEFILTER=\"feefilter\";\n };\n \n static const char* ppszTypeName[] =\n@@ -68,7 +69,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::FILTERADD,\n     NetMsgType::FILTERCLEAR,\n     NetMsgType::REJECT,\n-    NetMsgType::SENDHEADERS\n+    NetMsgType::SENDHEADERS,\n+    NetMsgType::FEEFILTER\n };\n const static std::vector<std::string> allNetMessageTypesVec(allNetMessageTypes, allNetMessageTypes+ARRAYLEN(allNetMessageTypes));\n "
      },
      {
        "sha": "1b049e52af8a6503404bbaef4614c35491125d29",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -211,7 +211,12 @@ extern const char *REJECT;\n  * @see https://bitcoin.org/en/developer-reference#sendheaders\n  */\n extern const char *SENDHEADERS;\n-\n+/**\n+ * The feefilter message tells the receiving peer not to inv us any txs\n+ * which do not meet the specified min fee rate.\n+ * @since protocol version 70013 as described by BIP133\n+ */\n+extern const char *FEEFILTER;\n };\n \n /* Get a vector of all valid message types (see above) */"
      },
      {
        "sha": "c72339313caf81551383e411f0690cb8785fcebe",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -818,11 +818,12 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     const CCoins* existingCoins = view.AccessCoins(hashTx);\n     bool fHaveMempool = mempool.exists(hashTx);\n     bool fHaveChain = existingCoins && existingCoins->nHeight < 1000000000;\n+    CFeeRate txFeeRate = CFeeRate(0);\n     if (!fHaveMempool && !fHaveChain) {\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, &txFeeRate, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {\n@@ -835,7 +836,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     } else if (fHaveChain) {\n         throw JSONRPCError(RPC_TRANSACTION_ALREADY_IN_CHAIN, \"transaction already in block chain\");\n     }\n-    RelayTransaction(tx);\n+    RelayTransaction(tx, txFeeRate);\n \n     return hashTx.GetHex();\n }"
      },
      {
        "sha": "237b26329b1c127c755b86ea3cde263c961d76d9",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, 0);\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, NULL, true, 0);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "52c77931183318dbb23ffd4981b0bebe3e334f64",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -771,6 +771,16 @@ bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n     return true;\n }\n \n+bool CTxMemPool::lookupFeeRate(const uint256& hash, CFeeRate& feeRate) const\n+{\n+    LOCK(cs);\n+    indexed_transaction_set::const_iterator i = mapTx.find(hash);\n+    if (i == mapTx.end())\n+        return false;\n+    feeRate = CFeeRate(i->GetFee(), i->GetTxSize());\n+    return true;\n+}\n+\n CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n {\n     LOCK(cs);"
      },
      {
        "sha": "9dbb37dad068fce888ec1ff23a266dd0e8dae6a5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -600,6 +600,7 @@ class CTxMemPool\n     }\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n+    bool lookupFeeRate(const uint256& hash, CFeeRate& feeRate) const;\n \n     /** Estimate fee rate needed to get into the next nBlocks\n      *  If no answer can be given at nBlocks, return an estimate"
      },
      {
        "sha": "0e1d8a63ced6e9e1c85e84a8caa31205f10d898f",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -9,7 +9,7 @@\n  * network protocol versioning\n  */\n \n-static const int PROTOCOL_VERSION = 70012;\n+static const int PROTOCOL_VERSION = 70013;\n \n //! initial proto version, to be increased after version/verack negotiation\n static const int INIT_PROTO_VERSION = 209;\n@@ -36,4 +36,7 @@ static const int NO_BLOOM_VERSION = 70011;\n //! \"sendheaders\" command and announcing blocks with headers starts with this version\n static const int SENDHEADERS_VERSION = 70012;\n \n+//! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n+static const int FEEFILTER_VERSION = 70013;\n+\n #endif // BITCOIN_VERSION_H"
      },
      {
        "sha": "654e617071b2a15b3ab2ec8b69c3d7b079c2efc0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e072a6e66efbda7d39bf61eded21d2b324323be/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e072a6e66efbda7d39bf61eded21d2b324323be/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9e072a6e66efbda7d39bf61eded21d2b324323be",
        "patch": "@@ -1268,7 +1268,9 @@ bool CWalletTx::RelayWalletTransaction()\n     {\n         if (GetDepthInMainChain() == 0 && !isAbandoned() && InMempool()) {\n             LogPrintf(\"Relaying wtx %s\\n\", GetHash().ToString());\n-            RelayTransaction((CTransaction)*this);\n+            CFeeRate feeRate;\n+            mempool.lookupFeeRate(GetHash(), feeRate);\n+            RelayTransaction((CTransaction)*this, feeRate);\n             return true;\n         }\n     }\n@@ -3231,5 +3233,5 @@ int CMerkleTx::GetBlocksToMaturity() const\n bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, CAmount nAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, NULL, false, nAbsurdFee);\n }"
      }
    ]
  },
  {
    "sha": "5fa66e4682a59047d2ed2934760ccc052fd85f50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmE2NmU0NjgyYTU5MDQ3ZDJlZDI5MzQ3NjBjY2MwNTJmZDg1ZjUw",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-04T20:08:10Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-21T14:46:25Z"
      },
      "message": "Create SingleNodeConnCB class for RPC tests",
      "tree": {
        "sha": "dd20a8cad0c582eeba795cb300bd6f945815ebd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd20a8cad0c582eeba795cb300bd6f945815ebd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fa66e4682a59047d2ed2934760ccc052fd85f50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fa66e4682a59047d2ed2934760ccc052fd85f50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fa66e4682a59047d2ed2934760ccc052fd85f50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fa66e4682a59047d2ed2934760ccc052fd85f50/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e072a6e66efbda7d39bf61eded21d2b324323be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e072a6e66efbda7d39bf61eded21d2b324323be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e072a6e66efbda7d39bf61eded21d2b324323be"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 40,
      "deletions": 15
    },
    "files": [
      {
        "sha": "e4127500cd89b50fd0ea761d855a05bd5d7cce09",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fa66e4682a59047d2ed2934760ccc052fd85f50/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fa66e4682a59047d2ed2934760ccc052fd85f50/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=5fa66e4682a59047d2ed2934760ccc052fd85f50",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.comptool import wait_until\n import time\n \n '''"
      },
      {
        "sha": "e3f9b4323546c83f43f1dd0cdc8ca175dc75157c",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fa66e4682a59047d2ed2934760ccc052fd85f50/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fa66e4682a59047d2ed2934760ccc052fd85f50/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=5fa66e4682a59047d2ed2934760ccc052fd85f50",
        "patch": "@@ -27,20 +27,6 @@\n \n global mininode_lock\n \n-def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n-    attempt = 0\n-    elapsed = 0\n-\n-    while attempt < attempts and elapsed < timeout:\n-        with mininode_lock:\n-            if predicate():\n-                return True\n-        attempt += 1\n-        elapsed += 0.05\n-        time.sleep(0.05)\n-\n-    return False\n-\n class RejectResult(object):\n     '''\n     Outcome that expects rejection of a transaction or block."
      },
      {
        "sha": "5b6bb190e40e1b225f63261d9b127ed4201bf4cf",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fa66e4682a59047d2ed2934760ccc052fd85f50/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fa66e4682a59047d2ed2934760ccc052fd85f50/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=5fa66e4682a59047d2ed2934760ccc052fd85f50",
        "patch": "@@ -1008,6 +1008,20 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n+# Helper function\n+def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+    attempt = 0\n+    elapsed = 0\n+\n+    while attempt < attempts and elapsed < timeout:\n+        with mininode_lock:\n+            if predicate():\n+                return True\n+        attempt += 1\n+        elapsed += 0.05\n+        time.sleep(0.05)\n+\n+    return False\n \n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n@@ -1085,6 +1099,32 @@ def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n \n+# More useful callbacks and functions for NodeConnCB's which have a single NodeConn\n+class SingleNodeConnCB(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Sync up with the node\n+    def sync_with_ping(self, timeout=30):\n+        def received_pong():\n+            return (self.last_pong.nonce == self.ping_counter)\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        success = wait_until(received_pong, timeout)\n+        self.ping_counter += 1\n+        return success\n \n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node"
      }
    ]
  },
  {
    "sha": "b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTM2YTZmYzgzZWUyMGNmYjgwZGE4YmNiNWYyMWM2NjRlYzdiNWZl",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-04T21:11:49Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-21T14:46:25Z"
      },
      "message": "Add p2p test for feefilter",
      "tree": {
        "sha": "167b1d80c87cddcefa1f452d99142360fcfeabf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/167b1d80c87cddcefa1f452d99142360fcfeabf7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fa66e4682a59047d2ed2934760ccc052fd85f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fa66e4682a59047d2ed2934760ccc052fd85f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fa66e4682a59047d2ed2934760ccc052fd85f50"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 121,
      "deletions": 2
    },
    "files": [
      {
        "sha": "74be96da746410cd11e3d78ab46f9d4fec075831",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
        "patch": "@@ -127,7 +127,6 @@\n     'getblocktemplate_proposals.py',\n     'txn_doublespend.py',\n     'txn_clone.py --mineblock',\n-    'pruning.py',\n     'forknotify.py',\n     'invalidateblock.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n@@ -137,6 +136,8 @@\n     'mempool_packages.py',\n     'maxuploadtarget.py',\n     'replace-by-fee.py',\n+    'p2p-feefilter.py',\n+    'pruning.py', # leave pruning last as it takes a REALLY long time\n ]\n \n #Enable ZMQ tests"
      },
      {
        "sha": "f85c18dcd514028e9d2c086ebfbee2590028461d",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "added",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
        "patch": "@@ -0,0 +1,99 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import time\n+\n+'''\n+FeeFilterTest -- test processing of feefilter messages\n+'''\n+\n+def hashToHex(hash):\n+    return format(hash, '064x').decode('utf-8')\n+\n+# Wait up to 60 secs to see if the testnode has received all the expected invs\n+def allInvsMatch(invsExpected, testnode):\n+    for x in xrange(60):\n+        with mininode_lock:\n+            if (sorted(invsExpected) == sorted(testnode.txinvs)):\n+                return True;\n+        time.sleep(1)\n+    return False;\n+\n+# TestNode: bare-bones \"peer\".  Used to track which invs are received from a node\n+# and to send the node feefilter messages.\n+class TestNode(SingleNodeConnCB):\n+    def __init__(self):\n+        SingleNodeConnCB.__init__(self)\n+        self.txinvs = []\n+\n+    def on_inv(self, conn, message):\n+        for i in message.inv:\n+            if (i.type == 1):\n+                self.txinvs.append(hashToHex(i.hash))\n+\n+    def clear_invs(self):\n+        with mininode_lock:\n+            self.txinvs = []\n+\n+    def send_filter(self, feerate):\n+        self.send_message(msg_feefilter(feerate))\n+        self.sync_with_ping()\n+\n+class FeeFilterTest(BitcoinTestFramework):\n+    def setup_network(self):\n+        # Node1 will be used to generate txs which should be relayed from Node0\n+        # to our test node\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-logtimemicros\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\", \"-logtimemicros\"]))\n+        connect_nodes(self.nodes[0], 1)\n+\n+    def run_test(self):\n+        node1 = self.nodes[1]\n+        # Get out of IBD\n+        node1.generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Setup the p2p connections and start up the network thread.\n+        test_node = TestNode()\n+        connection = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+        test_node.add_connection(connection)\n+        NetworkThread().start()\n+        test_node.wait_for_verack()\n+\n+        # Test that invs are received for all txs at feerate of 20 sat/byte\n+        node1.settxfee(Decimal(\"0.00020000\"))\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        assert(allInvsMatch(txids, test_node))\n+        test_node.clear_invs()\n+\n+        # Set a filter of 15 sat/byte\n+        test_node.send_filter(15000)\n+\n+        # Test that txs are still being received (paying 20 sat/byte)\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        assert(allInvsMatch(txids, test_node))\n+        test_node.clear_invs()\n+\n+        # Change tx fee rate to 10 sat/byte and test they are no longer received\n+        node1.settxfee(Decimal(\"0.00010000\"))\n+        [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        sync_mempools(self.nodes) # must be sure node 0 has received all txs \n+        time.sleep(10) # wait 10 secs to be sure its doesn't relay any\n+        assert(allInvsMatch([], test_node))\n+        test_node.clear_invs()\n+\n+        # Remove fee filter and check that txs are received again\n+        test_node.send_filter(0)\n+        txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in xrange(3)]\n+        assert(allInvsMatch(txids, test_node))\n+        test_node.clear_invs()\n+\n+if __name__ == '__main__':\n+    FeeFilterTest().main()"
      },
      {
        "sha": "20386c642c67b8e915d77e93d8c38d9371030cf7",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
        "patch": "@@ -1023,6 +1023,23 @@ def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n \n     return False\n \n+class msg_feefilter(object):\n+    command = \"feefilter\"\n+\n+    def __init__(self, feerate=0L):\n+        self.feerate = feerate\n+\n+    def deserialize(self, f):\n+        self.feerate = struct.unpack(\"<Q\", f.read(8))[0]\n+\n+    def serialize(self):\n+        r = \"\"\n+        r += struct.pack(\"<Q\", self.feerate)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_feefilter(feerate=%08x)\" % self.feerate\n+\n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):\n@@ -1098,6 +1115,7 @@ def on_reject(self, conn, message): pass\n     def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n+    def on_feefilter(self, conn, message): pass\n \n # More useful callbacks and functions for NodeConnCB's which have a single NodeConn\n class SingleNodeConnCB(NodeConnCB):\n@@ -1145,7 +1163,8 @@ class NodeConn(asyncore.dispatcher):\n         \"headers\": msg_headers,\n         \"getheaders\": msg_getheaders,\n         \"reject\": msg_reject,\n-        \"mempool\": msg_mempool\n+        \"mempool\": msg_mempool,\n+        \"feefilter\": msg_feefilter\n     }\n     MAGIC_BYTES = {\n         \"mainnet\": \"\\xf9\\xbe\\xb4\\xd9\",   # mainnet"
      }
    ]
  },
  {
    "sha": "0371797e2a57711a742a810a719a279aea0bc694",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzcxNzk3ZTJhNTc3MTFhNzQyYTgxMGE3MTlhMjc5YWVhMGJjNjk0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-04T21:25:19Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-21T14:48:01Z"
      },
      "message": "modify release-notes.md and bips.md",
      "tree": {
        "sha": "66efd73dc16ec1cd8a7a5515dfe1cde9fd49284d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66efd73dc16ec1cd8a7a5515dfe1cde9fd49284d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0371797e2a57711a742a810a719a279aea0bc694",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0371797e2a57711a742a810a719a279aea0bc694",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0371797e2a57711a742a810a719a279aea0bc694",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0371797e2a57711a742a810a719a279aea0bc694/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b536a6fc83ee20cfb80da8bcb5f21c664ec7b5fe"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b8efabbcf251cdd0a88a5c8c02e4f808b831cf52",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0371797e2a57711a742a810a719a279aea0bc694/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0371797e2a57711a742a810a719a279aea0bc694/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=0371797e2a57711a742a810a719a279aea0bc694",
        "patch": "@@ -20,3 +20,4 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, and enforced for all peer versions as of **v0.13.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579) and [PR #6641](https://github.com/bitcoin/bitcoin/pull/6641)).\n * [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n+* [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542))."
      },
      {
        "sha": "806d174ebf7fcc68d5e63032738c4017034fbc77",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0371797e2a57711a742a810a719a279aea0bc694/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0371797e2a57711a742a810a719a279aea0bc694/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=0371797e2a57711a742a810a719a279aea0bc694",
        "patch": "@@ -53,6 +53,15 @@ The following outputs are affected by this change:\n \n The p2p alert system has been removed in #7692 and the 'alert' message is no longer supported.\n \n+\n+Fee filtering of invs (BIP 133)\n+------------------------------------\n+\n+The optional new p2p message \"feefilter\" is implemented and the protocol\n+version is bumped to 70013. Upon receiving a feefilter message from a peer,\n+a node will not send invs for any transactions which do not meet the filter\n+feerate. [BIP 133](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki)\n+\n ### Validation\n \n ### Build system"
      }
    ]
  }
]