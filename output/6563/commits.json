[
  {
    "sha": "22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjUyOWQ0MzJhMDZmOTk4NjBmYjQyNDZmMTZjZjBiYTRjMmY2ZWMz",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2015-08-17T17:51:45Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2015-08-17T17:51:45Z"
      },
      "message": "update miner_tests\n\nRemove magic nonce's and reuse TestChain100Setup network.\n\nNow no need to manually increment chaintip height as I call\nProcessBlock() after CreateBlock().\n\nThe FIXME's were fixed so CheckFinalTX(tx1) and CheckFinalTx(tx2) work.",
      "tree": {
        "sha": "7dca62634639a71f1ca999f56546c420f5a570ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dca62634639a71f1ca999f56546c420f5a570ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22529d432a06f99860fb4246f16cf0ba4c2f6ec3/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e92b275406e3fbc7ab59d2ada1c882ca15fb36f"
      }
    ],
    "stats": {
      "total": 214,
      "additions": 85,
      "deletions": 129
    },
    "files": [
      {
        "sha": "dae691fcf76d1bd5fe9346797a1033b6eb380ce2",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 125,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22529d432a06f99860fb4246f16cf0ba4c2f6ec3/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22529d432a06f99860fb4246f16cf0ba4c2f6ec3/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
        "patch": "@@ -18,93 +18,33 @@\n \n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n-\n-static\n-struct {\n-    unsigned char extranonce;\n-    unsigned int nonce;\n-} blockinfo[] = {\n-    {4, 0xa4a3e223}, {2, 0x15c32f9e}, {1, 0x0375b547}, {1, 0x7004a8a5},\n-    {2, 0xce440296}, {2, 0x52cfe198}, {1, 0x77a72cd0}, {2, 0xbb5d6f84},\n-    {2, 0x83f30c2c}, {1, 0x48a73d5b}, {1, 0xef7dcd01}, {2, 0x6809c6c4},\n-    {2, 0x0883ab3c}, {1, 0x087bbbe2}, {2, 0x2104a814}, {2, 0xdffb6daa},\n-    {1, 0xee8a0a08}, {2, 0xba4237c1}, {1, 0xa70349dc}, {1, 0x344722bb},\n-    {3, 0xd6294733}, {2, 0xec9f5c94}, {2, 0xca2fbc28}, {1, 0x6ba4f406},\n-    {2, 0x015d4532}, {1, 0x6e119b7c}, {2, 0x43e8f314}, {2, 0x27962f38},\n-    {2, 0xb571b51b}, {2, 0xb36bee23}, {2, 0xd17924a8}, {2, 0x6bc212d9},\n-    {1, 0x630d4948}, {2, 0x9a4c4ebb}, {2, 0x554be537}, {1, 0xd63ddfc7},\n-    {2, 0xa10acc11}, {1, 0x759a8363}, {2, 0xfb73090d}, {1, 0xe82c6a34},\n-    {1, 0xe33e92d7}, {3, 0x658ef5cb}, {2, 0xba32ff22}, {5, 0x0227a10c},\n-    {1, 0xa9a70155}, {5, 0xd096d809}, {1, 0x37176174}, {1, 0x830b8d0f},\n-    {1, 0xc6e3910e}, {2, 0x823f3ca8}, {1, 0x99850849}, {1, 0x7521fb81},\n-    {1, 0xaacaabab}, {1, 0xd645a2eb}, {5, 0x7aea1781}, {5, 0x9d6e4b78},\n-    {1, 0x4ce90fd8}, {1, 0xabdc832d}, {6, 0x4a34f32a}, {2, 0xf2524c1c},\n-    {2, 0x1bbeb08a}, {1, 0xad47f480}, {1, 0x9f026aeb}, {1, 0x15a95049},\n-    {2, 0xd1cb95b2}, {2, 0xf84bbda5}, {1, 0x0fa62cd1}, {1, 0xe05f9169},\n-    {1, 0x78d194a9}, {5, 0x3e38147b}, {5, 0x737ba0d4}, {1, 0x63378e10},\n-    {1, 0x6d5f91cf}, {2, 0x88612eb8}, {2, 0xe9639484}, {1, 0xb7fabc9d},\n-    {2, 0x19b01592}, {1, 0x5a90dd31}, {2, 0x5bd7e028}, {2, 0x94d00323},\n-    {1, 0xa9b9c01a}, {1, 0x3a40de61}, {1, 0x56e7eec7}, {5, 0x859f7ef6},\n-    {1, 0xfd8e5630}, {1, 0x2b0c9f7f}, {1, 0xba700e26}, {1, 0x7170a408},\n-    {1, 0x70de86a8}, {1, 0x74d64cd5}, {1, 0x49e738a1}, {2, 0x6910b602},\n-    {0, 0x643c565f}, {1, 0x54264b3f}, {2, 0x97ea6396}, {2, 0x55174459},\n-    {2, 0x03e8779a}, {1, 0x98f34d8f}, {1, 0xc07b2b07}, {1, 0xdfe29668},\n-    {1, 0x3141c7c1}, {1, 0xb3b595f4}, {1, 0x735abf08}, {5, 0x623bfbce},\n-    {2, 0xd351e722}, {1, 0xf4ca48c9}, {1, 0x5b19c670}, {1, 0xa164bf0e},\n-    {2, 0xbbbeb305}, {2, 0xfe1c810a},\n-};\n-\n-// NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n+BOOST_FIXTURE_TEST_SUITE(miner_tests, TestChain100Setup)\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n-    CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;\n     CScript script;\n+\tstd::vector<unsigned char> vchSig;\n     uint256 hash;\n+\tstd::vector<CMutableTransaction> noTxns;\n+\tCBlock block;\n \n     LOCK(cs_main);\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-\n-    // We can't make transactions until we have inputs\n-    // Therefore, load 100 blocks :)\n-    std::vector<CTransaction*>txFirst;\n-    for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i)\n-    {\n-        CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n-        pblock->nVersion = 1;\n-        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n-        CMutableTransaction txCoinbase(pblock->vtx[0]);\n-        txCoinbase.nVersion = 1;\n-        txCoinbase.vin[0].scriptSig = CScript();\n-        txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n-        txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n-        txCoinbase.vout[0].scriptPubKey = CScript();\n-        pblock->vtx[0] = CTransaction(txCoinbase);\n-        if (txFirst.size() < 2)\n-            txFirst.push_back(new CTransaction(pblock->vtx[0]));\n-        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-        pblock->nNonce = blockinfo[i].nonce;\n-        CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, NULL, pblock, true, NULL));\n-        BOOST_CHECK(state.IsValid());\n-        pblock->hashPrevBlock = pblock->GetHash();\n-    }\n-    delete pblocktemplate;\n-\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n     tx.vin.resize(1);\n     // NOTE: OP_NOP is used to force 20 SigOps for the CHECKMULTISIG\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_0 << OP_0 << OP_NOP << OP_CHECKMULTISIG << OP_1;\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = 5000000000LL;\n@@ -115,8 +55,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     mempool.clear();\n \n     // block size > limit\n@@ -126,7 +66,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     for (unsigned int i = 0; i < 18; ++i)\n         tx.vin[0].scriptSig << vchData << OP_DROP;\n     tx.vin[0].scriptSig << OP_1;\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n     tx.vout[0].nValue = 5000000000LL;\n     for (unsigned int i = 0; i < 128; ++i)\n     {\n@@ -135,33 +75,33 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     mempool.clear();\n \n     // child with higher priority than parent\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n+    tx.vin[0].prevout.hash = coinbaseTxns[1].GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n-    tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[1].prevout.hash = coinbaseTxns[0].GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     mempool.clear();\n \n     // coinbase in mempool\n@@ -171,12 +111,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     mempool.clear();\n \n     // invalid (pre-p2sh) txn in mempool\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n@@ -189,12 +129,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     mempool.clear();\n \n     // double spend txn pair in mempool\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n@@ -203,8 +143,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     mempool.clear();\n \n     // subsidy changing\n@@ -217,60 +157,73 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n \n-    // non-final txs in mempool\n+ \n+\t// non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n \n-    // height locked\n-    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n-    tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = 0;\n+\t// height locked\n+\ttx.vin.resize(1);\n+    tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+\ttx.vin[0].scriptSig = CScript() << OP_1;\n+    tx.vin[0].prevout.n = 0;\n+\ttx.vin[0].nSequence = 0;\n+    tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n-    tx.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx.nLockTime = chainActive.Tip()->nHeight+1;\n-    hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx));\n+    tx.vout[0].scriptPubKey = scriptPubKey;\n+\ttx.nLockTime = chainActive.Tip()->nHeight+1;\t\n+    // Sign:\n+    vchSig.clear();\n+    hash = SignatureHash(scriptPubKey, tx, 0, SIGHASH_ALL);\n+    BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+    vchSig.push_back((unsigned char)SIGHASH_ALL);\n+    tx.vin[0].scriptSig << vchSig;\n+\thash = tx.GetHash();\n+\tmempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+\tBOOST_CHECK(!CheckFinalTx(tx));\n+    \n+\n \n     // time locked\n-    tx2.vin.resize(1);\n-    tx2.vin[0].prevout.hash = txFirst[1]->GetHash();\n+\ttx2.vin.resize(1);\n+    tx2.vin[0].prevout.hash = hash;\n+\ttx2.vin[0].scriptSig = CScript() << OP_1;\n     tx2.vin[0].prevout.n = 0;\n-    tx2.vin[0].scriptSig = CScript() << OP_1;\n-    tx2.vin[0].nSequence = 0;\n+\ttx2.vin[0].nSequence = 0;\n     tx2.vout.resize(1);\n-    tx2.vout[0].nValue = 4900000000LL;\n-    tx2.vout[0].scriptPubKey = CScript() << OP_1;\n-    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n-    hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2));\n-\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    tx2.vout[0].scriptPubKey = scriptPubKey;\n+\ttx2.vout[0].nValue = 4900000000LL;\n+\ttx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    // Sign:\n+    vchSig.clear();\n+    hash = SignatureHash(scriptPubKey, tx2, 0, SIGHASH_ALL);\n+    BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+    vchSig.push_back((unsigned char)SIGHASH_ALL);\n+    tx2.vin[0].scriptSig << vchSig;\n+\thash = tx2.GetHash();\n+\tmempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n+\tBOOST_CHECK(!CheckFinalTx(tx2));\n+    \n+\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n \n     // Neither tx should have make it into the template.\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n-    delete pblocktemplate;\n+    BOOST_CHECK_EQUAL(block.vtx.size(), 1);\n+\n \n     // However if we advance height and time by one, both will.\n-    chainActive.Tip()->nHeight++;\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n \n-    // FIXME: we should *actually* create a new block so the following test\n-    //        works; CheckFinalTx() isn't fooled by monkey-patching nHeight.\n-    //BOOST_CHECK(CheckFinalTx(tx));\n-    //BOOST_CHECK(CheckFinalTx(tx2));\n-\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n-    delete pblocktemplate;\n+    block = CreateAndProcessBlock(noTxns, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    BOOST_CHECK_EQUAL(block.vtx.size(), 3);\n+    BOOST_CHECK(CheckFinalTx(tx));\n+    BOOST_CHECK(CheckFinalTx(tx2));\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n     mempool.clear();\n \n-    BOOST_FOREACH(CTransaction *tx, txFirst)\n-        delete tx;\n-\n     fCheckpointsEnabled = true;\n }\n "
      },
      {
        "sha": "e151f958d1346e4c740524f1bf8faca821110449",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22529d432a06f99860fb4246f16cf0ba4c2f6ec3/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22529d432a06f99860fb4246f16cf0ba4c2f6ec3/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
        "patch": "@@ -116,10 +116,13 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n-    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n-    block.vtx.resize(1);\n-    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n-        block.vtx.push_back(tx);\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns if txns is non-empty:\n+\tif(txns.size() > 0)\n+\t{\n+\t\tblock.vtx.resize(1);\n+\t\tBOOST_FOREACH(const CMutableTransaction& tx, txns)\n+\t\t\tblock.vtx.push_back(tx);\n+\t}\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);"
      }
    ]
  },
  {
    "sha": "9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTEwYWU1YTVkOGQzYzA0YjhhMTAyNGYyY2UwMThjZDJmZjkyOWI4",
    "commit": {
      "author": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2015-08-18T00:17:03Z"
      },
      "committer": {
        "name": "sidhujag",
        "email": "sidhujag@hotmail.com",
        "date": "2015-08-18T00:17:03Z"
      },
      "message": "fix spacing",
      "tree": {
        "sha": "6500a4d8e8b3331b67ffbd1a7247923fab3ebb84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6500a4d8e8b3331b67ffbd1a7247923fab3ebb84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8/comments",
    "author": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sidhujag",
      "id": 6238042,
      "node_id": "MDQ6VXNlcjYyMzgwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6238042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sidhujag",
      "html_url": "https://github.com/sidhujag",
      "followers_url": "https://api.github.com/users/sidhujag/followers",
      "following_url": "https://api.github.com/users/sidhujag/following{/other_user}",
      "gists_url": "https://api.github.com/users/sidhujag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sidhujag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sidhujag/subscriptions",
      "organizations_url": "https://api.github.com/users/sidhujag/orgs",
      "repos_url": "https://api.github.com/users/sidhujag/repos",
      "events_url": "https://api.github.com/users/sidhujag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sidhujag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22529d432a06f99860fb4246f16cf0ba4c2f6ec3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22529d432a06f99860fb4246f16cf0ba4c2f6ec3"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "e9f0ebe33142e4146b4b7b2d2437f9f22689cf46",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=9510ae5a5d8d3c04b8a1024f2ce018cd2ff929b8",
        "patch": "@@ -25,10 +25,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;\n     CScript script;\n-\tstd::vector<unsigned char> vchSig;\n+    std::vector<unsigned char> vchSig;\n     uint256 hash;\n-\tstd::vector<CMutableTransaction> noTxns;\n-\tCBlock block;\n+    std::vector<CMutableTransaction> noTxns;\n+    CBlock block;\n \n     LOCK(cs_main);\n     fCheckpointsEnabled = false;\n@@ -158,50 +158,50 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight = nHeight;\n \n  \n-\t// non-final txs in mempool\n+    // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n \n-\t// height locked\n-\ttx.vin.resize(1);\n+    // height locked\n+    tx.vin.resize(1);\n     tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n-\ttx.vin[0].scriptSig = CScript() << OP_1;\n+    tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vin[0].prevout.n = 0;\n-\ttx.vin[0].nSequence = 0;\n+    tx.vin[0].nSequence = 0;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = scriptPubKey;\n-\ttx.nLockTime = chainActive.Tip()->nHeight+1;\t\n+    tx.nLockTime = chainActive.Tip()->nHeight+1;\t\n     // Sign:\n     vchSig.clear();\n     hash = SignatureHash(scriptPubKey, tx, 0, SIGHASH_ALL);\n     BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n     vchSig.push_back((unsigned char)SIGHASH_ALL);\n     tx.vin[0].scriptSig << vchSig;\n-\thash = tx.GetHash();\n-\tmempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-\tBOOST_CHECK(!CheckFinalTx(tx));\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    BOOST_CHECK(!CheckFinalTx(tx));\n     \n \n \n     // time locked\n-\ttx2.vin.resize(1);\n+    tx2.vin.resize(1);\n     tx2.vin[0].prevout.hash = hash;\n-\ttx2.vin[0].scriptSig = CScript() << OP_1;\n+    tx2.vin[0].scriptSig = CScript() << OP_1;\n     tx2.vin[0].prevout.n = 0;\n-\ttx2.vin[0].nSequence = 0;\n+    tx2.vin[0].nSequence = 0;\n     tx2.vout.resize(1);\n     tx2.vout[0].scriptPubKey = scriptPubKey;\n-\ttx2.vout[0].nValue = 4900000000LL;\n-\ttx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    tx2.vout[0].nValue = 4900000000LL;\n+    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     // Sign:\n     vchSig.clear();\n     hash = SignatureHash(scriptPubKey, tx2, 0, SIGHASH_ALL);\n     BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n     vchSig.push_back((unsigned char)SIGHASH_ALL);\n     tx2.vin[0].scriptSig << vchSig;\n-\thash = tx2.GetHash();\n-\tmempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-\tBOOST_CHECK(!CheckFinalTx(tx2));\n+    hash = tx2.GetHash();\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n+    BOOST_CHECK(!CheckFinalTx(tx2));\n     \n \n     block = CreateAndProcessBlock(noTxns, scriptPubKey);"
      }
    ]
  }
]