[
  {
    "sha": "9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTY0ZTFjYzRkMWI4YTFhZTE0OGJhZDUyNjEzYWE2N2Q5MTczYTFh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-01-18T21:10:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2020-05-26T06:48:44Z"
      },
      "message": "p2p: immediately disconnect on invalid net message checksum",
      "tree": {
        "sha": "2b4baaaee32508f35fc091a5dcb9b5e0c48ab068",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b4baaaee32508f35fc091a5dcb9b5e0c48ab068"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14f8447777465ffc8eb644bad1dbc52362c4362f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14f8447777465ffc8eb644bad1dbc52362c4362f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14f8447777465ffc8eb644bad1dbc52362c4362f"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 15,
      "deletions": 22
    },
    "files": [
      {
        "sha": "15e06ffbe79fc9f5dda59e26df8ad4b1267c9180",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
        "patch": "@@ -675,6 +675,18 @@ int V1TransportDeserializer::readData(const char *pch, unsigned int nBytes)\n     memcpy(&vRecv[nDataPos], pch, nCopy);\n     nDataPos += nCopy;\n \n+    if (Complete()) {\n+        const uint256& hash = GetMessageHash();\n+        if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n+        {\n+            LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s, disconnecting\\n\",\n+               SanitizeString(hdr.pchCommand), hdr.nMessageSize,\n+               HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n+               HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n+            return -1;\n+        }\n+    }\n+\n     return nCopy;\n }\n \n@@ -693,23 +705,14 @@ CNetMessage V1TransportDeserializer::GetMessage(const CMessageHeader::MessageSta\n     // store state about valid header, netmagic and checksum\n     msg.m_valid_header = hdr.IsValid(message_start);\n     msg.m_valid_netmagic = (memcmp(hdr.pchMessageStart, message_start, CMessageHeader::MESSAGE_START_SIZE) == 0);\n-    uint256 hash = GetMessageHash();\n \n     // store command string, payload size\n     msg.m_command = hdr.GetCommand();\n     msg.m_message_size = hdr.nMessageSize;\n     msg.m_raw_message_size = hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n     // We just received a message off the wire, harvest entropy from the time (and the message checksum)\n-    RandAddEvent(ReadLE32(hash.begin()));\n-\n-    msg.m_valid_checksum = (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) == 0);\n-    if (!msg.m_valid_checksum) {\n-        LogPrint(BCLog::NET, \"CHECKSUM ERROR (%s, %u bytes), expected %s was %s\\n\",\n-                 SanitizeString(msg.m_command), msg.m_message_size,\n-                 HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n-                 HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n-    }\n+    RandAddEvent(ReadLE32(GetMessageHash().begin()));\n \n     // store receive time\n     msg.m_time = time;"
      },
      {
        "sha": "ae6859ec95bef751251874323788b37c33d0b2e8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
        "patch": "@@ -616,7 +616,6 @@ class CNetMessage {\n     int64_t m_time = 0;                  // time (in microseconds) of message receipt.\n     bool m_valid_netmagic = false;\n     bool m_valid_header = false;\n-    bool m_valid_checksum = false;\n     uint32_t m_message_size = 0;         // size of the payload\n     uint32_t m_raw_message_size = 0;     // used wire size of the message (including header/checksum)\n     std::string m_command;"
      },
      {
        "sha": "f85ed49d9d787fc7c8ae58e3439611ba36e18d43",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
        "patch": "@@ -3522,20 +3522,11 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     // Message size\n     unsigned int nMessageSize = msg.m_message_size;\n \n-    // Checksum\n-    CDataStream& vRecv = msg.m_recv;\n-    if (!msg.m_valid_checksum)\n-    {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR peer=%d\\n\", __func__,\n-           SanitizeString(msg_type), nMessageSize, pfrom->GetId());\n-        return fMoreWork;\n-    }\n-\n     // Process message\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, msg_type, vRecv, msg.m_time, chainparams, m_chainman, m_mempool, connman, m_banman, interruptMsgProc);\n+        fRet = ProcessMessage(pfrom, msg_type, msg.m_recv, msg.m_time, chainparams, m_chainman, m_mempool, connman, m_banman, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      },
      {
        "sha": "3556b950b82f707ca4347229a7ae114233f930f9",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9164e1cc4d1b8a1ae148bad52613aa67d9173a1a/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=9164e1cc4d1b8a1ae148bad52613aa67d9173a1a",
        "patch": "@@ -183,7 +183,7 @@ def test_checksum(self):\n             # modify checksum\n             msg = msg[:cut_len] + b'\\xff' * 4 + msg[cut_len + 4:]\n             self.nodes[0].p2p.send_raw_message(msg)\n-            conn.sync_with_ping(timeout=1)\n+            conn.wait_for_disconnect(timeout=1)\n             self.nodes[0].disconnect_p2ps()\n \n     def test_size(self):"
      }
    ]
  }
]