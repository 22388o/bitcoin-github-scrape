[
  {
    "sha": "850847309458f43fc7ce6c13fa08c86e1cae042a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTA4NDczMDk0NThmNDNmYzdjZTZjMTNmYTA4Yzg2ZTFjYWUwNDJh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-07T05:21:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2020-04-07T20:57:34Z"
      },
      "message": "Avoid non-trivial global constants in SHA-NI code",
      "tree": {
        "sha": "151f19420445c44b7d1302c3685768c9fd6ed4c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/151f19420445c44b7d1302c3685768c9fd6ed4c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/850847309458f43fc7ce6c13fa08c86e1cae042a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850847309458f43fc7ce6c13fa08c86e1cae042a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/850847309458f43fc7ce6c13fa08c86e1cae042a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/850847309458f43fc7ce6c13fa08c86e1cae042a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b151e3ffce7c1a2ee46bf280cc1d96775d1f91e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b151e3ffce7c1a2ee46bf280cc1d96775d1f91e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b151e3ffce7c1a2ee46bf280cc1d96775d1f91e"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 17,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3473f6e39f3450604a3f140ffaad05bd47c2695b",
        "filename": "src/crypto/sha256_shani.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/850847309458f43fc7ce6c13fa08c86e1cae042a/src/crypto/sha256_shani.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/850847309458f43fc7ce6c13fa08c86e1cae042a/src/crypto/sha256_shani.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_shani.cpp?ref=850847309458f43fc7ce6c13fa08c86e1cae042a",
        "patch": "@@ -11,13 +11,11 @@\n #include <stdint.h>\n #include <immintrin.h>\n \n-\n-\n namespace {\n \n-const __m128i MASK = _mm_set_epi64x(0x0c0d0e0f08090a0bULL, 0x0405060700010203ULL);\n-const __m128i INIT0 = _mm_set_epi64x(0x6a09e667bb67ae85ull, 0x510e527f9b05688cull);\n-const __m128i INIT1 = _mm_set_epi64x(0x3c6ef372a54ff53aull, 0x1f83d9ab5be0cd19ull);\n+alignas(__m128i) const uint8_t MASK[16] = {0x03, 0x02, 0x01, 0x00, 0x07, 0x06, 0x05, 0x04, 0x0b, 0x0a, 0x09, 0x08, 0x0f, 0x0e, 0x0d, 0x0c};\n+alignas(__m128i) const uint8_t INIT0[16] = {0x8c, 0x68, 0x05, 0x9b, 0x7f, 0x52, 0x0e, 0x51, 0x85, 0xae, 0x67, 0xbb, 0x67, 0xe6, 0x09, 0x6a};\n+alignas(__m128i) const uint8_t INIT1[16] = {0x19, 0xcd, 0xe0, 0x5b, 0xab, 0xd9, 0x83, 0x1f, 0x3a, 0xf5, 0x4f, 0xa5, 0x72, 0xf3, 0x6e, 0x3c};\n \n void inline  __attribute__((always_inline)) QuadRound(__m128i& state0, __m128i& state1, uint64_t k1, uint64_t k0)\n {\n@@ -67,12 +65,12 @@ void inline __attribute__((always_inline)) Unshuffle(__m128i& s0, __m128i& s1)\n \n __m128i inline  __attribute__((always_inline)) Load(const unsigned char* in)\n {\n-    return _mm_shuffle_epi8(_mm_loadu_si128((const __m128i*)in), MASK);\n+    return _mm_shuffle_epi8(_mm_loadu_si128((const __m128i*)in), _mm_load_si128((const __m128i*)MASK));\n }\n \n void inline  __attribute__((always_inline)) Save(unsigned char* out, __m128i s)\n {\n-    _mm_storeu_si128((__m128i*)out, _mm_shuffle_epi8(s, MASK));\n+    _mm_storeu_si128((__m128i*)out, _mm_shuffle_epi8(s, _mm_load_si128((const __m128i*)MASK)));\n }\n }\n \n@@ -149,8 +147,8 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     __m128i bm0, bm1, bm2, bm3, bs0, bs1, bso0, bso1;\n \n     /* Transform 1 */\n-    bs0 = as0 = INIT0;\n-    bs1 = as1 = INIT1;\n+    bs0 = as0 = _mm_load_si128((const __m128i*)INIT0);\n+    bs1 = as1 = _mm_load_si128((const __m128i*)INIT1);\n     am0 = Load(in);\n     bm0 = Load(in + 64);\n     QuadRound(as0, as1, am0, 0xe9b5dba5b5c0fbcfull, 0x71374491428a2f98ull);\n@@ -219,10 +217,10 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     ShiftMessageC(bm1, bm2, bm3);\n     QuadRound(as0, as1, am3, 0xc67178f2bef9A3f7ull, 0xa4506ceb90befffaull);\n     QuadRound(bs0, bs1, bm3, 0xc67178f2bef9A3f7ull, 0xa4506ceb90befffaull);\n-    as0 = _mm_add_epi32(as0, INIT0);\n-    bs0 = _mm_add_epi32(bs0, INIT0);\n-    as1 = _mm_add_epi32(as1, INIT1);\n-    bs1 = _mm_add_epi32(bs1, INIT1);\n+    as0 = _mm_add_epi32(as0, _mm_load_si128((const __m128i*)INIT0));\n+    bs0 = _mm_add_epi32(bs0, _mm_load_si128((const __m128i*)INIT0));\n+    as1 = _mm_add_epi32(as1, _mm_load_si128((const __m128i*)INIT1));\n+    bs1 = _mm_add_epi32(bs1, _mm_load_si128((const __m128i*)INIT1));\n \n     /* Transform 2 */\n     aso0 = as0;\n@@ -275,8 +273,8 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     bm1 = bs1;\n \n     /* Transform 3 */\n-    bs0 = as0 = INIT0;\n-    bs1 = as1 = INIT1;\n+    bs0 = as0 = _mm_load_si128((const __m128i*)INIT0);\n+    bs1 = as1 = _mm_load_si128((const __m128i*)INIT1);\n     QuadRound(as0, as1, am0, 0xe9b5dba5B5c0fbcfull, 0x71374491428a2f98ull);\n     QuadRound(bs0, bs1, bm0, 0xe9b5dba5B5c0fbcfull, 0x71374491428a2f98ull);\n     QuadRound(as0, as1, am1, 0xab1c5ed5923f82a4ull, 0x59f111f13956c25bull);\n@@ -339,10 +337,10 @@ void Transform_2way(unsigned char* out, const unsigned char* in)\n     ShiftMessageC(bm1, bm2, bm3);\n     QuadRound(as0, as1, am3, 0xc67178f2bef9a3f7ull, 0xa4506ceb90befffaull);\n     QuadRound(bs0, bs1, bm3, 0xc67178f2bef9a3f7ull, 0xa4506ceb90befffaull);\n-    as0 = _mm_add_epi32(as0, INIT0);\n-    bs0 = _mm_add_epi32(bs0, INIT0);\n-    as1 = _mm_add_epi32(as1, INIT1);\n-    bs1 = _mm_add_epi32(bs1, INIT1);\n+    as0 = _mm_add_epi32(as0, _mm_load_si128((const __m128i*)INIT0));\n+    bs0 = _mm_add_epi32(bs0, _mm_load_si128((const __m128i*)INIT0));\n+    as1 = _mm_add_epi32(as1, _mm_load_si128((const __m128i*)INIT1));\n+    bs1 = _mm_add_epi32(bs1, _mm_load_si128((const __m128i*)INIT1));\n \n     /* Extract hash into out */\n     Unshuffle(as0, as1);"
      }
    ]
  }
]