MarcoFalke,2020-04-07 10:10:44,"Alternative suggested on IRC, which might compile on clang:\n\n```cpp\n[13:29] <aj> +inline __m128i MASK() { return _mm_set_epi64x(0x0c0d0e0f08090a0bULL, 0x0405060700010203ULL); }\n",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-610299873,610299873,
DrahtBot,2020-04-07 11:09:17,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #13789 (crypto/sha256: Use pragmas to enforce necessary intrinsics for GCC and Clang by luke-jr)\n\nIf you consider this p",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-610324883,610324883,
sipa,2020-04-07 18:50:38,@MarcoFalke Going to try https://github.com/bitcoin/bitcoin/pull/18553#discussion_r404630179 first.,https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-610559589,610559589,
elichai,2020-04-08 11:28:03,"Looks Good.\nCan someone with SHA-NI run this under valgrind and sanitizers? I'm a bit afraid this violates some weird C++ rule (I find manually modifying alignments quite scary)",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-610903554,610903554,
laanwj,2020-04-08 14:33:05,Code review ACK 850847309458f43fc7ce6c13fa08c86e1cae042a,https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-610994795,610994795,
laanwj,2020-04-09 12:04:53,"I've diffed the assembly code generated by `gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0`. The only difference with this patch seems to be that the following initialization code is removed:\n```diff\n--- ./src/crypto/crypto_libbitcoin_crypto_shani_a-sha256_shani.o.old_d  2020-04-09 14:01:37.073839875 +0200\n+++ ./src/crypto/crypto_libbitcoin_crypto_shani_a-sha256_shani.o.new_d  2020-04-09 14:01:43.0",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-611491677,611491677,
MarcoFalke,2020-04-09 12:54:02,@rebroad This should fix your issue #18456 ,https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-611511532,611511532,
theuni,2020-04-09 18:41:57,"LGTM.\n\n@MarcoFalke does clang have problems with the fix here? If so, @ajtowns's solution could be tweaked to be even simpler:\n```patch\ndiff --git a/src/crypto/sha256_shani.cpp b/src/crypto/sha256_shani.cpp\nindex 92f67710fb..b139bceb37 100644\n--- a/src/crypto/sha256_shani.cpp\n+++ b/src/crypto/sha256_shani.cpp\n@@ -15,9 +15,9 @@\n\n namespace {\n\n-const __m128i MASK = _mm_set_ep",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-611690289,611690289,
MarcoFalke,2020-04-09 18:43:33,Clang on travis is green now,https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-611691109,611691109,
theuni,2020-04-09 19:42:55,"Sidenote: we could potentially add a check for illegal instructions in the .text.startup section in one of our python binary checking tools. Though we'd have to create a per-arch blacklist/whitelist to define ""illegal"".",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-611717976,611717976,
laanwj,2020-04-09 20:20:53,"> Sidenote: we could potentially add a check for illegal instructions in the .text.startup section in one of our python binary checking tools. Though we'd have to create a per-arch blacklist/whitelist to define ""illegal"".\n\nMy idea was to forbid `.text.startup` sections completely in all 'special' compilation units, e.g. those compiled with non-default instruction sets. I think that's easier to",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-611733956,611733956,
theuni,2020-04-09 20:33:56,"@laanwj Aha, even simpler.\n\nEdit: And yes, I certainly meant that this could be done as a follow-up, not for this PR.",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-611739415,611739415,
elichai,2020-04-12 13:09:11,"Sounds like it solved the problem: https://github.com/bitcoin/bitcoin/issues/18456#issuecomment-612577320\n\nACK 850847309458f43fc7ce6c13fa08c86e1cae042a",https://github.com/bitcoin/bitcoin/pull/18553#issuecomment-612611698,612611698,
elichai,2020-04-07 08:28:53,"This fails to compile on clang.\nTry moving the `alignas` to the beginning of the expression:\n`alignas(__m128i) const uint8_t MASK[16] = {0x03, 0x02, 0x01, 0x00, 0x07, 0x06, 0x05, 0x04, 0x0b, 0x0a, 0x09, 0x08, 0x0f, 0x0e, 0x0d, 0x0c};` ",https://github.com/bitcoin/bitcoin/pull/18553#discussion_r404630179,404630179,src/crypto/sha256_shani.cpp
sipa,2020-04-07 18:50:09,Done.,https://github.com/bitcoin/bitcoin/pull/18553#discussion_r405036547,405036547,src/crypto/sha256_shani.cpp
