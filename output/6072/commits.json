[
  {
    "sha": "73e603e2ec7c512a3f4285d2aea1a3403806d17a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3M2U2MDNlMmVjN2M1MTJhM2Y0Mjg1ZDJhZWExYTM0MDM4MDZkMTdh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-04-27T15:45:27Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-04-27T15:55:18Z"
      },
      "message": "Add -mempoolnotify to call an external script on mempool transactions",
      "tree": {
        "sha": "ecb926ebbeddd56d48a5eb0fee503445c9da8d48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecb926ebbeddd56d48a5eb0fee503445c9da8d48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/73e603e2ec7c512a3f4285d2aea1a3403806d17a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e603e2ec7c512a3f4285d2aea1a3403806d17a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/73e603e2ec7c512a3f4285d2aea1a3403806d17a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/73e603e2ec7c512a3f4285d2aea1a3403806d17a/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d9d314573ee48f6f51107265f1cf1fa9e36c998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9d314573ee48f6f51107265f1cf1fa9e36c998",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9d314573ee48f6f51107265f1cf1fa9e36c998"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9a3886e362799c07fd3d9d2baac3990ef34a39f0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/73e603e2ec7c512a3f4285d2aea1a3403806d17a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/73e603e2ec7c512a3f4285d2aea1a3403806d17a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=73e603e2ec7c512a3f4285d2aea1a3403806d17a",
        "patch": "@@ -270,6 +270,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-mempoolnotify=<cmd>\", _(\"Execute command when a transaction is accepted to mempool (%s in cmd is replaced by transaction id)\"));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n@@ -319,7 +320,7 @@ strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n-        \n+\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -342,7 +343,7 @@ strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n-                    \n+\n #endif\n \n     strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n@@ -450,6 +451,16 @@ static void BlockNotifyCallback(const uint256& hashNewTip)\n     boost::thread t(runCommand, strCmd); // thread runs free\n }\n \n+static void MempoolNotifyCallback(const CTransaction &tx, const CBlock *pblock)\n+{\n+    // A transaction accepted to memory can't be in a block\n+    if (pblock == NULL) {\n+        std::string strCmd = GetArg(\"-mempoolnotify\", \"\");\n+\n+        boost::replace_all(strCmd, \"%s\", tx.GetHash().GetHex());\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    }\n+}\n struct CImportingNow\n {\n     CImportingNow() {\n@@ -911,15 +922,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n         std::string warningString;\n         std::string errorString;\n-        \n+\n         if (!CWallet::Verify(strWalletFile, warningString, errorString))\n             return false;\n-        \n+\n         if (!warningString.empty())\n             InitWarning(warningString);\n         if (!errorString.empty())\n             return InitError(warningString);\n-        \n+\n     } // (!fDisableWallet)\n #endif // ENABLE_WALLET\n     // ********************************************************* Step 6: network initialization\n@@ -1333,6 +1344,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (mapArgs.count(\"-blocknotify\"))\n         uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n \n+    if (mapArgs.count(\"-mempoolnotify\"))\n+        GetMainSignals().SyncTransaction.connect(MempoolNotifyCallback);\n+\n     // scan for better chains in the block chain database, that are not yet connected in the active best chain\n     CValidationState state;\n     if (!ActivateBestChain(state))"
      }
    ]
  }
]