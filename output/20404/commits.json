[
  {
    "sha": "8077dc3860b8b4269f0b7def616d0f8d41b84166",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDc3ZGMzODYwYjhiNDI2OWYwYjdkZWY2MTZkMGY4ZDQxYjg0MTY2",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T16:16:19Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:42:51Z"
      },
      "message": "Do not translate command line option names\n\nCommand line option name must not be a part of the translatable string,\nas it is untranslatable by its nature.",
      "tree": {
        "sha": "398b5fcbc13c81b5d6895e140803eef5e13e5c92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/398b5fcbc13c81b5d6895e140803eef5e13e5c92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8077dc3860b8b4269f0b7def616d0f8d41b84166",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl+yyCsACgkQQQEIES5+\nqB+RBg//YXQPUdG6qu9QpobNIbYqqxMO7+CLmKY6v7YdLb/Vs+CD13UcuAAzHzPL\nruTJ5VtKaxw1YEvJYz3YFdTvmFm2qvEZABmQO7HdaOhGbTryjiozIVQBh8ucy7b6\ncZLsZ50SA3qBuvuIHL5oqj2UigxUlfEFt5nVFNt4trJodmSbXgvKx2ASuzyzLaeo\nShOhR75lRTkMBNwCPSCdvqEVi+Ei6LAl5tAE84KdtNS+FXVyH+LjdxA+qSBqrMq5\nz6lnwt1IL4W/NLpl4vzJVazPsxRRIX8uibd2iu2PHj4Cl9wAx4bWF5vEFDJUD/9e\no6dPekndeMCRIV/JKcuuF3QnU+Wt1HXoeCBQHqtN6BlGTcXfZz4JuQ9KjnmYAxd9\niOp992plQ2jUshoKxx8HxoUO9ieJ5DUtsDDs7lYE4aTyVQWqHe3CjVIj1TiViqhY\nGtUEtWkN6jAo8/Uzz8Jk1SvhsDH2oe1tCD0B9ZKm5f3TEV/npKK+QXNNNX+voEkN\n1h0SM00pWYtv71yVArHyzdPOU+5Qx9x943i7xia3gopYDChSMqCqCB5ve877zn60\neILiBefl/T3qhwZQZJoUExg0YIipiNHD/FuzyAHHiKI570M/GDW8juhN9ALe2flp\n1CG2RJWO5u25SbFmdOvvM5+ZopvGm0LxpINPz8W7ssGNpPgoh54=\n=jT6m\n-----END PGP SIGNATURE-----",
        "payload": "tree 398b5fcbc13c81b5d6895e140803eef5e13e5c92\nparent c48e788246fcced78cb4eb1d4bd09cb41a9ff09b\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605543379 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605552171 +0200\n\nDo not translate command line option names\n\nCommand line option name must not be a part of the translatable string,\nas it is untranslatable by its nature.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8077dc3860b8b4269f0b7def616d0f8d41b84166",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8077dc3860b8b4269f0b7def616d0f8d41b84166",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8077dc3860b8b4269f0b7def616d0f8d41b84166/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c48e788246fcced78cb4eb1d4bd09cb41a9ff09b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c48e788246fcced78cb4eb1d4bd09cb41a9ff09b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c48e788246fcced78cb4eb1d4bd09cb41a9ff09b"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 46,
      "deletions": 40
    },
    "files": [
      {
        "sha": "e9a81ce202ac98b92621835fd998b97760d1a7c3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 23,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "patch": "@@ -1002,7 +1002,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         for (const auto& name : names) {\n             BlockFilterType filter_type;\n             if (!BlockFilterTypeByName(name, filter_type)) {\n-                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+                return InitError(strprintf(_(\"Unknown %s value %s.\"), \"-blockfilterindex\", name));\n             }\n             g_enabled_filter_types.insert(filter_type);\n         }\n@@ -1011,18 +1011,19 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     // Signal NODE_COMPACT_FILTERS if peerblockfilters and basic filters index are both enabled.\n     if (args.GetBoolArg(\"-peerblockfilters\", DEFAULT_PEERBLOCKFILTERS)) {\n         if (g_enabled_filter_types.count(BlockFilterType::BASIC) != 1) {\n-            return InitError(_(\"Cannot set -peerblockfilters without -blockfilterindex.\"));\n+            return InitError(strprintf(_(\"Cannot set %s without %s.\"), \"-peerblockfilters\", \"-blockfilterindex\"));\n         }\n \n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n     // if using block pruning, then disallow txindex\n     if (args.GetArg(\"-prune\", 0)) {\n-        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n+            return InitError(strprintf(_(\"Prune mode is incompatible with %s.\"), \"-txindex\"));\n+        }\n         if (!g_enabled_filter_types.empty()) {\n-            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+            return InitError(strprintf(_(\"Prune mode is incompatible with %s.\"), \"-blockfilterindex\"));\n         }\n     }\n \n@@ -1046,12 +1047,14 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     int fd_max = FD_SETSIZE;\n #endif\n     nMaxConnections = std::max(std::min<int>(nMaxConnections, fd_max - nBind - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS), 0);\n-    if (nFD < MIN_CORE_FILEDESCRIPTORS)\n+    if (nFD < MIN_CORE_FILEDESCRIPTORS) {\n         return InitError(_(\"Not enough file descriptors available.\"));\n-    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n+    }\n \n-    if (nMaxConnections < nUserMaxConnections)\n-        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n+    nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n+    if (nMaxConnections < nUserMaxConnections) {\n+        InitWarning(strprintf(_(\"Reducing %s from %d to %d, because of system limitations.\"), \"-maxconnections\", nUserMaxConnections, nMaxConnections));\n+    }\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n     if (args.IsArgSet(\"-debug\")) {\n@@ -1101,8 +1104,9 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     // mempool limits\n     int64_t nMempoolSizeMax = args.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = args.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n-    if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin)\n-        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), std::ceil(nMempoolSizeMin / 1000000.0)));\n+    if (nMempoolSizeMax < 0 || nMempoolSizeMax < nMempoolSizeMin) {\n+        return InitError(strprintf(_(\"%s must be at least %d MB.\"), \"-maxmempool\", std::ceil(nMempoolSizeMin / 1000000.0)));\n+    }\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (args.IsArgSet(\"-incrementalrelayfee\")) {\n@@ -1197,7 +1201,7 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     nMaxTipAge = args.GetArg(\"-maxtipage\", DEFAULT_MAX_TIP_AGE);\n \n     if (args.IsArgSet(\"-proxy\") && args.GetArg(\"-proxy\", \"\").empty()) {\n-        return InitError(_(\"No proxy server specified. Use -proxy=<ip> or -proxy=<ip:port>.\"));\n+        return InitError(strprintf(_(\"No proxy server specified. Use %s or %s.\"), \"-proxy=<ip>\", \"-proxy=<ip:port>\"));\n     }\n \n     return true;\n@@ -1416,16 +1420,16 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n-            strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n+        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of %s.\"),\n+            strSubVersion.size(), MAX_SUBVERSION_LENGTH, \"-uacomment\"));\n     }\n \n     if (args.IsArgSet(\"-onlynet\")) {\n         std::set<enum Network> nets;\n         for (const std::string& snet : args.GetArgs(\"-onlynet\")) {\n             enum Network net = ParseNetwork(snet);\n             if (net == NET_UNROUTABLE)\n-                return InitError(strprintf(_(\"Unknown network specified in -onlynet: '%s'\"), snet));\n+                return InitError(strprintf(_(\"Unknown network specified in %s: '%s'\"), \"-onlynet\", snet));\n             nets.insert(net);\n         }\n         for (int n = 0; n < NET_MAX; n++) {\n@@ -1446,12 +1450,13 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n         if (!Lookup(proxyArg, proxyAddr, 9050, fNameLookup)) {\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+            return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-proxy\", proxyArg));\n         }\n \n         proxyType addrProxy = proxyType(proxyAddr, proxyRandomize);\n-        if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\"), proxyArg));\n+        if (!addrProxy.IsValid()) {\n+            return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-proxy\", proxyArg));\n+        }\n \n         SetProxy(NET_IPV4, addrProxy);\n         SetProxy(NET_IPV6, addrProxy);\n@@ -1470,11 +1475,12 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         } else {\n             CService onionProxy;\n             if (!Lookup(onionArg, onionProxy, 9050, fNameLookup)) {\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+                return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-onion\", onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n-            if (!addrOnion.IsValid())\n-                return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\"), onionArg));\n+            if (!addrOnion.IsValid()) {\n+                return InitError(strprintf(_(\"Invalid %s address or hostname: '%s'\"), \"-onion\", onionArg));\n+            }\n             SetProxy(NET_ONION, addrOnion);\n             SetReachable(NET_ONION, true);\n         }\n@@ -1623,7 +1629,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n                 // Check for changed -prune state.  What we are concerned about is a user who has pruned blocks\n                 // in the past, but is now trying to run unpruned.\n                 if (fHavePruned && !fPruneMode) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex to go back to unpruned mode.  This will redownload the entire blockchain\");\n+                    strLoadError = strprintf(_(\"You need to rebuild the database using %s to go back to unpruned mode. This will redownload the entire block chain.\"), \"-reindex\");\n                     break;\n                 }\n \n@@ -1663,7 +1669,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n \n                     // ReplayBlocks is a no-op if we cleared the coinsviewdb with -reindex or -reindex-chainstate\n                     if (!chainstate->ReplayBlocks(chainparams)) {\n-                        strLoadError = _(\"Unable to replay blocks. You will need to rebuild the database using -reindex-chainstate.\");\n+                        strLoadError = strprintf(_(\"Unable to replay blocks. You will need to rebuild the database using %s.\"), \"-reindex-chainstate\");\n                         failed_chainstate_init = true;\n                         break;\n                     }"
      },
      {
        "sha": "25e8e8f05df6cea92d75654e2bab3be69ae5729f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "patch": "@@ -2459,7 +2459,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     if (fListen && !InitBinds(connOptions.vBinds, connOptions.vWhiteBinds, connOptions.onion_binds)) {\n         if (clientInterface) {\n             clientInterface->ThreadSafeMessageBox(\n-                _(\"Failed to listen on any port. Use -listen=0 if you want this.\"),\n+                strprintf(_(\"Failed to listen on any port. Use %s if you want this.\"), \"-listen=0\"),\n                 \"\", CClientUIInterface::MSG_ERROR);\n         }\n         return false;"
      },
      {
        "sha": "f0cee9550dd77f05f26577573110459a44b83257",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "patch": "@@ -94,7 +94,7 @@ bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermis\n         return false;\n     }\n     if (addrBind.GetPort() == 0) {\n-        error = strprintf(_(\"Need to specify a port with -whitebind: '%s'\"), strBind);\n+        error = strprintf(_(\"Need to specify a port with %s: '%s'\"), \"-whitebind\", strBind);\n         return false;\n     }\n \n@@ -114,7 +114,7 @@ bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermis\n     CSubNet subnet;\n     LookupSubNet(net, subnet);\n     if (!subnet.IsValid()) {\n-        error = strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\"), net);\n+        error = strprintf(_(\"Invalid netmask specified in %s: '%s'\"), \"-whitelist\", net);\n         return false;\n     }\n "
      },
      {
        "sha": "76e1ce2676b9a62af4a95bab324177f0a2b5e046",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "patch": "@@ -24,14 +24,14 @@ bool VerifyWallets(interfaces::Chain& chain)\n         // The canonical path cleans the path, preventing >1 Berkeley environment instances for the same directory\n         fs::path canonical_wallet_dir = fs::canonical(wallet_dir, error);\n         if (error || !fs::exists(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified %s \\\"%s\\\" does not exist\"), \"-walletdir\", wallet_dir.string()));\n             return false;\n         } else if (!fs::is_directory(wallet_dir)) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified %s \\\"%s\\\" is not a directory\"), \"-walletdir\", wallet_dir.string()));\n             return false;\n         // The canonical path transforms relative paths into absolute ones, so we check the non-canonical version\n         } else if (!wallet_dir.is_absolute()) {\n-            chain.initError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n+            chain.initError(strprintf(_(\"Specified %s \\\"%s\\\" is a relative path\"), \"-walletdir\", wallet_dir.string()));\n             return false;\n         }\n         gArgs.ForceSetArg(\"-walletdir\", canonical_wallet_dir.string());\n@@ -65,7 +65,7 @@ bool VerifyWallets(interfaces::Chain& chain)\n         const fs::path path = fs::absolute(wallet_file, GetWalletDir());\n \n         if (!wallet_paths.insert(path).second) {\n-            chain.initWarning(strprintf(_(\"Ignoring duplicate -wallet %s.\"), wallet_file));\n+            chain.initWarning(strprintf(_(\"Ignoring duplicate %s %s.\"), \"-wallet\", wallet_file));\n             continue;\n         }\n "
      },
      {
        "sha": "9be5a2268f3ba9a210dc2837b04ab3f13e254361",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8077dc3860b8b4269f0b7def616d0f8d41b84166/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "patch": "@@ -2961,7 +2961,7 @@ bool CWallet::CreateTransactionInternal(\n                 nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                    error = strprintf(_(\"Fee estimation failed. %s is disabled. Wait a few blocks or enable %s.\"), \"-fallbackfee\", \"-fallbackfee\");\n                     return false;\n                 }\n \n@@ -3920,7 +3920,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\"));\n+            error = strprintf(_(\"Invalid amount for %s=<amount>: '%s'\"), \"-fallbackfee\", gArgs.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n@@ -3935,7 +3935,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\"));\n+            error = strprintf(_(\"Invalid amount for %s=<amount>: '%s'\"), \"-discardfee\", gArgs.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n@@ -3956,8 +3956,8 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n-            error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n+            error = strprintf(_(\"Invalid amount for %s=<amount>: '%s' (must be at least %s).\"),\n+                \"-paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n     }\n@@ -3969,11 +3969,11 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             return nullptr;\n         }\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n-            warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+            warnings.push_back(strprintf(_(\"%s is set very high! Fees this large could be paid on a single transaction.\"), \"-maxtxfee\"));\n         }\n         if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n-            error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n+            error = strprintf(_(\"Invalid amount for %s=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions).\"),\n+                \"-maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n         walletInstance->m_default_max_tx_fee = nMaxFee;\n@@ -4041,7 +4041,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             }\n \n             if (rescan_height != block_height) {\n-                error = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n+                error = strprintf(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to %s (download the whole block chain again in case of pruned node).\"), \"-reindex\");\n                 return nullptr;\n             }\n         }"
      },
      {
        "sha": "5e8552f815f8bad3b5f528695187e717b873d093",
        "filename": "test/functional/feature_uacomment.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8077dc3860b8b4269f0b7def616d0f8d41b84166/test/functional/feature_uacomment.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8077dc3860b8b4269f0b7def616d0f8d41b84166/test/functional/feature_uacomment.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_uacomment.py?ref=8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "patch": "@@ -27,7 +27,7 @@ def run_test(self):\n \n         self.log.info(\"test -uacomment max length\")\n         self.stop_node(0)\n-        expected = r\"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of uacomments.\"\n+        expected = r\"Error: Total length of network version string \\([0-9]+\\) exceeds maximum length \\(256\\). Reduce the number or size of -uacomment.\"\n         self.nodes[0].assert_start_raises_init_error([\"-uacomment=\" + 'a' * 256], expected, match=ErrorMatch.FULL_REGEX)\n \n         self.log.info(\"test -uacomment unsafe characters\")"
      }
    ]
  },
  {
    "sha": "229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjlmNDVmMTcyZDFjZjA0ZWQ3ZmM4ZTNlYzkyMWEyZGYzZDc2NzBh",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T17:52:23Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:42:54Z"
      },
      "message": "Do not translate RPC names\n\nRPC name must not be a part of the translatable string, as it is\nuntranslatable by its nature.",
      "tree": {
        "sha": "c8386297659bb43359ee4e4f764bd072cbef25d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8386297659bb43359ee4e4f764bd072cbef25d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl+yyC4ACgkQQQEIES5+\nqB+WNA/9Gc0ZuUyOlzKJy/KMHFULGIFdKI1pMhl5ETTWSg/TOv7p5f9aro8E5fjt\nBBX5MwZ/AOM2v7lRh+1pDePg+20lentXkDoRfJ56IGQTZELAZ50timMozBad958z\nliBJzTWwmalFB7jkabEqgNS+cewMb+3A0XLTcHNrulh0paCU2GgJ+oHtZSfGoQM8\n0ZW0mQuTnHx0KSYPcQGaP7Wwv1XtUazHqHwUivh5sc15IcPZ6FCBzdW2L3GgH9PM\ne5qbNUS68hne6baih63qxrP7IBCdZCCdw+YtaqLBnZNb0XKxb9bK7aqjfXWjBPRF\nqnWeQBp1XIAdSrZhEdtuhROntycFTMDu5lctleNlfMC7BH7rgyuJ9PbfKclGG3cU\ngtMAsxHTUp1MQXdGxQJSu6s6K5JSrAxix0GzqP1clOKGvcoElxQ7scz49XbduNeh\np9cb50+f8eUjvTCG30UFo7FRJ5TuKIhp5i4dDDAN7VubKE2HqHQbCDg+1+BavKW1\ngJKQkQbYxvyjSYG26cKye6QQlJAZER3ZTt6vvqZsxqEJY6aYmxJPAWL0sHSGBqwZ\nofqQeyNNW26+7iuwY5g6qfey78u8GTFjnxTt8s89NMXlK4YHfeoGG5WxacsdVPuT\n7xj/OjQVSbtlDtTpFlxVMe7N8cUplj5BOZMeOZElFzmAzC0f3Hw=\n=SZ5x\n-----END PGP SIGNATURE-----",
        "payload": "tree c8386297659bb43359ee4e4f764bd072cbef25d6\nparent 8077dc3860b8b4269f0b7def616d0f8d41b84166\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605549143 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605552174 +0200\n\nDo not translate RPC names\n\nRPC name must not be a part of the translatable string, as it is\nuntranslatable by its nature.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8077dc3860b8b4269f0b7def616d0f8d41b84166",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8077dc3860b8b4269f0b7def616d0f8d41b84166"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "add73905bc4f09c11bdaef7c4b26cb879c635c3f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
        "patch": "@@ -23,7 +23,7 @@ bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestinat\n     // Generate a new key that is added to wallet\n     CPubKey new_key;\n     if (!GetKeyFromPool(new_key, type)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+        error = strprintf(_(\"Error: Keypool ran out, please call %s first\"), \"keypoolrefill\").translated;\n         return false;\n     }\n     LearnRelatedScripts(new_key, type);"
      },
      {
        "sha": "047b8aa755ebddcf507f022ba91f5e63ce9a4011",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
        "patch": "@@ -2800,7 +2800,7 @@ bool CWallet::CreateTransactionInternal(\n                 // destination in case we don't need change.\n                 CTxDestination dest;\n                 if (!reservedest.GetReservedDestination(dest, true)) {\n-                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n+                    error = strprintf(_(\"Transaction needs a change address, but we can't generate it. Please call %s first.\"), \"keypoolrefill\");\n                 }\n                 scriptChange = GetScriptForDestination(dest);\n                 // A valid destination implies a change script (and\n@@ -3346,7 +3346,7 @@ bool CWallet::GetNewChangeDestination(const OutputType type, CTxDestination& des\n \n     ReserveDestination reservedest(this, type);\n     if (!reservedest.GetReservedDestination(dest, true)) {\n-        error = _(\"Error: Keypool ran out, please call keypoolrefill first\").translated;\n+        error = strprintf(_(\"Error: Keypool ran out, please call %s first\"), \"keypoolrefill\").translated;\n         return false;\n     }\n "
      }
    ]
  },
  {
    "sha": "7d7c5a4b79ac311be93f2666de1247b280f0ff78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDdjNWE0Yjc5YWMzMTFiZTkzZjI2NjZkZTEyNDdiMjgwZjBmZjc4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:11:50Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:42:54Z"
      },
      "message": "Do not translate debug log file name",
      "tree": {
        "sha": "dcaf02fa77bcbeb1f555060169d3171e340ce102",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcaf02fa77bcbeb1f555060169d3171e340ce102"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d7c5a4b79ac311be93f2666de1247b280f0ff78",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl+yyC4ACgkQQQEIES5+\nqB9tBQ//cS6yc43ZKLB20kueOnFeZofbQmQJYg9knwEm9pK3+F3gf48HrDSbE6QI\nAisi5HE4q6yDMWB/onjufAF9Qfkozuu+towYCoADGFDERltMGS9UJ5imd4sg+282\nOqtn77pT1lP0PlWBiw3HmJlehD+Fzew/DK9wPVF+jp90EsRZTbgRUYIH8anWxuUq\nO+2sWZU+ZaL7UuG7vX/KKp4HpWBU/v3NEU5jHXu6doPOO0EdzsWA4z4dX664+O3M\nQV6fudYC1F2g5OYWXHKeq0MkCT4o8YijwakjoC0/P/ra3sN2M4bdsyXjoncHbyDv\nAbse/+Nx7oNA9ShAbRuV7zm10+TAelS+fq3GOHA1qlBxjx9IQjaRdHZH+lGwRfOn\nYHo5re7UuKWt/XReVf3cZQOcPm/nYc0d/v1bLomLPCDWcqX++/h7wt2b+40m3s+p\nK++pYBzRDYsVMzlWxTwD/pk7lX9+H0tHJy9N/3NKR+dwXlxg2jpSgBuxtOhQ0psR\nkV6PV8xVVN9CGS7JRDmI10qSSMhq01mKWWXs2csslbXantoH6UW0bZr9siN7veVU\n+saXWl/BG3Q6bdSLZ59mV8qfxPx3VQvoLCbkPg7bErY3E9UCD1zvGag+nXqGJxY2\njOsYw6k7aW8yAzdKUuXNF5KsaWh24me8Kg97YEeVWTpBR8IPHHU=\n=3TND\n-----END PGP SIGNATURE-----",
        "payload": "tree dcaf02fa77bcbeb1f555060169d3171e340ce102\nparent 229f45f172d1cf04ed7fc8e3ec921a2df3d7670a\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605550310 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605552174 +0200\n\nDo not translate debug log file name\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d7c5a4b79ac311be93f2666de1247b280f0ff78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d7c5a4b79ac311be93f2666de1247b280f0ff78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d7c5a4b79ac311be93f2666de1247b280f0ff78/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/229f45f172d1cf04ed7fc8e3ec921a2df3d7670a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2985365125e3accfcf1de3365c0262888de5d524",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d7c5a4b79ac311be93f2666de1247b280f0ff78/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d7c5a4b79ac311be93f2666de1247b280f0ff78/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=7d7c5a4b79ac311be93f2666de1247b280f0ff78",
        "patch": "@@ -23,7 +23,7 @@ static void FatalError(const char* fmt, const Args&... args)\n     std::string strMessage = tfm::format(fmt, args...);\n     SetMiscWarning(Untranslated(strMessage));\n     LogPrintf(\"*** %s\\n\", strMessage);\n-    AbortError(_(\"A fatal internal error occurred, see debug.log for details\"));\n+    AbortError(strprintf(_(\"A fatal internal error occurred, see %s for details.\"), gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE)));\n     StartShutdown();\n }\n "
      },
      {
        "sha": "f0dd0d2b6539ba86b6cdac2b2667ac4f17455edf",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d7c5a4b79ac311be93f2666de1247b280f0ff78/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d7c5a4b79ac311be93f2666de1247b280f0ff78/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7d7c5a4b79ac311be93f2666de1247b280f0ff78",
        "patch": "@@ -1662,7 +1662,7 @@ static bool AbortNode(const std::string& strMessage, bilingual_str user_message\n     SetMiscWarning(Untranslated(strMessage));\n     LogPrintf(\"*** %s\\n\", strMessage);\n     if (user_message.empty()) {\n-        user_message = _(\"A fatal internal error occurred, see debug.log for details\");\n+        user_message = strprintf(_(\"A fatal internal error occurred, see %s for details.\"), gArgs.GetArg(\"-debuglogfile\", DEFAULT_DEBUGLOGFILE));\n     }\n     AbortError(user_message);\n     StartShutdown();"
      }
    ]
  },
  {
    "sha": "274078b4d38db2bdcf3c432de4e57ff1f7af16a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzQwNzhiNGQzOGRiMmJkY2YzYzQzMmRlNGU1N2ZmMWY3YWYxNmE0",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:18:06Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:42:54Z"
      },
      "message": "Drop unneeded '\\n' from translatable string",
      "tree": {
        "sha": "4be2de9233af59042e6fe8dcd1570f3224fd493c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4be2de9233af59042e6fe8dcd1570f3224fd493c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/274078b4d38db2bdcf3c432de4e57ff1f7af16a4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl+yyC4ACgkQQQEIES5+\nqB/QSQ//Vz6V8AyPW0UAwHFmSwtwLdZ48EzAesyX4n8NJU/4RAKOAI8LgIthnpIN\n2yRyG+7GV08lcGcAwYE/7K/ZRa5mF7JNNcMxeVi5f+Vx18qqUHnsidR0JgsCUWZ8\nkmfb2iVh+q03ejCpH+6E+8tM/k7/ri/pV9JuPwFTD7vTxwIaDU1dehhBQtYpGOu8\nbsq5gecO4k9aEeK/YwagyCWk0pC2jQ+bWCsn0ym+9MV5eAVNw8Ddk7H08EXHYTZ6\n3zTYX+97xAW6wtmd55WbePNpJcJu7YB3jpxpgP3G8Uaj7Jp83PM1vT7QxVBcvF26\nAFMFi3aVmdTgz+X7xuuZPP0e5EwG0D9ElsztZuG86t+FhmEdKrqBIYShwXsmsre9\noMkSmTNkvxVHAvFygbJX2bYWK7i8dkUaYvqWhGQpUPlMxWcqRVZPHZfTv/JRXnk/\ndNcJmJLplysLiAx/5krZ6rcmrvjUFk9OQXtSd65kFUaKXMkhouG+c5Mu98912MPw\nXAp7z+8MRGfru3p1L5Uqwx/DvltEn0zYBOp7QVgjWdFTc76MsNj1MJZLv6v5vM5w\nsHMz/opaWdQm05/Ghr8G7F0GQoDBWiWciis616AYeCDyNvq4UF9T879CqmdwNpEl\nm/weLXPKeuSDdf6ak39ljfoFQMLvb7h2m/vXGD5sGeuQfmRsS04=\n=u42V\n-----END PGP SIGNATURE-----",
        "payload": "tree 4be2de9233af59042e6fe8dcd1570f3224fd493c\nparent 7d7c5a4b79ac311be93f2666de1247b280f0ff78\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605550686 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605552174 +0200\n\nDrop unneeded '\\n' from translatable string\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/274078b4d38db2bdcf3c432de4e57ff1f7af16a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/274078b4d38db2bdcf3c432de4e57ff1f7af16a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/274078b4d38db2bdcf3c432de4e57ff1f7af16a4/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d7c5a4b79ac311be93f2666de1247b280f0ff78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d7c5a4b79ac311be93f2666de1247b280f0ff78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d7c5a4b79ac311be93f2666de1247b280f0ff78"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b584fa683ea078eb06e6c02672f8fa38a256b5ba",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/274078b4d38db2bdcf3c432de4e57ff1f7af16a4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/274078b4d38db2bdcf3c432de4e57ff1f7af16a4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=274078b4d38db2bdcf3c432de4e57ff1f7af16a4",
        "patch": "@@ -1296,7 +1296,7 @@ bool AppInitMain(const util::Ref& context, NodeContext& node, interfaces::BlockA\n         LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n     } else if (args.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n-        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n+        InitWarning(strprintf(_(\"The specified config file %s does not exist.\"), config_file_path.string()));\n     } else {\n         // Not categorizing as \"Warning\" because it's the default behavior\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());"
      }
    ]
  },
  {
    "sha": "c20e3db81a374084d0cab299339609a39e6b4e9b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjBlM2RiODFhMzc0MDg0ZDBjYWIyOTkzMzk2MDlhMzllNmI0ZTli",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:35:49Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-11-16T18:46:14Z"
      },
      "message": "doc: Update Translation Strings Policy\n\nAdded requirement to do not translate names.",
      "tree": {
        "sha": "ff0b12086952baa2a68217837e6f878d4043d4b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff0b12086952baa2a68217837e6f878d4043d4b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c20e3db81a374084d0cab299339609a39e6b4e9b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl+yyPYACgkQQQEIES5+\nqB/eWg/+JkSRU2Asku4WgyIVV1zbMtMdlrfPe1xRYKJdTqJ4zGXpX9rbX2TivPrE\ngzwrPWwPSnX3IUQhzzKx3fXwOpUX5hlo85J3Y0nXi28HdduIobbqHrS88HPfqzqU\nOMJQHnESI1qOC+0EtIYt14E5Z2HiBUjvX7HCiauUeKCOtwqCkasD63i1Q5CeV3Ga\nvkTAd8vjqgnid+7HtHl1gLTstrSUN9y3qRMvkqU6f0Hq+NzBakIox1UZOE8aFJAp\nWG1Im9vXSTW/kAR7tKdgO0ydyrzi2tzds59c2MreE2xg6QDZH5W6t+BWyICzmTGq\nkpjhl2S/3OSsiBFUlqjUJQNtJ1LTZcCKV2sPpb/37OH4F3+1Ahri0ZKHNyb/OV/3\nPdjrneWdvS1Nmd+1UYM911jJh1DTzaob1nKTl0Os8m2rImKIZMUyMS1NuA3u6TD9\nVtVXf/JY7x+r0baJPqZlAeF2whA1jPcpdEViCyCZW6fVXxR+7hCDMetpMpFgXQpC\n/t4vczOjrRPWu22YcWTWpKNaMV1BuLFv42X9vVS8PXR2XSVmz+LVCkkcqJK5DdvM\nzp1tsH3UVzKQ2P9BVqRPi8ubvEMj4WkOXsRCivSLOQjvGjOsNUQ72OFBVvTUYKBX\nqFwcmMEN9w4XMJtIMf1wh9mI/KVGPReOtYBiw0tfyWyrAFioCVY=\n=JxeX\n-----END PGP SIGNATURE-----",
        "payload": "tree ff0b12086952baa2a68217837e6f878d4043d4b2\nparent 274078b4d38db2bdcf3c432de4e57ff1f7af16a4\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605551749 +0200\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1605552374 +0200\n\ndoc: Update Translation Strings Policy\n\nAdded requirement to do not translate names.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c20e3db81a374084d0cab299339609a39e6b4e9b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c20e3db81a374084d0cab299339609a39e6b4e9b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c20e3db81a374084d0cab299339609a39e6b4e9b/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "274078b4d38db2bdcf3c432de4e57ff1f7af16a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/274078b4d38db2bdcf3c432de4e57ff1f7af16a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/274078b4d38db2bdcf3c432de4e57ff1f7af16a4"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "663173045daa051abd57e97c43fa4ec44aafccad",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c20e3db81a374084d0cab299339609a39e6b4e9b/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c20e3db81a374084d0cab299339609a39e6b4e9b/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=c20e3db81a374084d0cab299339609a39e6b4e9b",
        "patch": "@@ -30,6 +30,15 @@ This includes messages passed to the GUI through the UI interface through `InitM\n General recommendations\n ------------------------\n \n+### Do not translate names\n+\n+The following tokens must not be parts of the strings are to be translated:\n+- command line option names\n+- RPC names\n+- file names\n+\n+Use `%s` substitution, e.g., `strprintf(_(\"Unknown %s value %s.\"), \"-blockfilterindex\", name)`.\n+\n ### Avoid unnecessary translation strings\n \n Try not to burden translators with translating messages that are e.g. slight variations of other messages."
      }
    ]
  }
]