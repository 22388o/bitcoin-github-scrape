[
  {
    "sha": "086da92ea772b70d460993ada0e068d139beddd6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODZkYTkyZWE3NzJiNzBkNDYwOTkzYWRhMGUwNjhkMTM5YmVkZGQ2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-02-16T17:10:12Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-02-16T17:35:16Z"
      },
      "message": "Add tags to mempool's mapTx indices",
      "tree": {
        "sha": "0af4c85989c7772978ce4b7a1d4e27865685767d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0af4c85989c7772978ce4b7a1d4e27865685767d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/086da92ea772b70d460993ada0e068d139beddd6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/086da92ea772b70d460993ada0e068d139beddd6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/086da92ea772b70d460993ada0e068d139beddd6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/086da92ea772b70d460993ada0e068d139beddd6/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b70a64d62c6e64288762d062414cc979f880c54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b70a64d62c6e64288762d062414cc979f880c54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b70a64d62c6e64288762d062414cc979f880c54"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 24,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9281f7285cf848bfcf5890c8620d99046a5e54c5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/086da92ea772b70d460993ada0e068d139beddd6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/086da92ea772b70d460993ada0e068d139beddd6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=086da92ea772b70d460993ada0e068d139beddd6",
        "patch": "@@ -155,10 +155,10 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n             std::make_heap(vecPriority.begin(), vecPriority.end(), pricomparer);\n         }\n \n-        CTxMemPool::indexed_transaction_set::nth_index<3>::type::iterator mi = mempool.mapTx.get<3>().begin();\n+        CTxMemPool::indexed_transaction_set::index<mining_score>::type::iterator mi = mempool.mapTx.get<mining_score>().begin();\n         CTxMemPool::txiter iter;\n \n-        while (mi != mempool.mapTx.get<3>().end() || !clearedTxs.empty())\n+        while (mi != mempool.mapTx.get<mining_score>().end() || !clearedTxs.empty())\n         {\n             bool priorityTx = false;\n             if (fPriorityBlock && !vecPriority.empty()) { // add a tx from priority queue to fill the blockprioritysize"
      },
      {
        "sha": "fa352ace8f951e7bfb5f1b77f99fa1640614d80e",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/086da92ea772b70d460993ada0e068d139beddd6/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/086da92ea772b70d460993ada0e068d139beddd6/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=086da92ea772b70d460993ada0e068d139beddd6",
        "patch": "@@ -102,13 +102,13 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     removed.clear();\n }\n \n-template<int index>\n+template<typename name>\n void CheckSort(CTxMemPool &pool, std::vector<std::string> &sortedOrder)\n {\n     BOOST_CHECK_EQUAL(pool.size(), sortedOrder.size());\n-    typename CTxMemPool::indexed_transaction_set::nth_index<index>::type::iterator it = pool.mapTx.get<index>().begin();\n+    typename CTxMemPool::indexed_transaction_set::index<name>::type::iterator it = pool.mapTx.get<name>().begin();\n     int count=0;\n-    for (; it != pool.mapTx.get<index>().end(); ++it, ++count) {\n+    for (; it != pool.mapTx.get<name>().end(); ++it, ++count) {\n         BOOST_CHECK_EQUAL(it->GetTx().GetHash().ToString(), sortedOrder[count]);\n     }\n }\n@@ -164,7 +164,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n-    CheckSort<1>(pool, sortedOrder);\n+    CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n     /* tx6 -> tx7 -> tx8, tx9 -> tx10 */\n@@ -176,7 +176,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n-    CheckSort<1>(pool, sortedOrder);\n+    CheckSort<descendant_score>(pool, sortedOrder);\n \n     CTxMemPool::setEntries setAncestors;\n     setAncestors.insert(pool.mapTx.find(tx6.GetHash()));\n@@ -202,7 +202,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.erase(sortedOrder.begin());\n     sortedOrder.push_back(tx6.GetHash().ToString());\n     sortedOrder.push_back(tx7.GetHash().ToString());\n-    CheckSort<1>(pool, sortedOrder);\n+    CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx8 = CMutableTransaction();\n@@ -217,7 +217,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n-    CheckSort<1>(pool, sortedOrder);\n+    CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n     CMutableTransaction tx9 = CMutableTransaction();\n@@ -232,7 +232,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n     sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n-    CheckSort<1>(pool, sortedOrder);\n+    CheckSort<descendant_score>(pool, sortedOrder);\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n \n@@ -274,15 +274,15 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.insert(sortedOrder.begin()+5, tx9.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+6, tx8.GetHash().ToString());\n     sortedOrder.insert(sortedOrder.begin()+7, tx10.GetHash().ToString()); // tx10 is just before tx6\n-    CheckSort<1>(pool, sortedOrder);\n+    CheckSort<descendant_score>(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool\n     BOOST_CHECK_EQUAL(pool.size(), 10);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n     std::list<CTransaction> removed;\n     pool.remove(pool.mapTx.find(tx10.GetHash())->GetTx(), removed, true);\n-    CheckSort<1>(pool, snapshotOrder);\n+    CheckSort<descendant_score>(pool, snapshotOrder);\n \n     pool.remove(pool.mapTx.find(tx9.GetHash())->GetTx(), removed, true);\n     pool.remove(pool.mapTx.find(tx8.GetHash())->GetTx(), removed, true);\n@@ -314,7 +314,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n         sortedOrder.push_back(tx3.GetHash().ToString());\n         sortedOrder.push_back(tx6.GetHash().ToString());\n     }\n-    CheckSort<3>(pool, sortedOrder);\n+    CheckSort<mining_score>(pool, sortedOrder);\n }\n \n "
      },
      {
        "sha": "eee6cbf8552a52297ce617874044ed483d8614e5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/086da92ea772b70d460993ada0e068d139beddd6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/086da92ea772b70d460993ada0e068d139beddd6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=086da92ea772b70d460993ada0e068d139beddd6",
        "patch": "@@ -859,9 +859,9 @@ void CTxMemPool::RemoveStaged(setEntries &stage) {\n \n int CTxMemPool::Expire(int64_t time) {\n     LOCK(cs);\n-    indexed_transaction_set::nth_index<2>::type::iterator it = mapTx.get<2>().begin();\n+    indexed_transaction_set::index<entry_time>::type::iterator it = mapTx.get<entry_time>().begin();\n     setEntries toremove;\n-    while (it != mapTx.get<2>().end() && it->GetTime() < time) {\n+    while (it != mapTx.get<entry_time>().end() && it->GetTime() < time) {\n         toremove.insert(mapTx.project<0>(it));\n         it++;\n     }\n@@ -957,7 +957,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n     unsigned nTxnRemoved = 0;\n     CFeeRate maxFeeRateRemoved(0);\n     while (DynamicMemoryUsage() > sizelimit) {\n-        indexed_transaction_set::nth_index<1>::type::iterator it = mapTx.get<1>().begin();\n+        indexed_transaction_set::index<descendant_score>::type::iterator it = mapTx.get<descendant_score>().begin();\n \n         // We set the new mempool min fee to the feerate of the removed set, plus the\n         // \"minimum reasonable fee rate\" (ie some value under which we consider txn"
      },
      {
        "sha": "7a2a1ef432153236f38c58c06dbd0d15f7ffbee5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/086da92ea772b70d460993ada0e068d139beddd6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/086da92ea772b70d460993ada0e068d139beddd6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=086da92ea772b70d460993ada0e068d139beddd6",
        "patch": "@@ -228,6 +228,11 @@ class CompareTxMemPoolEntryByEntryTime\n     }\n };\n \n+// Multi_index tag names\n+struct descendant_score {};\n+struct entry_time {};\n+struct mining_score {};\n+\n class CBlockPolicyEstimator;\n \n /** An inpoint - a combination of a transaction and an index n into its vin */\n@@ -350,16 +355,19 @@ class CTxMemPool\n             boost::multi_index::ordered_unique<mempoolentry_txid>,\n             // sorted by fee rate\n             boost::multi_index::ordered_non_unique<\n+                boost::multi_index::tag<descendant_score>,\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByDescendantScore\n             >,\n             // sorted by entry time\n             boost::multi_index::ordered_non_unique<\n+                boost::multi_index::tag<entry_time>,\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByEntryTime\n                 >,\n             // sorted by score (for mining prioritization)\n             boost::multi_index::ordered_unique<\n+                boost::multi_index::tag<mining_score>,\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByScore\n             >"
      }
    ]
  }
]