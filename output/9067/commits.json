[
  {
    "sha": "bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDBkZTEzODZlMWM3ZjliODc1ZDUyMjkwZGUwZDU2MWM4ZDU2YmM5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-02T18:59:09Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-04T15:40:33Z"
      },
      "message": "Fix exit codes:\n- `--help`, `--version` etc should exit with `0` i.e. no error (\"not enough args\" case should still trigger an error)\n- error reading config file should exit with `1`\n\nSlightly refactor AppInitRPC/AppInitRawTx to return standard exit codes (EXIT_FAILURE/EXIT_SUCCESS) or CONTINUE_EXECUTION (-1)",
      "tree": {
        "sha": "d56a36399bb9fe64e9cd22e98ce31bc90fa19b40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d56a36399bb9fe64e9cd22e98ce31bc90fa19b40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 37,
      "deletions": 17
    },
    "files": [
      {
        "sha": "380b8dadd723b11e3f9b14254eaa209ce239b360",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 9,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
        "patch": "@@ -28,6 +28,7 @@ using namespace std;\n \n static const char DEFAULT_RPCCONNECT[] = \"127.0.0.1\";\n static const int DEFAULT_HTTP_CLIENT_TIMEOUT=900;\n+static const int CONTINUE_EXECUTION=-1;\n \n std::string HelpMessageCli()\n {\n@@ -67,7 +68,11 @@ class CConnectionFailed : public std::runtime_error\n \n };\n \n-static bool AppInitRPC(int argc, char* argv[])\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitRPC(int argc, char* argv[])\n {\n     //\n     // Parameters\n@@ -85,31 +90,35 @@ static bool AppInitRPC(int argc, char* argv[])\n         }\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n-        return false;\n+        if (argc < 2) {\n+            fprintf(stderr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n     }\n     if (!boost::filesystem::is_directory(GetDataDir(false))) {\n         fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n     try {\n         ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(ChainNameFromCommandLine());\n     } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n-        return false;\n+        return EXIT_FAILURE;\n     }\n     if (GetBoolArg(\"-rpcssl\", false))\n     {\n         fprintf(stderr, \"Error: SSL mode for RPC (-rpcssl) is no longer supported.\\n\");\n-        return false;\n+        return EXIT_FAILURE;\n     }\n-    return true;\n+    return CONTINUE_EXECUTION;\n }\n \n \n@@ -354,8 +363,9 @@ int main(int argc, char* argv[])\n     }\n \n     try {\n-        if(!AppInitRPC(argc, argv))\n-            return EXIT_FAILURE;\n+        int ret = AppInitRPC(argc, argv);\n+        if (ret != CONTINUE_EXECUTION)\n+            return ret;\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitRPC()\");"
      },
      {
        "sha": "ecc19c44ad6e356f413bad10f3c0a72857bfb5c2",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
        "patch": "@@ -30,8 +30,13 @@ using namespace std;\n \n static bool fCreateBlank;\n static map<string,UniValue> registers;\n+static const int CONTINUE_EXECUTION=-1;\n \n-static bool AppInitRawTx(int argc, char* argv[])\n+//\n+// This function returns either one of EXIT_ codes when it's expected to stop the process or\n+// CONTINUE_EXECUTION when it's expected to continue further.\n+//\n+static int AppInitRawTx(int argc, char* argv[])\n {\n     //\n     // Parameters\n@@ -89,9 +94,13 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"set=NAME:JSON-STRING\", _(\"Set register NAME to given JSON-STRING\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        return false;\n+        if (argc < 2) {\n+            fprintf(stderr, \"Error: too few parameters\\n\");\n+            return EXIT_FAILURE;\n+        }\n+        return EXIT_SUCCESS;\n     }\n-    return true;\n+    return CONTINUE_EXECUTION;\n }\n \n static void RegisterSetJson(const string& key, const string& rawJson)\n@@ -678,8 +687,9 @@ int main(int argc, char* argv[])\n     SetupEnvironment();\n \n     try {\n-        if(!AppInitRawTx(argc, argv))\n-            return EXIT_FAILURE;\n+        int ret = AppInitRawTx(argc, argv);\n+        if (ret != CONTINUE_EXECUTION)\n+            return ret;\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInitRawTx()\");"
      },
      {
        "sha": "a0d039359445aca825440e8046aa137be0f7c6f4",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
        "patch": "@@ -92,7 +92,7 @@ bool AppInit(int argc, char* argv[])\n         }\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n-        return false;\n+        return true;\n     }\n \n     try"
      },
      {
        "sha": "fb66ff00794cea66b05e7273a8d060adf1e29f2b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd0de1386e1c7f9b875d52290de0d561c8d56bc9/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
        "patch": "@@ -573,7 +573,7 @@ int main(int argc, char *argv[])\n     {\n         HelpMessageDialog help(NULL, mapArgs.count(\"-version\"));\n         help.showOrPrint();\n-        return 1;\n+        return 0;\n     }\n \n     /// 5. Now that settings and translations are available, ask user for data directory\n@@ -594,7 +594,7 @@ int main(int argc, char *argv[])\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n-        return false;\n+        return 1;\n     }\n \n     /// 7. Determine network (and switch to network specific options)"
      }
    ]
  },
  {
    "sha": "4441018d0860fce64ee74fa78da79bbb21114ca9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDQxMDE4ZDA4NjBmY2U2NGVlNzRmYTc4ZGE3OWJiYjIxMTE0Y2E5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-07T18:31:38Z"
      },
      "committer": {
        "name": "UdjinM6",
        "email": "UdjinM6@dash.org",
        "date": "2016-11-07T18:31:38Z"
      },
      "message": "Every main()/exit() should return/use one of EXIT_ codes instead of magic numbers",
      "tree": {
        "sha": "a3e87ce98e3775e72203392e9eb204f12e4c91b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3e87ce98e3775e72203392e9eb204f12e4c91b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4441018d0860fce64ee74fa78da79bbb21114ca9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4441018d0860fce64ee74fa78da79bbb21114ca9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4441018d0860fce64ee74fa78da79bbb21114ca9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4441018d0860fce64ee74fa78da79bbb21114ca9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd0de1386e1c7f9b875d52290de0d561c8d56bc9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd0de1386e1c7f9b875d52290de0d561c8d56bc9"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "3352a76de6ca0f02ce55b1f0f8030df021c550a9",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4441018d0860fce64ee74fa78da79bbb21114ca9/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4441018d0860fce64ee74fa78da79bbb21114ca9/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=4441018d0860fce64ee74fa78da79bbb21114ca9",
        "patch": "@@ -126,7 +126,7 @@ bool AppInit(int argc, char* argv[])\n         if (fCommandLine)\n         {\n             fprintf(stderr, \"Error: There is no RPC client functionality in bitcoind anymore. Use the bitcoin-cli utility instead.\\n\");\n-            exit(1);\n+            exit(EXIT_FAILURE);\n         }\n         if (GetBoolArg(\"-daemon\", false))\n         {\n@@ -177,5 +177,5 @@ int main(int argc, char* argv[])\n     // Connect bitcoind signal handlers\n     noui_connect();\n \n-    return (AppInit(argc, argv) ? 0 : 1);\n+    return (AppInit(argc, argv) ? EXIT_SUCCESS : EXIT_FAILURE);\n }"
      },
      {
        "sha": "c828234f44262669338d6eb59d15a9b2e91d36e5",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4441018d0860fce64ee74fa78da79bbb21114ca9/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4441018d0860fce64ee74fa78da79bbb21114ca9/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=4441018d0860fce64ee74fa78da79bbb21114ca9",
        "patch": "@@ -496,7 +496,7 @@ void BitcoinApplication::shutdownResult(int retval)\n void BitcoinApplication::handleRunawayException(const QString &message)\n {\n     QMessageBox::critical(0, \"Runaway exception\", BitcoinGUI::tr(\"A fatal error occurred. Bitcoin can no longer continue safely and will quit.\") + QString(\"\\n\\n\") + message);\n-    ::exit(1);\n+    ::exit(EXIT_FAILURE);\n }\n \n WId BitcoinApplication::getMainWinId() const\n@@ -573,28 +573,28 @@ int main(int argc, char *argv[])\n     {\n         HelpMessageDialog help(NULL, mapArgs.count(\"-version\"));\n         help.showOrPrint();\n-        return 0;\n+        return EXIT_SUCCESS;\n     }\n \n     /// 5. Now that settings and translations are available, ask user for data directory\n     // User language is set up: pick a data directory\n     if (!Intro::pickDataDirectory())\n-        return 0;\n+        return EXIT_SUCCESS;\n \n     /// 6. Determine availability of data directory and parse bitcoin.conf\n     /// - Do not call GetDataDir(true) before this step finishes\n     if (!boost::filesystem::is_directory(GetDataDir(false)))\n     {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n     try {\n         ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n \n     /// 7. Determine network (and switch to network specific options)\n@@ -608,7 +608,7 @@ int main(int argc, char *argv[])\n         SelectParams(ChainNameFromCommandLine());\n     } catch(std::exception &e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME), QObject::tr(\"Error: %1\").arg(e.what()));\n-        return 1;\n+        return EXIT_FAILURE;\n     }\n #ifdef ENABLE_WALLET\n     // Parse URIs on command line -- this can affect Params()\n@@ -630,7 +630,7 @@ int main(int argc, char *argv[])\n     // - Do this after creating app and setting up translations, so errors are\n     // translated properly.\n     if (PaymentServer::ipcSendCommandLine())\n-        exit(0);\n+        exit(EXIT_SUCCESS);\n \n     // Start up the payment server early, too, so impatient users that click on\n     // bitcoin: links repeatedly have their payment requests routed to this process:"
      }
    ]
  }
]