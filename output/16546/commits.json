[
  {
    "sha": "87a97941f667483bbf2ab00929e03a2199cb8a62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2E5Nzk0MWY2Njc0ODNiYmYyYWIwMDkyOWUwM2EyMTk5Y2I4YTYy",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-30T19:08:23Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-21T15:27:10Z"
      },
      "message": "configure: add --enable-external-signer\n\nThis option replaces --with-boost-process\n\nThis prepares external signer support to be disabled by default.\nIt adds a configure option to enable this feature and to check\nif Boost::Process is present.\n\nThis also exposes ENABLE_EXTERNAL_SIGNER to the test suite via test/config.ini",
      "tree": {
        "sha": "fafbce801d8597c6e560a78737e49a7a2a5cbd74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fafbce801d8597c6e560a78737e49a7a2a5cbd74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87a97941f667483bbf2ab00929e03a2199cb8a62",
      "comment_count": 1,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmAye84ACgkQV/+b28ww\nEAlo2BAAiZglKEZJK4/GLR0c7Uw0c8CFrFV20chMRlOJu79JhtdRuTnkLi7YQv+m\nLqIpoOUCWRpnX54vlbHLm9NO5DWSYFrl9y06pPcyUxglZ8/vcQIodszlOIva0Xo3\nRIKQ/j8cW1W7be6+gvbnvjfUqljK35GYjJKsDOdzCLy+JHEFeNGHDmL9gbjVkw9H\nbSee4vD1RHJohzbtqx3OByqkCoQ/sT6/hCT2ui78klU5NtAc6CLARDn3R1usiI2z\nZremrrdw52CV8kobisnSXj1vvIABJHp1Fka+nsexqHmucPdrtH4L1Agaj4KnIrbg\nXC4kp4bXDXot2+WvvTaM18k+/OaQXIuDL45Ti/+kaDqo7ADB0eyKdrO5YMF+P+0w\npVIZd6VZns/nEyjlsf5Fj0o2qcZIqPqCkvw9rBd5BKuigpnEzh7gQg1mpYOcFky1\nJyISu1+a1NhO7EDYvI2VgonUVxpdSYrInhRpwqFaqcbHwUWkU/F+oJywhgoXMLGl\n8oGdDuTmpRb9YsitsKE6JLyxEl0PgJ67hG7W6Y5QPiIkcyicpIZtU4bTQXJm2qBO\nAyEvnHFKVpLpxOVNqwPtAX5PZqfGVOrGCmxpghUQGfC2O08AXmj+MLNNOQm5od+A\nlRrgguJoovDC8kfeOiHfxRLlhVDN+wOIGlZfaIvtVLVWyGnkyeg=\n=Ysnt\n-----END PGP SIGNATURE-----",
        "payload": "tree fafbce801d8597c6e560a78737e49a7a2a5cbd74\nparent 5bb64acd9d3ced6e6f95df282a1a0f8b98522cb0\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572462503 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1613921230 +0100\n\nconfigure: add --enable-external-signer\n\nThis option replaces --with-boost-process\n\nThis prepares external signer support to be disabled by default.\nIt adds a configure option to enable this feature and to check\nif Boost::Process is present.\n\nThis also exposes ENABLE_EXTERNAL_SIGNER to the test suite via test/config.ini\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a97941f667483bbf2ab00929e03a2199cb8a62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87a97941f667483bbf2ab00929e03a2199cb8a62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a97941f667483bbf2ab00929e03a2199cb8a62/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bb64acd9d3ced6e6f95df282a1a0f8b98522cb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bb64acd9d3ced6e6f95df282a1a0f8b98522cb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bb64acd9d3ced6e6f95df282a1a0f8b98522cb0"
      }
    ],
    "stats": {
      "total": 111,
      "additions": 59,
      "deletions": 52
    },
    "files": [
      {
        "sha": "40a30b9749f5302867d7be14318d438c03980d6f",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a97941f667483bbf2ab00929e03a2199cb8a62/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a97941f667483bbf2ab00929e03a2199cb8a62/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=87a97941f667483bbf2ab00929e03a2199cb8a62",
        "patch": "@@ -50,8 +50,8 @@\n /* define if the Boost::Filesystem library is available */\n #define HAVE_BOOST_FILESYSTEM /**/\n \n-/* define if the Boost::Process library is available */\n-#define HAVE_BOOST_PROCESS /**/\n+/* define if external signer support is enabled (requires Boost::Process) */\n+#define ENABLE_EXTERNAL_SIGNER /**/\n \n /* define if the Boost::System library is available */\n #define HAVE_BOOST_SYSTEM /**/"
      },
      {
        "sha": "bee584ca63c76344f03792486d5fec87f10b56de",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 44,
        "deletions": 38,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a97941f667483bbf2ab00929e03a2199cb8a62/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a97941f667483bbf2ab00929e03a2199cb8a62/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=87a97941f667483bbf2ab00929e03a2199cb8a62",
        "patch": "@@ -338,10 +338,10 @@ AC_ARG_ENABLE([werror],\n     [enable_werror=$enableval],\n     [enable_werror=no])\n \n-AC_ARG_WITH([boost-process],\n-    [AS_HELP_STRING([--with-boost-process],[Opt in to using Boost Process (default is no)])],\n-    [boost_process=$withval],\n-    [boost_process=no])\n+AC_ARG_ENABLE([external-signer],\n+    [AS_HELP_STRING([--enable-external-signer],[compile external signer support (default is no, requires Boost::Process)])],\n+    [use_external_signer=$enableval],\n+    [use_external_signer=no])\n \n AC_LANG_PUSH([C++])\n \n@@ -1253,6 +1253,7 @@ if test \"x$enable_fuzz\" = \"xyes\"; then\n   bitcoin_enable_qt_dbus=no\n   enable_wallet=no\n   use_bench=no\n+  use_external_signer=no\n   use_upnp=no\n   use_natpmp=no\n   use_zmq=no\n@@ -1390,16 +1391,20 @@ fi\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n \n-dnl Opt-in to Boost Process\n-if test \"x$boost_process\" != xno; then\n+dnl Opt-in to Boost Process if external signer support is requested\n+if test \"x$use_external_signer\" != xno; then\n AC_MSG_CHECKING(for Boost Process)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <boost/process.hpp>]],\n  [[ boost::process::child* child = new boost::process::child; delete child; ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE([HAVE_BOOST_PROCESS],,[define if Boost::Process is available])],\n- [ AC_MSG_ERROR([Boost::Process is not available!])]\n+ [ AC_MSG_RESULT(yes)\n+ AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n+ ],\n+ [ AC_MSG_ERROR([Boost::Process is required for external signer support, but not available!])]\n )\n fi\n \n+AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n+\n if test x$suppress_external_warnings != xno; then\n     BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n fi\n@@ -1810,6 +1815,7 @@ AC_SUBST(ARM_CRC_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n AC_SUBST(USE_SQLITE)\n AC_SUBST(USE_BDB)\n+AC_SUBST(ENABLE_EXTERNAL_SIGNER)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)\n AC_SUBST(BOOST_LIBS)\n@@ -1885,43 +1891,43 @@ esac\n \n echo\n echo \"Options used to compile and link:\"\n-echo \"  boost process = $with_boost_process\"\n-echo \"  multiprocess  = $build_multiprocess\"\n-echo \"  with libs     = $build_bitcoin_libs\"\n-echo \"  with wallet   = $enable_wallet\"\n+echo \"  external signer = $use_external_signer\"\n+echo \"  multiprocess    = $build_multiprocess\"\n+echo \"  with libs       = $build_bitcoin_libs\"\n+echo \"  with wallet     = $enable_wallet\"\n if test \"x$enable_wallet\" != \"xno\"; then\n-    echo \"    with sqlite = $use_sqlite\"\n-    echo \"    with bdb    = $use_bdb\"\n+    echo \"    with sqlite   = $use_sqlite\"\n+    echo \"    with bdb      = $use_bdb\"\n fi\n-echo \"  with gui / qt = $bitcoin_enable_qt\"\n+echo \"    with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n-    echo \"    with qr     = $use_qr\"\n+    echo \"  with qr         = $use_qr\"\n fi\n-echo \"  with zmq      = $use_zmq\"\n+echo \"  with zmq        = $use_zmq\"\n if test x$enable_fuzz == xno; then\n-    echo \"  with test     = $use_tests\"\n+    echo \"  with test       = $use_tests\"\n else\n-    echo \"  with test     = not building test_bitcoin because fuzzing is enabled\"\n-    echo \"    with fuzz   = $enable_fuzz\"\n+    echo \"  with test       = not building test_bitcoin because fuzzing is enabled\"\n+    echo \"    with fuzz     = $enable_fuzz\"\n fi\n-echo \"  with bench    = $use_bench\"\n-echo \"  with upnp     = $use_upnp\"\n-echo \"  with natpmp   = $use_natpmp\"\n-echo \"  use asm       = $use_asm\"\n-echo \"  ebpf tracing  = $have_sdt\"\n-echo \"  sanitizers    = $use_sanitizers\"\n-echo \"  debug enabled = $enable_debug\"\n-echo \"  gprof enabled = $enable_gprof\"\n-echo \"  werror        = $enable_werror\"\n+echo \"  with bench      = $use_bench\"\n+echo \"  with upnp       = $use_upnp\"\n+echo \"  with natpmp     = $use_natpmp\"\n+echo \"  use asm         = $use_asm\"\n+echo \"  ebpf tracing    = $have_sdt\"\n+echo \"  sanitizers      = $use_sanitizers\"\n+echo \"  debug enabled   = $enable_debug\"\n+echo \"  gprof enabled   = $enable_gprof\"\n+echo \"  werror          = $enable_werror\"\n echo\n-echo \"  target os     = $TARGET_OS\"\n-echo \"  build os      = $build_os\"\n+echo \"  target os       = $TARGET_OS\"\n+echo \"  build os        = $build_os\"\n echo\n-echo \"  CC            = $CC\"\n-echo \"  CFLAGS        = $PTHREAD_CFLAGS $CFLAGS\"\n-echo \"  CPPFLAGS      = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n-echo \"  CXX           = $CXX\"\n-echo \"  CXXFLAGS      = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n-echo \"  LDFLAGS       = $PTHREAD_LIBS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n-echo \"  ARFLAGS       = $ARFLAGS\"\n+echo \"  CC              = $CC\"\n+echo \"  CFLAGS          = $PTHREAD_CFLAGS $CFLAGS\"\n+echo \"  CPPFLAGS        = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n+echo \"  CXX             = $CXX\"\n+echo \"  CXXFLAGS        = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n+echo \"  LDFLAGS         = $PTHREAD_LIBS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n+echo \"  ARFLAGS         = $ARFLAGS\"\n echo"
      },
      {
        "sha": "21bf587eaf31072b158120bf3b3238fbd7d5de74",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a97941f667483bbf2ab00929e03a2199cb8a62/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a97941f667483bbf2ab00929e03a2199cb8a62/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=87a97941f667483bbf2ab00929e03a2199cb8a62",
        "patch": "@@ -2073,7 +2073,7 @@ INCLUDE_FILE_PATTERNS  =\n # recursively expanded use the := operator instead of the = operator.\n # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.\n \n-PREDEFINED             = HAVE_BOOST_PROCESS\n+PREDEFINED             = ENABLE_EXTERNAL_SIGNER\n \n # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then this\n # tag can be used to specify a list of macro names that should be expanded. The"
      },
      {
        "sha": "940145b84fb88fdd08de8ba241702eb9ed392a65",
        "filename": "src/test/system_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a97941f667483bbf2ab00929e03a2199cb8a62/src/test/system_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a97941f667483bbf2ab00929e03a2199cb8a62/src/test/system_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/system_tests.cpp?ref=87a97941f667483bbf2ab00929e03a2199cb8a62",
        "patch": "@@ -6,22 +6,22 @@\n #include <util/system.h>\n #include <univalue.h>\n \n-#ifdef HAVE_BOOST_PROCESS\n+#ifdef ENABLE_EXTERNAL_SIGNER\n #include <boost/process.hpp>\n-#endif // HAVE_BOOST_PROCESS\n+#endif // ENABLE_EXTERNAL_SIGNER\n \n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(system_tests, BasicTestingSetup)\n \n-// At least one test is required (in case HAVE_BOOST_PROCESS is not defined).\n+// At least one test is required (in case ENABLE_EXTERNAL_SIGNER is not defined).\n // Workaround for https://github.com/bitcoin/bitcoin/issues/19128\n BOOST_AUTO_TEST_CASE(dummy)\n {\n     BOOST_CHECK(true);\n }\n \n-#ifdef HAVE_BOOST_PROCESS\n+#ifdef ENABLE_EXTERNAL_SIGNER\n \n bool checkMessage(const std::runtime_error& ex)\n {\n@@ -90,6 +90,6 @@ BOOST_AUTO_TEST_CASE(run_command)\n     }\n #endif\n }\n-#endif // HAVE_BOOST_PROCESS\n+#endif // ENABLE_EXTERNAL_SIGNER\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "71453eed81f8af3ecc0c1c769ed77f4f7af0b202",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a97941f667483bbf2ab00929e03a2199cb8a62/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a97941f667483bbf2ab00929e03a2199cb8a62/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=87a97941f667483bbf2ab00929e03a2199cb8a62",
        "patch": "@@ -5,9 +5,9 @@\n \n #include <util/system.h>\n \n-#ifdef HAVE_BOOST_PROCESS\n+#ifdef ENABLE_EXTERNAL_SIGNER\n #include <boost/process.hpp>\n-#endif // HAVE_BOOST_PROCESS\n+#endif // ENABLE_EXTERNAL_SIGNER\n \n #include <chainparamsbase.h>\n #include <sync.h>\n@@ -1247,7 +1247,7 @@ void runCommand(const std::string& strCommand)\n }\n #endif\n \n-#ifdef HAVE_BOOST_PROCESS\n+#ifdef ENABLE_EXTERNAL_SIGNER\n UniValue RunCommandParseJSON(const std::string& str_command, const std::string& str_std_in)\n {\n     namespace bp = boost::process;\n@@ -1282,7 +1282,7 @@ UniValue RunCommandParseJSON(const std::string& str_command, const std::string&\n \n     return result_json;\n }\n-#endif // HAVE_BOOST_PROCESS\n+#endif // ENABLE_EXTERNAL_SIGNER\n \n void SetupEnvironment()\n {"
      },
      {
        "sha": "de47b93b6e178cb2afbc6b59473b26b68ec210e4",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a97941f667483bbf2ab00929e03a2199cb8a62/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a97941f667483bbf2ab00929e03a2199cb8a62/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=87a97941f667483bbf2ab00929e03a2199cb8a62",
        "patch": "@@ -108,7 +108,7 @@ std::string ShellEscape(const std::string& arg);\n #if HAVE_SYSTEM\n void runCommand(const std::string& strCommand);\n #endif\n-#ifdef HAVE_BOOST_PROCESS\n+#ifdef ENABLE_EXTERNAL_SIGNER\n /**\n  * Execute a command which returns JSON, and parse the result.\n  *\n@@ -117,7 +117,7 @@ void runCommand(const std::string& strCommand);\n  * @return parsed JSON\n  */\n UniValue RunCommandParseJSON(const std::string& str_command, const std::string& str_std_in=\"\");\n-#endif // HAVE_BOOST_PROCESS\n+#endif // ENABLE_EXTERNAL_SIGNER\n \n /**\n  * Most paths passed as configuration arguments are treated as relative to"
      },
      {
        "sha": "e3872181cd0f8e5194aa01ab3b4baf76486abff7",
        "filename": "test/config.ini.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87a97941f667483bbf2ab00929e03a2199cb8a62/test/config.ini.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87a97941f667483bbf2ab00929e03a2199cb8a62/test/config.ini.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/config.ini.in?ref=87a97941f667483bbf2ab00929e03a2199cb8a62",
        "patch": "@@ -23,3 +23,4 @@ RPCAUTH=@abs_top_srcdir@/share/rpcauth/rpcauth.py\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=true\n @ENABLE_FUZZ_TRUE@ENABLE_FUZZ=true\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=true\n+@ENABLE_EXTERNAL_SIGNER_TRUE@ENABLE_EXTERNAL_SIGNER=true"
      }
    ]
  },
  {
    "sha": "f7eb7ecc6750ab267a979d9268ce5b5d151c26de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2ViN2VjYzY3NTBhYjI2N2E5NzlkOTI2OGNlNWI1ZDE1MWMyNmRl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-13T17:59:16Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-21T15:27:10Z"
      },
      "message": "test: framework: add skip_if_no_external_signer",
      "tree": {
        "sha": "143c8cc3a12ec467d79e028b867ec6feeea4b686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/143c8cc3a12ec467d79e028b867ec6feeea4b686"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7eb7ecc6750ab267a979d9268ce5b5d151c26de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmAye84ACgkQV/+b28ww\nEAkmZw/9ERNxSdmXJVmOMlbOAfEt1dN1R4I6X6Smn5+ULd8eG3gkoVT6VeQ43+z0\n13/ng3BKkwFJ93kRknUEaUkXOnIJ/ib1yiBnF/r+GRRRi79MP2klmW3BOyx1/6Z0\nhSrJxe//tyJJ7MFdHqS7A81RYDlYQ3prpVOl20h/6yZQJPsMHZVENvwDaMsj6ziS\nPsJwxezm31jtDMRX9WGXnbttibVwncX1CdV8lbfhUfWg1DBFy6rSdKXmuyY/23uc\n7aVPWn5F/W3PSI8GPBqXw8MsypMucJWMowLwdnLv86H46uWTKNAuhC4sgJs+Jo3x\ntqgQtxJlk3q0rG6lCliIIh02IKG8w2OGdm5RcRpXHUERSLz6XBBtIS84j/jWnfMq\nenQKJnECDTdONcIHVD8QZDNc3XVMhmhNQ9lYEo//Ls5xhCjyleRlX1aCZ0elR2XV\nfoSL/YZo6GdTLUbf7Pk61GFzdgp+jdCxUQMIc7adi5R/d7bskT1Gl5NTUYrC8qUT\nINWyIxP/DVijVnCBbKNnsphjxtITq7y/rKzm8+6ajFoyHxXqcI5nIxy85G3n48gh\nxkDvS2lL6TwDYPFR0rp9k58X7d1zndJmrM7e7o5DWJIEZYuIMVlRBCKRfTo8kR7e\ngdAaUgWIMkVaQpkAAmS/6oXa0x1a9XF8TwuEEnrfmN8iLyRy798=\n=TMWr\n-----END PGP SIGNATURE-----",
        "payload": "tree 143c8cc3a12ec467d79e028b867ec6feeea4b686\nparent 87a97941f667483bbf2ab00929e03a2199cb8a62\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550080756 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1613921230 +0100\n\ntest: framework: add skip_if_no_external_signer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7eb7ecc6750ab267a979d9268ce5b5d151c26de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7eb7ecc6750ab267a979d9268ce5b5d151c26de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7eb7ecc6750ab267a979d9268ce5b5d151c26de/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87a97941f667483bbf2ab00929e03a2199cb8a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87a97941f667483bbf2ab00929e03a2199cb8a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87a97941f667483bbf2ab00929e03a2199cb8a62"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f7eaaa548faadd4cd9ccbf3a8e4d6498232c9876",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7eb7ecc6750ab267a979d9268ce5b5d151c26de/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7eb7ecc6750ab267a979d9268ce5b5d151c26de/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f7eb7ecc6750ab267a979d9268ce5b5d151c26de",
        "patch": "@@ -827,10 +827,19 @@ def has_previous_releases(self):\n                     self.options.previous_releases_path))\n         return self.options.prev_releases\n \n+    def skip_if_no_external_signer(self):\n+        \"\"\"Skip the running test if external signer support has not been compiled.\"\"\"\n+        if not self.is_external_signer_compiled():\n+            raise SkipTest(\"external signer support has not been compiled.\")\n+\n     def is_cli_compiled(self):\n         \"\"\"Checks whether bitcoin-cli was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_CLI\")\n \n+    def is_external_signer_compiled(self):\n+        \"\"\"Checks whether external signer support was compiled.\"\"\"\n+        return self.config[\"components\"].getboolean(\"ENABLE_EXTERNAL_SIGNER\")\n+\n     def is_wallet_compiled(self):\n         \"\"\"Checks whether the wallet module was compiled.\"\"\"\n         return self.config[\"components\"].getboolean(\"ENABLE_WALLET\")"
      }
    ]
  },
  {
    "sha": "8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2Y1NDNmOTZkY2Q2ZmRmYWMxMzY3YjllMmIxZDdkNTFiZThiYjc2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:10:35Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:30Z"
      },
      "message": "wallet: add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.",
      "tree": {
        "sha": "b37cf68c9abcdc19550365706071618cceeb6e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b37cf68c9abcdc19550365706071618cceeb6e9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGYACgkQV/+b28ww\nEAlYFQ/9Gbc0BtRGOVPdctlXORD0X3N806nsXcflR5dx5wvoATw5Ik3tRaAyyZ7X\nz79QyxHtKvWz22Z0pc4UULOdn84ACGN9EM2Ng0MDjieiD7mOdT2TN0zNF3k8llVT\nAJ52N0COEGOc5571+VUuTYVsrHeXHDrQtEszlwfXXPr+b5RO/yO5rbEBaY05USWw\n7/Asn3qQhKO0orQOHmMauG8HLNahj3XRRKjAQznCwgDG/HBQgpPDASh1Xo7MRO0p\nR5zSLAFvoQjJ9syMVp/vZ7QDC0q4k6Vud2KrjE9LV9m+mHWK5Xkm6M84h5ipl/81\nlMY08hhgFkux+5sBe8b1RraqNo3lMSjufXpCTXmuDl0bB8/lcjLRlQ+vcC9MzDYA\n1GczlqYFWqmRy6JahMZFZuo3YBNrCV92ignkKeUHfj2PSlKhyE7F03Bl//9M6WzG\ngFtJ00njUt0bPgPilvJM/8k/hfdGP4S4SHssgJMV33FiEdJO+Bqs3RbsnMvziStD\n3g+5y3YrNz88lhBTBO/SMwRRr0He+XKyUOP7+KJKq1YkoDJWpGJoINvvIbCtrXo9\nfCFQwks/Z7k9jrxii6FTnaF7zkUk0RN7xhD567UeW0y+clx+hi6/Nxi3qbKPB4mw\nYbfDhWEfK7ApuJFkt51XDPm7ZIweJKRJO0QzBKJdRjdug0MLmng=\n=d676\n-----END PGP SIGNATURE-----",
        "payload": "tree b37cf68c9abcdc19550365706071618cceeb6e9b\nparent f7eb7ecc6750ab267a979d9268ce5b5d151c26de\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385035 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087270 +0100\n\nwallet: add -signer argument for external signer command\n\nCreate basic ExternalSigner class with contructor. A Signer(<cmd>)\nis added to CWallet on load if -signer=<cmd> is set.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7eb7ecc6750ab267a979d9268ce5b5d151c26de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7eb7ecc6750ab267a979d9268ce5b5d151c26de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7eb7ecc6750ab267a979d9268ce5b5d151c26de"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 49,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3b81056d25cca4bfe684479b511146eab7f76669",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "patch": "@@ -265,6 +265,7 @@ BITCOIN_CORE_H = \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/dump.h \\\n+  wallet/external_signer.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n@@ -379,6 +380,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/dump.cpp \\\n+  wallet/external_signer.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/interfaces.cpp \\"
      },
      {
        "sha": "bb06c95e7d11db452cc6e0975c990bc37970e713",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "patch": "@@ -38,6 +38,7 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-paytxfee=<amt>\",\n         \"-rescan\",\n         \"-salvagewallet\",\n+        \"-signer=<cmd>\",\n         \"-spendzeroconfchange\",\n         \"-txconfirmtarget=<n>\",\n         \"-wallet=<path>\","
      },
      {
        "sha": "6f850e477994d3f060f18266ea7d306a6a65a325",
        "filename": "src/wallet/external_signer.cpp",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.cpp?ref=8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "patch": "@@ -0,0 +1,8 @@\n+// Copyright (c) 2018-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <wallet/external_signer.h>\n+#include <util/system.h>\n+\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint): m_command(command), m_fingerprint(fingerprint) {}"
      },
      {
        "sha": "08fb0c9f39f7b72cedc65615ead0932b72ea4796",
        "filename": "src/wallet/external_signer.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/external_signer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/external_signer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.h?ref=8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2018-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_EXTERNAL_SIGNER_H\n+#define BITCOIN_WALLET_EXTERNAL_SIGNER_H\n+\n+#include <stdexcept>\n+#include <string>\n+#include <univalue.h>\n+\n+class ExternalSignerException : public std::runtime_error {\n+public:\n+    using std::runtime_error::runtime_error;\n+};\n+\n+//! Enables interaction with an external signing device or service, such as\n+//! a hardware wallet. See doc/external-signer.md\n+class ExternalSigner\n+{\n+private:\n+    //! The command which handles interaction with the external signer.\n+    std::string m_command;\n+\n+public:\n+    //! @param[in] command      the command which handles interaction with the external signer\n+    //! @param[in] fingerprint  master key fingerprint of the signer\n+    ExternalSigner(const std::string& command, const std::string& fingerprint);\n+\n+    //! Master key fingerprint of the signer\n+    std::string m_fingerprint;\n+};\n+\n+#endif // BITCOIN_WALLET_EXTERNAL_SIGNER_H"
      },
      {
        "sha": "fc530ee2864669c60977a9307dec7792d128315f",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "patch": "@@ -61,6 +61,9 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    argsman.AddArg(\"-signer=<cmd>\", \"External signing tool, see docs/external-signer.md\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n+#endif\n     argsman.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     argsman.AddArg(\"-wallet=<path>\", \"Specify wallet path to load at startup. Can be used multiple times to load multiple wallets. Path is to a directory containing wallet data and log files. If the path is not absolute, it is interpreted relative to <walletdir>. This only loads existing wallets and does not create new ones. For backwards compatibility this also accepts names of existing top-level data files in <walletdir>.\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);"
      },
      {
        "sha": "2d25f46b69a48dff7e54910d31e7d2371b2d4583",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "patch": "@@ -22,6 +22,7 @@\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n #include <wallet/scriptpubkeyman.h>\n+#include <wallet/external_signer.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n@@ -95,7 +96,6 @@ constexpr CAmount DEFAULT_TRANSACTION_MAXFEE{COIN / 10};\n constexpr CAmount HIGH_TX_FEE_PER_KB{COIN / 100};\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n constexpr CAmount HIGH_MAX_TX_FEE{100 * HIGH_TX_FEE_PER_KB};\n-\n //! Pre-calculated constants for input size estimation in *virtual size*\n static constexpr size_t DUMMY_NESTED_P2WPKH_INPUT_SIZE = 91;\n "
      }
    ]
  },
  {
    "sha": "f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2U2Y2U3OGZiYTJiMzExNzNmZTdiNjA2YWE5ZWRiNWI2MTViZmYz",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-04-27T17:11:43Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:30Z"
      },
      "message": "test: add external signer test\n\nIncludes a mock to mimick the HWI interace.",
      "tree": {
        "sha": "2eb31f5706a490dbd146980efa627d5b56ea7704",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb31f5706a490dbd146980efa627d5b56ea7704"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGYACgkQV/+b28ww\nEAkD0g//fXuBXJTKVpDnna0Km3doWdJMjRCzYmQyVw6g+dhuodjQWU7fOlws5fzL\n2UYxVk9eK7cu7TDYYFa4VMMNsbknZCVtFnYrfT0FWHTyeJarGSxrSQCkJKPNjSml\n2nu7RxVu7Rayyg769dPi3lDWbbx/d140MgRtyv/QhHujbmbOLEXMZ1VeCaYrzJlB\nkyMWcHGZu5DMpWiXfbCjoD7oSXrDcIpio+CeRvrRa2ElraoZjXsjtd10RtnBpy9Y\niiNl0+Y0c3+2F5mssadSDzWIqbD3/RwGh587UDd1sXkJ7u3GzD/nL4RDGqNXcepX\nE/0YZrK/G2LyyC7GJp3idcBJCBeAOHRosTBUFGlzCh6DCKZuD9pQ2ut6Po0Gb6VI\nJd80zVXUBlGiFByD21O5bCa6aQ1in5CqLcye6CisAaguT3I3ol8kUMOiX/sx+JPT\nzc91k/exTvb57wluYbw12Iu3T46ajq5vWoFy52xNFWs8xIE7HFWWkhSStuVDmrvL\n2AuFn5oX36LZWK/of9rltZ9JHwQ0f0Ql24cB0doxorNlhAyuu6+4dxLxKZjaa1wO\n9EcAHTn1mEhR3A+GjdkOwGk6SfiC/3fE7Hr7yXh3pq0LVwGR0UDV+We3jcrDe4QM\ntCrPERnHsSDkIZ5IqVPbRsEb5eVtWz3tR+qUTaco4QGuKjJPDyI=\n=Uri3\n-----END PGP SIGNATURE-----",
        "payload": "tree 2eb31f5706a490dbd146980efa627d5b56ea7704\nparent 8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76\nauthor Sjors Provoost <sjors@sprovoost.nl> 1556385103 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087270 +0100\n\ntest: add external signer test\n\nIncludes a mock to mimick the HWI interace.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf543f96dcd6fdfac1367b9e2b1d7d51be8bb76"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 81,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6b5c903886fc77be9f996378907d649a68814e54",
        "filename": "test/functional/mocks/signer.py",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
        "patch": "@@ -0,0 +1,28 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import os\n+import sys\n+import argparse\n+import json\n+\n+def perform_pre_checks():\n+    mock_result_path = os.path.join(os.getcwd(), \"mock_result\")\n+    if(os.path.isfile(mock_result_path)):\n+        with open(mock_result_path, \"r\", encoding=\"utf8\") as f:\n+            mock_result = f.read()\n+        if mock_result[0]:\n+            sys.stdout.write(mock_result[2:])\n+            sys.exit(int(mock_result[0]))\n+\n+parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n+subparsers = parser.add_subparsers(description='Commands', dest='command')\n+subparsers.required = True\n+\n+args = parser.parse_args()\n+\n+perform_pre_checks()\n+\n+args.func(args)"
      },
      {
        "sha": "79ad2cf161f6064e962a61ad591bd4f51b510bf3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
        "patch": "@@ -111,6 +111,7 @@\n     'wallet_listtransactions.py --legacy-wallet',\n     'wallet_listtransactions.py --descriptors',\n     'feature_taproot.py',\n+    'wallet_signer.py --descriptors',\n     # vv Tests less than 60s vv\n     'p2p_sendheaders.py',\n     'wallet_importmulti.py --legacy-wallet',"
      },
      {
        "sha": "62d4db837e415b267ae2f7543a943fded12d70dc",
        "filename": "test/functional/wallet_signer.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test external signer.\n+\n+Verify that a bitcoind node can use an external signer command\n+\"\"\"\n+import os\n+import platform\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+\n+class SignerTest(BitcoinTestFramework):\n+    def mock_signer_path(self):\n+        path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'mocks', 'signer.py')\n+        if platform.system() == \"Windows\":\n+            return \"py \" + path\n+        else:\n+            return path\n+\n+    def set_test_params(self):\n+        self.num_nodes = 3\n+\n+        self.extra_args = [\n+            [],\n+            [f\"-signer={self.mock_signer_path()}\", '-keypool=10'],\n+            [f\"-signer={self.mock_signer_path()}\", '-keypool=10'],\n+            [\"-signer=fake.py\"],\n+        ]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_external_signer()\n+\n+    def set_mock_result(self, node, res):\n+        with open(os.path.join(node.cwd, \"mock_result\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(res)\n+\n+    def clear_mock_result(self, node):\n+        os.remove(os.path.join(node.cwd, \"mock_result\"))\n+\n+    def run_test(self):\n+        self.log.debug(f\"-signer={self.mock_signer_path()}\")\n+\n+if __name__ == '__main__':\n+    SignerTest().main()"
      }
    ]
  },
  {
    "sha": "157ea7c614950d61bfe405310e2aaabcee31f7a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTdlYTdjNjE0OTUwZDYxYmZlNDA1MzEwZTJhYWFiY2VlMzFmN2Ez",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T15:55:31Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:30Z"
      },
      "message": "wallet: add external_signer flag",
      "tree": {
        "sha": "b1067774d7bc1f3a8b8acbff4710641d0de94900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1067774d7bc1f3a8b8acbff4710641d0de94900"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/157ea7c614950d61bfe405310e2aaabcee31f7a3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGYACgkQV/+b28ww\nEAl/XhAAlHfmvsXZiQ4IlKSNXSNG833B5vLpF9jsLzdAJ0aUFsTemHqjzLdMf9LY\nmyo3myQZtuziU8sQgLpQEaz50z3bQ6lWrm57Lux16V2LC+YZCDrrB4vk90juVZNQ\nc3cUT0AbZ3lNV8oKSJctrbe+zDX31i8Wl3ay9VYh4SxL3AX3O23UWKF7okXJ0k7i\nTZi0nRpIgGKKWr+x9r8Uo8io8/WelPWEbgMbq7fVRzK/gDukf/KSw7QfI2UpCRHJ\n6VhhCNaqxWdWUZA4b8/qQpBtr5DT+uvNTwvzevFrTYm0fZwYl3wEMmT12/fhSBbx\n4A3E1XYQHQMV0h5YM3Zd0ZArPxrWjVdD3ZpTvMNLW4jS5AWBlidgmLjI1kC5eZ7i\nP2JV/PuWSbSsjcVliXIodbcTLLJ3vTnI8zHY2mt353DXshi7EAREHaQthjwP/dqi\nBzo4Cm8VEF0xCpYnCJbZlODI79MWhGZtGQohAPNlBGS25wrHLGq6ijfvr+tnyKT/\n7CBHY0xxnWaJUhY8kE8GheR/giGX61fCsxzTwqTvBOhwHlYfKWXnvekx58oppB5p\naRA9eeJiC3w3ptocmwRSfrF3mtEp2dEz/kfWsfBvRlkaayyFAHmMpZwwmxZZGgsj\nJnZV3OGAJ18szFU9ydvzTyGOB2JicjK7l5LoLq62CmyuAX4Hci4=\n=7nap\n-----END PGP SIGNATURE-----",
        "payload": "tree b1067774d7bc1f3a8b8acbff4710641d0de94900\nparent f3e6ce78fba2b31173fe7b606aa9edb5b615bff3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564934131 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087270 +0100\n\nwallet: add external_signer flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157ea7c614950d61bfe405310e2aaabcee31f7a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/157ea7c614950d61bfe405310e2aaabcee31f7a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157ea7c614950d61bfe405310e2aaabcee31f7a3/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3e6ce78fba2b31173fe7b606aa9edb5b615bff3"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 20,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a49383affda50272633e0d540696bb7cee3249f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157ea7c614950d61bfe405310e2aaabcee31f7a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157ea7c614950d61bfe405310e2aaabcee31f7a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=157ea7c614950d61bfe405310e2aaabcee31f7a3",
        "patch": "@@ -259,6 +259,20 @@ std::shared_ptr<CWallet> CreateWallet(interfaces::Chain& chain, const std::strin\n         wallet_creation_flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n \n+    // Private keys must be disabled for an external signer wallet\n+    if ((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) && !(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        error = Untranslated(\"Private keys must be disabled when using an external signer\");\n+        status = DatabaseStatus::FAILED_CREATE;\n+        return nullptr;\n+    }\n+\n+    // Descriptor support must be enabled for an external signer wallet\n+    if ((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) && !(wallet_creation_flags & WALLET_FLAG_DESCRIPTORS)) {\n+        error = Untranslated(\"Descriptor support must be enabled when using an external signer\");\n+        status = DatabaseStatus::FAILED_CREATE;\n+        return nullptr;\n+    }\n+\n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n     std::unique_ptr<WalletDatabase> database = MakeWalletDatabase(name, options, status, error);\n     if (!database) {"
      },
      {
        "sha": "1cc43c1ca13b54c512b75a19f9eb30a67babd614",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157ea7c614950d61bfe405310e2aaabcee31f7a3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157ea7c614950d61bfe405310e2aaabcee31f7a3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=157ea7c614950d61bfe405310e2aaabcee31f7a3",
        "patch": "@@ -115,7 +115,8 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n     |   WALLET_FLAG_BLANK_WALLET\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n     |   WALLET_FLAG_DISABLE_PRIVATE_KEYS\n-    |   WALLET_FLAG_DESCRIPTORS;\n+    |   WALLET_FLAG_DESCRIPTORS\n+    |   WALLET_FLAG_EXTERNAL_SIGNER;\n \n static constexpr uint64_t MUTABLE_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE;\n@@ -126,6 +127,7 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n     {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n     {\"descriptor_wallet\", WALLET_FLAG_DESCRIPTORS},\n+    {\"external_signer\", WALLET_FLAG_EXTERNAL_SIGNER}\n };\n \n extern const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS;"
      },
      {
        "sha": "0713f768c10e241caae6b6f62b87184e5acf4ed7",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157ea7c614950d61bfe405310e2aaabcee31f7a3/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157ea7c614950d61bfe405310e2aaabcee31f7a3/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=157ea7c614950d61bfe405310e2aaabcee31f7a3",
        "patch": "@@ -60,6 +60,9 @@ enum WalletFlags : uint64_t {\n \n     //! Indicate that this wallet supports DescriptorScriptPubKeyMan\n     WALLET_FLAG_DESCRIPTORS = (1ULL << 34),\n+\n+    //! Indicates that the wallet needs an external signer\n+    WALLET_FLAG_EXTERNAL_SIGNER = (1ULL << 35),\n };\n \n //! Get the path of the wallet directory."
      }
    ]
  },
  {
    "sha": "8ce7767071779a0170364e6426bd393ed71bf281",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2U3NzY3MDcxNzc5YTAxNzAzNjRlNjQyNmJkMzkzZWQ3MWJmMjgx",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-19T15:40:00Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:30Z"
      },
      "message": "wallet: add ExternalSignerScriptPubKeyMan",
      "tree": {
        "sha": "fade265053d824fbe4409320e73b97294921c4f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fade265053d824fbe4409320e73b97294921c4f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ce7767071779a0170364e6426bd393ed71bf281",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGYACgkQV/+b28ww\nEAmQ0g/+JnylxiBzl3vTCnFL5yD3dTtHx8HfePxPmCZio6CRe/2QrgCzosVU+oO+\n3Y70V0hckdcftSkkVqWqZYlreRHRVdPqcSd7Oa9iFVdiyBML1YQhMjM/rhc7Od8J\nL4/mWxRJoVeFI0nBxMkginsfIN86tCG7GEBKwVXBW2pdG8m+t0bXy6C/FJajUDyt\n6clBvIPqm3G+6Bm2HZmqP/V+5Tegtzkt98v55oFFKZ1SddEUTD7dBdKDprkWoTFM\nDhEsfF5WjWz/OiWgZ50ha7GqxRaTrlXtrzZ+agsVVl7bUdokYy2+PP1k1e9hc6v9\n7N6CViZZjG3RJM4JTw+CY8iVib9nBn1nrCRqCs4hfqCWyS4r4yYcZ/iXO2sKTG5e\nuKRQpdzbwQk7ISJTto+YVfYeaalr+YoiecwHDDJ9NTMatHShIXEOD9bl1PRPczew\nW1Ce3+mc393Vqed2/nqfmzuDIaLgQ3wfw8ZfLKyxNAoBVLnICABJKQZ8v/8NpfuO\nk5y67BB9gBp9kUC9RsvjJxVriBRWf5zq3PHIXEcuZsL34Vow5W9UatzFrYmLU1SI\nPW3ZMJTiU0UxL25UPMTc+bs0qE3cQjHCShUdPfxvHCx+Bn2M6RTiTt1jNfKb6aza\nxWIFqocOJ1OmbtSgxKWm3QXAd0qz2887cNUOKkX+HsAtqPZ/V1s=\n=EvNO\n-----END PGP SIGNATURE-----",
        "payload": "tree fade265053d824fbe4409320e73b97294921c4f1\nparent 157ea7c614950d61bfe405310e2aaabcee31f7a3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1582126800 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087270 +0100\n\nwallet: add ExternalSignerScriptPubKeyMan\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce7767071779a0170364e6426bd393ed71bf281",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ce7767071779a0170364e6426bd393ed71bf281",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce7767071779a0170364e6426bd393ed71bf281/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "157ea7c614950d61bfe405310e2aaabcee31f7a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157ea7c614950d61bfe405310e2aaabcee31f7a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/157ea7c614950d61bfe405310e2aaabcee31f7a3"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 81,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9c33f7bdf5a0f06516b670092173288262fe5fd2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce7767071779a0170364e6426bd393ed71bf281/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce7767071779a0170364e6426bd393ed71bf281/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=8ce7767071779a0170364e6426bd393ed71bf281",
        "patch": "@@ -266,6 +266,7 @@ BITCOIN_CORE_H = \\\n   wallet/db.h \\\n   wallet/dump.h \\\n   wallet/external_signer.h \\\n+  wallet/external_signer_scriptpubkeyman.h \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n@@ -380,6 +381,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/dump.cpp \\\n+  wallet/external_signer_scriptpubkeyman.cpp \\\n   wallet/external_signer.cpp \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\"
      },
      {
        "sha": "3dff67f35d0295604961f692280d51c89afc3886",
        "filename": "src/wallet/external_signer_scriptpubkeyman.cpp",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/external_signer_scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/external_signer_scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.cpp?ref=8ce7767071779a0170364e6426bd393ed71bf281",
        "patch": "@@ -0,0 +1,36 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <wallet/external_signer.h>\n+#include <wallet/external_signer_scriptpubkeyman.h>\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+\n+bool ExternalSignerScriptPubKeyMan::SetupDescriptor(std::unique_ptr<Descriptor> desc)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER));\n+\n+    int64_t creation_time = GetTime();\n+\n+    // Make the descriptor\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n+#endif"
      },
      {
        "sha": "40edbcf751db4b900c0d3d3c5496235c66b15c42",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "added",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=8ce7767071779a0170364e6426bd393ed71bf281",
        "patch": "@@ -0,0 +1,28 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_EXTERNAL_SIGNER_SCRIPTPUBKEYMAN_H\n+#define BITCOIN_WALLET_EXTERNAL_SIGNER_SCRIPTPUBKEYMAN_H\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+#include <wallet/scriptpubkeyman.h>\n+\n+class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n+{\n+  public:\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+      :   DescriptorScriptPubKeyMan(storage, descriptor)\n+      {}\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage, bool internal)\n+      :   DescriptorScriptPubKeyMan(storage, internal)\n+      {}\n+\n+  /** Provide a descriptor at setup time\n+  * Returns false if already setup or setup fails, true if setup is successful\n+  */\n+  bool SetupDescriptor(std::unique_ptr<Descriptor>desc);\n+};\n+#endif\n+\n+#endif // BITCOIN_WALLET_EXTERNAL_SIGNER_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "1aeb6e090521bb317fd0d6c00345aef1e73ecd26",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8ce7767071779a0170364e6426bd393ed71bf281",
        "patch": "@@ -517,8 +517,6 @@ class LegacySigningProvider : public SigningProvider\n class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n {\n private:\n-    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n-\n     using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n     using PubKeyMap = std::map<CPubKey, int32_t>; // Map of pubkeys involved in scripts to descriptor range index\n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n@@ -547,6 +545,9 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     // Fetch the SigningProvider for a given index and optionally include private keys. Called by the above functions.\n     std::unique_ptr<FlatSigningProvider> GetSigningProvider(int32_t index, bool include_private = false) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n \n+protected:\n+  WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),"
      },
      {
        "sha": "26c52773b5d0819613bad63e36924cf05831757a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce7767071779a0170364e6426bd393ed71bf281/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8ce7767071779a0170364e6426bd393ed71bf281",
        "patch": "@@ -32,6 +32,7 @@\n #include <util/translation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n+#include <wallet/external_signer_scriptpubkeyman.h>\n \n #include <univalue.h>\n \n@@ -4457,8 +4458,17 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n \n void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n {\n-    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n-    m_spk_managers[id] = std::move(spk_manager);\n+    if (IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc));\n+        m_spk_managers[id] = std::move(spk_manager);\n+#else\n+        throw std::runtime_error(std::string(__func__) + \": Configure with --enable-external-signer to use external signer wallets\");\n+#endif\n+    } else {\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        m_spk_managers[id] = std::move(spk_manager);\n+    }\n }\n \n void CWallet::SetupDescriptorScriptPubKeyMans()"
      }
    ]
  },
  {
    "sha": "07b7c940a7da138d55a484ef83fee19ebf58a867",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowN2I3Yzk0MGE3ZGExMzhkNTVhNDg0ZWY4M2ZlZTE5ZWJmNThhODY3",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:30Z"
      },
      "message": "rpc: add external signer RPC files",
      "tree": {
        "sha": "f46128f68c0f12d15b267768092352ff02724432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f46128f68c0f12d15b267768092352ff02724432"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07b7c940a7da138d55a484ef83fee19ebf58a867",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGcACgkQV/+b28ww\nEAlung//UD/dVi8Latz4sVqnIiTdN+qvepvHe5J1GXbiL5IH+TAA3KgGcV4ZE51g\nxt0yVu4ZVCVthslbsB8ftOh2I0nxNpmuT3vIAz6phbnQyV5CGlP5wDdf79U4u9ws\nIZ6hQ3eXYu/1CjRMqiM5S5RP70m9wBrb03+eRqddYVFIzKoAb8UCViYqmlhMC8Jv\n/IkC3VR0wbmjejls25WG9xglmS2j5NgK6xc/t/XmoN92gtCVgv2lz/hFqwLAwJQZ\nygtpU55zRD1y/K3y6sRp7/Mi8NoPWw0YVLyDRHTwfk6sYmfTnlaeQ1VtKBcIJHy5\nTlt3CS1pXtHwBBD/QVVtWTPxSuxxRdSp9LsyhU2PknK761Jv7HAgH3BwIKQK8ewu\npJe6l+LN7tJa9ZIliEaT7KfgBvV3P7oYcwuqS3sPoOWro/gI1VFsxNtkg0jH9UVF\n9mrQDoPYVKtFI0SEiuFaU2FBdqf8XH5KAiukEFTkwMdy1JzXTZnKLideRx7b8iEW\nia5GZY9dffSyaYFoJSVOgPf7ERd1L72Iw2wBZm7Wt85n1HiaLvwAk/vZeRaI0rke\n1HQ2l0UJpLZ6hmjRRjdpumhfuLLpaYJDomNcLHIO95Bep5K8t5aascieokFNkWO0\nl2wY82DF1nH1NOMHx8qamKss63S8LbFBPns/lSWhHPh8AWRuHts=\n=gbNW\n-----END PGP SIGNATURE-----",
        "payload": "tree f46128f68c0f12d15b267768092352ff02724432\nparent 8ce7767071779a0170364e6426bd393ed71bf281\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087270 +0100\n\nrpc: add external signer RPC files\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b7c940a7da138d55a484ef83fee19ebf58a867",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07b7c940a7da138d55a484ef83fee19ebf58a867",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b7c940a7da138d55a484ef83fee19ebf58a867/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ce7767071779a0170364e6426bd393ed71bf281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce7767071779a0170364e6426bd393ed71bf281",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ce7767071779a0170364e6426bd393ed71bf281"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 82,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a9ef49a34747b33bf18fecab44107dbc9204e09",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07b7c940a7da138d55a484ef83fee19ebf58a867/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07b7c940a7da138d55a484ef83fee19ebf58a867/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=07b7c940a7da138d55a484ef83fee19ebf58a867",
        "patch": "@@ -271,6 +271,7 @@ BITCOIN_CORE_H = \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n+  wallet/rpcsigner.h \\\n   wallet/rpcwallet.h \\\n   wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n@@ -388,6 +389,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/interfaces.cpp \\\n   wallet/load.cpp \\\n   wallet/rpcdump.cpp \\\n+  wallet/rpcsigner.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/scriptpubkeyman.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "1fb789b128a47a344835a6a1dc9a7e45f066a162",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07b7c940a7da138d55a484ef83fee19ebf58a867/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07b7c940a7da138d55a484ef83fee19ebf58a867/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=07b7c940a7da138d55a484ef83fee19ebf58a867",
        "patch": "@@ -23,6 +23,7 @@\n #include <wallet/fees.h>\n #include <wallet/ismine.h>\n #include <wallet/load.h>\n+#include <wallet/rpcsigner.h>\n #include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n@@ -518,6 +519,15 @@ class WalletClientImpl : public WalletClient\n             }, command.argNames, command.unique_id);\n             m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n         }\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        for (const CRPCCommand& command : GetSignerRPCCommands()) {\n+            m_rpc_commands.emplace_back(command.category, command.name, [this, &command](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n+                return command.actor({request, m_context}, result, last_handler);\n+            }, command.argNames, command.unique_id);\n+            m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n+        }\n+#endif\n     }\n     bool verify() override { return VerifyWallets(*m_context.chain); }\n     bool load() override { return LoadWallets(*m_context.chain); }"
      },
      {
        "sha": "d2478908dff13138173fcf866fa09fae90fc088d",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07b7c940a7da138d55a484ef83fee19ebf58a867/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07b7c940a7da138d55a484ef83fee19ebf58a867/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=07b7c940a7da138d55a484ef83fee19ebf58a867",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2018-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <rpc/server.h>\n+#include <util/strencodings.h>\n+#include <wallet/rpcsigner.h>\n+#include <wallet/wallet.h>\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+\n+// CRPCCommand table won't compile with an empty array\n+static RPCHelpMan dummy()\n+{\n+    return RPCHelpMan{\"dummy\",\n+                \"\\nDoes nothing.\\n\"\n+                \"\",\n+                {},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n+                RPCExamples{\"\"},\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    return NullUniValue;\n+},\n+    };\n+}\n+\n+Span<const CRPCCommand> GetSignerRPCCommands()\n+{\n+// clang-format off\n+static const CRPCCommand commands[] =\n+{ // category              actor (function)\n+  // --------------------- ------------------------\n+  { \"signer\",              &dummy,                },\n+};\n+// clang-format on\n+    return MakeSpan(commands);\n+}\n+\n+\n+#endif // ENABLE_EXTERNAL_SIGNER"
      },
      {
        "sha": "f3ab83c4288f808f4fc1e62737fd9631de0cf568",
        "filename": "src/wallet/rpcsigner.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07b7c940a7da138d55a484ef83fee19ebf58a867/src/wallet/rpcsigner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07b7c940a7da138d55a484ef83fee19ebf58a867/src/wallet/rpcsigner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.h?ref=07b7c940a7da138d55a484ef83fee19ebf58a867",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2018-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_RPCSIGNER_H\n+#define BITCOIN_WALLET_RPCSIGNER_H\n+\n+#include <span.h>\n+#include <util/system.h>\n+#include <vector>\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+\n+class CRPCCommand;\n+\n+namespace interfaces {\n+class Chain;\n+class Handler;\n+}\n+\n+Span<const CRPCCommand> GetSignerRPCCommands();\n+\n+#endif // ENABLE_EXTERNAL_SIGNER\n+\n+#endif //BITCOIN_WALLET_RPCSIGNER_H"
      },
      {
        "sha": "de21f437471074689934e7e7f265cf3079330e36",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07b7c940a7da138d55a484ef83fee19ebf58a867/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07b7c940a7da138d55a484ef83fee19ebf58a867/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=07b7c940a7da138d55a484ef83fee19ebf58a867",
        "patch": "@@ -105,10 +105,13 @@ def test_categories(self):\n         if self.is_wallet_compiled():\n             components.append('Wallet')\n \n+        if self.is_external_signer_compiled():\n+            components.append('Signer')\n+\n         if self.is_zmq_compiled():\n             components.append('Zmq')\n \n-        assert_equal(titles, components)\n+        assert_equal(titles, sorted(components))\n \n     def dump_help(self):\n         dump_dir = os.path.join(self.options.tmpdir, 'rpc_help_dump')"
      }
    ]
  },
  {
    "sha": "2700f09c4130af6167ce71f46960e92ca800e205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzAwZjA5YzQxMzBhZjYxNjdjZTcxZjQ2OTYwZTkyY2E4MDBlMjA1",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-02-15T11:54:29Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:31Z"
      },
      "message": "rpc: signer: add enumeratesigners to list external signers",
      "tree": {
        "sha": "2b4c23317bc24a39e3e7e3dab598359249238613",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b4c23317bc24a39e3e7e3dab598359249238613"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2700f09c4130af6167ce71f46960e92ca800e205",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGcACgkQV/+b28ww\nEAm4zQ/5Ac0ye/jXJUil2l1x7BFoiiYpP0v6hx3D6bsYNuoaOG4SmFaadNI3N53r\nSvAlhYEPWbtAQ/TLpq0pvB03eUTb1Kh9+PaVhhhW9y4TcCtXZg/T7Hntt4rxIYDZ\nN/TWNQvjUhsB+OJ6u70zm/nAG/vSLb1nY84pIRcI/43Z70DXjpjUGkrMRDbKucfx\neE7XU96dUe9S9vN4pqrhs7fG59EB9UX7x6HUBEklHHRomx9Hil0M7R5/G1GFdkIk\nlUFJxLv48AJbostUKYL95xsTUXgOcBnH4aHrbTTUXX6eNtx8R1tEleFB1Gn7aWZs\ntWFLX+rKcUu7LRGs4Up2YF2jeKWhzFSB5/gPezdIto5rxVrYc0BaIZmvEU1tA0f7\nf/J2UOxTy/rjJikUBqpODD7BjCOt7f19OnUACp9UyTLg7tcgAd6wKXQO7zz1tLbz\n+/buaQEip/oEqp2UxfCR3rxj0iw33DIDjUGvp06BHeYI7CkRUx/ol2mBu5VPdY/7\nDl7He2zpIDy9jaOIzfEBciYjX6LM3vTe6mpYdKtru9Sq0awB1z4o1+hhDPiPJV8w\n2bPQ0WqGgSHgiMpESCgklWHwkFoTxExFnR0DkD8zJXXLOlllkfao6P4Mc04vso7M\nMCE6wU9h7ZnSPnteJ/18I1QOaS6TjKwPLXyfaoKV4/mUupXNWtY=\n=BDaD\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b4c23317bc24a39e3e7e3dab598359249238613\nparent 07b7c940a7da138d55a484ef83fee19ebf58a867\nauthor Sjors Provoost <sjors@sprovoost.nl> 1550231669 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087271 +0100\n\nrpc: signer: add enumeratesigners to list external signers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2700f09c4130af6167ce71f46960e92ca800e205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2700f09c4130af6167ce71f46960e92ca800e205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2700f09c4130af6167ce71f46960e92ca800e205/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07b7c940a7da138d55a484ef83fee19ebf58a867",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07b7c940a7da138d55a484ef83fee19ebf58a867",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07b7c940a7da138d55a484ef83fee19ebf58a867"
      }
    ],
    "stats": {
      "total": 173,
      "additions": 157,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c06b178bc1bf3e2ff5ebbd563e176f04f59fb15f",
        "filename": "src/wallet/external_signer.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 2,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2700f09c4130af6167ce71f46960e92ca800e205/src/wallet/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2700f09c4130af6167ce71f46960e92ca800e205/src/wallet/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.cpp?ref=2700f09c4130af6167ce71f46960e92ca800e205",
        "patch": "@@ -2,7 +2,57 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n #include <wallet/external_signer.h>\n-#include <util/system.h>\n \n-ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint): m_command(command), m_fingerprint(fingerprint) {}\n+ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, std::string chain, std::string name): m_command(command), m_fingerprint(fingerprint), m_chain(chain), m_name(name) {}\n+\n+const std::string ExternalSigner::NetworkArg() const\n+{\n+    return \" --chain \" + m_chain;\n+}\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+\n+bool ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, std::string chain, bool ignore_errors)\n+{\n+    // Call <command> enumerate\n+    const UniValue result = RunCommandParseJSON(command + \" enumerate\");\n+    if (!result.isArray()) {\n+        if (ignore_errors) return false;\n+        throw ExternalSignerException(strprintf(\"'%s' received invalid response, expected array of signers\", command));\n+    }\n+    for (UniValue signer : result.getValues()) {\n+        // Check for error\n+        const UniValue& error = find_value(signer, \"error\");\n+        if (!error.isNull()) {\n+            if (ignore_errors) return false;\n+            if (!error.isStr()) {\n+                throw ExternalSignerException(strprintf(\"'%s' error\", command));\n+            }\n+            throw ExternalSignerException(strprintf(\"'%s' error: %s\", command, error.getValStr()));\n+        }\n+        // Check if fingerprint is present\n+        const UniValue& fingerprint = find_value(signer, \"fingerprint\");\n+        if (fingerprint.isNull()) {\n+            if (ignore_errors) return false;\n+            throw ExternalSignerException(strprintf(\"'%s' received invalid response, missing signer fingerprint\", command));\n+        }\n+        std::string fingerprintStr = fingerprint.get_str();\n+        // Skip duplicate signer\n+        bool duplicate = false;\n+        for (ExternalSigner signer : signers) {\n+            if (signer.m_fingerprint.compare(fingerprintStr) == 0) duplicate = true;\n+        }\n+        if (duplicate) break;\n+        std::string name = \"\";\n+        const UniValue& model_field = find_value(signer, \"model\");\n+        if (model_field.isStr() && model_field.getValStr() != \"\") {\n+            name += model_field.getValStr();\n+        }\n+        signers.push_back(ExternalSigner(command, fingerprintStr, chain, name));\n+    }\n+    return true;\n+}\n+\n+#endif"
      },
      {
        "sha": "9d32fe1e04a21064b42fd629f6749ce5688899f6",
        "filename": "src/wallet/external_signer.h",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2700f09c4130af6167ce71f46960e92ca800e205/src/wallet/external_signer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2700f09c4130af6167ce71f46960e92ca800e205/src/wallet/external_signer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.h?ref=2700f09c4130af6167ce71f46960e92ca800e205",
        "patch": "@@ -8,6 +8,7 @@\n #include <stdexcept>\n #include <string>\n #include <univalue.h>\n+#include <util/system.h>\n \n class ExternalSignerException : public std::runtime_error {\n public:\n@@ -25,10 +26,30 @@ class ExternalSigner\n public:\n     //! @param[in] command      the command which handles interaction with the external signer\n     //! @param[in] fingerprint  master key fingerprint of the signer\n-    ExternalSigner(const std::string& command, const std::string& fingerprint);\n+    //! @param[in] chain        \"main\", \"test\", \"regtest\" or \"signet\"\n+    //! @param[in] name         device name\n+    ExternalSigner(const std::string& command, const std::string& fingerprint, std::string chain, std::string name);\n \n     //! Master key fingerprint of the signer\n     std::string m_fingerprint;\n+\n+    //! Bitcoin mainnet, testnet, etc\n+    std::string m_chain;\n+\n+    //! Name of signer\n+    std::string m_name;\n+\n+    const std::string NetworkArg() const;\n+\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    //! Obtain a list of signers. Calls `<command> enumerate`.\n+    //! @param[in]              command the command which handles interaction with the external signer\n+    //! @param[in,out] signers  vector to which new signers (with a unique master key fingerprint) are added\n+    //! @param chain            \"main\", \"test\", \"regtest\" or \"signet\"\n+    //! @param[out] success     Boolean\n+    static bool Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, std::string chain, bool ignore_errors = false);\n+\n+#endif\n };\n \n #endif // BITCOIN_WALLET_EXTERNAL_SIGNER_H"
      },
      {
        "sha": "76f4f3c6aa0cbdb1f819f9e74d77d1c09392abdc",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 13,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2700f09c4130af6167ce71f46960e92ca800e205/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2700f09c4130af6167ce71f46960e92ca800e205/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=2700f09c4130af6167ce71f46960e92ca800e205",
        "patch": "@@ -2,36 +2,69 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparamsbase.h>\n #include <rpc/server.h>\n+#include <rpc/util.h>\n #include <util/strencodings.h>\n #include <wallet/rpcsigner.h>\n+#include <wallet/rpcwallet.h>\n #include <wallet/wallet.h>\n \n #ifdef ENABLE_EXTERNAL_SIGNER\n \n-// CRPCCommand table won't compile with an empty array\n-static RPCHelpMan dummy()\n+static RPCHelpMan enumeratesigners()\n {\n-    return RPCHelpMan{\"dummy\",\n-                \"\\nDoes nothing.\\n\"\n-                \"\",\n-                {},\n-                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n-                RPCExamples{\"\"},\n-        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n-{\n-    return NullUniValue;\n-},\n+    return RPCHelpMan{\n+        \"enumeratesigners\",\n+        \"Returns a list of external signers from -signer.\",\n+        {},\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::ARR, \"signers\", /* optional */ false, \"\",\n+                {\n+                    {RPCResult::Type::STR_HEX, \"masterkeyfingerprint\", \"Master key fingerprint\"},\n+                    {RPCResult::Type::STR, \"name\", \"Device name\"},\n+                },\n+                }\n+            }\n+        },\n+        RPCExamples{\"\"},\n+        [](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+\n+            const std::string command = gArgs.GetArg(\"-signer\", \"\");\n+            if (command == \"\") throw JSONRPCError(RPC_WALLET_ERROR, \"Error: restart bitcoind with -signer=<cmd>\");\n+            std::string chain = gArgs.GetChainName();\n+            UniValue signers_res = UniValue::VARR;\n+            try {\n+                std::vector<ExternalSigner> signers;\n+                ExternalSigner::Enumerate(command, signers, chain);\n+                for (ExternalSigner signer : signers) {\n+                    UniValue signer_res = UniValue::VOBJ;\n+                    signer_res.pushKV(\"fingerprint\", signer.m_fingerprint);\n+                    signer_res.pushKV(\"name\", signer.m_name);\n+                    signers_res.push_back(signer_res);\n+                }\n+            } catch (const ExternalSignerException& e) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, e.what());\n+            }\n+            UniValue result(UniValue::VOBJ);\n+            result.pushKV(\"signers\", signers_res);\n+            return result;\n+        }\n     };\n }\n \n Span<const CRPCCommand> GetSignerRPCCommands()\n {\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { // category              actor (function)\n   // --------------------- ------------------------\n-  { \"signer\",              &dummy,                },\n+  { \"signer\",              &enumeratesigners,      },\n };\n // clang-format on\n     return MakeSpan(commands);"
      },
      {
        "sha": "cde85bcd7340edd2504196ece01a9eaa16a63ab0",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2700f09c4130af6167ce71f46960e92ca800e205/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2700f09c4130af6167ce71f46960e92ca800e205/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=2700f09c4130af6167ce71f46960e92ca800e205",
        "patch": "@@ -17,10 +17,16 @@ def perform_pre_checks():\n             sys.stdout.write(mock_result[2:])\n             sys.exit(int(mock_result[0]))\n \n+def enumerate(args):\n+  sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\", \"type\": \"trezor\", \"model\": \"trezor_t\"}, {\"fingerprint\": \"00000002\"}]))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n subparsers = parser.add_subparsers(description='Commands', dest='command')\n subparsers.required = True\n \n+parser_enumerate = subparsers.add_parser('enumerate', help='list available signers')\n+parser_enumerate.set_defaults(func=enumerate)\n+\n args = parser.parse_args()\n \n perform_pre_checks()"
      },
      {
        "sha": "295cdcf398edeb47da8e82177096a481d76f835b",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2700f09c4130af6167ce71f46960e92ca800e205/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2700f09c4130af6167ce71f46960e92ca800e205/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=2700f09c4130af6167ce71f46960e92ca800e205",
        "patch": "@@ -48,5 +48,36 @@ def clear_mock_result(self, node):\n     def run_test(self):\n         self.log.debug(f\"-signer={self.mock_signer_path()}\")\n \n+        assert_raises_rpc_error(-4, 'Error: restart bitcoind with -signer=<cmd>',\n+            self.nodes[0].enumeratesigners\n+        )\n+\n+        # Handle script missing:\n+        assert_raises_rpc_error(-1, 'execve failed: No such file or directory',\n+            self.nodes[2].enumeratesigners\n+        )\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[1], \"2\")\n+        assert_raises_rpc_error(-1, 'RunCommandParseJSON error',\n+            self.nodes[1].enumeratesigners\n+        )\n+        self.clear_mock_result(self.nodes[1])\n+\n+        self.set_mock_result(self.nodes[1], '0 [{\"type\": \"trezor\", \"model\": \"trezor_t\", \"error\": \"fingerprint not found\"}]')\n+        assert_raises_rpc_error(-4, 'fingerprint not found',\n+            self.nodes[1].enumeratesigners\n+        )\n+        self.clear_mock_result(self.nodes[1])\n+\n+        # Create new wallets with private keys disabled:\n+        self.nodes[1].createwallet(wallet_name='hww', disable_private_keys=True, descriptors=True)\n+        hww = self.nodes[1].get_wallet_rpc('hww')\n+\n+        result = hww.enumeratesigners()\n+        assert_equal(len(result['signers']), 2)\n+        assert_equal(result['signers'][0][\"fingerprint\"], \"00000001\")\n+        assert_equal(result['signers'][0][\"name\"], \"trezor_t\")\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "2655197e1c2dea9536c32afe1482ced4a1f481e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjU1MTk3ZTFjMmRlYTk1MzZjMzJhZmUxNDgyY2VkNGExZjQ4MWU5",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T15:56:17Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:31Z"
      },
      "message": "rpc: add external_signer option to createwallet",
      "tree": {
        "sha": "05521f4f4c473073f68d6bfce518472b5b6cc0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05521f4f4c473073f68d6bfce518472b5b6cc0de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2655197e1c2dea9536c32afe1482ced4a1f481e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGcACgkQV/+b28ww\nEAkaZA/9FAOgf+BJfFRm/xUElszGhW/Uvy6UbwojxgtFiDG/pg2Ia//Vc2EI6/Z0\nYzkZX9tX5mYiub86NQtPFdGN+KhqtoSbOXO+gzUNGe0d9FZFXR7Y5keVC0xOsu8E\ngYIyd+1pDnreKUaFVi6/gqQdaggD/VzMttgGEqmFM21nTxKKhDCft5SMMVMU+eNs\n5gxGG38d6fYxyPuw0/9Gw9UtRPmg4tphVrr7GTUZy9d9TGlxYx/SAmGLbquvDQN1\nqPSC1QHtwAegaPB17qw4vqPMJCjA2xievrOiythywRr1nUq8YD4S716D11audiGJ\ny4sEcrKTptjtbAb+v7rPlXzbnuO6l3tvjfGFaUstuGtxaGhDXyLWl5j3PySQNWNL\nAda0S9Hbrx8FByWt59bAH01ptV3vgfz51tMSaaXzaV8Rbb4VNHudRDwsjAN3uTRW\nfdF78umLEbCP/jOshsGdg2fux1AynNW4GjXEctcoPbEP9CkVDLBUBLB8eXQCXe3Y\n9xqs36cvycs8vn2fBmK3Xio65glM3QHjmHofrY2lz94+VFeZR7fZSwU0KF5CNSUw\nsItiz/kpKX9Yv8Xf4mj7w0U2waCFTaB2GYurC5K6RU8uMCHnxDnNlV/2uN0STEEX\nSswnEhNVEUt2agur2BnTIIXZ7+1IcvH/r8+43FZ/Dxub/gT6mBM=\n=pYBA\n-----END PGP SIGNATURE-----",
        "payload": "tree 05521f4f4c473073f68d6bfce518472b5b6cc0de\nparent 2700f09c4130af6167ce71f46960e92ca800e205\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564934177 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087271 +0100\n\nrpc: add external_signer option to createwallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2655197e1c2dea9536c32afe1482ced4a1f481e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2655197e1c2dea9536c32afe1482ced4a1f481e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2655197e1c2dea9536c32afe1482ced4a1f481e9/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2700f09c4130af6167ce71f46960e92ca800e205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2700f09c4130af6167ce71f46960e92ca800e205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2700f09c4130af6167ce71f46960e92ca800e205"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 20,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2b593cd10bee13550bc1a26d26aeae457c950cb8",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2655197e1c2dea9536c32afe1482ced4a1f481e9/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2655197e1c2dea9536c32afe1482ced4a1f481e9/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=2655197e1c2dea9536c32afe1482ced4a1f481e9",
        "patch": "@@ -183,6 +183,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 4, \"avoid_reuse\"},\n     { \"createwallet\", 5, \"descriptors\"},\n     { \"createwallet\", 6, \"load_on_startup\"},\n+    { \"createwallet\", 7, \"external_signer\"},\n     { \"loadwallet\", 1, \"load_on_startup\"},\n     { \"unloadwallet\", 1, \"load_on_startup\"},\n     { \"getnodeaddresses\", 0, \"count\"},"
      },
      {
        "sha": "9d61f6fbe202c6ce274035e31484858cfdf17c94",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2655197e1c2dea9536c32afe1482ced4a1f481e9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2655197e1c2dea9536c32afe1482ced4a1f481e9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2655197e1c2dea9536c32afe1482ced4a1f481e9",
        "patch": "@@ -2726,6 +2726,7 @@ static RPCHelpMan createwallet()\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n             {\"descriptors\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n             {\"load_on_startup\", RPCArg::Type::BOOL, /* default */ \"null\", \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n+            {\"external_signer\", RPCArg::Type::BOOL, /* default */ \"false\", \"Use an external signer such as a hardware wallet. Requires -signer to be configured. Wallet creation will fail if keys cannot be fetched. Requires disable_private_keys and descriptors set to true.\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n@@ -2770,6 +2771,13 @@ static RPCHelpMan createwallet()\n         flags |= WALLET_FLAG_DESCRIPTORS;\n         warnings.emplace_back(Untranslated(\"Wallet is an experimental descriptor wallet\"));\n     }\n+    if (!request.params[7].isNull() && request.params[7].get_bool()) {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        flags |= WALLET_FLAG_EXTERNAL_SIGNER;\n+#else\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Configure with --enable-external-signer to use this\");\n+#endif\n+    }\n \n #ifndef USE_BDB\n     if (!(flags & WALLET_FLAG_DESCRIPTORS)) {"
      },
      {
        "sha": "ce9c1bc0245e9fb61f0d04d9e958057ca51d703a",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2655197e1c2dea9536c32afe1482ced4a1f481e9/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2655197e1c2dea9536c32afe1482ced4a1f481e9/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=2655197e1c2dea9536c32afe1482ced4a1f481e9",
        "patch": "@@ -678,10 +678,10 @@ def __init__(self, rpc, cli=False, descriptors=False):\n     def __getattr__(self, name):\n         return getattr(self.rpc, name)\n \n-    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase='', avoid_reuse=None, descriptors=None, load_on_startup=None):\n+    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase='', avoid_reuse=None, descriptors=None, load_on_startup=None, external_signer=None):\n         if descriptors is None:\n             descriptors = self.descriptors\n-        return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors, load_on_startup)\n+        return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors, load_on_startup, external_signer)\n \n     def importprivkey(self, privkey, label=None, rescan=None):\n         wallet_info = self.getwalletinfo()"
      },
      {
        "sha": "10795758e9c7b489fae9b18e7e39c06f3d760fc2",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2655197e1c2dea9536c32afe1482ced4a1f481e9/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2655197e1c2dea9536c32afe1482ced4a1f481e9/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=2655197e1c2dea9536c32afe1482ced4a1f481e9",
        "patch": "@@ -70,8 +70,15 @@ def run_test(self):\n         )\n         self.clear_mock_result(self.nodes[1])\n \n-        # Create new wallets with private keys disabled:\n-        self.nodes[1].createwallet(wallet_name='hww', disable_private_keys=True, descriptors=True)\n+        # Create new wallets for an external signer.\n+        # disable_private_keys and descriptors must be true:\n+        assert_raises_rpc_error(-4, \"Private keys must be disabled when using an external signer\", self.nodes[1].createwallet, wallet_name='not_hww', disable_private_keys=False, descriptors=True, external_signer=True)\n+        if self.is_bdb_compiled():\n+            assert_raises_rpc_error(-4, \"Descriptor support must be enabled when using an external signer\", self.nodes[1].createwallet, wallet_name='not_hww', disable_private_keys=True, descriptors=False, external_signer=True)\n+        else:\n+            assert_raises_rpc_error(-4, \"Compiled without bdb support (required for legacy wallets)\", self.nodes[1].createwallet, wallet_name='not_hww', disable_private_keys=True, descriptors=False, external_signer=True)\n+\n+        self.nodes[1].createwallet(wallet_name='hww', disable_private_keys=True, descriptors=True, external_signer=True)\n         hww = self.nodes[1].get_wallet_rpc('hww')\n \n         result = hww.enumeratesigners()"
      }
    ]
  },
  {
    "sha": "259f52cc33817a00b91ec9c7d078c07b88db7ab4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTlmNTJjYzMzODE3YTAwYjkxZWM5YzdkMDc4YzA3Yjg4ZGI3YWI0",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T15:56:39Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:31Z"
      },
      "message": "test: external_signer wallet flag is immutable",
      "tree": {
        "sha": "3ac35151c7e43f0b2ed2d4a39b0138de23ea6e42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ac35151c7e43f0b2ed2d4a39b0138de23ea6e42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/259f52cc33817a00b91ec9c7d078c07b88db7ab4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGcACgkQV/+b28ww\nEAnvZQ//XrU9tgbpyHg6SHc9A2zGSqng3ZLsEOjY4i3lzOew0UB2d8WcoAl+jHuh\n4hRZRY4jjE/Phg2AEq5iEnRFeWLj78NCGYJkTi7/3D7fNmyGRKhRVJVva9gCXGHe\nd6XPujPP2Mn/KWBGokxSTRi0NyBriaJ05P5wLEUky5SMTAaDx9ueS9PMjBY9tyWB\nExBteTzp3ds+vcEn39Zoz3Fk7b6SU/MhaxKDMpKLcnW+2TrMYxAINm+VpFbqlJXe\nhNTXV8XyDaTzKHeFNaf2pXWnfT9sE6YUxVk+Rf6EoZ+2DouOxt43jtS65ikPeICb\neLZoJfbAb/+ySMvEQA6+5xffAv4cndbvrzrICrBWEhYO+TAPQ3ACYqkwsVKaKVK/\nGy5ZhmJg6KAxlu1mqT2owZkbgIBchz/+RKLFu4FypDp8JYrNoTg1nu2SqoIonS5H\nFEmTIkfFy3ukgfctoSsDqJp9Zn+kaLqdekk/Ruba56ReiB1g6QRnQTRKCH4v1QIN\nW1+GEZpwQC256fw3HEqREjvK9nNgvN0dHgM+uxCkyCqEZafgWh5WRHJlGqQB+zLU\nViFVjMB6bzGFKh+2qAirqd4tscBwAf4ufCAPTtesxtikXNY4qlxfHI0s+NfXDpO9\nOO0OrAkyzi6Z7Pw4Yd6unu27lUwsJ+gHpV1kitQJwux2TWRrf8w=\n=Igh8\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ac35151c7e43f0b2ed2d4a39b0138de23ea6e42\nparent 2655197e1c2dea9536c32afe1482ced4a1f481e9\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564934199 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087271 +0100\n\ntest: external_signer wallet flag is immutable\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/259f52cc33817a00b91ec9c7d078c07b88db7ab4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/259f52cc33817a00b91ec9c7d078c07b88db7ab4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/259f52cc33817a00b91ec9c7d078c07b88db7ab4/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2655197e1c2dea9536c32afe1482ced4a1f481e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2655197e1c2dea9536c32afe1482ced4a1f481e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2655197e1c2dea9536c32afe1482ced4a1f481e9"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d46b3899cca17fc411783cd010875b3e28df8204",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/259f52cc33817a00b91ec9c7d078c07b88db7ab4/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/259f52cc33817a00b91ec9c7d078c07b88db7ab4/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=259f52cc33817a00b91ec9c7d078c07b88db7ab4",
        "patch": "@@ -86,5 +86,10 @@ def run_test(self):\n         assert_equal(result['signers'][0][\"fingerprint\"], \"00000001\")\n         assert_equal(result['signers'][0][\"name\"], \"trezor_t\")\n \n+        # Flag can't be set afterwards (could be added later for non-blank descriptor based watch-only wallets)\n+        self.nodes[1].createwallet(wallet_name='not_hww', disable_private_keys=True, descriptors=True, external_signer=False)\n+        not_hww = self.nodes[1].get_wallet_rpc('not_hww')\n+        assert_raises_rpc_error(-8, \"Wallet flag is immutable: external_signer\", not_hww.setwalletflag, \"external_signer\", True)\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "fc5da520f5c72287f59823b8a6d748dda49c574a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzVkYTUyMGY1YzcyMjg3ZjU5ODIzYjhhNmQ3NDhkZGE0OWM1NzRh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-31T09:27:27Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:31Z"
      },
      "message": "wallet: add GetExternalSigner()",
      "tree": {
        "sha": "bab02a2b79bf6babc420fd7969f3ae4a6a7295b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bab02a2b79bf6babc420fd7969f3ae4a6a7295b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc5da520f5c72287f59823b8a6d748dda49c574a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGcACgkQV/+b28ww\nEAmJuBAAijA4saSCN9+5janW7gG+8japXaVsjngtdGoYbZQbMzE8V5eCkVk/r9Jl\nsZ+lDrrGBjlgH4sCHSj6QSENaLpNTSOm/semv0BzQAnCtsKZmJrUU0q1ByicZPLr\n5aviIDVrb8offZ7a3BdHCeSvKYrbfesmAx3c1euDlBQkwsmcC8uVYzVOrX6+mUeZ\nfkZkDxvLkWeucrZYwP20s/qsSVi8Zb65rrX1rC+/2aSNJOuGpz+LXB+EAFSIBKHl\nnp7nmZrE7sjJyGqdi3OArZhbIEE86TgLpgzosxGkuBN9bkUvgMizMKC/mzT32E07\nyJJ4r9tyzbpw8wRm+mq2wcfE4Yl4f462FhrP+7Ewm//9Que8RvYoA7bntRm/SuSq\nLe8/s6bX/X7qcDTKft/z4k3sPrE8LxVSosBO7+fSVnTO7Uk0dgJMTauN4O154hBa\nDqzWFbk9Po8V9aizcUx/uX7X9Gtt1e5wbZcpGep2YaidVJnGLIUxdEj2j4QGoXl8\nf88JkKggD9PWp3BwSjYNgIFRbk1rP5IH52affWqwH4RpkPWBSX9Nynm/MkDKk5bi\n2zxc0zxaRiDwzdI892Hqx32T/7L2hXAlzw+cXHhLU3M3jrigENPBxlwsjJo/zWyc\nh3ecO0dYsgNYiHURi5Zw3bFTjerJ+W5zJFx0RpOV+7BKFKjWuWY=\n=Vn9n\n-----END PGP SIGNATURE-----",
        "payload": "tree bab02a2b79bf6babc420fd7969f3ae4a6a7295b5\nparent 259f52cc33817a00b91ec9c7d078c07b88db7ab4\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572514047 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087271 +0100\n\nwallet: add GetExternalSigner()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5da520f5c72287f59823b8a6d748dda49c574a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc5da520f5c72287f59823b8a6d748dda49c574a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5da520f5c72287f59823b8a6d748dda49c574a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "259f52cc33817a00b91ec9c7d078c07b88db7ab4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/259f52cc33817a00b91ec9c7d078c07b88db7ab4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/259f52cc33817a00b91ec9c7d078c07b88db7ab4"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b8bd69f941566a4f1eb03cfb6255c10b79a42d9e",
        "filename": "src/wallet/external_signer_scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5da520f5c72287f59823b8a6d748dda49c574a/src/wallet/external_signer_scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5da520f5c72287f59823b8a6d748dda49c574a/src/wallet/external_signer_scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.cpp?ref=fc5da520f5c72287f59823b8a6d748dda49c574a",
        "patch": "@@ -33,4 +33,14 @@ bool ExternalSignerScriptPubKeyMan::SetupDescriptor(std::unique_ptr<Descriptor>\n     return true;\n }\n \n+ExternalSigner ExternalSignerScriptPubKeyMan::GetExternalSigner() {\n+    const std::string command = gArgs.GetArg(\"-signer\", \"\");\n+    if (command == \"\") throw std::runtime_error(std::string(__func__) + \": restart bitcoind with -signer=<cmd>\");\n+    std::vector<ExternalSigner> signers;\n+    ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n+    if (signers.empty()) throw std::runtime_error(std::string(__func__) + \": No external signers found\");\n+    // TODO: add fingerprint argument in case of multiple signers\n+    return signers[0];\n+}\n+\n #endif"
      },
      {
        "sha": "ddb74a710b14e17d39de2e9ab80b515add87e4c3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5da520f5c72287f59823b8a6d748dda49c574a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5da520f5c72287f59823b8a6d748dda49c574a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fc5da520f5c72287f59823b8a6d748dda49c574a",
        "patch": "@@ -3573,6 +3573,19 @@ void ReserveDestination::ReturnDestination()\n     address = CNoDestination();\n }\n \n+#ifdef ENABLE_EXTERNAL_SIGNER\n+ExternalSigner CWallet::GetExternalSigner()\n+{\n+    const std::string command = gArgs.GetArg(\"-signer\", \"\");\n+    if (command == \"\") throw std::runtime_error(std::string(__func__) + \": restart bitcoind with -signer=<cmd>\");\n+    std::vector<ExternalSigner> signers;\n+    ExternalSigner::Enumerate(command, signers, Params().NetworkIDString());\n+    if (signers.empty()) throw std::runtime_error(std::string(__func__) + \": No external signers found\");\n+    // TODO: add fingerprint argument in case of multiple signers\n+    return signers[0];\n+}\n+#endif\n+\n void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "3c27aee488745066d62787208464812aa3f65070",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc5da520f5c72287f59823b8a6d748dda49c574a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc5da520f5c72287f59823b8a6d748dda49c574a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fc5da520f5c72287f59823b8a6d748dda49c574a",
        "patch": "@@ -839,6 +839,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool separate_coins, const CFeeRate& effective_feerate, const CFeeRate& long_term_feerate, const CoinEligibilityFilter& filter, bool positive_only) const;\n \n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    ExternalSigner GetExternalSigner() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+#endif\n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  },
  {
    "sha": "7ebc7c0215979c53b92a436acc8b5b607b8d735a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWJjN2MwMjE1OTc5YzUzYjkyYTQzNmFjYzhiNWI2MDdiOGQ3MzVh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-10-31T09:27:47Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:31Z"
      },
      "message": "wallet: ExternalSigner: add GetDescriptors method",
      "tree": {
        "sha": "edd6c0ce805c638c140c454e01920c785d8a5d01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edd6c0ce805c638c140c454e01920c785d8a5d01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ebc7c0215979c53b92a436acc8b5b607b8d735a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGcACgkQV/+b28ww\nEAlpWw//TSxW9D1hFyDjrRGf1ewA47Mg1m6H8YbzZvdD96ACJjJtFHWNPqr/7Zpb\nebI8h8/31BcUKqGekt9JHEL1CaXZTn+sEx6AoUmNgKeUIXtWb833gsNN+3ySpPQR\nd0Ny/l4bG4A68XroaqHe9/hbXKtCWtOC7uxWXgDVpsZZraoV7LGU4G038VNC2Qez\n43qQWwd4VatJJLQZGS3xYTTcRcgwvkzTpFZbdB0ACb2E4BJv3VAjbWFSPBFH5zFF\nPKZ9vmgop2THfaRDKYRsCxAK9SaHBe+fT2f8TK99tnBA+Bn5nyPVvwOCYic1vywz\nELORjfgDEzU5zEvACz1aeUZzx69whrT+O7YNTRvGqS3l1Itoqvdu2pM9LrfqEzYu\nRui2PMKEJONmAPyEY0guWvfR6bgsDFAKPzZMDBTU+QNyOlAZxYyME//Qq8VF5+He\nxOE0IRQl3U36AhpB0wIxs6a6t6IjitKhJTWMDKgZs/YgYS2chCHH8fMD9DxdEose\nPVWZShHOYK7a1C+LqCRdAF8CstluQKcBflRr8j9boUNdC1RMyoUgnaHdDKCWK587\nZ+EKYXE01XK78QrgmDiIN2S7ZCf9L4dNY+HDI4qsoQPSGOWiC02Z/gql1Z5R4NBz\nv2Yf7Vi6+dSKzdWGkDhG3cqdWNBtb8J45WEW7IQSufPPacMk+Ss=\n=i5px\n-----END PGP SIGNATURE-----",
        "payload": "tree edd6c0ce805c638c140c454e01920c785d8a5d01\nparent fc5da520f5c72287f59823b8a6d748dda49c574a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1572514067 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087271 +0100\n\nwallet: ExternalSigner: add GetDescriptors method\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebc7c0215979c53b92a436acc8b5b607b8d735a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ebc7c0215979c53b92a436acc8b5b607b8d735a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebc7c0215979c53b92a436acc8b5b607b8d735a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc5da520f5c72287f59823b8a6d748dda49c574a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc5da520f5c72287f59823b8a6d748dda49c574a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc5da520f5c72287f59823b8a6d748dda49c574a"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 130,
      "deletions": 21
    },
    "files": [
      {
        "sha": "ec915d5c5eb6d266903b645d5b2e07d2d170cc84",
        "filename": "src/wallet/external_signer.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.cpp?ref=7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "patch": "@@ -55,4 +55,9 @@ bool ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalS\n     return true;\n }\n \n+UniValue ExternalSigner::GetDescriptors(int account)\n+{\n+    return RunCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + NetworkArg() + \" getdescriptors --account \" + strprintf(\"%d\", account));\n+}\n+\n #endif"
      },
      {
        "sha": "944dd7d5ef7be0f5ea86f61e29294be86d2ec6b9",
        "filename": "src/wallet/external_signer.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/external_signer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/external_signer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.h?ref=7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "patch": "@@ -49,6 +49,12 @@ class ExternalSigner\n     //! @param[out] success     Boolean\n     static bool Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, std::string chain, bool ignore_errors = false);\n \n+    //! Get receive and change Descriptor(s) from device for a given account.\n+    //! Calls `<command> getdescriptors --account <account>`\n+    //! @param[in] account  which BIP32 account to use (e.g. `m/44'/0'/account'`)\n+    //! @param[out] UniValue see doc/external-signer.md\n+    UniValue GetDescriptors(int account);\n+\n #endif\n };\n "
      },
      {
        "sha": "cef0a18075c60f3904674b441ea5e77d49dadc11",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "patch": "@@ -22,6 +22,9 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n   * Returns false if already setup or setup fails, true if setup is successful\n   */\n   bool SetupDescriptor(std::unique_ptr<Descriptor>desc);\n+\n+  static ExternalSigner GetExternalSigner();\n+\n };\n #endif\n "
      },
      {
        "sha": "b8e34fbac350f602ee07f2f65725f16d0e5a0d10",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "patch": "@@ -582,6 +582,11 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     //! Setup descriptors based on the given CExtkey\n     bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type);\n \n+    /** Provide a descriptor at setup time\n+    * Returns false if already setup or setup fails, true if setup is successful\n+    */\n+    bool SetupDescriptor(std::unique_ptr<Descriptor>desc);\n+\n     bool HavePrivateKeys() const override;\n \n     int64_t GetOldestKeyPoolTime() const override;"
      },
      {
        "sha": "795299d103062f25d746d9431f8ee4a609a4ea1c",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 21,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebc7c0215979c53b92a436acc8b5b607b8d735a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "patch": "@@ -14,6 +14,7 @@\n #include <key.h>\n #include <key_io.h>\n #include <optional.h>\n+#include <outputtype.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <primitives/block.h>\n@@ -3864,7 +3865,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             walletInstance->SetupLegacyScriptPubKeyMan();\n         }\n \n-        if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n+        if ((wallet_creation_flags & WALLET_FLAG_EXTERNAL_SIGNER) || !(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n             if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n                 walletInstance->SetupDescriptorScriptPubKeyMans();\n@@ -4488,32 +4489,65 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n {\n     AssertLockHeld(cs_wallet);\n \n-    // Make a seed\n-    CKey seed_key;\n-    seed_key.MakeNewKey(true);\n-    CPubKey seed = seed_key.GetPubKey();\n-    assert(seed_key.VerifyPubKey(seed));\n+    if (!IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n+        // Make a seed\n+        CKey seed_key;\n+        seed_key.MakeNewKey(true);\n+        CPubKey seed = seed_key.GetPubKey();\n+        assert(seed_key.VerifyPubKey(seed));\n \n-    // Get the extended key\n-    CExtKey master_key;\n-    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+        // Get the extended key\n+        CExtKey master_key;\n+        master_key.SetSeed(seed_key.begin(), seed_key.size());\n \n-    for (bool internal : {false, true}) {\n-        for (OutputType t : OUTPUT_TYPES) {\n-            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n-            if (IsCrypted()) {\n-                if (IsLocked()) {\n-                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+        for (bool internal : {false, true}) {\n+            for (OutputType t : OUTPUT_TYPES) {\n+                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, internal));\n+                if (IsCrypted()) {\n+                    if (IsLocked()) {\n+                        throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                    }\n+                    if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                        throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                    }\n                 }\n-                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n-                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                spk_manager->SetupDescriptorGeneration(master_key, t);\n+                uint256 id = spk_manager->GetID();\n+                m_spk_managers[id] = std::move(spk_manager);\n+                AddActiveScriptPubKeyMan(id, t, internal);\n+            }\n+        }\n+    } else {\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+        ExternalSigner signer = ExternalSignerScriptPubKeyMan::GetExternalSigner();\n+\n+        // TODO: add account parameter\n+        int account = 0;\n+        UniValue signer_res = signer.GetDescriptors(account);\n+\n+        if (!signer_res.isObject()) throw std::runtime_error(std::string(__func__) + \": Unexpected result\");\n+        for (bool internal : {false, true}) {\n+            const UniValue& descriptor_vals = find_value(signer_res, internal ? \"internal\" : \"receive\");\n+            if (!descriptor_vals.isArray()) throw std::runtime_error(std::string(__func__) + \": Unexpected result\");\n+            for (const UniValue& desc_val : descriptor_vals.get_array().getValues()) {\n+                std::string desc_str = desc_val.getValStr();\n+                FlatSigningProvider keys;\n+                std::string dummy_error;\n+                std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, dummy_error, false);\n+                if (!desc->GetOutputType()) {\n+                    continue;\n                 }\n+                OutputType t =  *desc->GetOutputType();\n+                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, internal));\n+                spk_manager->SetupDescriptor(std::move(desc));\n+                uint256 id = spk_manager->GetID();\n+                m_spk_managers[id] = std::move(spk_manager);\n+                AddActiveScriptPubKeyMan(id, t, internal);\n             }\n-            spk_manager->SetupDescriptorGeneration(master_key, t);\n-            uint256 id = spk_manager->GetID();\n-            m_spk_managers[id] = std::move(spk_manager);\n-            AddActiveScriptPubKeyMan(id, t, internal);\n         }\n+#else\n+        throw std::runtime_error(std::string(__func__) + \": Wallets with external signers require Boost::Process library.\");\n+#endif\n     }\n }\n "
      },
      {
        "sha": "aedab14cee2e65a7718f6f7f23ad6da588fadcfe",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebc7c0215979c53b92a436acc8b5b607b8d735a/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebc7c0215979c53b92a436acc8b5b607b8d735a/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "patch": "@@ -20,13 +20,37 @@ def perform_pre_checks():\n def enumerate(args):\n   sys.stdout.write(json.dumps([{\"fingerprint\": \"00000001\", \"type\": \"trezor\", \"model\": \"trezor_t\"}, {\"fingerprint\": \"00000002\"}]))\n \n+def getdescriptors(args):\n+    xpub = \"tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B\"\n+\n+    sys.stdout.write(json.dumps({\n+        \"receive\": [\n+            \"pkh([00000001/44'/1'/\" + args.account + \"']\" + xpub + \"/0/*)#vt6w3l3j\",\n+            \"sh(wpkh([00000001/49'/1'/\" + args.account + \"']\" + xpub + \"/0/*))#r0grqw5x\",\n+            \"wpkh([00000001/84'/1'/\" + args.account + \"']\" + xpub + \"/0/*)#x30uthjs\"\n+        ],\n+        \"internal\": [\n+            \"pkh([00000001/44'/1'/\" + args.account + \"']\" + xpub + \"/1/*)#all0v2p2\",\n+            \"sh(wpkh([00000001/49'/1'/\" + args.account + \"']\" + xpub + \"/1/*))#kwx4c3pe\",\n+            \"wpkh([00000001/84'/1'/\" + args.account + \"']\" + xpub + \"/1/*)#h92akzzg\"\n+        ]\n+    }))\n+\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n+parser.add_argument('--fingerprint')\n+parser.add_argument('--chain', default='main')\n+\n subparsers = parser.add_subparsers(description='Commands', dest='command')\n subparsers.required = True\n \n parser_enumerate = subparsers.add_parser('enumerate', help='list available signers')\n parser_enumerate.set_defaults(func=enumerate)\n \n+parser_getdescriptors = subparsers.add_parser('getdescriptors')\n+parser_getdescriptors.set_defaults(func=getdescriptors)\n+parser_getdescriptors.add_argument('--account', metavar='account')\n+\n args = parser.parse_args()\n \n perform_pre_checks()"
      },
      {
        "sha": "abbffe24d1b26e89565ced4f09458bf3171fb416",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ebc7c0215979c53b92a436acc8b5b607b8d735a/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ebc7c0215979c53b92a436acc8b5b607b8d735a/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "patch": "@@ -91,5 +91,37 @@ def run_test(self):\n         not_hww = self.nodes[1].get_wallet_rpc('not_hww')\n         assert_raises_rpc_error(-8, \"Wallet flag is immutable: external_signer\", not_hww.setwalletflag, \"external_signer\", True)\n \n+        # assert_raises_rpc_error(-4, \"Multiple signers found, please specify which to use\", wallet_name='not_hww', disable_private_keys=True, descriptors=True, external_signer=True)\n+\n+        # TODO: Handle error thrown by script\n+        # self.set_mock_result(self.nodes[1], \"2\")\n+        # assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+        #     self.nodes[1].createwallet, wallet_name='not_hww2', disable_private_keys=True, descriptors=True, external_signer=False\n+        # )\n+        # self.clear_mock_result(self.nodes[1])\n+\n+        assert_equal(hww.getwalletinfo()[\"keypoolsize\"], 3)\n+\n+        address1 = hww.getnewaddress(address_type=\"bech32\")\n+        assert_equal(address1, \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\")\n+        address_info = hww.getaddressinfo(address1)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], True)\n+        assert_equal(address_info['hdkeypath'], \"m/84'/1'/0'/0/0\")\n+\n+        address2 = hww.getnewaddress(address_type=\"p2sh-segwit\")\n+        assert_equal(address2, \"2N2gQKzjUe47gM8p1JZxaAkTcoHPXV6YyVp\")\n+        address_info = hww.getaddressinfo(address2)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], True)\n+        assert_equal(address_info['hdkeypath'], \"m/49'/1'/0'/0/0\")\n+\n+        address3 = hww.getnewaddress(address_type=\"legacy\")\n+        assert_equal(address3, \"n1LKejAadN6hg2FrBXoU1KrwX4uK16mco9\")\n+        address_info = hww.getaddressinfo(address3)\n+        assert_equal(address_info['solvable'], True)\n+        assert_equal(address_info['ismine'], True)\n+        assert_equal(address_info['hdkeypath'], \"m/44'/1'/0'/0/0\")\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "245b4457cf9265190a05529a0a97e1cb258cca8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDViNDQ1N2NmOTI2NTE5MGEwNTUyOWEwYTk3ZTFjYjI1OGNjYThh",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-02-19T13:33:37Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:31Z"
      },
      "message": "rpc: signerdisplayaddress",
      "tree": {
        "sha": "db47c62fb253880cbc1ed7b4284ac39b9782d5bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db47c62fb253880cbc1ed7b4284ac39b9782d5bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/245b4457cf9265190a05529a0a97e1cb258cca8a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGcACgkQV/+b28ww\nEAmN4w/9FXhm5EQUl3N7d1fsGjtxE+RpTW1PnRIX9T8Y1afIntKYITtQ16worObQ\nvkg8EsqEWdTQRlOkWxPNjhAZ9p5NOouWkVpnI7sZcXlmHIYWaZaRdYEqWu4t/Fmd\nUHA28oMY3h0/j+W2L2qrwGJxjv2qKramB/c7TdtMjonqDUd5h+jX/c1Vv1yz73EK\nRjlJ7e70BiUEtzjdfH09OzL4vaak+8qJr6qb1GFLtyExJPEWqluETCKyLhPY4Ths\ncpnxMhgALV+OSpNS+1owiiZeDIAVwcx2NM7C/H6eNLrK1tj/EtDBJN2M6fA5UMsv\n6J6r84Xdvy5vLQInvDjiYBSeCHHgj5IpRZmpHAKW5JwMbOZEhniRM5jIZKOodLEQ\ncGGKztdBfjZW/N/QKE/sLcqLP4kqgShbUad1zCFZXBj6rDy1nKCikpGUtk9G+L1A\nvL+kfhhfQ2SEMxVQkv+b1yavWmjmUpUdPefzSRmRsZmfzp1cKrsDBIo33t8yKVQu\nRJudDVDRvxKpiWsp7swfsNYpAIe1UKdnmyIeqTYD9APzRBqXPoMmwWyZvP0/isc1\nvzbF3OgzG842PQEUW8jZK5AlEJcj6/qrFdTgh5tGzgHI+88U6TL0MXuMcyrtNg0C\nFCtLjWoEJZXoaJxkXeHlFSWNlHM/C3hpkFHa4prIj9X7pWVLMO0=\n=X5/R\n-----END PGP SIGNATURE-----",
        "payload": "tree db47c62fb253880cbc1ed7b4284ac39b9782d5bc\nparent 7ebc7c0215979c53b92a436acc8b5b607b8d735a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1582119217 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087271 +0100\n\nrpc: signerdisplayaddress\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245b4457cf9265190a05529a0a97e1cb258cca8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/245b4457cf9265190a05529a0a97e1cb258cca8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245b4457cf9265190a05529a0a97e1cb258cca8a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ebc7c0215979c53b92a436acc8b5b607b8d735a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ebc7c0215979c53b92a436acc8b5b607b8d735a"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 134,
      "deletions": 0
    },
    "files": [
      {
        "sha": "baf97700e75254f4eb784437ac5eac08b23f66ed",
        "filename": "src/wallet/external_signer.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.cpp?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -55,6 +55,11 @@ bool ExternalSigner::Enumerate(const std::string& command, std::vector<ExternalS\n     return true;\n }\n \n+UniValue ExternalSigner::DisplayAddress(const std::string& descriptor) const\n+{\n+    return RunCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + NetworkArg() + \" displayaddress --desc \\\"\" + descriptor + \"\\\"\");\n+}\n+\n UniValue ExternalSigner::GetDescriptors(int account)\n {\n     return RunCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + NetworkArg() + \" getdescriptors --account \" + strprintf(\"%d\", account));"
      },
      {
        "sha": "198a939d3d569cad1f7c0745fbdce38e76a43ad0",
        "filename": "src/wallet/external_signer.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.h?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -49,6 +49,11 @@ class ExternalSigner\n     //! @param[out] success     Boolean\n     static bool Enumerate(const std::string& command, std::vector<ExternalSigner>& signers, std::string chain, bool ignore_errors = false);\n \n+    //! Display address on the device. Calls `<command> displayaddress --desc <descriptor>`.\n+    //! @param[in] descriptor Descriptor specifying which address to display.\n+    //!            Must include a public key or xpub, as well as key origin.\n+    UniValue DisplayAddress(const std::string& descriptor) const;\n+\n     //! Get receive and change Descriptor(s) from device for a given account.\n     //! Calls `<command> getdescriptors --account <account>`\n     //! @param[in] account  which BIP32 account to use (e.g. `m/44'/0'/account'`)"
      },
      {
        "sha": "a2071e521accec8abf66b4c8b8ade9f48453751c",
        "filename": "src/wallet/external_signer_scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer_scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer_scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.cpp?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -43,4 +43,39 @@ ExternalSigner ExternalSignerScriptPubKeyMan::GetExternalSigner() {\n     return signers[0];\n }\n \n+bool ExternalSignerScriptPubKeyMan::DisplayAddress(const CScript scriptPubKey, const ExternalSigner &signer) const\n+{\n+    // TODO: avoid the need to infer a descriptor from inside a descriptor wallet\n+    auto provider = GetSolvingProvider(scriptPubKey);\n+    auto descriptor = InferDescriptor(scriptPubKey, *provider);\n+\n+    signer.DisplayAddress(descriptor->ToString());\n+    // TODO inspect result\n+    return true;\n+}\n+\n+// If sign is true, transaction must previously have been filled\n+TransactionError ExternalSignerScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, int sighash_type, bool sign, bool bip32derivs, int* n_signed) const\n+{\n+    if (!sign) {\n+        return DescriptorScriptPubKeyMan::FillPSBT(psbt, sighash_type, false, bip32derivs, n_signed);\n+    }\n+\n+    // Already complete if every input is now signed\n+    bool complete = true;\n+    for (const auto& input : psbt.inputs) {\n+        // TODO: for multisig wallets, we should only care if all _our_ inputs are signed\n+        complete &= PSBTInputSigned(input);\n+    }\n+    if (complete) return TransactionError::OK;\n+\n+    std::string strFailReason;\n+    if(!GetExternalSigner().SignTransaction(psbt, strFailReason)) {\n+        tfm::format(std::cerr, \"Failed to sign: %s\\n\", strFailReason);\n+        return TransactionError::EXTERNAL_SIGNER_FAILED;\n+    }\n+    FinalizePSBT(psbt); // This won't work in a multisig setup\n+    return TransactionError::OK;\n+}\n+\n #endif"
      },
      {
        "sha": "1cde143ef9a2177e655aeb745be77cd2dc9add42",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -25,6 +25,7 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n \n   static ExternalSigner GetExternalSigner();\n \n+  bool DisplayAddress(const CScript scriptPubKey, const ExternalSigner &signer) const;\n };\n #endif\n "
      },
      {
        "sha": "607b778c6824f708f5db5564bdd927b89895ede6",
        "filename": "src/wallet/rpcsigner.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/rpcsigner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/rpcsigner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcsigner.cpp?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparamsbase.h>\n+#include <key_io.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <util/strencodings.h>\n@@ -57,6 +58,41 @@ static RPCHelpMan enumeratesigners()\n     };\n }\n \n+static RPCHelpMan signerdisplayaddress()\n+{\n+    return RPCHelpMan{\n+        \"signerdisplayaddress\",\n+        \"Display address on an external signer for verification.\\n\",\n+        {\n+            {\"address\",     RPCArg::Type::STR, RPCArg::Optional::NO, /* default_val */ \"\", \"bitcoin address to display\"},\n+        },\n+        RPCResult{RPCResult::Type::NONE,\"\",\"\"},\n+        RPCExamples{\"\"},\n+        [](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+            if (!wallet) return NullUniValue;\n+            CWallet* const pwallet = wallet.get();\n+\n+            LOCK(pwallet->cs_wallet);\n+\n+            CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+\n+            // Make sure the destination is valid\n+            if (!IsValidDestination(dest)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+            }\n+\n+            if (!pwallet->DisplayAddress(dest)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Failed to display address\");\n+            }\n+\n+            UniValue result(UniValue::VOBJ);\n+            result.pushKV(\"address\", request.params[0].get_str());\n+            return result;\n+        }\n+    };\n+}\n+\n Span<const CRPCCommand> GetSignerRPCCommands()\n {\n \n@@ -65,6 +101,7 @@ static const CRPCCommand commands[] =\n { // category              actor (function)\n   // --------------------- ------------------------\n   { \"signer\",              &enumeratesigners,      },\n+  { \"signer\",              &signerdisplayaddress,  },\n };\n // clang-format on\n     return MakeSpan(commands);"
      },
      {
        "sha": "7c15438067e7d4f155714b5e8be0ef4ea0e312aa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -3587,6 +3587,25 @@ ExternalSigner CWallet::GetExternalSigner()\n }\n #endif\n \n+bool CWallet::DisplayAddress(const CTxDestination& dest)\n+{\n+#ifdef ENABLE_EXTERNAL_SIGNER\n+    CScript scriptPubKey = GetScriptForDestination(dest);\n+    const auto spk_man = GetScriptPubKeyMan(scriptPubKey);\n+    if (spk_man == nullptr) {\n+        return false;\n+    }\n+    auto signer_spk_man = dynamic_cast<ExternalSignerScriptPubKeyMan*>(spk_man);\n+    if (signer_spk_man == nullptr) {\n+        return false;\n+    }\n+    ExternalSigner signer = GetExternalSigner(); // TODO: move signer in spk_man\n+    return signer_spk_man->DisplayAddress(scriptPubKey, signer);\n+#else\n+    return false;\n+#endif\n+}\n+\n void CWallet::LockCoin(const COutPoint& output)\n {\n     AssertLockHeld(cs_wallet);"
      },
      {
        "sha": "eb797938cd4f708913481078cdec570da427a34d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -842,6 +842,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n #ifdef ENABLE_EXTERNAL_SIGNER\n     ExternalSigner GetExternalSigner() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n #endif\n+    /** Display address on an external signer. Returns false if external signer support is not compiled */\n+    bool DisplayAddress(const CTxDestination& dest) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      },
      {
        "sha": "4036c785b3869480937e2025a7c0d1537022e6bb",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -37,6 +37,20 @@ def getdescriptors(args):\n     }))\n \n \n+def displayaddress(args):\n+    # Several descriptor formats are acceptable, so allowing for potential\n+    # changes to InferDescriptor:\n+    if args.fingerprint != \"00000001\":\n+        return sys.stdout.write(json.dumps({\"error\": \"Unexpected fingerprint\", \"fingerprint\": args.fingerprint}))\n+\n+    expected_desc = [\n+        \"wpkh([00000001/84'/1'/0'/0/0]02c97dc3f4420402e01a113984311bf4a1b8de376cac0bdcfaf1b3ac81f13433c7)#0yneg42r\"\n+    ]\n+    if args.desc not in expected_desc:\n+        return sys.stdout.write(json.dumps({\"error\": \"Unexpected descriptor\", \"desc\": args.desc}))\n+\n+    return sys.stdout.write(json.dumps({\"address\": \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\"}))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n parser.add_argument('--fingerprint')\n parser.add_argument('--chain', default='main')\n@@ -51,6 +65,10 @@ def getdescriptors(args):\n parser_getdescriptors.set_defaults(func=getdescriptors)\n parser_getdescriptors.add_argument('--account', metavar='account')\n \n+parser_displayaddress = subparsers.add_parser('displayaddress', help='display address on signer')\n+parser_displayaddress.add_argument('--desc', metavar='desc')\n+parser_displayaddress.set_defaults(func=displayaddress)\n+\n args = parser.parse_args()\n \n perform_pre_checks()"
      },
      {
        "sha": "b39f1b4d9b03ad5253c98d48f5d8e357a703bf0e",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/245b4457cf9265190a05529a0a97e1cb258cca8a/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/245b4457cf9265190a05529a0a97e1cb258cca8a/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=245b4457cf9265190a05529a0a97e1cb258cca8a",
        "patch": "@@ -123,5 +123,16 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n         assert_equal(address_info['hdkeypath'], \"m/44'/1'/0'/0/0\")\n \n+        self.log.info('Test signerdisplayaddress')\n+        result = hww.signerdisplayaddress(address1)\n+        assert_equal(result, {\"address\": address1})\n+\n+        # Handle error thrown by script\n+        self.set_mock_result(self.nodes[1], \"2\")\n+        assert_raises_rpc_error(-1, 'RunCommandParseJSON error',\n+            hww.signerdisplayaddress, address1\n+        )\n+        self.clear_mock_result(self.nodes[1])\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGIwMTA3ZDY4YTkxZWQ0ZDFhNWM3OGM4Y2E3NjI1MTMyOWQzZjNj",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2019-08-04T21:26:01Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:32Z"
      },
      "message": "rpc: send: support external signer",
      "tree": {
        "sha": "351468ff53c287150cc6c060d874acb274fdc4f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/351468ff53c287150cc6c060d874acb274fdc4f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGgACgkQV/+b28ww\nEAkZwA//Sus1OjYFNBAFYvV+yJOB1ALJxafZYXJEOCDNT5TuCosmbQuo/cn5SVYK\nAjtwpm1lHAMjuxw+0pi8KLhadFsCFiZeIiNTXUlH5Be7a62R7JjstfkCJv/5W36u\nDxdyE5ca7wlb4rFcBriQFd4EiibojUqiNCJp8/gEoJyAwdT3QSCSL42LPynq4AcC\nybNjsEjrqrH/J+BCxJ3iEWJt7Q82wbMGJ+0MNBTQUiXKPi3vMqBkvmnN6pIq6KXr\n+H0lZqUbgPVC11Z6fMGOdpY4vXEj/waboH72iNVhbcuPAt7qx66J5jB6tfuh32nd\nxCmIkbPYsL6ORJWD6f2slbGxIsJYit/gBJQr4oW130N9BhF9CFFj7qAzBvsDyawL\nP4C4ZeDeXayAxcCaUgTTW1Kp1Y7txuZeswhd+BVoEJzmqenwnKi6q211Q/uYfcgC\nbI5SyUjNuK6LH4tVG0BDmOpMxTmR6l9xwsZx1xvHfx4tXETnUK/5dIMR7YtAmZbp\nKTqJXaj/Xyx/RdczLfvCYD9LaJ/XYviZWy8P6CWwt4YAFZmjakC3FpF25tdzRl5L\nyQxOcJWc90sEUKCenRorLBdRvctM8GGVZJg1kpLWsvdpfkqrqFHPfm2Vd7ygh33S\nmbTHfr3UxfWV3Yy9tMvws9fxjptutmHJQ5jnxyxd8d392SPx2t4=\n=/bqy\n-----END PGP SIGNATURE-----",
        "payload": "tree 351468ff53c287150cc6c060d874acb274fdc4f4\nparent 245b4457cf9265190a05529a0a97e1cb258cca8a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1564953961 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087272 +0100\n\nrpc: send: support external signer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "245b4457cf9265190a05529a0a97e1cb258cca8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/245b4457cf9265190a05529a0a97e1cb258cca8a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/245b4457cf9265190a05529a0a97e1cb258cca8a"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 180,
      "deletions": 5
    },
    "files": [
      {
        "sha": "48c81693f362c59726ef3d222c6e2b50028a1d44",
        "filename": "src/util/error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/util/error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/util/error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.cpp?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -31,6 +31,10 @@ bilingual_str TransactionErrorString(const TransactionError err)\n             return Untranslated(\"Specified sighash value does not match value stored in PSBT\");\n         case TransactionError::MAX_FEE_EXCEEDED:\n             return Untranslated(\"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\");\n+        case TransactionError::EXTERNAL_SIGNER_NOT_FOUND:\n+            return Untranslated(\"External signer not found\");\n+        case TransactionError::EXTERNAL_SIGNER_FAILED:\n+            return Untranslated(\"External signer failed to sign\");\n         // no default case, so the compiler can warn about missing cases\n     }\n     assert(false);"
      },
      {
        "sha": "4cc35eb1fdd8b816c82b23a1d59c20b18bca7afa",
        "filename": "src/util/error.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/util/error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/util/error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/error.h?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -30,6 +30,8 @@ enum class TransactionError {\n     PSBT_MISMATCH,\n     SIGHASH_MISMATCH,\n     MAX_FEE_EXCEEDED,\n+    EXTERNAL_SIGNER_NOT_FOUND,\n+    EXTERNAL_SIGNER_FAILED,\n };\n \n bilingual_str TransactionErrorString(const TransactionError error);"
      },
      {
        "sha": "33961117600a9c775a6c6d71d7c4aef2b24cc12d",
        "filename": "src/wallet/external_signer.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/external_signer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/external_signer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.cpp?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -3,6 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <chainparams.h>\n+#include <core_io.h>\n+#include <psbt.h>\n+#include <util/strencodings.h>\n+#include <util/system.h>\n #include <wallet/external_signer.h>\n \n ExternalSigner::ExternalSigner(const std::string& command, const std::string& fingerprint, std::string chain, std::string name): m_command(command), m_fingerprint(fingerprint), m_chain(chain), m_name(name) {}\n@@ -65,4 +69,51 @@ UniValue ExternalSigner::GetDescriptors(int account)\n     return RunCommandParseJSON(m_command + \" --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + NetworkArg() + \" getdescriptors --account \" + strprintf(\"%d\", account));\n }\n \n+bool ExternalSigner::SignTransaction(PartiallySignedTransaction& psbtx, std::string& error)\n+{\n+    // Serialize the PSBT\n+    CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+    ssTx << psbtx;\n+\n+    // Check if signer fingerprint matches any input master key fingerprint\n+    bool match = false;\n+    for (unsigned int i = 0; i < psbtx.inputs.size(); ++i) {\n+        const PSBTInput& input = psbtx.inputs[i];\n+        for (auto entry : input.hd_keypaths) {\n+            if (m_fingerprint == strprintf(\"%08x\", ReadBE32(entry.second.fingerprint))) match = true;\n+        }\n+    }\n+\n+    if (!match) {\n+        error = \"Signer fingerprint \" + m_fingerprint + \" does not match any of the inputs:\\n\" + EncodeBase64(ssTx.str());\n+        return false;\n+    }\n+\n+    std::string command = m_command + \" --stdin --fingerprint \\\"\" + m_fingerprint + \"\\\"\" + NetworkArg();\n+    std::string stdinStr = \"signtx \\\"\" + EncodeBase64(ssTx.str()) + \"\\\"\";\n+\n+    const UniValue signer_result = RunCommandParseJSON(command, stdinStr);\n+\n+    if (find_value(signer_result, \"error\").isStr()) {\n+        error = find_value(signer_result, \"error\").get_str();\n+        return false;\n+    }\n+\n+    if (!find_value(signer_result, \"psbt\").isStr()) {\n+        error = \"Unexpected result from signer\";\n+        return false;\n+    }\n+\n+    PartiallySignedTransaction signer_psbtx;\n+    std::string signer_psbt_error;\n+    if (!DecodeBase64PSBT(signer_psbtx, find_value(signer_result, \"psbt\").get_str(), signer_psbt_error)) {\n+        error = strprintf(\"TX decode failed %s\", signer_psbt_error);\n+        return false;\n+    }\n+\n+    psbtx = signer_psbtx;\n+\n+    return true;\n+}\n+\n #endif"
      },
      {
        "sha": "4b9711107b1b26e5348a9bfa736b927120192fef",
        "filename": "src/wallet/external_signer.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/external_signer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/external_signer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer.h?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -10,6 +10,8 @@\n #include <univalue.h>\n #include <util/system.h>\n \n+struct PartiallySignedTransaction;\n+\n class ExternalSignerException : public std::runtime_error {\n public:\n     using std::runtime_error::runtime_error;\n@@ -60,6 +62,11 @@ class ExternalSigner\n     //! @param[out] UniValue see doc/external-signer.md\n     UniValue GetDescriptors(int account);\n \n+    //! Sign PartiallySignedTransaction on the device.\n+    //! Calls `<command> signtransaction` and passes the PSBT via stdin.\n+    //! @param[in,out] psbt  PartiallySignedTransaction to be signed\n+    bool SignTransaction(PartiallySignedTransaction& psbt, std::string& error);\n+\n #endif\n };\n "
      },
      {
        "sha": "e60d7b800470c26459a965943fc36820bb67d311",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -26,6 +26,8 @@ class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n   static ExternalSigner GetExternalSigner();\n \n   bool DisplayAddress(const CScript scriptPubKey, const ExternalSigner &signer) const;\n+\n+  TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n };\n #endif\n "
      },
      {
        "sha": "bfc42ac1b009cf62c8c51fc1ef99e49526e5caf7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -4195,8 +4195,10 @@ static RPCHelpMan send()\n             // Make a blank psbt\n             PartiallySignedTransaction psbtx(rawTx);\n \n-            // Fill transaction with our data and sign\n-            bool complete = true;\n+            // First fill transaction with our data without signing,\n+            // so external signers are not asked sign more than once.\n+            bool complete;\n+            pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, false, true);\n             const TransactionError err = pwallet->FillPSBT(psbtx, complete, SIGHASH_ALL, true, false);\n             if (err != TransactionError::OK) {\n                 throw JSONRPCTransactionError(err);"
      },
      {
        "sha": "efb408c1637aca338c7b409253e1a858270075a0",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -13,6 +13,7 @@\n #include <util/system.h>\n #include <util/time.h>\n #include <util/translation.h>\n+#include <wallet/external_signer.h>\n #include <wallet/scriptpubkeyman.h>\n \n //! Value for the first BIP 32 hardened derivation. Can be used as a bit mask and as a value. See BIP 32 for more details."
      },
      {
        "sha": "08e480225d5270d0fb77c2377a3e5a73a5448ced",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -19,6 +19,7 @@\n #include <policy/policy.h>\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n+#include <psbt.h>\n #include <script/descriptor.h>\n #include <script/script.h>\n #include <script/signingprovider.h>"
      },
      {
        "sha": "676d0a0a4dc409da808c2fbcd45e7215b1cac865",
        "filename": "test/functional/mocks/signer.py",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/test/functional/mocks/signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/test/functional/mocks/signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mocks/signer.py?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -51,9 +51,25 @@ def displayaddress(args):\n \n     return sys.stdout.write(json.dumps({\"address\": \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\"}))\n \n+def signtx(args):\n+    if args.fingerprint != \"00000001\":\n+        return sys.stdout.write(json.dumps({\"error\": \"Unexpected fingerprint\", \"fingerprint\": args.fingerprint}))\n+\n+    with open(os.path.join(os.getcwd(), \"mock_psbt\"), \"r\", encoding=\"utf8\") as f:\n+        mock_psbt = f.read()\n+\n+    if args.fingerprint == \"00000001\" :\n+        sys.stdout.write(json.dumps({\n+            \"psbt\": mock_psbt,\n+            \"complete\": True\n+        }))\n+    else:\n+        sys.stdout.write(json.dumps({\"psbt\": args.psbt}))\n+\n parser = argparse.ArgumentParser(prog='./signer.py', description='External signer mock')\n parser.add_argument('--fingerprint')\n parser.add_argument('--chain', default='main')\n+parser.add_argument('--stdin', action='store_true')\n \n subparsers = parser.add_subparsers(description='Commands', dest='command')\n subparsers.required = True\n@@ -69,6 +85,16 @@ def displayaddress(args):\n parser_displayaddress.add_argument('--desc', metavar='desc')\n parser_displayaddress.set_defaults(func=displayaddress)\n \n+parser_signtx = subparsers.add_parser('signtx')\n+parser_signtx.add_argument('psbt', metavar='psbt')\n+\n+parser_signtx.set_defaults(func=signtx)\n+\n+if not sys.stdin.isatty():\n+    buffer = sys.stdin.read()\n+    if buffer and buffer.rstrip() != \"\":\n+       sys.argv.extend(buffer.rstrip().split(\" \"))\n+\n args = parser.parse_args()\n \n perform_pre_checks()"
      },
      {
        "sha": "9dd080dca9c90545f88ebc4f4a891f0e435c124b",
        "filename": "test/functional/wallet_signer.py",
        "status": "modified",
        "additions": 82,
        "deletions": 3,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/test/functional/wallet_signer.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c/test/functional/wallet_signer.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_signer.py?ref=d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "patch": "@@ -25,7 +25,7 @@ def mock_signer_path(self):\n             return path\n \n     def set_test_params(self):\n-        self.num_nodes = 3\n+        self.num_nodes = 4\n \n         self.extra_args = [\n             [],\n@@ -54,7 +54,7 @@ def run_test(self):\n \n         # Handle script missing:\n         assert_raises_rpc_error(-1, 'execve failed: No such file or directory',\n-            self.nodes[2].enumeratesigners\n+            self.nodes[3].enumeratesigners\n         )\n \n         # Handle error thrown by script\n@@ -100,7 +100,7 @@ def run_test(self):\n         # )\n         # self.clear_mock_result(self.nodes[1])\n \n-        assert_equal(hww.getwalletinfo()[\"keypoolsize\"], 3)\n+        assert_equal(hww.getwalletinfo()[\"keypoolsize\"], 30)\n \n         address1 = hww.getnewaddress(address_type=\"bech32\")\n         assert_equal(address1, \"bcrt1qm90ugl4d48jv8n6e5t9ln6t9zlpm5th68x4f8g\")\n@@ -134,5 +134,84 @@ def run_test(self):\n         )\n         self.clear_mock_result(self.nodes[1])\n \n+        self.log.info('Prepare mock PSBT')\n+        self.nodes[0].sendtoaddress(address1, 1)\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # Load private key into wallet to generate a signed PSBT for the mock\n+        self.nodes[1].createwallet(wallet_name=\"mock\", disable_private_keys=False, blank=True, descriptors=True)\n+        mock_wallet = self.nodes[1].get_wallet_rpc(\"mock\")\n+        assert mock_wallet.getwalletinfo()['private_keys_enabled']\n+\n+        result = mock_wallet.importdescriptors([{\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#rweraev0\",\n+            \"timestamp\": 0,\n+            \"range\": [0,1],\n+            \"internal\": False,\n+            \"active\": True\n+        },\n+        {\n+            \"desc\": \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/*)#j6uzqvuh\",\n+            \"timestamp\": 0,\n+            \"range\": [0, 0],\n+            \"internal\": True,\n+            \"active\": True\n+        }])\n+        assert_equal(result[0], {'success': True})\n+        assert_equal(result[1], {'success': True})\n+        assert_equal(mock_wallet.getwalletinfo()[\"txcount\"], 1)\n+        dest = self.nodes[0].getnewaddress(address_type='bech32')\n+        mock_psbt = mock_wallet.walletcreatefundedpsbt([], {dest:0.5}, 0, {}, True)['psbt']\n+        mock_psbt_signed = mock_wallet.walletprocesspsbt(psbt=mock_psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n+        mock_psbt_final = mock_wallet.finalizepsbt(mock_psbt_signed[\"psbt\"])\n+        mock_tx = mock_psbt_final[\"hex\"]\n+        assert(mock_wallet.testmempoolaccept([mock_tx])[0][\"allowed\"])\n+\n+        # # Create a new wallet and populate with specific public keys, in order\n+        # # to work with the mock signed PSBT.\n+        # self.nodes[1].createwallet(wallet_name=\"hww4\", disable_private_keys=True, descriptors=True, external_signer=True)\n+        # hww4 = self.nodes[1].get_wallet_rpc(\"hww4\")\n+        #\n+        # descriptors = [{\n+        #     \"desc\": \"wpkh([00000001/84'/1'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/0/*)#x30uthjs\",\n+        #     \"timestamp\": \"now\",\n+        #     \"range\": [0, 1],\n+        #     \"internal\": False,\n+        #     \"watchonly\": True,\n+        #     \"active\": True\n+        # },\n+        # {\n+        #     \"desc\": \"wpkh([00000001/84'/1'/0']tpubD6NzVbkrYhZ4WaWSyoBvQwbpLkojyoTZPRsgXELWz3Popb3qkjcJyJUGLnL4qHHoQvao8ESaAstxYSnhyswJ76uZPStJRJCTKvosUCJZL5B/1/*)#h92akzzg\",\n+        #     \"timestamp\": \"now\",\n+        #     \"range\": [0, 0],\n+        #     \"internal\": True,\n+        #     \"watchonly\": True,\n+        #     \"active\": True\n+        # }]\n+\n+        # result = hww4.importdescriptors(descriptors)\n+        # assert_equal(result[0], {'success': True})\n+        # assert_equal(result[1], {'success': True})\n+        assert_equal(hww.getwalletinfo()[\"txcount\"], 1)\n+\n+        assert(hww.testmempoolaccept([mock_tx])[0][\"allowed\"])\n+\n+        with open(os.path.join(self.nodes[1].cwd, \"mock_psbt\"), \"w\", encoding=\"utf8\") as f:\n+            f.write(mock_psbt_signed[\"psbt\"])\n+\n+        self.log.info('Test send using hww1')\n+\n+        res = hww.send(outputs={dest:0.5},options={\"add_to_wallet\": False})\n+        assert(res[\"complete\"])\n+        assert_equal(res[\"hex\"], mock_tx)\n+\n+        # # Handle error thrown by script\n+        # self.set_mock_result(self.nodes[4], \"2\")\n+        # assert_raises_rpc_error(-1, 'Unable to parse JSON',\n+        #     hww4.signerprocesspsbt, psbt_orig, \"00000001\"\n+        # )\n+        # self.clear_mock_result(self.nodes[4])\n+\n if __name__ == '__main__':\n     SignerTest().main()"
      }
    ]
  },
  {
    "sha": "f75e0c1edde39a91cc353b0102638e232def9476",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzVlMGMxZWRkZTM5YTkxY2MzNTNiMDEwMjYzOGUyMzJkZWY5NDc2",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2020-01-30T13:34:45Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-02-23T13:34:32Z"
      },
      "message": "doc: add external-signer.md",
      "tree": {
        "sha": "4af377dd3d1564b645984408b1ffeac9b8269cd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af377dd3d1564b645984408b1ffeac9b8269cd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f75e0c1edde39a91cc353b0102638e232def9476",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmA1BGgACgkQV/+b28ww\nEAmzDhAAg6CziYS2CmPhB/VIndYH+Lxa6Uk4PAJTYfc6bmlj9LqkwLwW9gFwAIhX\n20rf0yf8HmlRYblkKiQITVIre7RwYKdgaMGhOKc7g53AOPbI3HoGx9xCpMgG4C7A\nhCnJSHXrjNsxnEC5C5rjKfrkPdGsKsY6eKPWLTIoyostZnwfOO0hF24H/Mx8IQ8X\nrNjTK9A9bf7ulMzU3aktDlnrYKkFP1ggHGa0mY5Ph1o5hptw4txj92JnYn7I4HF3\nCryJtJudTL7hUwG2vkw/53TEW/68kCwS8g8kNXH1tST4nbAseuIfzBCw4hAFxJEm\nE4kwSTDCRJc6bBgH1o84nIWd5S0hjzVYRWH2g9qwPiFDuEZa+726OH+X9hRb3FR8\nsXD5EH7ENTlJ/lmfYOFhv6x9RyQdVz+/ifmXQruqfkT/QmAnJbFB+JGPZWQpvziv\n+JLIVQtpFGV/7CNjWkHSlKBJ+CpFNtmMkagafXQJh4thQ3jsiDkNmhadRgKd8IA+\nHoWw2bTVn4K0T5/WJ3zCEBtamOKIkEo2hzeJRWBPXJjkrKdh3jnjYo9AzGuja7wH\n6PjKtA+zG1VhnyQj7++2YIoqBT7Ll7IJdbUNFM1LsyPTILWa04CBoXfB2GxtmR5/\nP8a/Aq/i/J0Ygg6Uud2ZD/IXJnUBLXt7G8b3RijgVmHSMvsqlGk=\n=OfG3\n-----END PGP SIGNATURE-----",
        "payload": "tree 4af377dd3d1564b645984408b1ffeac9b8269cd1\nparent d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1580391285 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1614087272 +0100\n\ndoc: add external-signer.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f75e0c1edde39a91cc353b0102638e232def9476",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f75e0c1edde39a91cc353b0102638e232def9476",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f75e0c1edde39a91cc353b0102638e232def9476/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b0107d68a91ed4d1a5c78c8ca76251329d3f3c"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 171,
      "deletions": 0
    },
    "files": [
      {
        "sha": "053752ee2f1631522c8ad26012289c5be43fd554",
        "filename": "doc/external-signer.md",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f75e0c1edde39a91cc353b0102638e232def9476/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f75e0c1edde39a91cc353b0102638e232def9476/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=f75e0c1edde39a91cc353b0102638e232def9476",
        "patch": "@@ -0,0 +1,171 @@\n+# Support for signing transactions outside of Bitcoin Core\n+\n+Bitcoin Core can be launched with `-signer=<cmd>` where `<cmd>` is an external tool which can sign transactions and perform other functions. For example, it can be used to communicate with a hardware wallet.\n+\n+## Example usage\n+\n+The following example is based on the [HWI](https://github.com/bitcoin-core/HWI) tool. Although this tool is hosted under the Bitcoin Core GitHub organization and maintained by Bitcoin Core developers, it should be used with caution. It is considered experimental and has far less review than Bitcoin Core itself. Be particularly careful when running tools such as these on a computer with private keys on it.\n+\n+When using a hardware wallet, consult the manufacturer website for (alternative) software they recommend. As long as their software conforms to the standard below, it should be able to work with Bitcoin Core.\n+\n+Start Bitcoin Core:\n+\n+```sh\n+$ bitcoind -signer=../HWI/hwi.py\n+```\n+\n+### Device setup\n+\n+Follow the hardware manufacturers instructions for the initial device setup, as well as their instructions for creating a backup. Alternatively, for some devices, you can use the `setup`, `restore` and `backup` commands provided by [HWI](https://github.com/bitcoin-core/HWI).\n+\n+### Create wallet and import keys\n+\n+Get a list of signing devices / services:\n+\n+```\n+$ bitcoin-cli enumeratesigners\n+{\n+  \"signers\": [\n+    {\n+      \"fingerprint\": \"c8df832a\"\n+    }\n+]\n+```\n+\n+The master key fingerprint is used to identify a device.\n+\n+Create a wallet, this automatically imports the public keys:\n+\n+```sh\n+$ bitcoin-cli createwallet \"hww\" true true \"\" true true true\n+```\n+\n+### Verify an address\n+\n+Display an address on the device:\n+\n+```sh\n+$ bitcoin-cli -rpcwallet=<wallet> getnewaddress\n+$ bitcoin-cli -rpcwallet=<wallet> signerdisplayaddress <address>\n+```\n+\n+Replace `<address>` with the result of `getnewaddress`.\n+\n+### Spending\n+\n+Under the hood this uses a [Partially Signed Bitcoin Transaction](psbt.md).\n+\n+```sh\n+$ bitcoin-cli -rpcwallet=<wallet> sendtoaddress <address> <amount>\n+```\n+\n+This prompts your hardware wallet to sign, and fail if it's not connected. If successful\n+it automatically broadcasts the transaction.\n+\n+```sh\n+{\"complete\": true, \"txid\": <txid>}\n+```\n+\n+## Signer API\n+\n+In order to be compatible with Bitcoin Core any signer command should conform to the specification below. This specification is subject to change. Ideally a BIP should propose a standard so that other wallets can also make use of it.\n+\n+Prerequisite knowledge:\n+* [Output Descriptors](descriptors.md)\n+* Partially Signed Bitcoin Transaction ([PSBT](psbt.md))\n+\n+### `enumerate` (required)\n+\n+Usage:\n+```\n+$ <cmd> enumerate\n+[\n+    {\n+        \"fingerprint\": \"00000000\"\n+    }\n+]\n+```\n+\n+The command MUST return an (empty) array with at least a `fingerprint` field.\n+\n+A future extension could add an optional return field with device capabilities. Perhaps a descriptor with wildcards. For example: `[\"pkh(\"44'/0'/$'/{0,1}/*\"), sh(wpkh(\"49'/0'/$'/{0,1}/*\")), wpkh(\"84'/0'/$'/{0,1}/*\")]`. This would indicate the device supports legacy, wrapped SegWit and native SegWit. In addition it restricts the derivation paths that can used for those, to maintain compatibility with other wallet software. It also indicates the device, or the driver, doesn't support multisig.\n+\n+A future extension could add an optional return field `reachable`, in case `<cmd>` knows a signer exists but can't currently reach it.\n+\n+### `signtransaction` (required)\n+\n+Usage:\n+```\n+$ <cmd> --fingerprint=<fingerprint> (--testnet) signtransaction <psbt>\n+base64_encode_signed_psbt\n+```\n+\n+The command returns a psbt with any signatures.\n+\n+The `psbt` SHOULD include bip32 derivations. The command SHOULD fail if none of the bip32 derivations match a key owned by the device.\n+\n+The command SHOULD fail if the user cancels.\n+\n+The command MAY complain if `--testnet` is set, but any of the BIP32 derivation paths contain a coin type other than `1h` (and vice versa).\n+\n+### `getdescriptors` (optional)\n+\n+Usage:\n+\n+```\n+$ <cmd> --fingerprint=<fingerprint> (--testnet) getdescriptors <account>\n+<xpub>\n+```\n+\n+Returns descriptors supported by the device. Example:\n+\n+```\n+$ <cmd> --fingerprint=00000000 --testnet getdescriptors\n+{\n+  \"receive\": [\n+    \"pkh([00000000/44h/0h/0h]xpub6C.../0/*)#fn95jwmg\",\n+    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../0/*))#j4r9hntt\",\n+    \"wpkh([00000000/84h/0h/0h]xpub6C.../0/*)#qw72dxa9\"\n+  ],\n+  \"internal\": [\n+    \"pkh([00000000/44h/0h/0h]xpub6C.../1/*)#c8q40mts\",\n+    \"sh(wpkh([00000000/49h/0h/0h]xpub6B..../1/*))#85dn0v75\",\n+    \"wpkh([00000000/84h/0h/0h]xpub6C..../1/*)#36mtsnda\"\n+  ]\n+}\n+```\n+\n+### `displayaddress` (optional)\n+\n+Usage:\n+```\n+<cmd> --fingerprint=<fingerprint> (--testnet) displayaddress --desc descriptor\n+```\n+\n+Example, display the first native SegWit receive address on Testnet:\n+\n+```\n+<cmd> --fingerprint=00000000 --testnet displayaddress --desc \"wpkh([00000000/84h/1h/0h]tpubDDUZ..../0/0)\"\n+```\n+\n+The command MUST be able to figure out the address type from the descriptor.\n+\n+If <descriptor> contains a master key fingerprint, the command MUST fail if it does not match the fingerprint known by the device.\n+\n+If <descriptor> contains an xpub, the command MUST fail if it does not match the xpub known by the device.\n+\n+The command MAY complain if `--testnet` is set, but the BIP32 coin type is not `1h` (and vice versa).\n+\n+## How Bitcoin Core uses the Signer API\n+\n+The `enumeratesigners` RPC simply calls `<cmd> enumerate`.\n+\n+The `createwallet` RPC calls:\n+\n+* `<cmd> --fingerprint=00000000 getdescriptors 0`\n+\n+It then imports descriptors for all support address types, in a BIP44/49/84 compatible manner.\n+\n+The `displayaddress` RPC reuses some code from `getaddressinfo` on the provided address and obtains the inferred descriptor. It then calls `<cmd> --fingerprint=00000000 displayaddress --desc=<descriptor>`.\n+\n+`sendtoaddress` and `sendmany` check `inputs->bip32_derivs` to see if any inputs have the same `master_fingerprint` as the signer. If so, it calls `<cmd> --fingerprint=00000000 signtransaction <psbt>`. It waits for the device to return a (partially) signed psbt, tries to finalize it and broadcasts the transation."
      }
    ]
  }
]