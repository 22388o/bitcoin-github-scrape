DrahtBot,2019-08-04 22:16:27,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21207 (MOVEONLY: CWallet transaction code out of wallet.cpp/.h by ryanofsky)\n* #21073 (wallet: check when create wallets",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-518040668,518040668,
Relaxo143,2019-09-12 11:45:16,Can we expect this to be merged and included in 0.19? It's a really useful and requested feature! Thanks to everyone who is working on it.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-530788105,530788105,
Sjors,2019-09-16 08:54:00,@Relaxo143 not a chance; this is still work in progress and there's several pull requests that need to be reviewed and merged first. There's also a feature freeze on 0.19. ,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-531692625,531692625,
Sjors,2019-09-16 16:27:25,"I dropped the dependency on my new `send` RPC proposal #16378, in favor of just tweaking `sendmany` and `sendtoaddress`. It's less powerful, but should reduce the review burden once native descriptors are merged.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-531853388,531853388,
Sjors,2020-02-21 15:33:01,"Rebase and big update:\n* I dropped #15590 (`GetAddressType() & IsSegWit()`) in favor of `GetOutputType()`\n* this PR introduces `ExternalSignerScriptPubKeyMan` as a subclass of `DescriptorScriptPubKeyMan`",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-589703948,589703948,
Sjors,2020-03-23 19:50:27,Rebased on the latest #15764.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-602820101,602820101,
Sjors,2020-04-27 14:08:56,"I'm marking this ready for review, even though 372eef4 is a placeholder commit (to be fixed in other pull requests). There's still rough edges, but it does work, as does the GUI followup in #16549.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-620011005,620011005,
fjahr,2020-04-28 14:02:50,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-620627638,620627638,
Sjors,2020-08-28 18:43:27,Rebased and dropped 3c65029b2cd7dc4874055cc55424bb7512071d2b since it's unused.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-683071094,683071094,
Sjors,2020-09-15 14:44:54,Rebased on top of the ultimate send RPC #16378; it now uses `send` instead of `sendtoaddress`.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-692763317,692763317,
Sjors,2020-09-16 09:55:23,Something is causing Travis on ARM64 to bail out right before the functional tests. I already tried a restart. ,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-693301585,693301585,
Sjors,2020-10-15 09:35:34,Rebased on Sqlite support #18916,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-709042688,709042688,
promag,2020-11-20 14:44:33,"Nice work, builds on macos and playing around, will try gui branch too.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-731211110,731211110,
laanwj,2021-01-11 15:46:46,There was a merge conflict in `configure.ac` with the NAT-PMP introduction. Rebased version: https://github.com/laanwj/bitcoin/tree/tmp,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-758034894,758034894,
Sjors,2021-01-12 11:19:43,"@laanwj @fjahr thanks for the reviews! I was waiting for another PR (https://github.com/bitcoin-core/gui/pull/171) to land which I expect to require a rebase, but I might do it sooner.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-758589844,758589844,
hebasto,2021-01-21 18:02:04,"@Sjors \n> @laanwj @fjahr thanks for the reviews! I was waiting for another PR ([bitcoin-core/gui#171](https://github.com/bitcoin-core/gui/pull/171)) to land which I expect to require a rebase, but I might do it sooner.\n\nhttps://github.com/bitcoin-core/gui/pull/171 just merged :)",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-764833355,764833355,
Sjors,2021-01-22 17:03:59,Rebased and addressed most feedback.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-765556551,765556551,
Sjors,2021-01-29 11:20:57,Rebased after #20012,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-769745983,769745983,
Sjors,2021-02-09 17:59:10,"Rebased and addressed @achow101's feedback. It now calls HWI with `--regtest` (unsupported), `--testnet` or `--signet` instead of using `--testnet` for all non-mainnet networks. I might change that to `--chain ...` depending on what happens to https://github.com/bitcoin-core/HWI/pull/451, but shouldn't be blocking here.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-776126807,776126807,
laanwj,2021-02-12 10:59:12,This has been open for a long time. Hardware wallet support seems quite important. It would be nice if it got some more review and/or ACKs so that we can move forward with it.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-778126833,778126833,
laanwj,2021-02-12 11:02:16,"Linting errors:\n```\nPython's open(...) seems to be used to open text files without explicitly\nspecifying encoding=""utf8"":\n\ntest/functional/mocks/signer.py:        with open(mock_result_path, ""r"") as f:\ntest/functional/wallet_signer.py:        with open(os.path.join(node.cwd, ""mock_result""), ""w"") as f:\n^---- failure generated from test/lint/lint-python-utf8-encoding.sh\n```",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-778128237,778128237,
Sjors,2021-02-12 15:36:05,"Rebased, appeased linter and switched to using the new HWI `--chain` argument. Wallet experts, please bless #21127 as well.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-778266866,778266866,
gruve-p,2021-02-12 16:55:46,utACK https://github.com/bitcoin/bitcoin/pull/16546/commits/e0ce81b4a5d8b8ae617de211747aac5fcad48570,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-778313074,778313074,
Sjors,2021-02-13 10:47:38,"@fanquake boost process is used by `RunCommandParseJSON` (introduced in #15382). This can be used by any feature that involves calling an external command. Hence the separation. However, if you prefer I can still drop `--with-boost-process`. It just means that if we add another feature that uses this, that feature will require a separate configure flag. That's probably fine.\n\nDuring the develo",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-778598558,778598558,
fanquake,2021-02-15 07:43:56,"> It just means that if we add another feature that uses this, that feature will require a separate configure flag. That's probably fine.\n\nThat's exactly what should happen. Having a `--with-boost-process` configure flag just to be a catch-all for ""turn on anything that uses boost process"" is not something we want. Significant new features should have their own configure flags.\n\n>  I find ",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-779020534,779020534,
Sjors,2021-02-17 15:25:32,Rebased and addressed nits.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-780632219,780632219,
meshcollider,2021-02-17 20:12:57,Will do some testing ,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-780823756,780823756,
achow101,2021-02-17 20:25:29,ACK 85da1ad0442b243e10e7f671e14812e70e74f624,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-780831030,780831030,
laanwj,2021-02-18 18:44:53,"Code review ACK 96f991a11a871502d1a39f684994c1e2664c3af7\nVerified that the only changes since 85da1ad0442b243e10e7f671e14812e70e74f624 are the `configure.ac` change, and simpllyfing `ExternalSigner::NetworkArg()` (removing a include for `strencodings.h` along the way).",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-781557340,781557340,
achow101,2021-02-18 19:54:24,re-ACK 96f991a11a871502d1a39f684994c1e2664c3af7,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-781596870,781596870,
Sjors,2021-02-21 16:31:12,"Rebased onto CI fix. @fanquake I replaced the remaining instances of `HAVE_BOOST_PROCESS` with `ENABLE_EXTERNAL_SIGNER`. In the process I squashed the MSVC and doc commit, since they're now just a simple rename.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-782884947,782884947,
laanwj,2021-02-22 11:30:13,"Please squash the `move-only: add underscore to externalsigner.h` commit as well. It's introduced in this PR, so let's introduce it with the eventual name directly.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-783308218,783308218,
Sjors,2021-02-22 18:41:42,"That may be a rather big rebase hell though, because the commits make incremental changes to these files so I'd have to divide this commit in 10 pieces, squash them in the right place and then deal with rebase conflicts. Unless there's an intelligent Git incantation to rename a file across all commits?",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-783587014,783587014,
ryanofsky,2021-02-22 21:31:30,"> Unless there's an intelligent Git incantation to rename a file across all commits?\n\nSomething like this will rename the one file. You can extend it to rename other files or do more replacements across commits:\n\n```bash\nend=f1824e7af7a8d53f9be50a6c6354511190dcb774\nstart=b9a262ea0a86f498959e81113522ce26299f1984\n\ngit checkout $end\ngit filter-branch --tree-filter '\n  git mv src/w",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-783688565,783688565,
laanwj,2021-02-23 07:41:59,"Also git tends to be smart enough to take into account renamed files when rebasing. If you go to the first commit with `git rebase -i`, amend it for editing, `git mv src/wallet/externalsigner.h src/wallet/external_signer.h`, then `git rebase --continue`, that should not cause any merge conflicts.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-783978913,783978913,
Sjors,2021-02-23 11:14:59,"@ryanofsky's thanks! That worked (with some tweaks), and despite warnings from the git, it still compiles and history looks sane. @laanwj I have indeed seen Git behave sanely when it comes to renames, so maybe my worries were not necessary.",https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-784126199,784126199,
laanwj,2021-02-23 16:50:41,re-ACK f75e0c1edde39a91cc353b0102638e232def9476,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-784344292,784344292,
hebasto,2021-03-02 17:10:09,There is a [buggy](https://github.com/bitcoin/bitcoin/pull/21339#issue-583195145) execution path in the `configure` script. Fixed in #21339.,https://github.com/bitcoin/bitcoin/pull/16546#issuecomment-789064887,789064887,
luke-jr,2019-08-04 23:24:13,This list-of-bools thing seems like a terrible idea...,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310408302,310408302,src/wallet/rpcwallet.cpp
luke-jr,2019-08-04 23:25:27,"What if there are multiple wallets, with different signers?\n\nIMO `-signer` needs to be replaced with either a wallet-stored path, or a path provided when the wallet is loaded...",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310408356,310408356,src/wallet/rpcwallet.cpp
Sjors,2019-08-05 09:34:30,"Indeed, I was complaining about that when `blank` was added :-)",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310517052,310517052,src/wallet/rpcwallet.cpp
Sjors,2019-08-05 09:35:33,"Storing `signer` in the wallet makes sense, but I also think it can wait for a later PR. In practice afaik the only tool that currently works is HWI and it can handle multiple wallets. In the long run however I do hope that wallet manufactures provide their own software that just uses the same commands / responses. ",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r310517479,310517479,src/wallet/rpcwallet.cpp
luke-jr,2020-02-06 05:36:02,I don't see where we are linking this,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r375648252,375648252,build-aux/m4/ax_boost_process.m4
luke-jr,2020-02-06 05:44:15,"This seems like it will pull in Boost.Process (and our - in this case dead - wrapper code using it) even with `--disable-external-signer`.\n\nMaybe not a problem since we plan to use it for other things too?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r375649913,375649913,configure.ac
kiminuo,2020-10-20 09:13:05,"```suggestion\n//! Enables interaction with an external signing device or service, such as\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r508338950,508338950,src/wallet/externalsigner.h
kiminuo,2020-10-20 09:19:02,"```suggestion\n#endif // ENABLE_EXTERNAL_SIGNER\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r508343066,508343066,src/wallet/rpcsigner.h
fjahr,2021-01-02 23:07:47,Is this necessary to be removed?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550931095,550931095,src/wallet/scriptpubkeyman.h
fjahr,2021-01-02 23:27:02,"Not sure if we need so many of these. This function should never be called if external signer is not enabled, right? Is this a belts & suspenders approach or is there a reason why it is absolutely necessary?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550932593,550932593,src/wallet/external_signer_scriptpubkeyman.cpp
fjahr,2021-01-02 23:31:12,Could add a helper function to avoid the need of repeating the common part of these commands.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550932851,550932851,src/wallet/externalsigner.cpp
fjahr,2021-01-02 23:34:54,I think this goes before the line above,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550933091,550933091,src/wallet/rpcsigner.cpp
fjahr,2021-01-02 23:57:18,s/Opt-in/Opt-out/ ?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550934798,550934798,configure.ac
fjahr,2021-01-03 00:39:32,"Copyright headers need to be updated, might as well get it over with now :)",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550938055,550938055,src/wallet/externalsigner.cpp
fjahr,2021-01-03 00:53:15,I am guessing this was just a placeholder to see that things are working and this can be removed when the actual tests are added?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550939032,550939032,test/functional/wallet_signer.py
fjahr,2021-01-03 00:55:06,`}` was probably not formated right by accident,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r550939183,550939183,src/wallet/wallet.cpp
Sjors,2021-01-03 15:31:26,"I don't think it compiles otherwise, because this calls an `ExternalSigner` function which needs boost::process",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r551020026,551020026,src/wallet/external_signer_scriptpubkeyman.cpp
fjahr,2021-01-03 21:41:13,"Oh, that makes sense and I didn't think about that. Might be helpful to note that somewhere in a comment.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r551057734,551057734,src/wallet/external_signer_scriptpubkeyman.cpp
laanwj,2021-01-11 17:14:50,"nit: I'd prefer these to be consistent in naming; either\n```\n  wallet/externalsigner.h \\n  wallet/externalsigner_scriptpubkeyman.h \\n```\nor\n```\n  wallet/external_signer.h \\n  wallet/external_signer_scriptpubkeyman.h \\n```\nI guess the former is most consistent with how things are done in other places.\n(same for the associated `.cpp`, of course).\n",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r555208596,555208596,src/Makefile.am
laanwj,2021-01-11 17:26:27,Wouldn't it be better to mention `--enable-external-signer` configure flag in this error message instead of boost (which is just an implementation detail)?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r555216258,555216258,src/wallet/wallet.cpp
laanwj,2021-01-11 17:29:29,"Please use a doxygen compatible comment\n```c++\n/** Display address on an external signer. Returns false if external signer support is not compiled */\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r555218279,555218279,src/wallet/wallet.h
laanwj,2021-01-11 17:35:54,"Do you really want to construct a new instance every time and return by value here?\nThis function is called reasonably often (e.g. when signing, when displaying addresses).\nIt seems that these could be cached, and in that case a pointer (e.g. `std::shared_ptr`) would make more sense.\nBut not sure.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r555222325,555222325,src/wallet/external_signer_scriptpubkeyman.cpp
laanwj,2021-01-11 18:13:18,Please start the method names with a capital letter here like in other classes.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r555245004,555245004,src/wallet/externalsigner.h
laanwj,2021-01-11 18:19:21,"Is a bool enough here? E.g. what if someone wants to use external signers on signet, regtest? Or are those all ""testnet"" in this description?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r555248451,555248451,src/wallet/externalsigner.h
Sjors,2021-01-12 11:22:03,"I should update the comment, but yes: signet, testnet and regtest use the same address format, which is the only thing that seems to matter when using hardware wallets (at the least the devices I've worked with). They don't even have their own BIP44/49/81 coin types.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r555698715,555698715,src/wallet/externalsigner.h
Sjors,2021-01-22 16:14:15,It's not removed: I moved it from `private` to `protected`.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r562741033,562741033,src/wallet/scriptpubkeyman.h
Sjors,2021-01-22 16:18:34,Oops,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r562743914,562743914,src/wallet/rpcsigner.cpp
Sjors,2021-01-22 16:20:23,"In this PR you have to use `--with-boost-process` in order to enable external signer support. So it's opt-in. But in the GUI followup that's flipped _if_ you have GUI enabled.\n\nAlternatively you can use `--with-external-signer` which implies `--with-boost-process` and fails if Boost::Process is missing.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r562745212,562745212,configure.ac
Sjors,2021-01-22 16:24:34,I dropped the balance sanity check and demoted the signer path to `debug`.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r562747796,562747796,test/functional/wallet_signer.py
Sjors,2021-01-22 16:31:43,"I'll go for the second option, because it's more readable. I renamed it in a separate commit to avoid rebase hell.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r562752425,562752425,src/Makefile.am
Sjors,2021-01-22 16:47:02,My guess would be that this is negligible compared to the slow USB communication and sluggish hardware wallets in general. I might leave that for someone else to improve.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r562762406,562762406,src/wallet/external_signer_scriptpubkeyman.cpp
MarcoFalke,2021-01-28 18:44:05,"can remove this diff, and then rebase",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r566325888,566325888,src/wallet/rpcwallet.cpp
achow101,2021-02-08 19:39:43,"In 235445a431c6146bb194761335761fa423469ac0 ""msvc: define ENABLE_EXTERNAL_SIGNER""\n\nSince this is supposed to be defaults, I don't think you should have `1` there. It should be like `HAVE_BOOST_PROCESS` right above.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572318711,572318711,build_msvc/bitcoin_config.h
achow101,2021-02-08 19:47:28,"In 1425e784279cee4a04bf186990dcb8669af0bd01 ""wallet: add -signer argument for external signer command""\n\nHaving `-signer` in the hidden options does not require it to be guarded like this.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572323513,572323513,src/dummywallet.cpp
achow101,2021-02-08 19:50:07,"In 1425e784279cee4a04bf186990dcb8669af0bd01 ""wallet: add -signer argument for external signer command""\n\nShould just be `2021` here and elsewhere?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572325164,572325164,src/wallet/externalsigner.cpp
achow101,2021-02-08 20:00:53,"In 54cfea82c85bcbcef012922ad78dcb3ba3ae1c6e ""wallet: add ExternalSignerScriptPubKeyMan""\n\nShould be\n\n```suggestion\n  bool SetupDescriptor(std::unique_ptr<Descriptor> desc);\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572332070,572332070,src/wallet/external_signer_scriptpubkeyman.h
achow101,2021-02-08 20:05:55,"In 54cfea82c85bcbcef012922ad78dcb3ba3ae1c6e ""wallet: add ExternalSignerScriptPubKeyMan""\n\nThis is not necessarily going to work since it is possible we read (and thus load) a descriptor before we read and load the wallet flags.\n\nWe really should always be loading in the flags first (right after `minversion`) before reading the rest of the records in the db.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572334983,572334983,src/wallet/wallet.cpp
achow101,2021-02-08 20:17:12,"In 2352f3ec13e1d819e140e061f3d7927a20387cbe ""rpc: add external signer RPC files""\n\nMove this above to avoid `sorted` below?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572342189,572342189,test/functional/rpc_help.py
achow101,2021-02-08 20:21:56,"For at least testnet and regtest, the bech32 address format is different.\n\nBut also, HWI only has mainnet and testnet so maybe just a bool is fine?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572345061,572345061,src/wallet/externalsigner.h
achow101,2021-02-08 20:22:11,"In 9e0d6e145ca150f8e992a92558de4d0e5cd94dab ""rpc: signer: add enumeratesigners to list external signers""\n\nNeed docstring for `name`.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572345219,572345219,src/wallet/externalsigner.h
achow101,2021-02-08 20:35:48,"In 9e0d6e145ca150f8e992a92558de4d0e5cd94dab ""rpc: signer: add enumeratesigners to list external signers""\n\nIt's probably better to use `Params().IsTestChain` rather than checking `gArgs` and doing a string comparison.\n\n```suggestion\n            const bool mainnet = !Params().IsTestChain()\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572353117,572353117,src/wallet/rpcsigner.cpp
achow101,2021-02-08 20:43:25,"In 2926553d26e2f15e7986a73f6ee678112ab8ab7f ""test: add external signer test""\n\n`argparse` already has a way to force a subparser command to be provided.\n\n```suggestion\nsubparsers = parser.add_subparsers(description='Commands', dest='command')\nsubparsers.required = True\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572357930,572357930,test/functional/mocks/signer.py
achow101,2021-02-08 20:48:21,"In 3fdaea28fc9befb77caa8c1fd1f5f61c577eabe6 ""wallet: add GetExternalSigner()""\n\nUse `Params().IsTestChain` rather than checking `gArgs` and doing a string comparison.\n\n```suggestion\n    const bool mainnet = !Params().IsTestChain()\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572360987,572360987,src/wallet/wallet.cpp
achow101,2021-02-08 20:50:54,"In 6e0a04004c2ea6266b912fa520340188bf930967 ""wallet: fetch keys from external signer upon creation""\n\nThis change should be squashed into 1c8e9ad70c858dc0cbaa2b6b3b92f67dc8b002d0",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572362580,572362580,src/wallet/externalsigner.cpp
achow101,2021-02-08 21:01:36,"In 57b26f44b9109eb0c366adeb54bf5ebfc816b45e ""rpc: send: support external signer""\n\nPerhaps use `GetExternalSigner()` instead of duplicate code?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572368905,572368905,src/wallet/external_signer_scriptpubkeyman.cpp
achow101,2021-02-08 21:04:45,"In 57b26f44b9109eb0c366adeb54bf5ebfc816b45e ""rpc: send: support external signer""\n\nUse `with`\n\n```suggestion\n    with open(os.path.join(os.getcwd(), ""mock_psbt""), ""r"") as f:\n         mock_psbt = f.read()\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572370566,572370566,test/functional/mocks/signer.py
achow101,2021-02-08 21:07:56,"In 57b26f44b9109eb0c366adeb54bf5ebfc816b45e ""rpc: send: support external signer""\n\nUse `with`\n\n```suggestion\n        with open(os.path.join(os.getcwd(), ""mock_psbt""), ""w"") as f:\n             f.write(mock_psbt_signed[""psbt""])\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572372372,572372372,test/functional/wallet_signer.py
achow101,2021-02-08 21:10:02,"In 2926553d26e2f15e7986a73f6ee678112ab8ab7f ""test: add external signer test""\n\nUse `with`\n\n```suggestion\n        with open(os.path.join(node.cwd, ""mock_result""), ""w"", encoding=""utf8"") as f:\n            f.write(res)\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572373664,572373664,test/functional/wallet_signer.py
achow101,2021-02-08 21:11:16,"In 2926553d26e2f15e7986a73f6ee678112ab8ab7f ""test: add external signer test""\n\nUse f-strings\n\n```suggestion\n            [f""-signer={self.mock_signer_path()}""],\n            [""-signer=fake.py""],\n```",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572374599,572374599,test/functional/wallet_signer.py
Sjors,2021-02-09 12:50:56,Just defining or setting it to 1 always confused me. As does MSVC. But it sounds reasonable... @sipsorcery?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572858097,572858097,build_msvc/bitcoin_config.h
Sjors,2021-02-09 12:59:34,Good question. It's been under development and publicly visible since 2018 though.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572863901,572863901,src/wallet/externalsigner.cpp
Sjors,2021-02-09 13:12:16,"Ah, we upgraded to Python 3.6 ""recently"" :-)",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572871946,572871946,test/functional/wallet_signer.py
Sjors,2021-02-09 13:14:43,"I overlooked that regtest has a different prefix. Maybe an enum is a good idea...\nhttps://github.com/satoshilabs/slips/blob/master/slip-0173.md#registered-human-readable-parts",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572873344,572873344,src/wallet/externalsigner.h
Sjors,2021-02-09 14:56:10,I made a separate PR for this: #21127,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572953722,572953722,src/wallet/wallet.cpp
Sjors,2021-02-09 15:05:51,But then I also have to add a line `components.append('Util')`,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r572962933,572962933,test/functional/rpc_help.py
achow101,2021-02-09 16:54:41,"I think it's supposed to be either the default or a fixed setting indicating what msvc should be building. Either way, having `HAVE_BOOST_PROCESS` not defined above and still defining `ENABLE_EXTERNAL_SIGNER` is a conflict because we can't have external signer support without boost process.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r573056256,573056256,build_msvc/bitcoin_config.h
sipsorcery,2021-02-10 22:35:56,I think msvc is the same as the other compilers. If you want to set a pre-processor define to act like a boolean flag there's no need to set a value on it. `#define ENABLE_EXTERNAL_SIGNER` is all you need if you're only checking for its existence with `#ifdef ENABLE_EXTERNAL_SIGNER`.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r574127293,574127293,build_msvc/bitcoin_config.h
laanwj,2021-02-12 11:04:15,It's funny but also a bit shameful that this has taken so long that the drift of linters and python versions is starting to eat into it.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r575145746,575145746,test/functional/wallet_signer.py
Sjors,2021-02-12 13:42:30,Oh I've been plowing through rebases while descriptor wallets were being built. This is nothing :-),https://github.com/bitcoin/bitcoin/pull/16546#discussion_r575230827,575230827,test/functional/wallet_signer.py
Sjors,2021-02-12 14:51:07,"Ok, I'll use that.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r575279150,575279150,build_msvc/bitcoin_config.h
meshcollider,2021-02-16 23:52:20,"What ""this"" is may not be clear to the user",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577220531,577220531,src/wallet/wallet.cpp
meshcollider,2021-02-17 00:14:57,micro-nit: GitHub,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577228830,577228830,doc/external-signer.md
meshcollider,2021-02-17 00:24:59,"Is this ""return code?"" meant for the final doc",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577232390,577232390,doc/external-signer.md
meshcollider,2021-02-17 00:30:09,style nit: brace,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577234301,577234301,src/wallet/external_signer.cpp
meshcollider,2021-02-17 00:30:51,style nit: brace,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577234568,577234568,src/wallet/wallet.cpp
meshcollider,2021-02-17 03:21:46,nit: `Unexpect` -> `Unexpected`,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577298195,577298195,src/wallet/wallet.cpp
meshcollider,2021-02-17 03:22:10,same here,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577298302,577298302,src/wallet/wallet.cpp
meshcollider,2021-02-17 03:29:17,style nit: spacing after `if(`,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577300357,577300357,src/wallet/external_signer_scriptpubkeyman.cpp
meshcollider,2021-02-17 03:31:20,nit: `fingerpint` -> `fingerprint`,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r577300888,577300888,src/wallet/externalsigner.cpp
laanwj,2021-02-18 09:32:17,I think this is due to a merge conflict: please keep the error message here. Not finding `boost::process` when `--enable-external-signer` is fatal.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r578263080,578263080,configure.ac
laanwj,2021-02-18 09:41:49,"I would prefer to introduce a `CBaseChainParams.externalSignerChainName()` instead of an elaborate `if()` here, for this to keep the chain definition data-driven in one place.\n\n(not necessarily in this PR though, we can do this later)",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r578269831,578269831,src/wallet/external_signer.cpp
Sjors,2021-02-18 13:18:30,"Oops, good catch, that indeed fell through the rebase cracks. Hard to test presence of boost::process seperate from the rest of boost on macOS, because they're bundled. But on Windows this matters.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r578409028,578409028,configure.ac
Sjors,2021-02-18 13:41:30,"Alternatively, also out of scope, we could turn `CBaseChainParams` into an enum, so it's easier to use switch statements, and less likely to be forgotten if we add another network type.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r578425220,578425220,src/wallet/external_signer.cpp
laanwj,2021-02-18 17:48:14,"That'd be another option, but I prefer  to have all this information in one place. It was the point of having chainparams structures in the first place.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r578624796,578624796,src/wallet/external_signer.cpp
laanwj,2021-02-18 17:50:22,"But good point that they are strings. They also match exactly here:\n```\nconst std::string CBaseChainParams::MAIN = ""main"";\nconst std::string CBaseChainParams::TESTNET = ""test"";\nconst std::string CBaseChainParams::SIGNET = ""signet"";\nconst std::string CBaseChainParams::REGTEST = ""regtest"";\n```\nSo wouldn't `"" --chain "" + m_chain` achieve exactly the same?",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r578626279,578626279,src/wallet/external_signer.cpp
Sjors,2021-02-18 18:32:38,Good point...,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r578655332,578655332,src/wallet/external_signer.cpp
fanquake,2021-02-21 03:38:17,Shouldn't this be Boost::Process?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r579744214,579744214,src/wallet/external_signer_scriptpubkeyman.cpp
fanquake,2021-02-21 03:38:37,Also Boost::Process here?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r579744226,579744226,src/wallet/wallet.cpp
fanquake,2021-02-21 03:43:51,"```suggestion\n    const std::string command = gArgs.GetArg(""-signer"", DEFAULT_EXTERNAL_SIGNER);\n```\n\nOr if we are going to use `""""`, we should remove the commented code.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r579744584,579744584,src/wallet/external_signer_scriptpubkeyman.cpp
fanquake,2021-02-21 07:02:00,"From what I can see, `GetExternalSigner()` is only called from code that is inside `ENABLE_EXTERNAL_SIGNER` #idfefs. So why can't we wrap this whole function in an #ifdef, and drop the need for the `throw()`? I think the same goes for most of this file, and some other functions in this PR. It seems weird that when external signing is not enabled, we'd still be compiling functions that aren't calle",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r579761889,579761889,src/wallet/external_signer_scriptpubkeyman.cpp
Sjors,2021-02-21 14:23:37,"Not sure what was going on there, but I put `DEFAULT_EXTERNAL_SIGNER` back.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r579814595,579814595,src/wallet/external_signer_scriptpubkeyman.cpp
Sjors,2021-02-21 14:54:32,If turns out I can put the entire `ExternalSignerScriptPubKeyMan` inside `#ifdef`. The most important `throw()`s are already in `wallet.cpp`.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r579818781,579818781,src/wallet/external_signer_scriptpubkeyman.cpp
Sjors,2021-02-21 15:13:23,"Now I remember, I didn't want a circular inclusion. I just switched to `""""`.",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r579821268,579821268,src/wallet/external_signer_scriptpubkeyman.cpp
MarcoFalke,2021-02-23 17:10:47,nit: Would be nice to use named args,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r581223149,581223149,doc/external-signer.md
MarcoFalke,2021-02-23 17:25:01,why does this rpc require a wallet?,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r581234055,581234055,src/wallet/rpcsigner.cpp
Sjors,2021-02-23 19:34:36,I might get rid of that requirement in a followup.,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r581331476,581331476,src/wallet/rpcsigner.cpp
hebasto,2021-06-11 04:17:19,~It seems the `@ENABLE_EXTERNAL_SIGNER_TRUE@` substitution does not work for some reasons.~,https://github.com/bitcoin/bitcoin/pull/16546#discussion_r649678490,649678490,test/config.ini.in
hebasto,2021-06-11 05:32:40,"nm, forgot to run `./autogen.sh`",https://github.com/bitcoin/bitcoin/pull/16546#discussion_r649701057,649701057,test/config.ini.in
