[
  {
    "sha": "d48249e2400487fb99a6bb15999eccd489a71318",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDgyNDllMjQwMDQ4N2ZiOTlhNmJiMTU5OTllY2NkNDg5YTcxMzE4",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-08-12T19:23:54Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-08-28T01:10:42Z"
      },
      "message": "Move src/tinyformat.h to src/tinyformat/tinyformat.h\n\nFor consistency with other bundled dependencies. Having it in the top-level\ndirectory makes it clear that it is a library that we're including\nrather than a file that is a part of the project.\n\ntinyformat/tinyformat.h and tinyformat/README.md are drawn from the existing\nsha reference:\nhttps://github.com/c42f/tinyformat/tree/689695cf58700e6defe3741829564cd682d5ae57\n\nExisting modifications to tinyformat are moved to utilstrprintf.h, clearly\nseparating upstream and project code.\n\nThis includes changes in:\n695041e4952ea40e0 - util: Update tinyformat\n1b8fd35aadfad6a1e - Make tinyformat errors raise an exception instead of assert()ing\n9b6d4c5cdc1ad7b12 - Move strprintf define to tinyformat.h\n6e5fd003e04b81115 - Move `*Version()` functions to version.h/cpp\n9eaa0afa6ec5d3dd0 - tinyformat: force USE_VARIADIC_TEMPLATES\nb651270cd6bfdd6d7 - util: Throw tinyformat::format_error on formatting error\n\nThis does not include changes below, which are cosmetic or apparently unintentional:\n64fb0ac016c7fd01c - Declare single-argument (non-converting) constructors \"explicit\"\n4d9b4256d89d1f7c6 - Fix typos\n\nNote I excluded only the tinyformat cpp from the boost lint checks out of an\nabundance of caution - these files are not actually built into bitcoin so are\nnot at risk of pulling in unwanted dependencies, whereas the header, and other\ndependencies might be.",
      "tree": {
        "sha": "aa4a814f05b439f32e5ffee9e521f3d3301a23cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa4a814f05b439f32e5ffee9e521f3d3301a23cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48249e2400487fb99a6bb15999eccd489a71318",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAluEoRQACgkQTYykuhgE\nCQb5nA//bO0gNXD/cbck5ycrQvjUPpjVUaVH7Z7S2G6m/yRVCUJt2WTgbd1IWpsz\n1QykU5tFJ0AWrPczK8MUUYpa99+Btjv2MQF0/c67dZ0QEuIATd4eIbGm4/f/XN9R\nD7eIb6GSTO+wBVqMHIeNZl8yyMvanqcZlKqziOAR8bdv5rdwuLuSHJ5on4r3fjDe\nzAMgEDNPmo8E2/fLSZptEA6OjFNqUa1Arfl18sIeLR/iElTr/LPdI3cscOwE4q50\n57rAuJuf7TnIDyAGsB7lZPZ1WilU1sO814ruXrzsyFfmNADREYma7eI/mWMYuk2X\nXRUNR5J9EG5PgEr3WboLF8gvoo9LLVesP3+nw31r02CZndPPRSyixiW7gtxfFZid\nh1VqOKfNScFbZxAdnZEuvXIV82cxv5dW3Abdga1aVdy4l67ruHjfaytMndzi8cFV\nfMKhgm0WJEdHZLCMmUlFVBZ0tUcmVcnKnHf6oxvbXGSBJtLgxoUP0JuTM6tTiy3S\n5pkiDywtrQJ6Vwb+jLI6FpttI09k0AHMZbMpIE4i6ss/4/VADdNdLKYBOVnWP/W2\nJSY8Gs1ZQXbbC8PH31gPuMqQa9Xv68mA3w29QJY1qyxULp+0vXYzXeeRmoFqZlD1\nlTrw/I0xvQf0sXeIBrRG1N1eILW3GnG9oHKYzE8JKsjVbejRWUQ=\n=+nJa\n-----END PGP SIGNATURE-----",
        "payload": "tree aa4a814f05b439f32e5ffee9e521f3d3301a23cb\nparent f030410e88f11c5ff1ce6c80b463a1c7f6d39830\nauthor Ben Woosley <ben.woosley@gmail.com> 1534101834 +0000\ncommitter Ben Woosley <ben.woosley@gmail.com> 1535418642 -0700\n\nMove src/tinyformat.h to src/tinyformat/tinyformat.h\n\nFor consistency with other bundled dependencies. Having it in the top-level\ndirectory makes it clear that it is a library that we're including\nrather than a file that is a part of the project.\n\ntinyformat/tinyformat.h and tinyformat/README.md are drawn from the existing\nsha reference:\nhttps://github.com/c42f/tinyformat/tree/689695cf58700e6defe3741829564cd682d5ae57\n\nExisting modifications to tinyformat are moved to utilstrprintf.h, clearly\nseparating upstream and project code.\n\nThis includes changes in:\n695041e4952ea40e0 - util: Update tinyformat\n1b8fd35aadfad6a1e - Make tinyformat errors raise an exception instead of assert()ing\n9b6d4c5cdc1ad7b12 - Move strprintf define to tinyformat.h\n6e5fd003e04b81115 - Move `*Version()` functions to version.h/cpp\n9eaa0afa6ec5d3dd0 - tinyformat: force USE_VARIADIC_TEMPLATES\nb651270cd6bfdd6d7 - util: Throw tinyformat::format_error on formatting error\n\nThis does not include changes below, which are cosmetic or apparently unintentional:\n64fb0ac016c7fd01c - Declare single-argument (non-converting) constructors \"explicit\"\n4d9b4256d89d1f7c6 - Fix typos\n\nNote I excluded only the tinyformat cpp from the boost lint checks out of an\nabundance of caution - these files are not actually built into bitcoin so are\nnot at risk of pulling in unwanted dependencies, whereas the header, and other\ndependencies might be.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48249e2400487fb99a6bb15999eccd489a71318",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d48249e2400487fb99a6bb15999eccd489a71318",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48249e2400487fb99a6bb15999eccd489a71318/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f030410e88f11c5ff1ce6c80b463a1c7f6d39830",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f030410e88f11c5ff1ce6c80b463a1c7f6d39830",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f030410e88f11c5ff1ce6c80b463a1c7f6d39830"
      }
    ],
    "stats": {
      "total": 2144,
      "additions": 1087,
      "deletions": 1057
    },
    "files": [
      {
        "sha": "ec9efd679e4e6dc21b0d01bcdaabfdcaf1011710",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -168,7 +168,7 @@ $(BITCOIN_CLI_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n if USE_LCOV\n-LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\"\n+LCOV_FILTER_PATTERN=-p \"/usr/include/\" -p \"src/leveldb/\" -p \"src/bench/\" -p \"src/univalue\" -p \"src/crypto/ctaes\" -p \"src/secp256k1\" -p \"src/tinyformat\"\n \n baseline.info:\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@"
      },
      {
        "sha": "d6bba05e2df99f94aff362923ed37e1d82b209f1",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -31,7 +31,7 @@\n     'src/qt/bitcoinstrings.cpp',\n     'src/chainparamsseeds.h',\n     # other external copyrights:\n-    'src/tinyformat.h',\n+    'src/tinyformat/tinyformat.h',\n     'src/leveldb/util/env_win.cc',\n     'src/crypto/ctaes/bench.c',\n     'test/functional/test_framework/bignum.py',"
      },
      {
        "sha": "b62e885b5965559560e98e1176f3303cc559870e",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -698,6 +698,9 @@ Current subtrees include:\n - src/crypto/ctaes\n   - Upstream at https://github.com/bitcoin-core/ctaes ; actively maintained by Core contributors.\n \n+- src/tinyformat\n+  - Upstream at https://github.com/c42f/tinyformat ; report important PRs to Core to avoid delay.\n+\n - src/univalue\n   - Upstream at https://github.com/jgarzik/univalue ; report important PRs to Core to avoid delay.\n "
      },
      {
        "sha": "6f1cbee019698d6763e8e2945881c80e267acc6d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -363,6 +363,7 @@ libbitcoin_consensus_a_SOURCES = \\\n   serialize.h \\\n   span.h \\\n   tinyformat.h \\\n+  tinyformat/tinyformat.h \\\n   uint256.cpp \\\n   uint256.h \\\n   utilstrencodings.cpp \\"
      },
      {
        "sha": "9a8877900c9a26b36a6b82a12beb9a4448d7865f",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -7,9 +7,10 @@\n \n #include <hash.h>\n #include <tinyformat.h>\n-#include <utilstrencodings.h>\n #include <crypto/common.h>\n \n+#include <sstream>\n+\n uint256 CBlockHeader::GetHash() const\n {\n     return SerializeHash(*this);"
      },
      {
        "sha": "794f77a105eb19a32e0570f4d441f9148c5607d9",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -10,6 +10,8 @@\n #include <serialize.h>\n #include <uint256.h>\n \n+#include <string>\n+\n /** Nodes collect new transactions into a block, hash them into a hash tree,\n  * and scan through nonce values to make the block's hash satisfy proof-of-work\n  * requirements.  When they solve the proof-of-work, they broadcast the block"
      },
      {
        "sha": "2d02f206e98c6a4b7c17028c0210f45c7ef888ea",
        "filename": "src/tinyformat.h",
        "status": "modified",
        "additions": 20,
        "deletions": 1048,
        "changes": 1068,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/src/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/src/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat.h?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -1,1068 +1,40 @@\n-// tinyformat.h\n-// Copyright (C) 2011, Chris Foster [chris42f (at) gmail (d0t) com]\n-//\n-// Boost Software License - Version 1.0\n-//\n-// Permission is hereby granted, free of charge, to any person or organization\n-// obtaining a copy of the software and accompanying documentation covered by\n-// this license (the \"Software\") to use, reproduce, display, distribute,\n-// execute, and transmit the Software, and to prepare derivative works of the\n-// Software, and to permit third-parties to whom the Software is furnished to\n-// do so, all subject to the following:\n-//\n-// The copyright notices in the Software and this entire statement, including\n-// the above license grant, this restriction and the following disclaimer,\n-// must be included in all copies of the Software, in whole or in part, and\n-// all derivative works of the Software, unless such copies or derivative\n-// works are solely in the form of machine-executable object code generated by\n-// a source language processor.\n-//\n-// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n-// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n-// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n-// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n-// DEALINGS IN THE SOFTWARE.\n+// Copyright (c) 2014-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-//------------------------------------------------------------------------------\n-// Tinyformat: A minimal type safe printf replacement\n-//\n-// tinyformat.h is a type safe printf replacement library in a single C++\n-// header file.  Design goals include:\n-//\n-// * Type safety and extensibility for user defined types.\n-// * C99 printf() compatibility, to the extent possible using std::ostream\n-// * Simplicity and minimalism.  A single header file to include and distribute\n-//   with your projects.\n-// * Augment rather than replace the standard stream formatting mechanism\n-// * C++98 support, with optional C++11 niceties\n-//\n-//\n-// Main interface example usage\n-// ----------------------------\n-//\n-// To print a date to std::cout:\n-//\n-//   std::string weekday = \"Wednesday\";\n-//   const char* month = \"July\";\n-//   size_t day = 27;\n-//   long hour = 14;\n-//   int min = 44;\n-//\n-//   tfm::printf(\"%s, %s %d, %.2d:%.2d\\n\", weekday, month, day, hour, min);\n-//\n-// The strange types here emphasize the type safety of the interface; it is\n-// possible to print a std::string using the \"%s\" conversion, and a\n-// size_t using the \"%d\" conversion.  A similar result could be achieved\n-// using either of the tfm::format() functions.  One prints on a user provided\n-// stream:\n-//\n-//   tfm::format(std::cerr, \"%s, %s %d, %.2d:%.2d\\n\",\n-//               weekday, month, day, hour, min);\n-//\n-// The other returns a std::string:\n-//\n-//   std::string date = tfm::format(\"%s, %s %d, %.2d:%.2d\\n\",\n-//                                  weekday, month, day, hour, min);\n-//   std::cout << date;\n-//\n-// These are the three primary interface functions.  There is also a\n-// convenience function printfln() which appends a newline to the usual result\n-// of printf() for super simple logging.\n-//\n-//\n-// User defined format functions\n-// -----------------------------\n-//\n-// Simulating variadic templates in C++98 is pretty painful since it requires\n-// writing out the same function for each desired number of arguments.  To make\n-// this bearable tinyformat comes with a set of macros which are used\n-// internally to generate the API, but which may also be used in user code.\n-//\n-// The three macros TINYFORMAT_ARGTYPES(n), TINYFORMAT_VARARGS(n) and\n-// TINYFORMAT_PASSARGS(n) will generate a list of n argument types,\n-// type/name pairs and argument names respectively when called with an integer\n-// n between 1 and 16.  We can use these to define a macro which generates the\n-// desired user defined function with n arguments.  To generate all 16 user\n-// defined function bodies, use the macro TINYFORMAT_FOREACH_ARGNUM.  For an\n-// example, see the implementation of printf() at the end of the source file.\n-//\n-// Sometimes it's useful to be able to pass a list of format arguments through\n-// to a non-template function.  The FormatList class is provided as a way to do\n-// this by storing the argument list in a type-opaque way.  Continuing the\n-// example from above, we construct a FormatList using makeFormatList():\n-//\n-//   FormatListRef formatList = tfm::makeFormatList(weekday, month, day, hour, min);\n-//\n-// The format list can now be passed into any non-template function and used\n-// via a call to the vformat() function:\n-//\n-//   tfm::vformat(std::cout, \"%s, %s %d, %.2d:%.2d\\n\", formatList);\n-//\n-//\n-// Additional API information\n-// --------------------------\n-//\n-// Error handling: Define TINYFORMAT_ERROR to customize the error handling for\n-// format strings which are unsupported or have the wrong number of format\n-// specifiers (calls assert() by default).\n-//\n-// User defined types: Uses operator<< for user defined types by default.\n-// Overload formatValue() for more control.\n+#ifndef BITCOIN_TINYFORMAT_H\n+#define BITCOIN_TINYFORMAT_H\n \n-\n-#ifndef TINYFORMAT_H_INCLUDED\n-#define TINYFORMAT_H_INCLUDED\n-\n-namespace tinyformat {}\n-//------------------------------------------------------------------------------\n-// Config section.  Customize to your liking!\n-\n-// Namespace alias to encourage brevity\n-namespace tfm = tinyformat;\n-\n-// Error handling; calls assert() by default.\n-#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)\n-\n-// Define for C++11 variadic templates which make the code shorter & more\n-// general.  If you don't define this, C++11 support is autodetected below.\n-#define TINYFORMAT_USE_VARIADIC_TEMPLATES\n-\n-\n-//------------------------------------------------------------------------------\n-// Implementation details.\n-#include <algorithm>\n-#include <cassert>\n-#include <iostream>\n-#include <sstream>\n #include <stdexcept>\n+#include <sstream>\n+#include <string>\n \n-#ifndef TINYFORMAT_ERROR\n-#   define TINYFORMAT_ERROR(reason) assert(0 && reason)\n-#endif\n-\n-#if !defined(TINYFORMAT_USE_VARIADIC_TEMPLATES) && !defined(TINYFORMAT_NO_VARIADIC_TEMPLATES)\n-#   ifdef __GXX_EXPERIMENTAL_CXX0X__\n-#       define TINYFORMAT_USE_VARIADIC_TEMPLATES\n-#   endif\n-#endif\n-\n-#if defined(__GLIBCXX__) && __GLIBCXX__ < 20080201\n-//  std::showpos is broken on old libstdc++ as provided with OSX.  See\n-//  http://gcc.gnu.org/ml/libstdc++/2007-11/msg00075.html\n-#   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n-#endif\n-\n-#ifdef __APPLE__\n-// Workaround OSX linker warning: Xcode uses different default symbol\n-// visibilities for static libs vs executables (see issue #25)\n-#   define TINYFORMAT_HIDDEN __attribute__((visibility(\"hidden\")))\n-#else\n-#   define TINYFORMAT_HIDDEN\n-#endif\n+// configure tinyformat prior to inclusion\n+#define TINYFORMAT_USE_VARIADIC_TEMPLATES\n+#define TINYFORMAT_ERROR(reasonString) throw tinyformat::format_error(reasonString)\n \n namespace tinyformat {\n-\n-class format_error: public std::runtime_error\n+// must define format_error early to enable expansion of TINYFORMAT_ERROR in tinyformat.h\n+class format_error : public std::runtime_error\n {\n public:\n-    explicit format_error(const std::string &what): std::runtime_error(what) {\n-    }\n-};\n-\n-//------------------------------------------------------------------------------\n-namespace detail {\n-\n-// Test whether type T1 is convertible to type T2\n-template <typename T1, typename T2>\n-struct is_convertible\n-{\n-    private:\n-        // two types of different size\n-        struct fail { char dummy[2]; };\n-        struct succeed { char dummy; };\n-        // Try to convert a T1 to a T2 by plugging into tryConvert\n-        static fail tryConvert(...);\n-        static succeed tryConvert(const T2&);\n-        static const T1& makeT1();\n-    public:\n-#       ifdef _MSC_VER\n-        // Disable spurious loss of precision warnings in tryConvert(makeT1())\n-#       pragma warning(push)\n-#       pragma warning(disable:4244)\n-#       pragma warning(disable:4267)\n-#       endif\n-        // Standard trick: the (...) version of tryConvert will be chosen from\n-        // the overload set only if the version taking a T2 doesn't match.\n-        // Then we compare the sizes of the return types to check which\n-        // function matched.  Very neat, in a disgusting kind of way :)\n-        static const bool value =\n-            sizeof(tryConvert(makeT1())) == sizeof(succeed);\n-#       ifdef _MSC_VER\n-#       pragma warning(pop)\n-#       endif\n-};\n-\n-\n-// Detect when a type is not a wchar_t string\n-template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };\n-template<> struct is_wchar<wchar_t*> {};\n-template<> struct is_wchar<const wchar_t*> {};\n-template<int n> struct is_wchar<const wchar_t[n]> {};\n-template<int n> struct is_wchar<wchar_t[n]> {};\n-\n-\n-// Format the value by casting to type fmtT.  This default implementation\n-// should never be called.\n-template<typename T, typename fmtT, bool convertible = is_convertible<T, fmtT>::value>\n-struct formatValueAsType\n-{\n-    static void invoke(std::ostream& /*out*/, const T& /*value*/) { assert(0); }\n-};\n-// Specialized version for types that can actually be converted to fmtT, as\n-// indicated by the \"convertible\" template parameter.\n-template<typename T, typename fmtT>\n-struct formatValueAsType<T,fmtT,true>\n-{\n-    static void invoke(std::ostream& out, const T& value)\n-        { out << static_cast<fmtT>(value); }\n-};\n-\n-#ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n-template<typename T, bool convertible = is_convertible<T, int>::value>\n-struct formatZeroIntegerWorkaround\n-{\n-    static bool invoke(std::ostream& /**/, const T& /**/) { return false; }\n-};\n-template<typename T>\n-struct formatZeroIntegerWorkaround<T,true>\n-{\n-    static bool invoke(std::ostream& out, const T& value)\n-    {\n-        if (static_cast<int>(value) == 0 && out.flags() & std::ios::showpos)\n-        {\n-            out << \"+0\";\n-            return true;\n-        }\n-        return false;\n-    }\n-};\n-#endif // TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n-\n-// Convert an arbitrary type to integer.  The version with convertible=false\n-// throws an error.\n-template<typename T, bool convertible = is_convertible<T,int>::value>\n-struct convertToInt\n-{\n-    static int invoke(const T& /*value*/)\n-    {\n-        TINYFORMAT_ERROR(\"tinyformat: Cannot convert from argument type to \"\n-                         \"integer for use as variable width or precision\");\n-        return 0;\n-    }\n-};\n-// Specialization for convertToInt when conversion is possible\n-template<typename T>\n-struct convertToInt<T,true>\n-{\n-    static int invoke(const T& value) { return static_cast<int>(value); }\n-};\n-\n-// Format at most ntrunc characters to the given stream.\n-template<typename T>\n-inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)\n-{\n-    std::ostringstream tmp;\n-    tmp << value;\n-    std::string result = tmp.str();\n-    out.write(result.c_str(), (std::min)(ntrunc, static_cast<int>(result.size())));\n-}\n-#define TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(type)       \\\n-inline void formatTruncated(std::ostream& out, type* value, int ntrunc) \\\n-{                                                           \\\n-    std::streamsize len = 0;                                \\\n-    while(len < ntrunc && value[len] != 0)                  \\\n-        ++len;                                              \\\n-    out.write(value, len);                                  \\\n-}\n-// Overload for const char* and char*.  Could overload for signed & unsigned\n-// char too, but these are technically unneeded for printf compatibility.\n-TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(const char)\n-TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(char)\n-#undef TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR\n-\n-} // namespace detail\n-\n-\n-//------------------------------------------------------------------------------\n-// Variable formatting functions.  May be overridden for user-defined types if\n-// desired.\n-\n-\n-/// Format a value into a stream, delegating to operator<< by default.\n-///\n-/// Users may override this for their own types.  When this function is called,\n-/// the stream flags will have been modified according to the format string.\n-/// The format specification is provided in the range [fmtBegin, fmtEnd).  For\n-/// truncating conversions, ntrunc is set to the desired maximum number of\n-/// characters, for example \"%.7s\" calls formatValue with ntrunc = 7.\n-///\n-/// By default, formatValue() uses the usual stream insertion operator\n-/// operator<< to format the type T, with special cases for the %c and %p\n-/// conversions.\n-template<typename T>\n-inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n-                        const char* fmtEnd, int ntrunc, const T& value)\n-{\n-#ifndef TINYFORMAT_ALLOW_WCHAR_STRINGS\n-    // Since we don't support printing of wchar_t using \"%ls\", make it fail at\n-    // compile time in preference to printing as a void* at runtime.\n-    typedef typename detail::is_wchar<T>::tinyformat_wchar_is_not_supported DummyType;\n-    (void) DummyType(); // avoid unused type warning with gcc-4.8\n-#endif\n-    // The mess here is to support the %c and %p conversions: if these\n-    // conversions are active we try to convert the type to a char or const\n-    // void* respectively and format that instead of the value itself.  For the\n-    // %p conversion it's important to avoid dereferencing the pointer, which\n-    // could otherwise lead to a crash when printing a dangling (const char*).\n-    const bool canConvertToChar = detail::is_convertible<T,char>::value;\n-    const bool canConvertToVoidPtr = detail::is_convertible<T, const void*>::value;\n-    if(canConvertToChar && *(fmtEnd-1) == 'c')\n-        detail::formatValueAsType<T, char>::invoke(out, value);\n-    else if(canConvertToVoidPtr && *(fmtEnd-1) == 'p')\n-        detail::formatValueAsType<T, const void*>::invoke(out, value);\n-#ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n-    else if(detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n-#endif\n-    else if(ntrunc >= 0)\n-    {\n-        // Take care not to overread C strings in truncating conversions like\n-        // \"%.4s\" where at most 4 characters may be read.\n-        detail::formatTruncated(out, value, ntrunc);\n-    }\n-    else\n-        out << value;\n-}\n-\n-\n-// Overloaded version for char types to support printing as an integer\n-#define TINYFORMAT_DEFINE_FORMATVALUE_CHAR(charType)                  \\\n-inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,  \\\n-                        const char* fmtEnd, int /**/, charType value) \\\n-{                                                                     \\\n-    switch(*(fmtEnd-1))                                               \\\n-    {                                                                 \\\n-        case 'u': case 'd': case 'i': case 'o': case 'X': case 'x':   \\\n-            out << static_cast<int>(value); break;                    \\\n-        default:                                                      \\\n-            out << value;                   break;                    \\\n-    }                                                                 \\\n-}\n-// per 3.9.1: char, signed char and unsigned char are all distinct types\n-TINYFORMAT_DEFINE_FORMATVALUE_CHAR(char)\n-TINYFORMAT_DEFINE_FORMATVALUE_CHAR(signed char)\n-TINYFORMAT_DEFINE_FORMATVALUE_CHAR(unsigned char)\n-#undef TINYFORMAT_DEFINE_FORMATVALUE_CHAR\n-\n-\n-//------------------------------------------------------------------------------\n-// Tools for emulating variadic templates in C++98.  The basic idea here is\n-// stolen from the boost preprocessor metaprogramming library and cut down to\n-// be just general enough for what we need.\n-\n-#define TINYFORMAT_ARGTYPES(n) TINYFORMAT_ARGTYPES_ ## n\n-#define TINYFORMAT_VARARGS(n) TINYFORMAT_VARARGS_ ## n\n-#define TINYFORMAT_PASSARGS(n) TINYFORMAT_PASSARGS_ ## n\n-#define TINYFORMAT_PASSARGS_TAIL(n) TINYFORMAT_PASSARGS_TAIL_ ## n\n-\n-// To keep it as transparent as possible, the macros below have been generated\n-// using python via the excellent cog.py code generation script.  This avoids\n-// the need for a bunch of complex (but more general) preprocessor tricks as\n-// used in boost.preprocessor.\n-//\n-// To rerun the code generation in place, use `cog.py -r tinyformat.h`\n-// (see http://nedbatchelder.com/code/cog).  Alternatively you can just create\n-// extra versions by hand.\n-\n-/*[[[cog\n-maxParams = 16\n-\n-def makeCommaSepLists(lineTemplate, elemTemplate, startInd=1):\n-    for j in range(startInd,maxParams+1):\n-        list = ', '.join([elemTemplate % {'i':i} for i in range(startInd,j+1)])\n-        cog.outl(lineTemplate % {'j':j, 'list':list})\n-\n-makeCommaSepLists('#define TINYFORMAT_ARGTYPES_%(j)d %(list)s',\n-                  'class T%(i)d')\n-\n-cog.outl()\n-makeCommaSepLists('#define TINYFORMAT_VARARGS_%(j)d %(list)s',\n-                  'const T%(i)d& v%(i)d')\n-\n-cog.outl()\n-makeCommaSepLists('#define TINYFORMAT_PASSARGS_%(j)d %(list)s', 'v%(i)d')\n-\n-cog.outl()\n-cog.outl('#define TINYFORMAT_PASSARGS_TAIL_1')\n-makeCommaSepLists('#define TINYFORMAT_PASSARGS_TAIL_%(j)d , %(list)s',\n-                  'v%(i)d', startInd = 2)\n-\n-cog.outl()\n-cog.outl('#define TINYFORMAT_FOREACH_ARGNUM(m) \\\\\\n    ' +\n-         ' '.join(['m(%d)' % (j,) for j in range(1,maxParams+1)]))\n-]]]*/\n-#define TINYFORMAT_ARGTYPES_1 class T1\n-#define TINYFORMAT_ARGTYPES_2 class T1, class T2\n-#define TINYFORMAT_ARGTYPES_3 class T1, class T2, class T3\n-#define TINYFORMAT_ARGTYPES_4 class T1, class T2, class T3, class T4\n-#define TINYFORMAT_ARGTYPES_5 class T1, class T2, class T3, class T4, class T5\n-#define TINYFORMAT_ARGTYPES_6 class T1, class T2, class T3, class T4, class T5, class T6\n-#define TINYFORMAT_ARGTYPES_7 class T1, class T2, class T3, class T4, class T5, class T6, class T7\n-#define TINYFORMAT_ARGTYPES_8 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8\n-#define TINYFORMAT_ARGTYPES_9 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9\n-#define TINYFORMAT_ARGTYPES_10 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10\n-#define TINYFORMAT_ARGTYPES_11 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11\n-#define TINYFORMAT_ARGTYPES_12 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12\n-#define TINYFORMAT_ARGTYPES_13 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13\n-#define TINYFORMAT_ARGTYPES_14 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14\n-#define TINYFORMAT_ARGTYPES_15 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15\n-#define TINYFORMAT_ARGTYPES_16 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16\n-\n-#define TINYFORMAT_VARARGS_1 const T1& v1\n-#define TINYFORMAT_VARARGS_2 const T1& v1, const T2& v2\n-#define TINYFORMAT_VARARGS_3 const T1& v1, const T2& v2, const T3& v3\n-#define TINYFORMAT_VARARGS_4 const T1& v1, const T2& v2, const T3& v3, const T4& v4\n-#define TINYFORMAT_VARARGS_5 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5\n-#define TINYFORMAT_VARARGS_6 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6\n-#define TINYFORMAT_VARARGS_7 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7\n-#define TINYFORMAT_VARARGS_8 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8\n-#define TINYFORMAT_VARARGS_9 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9\n-#define TINYFORMAT_VARARGS_10 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10\n-#define TINYFORMAT_VARARGS_11 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11\n-#define TINYFORMAT_VARARGS_12 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12\n-#define TINYFORMAT_VARARGS_13 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13\n-#define TINYFORMAT_VARARGS_14 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13, const T14& v14\n-#define TINYFORMAT_VARARGS_15 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13, const T14& v14, const T15& v15\n-#define TINYFORMAT_VARARGS_16 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13, const T14& v14, const T15& v15, const T16& v16\n-\n-#define TINYFORMAT_PASSARGS_1 v1\n-#define TINYFORMAT_PASSARGS_2 v1, v2\n-#define TINYFORMAT_PASSARGS_3 v1, v2, v3\n-#define TINYFORMAT_PASSARGS_4 v1, v2, v3, v4\n-#define TINYFORMAT_PASSARGS_5 v1, v2, v3, v4, v5\n-#define TINYFORMAT_PASSARGS_6 v1, v2, v3, v4, v5, v6\n-#define TINYFORMAT_PASSARGS_7 v1, v2, v3, v4, v5, v6, v7\n-#define TINYFORMAT_PASSARGS_8 v1, v2, v3, v4, v5, v6, v7, v8\n-#define TINYFORMAT_PASSARGS_9 v1, v2, v3, v4, v5, v6, v7, v8, v9\n-#define TINYFORMAT_PASSARGS_10 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10\n-#define TINYFORMAT_PASSARGS_11 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11\n-#define TINYFORMAT_PASSARGS_12 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12\n-#define TINYFORMAT_PASSARGS_13 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13\n-#define TINYFORMAT_PASSARGS_14 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14\n-#define TINYFORMAT_PASSARGS_15 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15\n-#define TINYFORMAT_PASSARGS_16 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16\n-\n-#define TINYFORMAT_PASSARGS_TAIL_1\n-#define TINYFORMAT_PASSARGS_TAIL_2 , v2\n-#define TINYFORMAT_PASSARGS_TAIL_3 , v2, v3\n-#define TINYFORMAT_PASSARGS_TAIL_4 , v2, v3, v4\n-#define TINYFORMAT_PASSARGS_TAIL_5 , v2, v3, v4, v5\n-#define TINYFORMAT_PASSARGS_TAIL_6 , v2, v3, v4, v5, v6\n-#define TINYFORMAT_PASSARGS_TAIL_7 , v2, v3, v4, v5, v6, v7\n-#define TINYFORMAT_PASSARGS_TAIL_8 , v2, v3, v4, v5, v6, v7, v8\n-#define TINYFORMAT_PASSARGS_TAIL_9 , v2, v3, v4, v5, v6, v7, v8, v9\n-#define TINYFORMAT_PASSARGS_TAIL_10 , v2, v3, v4, v5, v6, v7, v8, v9, v10\n-#define TINYFORMAT_PASSARGS_TAIL_11 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11\n-#define TINYFORMAT_PASSARGS_TAIL_12 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12\n-#define TINYFORMAT_PASSARGS_TAIL_13 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13\n-#define TINYFORMAT_PASSARGS_TAIL_14 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14\n-#define TINYFORMAT_PASSARGS_TAIL_15 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15\n-#define TINYFORMAT_PASSARGS_TAIL_16 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16\n-\n-#define TINYFORMAT_FOREACH_ARGNUM(m) \\\n-    m(1) m(2) m(3) m(4) m(5) m(6) m(7) m(8) m(9) m(10) m(11) m(12) m(13) m(14) m(15) m(16)\n-//[[[end]]]\n-\n-\n-\n-namespace detail {\n-\n-// Type-opaque holder for an argument to format(), with associated actions on\n-// the type held as explicit function pointers.  This allows FormatArg's for\n-// each argument to be allocated as a homogenous array inside FormatList\n-// whereas a naive implementation based on inheritance does not.\n-class FormatArg\n-{\n-    public:\n-        FormatArg()\n-             : m_value(nullptr),\n-             m_formatImpl(nullptr),\n-             m_toIntImpl(nullptr)\n-         { }\n-\n-        template<typename T>\n-        explicit FormatArg(const T& value)\n-            : m_value(static_cast<const void*>(&value)),\n-            m_formatImpl(&formatImpl<T>),\n-            m_toIntImpl(&toIntImpl<T>)\n-        { }\n-\n-        void format(std::ostream& out, const char* fmtBegin,\n-                    const char* fmtEnd, int ntrunc) const\n-        {\n-            assert(m_value);\n-            assert(m_formatImpl);\n-            m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n-        }\n-\n-        int toInt() const\n-        {\n-            assert(m_value);\n-            assert(m_toIntImpl);\n-            return m_toIntImpl(m_value);\n-        }\n-\n-    private:\n-        template<typename T>\n-        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,\n-                        const char* fmtEnd, int ntrunc, const void* value)\n-        {\n-            formatValue(out, fmtBegin, fmtEnd, ntrunc, *static_cast<const T*>(value));\n-        }\n-\n-        template<typename T>\n-        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)\n-        {\n-            return convertToInt<T>::invoke(*static_cast<const T*>(value));\n-        }\n-\n-        const void* m_value;\n-        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,\n-                             const char* fmtEnd, int ntrunc, const void* value);\n-        int (*m_toIntImpl)(const void* value);\n-};\n-\n-\n-// Parse and return an integer from the string c, as atoi()\n-// On return, c is set to one past the end of the integer.\n-inline int parseIntAndAdvance(const char*& c)\n-{\n-    int i = 0;\n-    for(;*c >= '0' && *c <= '9'; ++c)\n-        i = 10*i + (*c - '0');\n-    return i;\n-}\n-\n-// Print literal part of format string and return next format spec\n-// position.\n-//\n-// Skips over any occurrences of '%%', printing a literal '%' to the\n-// output.  The position of the first % character of the next\n-// nontrivial format spec is returned, or the end of string.\n-inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n-{\n-    const char* c = fmt;\n-    for(;; ++c)\n-    {\n-        switch(*c)\n-        {\n-            case '\\0':\n-                out.write(fmt, c - fmt);\n-                return c;\n-            case '%':\n-                out.write(fmt, c - fmt);\n-                if(*(c+1) != '%')\n-                    return c;\n-                // for \"%%\", tack trailing % onto next literal section.\n-                fmt = ++c;\n-                break;\n-            default:\n-                break;\n-        }\n-    }\n-}\n-\n-\n-// Parse a format string and set the stream state accordingly.\n-//\n-// The format mini-language recognized here is meant to be the one from C99,\n-// with the form \"%[flags][width][.precision][length]type\".\n-//\n-// Formatting options which can't be natively represented using the ostream\n-// state are returned in spacePadPositive (for space padded positive numbers)\n-// and ntrunc (for truncating conversions).  argIndex is incremented if\n-// necessary to pull out variable width and precision.  The function returns a\n-// pointer to the character after the end of the current format spec.\n-inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,\n-                                         int& ntrunc, const char* fmtStart,\n-                                         const detail::FormatArg* formatters,\n-                                         int& argIndex, int numFormatters)\n-{\n-    if(*fmtStart != '%')\n-    {\n-        TINYFORMAT_ERROR(\"tinyformat: Not enough conversion specifiers in format string\");\n-        return fmtStart;\n-    }\n-    // Reset stream state to defaults.\n-    out.width(0);\n-    out.precision(6);\n-    out.fill(' ');\n-    // Reset most flags; ignore irrelevant unitbuf & skipws.\n-    out.unsetf(std::ios::adjustfield | std::ios::basefield |\n-               std::ios::floatfield | std::ios::showbase | std::ios::boolalpha |\n-               std::ios::showpoint | std::ios::showpos | std::ios::uppercase);\n-    bool precisionSet = false;\n-    bool widthSet = false;\n-    int widthExtra = 0;\n-    const char* c = fmtStart + 1;\n-    // 1) Parse flags\n-    for(;; ++c)\n-    {\n-        switch(*c)\n-        {\n-            case '#':\n-                out.setf(std::ios::showpoint | std::ios::showbase);\n-                continue;\n-            case '0':\n-                // overridden by left alignment ('-' flag)\n-                if(!(out.flags() & std::ios::left))\n-                {\n-                    // Use internal padding so that numeric values are\n-                    // formatted correctly, eg -00010 rather than 000-10\n-                    out.fill('0');\n-                    out.setf(std::ios::internal, std::ios::adjustfield);\n-                }\n-                continue;\n-            case '-':\n-                out.fill(' ');\n-                out.setf(std::ios::left, std::ios::adjustfield);\n-                continue;\n-            case ' ':\n-                // overridden by show positive sign, '+' flag.\n-                if(!(out.flags() & std::ios::showpos))\n-                    spacePadPositive = true;\n-                continue;\n-            case '+':\n-                out.setf(std::ios::showpos);\n-                spacePadPositive = false;\n-                widthExtra = 1;\n-                continue;\n-            default:\n-                break;\n-        }\n-        break;\n-    }\n-    // 2) Parse width\n-    if(*c >= '0' && *c <= '9')\n-    {\n-        widthSet = true;\n-        out.width(parseIntAndAdvance(c));\n-    }\n-    if(*c == '*')\n-    {\n-        widthSet = true;\n-        int width = 0;\n-        if(argIndex < numFormatters)\n-            width = formatters[argIndex++].toInt();\n-        else\n-            TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width\");\n-        if(width < 0)\n-        {\n-            // negative widths correspond to '-' flag set\n-            out.fill(' ');\n-            out.setf(std::ios::left, std::ios::adjustfield);\n-            width = -width;\n-        }\n-        out.width(width);\n-        ++c;\n-    }\n-    // 3) Parse precision\n-    if(*c == '.')\n-    {\n-        ++c;\n-        int precision = 0;\n-        if(*c == '*')\n-        {\n-            ++c;\n-            if(argIndex < numFormatters)\n-                precision = formatters[argIndex++].toInt();\n-            else\n-                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable precision\");\n-        }\n-        else\n-        {\n-            if(*c >= '0' && *c <= '9')\n-                precision = parseIntAndAdvance(c);\n-            else if(*c == '-') // negative precisions ignored, treated as zero.\n-                parseIntAndAdvance(++c);\n-        }\n-        out.precision(precision);\n-        precisionSet = true;\n-    }\n-    // 4) Ignore any C99 length modifier\n-    while(*c == 'l' || *c == 'h' || *c == 'L' ||\n-          *c == 'j' || *c == 'z' || *c == 't')\n-        ++c;\n-    // 5) We're up to the conversion specifier character.\n-    // Set stream flags based on conversion specifier (thanks to the\n-    // boost::format class for forging the way here).\n-    bool intConversion = false;\n-    switch(*c)\n-    {\n-        case 'u': case 'd': case 'i':\n-            out.setf(std::ios::dec, std::ios::basefield);\n-            intConversion = true;\n-            break;\n-        case 'o':\n-            out.setf(std::ios::oct, std::ios::basefield);\n-            intConversion = true;\n-            break;\n-        case 'X':\n-            out.setf(std::ios::uppercase);\n-            // Falls through\n-        case 'x': case 'p':\n-            out.setf(std::ios::hex, std::ios::basefield);\n-            intConversion = true;\n-            break;\n-        case 'E':\n-            out.setf(std::ios::uppercase);\n-            // Falls through\n-        case 'e':\n-            out.setf(std::ios::scientific, std::ios::floatfield);\n-            out.setf(std::ios::dec, std::ios::basefield);\n-            break;\n-        case 'F':\n-            out.setf(std::ios::uppercase);\n-            // Falls through\n-        case 'f':\n-            out.setf(std::ios::fixed, std::ios::floatfield);\n-            break;\n-        case 'G':\n-            out.setf(std::ios::uppercase);\n-            // Falls through\n-        case 'g':\n-            out.setf(std::ios::dec, std::ios::basefield);\n-            // As in boost::format, let stream decide float format.\n-            out.flags(out.flags() & ~std::ios::floatfield);\n-            break;\n-        case 'a': case 'A':\n-            TINYFORMAT_ERROR(\"tinyformat: the %a and %A conversion specs \"\n-                             \"are not supported\");\n-            break;\n-        case 'c':\n-            // Handled as special case inside formatValue()\n-            break;\n-        case 's':\n-            if(precisionSet)\n-                ntrunc = static_cast<int>(out.precision());\n-            // Make %s print booleans as \"true\" and \"false\"\n-            out.setf(std::ios::boolalpha);\n-            break;\n-        case 'n':\n-            // Not supported - will cause problems!\n-            TINYFORMAT_ERROR(\"tinyformat: %n conversion spec not supported\");\n-            break;\n-        case '\\0':\n-            TINYFORMAT_ERROR(\"tinyformat: Conversion spec incorrectly \"\n-                             \"terminated by end of string\");\n-            return c;\n-        default:\n-            break;\n-    }\n-    if(intConversion && precisionSet && !widthSet)\n-    {\n-        // \"precision\" for integers gives the minimum number of digits (to be\n-        // padded with zeros on the left).  This isn't really supported by the\n-        // iostreams, but we can approximately simulate it with the width if\n-        // the width isn't otherwise used.\n-        out.width(out.precision() + widthExtra);\n-        out.setf(std::ios::internal, std::ios::adjustfield);\n-        out.fill('0');\n-    }\n-    return c+1;\n-}\n-\n-\n-//------------------------------------------------------------------------------\n-inline void formatImpl(std::ostream& out, const char* fmt,\n-                       const detail::FormatArg* formatters,\n-                       int numFormatters)\n-{\n-    // Saved stream state\n-    std::streamsize origWidth = out.width();\n-    std::streamsize origPrecision = out.precision();\n-    std::ios::fmtflags origFlags = out.flags();\n-    char origFill = out.fill();\n-\n-    for (int argIndex = 0; argIndex < numFormatters; ++argIndex)\n-    {\n-        // Parse the format string\n-        fmt = printFormatStringLiteral(out, fmt);\n-        bool spacePadPositive = false;\n-        int ntrunc = -1;\n-        const char* fmtEnd = streamStateFromFormat(out, spacePadPositive, ntrunc, fmt,\n-                                                   formatters, argIndex, numFormatters);\n-        if (argIndex >= numFormatters)\n-        {\n-            // Check args remain after reading any variable width/precision\n-            TINYFORMAT_ERROR(\"tinyformat: Not enough format arguments\");\n-            return;\n-        }\n-        const FormatArg& arg = formatters[argIndex];\n-        // Format the arg into the stream.\n-        if(!spacePadPositive)\n-            arg.format(out, fmt, fmtEnd, ntrunc);\n-        else\n-        {\n-            // The following is a special case with no direct correspondence\n-            // between stream formatting and the printf() behaviour.  Simulate\n-            // it crudely by formatting into a temporary string stream and\n-            // munging the resulting string.\n-            std::ostringstream tmpStream;\n-            tmpStream.copyfmt(out);\n-            tmpStream.setf(std::ios::showpos);\n-            arg.format(tmpStream, fmt, fmtEnd, ntrunc);\n-            std::string result = tmpStream.str(); // allocates... yuck.\n-            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n-                if(result[i] == '+') result[i] = ' ';\n-            out << result;\n-        }\n-        fmt = fmtEnd;\n-    }\n-\n-    // Print remaining part of format string.\n-    fmt = printFormatStringLiteral(out, fmt);\n-    if(*fmt != '\\0')\n-        TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n-\n-    // Restore stream state\n-    out.width(origWidth);\n-    out.precision(origPrecision);\n-    out.flags(origFlags);\n-    out.fill(origFill);\n-}\n-\n-} // namespace detail\n-\n-\n-/// List of template arguments format(), held in a type-opaque way.\n-///\n-/// A const reference to FormatList (typedef'd as FormatListRef) may be\n-/// conveniently used to pass arguments to non-template functions: All type\n-/// information has been stripped from the arguments, leaving just enough of a\n-/// common interface to perform formatting as required.\n-class FormatList\n-{\n-    public:\n-        FormatList(detail::FormatArg* formatters, int N)\n-            : m_formatters(formatters), m_N(N) { }\n-\n-        friend void vformat(std::ostream& out, const char* fmt,\n-                            const FormatList& list);\n-\n-    private:\n-        const detail::FormatArg* m_formatters;\n-        int m_N;\n-};\n-\n-/// Reference to type-opaque format list for passing to vformat()\n-typedef const FormatList& FormatListRef;\n-\n-\n-namespace detail {\n-\n-// Format list subclass with fixed storage to avoid dynamic allocation\n-template<int N>\n-class FormatListN : public FormatList\n-{\n-    public:\n-#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n-        template<typename... Args>\n-        explicit FormatListN(const Args&... args)\n-            : FormatList(&m_formatterStore[0], N),\n-            m_formatterStore { FormatArg(args)... }\n-        { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }\n-#else // C++98 version\n-        void init(int) {}\n-#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)       \\\n-                                                               \\\n-        template<TINYFORMAT_ARGTYPES(n)>                       \\\n-        explicit FormatListN(TINYFORMAT_VARARGS(n))            \\\n-            : FormatList(&m_formatterStore[0], n)              \\\n-        { assert(n == N); init(0, TINYFORMAT_PASSARGS(n)); }   \\\n-                                                               \\\n-        template<TINYFORMAT_ARGTYPES(n)>                       \\\n-        void init(int i, TINYFORMAT_VARARGS(n))                \\\n-        {                                                      \\\n-            m_formatterStore[i] = FormatArg(v1);               \\\n-            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));             \\\n-        }\n-\n-        TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR)\n-#       undef TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR\n-#endif\n-\n-    private:\n-        FormatArg m_formatterStore[N];\n-};\n-\n-// Special 0-arg version - MSVC says zero-sized C array in struct is nonstandard\n-template<> class FormatListN<0> : public FormatList\n-{\n-    public: FormatListN() : FormatList(0, 0) {}\n+    format_error(const std::string& what) : std::runtime_error(what) {}\n };\n+} // namespace tinyformat\n \n-} // namespace detail\n-\n-\n-//------------------------------------------------------------------------------\n-// Primary API functions\n-\n-#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n-\n-/// Make type-agnostic format list from list of template arguments.\n-///\n-/// The exact return type of this function is an implementation detail and\n-/// shouldn't be relied upon.  Instead it should be stored as a FormatListRef:\n-///\n-///   FormatListRef formatList = makeFormatList( /*...*/ );\n-template<typename... Args>\n-detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)\n-{\n-    return detail::FormatListN<sizeof...(args)>(args...);\n-}\n-\n-#else // C++98 version\n-\n-inline detail::FormatListN<0> makeFormatList()\n-{\n-    return detail::FormatListN<0>();\n-}\n-#define TINYFORMAT_MAKE_MAKEFORMATLIST(n)                     \\\n-template<TINYFORMAT_ARGTYPES(n)>                              \\\n-detail::FormatListN<n> makeFormatList(TINYFORMAT_VARARGS(n))  \\\n-{                                                             \\\n-    return detail::FormatListN<n>(TINYFORMAT_PASSARGS(n));    \\\n-}\n-TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_MAKEFORMATLIST)\n-#undef TINYFORMAT_MAKE_MAKEFORMATLIST\n-\n-#endif\n-\n-/// Format list of arguments to the stream according to the given format string.\n-///\n-/// The name vformat() is chosen for the semantic similarity to vprintf(): the\n-/// list of format arguments is held in a single function argument.\n-inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n-{\n-    detail::formatImpl(out, fmt, list.m_formatters, list.m_N);\n-}\n-\n-\n-#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n-\n-/// Format list of arguments to the stream according to given format string.\n-template<typename... Args>\n-void format(std::ostream& out, const char* fmt, const Args&... args)\n-{\n-    vformat(out, fmt, makeFormatList(args...));\n-}\n-\n-/// Format list of arguments according to the given format string and return\n-/// the result as a string.\n-template<typename... Args>\n-std::string format(const char* fmt, const Args&... args)\n-{\n-    std::ostringstream oss;\n-    format(oss, fmt, args...);\n-    return oss.str();\n-}\n-\n-/// Format list of arguments to std::cout, according to the given format string\n-template<typename... Args>\n-void printf(const char* fmt, const Args&... args)\n-{\n-    format(std::cout, fmt, args...);\n-}\n-\n-template<typename... Args>\n-void printfln(const char* fmt, const Args&... args)\n-{\n-    format(std::cout, fmt, args...);\n-    std::cout << '\\n';\n-}\n-\n-#else // C++98 version\n-\n-inline void format(std::ostream& out, const char* fmt)\n-{\n-    vformat(out, fmt, makeFormatList());\n-}\n-\n-inline std::string format(const char* fmt)\n-{\n-    std::ostringstream oss;\n-    format(oss, fmt);\n-    return oss.str();\n-}\n-\n-inline void printf(const char* fmt)\n-{\n-    format(std::cout, fmt);\n-}\n-\n-inline void printfln(const char* fmt)\n-{\n-    format(std::cout, fmt);\n-    std::cout << '\\n';\n-}\n-\n-#define TINYFORMAT_MAKE_FORMAT_FUNCS(n)                                   \\\n-                                                                          \\\n-template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-void format(std::ostream& out, const char* fmt, TINYFORMAT_VARARGS(n))    \\\n-{                                                                         \\\n-    vformat(out, fmt, makeFormatList(TINYFORMAT_PASSARGS(n)));            \\\n-}                                                                         \\\n-                                                                          \\\n-template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-std::string format(const char* fmt, TINYFORMAT_VARARGS(n))                \\\n-{                                                                         \\\n-    std::ostringstream oss;                                               \\\n-    format(oss, fmt, TINYFORMAT_PASSARGS(n));                             \\\n-    return oss.str();                                                     \\\n-}                                                                         \\\n-                                                                          \\\n-template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-void printf(const char* fmt, TINYFORMAT_VARARGS(n))                       \\\n-{                                                                         \\\n-    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n-}                                                                         \\\n-                                                                          \\\n-template<TINYFORMAT_ARGTYPES(n)>                                          \\\n-void printfln(const char* fmt, TINYFORMAT_VARARGS(n))                     \\\n-{                                                                         \\\n-    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n-    std::cout << '\\n';                                                    \\\n-}\n-\n-TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMAT_FUNCS)\n-#undef TINYFORMAT_MAKE_FORMAT_FUNCS\n-\n-#endif\n+#include <tinyformat/tinyformat.h>\n \n-// Added for Bitcoin Core\n+namespace tinyformat {\n+// must define format wrapper template after wrapped format is defined in tinyformat.h\n template<typename... Args>\n-std::string format(const std::string &fmt, const Args&... args)\n+std::string format(const std::string& fmt, const Args&... args)\n {\n     std::ostringstream oss;\n     format(oss, fmt.c_str(), args...);\n     return oss.str();\n }\n-\n } // namespace tinyformat\n \n-#define strprintf tfm::format\n+#define strprintf tinyformat::format\n \n-#endif // TINYFORMAT_H_INCLUDED\n+#endif"
      },
      {
        "sha": "85a22c15ab17de08e9894acd0afcda5fbecc39c5",
        "filename": "src/tinyformat/tinyformat.h",
        "status": "added",
        "additions": 1051,
        "deletions": 0,
        "changes": 1051,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/src/tinyformat/tinyformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/src/tinyformat/tinyformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/tinyformat/tinyformat.h?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -0,0 +1,1051 @@\n+// tinyformat.h\n+// Copyright (C) 2011, Chris Foster [chris42f (at) gmail (d0t) com]\n+//\n+// Boost Software License - Version 1.0\n+//\n+// Permission is hereby granted, free of charge, to any person or organization\n+// obtaining a copy of the software and accompanying documentation covered by\n+// this license (the \"Software\") to use, reproduce, display, distribute,\n+// execute, and transmit the Software, and to prepare derivative works of the\n+// Software, and to permit third-parties to whom the Software is furnished to\n+// do so, all subject to the following:\n+//\n+// The copyright notices in the Software and this entire statement, including\n+// the above license grant, this restriction and the following disclaimer,\n+// must be included in all copies of the Software, in whole or in part, and\n+// all derivative works of the Software, unless such copies or derivative\n+// works are solely in the form of machine-executable object code generated by\n+// a source language processor.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT\n+// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE\n+// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,\n+// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n+// DEALINGS IN THE SOFTWARE.\n+\n+//------------------------------------------------------------------------------\n+// Tinyformat: A minimal type safe printf replacement\n+//\n+// tinyformat.h is a type safe printf replacement library in a single C++\n+// header file.  Design goals include:\n+//\n+// * Type safety and extensibility for user defined types.\n+// * C99 printf() compatibility, to the extent possible using std::ostream\n+// * Simplicity and minimalism.  A single header file to include and distribute\n+//   with your projects.\n+// * Augment rather than replace the standard stream formatting mechanism\n+// * C++98 support, with optional C++11 niceties\n+//\n+//\n+// Main interface example usage\n+// ----------------------------\n+//\n+// To print a date to std::cout:\n+//\n+//   std::string weekday = \"Wednesday\";\n+//   const char* month = \"July\";\n+//   size_t day = 27;\n+//   long hour = 14;\n+//   int min = 44;\n+//\n+//   tfm::printf(\"%s, %s %d, %.2d:%.2d\\n\", weekday, month, day, hour, min);\n+//\n+// The strange types here emphasize the type safety of the interface; it is\n+// possible to print a std::string using the \"%s\" conversion, and a\n+// size_t using the \"%d\" conversion.  A similar result could be achieved\n+// using either of the tfm::format() functions.  One prints on a user provided\n+// stream:\n+//\n+//   tfm::format(std::cerr, \"%s, %s %d, %.2d:%.2d\\n\",\n+//               weekday, month, day, hour, min);\n+//\n+// The other returns a std::string:\n+//\n+//   std::string date = tfm::format(\"%s, %s %d, %.2d:%.2d\\n\",\n+//                                  weekday, month, day, hour, min);\n+//   std::cout << date;\n+//\n+// These are the three primary interface functions.  There is also a\n+// convenience function printfln() which appends a newline to the usual result\n+// of printf() for super simple logging.\n+//\n+//\n+// User defined format functions\n+// -----------------------------\n+//\n+// Simulating variadic templates in C++98 is pretty painful since it requires\n+// writing out the same function for each desired number of arguments.  To make\n+// this bearable tinyformat comes with a set of macros which are used\n+// internally to generate the API, but which may also be used in user code.\n+//\n+// The three macros TINYFORMAT_ARGTYPES(n), TINYFORMAT_VARARGS(n) and\n+// TINYFORMAT_PASSARGS(n) will generate a list of n argument types,\n+// type/name pairs and argument names respectively when called with an integer\n+// n between 1 and 16.  We can use these to define a macro which generates the\n+// desired user defined function with n arguments.  To generate all 16 user\n+// defined function bodies, use the macro TINYFORMAT_FOREACH_ARGNUM.  For an\n+// example, see the implementation of printf() at the end of the source file.\n+//\n+// Sometimes it's useful to be able to pass a list of format arguments through\n+// to a non-template function.  The FormatList class is provided as a way to do\n+// this by storing the argument list in a type-opaque way.  Continuing the\n+// example from above, we construct a FormatList using makeFormatList():\n+//\n+//   FormatListRef formatList = tfm::makeFormatList(weekday, month, day, hour, min);\n+//\n+// The format list can now be passed into any non-template function and used\n+// via a call to the vformat() function:\n+//\n+//   tfm::vformat(std::cout, \"%s, %s %d, %.2d:%.2d\\n\", formatList);\n+//\n+//\n+// Additional API information\n+// --------------------------\n+//\n+// Error handling: Define TINYFORMAT_ERROR to customize the error handling for\n+// format strings which are unsupported or have the wrong number of format\n+// specifiers (calls assert() by default).\n+//\n+// User defined types: Uses operator<< for user defined types by default.\n+// Overload formatValue() for more control.\n+\n+\n+#ifndef TINYFORMAT_H_INCLUDED\n+#define TINYFORMAT_H_INCLUDED\n+\n+namespace tinyformat {}\n+//------------------------------------------------------------------------------\n+// Config section.  Customize to your liking!\n+\n+// Namespace alias to encourage brevity\n+namespace tfm = tinyformat;\n+\n+// Error handling; calls assert() by default.\n+// #define TINYFORMAT_ERROR(reasonString) your_error_handler(reasonString)\n+\n+// Define for C++11 variadic templates which make the code shorter & more\n+// general.  If you don't define this, C++11 support is autodetected below.\n+// #define TINYFORMAT_USE_VARIADIC_TEMPLATES\n+\n+\n+//------------------------------------------------------------------------------\n+// Implementation details.\n+#include <algorithm>\n+#include <cassert>\n+#include <iostream>\n+#include <sstream>\n+\n+#ifndef TINYFORMAT_ERROR\n+#   define TINYFORMAT_ERROR(reason) assert(0 && reason)\n+#endif\n+\n+#if !defined(TINYFORMAT_USE_VARIADIC_TEMPLATES) && !defined(TINYFORMAT_NO_VARIADIC_TEMPLATES)\n+#   ifdef __GXX_EXPERIMENTAL_CXX0X__\n+#       define TINYFORMAT_USE_VARIADIC_TEMPLATES\n+#   endif\n+#endif\n+\n+#if defined(__GLIBCXX__) && __GLIBCXX__ < 20080201\n+//  std::showpos is broken on old libstdc++ as provided with OSX.  See\n+//  http://gcc.gnu.org/ml/libstdc++/2007-11/msg00075.html\n+#   define TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n+#endif\n+\n+#ifdef __APPLE__\n+// Workaround OSX linker warning: xcode uses different default symbol\n+// visibilities for static libs vs executables (see issue #25)\n+#   define TINYFORMAT_HIDDEN __attribute__((visibility(\"hidden\")))\n+#else\n+#   define TINYFORMAT_HIDDEN\n+#endif\n+\n+namespace tinyformat {\n+\n+//------------------------------------------------------------------------------\n+namespace detail {\n+\n+// Test whether type T1 is convertible to type T2\n+template <typename T1, typename T2>\n+struct is_convertible\n+{\n+    private:\n+        // two types of different size\n+        struct fail { char dummy[2]; };\n+        struct succeed { char dummy; };\n+        // Try to convert a T1 to a T2 by plugging into tryConvert\n+        static fail tryConvert(...);\n+        static succeed tryConvert(const T2&);\n+        static const T1& makeT1();\n+    public:\n+#       ifdef _MSC_VER\n+        // Disable spurious loss of precision warnings in tryConvert(makeT1())\n+#       pragma warning(push)\n+#       pragma warning(disable:4244)\n+#       pragma warning(disable:4267)\n+#       endif\n+        // Standard trick: the (...) version of tryConvert will be chosen from\n+        // the overload set only if the version taking a T2 doesn't match.\n+        // Then we compare the sizes of the return types to check which\n+        // function matched.  Very neat, in a disgusting kind of way :)\n+        static const bool value =\n+            sizeof(tryConvert(makeT1())) == sizeof(succeed);\n+#       ifdef _MSC_VER\n+#       pragma warning(pop)\n+#       endif\n+};\n+\n+\n+// Detect when a type is not a wchar_t string\n+template<typename T> struct is_wchar { typedef int tinyformat_wchar_is_not_supported; };\n+template<> struct is_wchar<wchar_t*> {};\n+template<> struct is_wchar<const wchar_t*> {};\n+template<int n> struct is_wchar<const wchar_t[n]> {};\n+template<int n> struct is_wchar<wchar_t[n]> {};\n+\n+\n+// Format the value by casting to type fmtT.  This default implementation\n+// should never be called.\n+template<typename T, typename fmtT, bool convertible = is_convertible<T, fmtT>::value>\n+struct formatValueAsType\n+{\n+    static void invoke(std::ostream& /*out*/, const T& /*value*/) { assert(0); }\n+};\n+// Specialized version for types that can actually be converted to fmtT, as\n+// indicated by the \"convertible\" template parameter.\n+template<typename T, typename fmtT>\n+struct formatValueAsType<T,fmtT,true>\n+{\n+    static void invoke(std::ostream& out, const T& value)\n+        { out << static_cast<fmtT>(value); }\n+};\n+\n+#ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n+template<typename T, bool convertible = is_convertible<T, int>::value>\n+struct formatZeroIntegerWorkaround\n+{\n+    static bool invoke(std::ostream& /**/, const T& /**/) { return false; }\n+};\n+template<typename T>\n+struct formatZeroIntegerWorkaround<T,true>\n+{\n+    static bool invoke(std::ostream& out, const T& value)\n+    {\n+        if (static_cast<int>(value) == 0 && out.flags() & std::ios::showpos)\n+        {\n+            out << \"+0\";\n+            return true;\n+        }\n+        return false;\n+    }\n+};\n+#endif // TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n+\n+// Convert an arbitrary type to integer.  The version with convertible=false\n+// throws an error.\n+template<typename T, bool convertible = is_convertible<T,int>::value>\n+struct convertToInt\n+{\n+    static int invoke(const T& /*value*/)\n+    {\n+        TINYFORMAT_ERROR(\"tinyformat: Cannot convert from argument type to \"\n+                         \"integer for use as variable width or precision\");\n+        return 0;\n+    }\n+};\n+// Specialization for convertToInt when conversion is possible\n+template<typename T>\n+struct convertToInt<T,true>\n+{\n+    static int invoke(const T& value) { return static_cast<int>(value); }\n+};\n+\n+// Format at most ntrunc characters to the given stream.\n+template<typename T>\n+inline void formatTruncated(std::ostream& out, const T& value, int ntrunc)\n+{\n+    std::ostringstream tmp;\n+    tmp << value;\n+    std::string result = tmp.str();\n+    out.write(result.c_str(), (std::min)(ntrunc, static_cast<int>(result.size())));\n+}\n+#define TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(type)       \\\n+inline void formatTruncated(std::ostream& out, type* value, int ntrunc) \\\n+{                                                           \\\n+    std::streamsize len = 0;                                \\\n+    while(len < ntrunc && value[len] != 0)                  \\\n+        ++len;                                              \\\n+    out.write(value, len);                                  \\\n+}\n+// Overload for const char* and char*.  Could overload for signed & unsigned\n+// char too, but these are technically unneeded for printf compatibility.\n+TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(const char)\n+TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR(char)\n+#undef TINYFORMAT_DEFINE_FORMAT_TRUNCATED_CSTR\n+\n+} // namespace detail\n+\n+\n+//------------------------------------------------------------------------------\n+// Variable formatting functions.  May be overridden for user-defined types if\n+// desired.\n+\n+\n+/// Format a value into a stream, delegating to operator<< by default.\n+///\n+/// Users may override this for their own types.  When this function is called,\n+/// the stream flags will have been modified according to the format string.\n+/// The format specification is provided in the range [fmtBegin, fmtEnd).  For\n+/// truncating conversions, ntrunc is set to the desired maximum number of\n+/// characters, for example \"%.7s\" calls formatValue with ntrunc = 7.\n+///\n+/// By default, formatValue() uses the usual stream insertion operator\n+/// operator<< to format the type T, with special cases for the %c and %p\n+/// conversions.\n+template<typename T>\n+inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,\n+                        const char* fmtEnd, int ntrunc, const T& value)\n+{\n+#ifndef TINYFORMAT_ALLOW_WCHAR_STRINGS\n+    // Since we don't support printing of wchar_t using \"%ls\", make it fail at\n+    // compile time in preference to printing as a void* at runtime.\n+    typedef typename detail::is_wchar<T>::tinyformat_wchar_is_not_supported DummyType;\n+    (void) DummyType(); // avoid unused type warning with gcc-4.8\n+#endif\n+    // The mess here is to support the %c and %p conversions: if these\n+    // conversions are active we try to convert the type to a char or const\n+    // void* respectively and format that instead of the value itself.  For the\n+    // %p conversion it's important to avoid dereferencing the pointer, which\n+    // could otherwise lead to a crash when printing a dangling (const char*).\n+    const bool canConvertToChar = detail::is_convertible<T,char>::value;\n+    const bool canConvertToVoidPtr = detail::is_convertible<T, const void*>::value;\n+    if(canConvertToChar && *(fmtEnd-1) == 'c')\n+        detail::formatValueAsType<T, char>::invoke(out, value);\n+    else if(canConvertToVoidPtr && *(fmtEnd-1) == 'p')\n+        detail::formatValueAsType<T, const void*>::invoke(out, value);\n+#ifdef TINYFORMAT_OLD_LIBSTDCPLUSPLUS_WORKAROUND\n+    else if(detail::formatZeroIntegerWorkaround<T>::invoke(out, value)) /**/;\n+#endif\n+    else if(ntrunc >= 0)\n+    {\n+        // Take care not to overread C strings in truncating conversions like\n+        // \"%.4s\" where at most 4 characters may be read.\n+        detail::formatTruncated(out, value, ntrunc);\n+    }\n+    else\n+        out << value;\n+}\n+\n+\n+// Overloaded version for char types to support printing as an integer\n+#define TINYFORMAT_DEFINE_FORMATVALUE_CHAR(charType)                  \\\n+inline void formatValue(std::ostream& out, const char* /*fmtBegin*/,  \\\n+                        const char* fmtEnd, int /**/, charType value) \\\n+{                                                                     \\\n+    switch(*(fmtEnd-1))                                               \\\n+    {                                                                 \\\n+        case 'u': case 'd': case 'i': case 'o': case 'X': case 'x':   \\\n+            out << static_cast<int>(value); break;                    \\\n+        default:                                                      \\\n+            out << value;                   break;                    \\\n+    }                                                                 \\\n+}\n+// per 3.9.1: char, signed char and unsigned char are all distinct types\n+TINYFORMAT_DEFINE_FORMATVALUE_CHAR(char)\n+TINYFORMAT_DEFINE_FORMATVALUE_CHAR(signed char)\n+TINYFORMAT_DEFINE_FORMATVALUE_CHAR(unsigned char)\n+#undef TINYFORMAT_DEFINE_FORMATVALUE_CHAR\n+\n+\n+//------------------------------------------------------------------------------\n+// Tools for emulating variadic templates in C++98.  The basic idea here is\n+// stolen from the boost preprocessor metaprogramming library and cut down to\n+// be just general enough for what we need.\n+\n+#define TINYFORMAT_ARGTYPES(n) TINYFORMAT_ARGTYPES_ ## n\n+#define TINYFORMAT_VARARGS(n) TINYFORMAT_VARARGS_ ## n\n+#define TINYFORMAT_PASSARGS(n) TINYFORMAT_PASSARGS_ ## n\n+#define TINYFORMAT_PASSARGS_TAIL(n) TINYFORMAT_PASSARGS_TAIL_ ## n\n+\n+// To keep it as transparent as possible, the macros below have been generated\n+// using python via the excellent cog.py code generation script.  This avoids\n+// the need for a bunch of complex (but more general) preprocessor tricks as\n+// used in boost.preprocessor.\n+//\n+// To rerun the code generation in place, use `cog.py -r tinyformat.h`\n+// (see http://nedbatchelder.com/code/cog).  Alternatively you can just create\n+// extra versions by hand.\n+\n+/*[[[cog\n+maxParams = 16\n+\n+def makeCommaSepLists(lineTemplate, elemTemplate, startInd=1):\n+    for j in range(startInd,maxParams+1):\n+        list = ', '.join([elemTemplate % {'i':i} for i in range(startInd,j+1)])\n+        cog.outl(lineTemplate % {'j':j, 'list':list})\n+\n+makeCommaSepLists('#define TINYFORMAT_ARGTYPES_%(j)d %(list)s',\n+                  'class T%(i)d')\n+\n+cog.outl()\n+makeCommaSepLists('#define TINYFORMAT_VARARGS_%(j)d %(list)s',\n+                  'const T%(i)d& v%(i)d')\n+\n+cog.outl()\n+makeCommaSepLists('#define TINYFORMAT_PASSARGS_%(j)d %(list)s', 'v%(i)d')\n+\n+cog.outl()\n+cog.outl('#define TINYFORMAT_PASSARGS_TAIL_1')\n+makeCommaSepLists('#define TINYFORMAT_PASSARGS_TAIL_%(j)d , %(list)s',\n+                  'v%(i)d', startInd = 2)\n+\n+cog.outl()\n+cog.outl('#define TINYFORMAT_FOREACH_ARGNUM(m) \\\\\\n    ' +\n+         ' '.join(['m(%d)' % (j,) for j in range(1,maxParams+1)]))\n+]]]*/\n+#define TINYFORMAT_ARGTYPES_1 class T1\n+#define TINYFORMAT_ARGTYPES_2 class T1, class T2\n+#define TINYFORMAT_ARGTYPES_3 class T1, class T2, class T3\n+#define TINYFORMAT_ARGTYPES_4 class T1, class T2, class T3, class T4\n+#define TINYFORMAT_ARGTYPES_5 class T1, class T2, class T3, class T4, class T5\n+#define TINYFORMAT_ARGTYPES_6 class T1, class T2, class T3, class T4, class T5, class T6\n+#define TINYFORMAT_ARGTYPES_7 class T1, class T2, class T3, class T4, class T5, class T6, class T7\n+#define TINYFORMAT_ARGTYPES_8 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8\n+#define TINYFORMAT_ARGTYPES_9 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9\n+#define TINYFORMAT_ARGTYPES_10 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10\n+#define TINYFORMAT_ARGTYPES_11 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11\n+#define TINYFORMAT_ARGTYPES_12 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12\n+#define TINYFORMAT_ARGTYPES_13 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13\n+#define TINYFORMAT_ARGTYPES_14 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14\n+#define TINYFORMAT_ARGTYPES_15 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15\n+#define TINYFORMAT_ARGTYPES_16 class T1, class T2, class T3, class T4, class T5, class T6, class T7, class T8, class T9, class T10, class T11, class T12, class T13, class T14, class T15, class T16\n+\n+#define TINYFORMAT_VARARGS_1 const T1& v1\n+#define TINYFORMAT_VARARGS_2 const T1& v1, const T2& v2\n+#define TINYFORMAT_VARARGS_3 const T1& v1, const T2& v2, const T3& v3\n+#define TINYFORMAT_VARARGS_4 const T1& v1, const T2& v2, const T3& v3, const T4& v4\n+#define TINYFORMAT_VARARGS_5 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5\n+#define TINYFORMAT_VARARGS_6 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6\n+#define TINYFORMAT_VARARGS_7 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7\n+#define TINYFORMAT_VARARGS_8 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8\n+#define TINYFORMAT_VARARGS_9 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9\n+#define TINYFORMAT_VARARGS_10 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10\n+#define TINYFORMAT_VARARGS_11 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11\n+#define TINYFORMAT_VARARGS_12 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12\n+#define TINYFORMAT_VARARGS_13 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13\n+#define TINYFORMAT_VARARGS_14 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13, const T14& v14\n+#define TINYFORMAT_VARARGS_15 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13, const T14& v14, const T15& v15\n+#define TINYFORMAT_VARARGS_16 const T1& v1, const T2& v2, const T3& v3, const T4& v4, const T5& v5, const T6& v6, const T7& v7, const T8& v8, const T9& v9, const T10& v10, const T11& v11, const T12& v12, const T13& v13, const T14& v14, const T15& v15, const T16& v16\n+\n+#define TINYFORMAT_PASSARGS_1 v1\n+#define TINYFORMAT_PASSARGS_2 v1, v2\n+#define TINYFORMAT_PASSARGS_3 v1, v2, v3\n+#define TINYFORMAT_PASSARGS_4 v1, v2, v3, v4\n+#define TINYFORMAT_PASSARGS_5 v1, v2, v3, v4, v5\n+#define TINYFORMAT_PASSARGS_6 v1, v2, v3, v4, v5, v6\n+#define TINYFORMAT_PASSARGS_7 v1, v2, v3, v4, v5, v6, v7\n+#define TINYFORMAT_PASSARGS_8 v1, v2, v3, v4, v5, v6, v7, v8\n+#define TINYFORMAT_PASSARGS_9 v1, v2, v3, v4, v5, v6, v7, v8, v9\n+#define TINYFORMAT_PASSARGS_10 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10\n+#define TINYFORMAT_PASSARGS_11 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11\n+#define TINYFORMAT_PASSARGS_12 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12\n+#define TINYFORMAT_PASSARGS_13 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13\n+#define TINYFORMAT_PASSARGS_14 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14\n+#define TINYFORMAT_PASSARGS_15 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15\n+#define TINYFORMAT_PASSARGS_16 v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16\n+\n+#define TINYFORMAT_PASSARGS_TAIL_1\n+#define TINYFORMAT_PASSARGS_TAIL_2 , v2\n+#define TINYFORMAT_PASSARGS_TAIL_3 , v2, v3\n+#define TINYFORMAT_PASSARGS_TAIL_4 , v2, v3, v4\n+#define TINYFORMAT_PASSARGS_TAIL_5 , v2, v3, v4, v5\n+#define TINYFORMAT_PASSARGS_TAIL_6 , v2, v3, v4, v5, v6\n+#define TINYFORMAT_PASSARGS_TAIL_7 , v2, v3, v4, v5, v6, v7\n+#define TINYFORMAT_PASSARGS_TAIL_8 , v2, v3, v4, v5, v6, v7, v8\n+#define TINYFORMAT_PASSARGS_TAIL_9 , v2, v3, v4, v5, v6, v7, v8, v9\n+#define TINYFORMAT_PASSARGS_TAIL_10 , v2, v3, v4, v5, v6, v7, v8, v9, v10\n+#define TINYFORMAT_PASSARGS_TAIL_11 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11\n+#define TINYFORMAT_PASSARGS_TAIL_12 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12\n+#define TINYFORMAT_PASSARGS_TAIL_13 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13\n+#define TINYFORMAT_PASSARGS_TAIL_14 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14\n+#define TINYFORMAT_PASSARGS_TAIL_15 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15\n+#define TINYFORMAT_PASSARGS_TAIL_16 , v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16\n+\n+#define TINYFORMAT_FOREACH_ARGNUM(m) \\\n+    m(1) m(2) m(3) m(4) m(5) m(6) m(7) m(8) m(9) m(10) m(11) m(12) m(13) m(14) m(15) m(16)\n+//[[[end]]]\n+\n+\n+\n+namespace detail {\n+\n+// Type-opaque holder for an argument to format(), with associated actions on\n+// the type held as explicit function pointers.  This allows FormatArg's for\n+// each argument to be allocated as a homogenous array inside FormatList\n+// whereas a naive implementation based on inheritance does not.\n+class FormatArg\n+{\n+    public:\n+        FormatArg()\n+            : m_value(NULL),\n+            m_formatImpl(NULL),\n+            m_toIntImpl(NULL)\n+        { }\n+\n+        template<typename T>\n+        FormatArg(const T& value)\n+            : m_value(static_cast<const void*>(&value)),\n+            m_formatImpl(&formatImpl<T>),\n+            m_toIntImpl(&toIntImpl<T>)\n+        { }\n+\n+        void format(std::ostream& out, const char* fmtBegin,\n+                    const char* fmtEnd, int ntrunc) const\n+        {\n+            assert(m_value);\n+            assert(m_formatImpl);\n+            m_formatImpl(out, fmtBegin, fmtEnd, ntrunc, m_value);\n+        }\n+\n+        int toInt() const\n+        {\n+            assert(m_value);\n+            assert(m_toIntImpl);\n+            return m_toIntImpl(m_value);\n+        }\n+\n+    private:\n+        template<typename T>\n+        TINYFORMAT_HIDDEN static void formatImpl(std::ostream& out, const char* fmtBegin,\n+                        const char* fmtEnd, int ntrunc, const void* value)\n+        {\n+            formatValue(out, fmtBegin, fmtEnd, ntrunc, *static_cast<const T*>(value));\n+        }\n+\n+        template<typename T>\n+        TINYFORMAT_HIDDEN static int toIntImpl(const void* value)\n+        {\n+            return convertToInt<T>::invoke(*static_cast<const T*>(value));\n+        }\n+\n+        const void* m_value;\n+        void (*m_formatImpl)(std::ostream& out, const char* fmtBegin,\n+                             const char* fmtEnd, int ntrunc, const void* value);\n+        int (*m_toIntImpl)(const void* value);\n+};\n+\n+\n+// Parse and return an integer from the string c, as atoi()\n+// On return, c is set to one past the end of the integer.\n+inline int parseIntAndAdvance(const char*& c)\n+{\n+    int i = 0;\n+    for(;*c >= '0' && *c <= '9'; ++c)\n+        i = 10*i + (*c - '0');\n+    return i;\n+}\n+\n+// Print literal part of format string and return next format spec\n+// position.\n+//\n+// Skips over any occurrences of '%%', printing a literal '%' to the\n+// output.  The position of the first % character of the next\n+// nontrivial format spec is returned, or the end of string.\n+inline const char* printFormatStringLiteral(std::ostream& out, const char* fmt)\n+{\n+    const char* c = fmt;\n+    for(;; ++c)\n+    {\n+        switch(*c)\n+        {\n+            case '\\0':\n+                out.write(fmt, c - fmt);\n+                return c;\n+            case '%':\n+                out.write(fmt, c - fmt);\n+                if(*(c+1) != '%')\n+                    return c;\n+                // for \"%%\", tack trailing % onto next literal section.\n+                fmt = ++c;\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+}\n+\n+\n+// Parse a format string and set the stream state accordingly.\n+//\n+// The format mini-language recognized here is meant to be the one from C99,\n+// with the form \"%[flags][width][.precision][length]type\".\n+//\n+// Formatting options which can't be natively represented using the ostream\n+// state are returned in spacePadPositive (for space padded positive numbers)\n+// and ntrunc (for truncating conversions).  argIndex is incremented if\n+// necessary to pull out variable width and precision .  The function returns a\n+// pointer to the character after the end of the current format spec.\n+inline const char* streamStateFromFormat(std::ostream& out, bool& spacePadPositive,\n+                                         int& ntrunc, const char* fmtStart,\n+                                         const detail::FormatArg* formatters,\n+                                         int& argIndex, int numFormatters)\n+{\n+    if(*fmtStart != '%')\n+    {\n+        TINYFORMAT_ERROR(\"tinyformat: Not enough conversion specifiers in format string\");\n+        return fmtStart;\n+    }\n+    // Reset stream state to defaults.\n+    out.width(0);\n+    out.precision(6);\n+    out.fill(' ');\n+    // Reset most flags; ignore irrelevant unitbuf & skipws.\n+    out.unsetf(std::ios::adjustfield | std::ios::basefield |\n+               std::ios::floatfield | std::ios::showbase | std::ios::boolalpha |\n+               std::ios::showpoint | std::ios::showpos | std::ios::uppercase);\n+    bool precisionSet = false;\n+    bool widthSet = false;\n+    int widthExtra = 0;\n+    const char* c = fmtStart + 1;\n+    // 1) Parse flags\n+    for(;; ++c)\n+    {\n+        switch(*c)\n+        {\n+            case '#':\n+                out.setf(std::ios::showpoint | std::ios::showbase);\n+                continue;\n+            case '0':\n+                // overridden by left alignment ('-' flag)\n+                if(!(out.flags() & std::ios::left))\n+                {\n+                    // Use internal padding so that numeric values are\n+                    // formatted correctly, eg -00010 rather than 000-10\n+                    out.fill('0');\n+                    out.setf(std::ios::internal, std::ios::adjustfield);\n+                }\n+                continue;\n+            case '-':\n+                out.fill(' ');\n+                out.setf(std::ios::left, std::ios::adjustfield);\n+                continue;\n+            case ' ':\n+                // overridden by show positive sign, '+' flag.\n+                if(!(out.flags() & std::ios::showpos))\n+                    spacePadPositive = true;\n+                continue;\n+            case '+':\n+                out.setf(std::ios::showpos);\n+                spacePadPositive = false;\n+                widthExtra = 1;\n+                continue;\n+            default:\n+                break;\n+        }\n+        break;\n+    }\n+    // 2) Parse width\n+    if(*c >= '0' && *c <= '9')\n+    {\n+        widthSet = true;\n+        out.width(parseIntAndAdvance(c));\n+    }\n+    if(*c == '*')\n+    {\n+        widthSet = true;\n+        int width = 0;\n+        if(argIndex < numFormatters)\n+            width = formatters[argIndex++].toInt();\n+        else\n+            TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable width\");\n+        if(width < 0)\n+        {\n+            // negative widths correspond to '-' flag set\n+            out.fill(' ');\n+            out.setf(std::ios::left, std::ios::adjustfield);\n+            width = -width;\n+        }\n+        out.width(width);\n+        ++c;\n+    }\n+    // 3) Parse precision\n+    if(*c == '.')\n+    {\n+        ++c;\n+        int precision = 0;\n+        if(*c == '*')\n+        {\n+            ++c;\n+            if(argIndex < numFormatters)\n+                precision = formatters[argIndex++].toInt();\n+            else\n+                TINYFORMAT_ERROR(\"tinyformat: Not enough arguments to read variable precision\");\n+        }\n+        else\n+        {\n+            if(*c >= '0' && *c <= '9')\n+                precision = parseIntAndAdvance(c);\n+            else if(*c == '-') // negative precisions ignored, treated as zero.\n+                parseIntAndAdvance(++c);\n+        }\n+        out.precision(precision);\n+        precisionSet = true;\n+    }\n+    // 4) Ignore any C99 length modifier\n+    while(*c == 'l' || *c == 'h' || *c == 'L' ||\n+          *c == 'j' || *c == 'z' || *c == 't')\n+        ++c;\n+    // 5) We're up to the conversion specifier character.\n+    // Set stream flags based on conversion specifier (thanks to the\n+    // boost::format class for forging the way here).\n+    bool intConversion = false;\n+    switch(*c)\n+    {\n+        case 'u': case 'd': case 'i':\n+            out.setf(std::ios::dec, std::ios::basefield);\n+            intConversion = true;\n+            break;\n+        case 'o':\n+            out.setf(std::ios::oct, std::ios::basefield);\n+            intConversion = true;\n+            break;\n+        case 'X':\n+            out.setf(std::ios::uppercase);\n+            // Falls through\n+        case 'x': case 'p':\n+            out.setf(std::ios::hex, std::ios::basefield);\n+            intConversion = true;\n+            break;\n+        case 'E':\n+            out.setf(std::ios::uppercase);\n+            // Falls through\n+        case 'e':\n+            out.setf(std::ios::scientific, std::ios::floatfield);\n+            out.setf(std::ios::dec, std::ios::basefield);\n+            break;\n+        case 'F':\n+            out.setf(std::ios::uppercase);\n+            // Falls through\n+        case 'f':\n+            out.setf(std::ios::fixed, std::ios::floatfield);\n+            break;\n+        case 'G':\n+            out.setf(std::ios::uppercase);\n+            // Falls through\n+        case 'g':\n+            out.setf(std::ios::dec, std::ios::basefield);\n+            // As in boost::format, let stream decide float format.\n+            out.flags(out.flags() & ~std::ios::floatfield);\n+            break;\n+        case 'a': case 'A':\n+            TINYFORMAT_ERROR(\"tinyformat: the %a and %A conversion specs \"\n+                             \"are not supported\");\n+            break;\n+        case 'c':\n+            // Handled as special case inside formatValue()\n+            break;\n+        case 's':\n+            if(precisionSet)\n+                ntrunc = static_cast<int>(out.precision());\n+            // Make %s print booleans as \"true\" and \"false\"\n+            out.setf(std::ios::boolalpha);\n+            break;\n+        case 'n':\n+            // Not supported - will cause problems!\n+            TINYFORMAT_ERROR(\"tinyformat: %n conversion spec not supported\");\n+            break;\n+        case '\\0':\n+            TINYFORMAT_ERROR(\"tinyformat: Conversion spec incorrectly \"\n+                             \"terminated by end of string\");\n+            return c;\n+        default:\n+            break;\n+    }\n+    if(intConversion && precisionSet && !widthSet)\n+    {\n+        // \"precision\" for integers gives the minimum number of digits (to be\n+        // padded with zeros on the left).  This isn't really supported by the\n+        // iostreams, but we can approximately simulate it with the width if\n+        // the width isn't otherwise used.\n+        out.width(out.precision() + widthExtra);\n+        out.setf(std::ios::internal, std::ios::adjustfield);\n+        out.fill('0');\n+    }\n+    return c+1;\n+}\n+\n+\n+//------------------------------------------------------------------------------\n+inline void formatImpl(std::ostream& out, const char* fmt,\n+                       const detail::FormatArg* formatters,\n+                       int numFormatters)\n+{\n+    // Saved stream state\n+    std::streamsize origWidth = out.width();\n+    std::streamsize origPrecision = out.precision();\n+    std::ios::fmtflags origFlags = out.flags();\n+    char origFill = out.fill();\n+\n+    for (int argIndex = 0; argIndex < numFormatters; ++argIndex)\n+    {\n+        // Parse the format string\n+        fmt = printFormatStringLiteral(out, fmt);\n+        bool spacePadPositive = false;\n+        int ntrunc = -1;\n+        const char* fmtEnd = streamStateFromFormat(out, spacePadPositive, ntrunc, fmt,\n+                                                   formatters, argIndex, numFormatters);\n+        if (argIndex >= numFormatters)\n+        {\n+            // Check args remain after reading any variable width/precision\n+            TINYFORMAT_ERROR(\"tinyformat: Not enough format arguments\");\n+            return;\n+        }\n+        const FormatArg& arg = formatters[argIndex];\n+        // Format the arg into the stream.\n+        if(!spacePadPositive)\n+            arg.format(out, fmt, fmtEnd, ntrunc);\n+        else\n+        {\n+            // The following is a special case with no direct correspondence\n+            // between stream formatting and the printf() behaviour.  Simulate\n+            // it crudely by formatting into a temporary string stream and\n+            // munging the resulting string.\n+            std::ostringstream tmpStream;\n+            tmpStream.copyfmt(out);\n+            tmpStream.setf(std::ios::showpos);\n+            arg.format(tmpStream, fmt, fmtEnd, ntrunc);\n+            std::string result = tmpStream.str(); // allocates... yuck.\n+            for(size_t i = 0, iend = result.size(); i < iend; ++i)\n+                if(result[i] == '+') result[i] = ' ';\n+            out << result;\n+        }\n+        fmt = fmtEnd;\n+    }\n+\n+    // Print remaining part of format string.\n+    fmt = printFormatStringLiteral(out, fmt);\n+    if(*fmt != '\\0')\n+        TINYFORMAT_ERROR(\"tinyformat: Too many conversion specifiers in format string\");\n+\n+    // Restore stream state\n+    out.width(origWidth);\n+    out.precision(origPrecision);\n+    out.flags(origFlags);\n+    out.fill(origFill);\n+}\n+\n+} // namespace detail\n+\n+\n+/// List of template arguments format(), held in a type-opaque way.\n+///\n+/// A const reference to FormatList (typedef'd as FormatListRef) may be\n+/// conveniently used to pass arguments to non-template functions: All type\n+/// information has been stripped from the arguments, leaving just enough of a\n+/// common interface to perform formatting as required.\n+class FormatList\n+{\n+    public:\n+        FormatList(detail::FormatArg* formatters, int N)\n+            : m_formatters(formatters), m_N(N) { }\n+\n+        friend void vformat(std::ostream& out, const char* fmt,\n+                            const FormatList& list);\n+\n+    private:\n+        const detail::FormatArg* m_formatters;\n+        int m_N;\n+};\n+\n+/// Reference to type-opaque format list for passing to vformat()\n+typedef const FormatList& FormatListRef;\n+\n+\n+namespace detail {\n+\n+// Format list subclass with fixed storage to avoid dynamic allocation\n+template<int N>\n+class FormatListN : public FormatList\n+{\n+    public:\n+#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n+        template<typename... Args>\n+        FormatListN(const Args&... args)\n+            : FormatList(&m_formatterStore[0], N),\n+            m_formatterStore { FormatArg(args)... }\n+        { static_assert(sizeof...(args) == N, \"Number of args must be N\"); }\n+#else // C++98 version\n+        void init(int) {}\n+#       define TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR(n)       \\\n+                                                               \\\n+        template<TINYFORMAT_ARGTYPES(n)>                       \\\n+        FormatListN(TINYFORMAT_VARARGS(n))                     \\\n+            : FormatList(&m_formatterStore[0], n)              \\\n+        { assert(n == N); init(0, TINYFORMAT_PASSARGS(n)); }   \\\n+                                                               \\\n+        template<TINYFORMAT_ARGTYPES(n)>                       \\\n+        void init(int i, TINYFORMAT_VARARGS(n))                \\\n+        {                                                      \\\n+            m_formatterStore[i] = FormatArg(v1);               \\\n+            init(i+1 TINYFORMAT_PASSARGS_TAIL(n));             \\\n+        }\n+\n+        TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR)\n+#       undef TINYFORMAT_MAKE_FORMATLIST_CONSTRUCTOR\n+#endif\n+\n+    private:\n+        FormatArg m_formatterStore[N];\n+};\n+\n+// Special 0-arg version - MSVC says zero-sized C array in struct is nonstandard\n+template<> class FormatListN<0> : public FormatList\n+{\n+    public: FormatListN() : FormatList(0, 0) {}\n+};\n+\n+} // namespace detail\n+\n+\n+//------------------------------------------------------------------------------\n+// Primary API functions\n+\n+#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n+\n+/// Make type-agnostic format list from list of template arguments.\n+///\n+/// The exact return type of this function is an implementation detail and\n+/// shouldn't be relied upon.  Instead it should be stored as a FormatListRef:\n+///\n+///   FormatListRef formatList = makeFormatList( /*...*/ );\n+template<typename... Args>\n+detail::FormatListN<sizeof...(Args)> makeFormatList(const Args&... args)\n+{\n+    return detail::FormatListN<sizeof...(args)>(args...);\n+}\n+\n+#else // C++98 version\n+\n+inline detail::FormatListN<0> makeFormatList()\n+{\n+    return detail::FormatListN<0>();\n+}\n+#define TINYFORMAT_MAKE_MAKEFORMATLIST(n)                     \\\n+template<TINYFORMAT_ARGTYPES(n)>                              \\\n+detail::FormatListN<n> makeFormatList(TINYFORMAT_VARARGS(n))  \\\n+{                                                             \\\n+    return detail::FormatListN<n>(TINYFORMAT_PASSARGS(n));    \\\n+}\n+TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_MAKEFORMATLIST)\n+#undef TINYFORMAT_MAKE_MAKEFORMATLIST\n+\n+#endif\n+\n+/// Format list of arguments to the stream according to the given format string.\n+///\n+/// The name vformat() is chosen for the semantic similarity to vprintf(): the\n+/// list of format arguments is held in a single function argument.\n+inline void vformat(std::ostream& out, const char* fmt, FormatListRef list)\n+{\n+    detail::formatImpl(out, fmt, list.m_formatters, list.m_N);\n+}\n+\n+\n+#ifdef TINYFORMAT_USE_VARIADIC_TEMPLATES\n+\n+/// Format list of arguments to the stream according to given format string.\n+template<typename... Args>\n+void format(std::ostream& out, const char* fmt, const Args&... args)\n+{\n+    vformat(out, fmt, makeFormatList(args...));\n+}\n+\n+/// Format list of arguments according to the given format string and return\n+/// the result as a string.\n+template<typename... Args>\n+std::string format(const char* fmt, const Args&... args)\n+{\n+    std::ostringstream oss;\n+    format(oss, fmt, args...);\n+    return oss.str();\n+}\n+\n+/// Format list of arguments to std::cout, according to the given format string\n+template<typename... Args>\n+void printf(const char* fmt, const Args&... args)\n+{\n+    format(std::cout, fmt, args...);\n+}\n+\n+template<typename... Args>\n+void printfln(const char* fmt, const Args&... args)\n+{\n+    format(std::cout, fmt, args...);\n+    std::cout << '\\n';\n+}\n+\n+\n+#else // C++98 version\n+\n+inline void format(std::ostream& out, const char* fmt)\n+{\n+    vformat(out, fmt, makeFormatList());\n+}\n+\n+inline std::string format(const char* fmt)\n+{\n+    std::ostringstream oss;\n+    format(oss, fmt);\n+    return oss.str();\n+}\n+\n+inline void printf(const char* fmt)\n+{\n+    format(std::cout, fmt);\n+}\n+\n+inline void printfln(const char* fmt)\n+{\n+    format(std::cout, fmt);\n+    std::cout << '\\n';\n+}\n+\n+#define TINYFORMAT_MAKE_FORMAT_FUNCS(n)                                   \\\n+                                                                          \\\n+template<TINYFORMAT_ARGTYPES(n)>                                          \\\n+void format(std::ostream& out, const char* fmt, TINYFORMAT_VARARGS(n))    \\\n+{                                                                         \\\n+    vformat(out, fmt, makeFormatList(TINYFORMAT_PASSARGS(n)));            \\\n+}                                                                         \\\n+                                                                          \\\n+template<TINYFORMAT_ARGTYPES(n)>                                          \\\n+std::string format(const char* fmt, TINYFORMAT_VARARGS(n))                \\\n+{                                                                         \\\n+    std::ostringstream oss;                                               \\\n+    format(oss, fmt, TINYFORMAT_PASSARGS(n));                             \\\n+    return oss.str();                                                     \\\n+}                                                                         \\\n+                                                                          \\\n+template<TINYFORMAT_ARGTYPES(n)>                                          \\\n+void printf(const char* fmt, TINYFORMAT_VARARGS(n))                       \\\n+{                                                                         \\\n+    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n+}                                                                         \\\n+                                                                          \\\n+template<TINYFORMAT_ARGTYPES(n)>                                          \\\n+void printfln(const char* fmt, TINYFORMAT_VARARGS(n))                     \\\n+{                                                                         \\\n+    format(std::cout, fmt, TINYFORMAT_PASSARGS(n));                       \\\n+    std::cout << '\\n';                                                    \\\n+}\n+\n+TINYFORMAT_FOREACH_ARGNUM(TINYFORMAT_MAKE_FORMAT_FUNCS)\n+#undef TINYFORMAT_MAKE_FORMAT_FUNCS\n+\n+#endif\n+\n+\n+} // namespace tinyformat\n+\n+#endif // TINYFORMAT_H_INCLUDED"
      },
      {
        "sha": "2ea714db1b38a2e1f04bb07e4a67e414ae32598e",
        "filename": "test/lint/lint-include-guards.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-include-guards.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-include-guards.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-include-guards.sh?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -10,7 +10,7 @@ export LC_ALL=C\n HEADER_ID_PREFIX=\"BITCOIN_\"\n HEADER_ID_SUFFIX=\"_H\"\n \n-REGEXP_EXCLUDE_FILES_WITH_PREFIX=\"src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\"\n+REGEXP_EXCLUDE_FILES_WITH_PREFIX=\"src/(crypto/ctaes|leveldb|secp256k1|tinyformat|univalue)/\"\n \n EXIT_CODE=0\n for HEADER_FILE in $(git ls-files -- \"*.h\" | grep -vE \"^${REGEXP_EXCLUDE_FILES_WITH_PREFIX}\")"
      },
      {
        "sha": "d9513395255f68fe87434a7f2d9d67d3c2be7729",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -9,7 +9,7 @@\n # Check includes: Check for duplicate includes. Enforce bracket syntax includes.\n \n export LC_ALL=C\n-IGNORE_REGEXP=\"/(leveldb|secp256k1|univalue)/\"\n+IGNORE_REGEXP=\"src/(leveldb|secp256k1|univalue|tinyformat)/\"\n \n filter_suffix() {\n     git ls-files | grep -E \"^src/.*\\.${1}\"'$' | grep -Ev \"${IGNORE_REGEXP}\""
      },
      {
        "sha": "10d4f81905bf84263757918d859976a0d88fd2ec",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -36,7 +36,7 @@ KNOWN_VIOLATIONS=(\n     \"src/utilstrencodings.h:.*atoi\"\n )\n \n-REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes/|leveldb/|secp256k1/|tinyformat.h|univalue/)\"\n+REGEXP_IGNORE_EXTERNAL_DEPENDENCIES=\"^src/(crypto/ctaes|leveldb|secp256k1|tinyformat|univalue)/\"\n \n LOCALE_DEPENDENT_FUNCTIONS=(\n     alphasort    # LC_COLLATE (via strcoll)"
      },
      {
        "sha": "4833d18b0ff1266909c6733bd9e54e10c93cf4e0",
        "filename": "test/lint/lint-shell-locale.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-shell-locale.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-shell-locale.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shell-locale.sh?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -11,7 +11,7 @@\n export LC_ALL=C\n \n EXIT_CODE=0\n-for SHELL_SCRIPT in $(git ls-files -- \"*.sh\" | grep -vE \"src/(secp256k1|univalue)/\"); do\n+for SHELL_SCRIPT in $(git ls-files -- \"*.sh\" | grep -vE \"src/(secp256k1|univalue|tinyformat)/\"); do\n     if grep -q \"# This script is intentionally locale dependent by not setting \\\"export LC_ALL=C\\\"\" \"${SHELL_SCRIPT}\"; then\n         continue\n     fi"
      },
      {
        "sha": "62983bd83309380178ccb6cbba80fcc37bf592b9",
        "filename": "test/lint/lint-whitespace.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-whitespace.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48249e2400487fb99a6bb15999eccd489a71318/test/lint/lint-whitespace.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-whitespace.sh?ref=d48249e2400487fb99a6bb15999eccd489a71318",
        "patch": "@@ -31,14 +31,14 @@ if [ -z \"${TRAVIS_COMMIT_RANGE}\" ]; then\n fi\n \n showdiff() {\n-  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)depends/patches/\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n+  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- \".\" \":(exclude)depends/patches/\" \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/tinyformat/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n     echo \"Failed to get a diff\"\n     exit 1\n   fi\n }\n \n showcodediff() {\n-  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- *.cpp *.h *.md *.py *.sh \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n+  if ! git diff -U0 \"${TRAVIS_COMMIT_RANGE}\" -- *.cpp *.h *.md *.py *.sh \":(exclude)src/leveldb/\" \":(exclude)src/secp256k1/\" \":(exclude)src/tinyformat/\" \":(exclude)src/univalue/\" \":(exclude)doc/release-notes/\"; then\n     echo \"Failed to get a diff\"\n     exit 1\n   fi"
      }
    ]
  }
]