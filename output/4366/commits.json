[
  {
    "sha": "52a96fdf6efe6c99f7947a07afa70718ae2fadb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MmE5NmZkZjZlZmU2Yzk5Zjc5NDdhMDdhZmE3MDcxOGFlMmZhZGI1",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-19T15:43:43Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-30T21:43:14Z"
      },
      "message": "Make CBlockIndex a subclass of CBlockHeader",
      "tree": {
        "sha": "5f5c2e173e7be7551c77ff46409c467cd3e4f952",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f5c2e173e7be7551c77ff46409c467cd3e4f952"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52a96fdf6efe6c99f7947a07afa70718ae2fadb5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52a96fdf6efe6c99f7947a07afa70718ae2fadb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52a96fdf6efe6c99f7947a07afa70718ae2fadb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52a96fdf6efe6c99f7947a07afa70718ae2fadb5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3faf1f8294065eaabe2d6d24f2fe04ee4dfd6ae2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3faf1f8294065eaabe2d6d24f2fe04ee4dfd6ae2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3faf1f8294065eaabe2d6d24f2fe04ee4dfd6ae2"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 9,
      "deletions": 37
    },
    "files": [
      {
        "sha": "8a358b076bc8d636fa9ed2e6bd4ea2a8ac3cc2b6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 9,
        "deletions": 37,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52a96fdf6efe6c99f7947a07afa70718ae2fadb5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52a96fdf6efe6c99f7947a07afa70718ae2fadb5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=52a96fdf6efe6c99f7947a07afa70718ae2fadb5",
        "patch": "@@ -671,7 +671,7 @@ enum BlockStatus {\n  * candidates to be the next block. A blockindex may have multiple pprev pointing\n  * to it, but at most one of them can be part of the currently active branch.\n  */\n-class CBlockIndex\n+class CBlockIndex : public CBlockHeader\n {\n public:\n     // pointer to the hash of the block, if any. memory is owned by this CBlockIndex\n@@ -708,18 +708,12 @@ class CBlockIndex\n     // Verification status of this block. See enum BlockStatus\n     unsigned int nStatus;\n \n-    // block header\n-    int nVersion;\n-    uint256 hashMerkleRoot;\n-    unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n-\n     // (memory only) Sequencial id assigned to distinguish order in which blocks are received.\n     uint32_t nSequenceId;\n \n-    CBlockIndex()\n+    void SetNull()\n     {\n+        CBlockHeader::SetNull();\n         phashBlock = NULL;\n         pprev = NULL;\n         pskip = NULL;\n@@ -732,34 +726,17 @@ class CBlockIndex\n         nChainTx = 0;\n         nStatus = 0;\n         nSequenceId = 0;\n+    }\n \n-        nVersion       = 0;\n-        hashMerkleRoot = 0;\n-        nTime          = 0;\n-        nBits          = 0;\n-        nNonce         = 0;\n+    CBlockIndex()\n+    {\n+        SetNull();\n     }\n \n     CBlockIndex(CBlockHeader& block)\n     {\n-        phashBlock = NULL;\n-        pprev = NULL;\n-        pskip = NULL;\n-        nHeight = 0;\n-        nFile = 0;\n-        nDataPos = 0;\n-        nUndoPos = 0;\n-        nChainWork = 0;\n-        nTx = 0;\n-        nChainTx = 0;\n-        nStatus = 0;\n-        nSequenceId = 0;\n-\n-        nVersion       = block.nVersion;\n-        hashMerkleRoot = block.hashMerkleRoot;\n-        nTime          = block.nTime;\n-        nBits          = block.nBits;\n-        nNonce         = block.nNonce;\n+        SetNull();\n+        *((CBlockHeader*)this) = block;\n     }\n \n     CDiskBlockPos GetBlockPos() const {\n@@ -798,11 +775,6 @@ class CBlockIndex\n         return *phashBlock;\n     }\n \n-    int64_t GetBlockTime() const\n-    {\n-        return (int64_t)nTime;\n-    }\n-\n     uint256 GetBlockWork() const\n     {\n         uint256 bnTarget;"
      }
    ]
  },
  {
    "sha": "6200fdfc242ae6486ad0bc21b94524786af3da3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjAwZmRmYzI0MmFlNjQ4NmFkMGJjMjFiOTQ1MjQ3ODZhZjNkYTNi",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-20T20:59:40Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-30T21:43:14Z"
      },
      "message": "Unify CBlockHeader::hashPrevBlock and CDiskBlockIndex::hashPrev",
      "tree": {
        "sha": "c002d87031d8beb84ccdd714e958615856061c02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c002d87031d8beb84ccdd714e958615856061c02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6200fdfc242ae6486ad0bc21b94524786af3da3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6200fdfc242ae6486ad0bc21b94524786af3da3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6200fdfc242ae6486ad0bc21b94524786af3da3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6200fdfc242ae6486ad0bc21b94524786af3da3b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52a96fdf6efe6c99f7947a07afa70718ae2fadb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52a96fdf6efe6c99f7947a07afa70718ae2fadb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52a96fdf6efe6c99f7947a07afa70718ae2fadb5"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "d8c90da4e9ba2def6c7207eb20b06ae6ead318f1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -122,7 +122,7 @@ class CMainParams : public CChainParams {\n         // Build the genesis block. Note that the output of the genesis coinbase cannot\n         // be spent as it did not originally exist in the database.\n         //\n-        // CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n+        // CBlock(hash=000000000019d6, ver=1, hashPrev=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n         //   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n         //     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n         //     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n@@ -135,7 +135,7 @@ class CMainParams : public CChainParams {\n         txNew.vout[0].nValue = 50 * COIN;\n         txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n         genesis.vtx.push_back(txNew);\n-        genesis.hashPrevBlock = 0;\n+        genesis.hashPrev = 0;\n         genesis.hashMerkleRoot = genesis.BuildMerkleTree();\n         genesis.nVersion = 1;\n         genesis.nTime    = 1231006505;"
      },
      {
        "sha": "cbf7638b6fbb47101fc55cd10683549f72a46044",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -298,10 +298,10 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n \n void CBlock::print() const\n {\n-    LogPrintf(\"CBlock(hash=%s, ver=%d, hashPrevBlock=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n+    LogPrintf(\"CBlock(hash=%s, ver=%d, hashPrev=%s, hashMerkleRoot=%s, nTime=%u, nBits=%08x, nNonce=%u, vtx=%u)\\n\",\n         GetHash().ToString(),\n         nVersion,\n-        hashPrevBlock.ToString(),\n+        hashPrev.ToString(),\n         hashMerkleRoot.ToString(),\n         nTime, nBits, nNonce,\n         vtx.size());"
      },
      {
        "sha": "a30443510ebbabe62ad4bb64e327a7d758b880d1",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -406,7 +406,7 @@ class CBlockHeader\n     // header\n     static const int CURRENT_VERSION=2;\n     int nVersion;\n-    uint256 hashPrevBlock;\n+    uint256 hashPrev;\n     uint256 hashMerkleRoot;\n     unsigned int nTime;\n     unsigned int nBits;\n@@ -421,7 +421,7 @@ class CBlockHeader\n     (\n         READWRITE(this->nVersion);\n         nVersion = this->nVersion;\n-        READWRITE(hashPrevBlock);\n+        READWRITE(hashPrev);\n         READWRITE(hashMerkleRoot);\n         READWRITE(nTime);\n         READWRITE(nBits);\n@@ -431,7 +431,7 @@ class CBlockHeader\n     void SetNull()\n     {\n         nVersion = CBlockHeader::CURRENT_VERSION;\n-        hashPrevBlock = 0;\n+        hashPrev = 0;\n         hashMerkleRoot = 0;\n         nTime = 0;\n         nBits = 0;\n@@ -489,7 +489,7 @@ class CBlock : public CBlockHeader\n     {\n         CBlockHeader block;\n         block.nVersion       = nVersion;\n-        block.hashPrevBlock  = hashPrevBlock;\n+        block.hashPrev       = hashPrev;\n         block.hashMerkleRoot = hashMerkleRoot;\n         block.nTime          = nTime;\n         block.nBits          = nBits;"
      },
      {
        "sha": "140d7f0b476229097a6b301e7b9d9f9b67dfc301",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -2221,7 +2221,7 @@ CBlockIndex* AddToBlockIndex(CBlockHeader& block)\n     }\n     map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n-    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(block.hashPrevBlock);\n+    map<uint256, CBlockIndex*>::iterator miPrev = mapBlockIndex.find(block.hashPrev);\n     if (miPrev != mapBlockIndex.end())\n     {\n         pindexNew->pprev = (*miPrev).second;\n@@ -2443,7 +2443,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     }\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && block.hashPrevBlock != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n+    if (pcheckpoint && block.hashPrev != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n         int64_t deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n@@ -2468,7 +2468,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     CBlockIndex* pindexPrev = NULL;\n     int nHeight = 0;\n     if (hash != Params().HashGenesisBlock()) {\n-        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n+        map<uint256, CBlockIndex*>::iterator mi = mapBlockIndex.find(block.hashPrev);\n         if (mi == mapBlockIndex.end())\n             return state.DoS(10, error(\"AcceptBlock() : prev block not found\"), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n@@ -2662,10 +2662,10 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n         return error(\"ProcessBlock() : CheckBlock FAILED\");\n \n     // If we don't already have its previous block (with full data), shunt it off to holding area until we get it\n-    std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(pblock->hashPrevBlock);\n-    if (pblock->hashPrevBlock != 0 && (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)))\n+    std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(pblock->hashPrev);\n+    if (pblock->hashPrev != 0 && (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)))\n     {\n-        LogPrintf(\"ProcessBlock: ORPHAN BLOCK %lu, prev=%s\\n\", (unsigned long)mapOrphanBlocks.size(), pblock->hashPrevBlock.ToString());\n+        LogPrintf(\"ProcessBlock: ORPHAN BLOCK %lu, prev=%s\\n\", (unsigned long)mapOrphanBlocks.size(), pblock->hashPrev.ToString());\n \n         // Accept orphans as long as there is a node to request its parents from\n         if (pfrom) {\n@@ -2677,7 +2677,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n                 pblock2->vchBlock = std::vector<unsigned char>(ss.begin(), ss.end());\n             }\n             pblock2->hashBlock = hash;\n-            pblock2->hashPrev = pblock->hashPrevBlock;\n+            pblock2->hashPrev = pblock->hashPrev;\n             mapOrphanBlocks.insert(make_pair(hash, pblock2));\n             mapOrphanBlocksByPrev.insert(make_pair(pblock2->hashPrev, pblock2));\n "
      },
      {
        "sha": "769d5aafe1dd4601b2e01773c63cf4642b9aa963",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -762,7 +762,7 @@ class CBlockIndex : public CBlockHeader\n         CBlockHeader block;\n         block.nVersion       = nVersion;\n         if (pprev)\n-            block.hashPrevBlock = pprev->GetBlockHash();\n+            block.hashPrev   = pprev->GetBlockHash();\n         block.hashMerkleRoot = hashMerkleRoot;\n         block.nTime          = nTime;\n         block.nBits          = nBits;\n@@ -900,15 +900,14 @@ class CDiskBlockIndex : public CBlockIndex\n     {\n         CBlockHeader block;\n         block.nVersion        = nVersion;\n-        block.hashPrevBlock   = hashPrev;\n+        block.hashPrev        = hashPrev;\n         block.hashMerkleRoot  = hashMerkleRoot;\n         block.nTime           = nTime;\n         block.nBits           = nBits;\n         block.nNonce          = nNonce;\n         return block.GetHash();\n     }\n \n-\n     std::string ToString() const\n     {\n         std::string str = \"CDiskBlockIndex(\";"
      },
      {
        "sha": "3f44a8d36fbcbd033cbc32dd9082768e8e327d85",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -312,7 +312,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n-        pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n+        pblock->hashPrev  = pindexPrev->GetBlockHash();\n         UpdateTime(*pblock, pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n@@ -334,10 +334,10 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n {\n     // Update nExtraNonce\n     static uint256 hashPrevBlock;\n-    if (hashPrevBlock != pblock->hashPrevBlock)\n+    if (hashPrevBlock != pblock->hashPrev)\n     {\n         nExtraNonce = 0;\n-        hashPrevBlock = pblock->hashPrevBlock;\n+        hashPrevBlock = pblock->hashPrev;\n     }\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n@@ -419,7 +419,7 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n     // Found a solution\n     {\n         LOCK(cs_main);\n-        if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n+        if (pblock->hashPrev != chainActive.Tip()->GetBlockHash())\n             return error(\"BitcoinMiner : generated block is stale\");\n     }\n "
      },
      {
        "sha": "56d997f09752277e55833a86f6858a82cc6136a3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -432,7 +432,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n \n     Object result;\n     result.push_back(Pair(\"version\", pblock->nVersion));\n-    result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n+    result.push_back(Pair(\"previousblockhash\", pblock->hashPrev.GetHex()));\n     result.push_back(Pair(\"transactions\", transactions));\n     result.push_back(Pair(\"coinbaseaux\", aux));\n     result.push_back(Pair(\"coinbasevalue\", (int64_t)pblock->vtx[0].vout[0].nValue));"
      },
      {
        "sha": "a101a8fe4603ffc5eaa600dfd102b36981b00ff9",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6200fdfc242ae6486ad0bc21b94524786af3da3b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "patch": "@@ -81,7 +81,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         CValidationState state;\n         BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n         BOOST_CHECK(state.IsValid());\n-        pblock->hashPrevBlock = pblock->GetHash();\n+        pblock->hashPrev = pblock->GetHash();\n     }\n     delete pblocktemplate;\n "
      }
    ]
  },
  {
    "sha": "cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDk2NTlmMmViZTdkMzc0ZmMzMWRkOTg5ZjdhN2RmNDY4MGZiNjdm",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-19T16:03:02Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-30T21:45:17Z"
      },
      "message": "Unify GetHash() and GetBlockHash()",
      "tree": {
        "sha": "6eaba93cd36fb292546552d14817e55f0315fae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eaba93cd36fb292546552d14817e55f0315fae0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6200fdfc242ae6486ad0bc21b94524786af3da3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6200fdfc242ae6486ad0bc21b94524786af3da3b"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 57,
      "deletions": 64
    },
    "files": [
      {
        "sha": "ba92e2f643fc13f30fb49274351836985ce98703",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 37,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "patch": "@@ -428,7 +428,7 @@ CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n     if (!pindex)\n         pindex = Tip();\n     while (pindex) {\n-        vHave.push_back(pindex->GetBlockHash());\n+        vHave.push_back(pindex->GetHash());\n         // Stop when we have added the genesis block.\n         if (pindex->nHeight == 0)\n             break;\n@@ -1192,7 +1192,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n             BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n                 if (tx.GetHash() == hash) {\n                     txOut = tx;\n-                    hashBlock = pindexSlow->GetBlockHash();\n+                    hashBlock = pindexSlow->GetHash();\n                     return true;\n                 }\n             }\n@@ -1266,7 +1266,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n {\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n-    if (block.GetHash() != pindex->GetBlockHash())\n+    if (block.GetHash() != pindex->GetHash())\n         return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n     return true;\n }\n@@ -1452,21 +1452,21 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n         uiInterface.NotifyBlocksChanged();\n     }\n     LogPrintf(\"InvalidChainFound: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n-      pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n+      pindexNew->GetHash().ToString(), pindexNew->nHeight,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\",\n       pindexNew->GetBlockTime()));\n     LogPrintf(\"InvalidChainFound:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\",\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0),\n+      chainActive.Tip()->GetHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0),\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()));\n     CheckForkWarningConditions();\n }\n \n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     int nDoS = 0;\n     if (state.IsInvalid(nDoS)) {\n-        std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n+        std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetHash());\n         if (it != mapBlockSource.end() && State(it->second)) {\n-            CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason(), pindex->GetBlockHash()};\n+            CBlockReject reject = {state.GetRejectCode(), state.GetRejectReason(), pindex->GetHash()};\n             State(it->second)->rejects.push_back(reject);\n             if (nDoS > 0)\n                 Misbehaving(it->second, nDoS);\n@@ -1633,7 +1633,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, CCoinsViewCache& view, bool* pfClean)\n {\n-    assert(pindex->GetBlockHash() == view.GetBestBlock());\n+    assert(pindex->GetHash() == view.GetBestBlock());\n \n     if (pfClean)\n         *pfClean = false;\n@@ -1644,7 +1644,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull())\n         return error(\"DisconnectBlock() : no undo data available\");\n-    if (!blockUndo.ReadFromDisk(pos, pindex->pprev->GetBlockHash()))\n+    if (!blockUndo.ReadFromDisk(pos, pindex->pprev->GetHash()))\n         return error(\"DisconnectBlock() : failure reading undo data\");\n \n     if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n@@ -1709,7 +1709,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     }\n \n     // move best block pointer to prevout block\n-    view.SetBestBlock(pindex->pprev->GetBlockHash());\n+    view.SetBestBlock(pindex->pprev->GetHash());\n \n     if (pfClean) {\n         *pfClean = fClean;\n@@ -1759,13 +1759,13 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         return false;\n \n     // verify that the view's current state corresponds to the previous block\n-    uint256 hashPrevBlock = pindex->pprev == NULL ? uint256(0) : pindex->pprev->GetBlockHash();\n+    uint256 hashPrevBlock = pindex->pprev == NULL ? uint256(0) : pindex->pprev->GetHash();\n     assert(hashPrevBlock == view.GetBestBlock());\n \n     // Special case for the genesis block, skipping connection of its transactions\n     // (its coinbase is unspendable)\n     if (block.GetHash() == Params().HashGenesisBlock()) {\n-        view.SetBestBlock(pindex->GetBlockHash());\n+        view.SetBestBlock(pindex->GetHash());\n         return true;\n     }\n \n@@ -1784,8 +1784,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n     // initial block download.\n     bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n-                          !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n-                           (pindex->nHeight==91880 && pindex->GetBlockHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n+                          !((pindex->nHeight==91842 && pindex->GetHash() == uint256(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n+                           (pindex->nHeight==91880 && pindex->GetHash() == uint256(\"0x00000000000743f190a18c5577a3c2d2a1f610ae9601ac046a38084ccb7cd721\")));\n     if (fEnforceBIP30) {\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const uint256& hash = tx.GetHash();\n@@ -1887,7 +1887,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             CDiskBlockPos pos;\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock() : FindUndoPos failed\");\n-            if (!blockundo.WriteToDisk(pos, pindex->pprev->GetBlockHash()))\n+            if (!blockundo.WriteToDisk(pos, pindex->pprev->GetHash()))\n                 return state.Abort(_(\"Failed to write undo data\"));\n \n             // update nUndoPos in block index\n@@ -1908,7 +1908,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n \n     // add this block to the view's block chain\n     bool ret;\n-    ret = view.SetBestBlock(pindex->GetBlockHash());\n+    ret = view.SetBestBlock(pindex->GetHash());\n     assert(ret);\n \n     // Watch for transactions paying to me\n@@ -1956,7 +1956,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n     LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n-      chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n+      chainActive.Tip()->GetHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n       Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n \n@@ -1993,7 +1993,7 @@ bool static DisconnectTip(CValidationState &state) {\n     {\n         CCoinsViewCache view(*pcoinsTip, true);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n-            return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n+            return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetHash().ToString());\n         assert(view.Flush());\n     }\n     if (fBenchmark)\n@@ -2033,11 +2033,11 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew) {\n     int64_t nStart = GetTimeMicros();\n     {\n         CCoinsViewCache view(*pcoinsTip, true);\n-        CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n+        CInv inv(MSG_BLOCK, pindexNew->GetHash());\n         if (!ConnectBlock(block, state, pindexNew, view)) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"ConnectTip() : ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n+            return error(\"ConnectTip() : ConnectBlock %s failed\", pindexNew->GetHash().ToString());\n         }\n         mapBlockSource.erase(inv.hash);\n         assert(view.Flush());\n@@ -2184,7 +2184,7 @@ bool ActivateBestChain(CValidationState &state) {\n \n         // Notifications/callbacks that can run without cs_main\n         if (!fInitialDownload) {\n-            uint256 hashNewTip = pindexNewTip->GetBlockHash();\n+            uint256 hashNewTip = pindexNewTip->GetHash();\n             // Relay inventory, but don't relay old inventory during initial block download.\n             int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n             LOCK(cs_vNodes);\n@@ -2443,7 +2443,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     }\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(mapBlockIndex);\n-    if (pcheckpoint && block.hashPrev != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n+    if (pcheckpoint && block.hashPrev != (chainActive.Tip() ? chainActive.Tip()->GetHash() : uint256(0)))\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n         int64_t deltaTime = block.GetBlockTime() - pcheckpoint->nTime;\n@@ -3026,7 +3026,7 @@ bool static LoadBlockIndexDB()\n         return true;\n     chainActive.SetTip(it->second);\n     LogPrintf(\"LoadBlockIndexDB(): hashBestChain=%s height=%d date=%s progress=%f\\n\",\n-        chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n+        chainActive.Tip()->GetHash().ToString(), chainActive.Height(),\n         DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n         Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n \n@@ -3070,24 +3070,24 @@ bool CVerifyDB::VerifyDB(int nCheckLevel, int nCheckDepth)\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex))\n-            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n             CDiskBlockPos pos = pindex->GetUndoPos();\n             if (!pos.IsNull()) {\n-                if (!undo.ReadFromDisk(pos, pindex->pprev->GetBlockHash()))\n-                    return error(\"VerifyDB() : *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                if (!undo.ReadFromDisk(pos, pindex->pprev->GetHash()))\n+                    return error(\"VerifyDB() : *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetHash().ToString());\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= 2*nCoinCacheSize + 32000) {\n             bool fClean = true;\n             if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n-                return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetHash().ToString());\n             pindexState = pindex->pprev;\n             if (!fClean) {\n                 nGoodTransactions = 0;\n@@ -3108,9 +3108,9 @@ bool CVerifyDB::VerifyDB(int nCheckLevel, int nCheckDepth)\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n-                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetHash().ToString());\n             if (!ConnectBlock(block, state, pindex, coins))\n-                return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetHash().ToString());\n         }\n     }\n \n@@ -3489,7 +3489,7 @@ void static ProcessGetData(CNode* pfrom)\n                         // and we want it right after the last block so they don't\n                         // wait for other stuff first.\n                         vector<CInv> vInv;\n-                        vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n+                        vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetHash()));\n                         pfrom->PushMessage(\"inv\", vInv);\n                         pfrom->hashContinue = 0;\n                     }\n@@ -3828,18 +3828,18 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         LogPrint(\"net\", \"getblocks %d to %s limit %d\\n\", (pindex ? pindex->nHeight : -1), hashStop==uint256(0) ? \"end\" : hashStop.ToString(), nLimit);\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n-            if (pindex->GetBlockHash() == hashStop)\n+            if (pindex->GetHash() == hashStop)\n             {\n-                LogPrint(\"net\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                LogPrint(\"net\", \"  getblocks stopping at %d %s\\n\", pindex->nHeight, pindex->GetHash().ToString());\n                 break;\n             }\n-            pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n+            pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll make them\n                 // getblocks the next batch of inventory.\n-                LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-                pfrom->hashContinue = pindex->GetBlockHash();\n+                LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetHash().ToString());\n+                pfrom->hashContinue = pindex->GetHash();\n                 break;\n             }\n         }\n@@ -3878,7 +3878,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n             vHeaders.push_back(pindex->GetBlockHeader());\n-            if (--nLimit <= 0 || pindex->GetBlockHash() == hashStop)\n+            if (--nLimit <= 0 || pindex->GetHash() == hashStop)\n                 break;\n         }\n         pfrom->PushMessage(\"headers\", vHeaders);"
      },
      {
        "sha": "cf5e15e7d79ae8877523f4763116df71d37e4621",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "patch": "@@ -762,15 +762,15 @@ class CBlockIndex : public CBlockHeader\n         CBlockHeader block;\n         block.nVersion       = nVersion;\n         if (pprev)\n-            block.hashPrev   = pprev->GetBlockHash();\n+            block.hashPrev   = pprev->GetHash();\n         block.hashMerkleRoot = hashMerkleRoot;\n         block.nTime          = nTime;\n         block.nBits          = nBits;\n         block.nNonce         = nNonce;\n         return block;\n     }\n \n-    uint256 GetBlockHash() const\n+    uint256 GetHash() const\n     {\n         return *phashBlock;\n     }\n@@ -819,7 +819,7 @@ class CBlockIndex : public CBlockHeader\n         return strprintf(\"CBlockIndex(pprev=%p, nHeight=%d, merkle=%s, hashBlock=%s)\",\n             pprev, nHeight,\n             hashMerkleRoot.ToString(),\n-            GetBlockHash().ToString());\n+            GetHash().ToString());\n     }\n \n     void print() const\n@@ -869,7 +869,7 @@ class CDiskBlockIndex : public CBlockIndex\n     }\n \n     explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex) {\n-        hashPrev = (pprev ? pprev->GetBlockHash() : 0);\n+        hashPrev = (pprev ? pprev->GetHash() : 0);\n     }\n \n     IMPLEMENT_SERIALIZE\n@@ -896,24 +896,17 @@ class CDiskBlockIndex : public CBlockIndex\n         READWRITE(nNonce);\n     )\n \n-    uint256 GetBlockHash() const\n+    uint256 GetHash() const\n     {\n-        CBlockHeader block;\n-        block.nVersion        = nVersion;\n-        block.hashPrev        = hashPrev;\n-        block.hashMerkleRoot  = hashMerkleRoot;\n-        block.nTime           = nTime;\n-        block.nBits           = nBits;\n-        block.nNonce          = nNonce;\n-        return block.GetHash();\n+        return CBlockHeader::GetHash();\n     }\n \n     std::string ToString() const\n     {\n         std::string str = \"CDiskBlockIndex(\";\n         str += CBlockIndex::ToString();\n         str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s)\",\n-            GetBlockHash().ToString(),\n+            GetHash().ToString(),\n             hashPrev.ToString());\n         return str;\n     }"
      },
      {
        "sha": "14834b351baec2ac266b7c3d911d049e8635b1bb",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "patch": "@@ -312,7 +312,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         pblocktemplate->vTxFees[0] = -nFees;\n \n         // Fill in header\n-        pblock->hashPrev  = pindexPrev->GetBlockHash();\n+        pblock->hashPrev  = pindexPrev->GetHash();\n         UpdateTime(*pblock, pindexPrev);\n         pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock);\n         pblock->nNonce         = 0;\n@@ -419,7 +419,7 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n     // Found a solution\n     {\n         LOCK(cs_main);\n-        if (pblock->hashPrev != chainActive.Tip()->GetBlockHash())\n+        if (pblock->hashPrev != chainActive.Tip()->GetHash())\n             return error(\"BitcoinMiner : generated block is stale\");\n     }\n "
      },
      {
        "sha": "23b27c6c0749cd2b56494ded7848a0d287b3a9bb",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "patch": "@@ -71,10 +71,10 @@ Object blockToJSON(const CBlock& block, const CBlockIndex* blockindex)\n     result.push_back(Pair(\"chainwork\", blockindex->nChainWork.GetHex()));\n \n     if (blockindex->pprev)\n-        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex()));\n+        result.push_back(Pair(\"previousblockhash\", blockindex->pprev->GetHash().GetHex()));\n     CBlockIndex *pnext = chainActive.Next(blockindex);\n     if (pnext)\n-        result.push_back(Pair(\"nextblockhash\", pnext->GetBlockHash().GetHex()));\n+        result.push_back(Pair(\"nextblockhash\", pnext->GetHash().GetHex()));\n     return result;\n }\n \n@@ -108,7 +108,7 @@ Value getbestblockhash(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getbestblockhash\", \"\")\n         );\n \n-    return chainActive.Tip()->GetBlockHash().GetHex();\n+    return chainActive.Tip()->GetHash().GetHex();\n }\n \n Value getdifficulty(const Array& params, bool fHelp)\n@@ -225,7 +225,7 @@ Value getblockhash(const Array& params, bool fHelp)\n         throw runtime_error(\"Block number out of range.\");\n \n     CBlockIndex* pblockindex = chainActive[nHeight];\n-    return pblockindex->GetBlockHash().GetHex();\n+    return pblockindex->GetHash().GetHex();\n }\n \n Value getblock(const Array& params, bool fHelp)\n@@ -389,7 +389,7 @@ Value gettxout(const Array& params, bool fHelp)\n \n     std::map<uint256, CBlockIndex*>::iterator it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n     CBlockIndex *pindex = it->second;\n-    ret.push_back(Pair(\"bestblock\", pindex->GetBlockHash().GetHex()));\n+    ret.push_back(Pair(\"bestblock\", pindex->GetHash().GetHex()));\n     if ((unsigned int)coins.nHeight == MEMPOOL_HEIGHT)\n         ret.push_back(Pair(\"confirmations\", 0));\n     else\n@@ -453,7 +453,7 @@ Value getblockchaininfo(const Array& params, bool fHelp)\n     Object obj;\n     obj.push_back(Pair(\"chain\",                 Params().NetworkIDString()));\n     obj.push_back(Pair(\"blocks\",                (int)chainActive.Height()));\n-    obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex()));\n+    obj.push_back(Pair(\"bestblockhash\",         chainActive.Tip()->GetHash().GetHex()));\n     obj.push_back(Pair(\"difficulty\",            (double)GetDifficulty()));\n     obj.push_back(Pair(\"verificationprogress\",  Checkpoints::GuessVerificationProgress(chainActive.Tip())));\n     obj.push_back(Pair(\"chainwork\",             chainActive.Tip()->nChainWork.GetHex()));"
      },
      {
        "sha": "cd91840686877d7eeee1499f6ae698b3f3950ca4",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "patch": "@@ -300,7 +300,7 @@ Value dumpwallet(const Array& params, bool fHelp)\n     // produce output\n     file << strprintf(\"# Wallet dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD, CLIENT_DATE);\n     file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()));\n-    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString());\n+    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetHash().ToString());\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->nTime));\n     file << \"\\n\";\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {"
      },
      {
        "sha": "af7ca0b0f71a3c67fec023b073f2b24bbb5207f8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "patch": "@@ -1439,7 +1439,7 @@ Value listsinceblock(const Array& params, bool fHelp)\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n-    uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : 0;\n+    uint256 lastblock = pblockLast ? pblockLast->GetHash() : 0;\n \n     Object ret;\n     ret.push_back(Pair(\"transactions\", transactions));"
      },
      {
        "sha": "ece88a036c51f69eecb1f7e878aad47da5a6e354",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "patch": "@@ -71,7 +71,7 @@ CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevel\n \n bool CBlockTreeDB::WriteBlockIndex(const CDiskBlockIndex& blockindex)\n {\n-    return Write(make_pair('b', blockindex.GetBlockHash()), blockindex);\n+    return Write(make_pair('b', blockindex.GetHash()), blockindex);\n }\n \n bool CBlockTreeDB::WriteBlockFileInfo(int nFile, const CBlockFileInfo &info) {\n@@ -199,7 +199,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 ssValue >> diskindex;\n \n                 // Construct block index object\n-                CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetBlockHash());\n+                CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetHash());\n                 pindexNew->pprev          = InsertBlockIndex(diskindex.hashPrev);\n                 pindexNew->nHeight        = diskindex.nHeight;\n                 pindexNew->nFile          = diskindex.nFile;\n@@ -213,7 +213,7 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n+                if (!CheckProofOfWork(pindexNew->GetHash(), pindexNew->nBits))\n                     return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();"
      }
    ]
  },
  {
    "sha": "e84533abc0a96ad4d6f48984b6ba537300b5a5b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODQ1MzNhYmMwYTk2YWQ0ZDZmNDg5ODRiNmJhNTM3MzAwYjVhNWIx",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-20T20:05:53Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-30T21:45:21Z"
      },
      "message": "Remove GetBlockHeader()",
      "tree": {
        "sha": "a772dbaeb484073e1304619bfce7383197879f37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a772dbaeb484073e1304619bfce7383197879f37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e84533abc0a96ad4d6f48984b6ba537300b5a5b1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84533abc0a96ad4d6f48984b6ba537300b5a5b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e84533abc0a96ad4d6f48984b6ba537300b5a5b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e84533abc0a96ad4d6f48984b6ba537300b5a5b1/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9659f2ebe7d374fc31dd989f7a7df4680fb67f"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 2,
      "deletions": 34
    },
    "files": [
      {
        "sha": "14b4c4131770423d3cb6091f9616a6aefa8edda7",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84533abc0a96ad4d6f48984b6ba537300b5a5b1/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84533abc0a96ad4d6f48984b6ba537300b5a5b1/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=e84533abc0a96ad4d6f48984b6ba537300b5a5b1",
        "patch": "@@ -485,18 +485,6 @@ class CBlock : public CBlockHeader\n         vMerkleTree.clear();\n     }\n \n-    CBlockHeader GetBlockHeader() const\n-    {\n-        CBlockHeader block;\n-        block.nVersion       = nVersion;\n-        block.hashPrev       = hashPrev;\n-        block.hashMerkleRoot = hashMerkleRoot;\n-        block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n-        return block;\n-    }\n-\n     uint256 BuildMerkleTree() const;\n \n     std::vector<uint256> GetMerkleBranch(int nIndex) const;"
      },
      {
        "sha": "ba5672aa80d313b9c50618518aa91f3167f1cffb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84533abc0a96ad4d6f48984b6ba537300b5a5b1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84533abc0a96ad4d6f48984b6ba537300b5a5b1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e84533abc0a96ad4d6f48984b6ba537300b5a5b1",
        "patch": "@@ -2728,16 +2728,9 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     return true;\n }\n \n-\n-\n-\n-\n-\n-\n-\n CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n {\n-    header = block.GetBlockHeader();\n+    header = block;\n \n     vector<bool> vMatch;\n     vector<uint256> vHashes;\n@@ -3877,7 +3870,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         LogPrint(\"net\", \"getheaders %d to %s\\n\", (pindex ? pindex->nHeight : -1), hashStop.ToString());\n         for (; pindex; pindex = chainActive.Next(pindex))\n         {\n-            vHeaders.push_back(pindex->GetBlockHeader());\n+            vHeaders.push_back(*pindex);\n             if (--nLimit <= 0 || pindex->GetHash() == hashStop)\n                 break;\n         }"
      },
      {
        "sha": "e683376b097895354a4eb9fcb146926446f0dca0",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e84533abc0a96ad4d6f48984b6ba537300b5a5b1/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e84533abc0a96ad4d6f48984b6ba537300b5a5b1/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e84533abc0a96ad4d6f48984b6ba537300b5a5b1",
        "patch": "@@ -757,19 +757,6 @@ class CBlockIndex : public CBlockHeader\n         return ret;\n     }\n \n-    CBlockHeader GetBlockHeader() const\n-    {\n-        CBlockHeader block;\n-        block.nVersion       = nVersion;\n-        if (pprev)\n-            block.hashPrev   = pprev->GetHash();\n-        block.hashMerkleRoot = hashMerkleRoot;\n-        block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n-        return block;\n-    }\n-\n     uint256 GetHash() const\n     {\n         return *phashBlock;"
      }
    ]
  }
]