[
  {
    "sha": "92c10905651ff717313ccbcd25131290910e3268",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmMxMDkwNTY1MWZmNzE3MzEzY2NiY2QyNTEzMTI5MDkxMGUzMjY4",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-31T00:50:29Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-31T00:50:29Z"
      },
      "message": "Update comments in checkqueue to be doxygen compatible",
      "tree": {
        "sha": "68766c2bda8522841e777f670e8e9865b27d84a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68766c2bda8522841e777f670e8e9865b27d84a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92c10905651ff717313ccbcd25131290910e3268",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c10905651ff717313ccbcd25131290910e3268",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92c10905651ff717313ccbcd25131290910e3268",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92c10905651ff717313ccbcd25131290910e3268/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2396c9c41cbd5b8746f48f41180697f58b0681",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2396c9c41cbd5b8746f48f41180697f58b0681",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2396c9c41cbd5b8746f48f41180697f58b0681"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 27,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5d8344ebb2dca4daa9d715a6956a567b00ee3d2d",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 27,
        "deletions": 23,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92c10905651ff717313ccbcd25131290910e3268/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92c10905651ff717313ccbcd25131290910e3268/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=92c10905651ff717313ccbcd25131290910e3268",
        "patch": "@@ -1,5 +1,5 @@\n-// Copyright (c) 2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2012-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef CHECKQUEUE_H\n@@ -16,7 +16,8 @@\n template <typename T>\n class CCheckQueueControl;\n \n-/** Queue for verifications that have to be performed.\n+/** \n+ * Queue for verifications that have to be performed.\n   * The verifications are represented by a type T, which must provide an\n   * operator(), returning a bool.\n   *\n@@ -29,40 +30,42 @@ template <typename T>\n class CCheckQueue\n {\n private:\n-    // Mutex to protect the inner state\n+    //! Mutex to protect the inner state\n     boost::mutex mutex;\n \n-    // Worker threads block on this when out of work\n+    //! Worker threads block on this when out of work\n     boost::condition_variable condWorker;\n \n-    // Master thread blocks on this when out of work\n+    //! Master thread blocks on this when out of work\n     boost::condition_variable condMaster;\n \n-    // The queue of elements to be processed.\n-    // As the order of booleans doesn't matter, it is used as a LIFO (stack)\n+    //! The queue of elements to be processed.\n+    //! As the order of booleans doesn't matter, it is used as a LIFO (stack)\n     std::vector<T> queue;\n \n-    // The number of workers (including the master) that are idle.\n+    //! The number of workers (including the master) that are idle.\n     int nIdle;\n \n-    // The total number of workers (including the master).\n+    //! The total number of workers (including the master).\n     int nTotal;\n \n-    // The temporary evaluation result.\n+    //! The temporary evaluation result.\n     bool fAllOk;\n \n-    // Number of verifications that haven't completed yet.\n-    // This includes elements that are not anymore in queue, but still in\n-    // worker's own batches.\n+    /**\n+     * Number of verifications that haven't completed yet.\n+     * This includes elements that are not anymore in queue, but still in\n+     * worker's own batches.\n+     */\n     unsigned int nTodo;\n \n-    // Whether we're shutting down.\n+    //! Whether we're shutting down.\n     bool fQuit;\n \n-    // The maximum number of elements to be processed in one batch\n+    //! The maximum number of elements to be processed in one batch\n     unsigned int nBatchSize;\n \n-    // Internal function that does bulk of the verification work.\n+    /** Internal function that does bulk of the verification work. */\n     bool Loop(bool fMaster = false)\n     {\n         boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n@@ -124,22 +127,22 @@ class CCheckQueue\n     }\n \n public:\n-    // Create a new check queue\n+    //! Create a new check queue\n     CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n \n-    // Worker thread\n+    //! Worker thread\n     void Thread()\n     {\n         Loop();\n     }\n \n-    // Wait until execution finishes, and return whether all evaluations where succesful.\n+    //! Wait until execution finishes, and return whether all evaluations where successful.\n     bool Wait()\n     {\n         return Loop(true);\n     }\n \n-    // Add a batch of checks to the queue\n+    //! Add a batch of checks to the queue\n     void Add(std::vector<T>& vChecks)\n     {\n         boost::unique_lock<boost::mutex> lock(mutex);\n@@ -161,8 +164,9 @@ class CCheckQueue\n     friend class CCheckQueueControl<T>;\n };\n \n-/** RAII-style controller object for a CCheckQueue that guarantees the passed\n- *  queue is finished before continuing.\n+/** \n+ * RAII-style controller object for a CCheckQueue that guarantees the passed\n+ * queue is finished before continuing.\n  */\n template <typename T>\n class CCheckQueueControl"
      }
    ]
  }
]