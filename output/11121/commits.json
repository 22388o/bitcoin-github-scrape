[
  {
    "sha": "be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTJhMmFiNmE2N2JlZWY5N2UzYzNjZjQyYmQ1ZWVlYTZjNGU1NWNm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-23T19:49:01Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-01T16:25:50Z"
      },
      "message": "[tests] fix - use rpc_timeout as rpc timeout",
      "tree": {
        "sha": "bf16ae0ec6f60e56a43e87af3646df48111abfca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf16ae0ec6f60e56a43e87af3646df48111abfca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "affe9271aa4953ddbceb1bfe4e60838570272c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/affe9271aa4953ddbceb1bfe4e60838570272c56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/affe9271aa4953ddbceb1bfe4e60838570272c56"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4063f988e81dab349f2c465566889520d7f0c295",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
        "patch": "@@ -74,7 +74,7 @@ def wait_for_rpc_connection(self):\n         for _ in range(poll_per_s * self.rpc_timeout):\n             assert self.process.poll() is None, \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n-                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n+                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n                 self.rpc.getblockcount()\n                 # If the call to getblockcount() succeeds then the RPC connection is up\n                 self.rpc_connected = True"
      }
    ]
  },
  {
    "sha": "36b626867087e9fae6d85f926248997ebff327b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmI2MjY4NjcwODdlOWZhZTZkODVmOTI2MjQ4OTk3ZWJmZjMyN2I3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-09T20:35:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-01T16:25:54Z"
      },
      "message": "[tests] TestNode: separate add_node from start_node\n\nSeparates the act of creating a TestNode object from starting the node.\nThe test_framework now keeps track of its list of TestNodes, and test\nwriters can call start_node() and stop_node() without having to update\nthe self.nodes list.",
      "tree": {
        "sha": "ecf522bb82c52e8c9c58bcd7839d550e71684ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecf522bb82c52e8c9c58bcd7839d550e71684ca4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36b626867087e9fae6d85f926248997ebff327b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b626867087e9fae6d85f926248997ebff327b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36b626867087e9fae6d85f926248997ebff327b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b626867087e9fae6d85f926248997ebff327b7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf"
      }
    ],
    "stats": {
      "total": 399,
      "additions": 202,
      "deletions": 197
    },
    "files": [
      {
        "sha": "1db04337a96f4d9c7c2cb2b51f9f0f4d9e7a7734",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -74,7 +74,7 @@ def run_test(self):\n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in either node's mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -121,7 +121,7 @@ def run_test(self):\n \n         # Remove using high relay fee again\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "63e6a384a45d2a7235bebad2b155997a5aae94f7",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -60,10 +60,11 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n+        self.add_nodes(3, self.options.tmpdir)\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid.\n-        self.nodes = [self.start_node(0, self.options.tmpdir)]\n+        self.start_node(0)\n \n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n@@ -162,15 +163,13 @@ def run_test(self):\n             height += 1\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n         node1.wait_for_verack()\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n         node2.add_connection(connections[2])"
      },
      {
        "sha": "ad16482550ce16ea5636ee53df1e2e12770af466",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -241,6 +241,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # Restart all\n         self.test.clear_all_connections()\n         self.stop_nodes()\n+        self.nodes = []\n         shutil.rmtree(self.options.tmpdir + \"/node0\")\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "a3a6cf2fb868966ae46b577a070ddfd69412d1aa",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -146,7 +146,7 @@ def _test_stopatheight(self):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n         self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n \n "
      },
      {
        "sha": "00c085af553474a467f5f7904da745fec9984c04",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -34,21 +34,18 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n+                           for i in range(self.num_nodes)]\n \n-    def setup_network(self, split=False):\n-        extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n-                      for i in range(self.num_nodes)]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n-\n+    def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n+        self.start_node(1)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n \n-    def run_test(self):\n         peer_node, rbf_node = self.nodes\n         rbf_node_address = rbf_node.getnewaddress()\n "
      },
      {
        "sha": "1a5754b3f7396d6ba0342476c85700ad6fb5f4fb",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -18,7 +18,6 @@ def __init__(self):\n \n         # Test network and test nodes are not required:\n         self.num_nodes = 0\n-        self.nodes = []\n \n     def setup_network(self):\n         pass"
      },
      {
        "sha": "d39369105bf6d5becfc54e1c137a7b7fc6415987",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -65,7 +65,8 @@ def __init__(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):\n@@ -78,7 +79,7 @@ def restart_node(self, node_index, expected_tip):\n         while time.time() - time_start < 120:\n             try:\n                 # Any of these RPC calls could throw due to node crash\n-                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index], timewait=90)\n+                self.start_node(node_index)\n                 self.nodes[node_index].waitforblock(expected_tip)\n                 utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n                 return utxo_hash"
      },
      {
        "sha": "cc8901c40ca5248041233792d6c1a9a4cdeed7a5",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -68,8 +68,8 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listbanned()), 3)\n \n         self.stop_node(1)\n+        self.start_node(1)\n \n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n         listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])"
      },
      {
        "sha": "3a2a927098e0fb0c486a9647e61a2a4f7d4316bf",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -7,7 +7,6 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n \n class ForkNotifyTest(BitcoinTestFramework):\n \n@@ -17,18 +16,12 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n-        self.nodes.append(self.start_node(0, self.options.tmpdir,\n-                            [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n-        # Node1 mines block.version=211 blocks\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                [\"-blockversion=211\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n-        self.sync_all()\n+        self.extra_args = [[\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"],\n+                           [\"-blockversion=211\"]]\n+        super().setup_network()\n \n     def run_test(self):\n         # Mine 51 up-version blocks"
      },
      {
        "sha": "242b6eed108cf996aa9391b626b9ad41403cb1b5",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -449,11 +449,11 @@ def run_test(self):\n         ############################################################\n         # locked wallet test\n         self.stop_node(0)\n+        self.nodes[1].node_encrypt_wallet(\"test\")\n         self.stop_node(2)\n         self.stop_node(3)\n-        self.nodes[1].node_encrypt_wallet(\"test\")\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:"
      },
      {
        "sha": "be52d5c8472d09a51d0972ddedaf2027e8892a31",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -121,7 +121,8 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n "
      },
      {
        "sha": "6aae95549de9359c742b3f5fe4d3c35226a8d654",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -429,7 +429,7 @@ def run_test (self):\n \n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(2, self.options.tmpdir)\n+        self.start_nodes()\n         address_assert = self.nodes[1].validateaddress(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)"
      },
      {
        "sha": "5425afc9b16262ca903cfa227fe1f9bc0ae574cd",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -35,7 +35,7 @@ def run_test(self):\n         self.stop_node(1)\n \n         shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         self.log.info(\"Generate keys for wallet\")\n@@ -61,7 +61,7 @@ def run_test(self):\n \n         self.log.info(\"Verify keypool is restored and balance is correct\")\n \n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "0f84b5c0550170f4f74d4dd29af56efceb866bb6",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -19,7 +19,7 @@ def run_test(self):\n         # Encrypt wallet and wait to terminate\n         nodes[0].node_encrypt_wallet('test')\n         # Restart node 0\n-        nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)"
      },
      {
        "sha": "9b970284171d98daa703048649d9493758ce59e9",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -20,11 +20,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "6bd6a9e34f45ad0e37cd173b037280dff3e728ac",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -147,7 +147,7 @@ def run_test(self):\n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+        self.start_node(0, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect a test node\n         test_nodes = [TestNode()]"
      },
      {
        "sha": "dc5a3263ffa4a3568ecb8baf4862d38ad9e02073",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -63,26 +63,23 @@ def run_test(self):\n \n         self.log.debug(\"Stop-start node0 and node1. Verify that node0 has the transactions in its mempool and node1 does not.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n+        self.start_node(0)\n+        self.start_node(1)\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-persistmempool=0\"]))\n+        self.start_node(0, extra_args=[\"-persistmempool=0\"])\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.start_node(0)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "7381a9fd54d82a52f37e220547286465058a2b9b",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -23,17 +23,17 @@ def run_test(self):\n         self.stop_node(0)\n \n         # should not initialize if there are duplicate wallets\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.start_node(0, self.extra_args[0])\n \n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n         w2 = self.nodes[0].get_wallet_rpc(\"w2\")"
      },
      {
        "sha": "9189f5ef23f857cf5a56e27b927d8f280eb55a24",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -1496,7 +1496,7 @@ def test_upgrade_after_activation(self, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.nodes[node_id] = self.start_node(node_id, self.options.tmpdir)\n+        self.start_node(node_id, extra_args=[])\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "a7aacf908d1ede0bdf82fe513e5e50d0c83f6ed6",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -112,7 +112,7 @@ def run_test(self):\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n@@ -123,7 +123,7 @@ def run_test(self):\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "7f5a3810f4d4618ef359135a852bea4b3f7aaea7",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -89,7 +89,8 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.start_nodes()\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "5c0e21f328eadd6eaad7b7237b3fce752a0db151",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -56,6 +56,10 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 4)\n         sync_blocks(self.nodes[0:5])\n \n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=900)\n+        self.start_nodes()\n+\n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n         self.nodes[1].generate(200)\n@@ -98,7 +102,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             self.stop_node(0)\n-            self.nodes[0]=self.start_node(0, self.options.tmpdir, self.full_node_default_args, timewait=900)\n+            self.start_node(0, extra_args=self.full_node_default_args)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n                 if j == 0:\n@@ -126,7 +130,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         height = self.nodes[1].getblockcount()\n         self.log.info(\"Current block height: %d\" % height)\n@@ -149,7 +153,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n@@ -227,13 +231,15 @@ def reorg_back(self):\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, timewait=900)\n+        self.start_node(node_number)\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n-        self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n+        self.stop_node(node_number)\n+        self.start_node(node_number, extra_args=[\"-prune=1\"])\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n \n         def height(index):\n@@ -307,15 +313,15 @@ def has_block(index):\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n         self.stop_node(node_number)\n-        self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n+        self.start_node(node_number, extra_args=[\"-prune=550\"])\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(2, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads successfully when restarting a pruned node after IBD.\n@@ -325,7 +331,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        self.nodes[5] = self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(5, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "b1658341699875b4bc8762f9752315eb9c651983",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -28,11 +28,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "0d2a1065920611c09437acf603efb269ea2e2350",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -25,7 +25,7 @@ def reindex(self, justchainstate=False):\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes(extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "db6f6eec45896324a5f8f97b0c9523479e91a3a3",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -20,7 +20,7 @@ def run_test(self):\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0, extra_args=[])\n         assert_equal(self.nodes[0].resendwallettransactions(), [])\n \n         # Should return an array with the unconfirmed wallet transaction."
      },
      {
        "sha": "e9d64af204cda63c9dcdef3fb34b735f63fd8a41",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -20,23 +20,22 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        pass\n-\n-    def setup_nodes(self):\n-        pass\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, None)\n \n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''\n         Start a node with requested rpcallowip and rpcbind parameters,\n         then try to connect, and check if the set of bound addresses\n         matches the expected set.\n         '''\n+        self.log.info(\"Bind test for %s\" % str(addresses))\n         expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n         base_args = ['-disablewallet', '-nolisten']\n         if allow_ips:\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        self.nodes[0].rpchost = connect_to\n+        self.start_node(0, base_args + binds)\n         pid = self.nodes[0].process.pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n@@ -46,8 +45,10 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         Start a node with rpcallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n+        self.log.info(\"Allow IP test for %s:%d\" % (rpchost, rpcport))\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        self.nodes[0].rpchost = None\n+        self.start_nodes([base_args])\n         # connect to node through non-loopback interface\n         node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()"
      },
      {
        "sha": "6eb6658466449d0dd0eec8be4ef569f0d2e00de3",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 45,
        "deletions": 44,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -153,57 +153,16 @@ def setup_network(self):\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.nodes = []\n+        self.add_nodes(3, self.options.tmpdir, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+                                                           [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                                           [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-whitelist=127.0.0.1\"]))\n-\n-        self.log.info(\"This test is time consuming, please be patient\")\n-        self.log.info(\"Splitting inputs so we can generate tx's\")\n-        self.txouts = []\n-        self.txouts2 = []\n-        # Split a coinbase into two transaction puzzle outputs\n-        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n-\n-        # Mine\n-        while (len(self.nodes[0].getrawmempool()) > 0):\n-            self.nodes[0].generate(1)\n-\n-        # Repeatedly split those 2 outputs, doubling twice for each rep\n-        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n-        reps = 0\n-        while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n-                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n-                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            reps += 1\n-        self.log.info(\"Finished splitting\")\n-\n-        # Now we can connect the other nodes, didn't want to connect them earlier\n-        # so the estimates would not be affected by the splitting transactions\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n-        node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir, node2args))\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[2], 1)\n-\n-        self.sync_all()\n \n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n@@ -232,9 +191,51 @@ def transact_and_mine(self, numblocks, mining_node):\n             self.memutxo = newmem\n \n     def run_test(self):\n+        self.log.info(\"This test is time consuming, please be patient\")\n+        self.log.info(\"Splitting inputs so we can generate tx's\")\n+\n         # Make log handler available to helper functions\n         global log\n         log = self.log\n+\n+        # Start node0\n+        self.start_node(0)\n+        self.txouts = []\n+        self.txouts2 = []\n+        # Split a coinbase into two transaction puzzle outputs\n+        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n+\n+        # Mine\n+        while (len(self.nodes[0].getrawmempool()) > 0):\n+            self.nodes[0].generate(1)\n+\n+        # Repeatedly split those 2 outputs, doubling twice for each rep\n+        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n+        reps = 0\n+        while (reps < 5):\n+            #Double txouts to txouts2\n+            while (len(self.txouts)>0):\n+                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            #Double txouts2 to txouts\n+            while (len(self.txouts2)>0):\n+                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            reps += 1\n+        self.log.info(\"Finished splitting\")\n+\n+        # Now we can connect the other nodes, didn't want to connect them earlier\n+        # so the estimates would not be affected by the splitting transactions\n+        self.start_node(1)\n+        self.start_node(2)\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[2], 1)\n+\n+        self.sync_all()\n+\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting"
      },
      {
        "sha": "a14ff9c292e031c2089e7a5f7d894b66b8606de2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 33,
        "deletions": 32,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -91,7 +91,8 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -204,49 +205,49 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n+    def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        \"\"\"Instantiate TestNode objects\"\"\"\n \n         if extra_args is None:\n-            extra_args = []\n+            extra_args = [[]] * num_nodes\n         if binary is None:\n-            binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        node = TestNode(i, dirname, extra_args, rpchost, timewait, binary, stderr, self.mocktime, coverage_dir=self.options.coveragedir)\n-        node.start()\n+            binary = [None] * num_nodes\n+        assert_equal(len(extra_args), num_nodes)\n+        assert_equal(len(binary), num_nodes)\n+        for i in range(num_nodes):\n+            self.nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+\n+    def start_node(self, i, extra_args=None, stderr=None):\n+        \"\"\"Start a bitcoind\"\"\"\n+\n+        node = self.nodes[i]\n+\n+        node.start(extra_args, stderr)\n         node.wait_for_rpc_connection()\n \n         if self.options.coveragedir is not None:\n             coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return node\n-\n-    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n+    def start_nodes(self, extra_args=None):\n+        \"\"\"Start multiple bitcoinds\"\"\"\n \n         if extra_args is None:\n-            extra_args = [[]] * num_nodes\n-        if binary is None:\n-            binary = [None] * num_nodes\n-        assert_equal(len(extra_args), num_nodes)\n-        assert_equal(len(binary), num_nodes)\n-        nodes = []\n+            extra_args = [None] * self.num_nodes\n+        assert_equal(len(extra_args), self.num_nodes)\n         try:\n-            for i in range(num_nodes):\n-                nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n-                nodes[i].start()\n-            for node in nodes:\n+            for i, node in enumerate(self.nodes):\n+                node.start(extra_args[i])\n+            for node in self.nodes:\n                 node.wait_for_rpc_connection()\n         except:\n             # If one node failed to start, stop the others\n             self.stop_nodes()\n             raise\n \n         if self.options.coveragedir is not None:\n-            for node in nodes:\n+            for node in self.nodes:\n                 coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return nodes\n-\n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n         self.nodes[i].stop_node()\n@@ -264,10 +265,10 @@ def stop_nodes(self):\n             while not node.is_node_stopped():\n                 time.sleep(0.1)\n \n-    def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n+    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n             try:\n-                self.start_node(i, dirname, extra_args, stderr=log_stderr)\n+                self.start_node(i, extra_args, stderr=log_stderr)\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n@@ -385,7 +386,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n-                self.nodes[i].start()\n+                self.start_node(i)\n \n             # Wait for RPC connections to be ready\n             for node in self.nodes:\n@@ -455,13 +456,13 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n-        extra_args = [['-whitelist=127.0.0.1']]*self.num_nodes\n+        extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = self.start_nodes(\n-            self.num_nodes, self.options.tmpdir, extra_args,\n-            binary=[self.options.testbinary] +\n-            [self.options.refbinary] * (self.num_nodes - 1))\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args,\n+                       binary=[self.options.testbinary] +\n+                       [self.options.refbinary] * (self.num_nodes - 1))\n+        self.start_nodes()\n \n class SkipTest(Exception):\n     \"\"\"This exception is raised to skip a test\"\"\""
      },
      {
        "sha": "d9ee405293e0fd0124baa40bcb3443ec08f7685a",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -61,9 +61,13 @@ def __getattr__(self, *args, **kwargs):\n         assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n         return self.rpc.__getattr__(*args, **kwargs)\n \n-    def start(self):\n+    def start(self, extra_args=None, stderr=None):\n         \"\"\"Start the node.\"\"\"\n-        self.process = subprocess.Popen(self.args + self.extra_args, stderr=self.stderr)\n+        if extra_args is None:\n+            extra_args = self.extra_args\n+        if stderr is None:\n+            stderr = self.stderr\n+        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr)\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n "
      },
      {
        "sha": "a588e2386ffe8b705181bf2011451facd1138567",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -68,7 +68,8 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.start_nodes()\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n@@ -95,7 +96,7 @@ def run_test (self):\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.start_node(0)\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "2f38e6fee846f65ab1cc8e19fd3d425ce035a55c",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -31,7 +31,7 @@ def run_test(self):\n \n         # Encrypt the wallet\n         self.nodes[0].node_encrypt_wallet(passphrase)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n \n         # Test that the wallet is encrypted\n         assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)"
      },
      {
        "sha": "edc74089ba2990d2ad2cf10a021ebe10b794ca8a",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -25,8 +25,8 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.assert_start_raises_init_error(1, ['-usehd=0'], 'already existing HD wallet')\n+        self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -76,7 +76,7 @@ def run_test (self):\n         shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n         shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.start_node(1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -91,7 +91,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n+        self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n         # send a tx and make sure its using the internal chain for the changeoutput"
      },
      {
        "sha": "7694b122c607dca3e5d18d8dfb7b34bf42f5de1d",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 35,
        "deletions": 26,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -21,11 +21,14 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n+        self.add_nodes(4, self.options.tmpdir, self.extra_args)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n     def run_test(self):\n \n@@ -42,9 +45,9 @@ def run_test(self):\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         self.nodes[1].generate(101)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -88,7 +91,7 @@ def run_test(self):\n \n         # Have node0 mine a block, thus it will collect its own fee.\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n@@ -101,7 +104,7 @@ def run_test(self):\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n         # minus the 21 plus fees sent to node2\n@@ -130,7 +133,7 @@ def run_test(self):\n \n         # Have node1 mine a block to confirm transactions:\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 94)\n@@ -142,30 +145,30 @@ def run_test(self):\n         self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_0_bal += Decimal('10')\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n@@ -176,9 +179,9 @@ def run_test(self):\n         # EXPECT: nodes[3] should have those transactions in its mempool.\n         txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        sync_mempools(self.nodes)\n+        sync_mempools(self.nodes[0:2])\n \n-        self.nodes.append(self.start_node(3, self.options.tmpdir, self.extra_args[3]))\n+        self.start_node(3)\n         connect_nodes_bi(self.nodes, 0, 3)\n         sync_blocks(self.nodes)\n \n@@ -222,22 +225,24 @@ def run_test(self):\n \n         #do some -walletbroadcast tests\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        self.start_node(0, [\"-walletbroadcast=0\"])\n+        self.start_node(1, [\"-walletbroadcast=0\"])\n+        self.start_node(2, [\"-walletbroadcast=0\"])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         assert_equal(self.nodes[2].getbalance(), node_2_bal) #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal += 2\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n@@ -247,14 +252,16 @@ def run_test(self):\n \n         #restart the nodes with -walletbroadcast=1\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n         node_2_bal += 2\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n@@ -285,7 +292,7 @@ def run_test(self):\n         address_to_import = self.nodes[2].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # 2. Import address from node2 to node1\n         self.nodes[1].importaddress(address_to_import)\n@@ -311,15 +318,15 @@ def run_test(self):\n         cbAddr = self.nodes[1].getnewaddress()\n         blkHash = self.nodes[0].generatetoaddress(1, cbAddr)[0]\n         cbTxId = self.nodes[0].getblock(blkHash)['tx'][0]\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(cbTxId)\n \n         # check if wallet or blockchain maintenance changes the balance\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         blocks = self.nodes[0].generate(2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n@@ -350,7 +357,9 @@ def run_test(self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.nodes = self.start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n+            self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(1, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(2, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -398,7 +407,7 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "688cd6d0c866376c3db657ebdb3068f57a070988",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -78,9 +78,9 @@ def do_one_round(self):\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)"
      },
      {
        "sha": "1005a4b95fc06c693b2ae0d3f5596703920b7881",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -48,23 +48,23 @@ def run_test(self):\n \n         # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n         # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes, but not persistmempool.\n         # The unconfirmed transaction is zapped and is no longer in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-zapwallettxes=2\"])\n \n         # tx1 is still be available because it was confirmed\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)"
      },
      {
        "sha": "603b7a1b948401c581d6821fd05177219392cd79",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36b626867087e9fae6d85f926248997ebff327b7/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36b626867087e9fae6d85f926248997ebff327b7/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=36b626867087e9fae6d85f926248997ebff327b7",
        "patch": "@@ -41,8 +41,9 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         try:"
      }
    ]
  },
  {
    "sha": "6cf094a0229d051ab8a15189c8a0bc6011919e72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2YwOTRhMDIyOWQwNTFhYjhhMTUxODljOGEwYmM2MDExOTE5ZTcy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-24T15:37:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-01T16:25:54Z"
      },
      "message": "[tests] Avoid passing around member variables in test_framework",
      "tree": {
        "sha": "81fa4f2d2c6179cc6f3c0a7e2c6d9d818414fb24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81fa4f2d2c6179cc6f3c0a7e2c6d9d818414fb24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cf094a0229d051ab8a15189c8a0bc6011919e72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf094a0229d051ab8a15189c8a0bc6011919e72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf094a0229d051ab8a15189c8a0bc6011919e72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf094a0229d051ab8a15189c8a0bc6011919e72/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36b626867087e9fae6d85f926248997ebff327b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36b626867087e9fae6d85f926248997ebff327b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36b626867087e9fae6d85f926248997ebff327b7"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "ec485281d4d937627b71bd2d8592fb605a0692d0",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -60,7 +60,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.add_nodes(3, self.options.tmpdir)\n+        self.add_nodes(3)\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid."
      },
      {
        "sha": "b0c6d39c494d5073f18c960d454a872327c47ecd",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -65,7 +65,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.add_nodes(self.num_nodes, timewait=90)\n         self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n "
      },
      {
        "sha": "e85086fbc16c8eb79aff4303ba17a384cea5f2ff",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -121,7 +121,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)"
      },
      {
        "sha": "adbbda278daca644f6086361e2da8551cca66749",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -89,7 +89,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.add_nodes(self.num_nodes, extra_args=args)\n         self.start_nodes()\n \n     def node_test(self, node, proxies, auth, test_onion=True):"
      },
      {
        "sha": "1791cd97f9081a07da4a2f2b84bf5f271d99625b",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -57,7 +57,7 @@ def setup_network(self):\n         sync_blocks(self.nodes[0:5])\n \n     def setup_nodes(self):\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=900)\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=900)\n         self.start_nodes()\n \n     def create_big_chain(self):"
      },
      {
        "sha": "a7661421ff9abe8bcfe219d0ab908faadc8da294",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -20,7 +20,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, None)\n+        self.add_nodes(self.num_nodes, None)\n \n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''"
      },
      {
        "sha": "caf35926522c93cd36e70471515e739da4d6ea1d",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -153,9 +153,9 @@ def setup_network(self):\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.add_nodes(3, self.options.tmpdir, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                                           [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n-                                                           [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n+        self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                      [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,"
      },
      {
        "sha": "5e3644a9142b68bde9b72c4a53d8233fec86ac35",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -73,9 +73,9 @@ def add_options(self, parser):\n     def setup_chain(self):\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n         if self.setup_clean_chain:\n-            self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+            self._initialize_chain_clean()\n         else:\n-            self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n+            self._initialize_chain()\n \n     def setup_network(self):\n         self.setup_nodes()\n@@ -91,7 +91,7 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n     def run_test(self):\n@@ -205,7 +205,7 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Instantiate TestNode objects\"\"\"\n \n         if extra_args is None:\n@@ -215,7 +215,7 @@ def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n \n     def start_node(self, i, extra_args=None, stderr=None):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -357,16 +357,16 @@ def _start_logging(self):\n             rpc_handler.setLevel(logging.DEBUG)\n             rpc_logger.addHandler(rpc_handler)\n \n-    def _initialize_chain(self, test_dir, num_nodes, cachedir):\n+    def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n         Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n-        assert num_nodes <= MAX_NODES\n+        assert self.num_nodes <= MAX_NODES\n         create_cache = False\n         for i in range(MAX_NODES):\n-            if not os.path.isdir(os.path.join(cachedir, 'node' + str(i))):\n+            if not os.path.isdir(os.path.join(self.options.cachedir, 'node' + str(i))):\n                 create_cache = True\n                 break\n \n@@ -375,16 +375,16 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n \n             # find and delete old cache directories if any exist\n             for i in range(MAX_NODES):\n-                if os.path.isdir(os.path.join(cachedir, \"node\" + str(i))):\n-                    shutil.rmtree(os.path.join(cachedir, \"node\" + str(i)))\n+                if os.path.isdir(os.path.join(self.options.cachedir, \"node\" + str(i))):\n+                    shutil.rmtree(os.path.join(self.options.cachedir, \"node\" + str(i)))\n \n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n-                datadir = initialize_datadir(cachedir, i)\n+                datadir = initialize_datadir(self.options.cachedir, i)\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n \n@@ -415,24 +415,24 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             self.nodes = []\n             self.disable_mocktime()\n             for i in range(MAX_NODES):\n-                os.remove(log_filename(cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(cachedir, i, \"db.log\"))\n-                os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-                os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n-\n-        for i in range(num_nodes):\n-            from_dir = os.path.join(cachedir, \"node\" + str(i))\n-            to_dir = os.path.join(test_dir, \"node\" + str(i))\n+                os.remove(log_filename(self.options.cachedir, i, \"debug.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"db.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"peers.dat\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"fee_estimates.dat\"))\n+\n+        for i in range(self.num_nodes):\n+            from_dir = os.path.join(self.options.cachedir, \"node\" + str(i))\n+            to_dir = os.path.join(self.options.tmpdir, \"node\" + str(i))\n             shutil.copytree(from_dir, to_dir)\n-            initialize_datadir(test_dir, i)  # Overwrite port/rpcport in bitcoin.conf\n+            initialize_datadir(self.options.tmpdir, i)  # Overwrite port/rpcport in bitcoin.conf\n \n-    def _initialize_chain_clean(self, test_dir, num_nodes):\n+    def _initialize_chain_clean(self):\n         \"\"\"Initialize empty blockchain for use by the test.\n \n         Create an empty blockchain and num_nodes wallets.\n         Useful if a test case wants complete control over initialization.\"\"\"\n-        for i in range(num_nodes):\n-            initialize_datadir(test_dir, i)\n+        for i in range(self.num_nodes):\n+            initialize_datadir(self.options.tmpdir, i)\n \n class ComparisonTestFramework(BitcoinTestFramework):\n     \"\"\"Test framework for doing p2p comparison testing\n@@ -459,7 +459,7 @@ def setup_network(self):\n         extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args,\n+        self.add_nodes(self.num_nodes, extra_args,\n                        binary=[self.options.testbinary] +\n                        [self.options.refbinary] * (self.num_nodes - 1))\n         self.start_nodes()"
      },
      {
        "sha": "e0381b9809f9cd899935104cadeb1f5a529f4313",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -68,7 +68,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=60)\n         self.start_nodes()\n \n     def run_test (self):"
      },
      {
        "sha": "12026e84aab7332deca25d5c6438c193853658ec",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.add_nodes(4, self.options.tmpdir, self.extra_args)\n+        self.add_nodes(4, self.extra_args)\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)"
      },
      {
        "sha": "b5a22ea07fc8f6b5d7050d03413bb9ce061382e5",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf094a0229d051ab8a15189c8a0bc6011919e72/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "patch": "@@ -42,7 +42,7 @@ def setup_nodes(self):\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n         self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n     def run_test(self):"
      }
    ]
  },
  {
    "sha": "5448a1471d6fc638a2220ea5a2f3782172efe14c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDQ4YTE0NzFkNmZjNjM4YTIyMjBlYTVhMmYzNzgyMTcyZWZlMTRj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-09T22:21:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-01T16:25:55Z"
      },
      "message": "[tests] don't override __init__() in individual tests\n\nAlmost all test scripts currently need to override the __init__()\nmethod. When they do that they need to call into super().__init__() as\nthe base class does some generic initialization.\n\nThis commit makes the base class __init__() call into set_test_params()\nmethod. Individual test cases can override set_test_params() to setup\ntheir test parameters.",
      "tree": {
        "sha": "f03f452344b4866450cf60ac0b51d4ff6295631d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f03f452344b4866450cf60ac0b51d4ff6295631d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5448a1471d6fc638a2220ea5a2f3782172efe14c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5448a1471d6fc638a2220ea5a2f3782172efe14c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5448a1471d6fc638a2220ea5a2f3782172efe14c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5448a1471d6fc638a2220ea5a2f3782172efe14c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf094a0229d051ab8a15189c8a0bc6011919e72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf094a0229d051ab8a15189c8a0bc6011919e72"
      }
    ],
    "stats": {
      "total": 467,
      "additions": 145,
      "deletions": 322
    },
    "files": [
      {
        "sha": "2558bd017d6a210f4040e88ddf529220129e4b84",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -24,8 +24,8 @@ don't have test cases for.\n - Use a module-level docstring to describe what the test is testing, and how it\n   is testing it.\n - When subclassing the BitcoinTestFramwork, place overrides for the\n-  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n-  locally-defined helper methods, then the `run_test()` method.\n+  `set_test_params()`, `add_options()` and `setup_xxxx()` methods at the top of\n+  the subclass, then locally-defined helper methods, then the `run_test()` method.\n \n #### General test-writing advice\n \n@@ -36,7 +36,7 @@ don't have test cases for.\n - Avoid stop-starting the nodes multiple times during the test if possible. A\n   stop-start takes several seconds, so doing it several times blows up the\n   runtime of the test.\n-- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+- Set the `self.setup_clean_chain` variable in `set_test_params()` to control whether\n   or not to use the cached data directories. The cached data directories\n   contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n   has 25 mature blocks (25x50=1250 BTC) in its wallet."
      },
      {
        "sha": "e8dbc864698aa3ead772fe78da08d5ef74bcc595",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -14,10 +14,8 @@\n from test_framework.util import *\n \n class AbandonConflictTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def run_test(self):"
      },
      {
        "sha": "beaf8c70558613e040dd9c089f422d255e38327b",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -54,8 +54,7 @@ def send_header_for_blocks(self, new_blocks):\n         self.send_message(headers_message)\n \n class AssumeValidTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "2cd6df6e37a823a03aa4f42c9f2105f7608e4392",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -60,9 +60,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP65Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True"
      },
      {
        "sha": "7e6a4f44086696eb2f9f4811bd4ee8832abf64a2",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -92,9 +92,9 @@ def all_rlt_txs(txarray):\n     return txs\n \n class BIP68_112_113Test(ComparisonTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4']]\n \n     def run_test(self):"
      },
      {
        "sha": "39012adf9533d25bb6d1e01afc7e94c6bc38cb21",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -17,10 +17,8 @@\n NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n \n class BIP68Test(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "904789301a1088d0e996c7fc0201f8a04e01a238",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -28,11 +28,10 @@\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1']]\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "c620d3e155d14b80aa14feee4f0fd6e39feb6efa",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -48,9 +48,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP66Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True"
      },
      {
        "sha": "5d04de9940c4b990453415ded48c529941119a3e",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -30,12 +30,8 @@\n     assert_is_hash_string,\n )\n \n-\n class BlockchainTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-stopatheight=207']]\n "
      },
      {
        "sha": "3a17fab9eb3f482e8c20b6df7a1b981e40c37f6f",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -30,8 +30,7 @@\n \n \n class BumpFeeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]"
      },
      {
        "sha": "7d4d1a529b762b95075cfc2f24c64c53908a6c24",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -12,11 +12,9 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class CreateCache(BitcoinTestFramework):\n+    # Test network and test nodes are not required:\n \n-    def __init__(self):\n-        super().__init__()\n-\n-        # Test network and test nodes are not required:\n+    def set_test_params(self):\n         self.num_nodes = 0\n \n     def setup_network(self):"
      },
      {
        "sha": "71424f641b55d609c8e75e6e9e4e7b2d47da9e4d",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -43,8 +43,7 @@\n     pass\n \n class ChainstateWriteCrashTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n "
      },
      {
        "sha": "6611da8831472cf45310115009a63c07e42e4199",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -10,9 +10,7 @@\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "c1d37963bc60527603fe2fffeaa704a40c9a3f4c",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -11,11 +11,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class DisableWalletTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-disablewallet\"]]"
      },
      {
        "sha": "a6445b9b35e42554c62c76471275e399d040baed",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -14,11 +14,8 @@\n )\n \n class DisconnectBanTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         self.log.info(\"Test setban and listbanned RPCs\")"
      },
      {
        "sha": "044ef36cfc35eaa3cbdc60c0bbbfeb07eceb39a2",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -73,15 +73,11 @@ def custom_function():\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n-    def __init__(self):\n-        \"\"\"Initialize the test\n-\n-        Call super().__init__() first, and then override any test parameters\n-        for your individual test.\"\"\"\n-        super().__init__()\n+    def set_test_params(self):\n+        \"\"\"Override any test parameters for your individual test.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes"
      },
      {
        "sha": "afcad1f9cc3fa055cfafc2505b10d28cdacb932f",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -9,11 +9,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class ForkNotifyTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")"
      },
      {
        "sha": "dec3d41bfc5f24bfb767a9e024330eb417decfc7",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -14,13 +14,9 @@ def get_unspent(listunspent, amount):\n             return utx\n     raise AssertionError('Could not find unspent with amount={}'.format(amount))\n \n-\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n \n     def setup_network(self, split=False):\n         self.setup_nodes()"
      },
      {
        "sha": "85d2560244e579891d217fedfc077951c8b3a710",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -23,11 +23,6 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "00fc23c6b0d3f54e761ef92b690fbc896330f0cd",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -14,13 +14,7 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def run_test (self):\n-\n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)\n         assert_equal (tips[0]['branchlen'], 0)"
      },
      {
        "sha": "c7682cb49df422df050939a9cb729ecf528f5811",
        "filename": "test/functional/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/httpbasics.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -11,10 +11,8 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "02d7428120bea956e44c148822d35cba64fa4b14",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -111,8 +111,7 @@ def check(self, txid=None, amount=None, confirmations=None):\n \n \n class ImportRescanTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):"
      },
      {
        "sha": "4c519f40d54e3219af54a7c4e18b1e71164ed654",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -7,8 +7,7 @@\n from test_framework.util import *\n \n class ImportMultiTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "df90e9ec177ba30ac682a759771b9430acea7979",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -6,11 +6,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class ImportPrunedFundsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "dd3daf1e07bda1c55e8839215e7ad519309b322c",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class InvalidateTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "9f44b44927c0cb3d6331bc9340bfa5490d3e24eb",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -23,9 +23,9 @@ class InvalidBlockRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "a22bd8f8cdc3db99c95a8b118f1504e898f30bd1",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -19,9 +19,9 @@ class InvalidTxRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "b87433a9c522ca919ae9edba7f30518e82c0650a",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -20,8 +20,7 @@\n )\n \n class KeypoolRestoreTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]"
      },
      {
        "sha": "b823ca63bb80c35c3a6630a9b47533c67ecc7022",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import *\n \n class KeyPoolTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n \n     def run_test(self):\n         nodes = self.nodes\n@@ -78,10 +80,5 @@ def run_test(self):\n         assert_equal(wi['keypoolsize_hd_internal'], 100)\n         assert_equal(wi['keypoolsize'], 100)\n \n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-\n if __name__ == '__main__':\n     KeyPoolTest().main()"
      },
      {
        "sha": "ed1315e805b1640432af450c5fe7b976f9f8d712",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import assert_equal\n \n class ListSinceBlockTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n \n     def run_test(self):\n         self.nodes[2].generate(101)"
      },
      {
        "sha": "5ee85a0dac665384f80b1827bc737be8feeeb222",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -16,10 +16,7 @@ def txFromHex(hexstring):\n     return tx\n \n class ListTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "1f402798e7e01e05a60e5565d77867ea3101efec",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -31,8 +31,7 @@ def on_block(self, conn, message):\n \n class MaxUploadTest(BitcoinTestFramework):\n  \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]]"
      },
      {
        "sha": "e24dc5a464b366004a01470a4e6c73533131388f",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class MempoolLimitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]"
      },
      {
        "sha": "2dedadf8ce4a2b6f5b81289ff9dedbccff032335",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -12,10 +12,8 @@\n MAX_DESCENDANTS = 25\n \n class MempoolPackagesTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n     # Build a transaction that spends parent_txid:vout"
      },
      {
        "sha": "01f65b137363dffd6fd98e7c177d8460aa079f6e",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -36,12 +36,8 @@\n from test_framework.util import *\n \n class MempoolPersistTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        # We need 3 nodes for this test. Node1 does not have a persistent mempool.\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n     def run_test(self):"
      },
      {
        "sha": "7dfddd3230df1e32a7e5b1f35b4db985197e888b",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -13,10 +13,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]] * 2\n \n     alert_filename = None  # Set by setup_network"
      },
      {
        "sha": "1263c9306b6377d542db0302600a4a0ddc57e507",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -9,12 +9,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n-        # Just need one node for this test\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "58ccd3e3734f6d9f42d67bbd029bdaeeeb19eca8",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -17,11 +17,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "2125c6e17bc27f9e7bfe38520e6f24190745dcbd",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import *\n \n class MerkleBlockTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n "
      },
      {
        "sha": "8edc704670cd7bb82399198aee4297a0a26aba33",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -25,9 +25,7 @@ def assert_template(node, block, expect, rehash=True):\n     assert_equal(rsp, expect)\n \n class MiningTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n "
      },
      {
        "sha": "a2b346f27429acc9712591b6c167164345af00a7",
        "filename": "test/functional/multi_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multi_rpc.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -12,10 +12,7 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_chain(self):"
      },
      {
        "sha": "e5453e9aaddcf4608342286be5e5688def47b11b",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -12,9 +12,7 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class MultiWalletTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]"
      },
      {
        "sha": "830aeb45b486023d4b295d61ceb41a0793028e7c",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -17,10 +17,8 @@\n     p2p_port,\n )\n \n-\n class NetTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "60d0d876df70f452e443ba3ecf235e0fd256345d",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -37,8 +37,7 @@ def trueDummy(tx):\n \n class NULLDUMMYTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness']]"
      },
      {
        "sha": "293bc055393ea1539eb9ea6508128d5fc833f0a3",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -60,8 +60,7 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to test\")\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]"
      },
      {
        "sha": "9c91c0045307fbeeba242d3134348f4357613515",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -89,8 +89,7 @@ def send_await_disconnect(self, message, timeout=30):\n         wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2"
      },
      {
        "sha": "8c92365ceda611f19c4e6286f3389f21542d50de",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -37,11 +37,8 @@ def clear_invs(self):\n             self.txinvs = []\n \n class FeeFilterTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         node1 = self.nodes[1]"
      },
      {
        "sha": "cb7bbaf7e563b183c07e3ec2b2bf09840c139576",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -49,12 +49,11 @@ def normal_serialize(self):\n         return r\n \n class FullBlockTest(ComparisonTestFramework):\n-\n     # Can either run this test as 1 node with expected answers, or two and compare them.\n     # Change the \"outcome\" variable from each TestInstance object to only do the comparison.\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n         self.coinbase_key.set_secretbytes(b\"horsebattery\")"
      },
      {
        "sha": "f27086c97eb2d883dfb5c968d6333373c847381a",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -92,8 +92,7 @@ def on_version(self, conn, message):\n         conn.send_message(msg_getaddr())\n \n class P2PLeakTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore='+str(banscore)]]\n "
      },
      {
        "sha": "40fcde2605716979490a62681df46ab5d3f28ed9",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -13,9 +13,7 @@\n from test_framework.util import *\n \n class P2PMempoolTests(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-peerbloomfilters=0\"]]"
      },
      {
        "sha": "8c2d2f0272c32545c71bce57bd2bcab7d6071231",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -33,8 +33,7 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):\n@@ -109,9 +108,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n \n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-whitelist=127.0.0.1\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]"
      },
      {
        "sha": "51d4769efc3fb023135199ffbeee77bbb364c30a",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -33,8 +33,7 @@ def on_version(self, conn, message):\n         pass\n \n class TimeoutsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "5dfac6dd10e016c95460d125c8df33b3872da79a",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -28,8 +28,7 @@ def on_inv(self, conn, message):\n         pass\n \n class VersionBitsWarningTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "40d7bb14edcecd1162131bb7b4a2757ca02be50a",
        "filename": "test/functional/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/preciousblock.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -35,8 +35,7 @@ def node_sync_via_rpc(nodes):\n             unidirectional_node_sync_via_rpc(node_src, node_dest)\n \n class PreciousTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "7ad368acd4b8df665283e91004639c9db4e39124",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -9,9 +9,7 @@\n from test_framework.mininode import COIN, MAX_BLOCK_BASE_SIZE\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]"
      },
      {
        "sha": "26cb645da431eed4f0103669f1f732e8f3db2489",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -41,13 +41,7 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n-\n class ProxyTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports"
      },
      {
        "sha": "f53fe828816c16d9b47a2df0f5691a15e37a65be",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -26,9 +26,7 @@ def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6\n "
      },
      {
        "sha": "c53dc46282fcd27d6ac6bf57ab3efec868d865ad",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -17,9 +17,7 @@\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "48eb1c51b51c638bf28f355040f40cb00904c32a",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -23,11 +23,7 @@ def get_sub_array_from_array(object_array, to_match):\n     return []\n \n class ReceivedByTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "1f684a1afe3bf01dc15308e9e3ee9eaf5160988f",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -15,8 +15,7 @@\n \n class ReindexTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "220e889686630aa68f17dce6f5eec63d312aa621",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -61,10 +61,8 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\","
      },
      {
        "sha": "d6ba5913912d371c6765c47696927e0c7004d6ef",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -8,11 +8,9 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.extra_args = [['--walletbroadcast=false']]\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [['--walletbroadcast=false']]\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled."
      },
      {
        "sha": "437111a4d7fd576aa7b9f6d9104371952334a88c",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -43,8 +43,7 @@ def http_post_call(host, port, path, requestdata = '', response_object = 0):\n class RESTTest (BitcoinTestFramework):\n     FORMAT_SEPARATOR = \".\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "0cf64beebd408a90b058d531e09a01954dcb4ca1",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -11,11 +11,8 @@\n from test_framework.util import *\n from test_framework.netutil import *\n \n-\n class RPCBindTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "da61cc66e6854c8f989c3bd14bf349e43874d0fd",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -10,15 +10,8 @@\n     assert_raises_jsonrpc,\n )\n \n-\n class NamedArgumentTest(BitcoinTestFramework):\n-    \"\"\"\n-    Test named arguments on RPC calls.\n-    \"\"\"\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):"
      },
      {
        "sha": "c08fbd3e7751b6c688157cdfc82fa9d8dcda1fc9",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -75,9 +75,7 @@ def find_unspent(node, min_value):\n             return utxo\n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],"
      },
      {
        "sha": "fe577dc20a2dbd662f22c95acc188334dbfda5fc",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -174,8 +174,7 @@ def send_getblocks(self, locator):\n         self.send_message(getblocks_message)\n \n class SendHeadersTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "5fdfeceb76a0941ff2feb4da232190e775a92f90",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -7,9 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class SignMessagesTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "b47ef939558a272da9d147e9c99c8541501ff5fb",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -9,8 +9,7 @@\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "76632fc57848ac31ff914ec98aa06eb7e7f0476f",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -141,11 +141,8 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n \n \n class EstimateFeeTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         \"\"\""
      },
      {
        "sha": "d860bc5594c649cd23abd180e3c017c12b855595",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 50,
        "deletions": 39,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -48,58 +48,30 @@ class TestStatus(Enum):\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n-    Individual bitcoin test scripts should subclass this class and override the following methods:\n+    Individual bitcoin test scripts should subclass this class and override the run_test() method.\n \n-    - __init__()\n+    Individual tests can also override the following methods to customize the test setup:\n+\n+    - set_test_params()\n     - add_options()\n     - setup_chain()\n     - setup_network()\n-    - run_test()\n+    - setup_nodes()\n \n-    The main() method should not be overridden.\n+    The __init__() and main() methods should not be overridden.\n \n     This class also contains various public and private helper methods.\"\"\"\n \n-    # Methods to override in subclass test scripts.\n     def __init__(self):\n+        \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.mocktime = 0\n-\n-    def add_options(self, parser):\n-        pass\n-\n-    def setup_chain(self):\n-        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n-        if self.setup_clean_chain:\n-            self._initialize_chain_clean()\n-        else:\n-            self._initialize_chain()\n-\n-    def setup_network(self):\n-        self.setup_nodes()\n-\n-        # Connect the nodes as a \"chain\".  This allows us\n-        # to split the network between nodes 1 and 2 to get\n-        # two halves that can work on competing chains.\n-        for i in range(self.num_nodes - 1):\n-            connect_nodes_bi(self.nodes, i, i + 1)\n-        self.sync_all()\n-\n-    def setup_nodes(self):\n-        extra_args = None\n-        if hasattr(self, \"extra_args\"):\n-            extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, extra_args)\n-        self.start_nodes()\n-\n-    def run_test(self):\n-        raise NotImplementedError\n-\n-    # Main function. This should not be overridden by the subclass test scripts.\n+        self.set_test_params()\n \n     def main(self):\n+        \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n         parser = optparse.OptionParser(usage=\"%prog [options]\")\n         parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n@@ -203,6 +175,46 @@ def main(self):\n             logging.shutdown()\n             sys.exit(TEST_EXIT_FAILED)\n \n+    # Methods to override in subclass test scripts.\n+    def set_test_params(self):\n+        \"\"\"Override this method to change default values for number of nodes, topology, etc\"\"\"\n+        pass\n+\n+    def add_options(self, parser):\n+        \"\"\"Override this method to add command-line options to the test\"\"\"\n+        pass\n+\n+    def setup_chain(self):\n+        \"\"\"Override this method to customize blockchain setup\"\"\"\n+        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n+        if self.setup_clean_chain:\n+            self._initialize_chain_clean()\n+        else:\n+            self._initialize_chain()\n+\n+    def setup_network(self):\n+        \"\"\"Override this method to customize test network topology\"\"\"\n+        self.setup_nodes()\n+\n+        # Connect the nodes as a \"chain\".  This allows us\n+        # to split the network between nodes 1 and 2 to get\n+        # two halves that can work on competing chains.\n+        for i in range(self.num_nodes - 1):\n+            connect_nodes_bi(self.nodes, i, i + 1)\n+        self.sync_all()\n+\n+    def setup_nodes(self):\n+        \"\"\"Override this method to customize test node setup\"\"\"\n+        extra_args = None\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n+        self.add_nodes(self.num_nodes, extra_args)\n+        self.start_nodes()\n+\n+    def run_test(self):\n+        \"\"\"Override this method to define test logic\"\"\"\n+        raise NotImplementedError\n+\n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n     def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n@@ -442,8 +454,7 @@ class ComparisonTestFramework(BitcoinTestFramework):\n     - 2 binaries: 1 test binary, 1 ref binary\n     - n>2 binaries: 1 test binary, n-1 ref binaries\"\"\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "fc133050b0d7700ac69e3f010fc5076670097e0d",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -8,12 +8,6 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "ff24fac254ead6b9f4a361bd2e376a41650668c4",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -9,11 +9,6 @@\n \n class TxnMallTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "78236b239374a794703e9635666828586b0a7045",
        "filename": "test/functional/uptime.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uptime.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -13,9 +13,7 @@\n \n \n class UptimeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "40726d2a760909af1c8fb221e18aa5b9cff49073",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -17,9 +17,7 @@\n from test_framework.util import assert_equal\n \n class WalletAccountsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[]]"
      },
      {
        "sha": "39b7164d6e6e3e80335de02a0f81b6439d48ea9a",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -56,10 +56,7 @@ def read_dump(file_name, addrs, hd_master_addr_old):\n \n \n class WalletDumpTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-keypool=90\"]]\n "
      },
      {
        "sha": "f63bb2ea5e1c984be6a48d4a5b87642c2f8909e3",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -13,9 +13,7 @@\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "a6b96b745562ad437e8e4d36eeee168b0d01577c",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -11,11 +11,8 @@\n )\n import shutil\n \n-\n class WalletHDTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]"
      },
      {
        "sha": "0e5d641fe371cd8d3fa97bade5f2ec1cf1b41067",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -7,17 +7,8 @@\n from test_framework.util import *\n \n class WalletTest(BitcoinTestFramework):\n-\n-    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n-        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n-        fee = balance_with_fee - curr_balance\n-        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n-        return curr_balance\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n@@ -30,8 +21,13 @@ def setup_network(self):\n         connect_nodes_bi(self.nodes,0,2)\n         self.sync_all([self.nodes[0:3]])\n \n-    def run_test(self):\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        fee = balance_with_fee - curr_balance\n+        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n+        return curr_balance\n \n+    def run_test(self):\n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n         assert_equal(len(self.nodes[1].listunspent()), 0)"
      },
      {
        "sha": "36714164a8327e9a83cd62b99da854c7d7e3393c",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -37,11 +37,8 @@\n from test_framework.util import *\n \n class WalletBackupTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n "
      },
      {
        "sha": "c001517a6d4f60449663a8642b5cd08a0b975a27",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -20,9 +20,7 @@\n                                  )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "3f2668ee8724db13627f0e8ad33a9186f3e5ab34",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5448a1471d6fc638a2220ea5a2f3782172efe14c/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "patch": "@@ -13,9 +13,7 @@\n                                  )\n \n class ZMQTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_nodes(self):"
      }
    ]
  },
  {
    "sha": "7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTQ4Yjc0ZGMzOTExMGY1M2M2NjViOTRmYTlkOTk0YzZhZDZkYzFj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-24T15:11:56Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-01T16:25:55Z"
      },
      "message": "[tests] Functional tests must explicitly set num_nodes",
      "tree": {
        "sha": "ddece712dcd461829ca3b5133b47a14cb945c96a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ddece712dcd461829ca3b5133b47a14cb945c96a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5448a1471d6fc638a2220ea5a2f3782172efe14c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5448a1471d6fc638a2220ea5a2f3782172efe14c"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 31,
      "deletions": 7
    },
    "files": [
      {
        "sha": "43f3415c8cf6240ca5a8471aafe8cbe7f1af87af",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -77,7 +77,9 @@ class ExampleTest(BitcoinTestFramework):\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n-        \"\"\"Override any test parameters for your individual test.\"\"\"\n+        \"\"\"Override test parameters for your individual test.\n+\n+        This method must be overridden and num_nodes must be exlicitly set.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes"
      },
      {
        "sha": "3326b58c457144e2077f1a126ece8aaa2b59b4fa",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -16,6 +16,7 @@ def get_unspent(listunspent, amount):\n \n class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n \n     def setup_network(self, split=False):"
      },
      {
        "sha": "89768bd2fb530ad31addf78c4ca8954c35dfdc45",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -23,6 +23,9 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "21b67bfc64f9c3c33b79f47a912f94e6fa7da03d",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -14,6 +14,9 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def run_test (self):\n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "6f428388ecbbd91bf9dfc27ef0822b8b98cd41f3",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -9,6 +9,7 @@\n \n class ListSinceBlockTest (BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n \n     def run_test(self):"
      },
      {
        "sha": "e4522cc3b5c7cb9878edf04ed8dab99ba0387d80",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -17,6 +17,7 @@ def txFromHex(hexstring):\n \n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "a58334b2a540e7cf693d0c521040259de33efd32",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -9,6 +9,7 @@\n \n class MerkleBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]"
      },
      {
        "sha": "9bb72c819945b9415ee00f0ca58e1e4f360604f5",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -34,6 +34,7 @@ def get_virtual_size(witness_block):\n \n class TestNode(NodeConnCB):\n     def set_test_params(self):\n+        self.num_nodes = 3\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):"
      },
      {
        "sha": "81b99d1bf4484a787d91f29db9880242ae90909e",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -42,6 +42,9 @@\n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n class ProxyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports"
      },
      {
        "sha": "db6fc86b82fe404850115ec9dc873827f7b91105",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -24,6 +24,7 @@ def get_sub_array_from_array(object_array, to_match):\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "103651f1752b87c9d7d15ea960452b66df4d29bc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -48,11 +48,10 @@ class TestStatus(Enum):\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n-    Individual bitcoin test scripts should subclass this class and override the run_test() method.\n+    Individual bitcoin test scripts should subclass this class and override the set_test_params() and run_test() methods.\n \n     Individual tests can also override the following methods to customize the test setup:\n \n-    - set_test_params()\n     - add_options()\n     - setup_chain()\n     - setup_network()\n@@ -64,12 +63,13 @@ class BitcoinTestFramework(object):\n \n     def __init__(self):\n         \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n-        self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.mocktime = 0\n         self.set_test_params()\n \n+        assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n+\n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n@@ -177,8 +177,8 @@ def main(self):\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):\n-        \"\"\"Override this method to change default values for number of nodes, topology, etc\"\"\"\n-        pass\n+        \"\"\"Tests must this method to change default values for number of nodes, topology, etc\"\"\"\n+        raise NotImplementedError\n \n     def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n@@ -212,7 +212,7 @@ def setup_nodes(self):\n         self.start_nodes()\n \n     def run_test(self):\n-        \"\"\"Override this method to define test logic\"\"\"\n+        \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n \n     # Public helper methods. These can be accessed by the subclass test scripts."
      },
      {
        "sha": "740bb2d4c5c061828a124eccc33677e64aa21d3c",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -8,6 +8,9 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "69629ef95196ebd765422d597e34a69dbcfd154b",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "0b3c267a29042ea1c2e65bcb222fe4d562c05533",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -8,6 +8,7 @@\n \n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n "
      },
      {
        "sha": "15ea26afa1605f453bd1dc8fb46d033377b47c68",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7148b74dc39110f53c665b94fa9d994c6ad6dc1c/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
        "patch": "@@ -38,6 +38,7 @@\n \n class WalletBackupTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]"
      }
    ]
  }
]