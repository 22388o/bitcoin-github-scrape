practicalswift,2017-11-08T13:53:40Z,@promag Thanks for reviewing! Feedback addressed. Looks good? :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-342823675,342823675,
promag,2017-11-08T20:36:25Z,utACK 007fcbf.,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-342951031,342951031,
practicalswift,2017-11-21T16:58:48Z,"Added another commit with two more missing locks:\n\n* calling function `IsSpent` requires holding mutex `pwallet->cs_wallet` exclusively\n* writing variable `nWalletVersion`, `nWalletMaxVersion`, `nOrderPosNext` and `nTimeFirstKey` require holding mutex `cs_wallet`",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-346091745,346091745,
practicalswift,2017-11-21T16:59:12Z,@promag Would you mind re-reviewing? :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-346091846,346091846,
practicalswift,2018-02-22T20:25:50Z,@TheBlueMatt Thanks for reviewing! Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-367810798,367810798,
practicalswift,2018-03-02T16:58:30Z,Fixed build issue. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-369982400,369982400,
MarcoFalke,2018-03-02T17:05:47Z,"Given that https://github.com/bitcoin/bitcoin/pull/11226/files#diff-12635a58447c65585f51d32b7e04075bR857 is now closed, wouldn't it make sense to add the clang annotations within this commit?",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-369984738,369984738,
practicalswift,2018-03-10T13:27:17Z,@MarcoFalke @TheBlueMatt @promag Thanks for reviewing. I've now addressed the feedback and added corresponding `GUARDED_BY`/`EXCLUSIVE_LOCKS_REQUIRED` annotations. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-372029915,372029915,
practicalswift,2018-03-12T16:02:05Z,Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-372362960,372362960,
practicalswift,2018-03-14T19:12:05Z,"Rebased!\n\nHaving this merged would have catched this locking incident: https://github.com/bitcoin/bitcoin/pull/12565/files#r171235800\n\nReviews welcome! Perhaps @promag or @Sjors could take a look? :-)",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373141605,373141605,
Sjors,2018-03-14T22:17:17Z,"Concept ACK: anything that prevents me from making mistakes :-)\n\n",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373193560,373193560,
practicalswift,2018-03-14T22:48:22Z,@promag Thanks for reviewing. Feedback addressed. Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373200713,373200713,
sipa,2018-03-15T00:49:58Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-373223470,373223470,
practicalswift,2018-04-09T13:22:17Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-379749678,379749678,
practicalswift,2018-04-09T22:58:51Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-379919635,379919635,
practicalswift,2018-06-03T07:41:51Z,@MarcoFalke Thanks for the review. I've now reworked this PR and moved annotations to the `.h` files where possible. Could you please re-review? :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-394143819,394143819,
MarcoFalke,2018-06-03T17:18:25Z,"`GetConflicts` has still an annotation in the cpp file?\n\n* If it is not trivially possible to move to the header file, better remove the annotation for now.",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-394176962,394176962,
practicalswift,2018-06-03T17:34:12Z,"@MarcoFalke \n\nApplying â€¦\n\n```diff\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\nindex a74efb919..f2926fd74 100644\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -1865,7 +1865,7 @@ bool CWalletTx::RelayWalletTransaction(CConnman* connman)\n     return false;\n }\n\n-std::set<uint256> CWalletTx::GetConflicts() const EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-394178033,394178033,
practicalswift,2018-06-06T12:53:05Z,"@MarcoFalke Another alternative could be to add `NO_THREAD_SAFETY_ANALYSIS` here to disable the analysis locally.\n\nWhat would you suggest as the recommended way to proceed?",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-395057561,395057561,
MarcoFalke,2018-06-06T13:11:37Z,"@practicalswift I like your latest suggestion (`NO_THREAD_SAFETY_ANALYSIS`). Make sure to include a comment to explain this is only temporary. Also, explain that this is safe to do, since we have a run-time `AssertLockHeld` in place.",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-395063012,395063012,
practicalswift,2018-06-06T15:16:27Z,@MarcoFalke Good point! Added and documented `NO_THREAD_SAFETY_ANALYSIS`. Please review :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-395106362,395106362,
practicalswift,2018-07-11T23:33:42Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-404342629,404342629,
practicalswift,2018-07-16T07:53:48Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-405171839,405171839,
practicalswift,2018-08-01T08:33:28Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-409496035,409496035,
practicalswift,2018-08-06T16:16:37Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-410764100,410764100,
practicalswift,2018-08-13T10:47:00Z,Rebase number eight performed! :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-412479118,412479118,
practicalswift,2018-08-25T22:44:02Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-416001218,416001218,
practicalswift,2018-08-26T15:41:43Z,"@TheBlueMatt @promag Feedback addressed (added two commits to keep changes easy to review). \n\n@MarcoFalke @sipa @Sjors Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-416047812,416047812,
MarcoFalke,2018-08-26T16:10:55Z,"@practicalswift Could squash into two commits? First one is adding the `LOCK`s, the second one the annotations?",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-416049842,416049842,
practicalswift,2018-08-26T19:52:12Z,@MarcoFalke Done! Please re-review :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-416065625,416065625,
MarcoFalke,2018-08-27T02:04:21Z,utACK 75cb9c068570ec433f6ebc966f0771caa92efe81,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-416093978,416093978,
practicalswift,2018-08-30T14:57:52Z,"Rebased!\n\n@MarcoFalke @promag  - please re-review your utACK:s :-)",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-417350282,417350282,
DrahtBot,2018-09-21T13:30:08Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14498 (rpcwallet: listsentbyaddress RPC by mrwhythat)\n* #14437 (Refactor: Start to separate wallet from node by ryanofsky)\n* #14144 (Refactoring: Clarify code using encrypted_batch in CWallet by domob1812)\n* #13756 (wallet: -avoidreuse feature for improved privacy by kallewoof)\n* #9381 ",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-423531428,423531428,
practicalswift,2018-10-09T10:19:36Z,"Updated!\n\nAdded `GUARDED_BY(cs_wallet)` annotations also for `encrypted_batch`, `nWalletMaxVersion`, `m_max_keypool_index` and `nOrderPosNext`.\n\nRationale:\n* `AddKeyPubKeyWithDB(...)` reads `encrypted_batch` which potentially races with write in the same method\n* `IncOrderPosNext(...)` reads `nOrderPosNext` which potentially races with write in `BlockDisconnected(...)`\n* `LoadKeyPool",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-428139481,428139481,
practicalswift,2018-10-09T12:00:30Z,"Added `GUARDED_BY(cs_wallet)` for `setExternalKeyPool`, `mapKeyMetadata`, `m_script_metadata` and `setLockedCoins`.\n\nRationale:\n\n```\n$ git grep -E 'AssertLockHeld.*(setExternalKeyPool|mapKeyMetadata|m_script_metadata|setLockedCoins)' | sort | uniq -c\n      4 src/wallet/wallet.cpp:    AssertLockHeld(cs_wallet); // mapKeyMetadata\n      1 src/wallet/wallet.cpp:    AssertLockHeld(cs_wall",https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-428165010,428165010,
practicalswift,2018-10-24T08:35:59Z,@MarcoFalke @promag @TheBlueMatt Would you mind reviewing the updated version? :-),https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-432564655,432564655,
MarcoFalke,2018-10-24T08:52:19Z,utACK 69e7ee2dd8173597e766262fd9a8caae569ddf5e,https://github.com/bitcoin/bitcoin/pull/11634#issuecomment-432571144,432571144,
promag,2017-11-08T13:39:00Z,"Either:\n - lock once before the loop;\n - loop first with the lock to `mapWallet.find(hash)` for all `vWtx` and then loop again without the lock to `walletdb.WriteTx()`;\n - lock only the mapWallet.find(hash).",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r149669634,149669634,src/wallet/wallet.cpp
promag,2017-11-08T15:08:04Z,"This should be before the line above. Anyway, there is no need to lock this wallet since it's a fresh instance, unknown to the remaining system. Unless you are adding the lock because of other asserts and if so please commit them to justify this change?",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r149695551,149695551,src/wallet/wallet.cpp
practicalswift,2017-11-08T16:08:34Z,"Now moved before the line above. Without that lock we'll trigger Clang thread safety analysis warnings when #11634 is merged due to:\n```\nsrc/wallet/wallet.h:    std::map<uint256, CWalletTx> mapWallet GUARDED_BY(cs_wallet);\n```\n\nAs agreed upon in https://github.com/bitcoin/bitcoin/pull/11226#issuecomment-341496939 all guard/lock annotations are added in #11634 and all extra locking is sub",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r149714878,149714878,src/wallet/wallet.cpp
promag,2017-11-08T16:18:05Z,"> As agreed upon in #11226 (comment) all guard/lock annotations are added in #11634 and all extra locking is submitted as separate PR:s (such as this one)\n\nI think you swapped the PR numbers?",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r149717926,149717926,src/wallet/wallet.cpp
practicalswift,2017-11-08T21:55:52Z,"Yes, you're right - the annotations are added in #11226 :-)",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r149808364,149808364,src/wallet/wallet.cpp
TheBlueMatt,2017-12-12T22:38:14Z,"Given this is effectively just the wallet's constructor, might as well just take the lock further up and hold it the whole time.",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r156516635,156516635,src/wallet/wallet.cpp
TheBlueMatt,2017-12-13T19:43:39Z,Same here. Just add a cs_wallet lock for the whole function.,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r156762393,156762393,src/wallet/wallet.h
MarcoFalke,2018-03-11T22:12:31Z,"Note that `LoadWallet` takes `LOCK2(cs_main, cs_wallet)`, so taking `cs_wallet` before `cs_main` leads to a deadlock in case another thread takes `cs_main` and then `cs_wallet`, no?",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r173671944,173671944,src/wallet/wallet.cpp
practicalswift,2018-03-12T15:31:23Z,"@TheBlueMatt Moving it further up will make the scope of the `walletInstance->cs_wallet` lock cover the `ScanForWalletTransactions` call. `ScanForWalletTransactions` locks `cs_main` giving us the lock order:\n* 1. `cs_wallet`\n* 2. `cs_main`\n\nThis is a potential deadlock given that the opposite lock order is used extensively:\n\n```\n$ git grep ""LOCK2(cs_main,.*cs_wallet);"" | wc -l\n89\",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r173839102,173839102,src/wallet/wallet.cpp
practicalswift,2018-03-12T15:32:39Z,Thanks. Now fixed. See https://github.com/bitcoin/bitcoin/pull/11634#discussion_r173839102.,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r173839618,173839618,src/wallet/wallet.cpp
promag,2018-03-14T21:20:26Z,"I believe this lock is not necessary, all callers have the lock already.",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r174613850,174613850,src/wallet/wallet.cpp
promag,2018-03-14T21:23:56Z,A solution to that is to also lock cs_main.. but meh,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r174614728,174614728,src/wallet/wallet.cpp
promag,2018-03-14T23:41:55Z,"Unnecessary, callers of `GetAvailableCredit` already have the lock.",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r174642185,174642185,src/wallet/wallet.cpp
promag,2018-03-14T23:42:45Z,"Unnecessary, callers of `GetAvailableWatchOnlyCredit` already have the lock.",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r174642306,174642306,src/wallet/wallet.cpp
practicalswift,2018-03-15T07:03:56Z,Is `pcoin->pwallet->cs_wallet == pwallet->cs_wallet` guaranteed?,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r174691763,174691763,src/wallet/wallet.cpp
promag,2018-03-15T12:02:05Z,"Yes, otherwise we have a big problem I think ðŸ˜› ",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r174759032,174759032,src/wallet/wallet.cpp
practicalswift,2018-03-15T14:08:40Z,Unfortunately Clang's thread-safety analysis does not seem to understand that :-(,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r174794351,174794351,src/wallet/wallet.cpp
practicalswift,2018-03-19T07:51:29Z,@promag I think I'm unable to resolve this. Are you able to make this work with `EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)` on `CWalletTx::GetAvailableCredit` when compiling with Clang's thread-safety analysis enabled?,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r175351144,175351144,src/wallet/wallet.cpp
practicalswift,2018-03-19T07:52:11Z,"@promag See above. In theory you're right, but I've been unable to convince Clang's thread-safety analysis that so is the case in practice. See comment above. I might need some help here :-)",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r175351257,175351257,src/wallet/wallet.cpp
MarcoFalke,2018-04-09T13:24:33Z,Why remove the initialization?,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r180092360,180092360,src/wallet/wallet.h
practicalswift,2018-04-09T13:36:11Z,"Ouch, that was not the intention. Now fixed. Thanks for noticing. Please re-review.",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r180095810,180095810,src/wallet/wallet.h
MarcoFalke,2018-05-29T23:39:37Z,All those are redundant to the header,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r191606687,191606687,src/wallet/wallet.cpp
MarcoFalke,2018-08-13T13:10:59Z,Agree with @promag . We wouldn't want to add LOCKs just to please a static analyser that isn't smart enough to figure out the lock is already taken.,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r209602194,209602194,src/wallet/wallet.cpp
promag,2018-10-24T09:03:43Z,No annotation requires this lock right?,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r227701350,227701350,src/wallet/wallet.cpp
practicalswift,2018-10-24T09:28:53Z,"Both `cs_main` and `walletInstance->cs_wallet` are required from what I can tell.\n\nRemoving that lock results in the following:\n\n```\nwallet/wallet.cpp:4104:28: error: calling function 'FindForkInGlobalIndex' requires holding mutex 'cs_main' exclusively [-Werror,-Wthread-safety-analysis]\n            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n                          ",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r227710770,227710770,src/wallet/wallet.cpp
promag,2018-10-24T09:37:33Z,"Right, the new annotations..\n\nIt could make sense to avoid calling `uiInterface.LoadWallet()` with the lock held.",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r227714968,227714968,src/wallet/wallet.cpp
practicalswift,2018-10-24T09:56:18Z,"@promag Ah, now I follow. Suggested fix below. What do you think?\n\n```diff\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\nindex 29014790e..2deeb9c42 100644\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -4093,7 +4093,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     // Try to top up keypool. No-op if the wallet is lock",https://github.com/bitcoin/bitcoin/pull/11634#discussion_r227721639,227721639,src/wallet/wallet.cpp
promag,2018-10-24T10:08:00Z,I think that currently there is no harm in calling `uiInterface.LoadWallet()` with the lock held but if it's not necessary then I wouldn't change that. The diff looks ok.,https://github.com/bitcoin/bitcoin/pull/11634#discussion_r227725517,227725517,src/wallet/wallet.cpp
