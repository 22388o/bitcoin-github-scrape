[
  {
    "sha": "1c7e25db0c898abc9968ab487b254454b709e628",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzdlMjVkYjBjODk4YWJjOTk2OGFiNDg3YjI1NDQ1NGI3MDllNjI4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-02T08:16:20Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-09T09:58:32Z"
      },
      "message": "wallet: Add missing locks",
      "tree": {
        "sha": "221496d7fb4a03d41afa05fc27ec567d8f1b6269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/221496d7fb4a03d41afa05fc27ec567d8f1b6269"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c7e25db0c898abc9968ab487b254454b709e628",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c7e25db0c898abc9968ab487b254454b709e628",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c7e25db0c898abc9968ab487b254454b709e628",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c7e25db0c898abc9968ab487b254454b709e628/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d1417430c829a0c21bf5a2fe4a5b2f592a9423f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d1417430c829a0c21bf5a2fe4a5b2f592a9423f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d1417430c829a0c21bf5a2fe4a5b2f592a9423f"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "34d6e1b87ceeecc4746dc99ea8f44cc81c54a7e1",
        "filename": "src/wallet/test/psbt_wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c7e25db0c898abc9968ab487b254454b709e628/src/wallet/test/psbt_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c7e25db0c898abc9968ab487b254454b709e628/src/wallet/test/psbt_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/psbt_wallet_tests.cpp?ref=1c7e25db0c898abc9968ab487b254454b709e628",
        "patch": "@@ -17,6 +17,8 @@ BOOST_FIXTURE_TEST_SUITE(psbt_wallet_tests, WalletTestingSetup)\n \n BOOST_AUTO_TEST_CASE(psbt_updater_test)\n {\n+    LOCK(m_wallet.cs_wallet);\n+\n     // Create prevtxs and add to wallet\n     CDataStream s_prev_tx1(ParseHex(\"0200000000010158e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd7501000000171600145f275f436b09a8cc9a2eb2a2f528485c68a56323feffffff02d8231f1b0100000017a914aed962d6654f9a2b36608eb9d64d2b260db4f1118700c2eb0b0000000017a914b7f5faf40e3d40a5a459b1db3535f2b72fa921e88702483045022100a22edcc6e5bc511af4cc4ae0de0fcd75c7e04d8c1c3a8aa9d820ed4b967384ec02200642963597b9b1bc22c75e9f3e117284a962188bf5e8a74c895089046a20ad770121035509a48eb623e10aace8bfd0212fdb8a8e5af3c94b0b133b95e114cab89e4f7965000000\"), SER_NETWORK, PROTOCOL_VERSION);\n     CTransactionRef prev_tx1;"
      },
      {
        "sha": "29014790e93d801845e630410827ddbd93cdd389",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c7e25db0c898abc9968ab487b254454b709e628/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c7e25db0c898abc9968ab487b254454b709e628/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1c7e25db0c898abc9968ab487b254454b709e628",
        "patch": "@@ -4093,7 +4093,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     // Try to top up keypool. No-op if the wallet is locked.\n     walletInstance->TopUpKeyPool();\n \n-    LOCK(cs_main);\n+    LOCK2(cs_main, walletInstance->cs_wallet);\n \n     CBlockIndex *pindexRescan = chainActive.Genesis();\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n@@ -4178,7 +4178,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(const std::string& name,\n     walletInstance->SetBroadcastTransactions(gArgs.GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n \n     {\n-        LOCK(walletInstance->cs_wallet);\n         walletInstance->WalletLogPrintf(\"setKeyPool.size() = %u\\n\",      walletInstance->GetKeyPoolSize());\n         walletInstance->WalletLogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n         walletInstance->WalletLogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());"
      }
    ]
  },
  {
    "sha": "dee42927c95549633e8d722be4f64b9d55cd3966",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWU0MjkyN2M5NTU0OTYzM2U4ZDcyMmJlNGY2NGI5ZDU1Y2QzOTY2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-26T19:48:03Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-09T09:58:32Z"
      },
      "message": "wallet: Add Clang thread safety analysis annotations",
      "tree": {
        "sha": "590b0f4e90190b61386bd0a1e7cc4eb72ef65c75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/590b0f4e90190b61386bd0a1e7cc4eb72ef65c75"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dee42927c95549633e8d722be4f64b9d55cd3966",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dee42927c95549633e8d722be4f64b9d55cd3966",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dee42927c95549633e8d722be4f64b9d55cd3966",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dee42927c95549633e8d722be4f64b9d55cd3966/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c7e25db0c898abc9968ab487b254454b709e628",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c7e25db0c898abc9968ab487b254454b709e628",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c7e25db0c898abc9968ab487b254454b709e628"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 27,
      "deletions": 17
    },
    "files": [
      {
        "sha": "84079fdc3c2dcd624beac5b577fda8e804b96322",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dee42927c95549633e8d722be4f64b9d55cd3966/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dee42927c95549633e8d722be4f64b9d55cd3966/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=dee42927c95549633e8d722be4f64b9d55cd3966",
        "patch": "@@ -103,7 +103,7 @@ static WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_R\n }\n \n //! Construct wallet TxOut struct.\n-static WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth) EXCLUSIVE_LOCKS_REQUIRED(cs_main, wallet.cs_wallet)\n {\n     WalletTxOut result;\n     result.txout = wtx.tx->vout[n];"
      },
      {
        "sha": "86c371ffc04cc13d8a0e12058b5d57694a29ce65",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dee42927c95549633e8d722be4f64b9d55cd3966/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dee42927c95549633e8d722be4f64b9d55cd3966/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dee42927c95549633e8d722be4f64b9d55cd3966",
        "patch": "@@ -1121,7 +1121,7 @@ struct tallyitem\n     }\n };\n \n-static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;"
      },
      {
        "sha": "63b7aeb74b809b7cc63fc380340c857674d6f911",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dee42927c95549633e8d722be4f64b9d55cd3966/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dee42927c95549633e8d722be4f64b9d55cd3966/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dee42927c95549633e8d722be4f64b9d55cd3966",
        "patch": "@@ -460,7 +460,11 @@ class CWalletTx : public CMerkleTx\n     CAmount GetDebit(const isminefilter& filter) const;\n     CAmount GetCredit(const isminefilter& filter) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetImmatureCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    CAmount GetAvailableCredit(bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n+    // annotation \"EXCLUSIVE_LOCKS_REQUIRED(cs_main, pwallet->cs_wallet)\". The\n+    // annotation \"NO_THREAD_SAFETY_ANALYSIS\" was temporarily added to avoid\n+    // having to resolve the issue of member access into incomplete type CWallet.\n+    CAmount GetAvailableCredit(bool fUseCache=true, const isminefilter& filter=ISMINE_SPENDABLE) const NO_THREAD_SAFETY_ANALYSIS;\n     CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetChange() const;\n \n@@ -492,7 +496,13 @@ class CWalletTx : public CMerkleTx\n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n     bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    std::set<uint256> GetConflicts() const;\n+    // TODO: Remove \"NO_THREAD_SAFETY_ANALYSIS\" and replace it with the correct\n+    // annotation \"EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\". The annotation\n+    // \"NO_THREAD_SAFETY_ANALYSIS\" was temporarily added to avoid having to\n+    // resolve the issue of member access into incomplete type CWallet. Note\n+    // that we still have the runtime check \"AssertLockHeld(pwallet->cs_wallet)\"\n+    // in place.\n+    std::set<uint256> GetConflicts() const NO_THREAD_SAFETY_ANALYSIS;\n };\n \n class COutput\n@@ -609,9 +619,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * mutated transactions where the mutant gets mined).\n      */\n     typedef std::multimap<COutPoint, uint256> TxSpends;\n-    TxSpends mapTxSpends;\n-    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid);\n-    void AddToSpends(const uint256& wtxid);\n+    TxSpends mapTxSpends GUARDED_BY(cs_wallet);\n+    void AddToSpends(const COutPoint& outpoint, const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void AddToSpends(const uint256& wtxid) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Add a transaction to the wallet, or update it.  pIndex and posInBlock should\n@@ -632,9 +642,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void MarkConflicted(const uint256& hashBlock, const uint256& hashTx);\n \n     /* Mark a transaction's inputs dirty, thus forcing the outputs to be recomputed */\n-    void MarkInputsDirty(const CTransactionRef& tx);\n+    void MarkInputsDirty(const CTransactionRef& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>);\n+    void SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator>) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected/ScanForWalletTransactions.\n      * Should be called with pindexBlock and posInBlock if this is for a transaction that is included in a block. */\n@@ -653,7 +663,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::atomic<uint64_t> m_wallet_flags{0};\n \n-    int64_t nTimeFirstKey = 0;\n+    int64_t nTimeFirstKey GUARDED_BY(cs_wallet) = 0;\n \n     /**\n      * Private version of AddWatchOnly method which does not accept a\n@@ -709,7 +719,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * if they are not ours\n      */\n     bool SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAmount& nTargetValue, std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet,\n-                    const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n+                    const CCoinControl& coin_control, CoinSelectionParams& coin_selection_params, bool& bnb_used) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /** Get a name for this wallet for logging/debugging purposes.\n      */\n@@ -739,7 +749,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n         encrypted_batch = nullptr;\n     }\n \n-    std::map<uint256, CWalletTx> mapWallet;\n+    std::map<uint256, CWalletTx> mapWallet GUARDED_BY(cs_wallet);\n \n     typedef std::multimap<int64_t, CWalletTx*> TxItems;\n     TxItems wtxOrdered;\n@@ -769,7 +779,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * Find non-change parent output.\n      */\n-    const CTxOut& FindNonChangeParentOutput(const CTransaction& tx, int output) const;\n+    const CTxOut& FindNonChangeParentOutput(const CTransaction& tx, int output) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Shuffle and select coins until nTargetValue is reached while avoiding\n@@ -780,7 +790,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<OutputGroup> groups,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -856,7 +866,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n-    void LoadToWallet(const CWalletTx& wtxIn);\n+    void LoadToWallet(const CWalletTx& wtxIn) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n@@ -1000,7 +1010,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n     //! Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n+    std::set<uint256> GetConflicts(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Check if a given transaction has any of its outputs spent by another transaction in the wallet\n     bool HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -1198,6 +1208,6 @@ class WalletRescanReserver\n // Use DummySignatureCreator, which inserts 71 byte signatures everywhere.\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig = false);\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig = false) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet);\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig = false);\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "37b2538c2df3643f7eab1f6661b9995bdcbf214a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2IyNTM4YzJkZjM2NDNmN2VhYjFmNjY2MWI5OTk1YmRjYmYyMTRh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-09T10:03:01Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-09T10:12:27Z"
      },
      "message": "Add GUARDED_BY(cs_wallet) for encrypted_batch, nWalletMaxVersion, m_max_keypool_index and nOrderPosNext\n\n* AddKeyPubKeyWithDB(...) reads encrypted_batch which potentially races with write in the same method.\n* IncOrderPosNext(...) reads nOrderPosNext which potentially races with write in BlockDisconnected(...).\n* LoadKeyPool(...) reads m_max_keypool_index which potentially races with write in BlockDisconnected(...).\n* LoadMinVersion(...) reads nWalletMaxVersion which potentially races with write in BlockDisconnected(...).",
      "tree": {
        "sha": "ff80b7c0e3af3c2c2657ef461527f7389443728b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff80b7c0e3af3c2c2657ef461527f7389443728b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37b2538c2df3643f7eab1f6661b9995bdcbf214a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37b2538c2df3643f7eab1f6661b9995bdcbf214a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37b2538c2df3643f7eab1f6661b9995bdcbf214a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37b2538c2df3643f7eab1f6661b9995bdcbf214a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dee42927c95549633e8d722be4f64b9d55cd3966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dee42927c95549633e8d722be4f64b9d55cd3966",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dee42927c95549633e8d722be4f64b9d55cd3966"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d2c8116d94f9618d10ee9ebe1d4bf962d2d6bc18",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37b2538c2df3643f7eab1f6661b9995bdcbf214a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37b2538c2df3643f7eab1f6661b9995bdcbf214a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=37b2538c2df3643f7eab1f6661b9995bdcbf214a",
        "patch": "@@ -601,13 +601,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::mutex mutexScanning;\n     friend class WalletRescanReserver;\n \n-    WalletBatch *encrypted_batch = nullptr;\n+    WalletBatch *encrypted_batch GUARDED_BY(cs_wallet) = nullptr;\n \n     //! the current wallet version: clients below this version are not able to load the wallet\n     int nWalletVersion = FEATURE_BASE;\n \n     //! the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n-    int nWalletMaxVersion = FEATURE_BASE;\n+    int nWalletMaxVersion GUARDED_BY(cs_wallet) = FEATURE_BASE;\n \n     int64_t nNextResend = 0;\n     int64_t nLastResend = 0;\n@@ -659,7 +659,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n     std::set<int64_t> set_pre_split_keypool;\n-    int64_t m_max_keypool_index = 0;\n+    int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n     std::atomic<uint64_t> m_wallet_flags{0};\n \n@@ -754,7 +754,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     typedef std::multimap<int64_t, CWalletTx*> TxItems;\n     TxItems wtxOrdered;\n \n-    int64_t nOrderPosNext = 0;\n+    int64_t nOrderPosNext GUARDED_BY(cs_wallet) = 0;\n     uint64_t nAccountingEntryNumber = 0;\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;"
      }
    ]
  },
  {
    "sha": "69e7ee2dd8173597e766262fd9a8caae569ddf5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWU3ZWUyZGQ4MTczNTk3ZTc2NjI2MmZkOWE4Y2FhZTU2OWRkZjVl",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-09T11:57:46Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-09T13:04:26Z"
      },
      "message": "Add GUARDED_BY(cs_wallet) for setExternalKeyPool, mapKeyMetadata, m_script_metadata and setLockedCoins",
      "tree": {
        "sha": "3413c28b6617f8704e2987492f3426a0b1dbf427",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3413c28b6617f8704e2987492f3426a0b1dbf427"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69e7ee2dd8173597e766262fd9a8caae569ddf5e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69e7ee2dd8173597e766262fd9a8caae569ddf5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69e7ee2dd8173597e766262fd9a8caae569ddf5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69e7ee2dd8173597e766262fd9a8caae569ddf5e/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37b2538c2df3643f7eab1f6661b9995bdcbf214a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37b2538c2df3643f7eab1f6661b9995bdcbf214a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37b2538c2df3643f7eab1f6661b9995bdcbf214a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e6e23ab2472b064024e2b81277a21882031a520b",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69e7ee2dd8173597e766262fd9a8caae569ddf5e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69e7ee2dd8173597e766262fd9a8caae569ddf5e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=69e7ee2dd8173597e766262fd9a8caae569ddf5e",
        "patch": "@@ -657,7 +657,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::set<int64_t> setInternalKeyPool;\n-    std::set<int64_t> setExternalKeyPool;\n+    std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_wallet);\n     std::set<int64_t> set_pre_split_keypool;\n     int64_t m_max_keypool_index GUARDED_BY(cs_wallet) = 0;\n     std::map<CKeyID, int64_t> m_pool_key_to_index;\n@@ -726,13 +726,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     const std::string& GetName() const { return m_name; }\n \n     void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void MarkPreSplitKeys();\n+    void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     // Map from Key ID to key metadata.\n-    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_wallet);\n \n     // Map from Script ID to key metadata (for watch-only keys).\n-    std::map<CScriptID, CKeyMetadata> m_script_metadata;\n+    std::map<CScriptID, CKeyMetadata> m_script_metadata GUARDED_BY(cs_wallet);\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -759,7 +759,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n \n-    std::set<COutPoint> setLockedCoins;\n+    std::set<COutPoint> setLockedCoins GUARDED_BY(cs_wallet);\n \n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n "
      }
    ]
  }
]