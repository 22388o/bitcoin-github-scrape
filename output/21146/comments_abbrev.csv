DrahtBot,2021-02-11 05:56:04,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20833 (rpc/validation: enable packages through testmempoolaccept by glozow)\n\nIf you consider this pull request importan",https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-777219401,777219401,
ariard,2021-02-12 14:02:11,"Do you think you can take the following diff in the doc followup commit ?\n\n```\ndiff --git a/src/rpc/rawtransaction.cpp b/src/rpc/rawtransaction.cpp\nindex ac4240447..f8f4a6d94 100644\n--- a/src/rpc/rawtransaction.cpp\n+++ b/src/rpc/rawtransaction.cpp\n@@ -896,7 +896,7 @@ static RPCHelpMan testmempoolaccept()\n                         {\n                             {RPCResult::Type::ST",https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-778213317,778213317,
glozow,2021-02-20 17:57:34,Rebased,https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-782723514,782723514,
glozow,2021-02-22 17:49:13,Thanks for the review @jnewbery! Addressed your comments. Added some sentences about the uncaching behavior to https://github.com/bitcoin/bitcoin/commit/acef823e895b80fd7f4c2f5a44c3470fe46c1a6a commit log. ,https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-783552771,783552771,
achow101,2021-02-22 19:34:15,ACK acef823e895b80fd7f4c2f5a44c3470fe46c1a6a,https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-783619963,783619963,
glozow,2021-02-25 17:51:24,"I'm working on #20833 and realized I don't need to keep `m_view` and `m_viewmempool` connected for it to work 😛 so I took out the 3rd commit (_[validation] keep m_view->m_viewmempool connected_). @ariard you might find this PR a bit more acceptable now :). I'll try to add https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-778213317 to a different PR that's more relevant to the RPC code.\n",https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-786086551,786086551,
glozow,2021-03-02 18:27:08,"I still think this would be a nice change but since I don't need this for #20833 anymore, I'm closing this to focus on that instead.",https://github.com/bitcoin/bitcoin/pull/21146#issuecomment-789116795,789116795,
glozow,2021-02-11 22:20:07,☝️ this is the main change 👆 ,https://github.com/bitcoin/bitcoin/pull/21146#discussion_r574866661,574866661,src/validation.cpp
jnewbery,2021-02-22 14:25:51,"You switch `m_view.SetBackend(m_dummy)` to `m_viewmempool.SetBackend(m_dummy)` in commit _[validation] disconnect m_viewmempool from coins cache when unnecessary_.\n\nI think perhaps in that commit you should just add `m_viewmempool.SetBackend(m_dummy)`, and then in the subsequent commit (_[validation] keep m_view->m_viewmempool connected_), you should remove `m_view.SetBackend(m_dummy)`. That k",https://github.com/bitcoin/bitcoin/pull/21146#discussion_r580289237,580289237,src/validation.cpp
glozow,2021-02-22 17:33:22,Good point! Done in the last push,https://github.com/bitcoin/bitcoin/pull/21146#discussion_r580443711,580443711,src/validation.cpp
ariard,2021-02-23 17:54:46,"I would rather keep coin cache cleanup at this location. After this change, it's spread in two locations : in case of success evaluation in `AcceptSingleTransaction`, in case of failure in `MemPoolAccept` destructor. A reviewer has to read both locations now. \n\nFurther, it's harder to qualify that cleanup is reserved for success path in `AcceptSingleTransaction`, considering that `MemPoolAccep",https://github.com/bitcoin/bitcoin/pull/21146#discussion_r581258456,581258456,src/validation.cpp
glozow,2021-02-23 19:31:39,"> After this change, it's spread in two locations : in case of success evaluation in AcceptSingleTransaction, in case of failure in MemPoolAccept destructor. \n\nNot really. The only location a reviewer has to check is wherever they _want_ to keep the coins in cache. Also, the change here means that if someone forgets to consider uncaching, it defaults to uncache all. This is safer.\n\n\n> Al",https://github.com/bitcoin/bitcoin/pull/21146#discussion_r581329523,581329523,src/validation.cpp
ariard,2021-02-24 13:14:57,"> Not really. The only location a reviewer has to check is wherever they want to keep the coins in cache. \n\nDepends what you're willingly to convince yourself by reviewing. Assuming uncaching  in case of failures is the correct behavior, looking at the proposed changes, you have to a) verify that uncaching code is well-implemented in `MemPoolAccept` destructor, b) identify that caching conserv",https://github.com/bitcoin/bitcoin/pull/21146#discussion_r581948585,581948585,src/validation.cpp
jnewbery,2021-02-24 16:41:05,"> The two possible callers of MemPoolAccept are ATMP and ProcessNewPackage They invoke it like this:\n> \n> `const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);`\n> \n> afaik it goes out of scope immediately, before the lock is released.\n\nI believe you're right. In that expression, `MemPoolAccept()` is a temporary, and the lifetime r",https://github.com/bitcoin/bitcoin/pull/21146#discussion_r582118131,582118131,src/validation.cpp
jnewbery,2021-02-24 16:43:05,You can const this if you want,https://github.com/bitcoin/bitcoin/pull/21146#discussion_r582119695,582119695,src/validation.cpp
jnewbery,2021-02-24 16:43:52,"Consider removing ""After we've (potentially) uncached entries"". That was referring to the line above. Now that it's removed, that part of the comment is not particularly relevant here.",https://github.com/bitcoin/bitcoin/pull/21146#discussion_r582120303,582120303,src/validation.cpp
glozow,2021-02-25 17:40:02,I always wanna const,https://github.com/bitcoin/bitcoin/pull/21146#discussion_r583033965,583033965,src/validation.cpp
