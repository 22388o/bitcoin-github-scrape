[
  {
    "sha": "56cfa1c127ae44c39ff374b9e90ff34c4bb43713",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmNmYTFjMTI3YWU0NGMzOWZmMzc0YjllOTBmZjM0YzRiYjQzNzEz",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T14:23:04Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-20T16:31:25Z"
      },
      "message": "doc/style followups in MempoolAcceptResult",
      "tree": {
        "sha": "52ff3d6ff7ff5243bbb76fa51aa366d4687609d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52ff3d6ff7ff5243bbb76fa51aa366d4687609d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56cfa1c127ae44c39ff374b9e90ff34c4bb43713",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56cfa1c127ae44c39ff374b9e90ff34c4bb43713",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56cfa1c127ae44c39ff374b9e90ff34c4bb43713",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56cfa1c127ae44c39ff374b9e90ff34c4bb43713/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "828bb776d29cbdfad3937ba100c428e3244c652f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/828bb776d29cbdfad3937ba100c428e3244c652f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/828bb776d29cbdfad3937ba100c428e3244c652f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c69b40bb72f0a62af32bfe2061d92cb40d017556",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56cfa1c127ae44c39ff374b9e90ff34c4bb43713/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56cfa1c127ae44c39ff374b9e90ff34c4bb43713/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=56cfa1c127ae44c39ff374b9e90ff34c4bb43713",
        "patch": "@@ -196,14 +196,14 @@ struct MempoolAcceptResult {\n         VALID, //!> Fully validated, valid.\n         INVALID, //!> Invalid.\n     };\n-    ResultType m_result_type;\n-    TxValidationState m_state;\n+    const ResultType m_result_type;\n+    const TxValidationState m_state;\n \n     // The following fields are only present when m_result_type = ResultType::VALID\n     /** Mempool transactions replaced by the tx per BIP 125 rules. */\n-    std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n-    /** Raw base fees. */\n-    std::optional<CAmount> m_base_fees;\n+    const std::optional<std::list<CTransactionRef>> m_replaced_transactions;\n+    /** Raw base fees in satoshis. */\n+    const std::optional<CAmount> m_base_fees;\n \n     /** Constructor for failure case */\n     explicit MempoolAcceptResult(TxValidationState state)\n@@ -214,7 +214,7 @@ struct MempoolAcceptResult {\n \n     /** Constructor for success case */\n     explicit MempoolAcceptResult(std::list<CTransactionRef>&& replaced_txns, CAmount fees)\n-        : m_result_type(ResultType::VALID), m_state(TxValidationState{}),\n+        : m_result_type(ResultType::VALID), m_state{},\n         m_replaced_transactions(std::move(replaced_txns)), m_base_fees(fees) {}\n };\n "
      }
    ]
  },
  {
    "sha": "8f52c6e3c959489ef3469b68d64147f1af0e5065",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjUyYzZlM2M5NTk0ODllZjM0NjliNjhkNjQxNDdmMWFmMGU1MDY1",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-20T17:01:03Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-25T17:26:44Z"
      },
      "message": "[validation] disconnect m_viewmempool from coins cache when unnecessary\n\nThe hierarchy of CoinsViews here is:\nm_view -> m_viewmempool -> chainstate coins cache\n\nTo prevent DoS, we want to limit access to coins cache and ensure we\nuncache coins if the transaction turns out to be invalid.  When\nm_viewmempool is always connected to the coins cache, it's harder reason\nabout this. We could accidentally access the coins cache if we use\nm_viewmempool for something.",
      "tree": {
        "sha": "037a77e5fc9d430facb86e7188c498297460901b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/037a77e5fc9d430facb86e7188c498297460901b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f52c6e3c959489ef3469b68d64147f1af0e5065",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f52c6e3c959489ef3469b68d64147f1af0e5065",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f52c6e3c959489ef3469b68d64147f1af0e5065",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f52c6e3c959489ef3469b68d64147f1af0e5065/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56cfa1c127ae44c39ff374b9e90ff34c4bb43713",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56cfa1c127ae44c39ff374b9e90ff34c4bb43713",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56cfa1c127ae44c39ff374b9e90ff34c4bb43713"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 6,
      "deletions": 2
    },
    "files": [
      {
        "sha": "aa9c95b8688d80a38bb3ad63438f36d1d1a49d2d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f52c6e3c959489ef3469b68d64147f1af0e5065/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f52c6e3c959489ef3469b68d64147f1af0e5065/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8f52c6e3c959489ef3469b68d64147f1af0e5065",
        "patch": "@@ -465,7 +465,8 @@ namespace {\n class MemPoolAccept\n {\n public:\n-    explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate) : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&active_chainstate.CoinsTip(), m_pool), m_active_chainstate(active_chainstate),\n+    explicit MemPoolAccept(CTxMemPool& mempool, CChainState& active_chainstate)\n+        : m_pool(mempool), m_view(&m_dummy), m_viewmempool(&m_dummy, m_pool), m_active_chainstate(active_chainstate),\n         m_limit_ancestors(gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT)),\n         m_limit_ancestor_size(gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT)*1000),\n         m_limit_descendants(gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT)),\n@@ -663,7 +664,9 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     assert(std::addressof(::ChainstateActive().CoinsTip()) == std::addressof(m_active_chainstate.CoinsTip()));\n     const CCoinsViewCache& coins_cache = m_active_chainstate.CoinsTip();\n-    // do all inputs exist?\n+    // Check that inputs exist and bring the coins into m_view.\n+    // This should be the only section that accesses the ChainState coins cache.\n+    m_viewmempool.SetBackend(m_active_chainstate.CoinsTip());\n     for (const CTxIn& txin : tx.vin) {\n         if (!coins_cache.HaveCoinInCache(txin.prevout)) {\n             coins_to_uncache.push_back(txin.prevout);\n@@ -691,6 +694,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // we have all inputs cached now, so switch back to dummy (to protect\n     // against bugs where we pull more inputs from disk that miss being added\n     // to coins_to_uncache)\n+    m_viewmempool.SetBackend(m_dummy);\n     m_view.SetBackend(m_dummy);\n \n     // Only accept BIP68 sequence locked transactions that can be mined in the next"
      }
    ]
  },
  {
    "sha": "aeaf5407c3870a1fd824209b0d0a2630c1fb3493",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWFmNTQwN2MzODcwYTFmZDgyNDIwOWIwZDBhMjYzMGMxZmIzNDkz",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-11T14:22:43Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gzhao408@berkeley.edu",
        "date": "2021-02-25T17:26:44Z"
      },
      "message": "[validation] make MemPoolAccept responsible for uncaching coins\n\nMemPoolAccept should clean up after itself (woohoo RAII), uncache all\ncoins by default, and explicitly decide to keep them on specific\noccasions (i.e. when tx is submitted to mempool). This is safer and\neasier to reason about than leaving it up to the caller.\nAlso allows us to make ATMPArgs always const.\n\nNote: with this commit, we always uncache coins after a test_accept\nregardless of validation results. Previously, we uncached whenever a tx\nfailed validation.",
      "tree": {
        "sha": "908cab40190d732003eac6a3bc2f8be0d55f9c03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/908cab40190d732003eac6a3bc2f8be0d55f9c03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeaf5407c3870a1fd824209b0d0a2630c1fb3493",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeaf5407c3870a1fd824209b0d0a2630c1fb3493",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeaf5407c3870a1fd824209b0d0a2630c1fb3493",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeaf5407c3870a1fd824209b0d0a2630c1fb3493/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f52c6e3c959489ef3469b68d64147f1af0e5065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f52c6e3c959489ef3469b68d64147f1af0e5065",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f52c6e3c959489ef3469b68d64147f1af0e5065"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 29,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1dd624a79e5ea3884e4db68cf6f3816ae61e36de",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 26,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeaf5407c3870a1fd824209b0d0a2630c1fb3493/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeaf5407c3870a1fd824209b0d0a2630c1fb3493/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aeaf5407c3870a1fd824209b0d0a2630c1fb3493",
        "patch": "@@ -480,19 +480,21 @@ class MemPoolAccept\n         const CChainParams& m_chainparams;\n         const int64_t m_accept_time;\n         const bool m_bypass_limits;\n-        /*\n-         * Return any outpoints which were not previously present in the coins\n-         * cache, but were added as a result of validating the tx for mempool\n-         * acceptance. This allows the caller to optionally remove the cache\n-         * additions if the associated transaction ends up being rejected by\n-         * the mempool.\n-         */\n-        std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n     };\n \n     // Single transaction acceptance\n-    MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    MempoolAcceptResult AcceptSingleTransaction(const CTransactionRef& ptx, const ATMPArgs& args) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    // Uncache all coins in m_coins_to_uncache. If the tx is accepted to mempool,\n+    // MemPoolAccept should clear m_coins_to_uncache before destruction.\n+    ~MemPoolAccept()\n+    {\n+        assert(std::addressof(::ChainstateActive()) == std::addressof(m_active_chainstate));\n+        for (const COutPoint& hashTx : m_coins_to_uncache) {\n+            m_active_chainstate.CoinsTip().Uncache(hashTx);\n+        }\n+    }\n \n private:\n     // All the intermediate state that gets passed between the various levels\n@@ -520,7 +522,7 @@ class MemPoolAccept\n     // Looks up inputs, calculates feerate, considers replacement, evaluates\n     // package limits, etc. As this function can be invoked for \"free\" by a peer,\n     // only tests that are fast should be done here (to avoid CPU DoS).\n-    bool PreChecks(ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n+    bool PreChecks(const ATMPArgs& args, Workspace& ws) EXCLUSIVE_LOCKS_REQUIRED(cs_main, m_pool.cs);\n \n     // Run the script checks using our policy flags. As this can be slow, we should\n     // only invoke this on transactions that have otherwise passed policy checks.\n@@ -559,6 +561,16 @@ class MemPoolAccept\n \n     CChainState& m_active_chainstate;\n \n+    /**\n+    * Track any outpoints which were not previously present in the coins\n+    * cache, but were added as a result of validating the tx for mempool\n+    * acceptance. Unless the tx is accepted to mempool (where it would be\n+    * beneficial to keep the coins in cache), uncache the coins to prevent\n+    * memory DoS in case we receive a large number of invalid transactions\n+    * that attempt to overrun the in-memory coins cache.\n+    */\n+    std::vector<COutPoint> m_coins_to_uncache;\n+\n     // The package limits in effect at the time of invocation.\n     const size_t m_limit_ancestors;\n     const size_t m_limit_ancestor_size;\n@@ -568,7 +580,7 @@ class MemPoolAccept\n     size_t m_limit_descendant_size;\n };\n \n-bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n+bool MemPoolAccept::PreChecks(const ATMPArgs& args, Workspace& ws)\n {\n     const CTransactionRef& ptx = ws.m_ptx;\n     const CTransaction& tx = *ws.m_ptx;\n@@ -577,7 +589,6 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Copy/alias what we need out of args\n     const int64_t nAcceptTime = args.m_accept_time;\n     const bool bypass_limits = args.m_bypass_limits;\n-    std::vector<COutPoint>& coins_to_uncache = args.m_coins_to_uncache;\n \n     // Alias what we need out of ws\n     TxValidationState& state = ws.m_state;\n@@ -669,7 +680,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     m_viewmempool.SetBackend(m_active_chainstate.CoinsTip());\n     for (const CTxIn& txin : tx.vin) {\n         if (!coins_cache.HaveCoinInCache(txin.prevout)) {\n-            coins_to_uncache.push_back(txin.prevout);\n+            m_coins_to_uncache.push_back(txin.prevout);\n         }\n \n         // Note: this call may add txin.prevout to the coins cache\n@@ -1052,7 +1063,7 @@ bool MemPoolAccept::Finalize(const ATMPArgs& args, Workspace& ws)\n     return true;\n }\n \n-MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs& args)\n+MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, const ATMPArgs& args)\n {\n     AssertLockHeld(cs_main);\n     LOCK(m_pool.cs); // mempool \"read lock\" (held through GetMainSignals().TransactionAddedToMempool())\n@@ -1080,6 +1091,8 @@ MempoolAcceptResult MemPoolAccept::AcceptSingleTransaction(const CTransactionRef\n \n     GetMainSignals().TransactionAddedToMempool(ptx, m_pool.GetAndIncrementSequence());\n \n+    // Don't uncache coins when the transaction is accepted to mempool.\n+    m_coins_to_uncache.clear();\n     return MempoolAcceptResult(std::move(ws.m_replaced_transactions), ws.m_base_fees);\n }\n \n@@ -1092,21 +1105,11 @@ static MempoolAcceptResult AcceptToMemoryPoolWithTime(const CChainParams& chainp\n                                                       bool bypass_limits, bool test_accept)\n                                                       EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n-    std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, coins_to_uncache, test_accept };\n-\n+    const MemPoolAccept::ATMPArgs args { chainparams, nAcceptTime, bypass_limits, test_accept };\n     assert(std::addressof(::ChainstateActive()) == std::addressof(active_chainstate));\n     const MempoolAcceptResult result = MemPoolAccept(pool, active_chainstate).AcceptSingleTransaction(tx, args);\n-    if (result.m_result_type != MempoolAcceptResult::ResultType::VALID) {\n-        // Remove coins that were not present in the coins cache before calling ATMPW;\n-        // this is to prevent memory DoS in case we receive a large number of\n-        // invalid transactions that attempt to overrun the in-memory coins cache\n-        // (`CCoinsViewCache::cacheCoins`).\n \n-        for (const COutPoint& hashTx : coins_to_uncache)\n-            active_chainstate.CoinsTip().Uncache(hashTx);\n-    }\n-    // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n+    // Ensure our coins cache is still within its size limits\n     BlockValidationState state_dummy;\n     active_chainstate.FlushStateToDisk(chainparams, state_dummy, FlushStateMode::PERIODIC);\n     return result;"
      }
    ]
  }
]