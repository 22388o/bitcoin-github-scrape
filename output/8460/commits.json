[
  {
    "sha": "27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2Q1NmM4MmVmY2Y0NDdkM2UwZWJkYmI3ODcxMTllMzJkNWQ2MGQw",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-08-01T14:01:57Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-11-10T19:55:20Z"
      },
      "message": "Can pass buried soft fork parameters to regtest",
      "tree": {
        "sha": "5cf12f49c5349e32ec8595203d31dd2e23a04e65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cf12f49c5349e32ec8595203d31dd2e23a04e65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faec09bc7f03f2443e3f372b0175741a484a263b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faec09bc7f03f2443e3f372b0175741a484a263b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faec09bc7f03f2443e3f372b0175741a484a263b"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 69,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1e1d15ed7e8aef2b18db07096a2f57465a545ede",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -43,7 +43,7 @@ def __init__(self):\n     def setup_network(self):\n         # Must set the blockversion for this test\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3']],\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3', '-buriedsfparams=bip65:1351']],\n                                  binary=[self.options.testbinary])\n \n     def run_test(self):"
      },
      {
        "sha": "e71a058f81f2177edc3eab357494bc63a19adf79",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -19,8 +19,8 @@ def __init__(self):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\", \"-buriedsfparams=bip65:1351\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\", \"-buriedsfparams=bip65:1351\"]))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False"
      },
      {
        "sha": "1216cdbe31fefdffa042baa70a8e575a895f4a24",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -51,7 +51,7 @@ def __init__(self):\n     def setup_network(self):\n         # Must set the blockversion for this test\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=2']],\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=2', '-buriedsfparams=bip66:1251']],\n                                  binary=[self.options.testbinary])\n \n     def run_test(self):"
      },
      {
        "sha": "a7fff9c9bff395ad9e98a54bd086203de8bffdc4",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -19,8 +19,8 @@ def __init__(self):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\", '-buriedsfparams=bip66:1251']))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\", '-buriedsfparams=bip66:1251']))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False"
      },
      {
        "sha": "80591f952ab04253f77c724651ad5e484a811626",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -251,10 +251,10 @@ class CRegTestParams : public CChainParams {\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n-        consensus.BIP34Height = 100000000; // BIP34 has not activated on regtest (far in the future so block v1 are not rejected in tests)\n+        consensus.BIP34Height = 100000000; // Configurable with -buriedsfparams\n         consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 1351; // BIP65 activated on regtest (Used in rpc activation tests)\n-        consensus.BIP66Height = 1251; // BIP66 activated on regtest (Used in rpc activation tests)\n+        consensus.BIP65Height = 100000000;\n+        consensus.BIP66Height = 100000000;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -324,6 +324,24 @@ const CChainParams &Params() {\n     return *pCurrentParams;\n }\n \n+void CChainParams::UpdateBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight)\n+{\n+        if (deployment == Consensus::BIP34_HEIGHT_ACTIVE) {\n+                consensus.BIP34Height = nStartHeight;\n+        }\n+        if (deployment == Consensus::BIP65_HEIGHT_ACTIVE) {\n+                consensus.BIP65Height = nStartHeight;\n+        }\n+        if (deployment == Consensus::BIP66_HEIGHT_ACTIVE) {\n+                consensus.BIP66Height = nStartHeight;\n+        }\n+}\n+\n+void UpdateRegtestBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight)\n+{\n+    regTestParams.UpdateBuriedDeploymentParameters(deployment, nStartHeight);\n+}\n+\n CChainParams& Params(const std::string& chain)\n {\n     if (chain == CBaseChainParams::MAIN)"
      },
      {
        "sha": "b4eb1b075976f4cb32416e1d99e10f67eaff613f",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -73,6 +73,7 @@ class CChainParams\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n+    void UpdateBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight);\n protected:\n     CChainParams() {}\n \n@@ -98,6 +99,8 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n+void UpdateRegtestBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight);\n+\n /**\n  * @returns CChainParams for the given BIP70 chain name.\n  */"
      },
      {
        "sha": "754896b0d12b9ae6cdc01fcd64c36e093615a81d",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -21,6 +21,15 @@ enum DeploymentPos\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n \n+/** Block heights at which the buried deployments becomes active */\n+enum BuriedDeploymentPos\n+{\n+    BIP34_HEIGHT_ACTIVE,\n+    BIP65_HEIGHT_ACTIVE,\n+    BIP66_HEIGHT_ACTIVE,\n+    MAX_BURIED_DEPLOYMENTS\n+};\n+\n /**\n  * Struct for each individual consensus rule change using BIP9.\n  */"
      },
      {
        "sha": "e9334897a708922f15bf12c387ed45c1a61318f5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27d56c82efcf447d3e0ebdbb787119e32d5d60d0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "patch": "@@ -426,6 +426,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantcount=<n>\", strprintf(\"Do not accept transactions if any ancestor would have <n> or more in-mempool descendants (default: %u)\", DEFAULT_DESCENDANT_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n+        strUsage += HelpMessageOpt(\"-buriedsfparams=deployment:startHeight\", \"Use given start height for specified buried deployment (regtest-only)\");\n     }\n     string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n@@ -1032,6 +1033,35 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n+    if (!mapMultiArgs[\"-buriedsfparams\"].empty()) {\n+        // Allow overriding ism parameters for testing\n+        if (!chainparams.MineBlocksOnDemand()) {\n+            return InitError(\"Buried soft fork parameters may only be overridden on regtest.\");\n+        }\n+        std::map<string, Consensus::BuriedDeploymentPos> buriedDeployments;\n+        buriedDeployments.insert(std::make_pair(\"bip34\", Consensus::BIP34_HEIGHT_ACTIVE));\n+        buriedDeployments.insert(std::make_pair(\"bip65\", Consensus::BIP65_HEIGHT_ACTIVE));\n+        buriedDeployments.insert(std::make_pair(\"bip66\", Consensus::BIP66_HEIGHT_ACTIVE));\n+        const vector<string>& deployments = mapMultiArgs[\"-buriedsfparams\"];\n+        for (auto i : deployments) {\n+            std::vector<std::string> vDeploymentParams;\n+            boost::split(vDeploymentParams, i, boost::is_any_of(\":\"));\n+            if (vDeploymentParams.size() != 2) {\n+                return InitError(\"Buried soft fork parameters malformed, expecting bip:startHeight\");\n+            }\n+            int64_t nStartHeight;\n+            if (!ParseInt64(vDeploymentParams[1], &nStartHeight)) {\n+                return InitError(strprintf(\"Invalid nStartHeight (%s)\", vDeploymentParams[1]));\n+            }\n+\n+            auto found = buriedDeployments.find(vDeploymentParams[0]);\n+            if (found == buriedDeployments.end()) {\n+                return InitError(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n+            }\n+            UpdateRegtestBuriedDeploymentParameters(found->second, nStartHeight);\n+        }\n+    }\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     // Initialize elliptic curve code"
      }
    ]
  },
  {
    "sha": "9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDM3YTdhOTRlZmE5NjdjOGZhZDk1YTJiYWE3NmRkNTA4OGQ5ZTdl",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-08-07T22:53:53Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-11-10T19:55:20Z"
      },
      "message": "Revert buriedsf python tests to previous height",
      "tree": {
        "sha": "2239d997223fcff6a07abd01aae61025e672fa73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2239d997223fcff6a07abd01aae61025e672fa73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27d56c82efcf447d3e0ebdbb787119e32d5d60d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27d56c82efcf447d3e0ebdbb787119e32d5d60d0"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "06970ddc674ac194bbaaf4ebce824355bc8bd522",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
        "patch": "@@ -43,7 +43,7 @@ def __init__(self):\n     def setup_network(self):\n         # Must set the blockversion for this test\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3', '-buriedsfparams=bip65:1351']],\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3', '-buriedsfparams=bip65:1051']],\n                                  binary=[self.options.testbinary])\n \n     def run_test(self):\n@@ -71,9 +71,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 398 more version 3 blocks '''\n+        ''' 98 more version 3 blocks '''\n         test_blocks = []\n-        for i in range(398):\n+        for i in range(98):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()"
      },
      {
        "sha": "38046fb057b66321844d2b15988ff3b92977b649",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
        "patch": "@@ -19,8 +19,8 @@ def __init__(self):\n     def setup_network(self):\n         self.nodes = []\n         self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\", \"-buriedsfparams=bip65:1351\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\", \"-buriedsfparams=bip65:1351\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\", \"-buriedsfparams=bip65:1251\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\", \"-buriedsfparams=bip65:1251\"]))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False\n@@ -30,8 +30,7 @@ def run_test(self):\n         cnt = self.nodes[0].getblockcount()\n \n         # Mine some old-version blocks\n-        self.nodes[1].generate(200)\n-        cnt += 100\n+        self.nodes[1].generate(100)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 100):\n             raise AssertionError(\"Failed to mine 100 version=3 blocks\")"
      },
      {
        "sha": "3c8608b9f1da4ae2e5a2a0263a27436de62113ff",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
        "patch": "@@ -51,7 +51,7 @@ def __init__(self):\n     def setup_network(self):\n         # Must set the blockversion for this test\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=2', '-buriedsfparams=bip66:1251']],\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=2', '-buriedsfparams=bip66:1051']],\n                                  binary=[self.options.testbinary])\n \n     def run_test(self):\n@@ -79,9 +79,9 @@ def get_tests(self):\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = int(time.time())\n \n-        ''' 298 more version 2 blocks '''\n+        ''' 98 more version 2 blocks '''\n         test_blocks = []\n-        for i in range(298):\n+        for i in range(98):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 2\n             block.rehash()"
      }
    ]
  },
  {
    "sha": "d9e47c563c28b1350025b36d1cd742ea97d4e264",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOWU0N2M1NjNjMjhiMTM1MDAyNWIzNmQxY2Q3NDJlYTk3ZDRlMjY0",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-08-04T21:12:25Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-11-10T19:55:21Z"
      },
      "message": "Refactor: Adding a buried deployment heights vector",
      "tree": {
        "sha": "e1db7816396e00598193e4fea75e9df2fd11b4c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1db7816396e00598193e4fea75e9df2fd11b4c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9e47c563c28b1350025b36d1cd742ea97d4e264",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e47c563c28b1350025b36d1cd742ea97d4e264",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e47c563c28b1350025b36d1cd742ea97d4e264",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e47c563c28b1350025b36d1cd742ea97d4e264/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d37a7a94efa967c8fad95a2baa76dd5088d9e7e"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 22,
      "deletions": 35
    },
    "files": [
      {
        "sha": "907da6e3667c3152910cb412c12305d4703d056c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 19,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=d9e47c563c28b1350025b36d1cd742ea97d4e264",
        "patch": "@@ -71,10 +71,10 @@ class CMainParams : public CChainParams {\n     CMainParams() {\n         strNetworkID = \"main\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.BIP34Height = 227931;\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE] = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n-        consensus.BIP65Height = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n-        consensus.BIP66Height = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP65_HEIGHT_ACTIVE] = 388381; // 000000000000000004c2b624ed5d7756c508d90fd0da2c7c679febfa6c4735f0\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP66_HEIGHT_ACTIVE] = 363725; // 00000000000000000379eaa19dce8c9b722d46ae6a57c2f1a988119488b50931\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -169,10 +169,10 @@ class CTestNetParams : public CChainParams {\n     CTestNetParams() {\n         strNetworkID = \"test\";\n         consensus.nSubsidyHalvingInterval = 210000;\n-        consensus.BIP34Height = 21111;\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE] = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n-        consensus.BIP65Height = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n-        consensus.BIP66Height = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP65_HEIGHT_ACTIVE] = 581885; // 00000000007f6655f22f98e72ed80d8b06dc761d5da09df0fa1dc4be4f861eb6\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP66_HEIGHT_ACTIVE] = 330776; // 000000002104c8c45e99a8853285a3b592602a3ccde2b832481da85e9e4ba182\n         consensus.powLimit = uint256S(\"00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -251,10 +251,10 @@ class CRegTestParams : public CChainParams {\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n         consensus.nSubsidyHalvingInterval = 150;\n-        consensus.BIP34Height = 100000000; // Configurable with -buriedsfparams\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE] = 100000000; // Configurable with -buriedsfparams\n         consensus.BIP34Hash = uint256();\n-        consensus.BIP65Height = 100000000;\n-        consensus.BIP66Height = 100000000;\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP65_HEIGHT_ACTIVE] = 100000000;\n+        consensus.vBuriedDeploymentHeights[Consensus::BIP66_HEIGHT_ACTIVE] = 100000000;\n         consensus.powLimit = uint256S(\"7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n@@ -326,15 +326,7 @@ const CChainParams &Params() {\n \n void CChainParams::UpdateBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight)\n {\n-        if (deployment == Consensus::BIP34_HEIGHT_ACTIVE) {\n-                consensus.BIP34Height = nStartHeight;\n-        }\n-        if (deployment == Consensus::BIP65_HEIGHT_ACTIVE) {\n-                consensus.BIP65Height = nStartHeight;\n-        }\n-        if (deployment == Consensus::BIP66_HEIGHT_ACTIVE) {\n-                consensus.BIP66Height = nStartHeight;\n-        }\n+    consensus.vBuriedDeploymentHeights[deployment] = nStartHeight;\n }\n \n void UpdateRegtestBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight)\n@@ -364,4 +356,4 @@ void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime,\n {\n     regTestParams.UpdateBIP9Parameters(d, nStartTime, nTimeout);\n }\n- \n+ \n\\ No newline at end of file"
      },
      {
        "sha": "f093014af4ddb24dda67945c43af2370dd3a0909",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=d9e47c563c28b1350025b36d1cd742ea97d4e264",
        "patch": "@@ -48,13 +48,7 @@ struct BIP9Deployment {\n struct Params {\n     uint256 hashGenesisBlock;\n     int nSubsidyHalvingInterval;\n-    /** Block height and hash at which BIP34 becomes active */\n-    int BIP34Height;\n     uint256 BIP34Hash;\n-    /** Block height at which BIP65 becomes active */\n-    int BIP65Height;\n-    /** Block height at which BIP66 becomes active */\n-    int BIP66Height;\n     /**\n      * Minimum blocks including miner confirmation of the total of 2016 blocks in a retargetting period,\n      * (nPowTargetTimespan / nPowTargetSpacing) which is also used for BIP9 deployments.\n@@ -63,6 +57,7 @@ struct Params {\n     uint32_t nRuleChangeActivationThreshold;\n     uint32_t nMinerConfirmationWindow;\n     BIP9Deployment vDeployments[MAX_VERSION_BITS_DEPLOYMENTS];\n+    int64_t vBuriedDeploymentHeights[MAX_BURIED_DEPLOYMENTS];\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;"
      },
      {
        "sha": "a799a43c4f49465ae35ebedcbfa86b4f75497a54",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d9e47c563c28b1350025b36d1cd742ea97d4e264",
        "patch": "@@ -2411,7 +2411,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // before the first had been spent.  Since those coinbases are sufficiently buried its no longer possible to create further\n     // duplicate transactions descending from the known pairs either.\n     // If we're on the known chain at height greater than where BIP34 activated, we can save the db accesses needed for the BIP30 check.\n-    CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().BIP34Height);\n+    CBlockIndex *pindexBIP34height = pindex->pprev->GetAncestor(chainparams.GetConsensus().vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE]);\n     //Only continue to enforce if we're below BIP34 activation height or the block hash at that height doesn't correspond.\n     fEnforceBIP30 = fEnforceBIP30 && (!pindexBIP34height || !(pindexBIP34height->GetBlockHash() == chainparams.GetConsensus().BIP34Hash));\n \n@@ -2431,12 +2431,12 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     // Start enforcing the DERSIG (BIP66) rule\n-    if (pindex->nHeight >= chainparams.GetConsensus().BIP66Height) {\n+    if (pindex->nHeight >= chainparams.GetConsensus().vBuriedDeploymentHeights[Consensus::BIP66_HEIGHT_ACTIVE]) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n     // Start enforcing CHECKLOCKTIMEVERIFY (BIP65) rule\n-    if (pindex->nHeight >= chainparams.GetConsensus().BIP65Height) {\n+    if (pindex->nHeight >= chainparams.GetConsensus().vBuriedDeploymentHeights[Consensus::BIP65_HEIGHT_ACTIVE]) {\n         flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n     }\n \n@@ -3575,9 +3575,9 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n \n     // Reject outdated version blocks when 95% (75% on testnet) of the network has upgraded:\n     // check for version 2, 3 and 4 upgrades\n-    if((block.nVersion < 2 && nHeight >= consensusParams.BIP34Height) ||\n-       (block.nVersion < 3 && nHeight >= consensusParams.BIP66Height) ||\n-       (block.nVersion < 4 && nHeight >= consensusParams.BIP65Height))\n+    if((block.nVersion < 2 && nHeight >= consensusParams.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE]) ||\n+       (block.nVersion < 3 && nHeight >= consensusParams.vBuriedDeploymentHeights[Consensus::BIP66_HEIGHT_ACTIVE]) ||\n+       (block.nVersion < 4 && nHeight >= consensusParams.vBuriedDeploymentHeights[Consensus::BIP65_HEIGHT_ACTIVE]))\n             return state.Invalid(false, REJECT_OBSOLETE, strprintf(\"bad-version(0x%08x)\", block.nVersion),\n                                  strprintf(\"rejected nVersion=0x%08x block\", block.nVersion));\n \n@@ -3606,7 +3606,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n     }\n \n     // Enforce rule that the coinbase starts with serialized block height\n-    if (nHeight >= consensusParams.BIP34Height)\n+    if (nHeight >= consensusParams.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE])\n     {\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||"
      },
      {
        "sha": "e1d3f5a7adc92c68fec458f59a5e2c93b55ec90d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9e47c563c28b1350025b36d1cd742ea97d4e264/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d9e47c563c28b1350025b36d1cd742ea97d4e264",
        "patch": "@@ -970,13 +970,13 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n     switch(version)\n     {\n         case 2:\n-            activated = pindex->nHeight >= consensusParams.BIP34Height;\n+            activated = pindex->nHeight >= consensusParams.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE];\n             break;\n         case 3:\n-            activated = pindex->nHeight >= consensusParams.BIP66Height;\n+            activated = pindex->nHeight >= consensusParams.vBuriedDeploymentHeights[Consensus::BIP66_HEIGHT_ACTIVE];\n             break;\n         case 4:\n-            activated = pindex->nHeight >= consensusParams.BIP65Height;\n+            activated = pindex->nHeight >= consensusParams.vBuriedDeploymentHeights[Consensus::BIP65_HEIGHT_ACTIVE];\n             break;\n     }\n     rv.push_back(Pair(\"status\", activated));"
      }
    ]
  },
  {
    "sha": "75a17d698ba60b2199a35434cfd0be5a1407a0d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWExN2Q2OThiYTYwYjIxOTlhMzU0MzRjZmQwYmU1YTE0MDdhMGQ5",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-08-04T23:19:43Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-11-10T19:55:21Z"
      },
      "message": "Refactor: Introduce CChainParams::AllowsOverriddenSoftFork for testing a chain",
      "tree": {
        "sha": "c35e16a0dd803b6492dea27be40d00b41f25bd9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c35e16a0dd803b6492dea27be40d00b41f25bd9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a17d698ba60b2199a35434cfd0be5a1407a0d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a17d698ba60b2199a35434cfd0be5a1407a0d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75a17d698ba60b2199a35434cfd0be5a1407a0d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a17d698ba60b2199a35434cfd0be5a1407a0d9/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9e47c563c28b1350025b36d1cd742ea97d4e264",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9e47c563c28b1350025b36d1cd742ea97d4e264",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9e47c563c28b1350025b36d1cd742ea97d4e264"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 18,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d28b4d3548d3fa25a291e44b7d7623b49f4817cb",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a17d698ba60b2199a35434cfd0be5a1407a0d9/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a17d698ba60b2199a35434cfd0be5a1407a0d9/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=75a17d698ba60b2199a35434cfd0be5a1407a0d9",
        "patch": "@@ -70,6 +70,7 @@ class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n         strNetworkID = \"main\";\n+        fAllowsOverriddenSoftFork = false;\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE] = 227931;\n         consensus.BIP34Hash = uint256S(\"0x000000000000024b89b42a942fe0d9fea3bb44ab7bd1b19115dd6a759c0808b8\");\n@@ -168,6 +169,7 @@ class CTestNetParams : public CChainParams {\n public:\n     CTestNetParams() {\n         strNetworkID = \"test\";\n+        fAllowsOverriddenSoftFork = false;\n         consensus.nSubsidyHalvingInterval = 210000;\n         consensus.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE] = 21111;\n         consensus.BIP34Hash = uint256S(\"0x0000000023b3a96d3484e5abb3755c413e7d41500f8e2a5c3f0dd01299cd8ef8\");\n@@ -250,6 +252,7 @@ class CRegTestParams : public CChainParams {\n public:\n     CRegTestParams() {\n         strNetworkID = \"regtest\";\n+        fAllowsOverriddenSoftFork = true;\n         consensus.nSubsidyHalvingInterval = 150;\n         consensus.vBuriedDeploymentHeights[Consensus::BIP34_HEIGHT_ACTIVE] = 100000000; // Configurable with -buriedsfparams\n         consensus.BIP34Hash = uint256();\n@@ -309,11 +312,6 @@ class CRegTestParams : public CChainParams {\n         base58Prefixes[EXT_SECRET_KEY] = boost::assign::list_of(0x04)(0x35)(0x83)(0x94).convert_to_container<std::vector<unsigned char> >();\n     }\n \n-    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-    {\n-        consensus.vDeployments[d].nStartTime = nStartTime;\n-        consensus.vDeployments[d].nTimeout = nTimeout;\n-    }\n };\n static CRegTestParams regTestParams;\n \n@@ -329,9 +327,10 @@ void CChainParams::UpdateBuriedDeploymentParameters(Consensus::BuriedDeploymentP\n     consensus.vBuriedDeploymentHeights[deployment] = nStartHeight;\n }\n \n-void UpdateRegtestBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight)\n+void CChainParams::UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n {\n-    regTestParams.UpdateBuriedDeploymentParameters(deployment, nStartHeight);\n+    consensus.vDeployments[d].nStartTime = nStartTime;\n+    consensus.vDeployments[d].nTimeout = nTimeout;\n }\n \n CChainParams& Params(const std::string& chain)\n@@ -351,9 +350,3 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n-\n-void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n-{\n-    regTestParams.UpdateBIP9Parameters(d, nStartTime, nTimeout);\n-}\n- \n\\ No newline at end of file"
      },
      {
        "sha": "2f461947a182c56f52afd86061747e26b7681768",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a17d698ba60b2199a35434cfd0be5a1407a0d9/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a17d698ba60b2199a35434cfd0be5a1407a0d9/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=75a17d698ba60b2199a35434cfd0be5a1407a0d9",
        "patch": "@@ -56,7 +56,8 @@ class CChainParams\n     const Consensus::Params& GetConsensus() const { return consensus; }\n     const CMessageHeader::MessageStartChars& MessageStart() const { return pchMessageStart; }\n     int GetDefaultPort() const { return nDefaultPort; }\n-\n+    /** This chain can have buried and bip9 soft fork parameters overridden with -bip9params and -buriedsfparams */\n+    bool AllowsOverriddenSoftFork() const { return fAllowsOverriddenSoftFork; }\n     const CBlock& GenesisBlock() const { return genesis; }\n     /** Make miner wait to have peers to avoid wasting work */\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n@@ -73,6 +74,7 @@ class CChainParams\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<SeedSpec6>& FixedSeeds() const { return vFixedSeeds; }\n     const CCheckpointData& Checkpoints() const { return checkpointData; }\n+    void UpdateBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n     void UpdateBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight);\n protected:\n     CChainParams() {}\n@@ -86,6 +88,7 @@ class CChainParams\n     std::string strNetworkID;\n     CBlock genesis;\n     std::vector<SeedSpec6> vFixedSeeds;\n+    bool fAllowsOverriddenSoftFork;\n     bool fMiningRequiresPeers;\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n@@ -99,8 +102,6 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-void UpdateRegtestBuriedDeploymentParameters(Consensus::BuriedDeploymentPos deployment, int64_t nStartHeight);\n-\n /**\n  * @returns CChainParams for the given BIP70 chain name.\n  */\n@@ -112,9 +113,4 @@ CChainParams& Params(const std::string& chain);\n  */\n void SelectParams(const std::string& chain);\n \n-/**\n- * Allows modifying the BIP9 regtest parameters.\n- */\n-void UpdateRegtestBIP9Parameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout);\n-\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "f2659c88e2324a925411870c84175b5865568a5b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a17d698ba60b2199a35434cfd0be5a1407a0d9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a17d698ba60b2199a35434cfd0be5a1407a0d9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=75a17d698ba60b2199a35434cfd0be5a1407a0d9",
        "patch": "@@ -1000,9 +1000,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (!mapMultiArgs[\"-bip9params\"].empty()) {\n         // Allow overriding BIP9 parameters for testing\n-        if (!chainparams.MineBlocksOnDemand()) {\n-            return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n+        if (!chainparams.AllowsOverriddenSoftFork()) {\n+            return InitError(\"BIP9 parameters can't be overriden on this chain.\");\n         }\n+        CChainParams& mutableParams = Params(Params().NetworkIDString());\n         const vector<string>& deployments = mapMultiArgs[\"-bip9params\"];\n         for (auto i : deployments) {\n             std::vector<std::string> vDeploymentParams;\n@@ -1021,7 +1022,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             for (int j=0; j<(int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j)\n             {\n                 if (vDeploymentParams[0].compare(VersionBitsDeploymentInfo[j].name) == 0) {\n-                    UpdateRegtestBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                    mutableParams.UpdateBIP9Parameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n                     found = true;\n                     LogPrintf(\"Setting BIP9 activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n                     break;\n@@ -1035,9 +1036,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (!mapMultiArgs[\"-buriedsfparams\"].empty()) {\n         // Allow overriding ism parameters for testing\n-        if (!chainparams.MineBlocksOnDemand()) {\n-            return InitError(\"Buried soft fork parameters may only be overridden on regtest.\");\n+        if (!chainparams.AllowsOverriddenSoftFork()) {\n+            return InitError(\"Buried soft fork parameters can't be overridden on this chain.\");\n         }\n+        CChainParams& mutableParams = Params(chainparams.NetworkIDString());\n         std::map<string, Consensus::BuriedDeploymentPos> buriedDeployments;\n         buriedDeployments.insert(std::make_pair(\"bip34\", Consensus::BIP34_HEIGHT_ACTIVE));\n         buriedDeployments.insert(std::make_pair(\"bip65\", Consensus::BIP65_HEIGHT_ACTIVE));\n@@ -1058,7 +1060,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n             if (found == buriedDeployments.end()) {\n                 return InitError(strprintf(\"Invalid deployment (%s)\", vDeploymentParams[0]));\n             }\n-            UpdateRegtestBuriedDeploymentParameters(found->second, nStartHeight);\n+            mutableParams.UpdateBuriedDeploymentParameters(found->second, nStartHeight);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "5b5d5f4567e80d308aef13a7db64f19984a7ea6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjVkNWY0NTY3ZTgwZDMwOGFlZjEzYTdkYjY0ZjE5OTg0YTdlYTZk",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-09T22:17:48Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-11-10T19:55:21Z"
      },
      "message": "[qa] Rework bip65 and bip66 soft fork enforcement tests after ISM removal",
      "tree": {
        "sha": "eb507382b2155961da9abd6a0e0b6e41a3a5a3bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eb507382b2155961da9abd6a0e0b6e41a3a5a3bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b5d5f4567e80d308aef13a7db64f19984a7ea6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5d5f4567e80d308aef13a7db64f19984a7ea6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b5d5f4567e80d308aef13a7db64f19984a7ea6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b5d5f4567e80d308aef13a7db64f19984a7ea6d/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75a17d698ba60b2199a35434cfd0be5a1407a0d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a17d698ba60b2199a35434cfd0be5a1407a0d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75a17d698ba60b2199a35434cfd0be5a1407a0d9"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 49,
      "deletions": 109
    },
    "files": [
      {
        "sha": "2f2300f76adb02667f48d2610df3045757254da7",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 23,
        "deletions": 53,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5d5f4567e80d308aef13a7db64f19984a7ea6d/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5d5f4567e80d308aef13a7db64f19984a7ea6d/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=5b5d5f4567e80d308aef13a7db64f19984a7ea6d",
        "patch": "@@ -20,19 +20,6 @@ def cltv_invalidate(tx):\n     tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP] +\n                                   list(CScript(tx.vin[0].scriptSig)))\n \n-'''\n-This test is meant to exercise BIP65 (CHECKLOCKTIMEVERIFY)\n-Connect to a single node.\n-Mine 2 (version 3) blocks (save the coinbases for later).\n-Generate 98 more version 3 blocks, verify the node accepts.\n-Mine 749 version 4 blocks, verify the node accepts.\n-Check that the new CLTV rules are not enforced on the 750th version 4 block.\n-Check that the new CLTV rules are enforced on the 751st version 4 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n-'''\n \n class BIP65Test(ComparisonTestFramework):\n \n@@ -64,7 +51,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         return tx\n \n     def get_tests(self):\n-\n+        # Mine 2 (version 3) blocks (save the coinbases for later).\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n         self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n@@ -84,43 +71,9 @@ def get_tests(self):\n             height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n-        ''' Mine 749 version 4 blocks '''\n-        test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 4\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        '''\n-        Check that the new CLTV rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n-        cltv_invalidate(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 4\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])\n-\n-        ''' Mine 199 new version blocks on last valid tip '''\n+        ''' Mine 948 version 4 blocks '''\n         test_blocks = []\n-        for i in range(199):\n+        for i in range(948):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n@@ -141,19 +94,28 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        ''' Mine 1 new version block '''\n+        '''\n+        Check that the new CLTV rules are not enforced at height 1050 (v4 block)\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n+\n         self.last_block_time += 1\n         self.tip = block.sha256\n         height += 1\n         yield TestInstance([[block, True]])\n \n         '''\n-        Check that the new CLTV rules are enforced in the 951st version 4\n-        block.\n+        Check that the new CLTV rules are enforced at height 1051\n         '''\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[1], self.nodeaddress, 1.0)\n@@ -177,5 +139,13 @@ def get_tests(self):\n         self.last_block_time += 1\n         yield TestInstance([[block, False]])\n \n+        ''' Mine 1 new version block, should be valid '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, True]])\n+\n if __name__ == '__main__':\n     BIP65Test().main()"
      },
      {
        "sha": "e2265b9cbba4bdc81a4fcc0c9f4b5aedcab1d87d",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 26,
        "deletions": 56,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b5d5f4567e80d308aef13a7db64f19984a7ea6d/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b5d5f4567e80d308aef13a7db64f19984a7ea6d/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=5b5d5f4567e80d308aef13a7db64f19984a7ea6d",
        "patch": "@@ -27,21 +27,8 @@ def unDERify(tx):\n         else:\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n-    \n-'''\n-This test is meant to exercise BIP66 (DER SIG).\n-Connect to a single node.\n-Mine 2 (version 2) blocks (save the coinbases for later).\n-Generate 98 more version 2 blocks, verify the node accepts.\n-Mine 749 version 3 blocks, verify the node accepts.\n-Check that the new DERSIG rules are not enforced on the 750th version 3 block.\n-Check that the new DERSIG rules are enforced on the 751st version 3 block.\n-Mine 199 new version blocks.\n-Mine 1 old-version block.\n-Mine 1 new version block.\n-Mine 1 old version block, see that the node rejects.\n-'''\n-            \n+\n+\n class BIP66Test(ComparisonTestFramework):\n \n     def __init__(self):\n@@ -72,7 +59,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         return tx\n \n     def get_tests(self):\n-\n+        # Mine 2 (version 2) blocks (save the coinbases for later).\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         height = 3  # height of the next block to build\n         self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n@@ -92,43 +79,9 @@ def get_tests(self):\n             height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n-        ''' Mine 749 version 3 blocks '''\n+        ''' Mine 948 version 3 blocks '''\n         test_blocks = []\n-        for i in range(749):\n-            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-            block.nVersion = 3\n-            block.rehash()\n-            block.solve()\n-            test_blocks.append([block, True])\n-            self.last_block_time += 1\n-            self.tip = block.sha256\n-            height += 1\n-        yield TestInstance(test_blocks, sync_every_block=False)\n-\n-        ''' \n-        Check that the new DERSIG rules are not enforced in the 750th\n-        version 3 block.\n-        '''\n-        spendtx = self.create_transaction(self.nodes[0],\n-                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n-        unDERify(spendtx)\n-        spendtx.rehash()\n-\n-        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n-        block.nVersion = 3\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n-        block.rehash()\n-        block.solve()\n-\n-        self.last_block_time += 1\n-        self.tip = block.sha256\n-        height += 1\n-        yield TestInstance([[block, True]])       \n-\n-        ''' Mine 199 new version blocks on last valid tip '''\n-        test_blocks = []\n-        for i in range(199):\n+        for i in range(948):\n             block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n@@ -149,19 +102,28 @@ def get_tests(self):\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        ''' Mine 1 new version block '''\n+        '''\n+        Check that the new DERSIG rules are not enforced at height 1050 (v3 block)\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        unDERify(spendtx)\n+        spendtx.rehash()\n+\n         block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()\n         block.solve()\n+\n         self.last_block_time += 1\n         self.tip = block.sha256\n         height += 1\n         yield TestInstance([[block, True]])\n \n-        ''' \n-        Check that the new DERSIG rules are enforced in the 951st version 3\n-        block.\n+        '''\n+        Check that the new DERSIG rules are enforced at height 1051\n         '''\n         spendtx = self.create_transaction(self.nodes[0],\n                 self.coinbase_blocks[1], self.nodeaddress, 1.0)\n@@ -185,5 +147,13 @@ def get_tests(self):\n         self.last_block_time += 1\n         yield TestInstance([[block, False]])\n \n+        ''' Mine 1 new version block, should be valid '''\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, True]])\n+\n if __name__ == '__main__':\n     BIP66Test().main()"
      }
    ]
  }
]