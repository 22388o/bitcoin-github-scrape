[
  {
    "sha": "cdc260afd530165a3167e049b630bc177a1398f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGMyNjBhZmQ1MzAxNjVhMzE2N2UwNDliNjMwYmMxNzdhMTM5OGY5",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-11T07:49:27Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T05:47:55Z"
      },
      "message": "Add GetCScripts to CBasicKeyStore",
      "tree": {
        "sha": "e3c5114fb9871fdda46110763f4559637d119824",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3c5114fb9871fdda46110763f4559637d119824"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdc260afd530165a3167e049b630bc177a1398f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdc260afd530165a3167e049b630bc177a1398f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdc260afd530165a3167e049b630bc177a1398f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdc260afd530165a3167e049b630bc177a1398f9/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18a1bbad98bd4321f15e7921d9aec91661499d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18a1bbad98bd4321f15e7921d9aec91661499d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18a1bbad98bd4321f15e7921d9aec91661499d90"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a010a1244a872df37204b45dc3e964887c0f3204",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdc260afd530165a3167e049b630bc177a1398f9/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdc260afd530165a3167e049b630bc177a1398f9/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=cdc260afd530165a3167e049b630bc177a1398f9",
        "patch": "@@ -77,6 +77,16 @@ bool CBasicKeyStore::HaveCScript(const CScriptID& hash) const\n     return mapScripts.count(hash) > 0;\n }\n \n+std::set<CScriptID> CBasicKeyStore::GetCScripts() const\n+{\n+    LOCK(cs_KeyStore);\n+    std::set<CScriptID> set_script;\n+    for (const auto& mi : mapScripts) {\n+        set_script.insert(mi.first);\n+    }\n+    return set_script;\n+}\n+\n bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "516a238241c5f856f25184a074f347c3c4889852",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdc260afd530165a3167e049b630bc177a1398f9/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdc260afd530165a3167e049b630bc177a1398f9/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=cdc260afd530165a3167e049b630bc177a1398f9",
        "patch": "@@ -36,6 +36,7 @@ class CKeyStore\n     //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n     virtual bool HaveCScript(const CScriptID &hash) const =0;\n+    virtual std::set<CScriptID> GetCScripts() const =0;\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n \n     //! Support for Watch-only addresses\n@@ -67,6 +68,7 @@ class CBasicKeyStore : public CKeyStore\n     bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n     bool AddCScript(const CScript& redeemScript) override;\n     bool HaveCScript(const CScriptID &hash) const override;\n+    std::set<CScriptID> GetCScripts() const override;\n     bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n \n     bool AddWatchOnly(const CScript &dest) override;"
      }
    ]
  },
  {
    "sha": "b702ae812c88fb6ccc4b5163383d96997004c3c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzAyYWU4MTJjODhmYjZjY2M0YjUxNjMzODNkOTY5OTcwMDRjM2M4",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-11T08:21:12Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T05:47:56Z"
      },
      "message": "Add CScripts to dumpwallet RPC",
      "tree": {
        "sha": "ca38218d93f974e0aa9df59e5e88f822e75e082c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca38218d93f974e0aa9df59e5e88f822e75e082c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b702ae812c88fb6ccc4b5163383d96997004c3c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b702ae812c88fb6ccc4b5163383d96997004c3c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b702ae812c88fb6ccc4b5163383d96997004c3c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b702ae812c88fb6ccc4b5163383d96997004c3c8/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdc260afd530165a3167e049b630bc177a1398f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdc260afd530165a3167e049b630bc177a1398f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdc260afd530165a3167e049b630bc177a1398f9"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "29f5a0da944143859ecc05340334a4dd4e00882a",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b702ae812c88fb6ccc4b5163383d96997004c3c8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b702ae812c88fb6ccc4b5163383d96997004c3c8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=b702ae812c88fb6ccc4b5163383d96997004c3c8",
        "patch": "@@ -640,6 +640,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     const std::map<CKeyID, int64_t>& mapKeyPool = pwallet->GetAllReserveKeys();\n     pwallet->GetKeyBirthTimes(mapKeyBirth);\n \n+    std::set<CScriptID> scripts = pwallet->GetCScripts();\n+\n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n     for (const auto& entry : mapKeyBirth) {\n@@ -694,6 +696,15 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         }\n     }\n     file << \"\\n\";\n+    for (const CScriptID &scriptid : scripts) {\n+        CScript script;\n+        std::string address = EncodeDestination(scriptid);\n+        if(pwallet->GetCScript(scriptid, script)) {\n+            file << strprintf(\"%s 0 script=1\", HexStr(script.begin(), script.end()));\n+            file << strprintf(\" # addr=%s\\n\", address);\n+        }\n+    }\n+    file << \"\\n\";\n     file << \"# End of dump\\n\";\n     file.close();\n "
      }
    ]
  },
  {
    "sha": "ef0c73022061cae00f9e978b04f3fd0cce8d627d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjBjNzMwMjIwNjFjYWUwMGY5ZTk3OGIwNGYzZmQwY2NlOGQ2Mjdk",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-12T03:28:46Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T05:47:56Z"
      },
      "message": "Add scripts to importwallet RPC",
      "tree": {
        "sha": "7f2a2b2d0be42dc27361aa26b1f69911a8f1e2bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f2a2b2d0be42dc27361aa26b1f69911a8f1e2bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef0c73022061cae00f9e978b04f3fd0cce8d627d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c73022061cae00f9e978b04f3fd0cce8d627d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0c73022061cae00f9e978b04f3fd0cce8d627d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c73022061cae00f9e978b04f3fd0cce8d627d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b702ae812c88fb6ccc4b5163383d96997004c3c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b702ae812c88fb6ccc4b5163383d96997004c3c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b702ae812c88fb6ccc4b5163383d96997004c3c8"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 45,
      "deletions": 33
    },
    "files": [
      {
        "sha": "93f92f5153cb2da4616c4d66bdf5bea8168db5ea",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 33,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef0c73022061cae00f9e978b04f3fd0cce8d627d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef0c73022061cae00f9e978b04f3fd0cce8d627d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=ef0c73022061cae00f9e978b04f3fd0cce8d627d",
        "patch": "@@ -500,40 +500,52 @@ UniValue importwallet(const JSONRPCRequest& request)\n         if (vstr.size() < 2)\n             continue;\n         CBitcoinSecret vchSecret;\n-        if (!vchSecret.SetString(vstr[0]))\n-            continue;\n-        CKey key = vchSecret.GetKey();\n-        CPubKey pubkey = key.GetPubKey();\n-        assert(key.VerifyPubKey(pubkey));\n-        CKeyID keyid = pubkey.GetID();\n-        if (pwallet->HaveKey(keyid)) {\n-            LogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n-            continue;\n-        }\n-        int64_t nTime = DecodeDumpTime(vstr[1]);\n-        std::string strLabel;\n-        bool fLabel = true;\n-        for (unsigned int nStr = 2; nStr < vstr.size(); nStr++) {\n-            if (boost::algorithm::starts_with(vstr[nStr], \"#\"))\n-                break;\n-            if (vstr[nStr] == \"change=1\")\n-                fLabel = false;\n-            if (vstr[nStr] == \"reserve=1\")\n-                fLabel = false;\n-            if (boost::algorithm::starts_with(vstr[nStr], \"label=\")) {\n-                strLabel = DecodeDumpString(vstr[nStr].substr(6));\n-                fLabel = true;\n+        if (vchSecret.SetString(vstr[0])) {\n+            CKey key = vchSecret.GetKey();\n+            CPubKey pubkey = key.GetPubKey();\n+            assert(key.VerifyPubKey(pubkey));\n+            CKeyID keyid = pubkey.GetID();\n+            if (pwallet->HaveKey(keyid)) {\n+                LogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n+                continue;\n             }\n+            int64_t nTime = DecodeDumpTime(vstr[1]);\n+            std::string strLabel;\n+            bool fLabel = true;\n+            for (unsigned int nStr = 2; nStr < vstr.size(); nStr++) {\n+                if (boost::algorithm::starts_with(vstr[nStr], \"#\"))\n+                    break;\n+                if (vstr[nStr] == \"change=1\")\n+                    fLabel = false;\n+                if (vstr[nStr] == \"reserve=1\")\n+                    fLabel = false;\n+                if (boost::algorithm::starts_with(vstr[nStr], \"label=\")) {\n+                    strLabel = DecodeDumpString(vstr[nStr].substr(6));\n+                    fLabel = true;\n+                }\n+            }\n+            LogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n+            if (!pwallet->AddKeyPubKey(key, pubkey)) {\n+                fGood = false;\n+                continue;\n+            }\n+            pwallet->mapKeyMetadata[keyid].nCreateTime = nTime;\n+            if (fLabel)\n+                pwallet->SetAddressBook(keyid, strLabel, \"receive\");\n+            nTimeBegin = std::min(nTimeBegin, nTime);\n+        } else if(IsHex(vstr[0])) {\n+           std::vector<unsigned char> vData(ParseHex(vstr[0]));\n+           CScript script = CScript(vData.begin(), vData.end());\n+           if (pwallet->HaveCScript(script)) {\n+               LogPrintf(\"Skipping import of %s (script already present)\\n\", vstr[0]);\n+               continue;\n+           }\n+           if(!pwallet->AddCScript(script)) {\n+               LogPrintf(\"Error importing script %s\\n\", vstr[0]);\n+               fGood = false;\n+               continue;\n+           }\n         }\n-        LogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n-        if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-            fGood = false;\n-            continue;\n-        }\n-        pwallet->mapKeyMetadata[keyid].nCreateTime = nTime;\n-        if (fLabel)\n-            pwallet->SetAddressBook(keyid, strLabel, \"receive\");\n-        nTimeBegin = std::min(nTimeBegin, nTime);\n     }\n     file.close();\n     pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n@@ -542,7 +554,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n     pwallet->MarkDirty();\n \n     if (!fGood)\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys to wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys/scripts to wallet\");\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "9e1184dd54d4b2a1d2ae590207ee5beec0d15b38",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTExODRkZDU0ZDRiMmExZDJhZTU5MDIwN2VlNWJlZWMwZDE1YjM4",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-12T03:48:10Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T05:47:56Z"
      },
      "message": "Add dumpwallet scripts test",
      "tree": {
        "sha": "c9c150620b6bc439a5a37cd2a1d419d7736e5d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9c150620b6bc439a5a37cd2a1d419d7736e5d6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef0c73022061cae00f9e978b04f3fd0cce8d627d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c73022061cae00f9e978b04f3fd0cce8d627d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0c73022061cae00f9e978b04f3fd0cce8d627d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 24,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ab10e96db01f548c417fe9d13d403a9b9fcc24b8",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 24,
        "deletions": 6,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=9e1184dd54d4b2a1d2ae590207ee5beec0d15b38",
        "patch": "@@ -10,13 +10,14 @@\n from test_framework.util import (assert_equal, assert_raises_rpc_error)\n \n \n-def read_dump(file_name, addrs, hd_master_addr_old):\n+def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n     \"\"\"\n     Read the given dump, count the addrs that match, count change and reserve.\n     Also check that the old hd_master is inactive\n     \"\"\"\n     with open(file_name, encoding='utf8') as inputfile:\n         found_addr = 0\n+        found_script_addr = 0\n         found_addr_chg = 0\n         found_addr_rsv = 0\n         hd_master_addr_ret = None\n@@ -38,6 +39,9 @@ def read_dump(file_name, addrs, hd_master_addr_old):\n                         # ensure we have generated a new hd master key\n                         assert(hd_master_addr_old != addr)\n                         hd_master_addr_ret = addr\n+                    elif keytype == \"script=1\":\n+                        # scripts don't have keypaths\n+                        keypath = None\n                     else:\n                         keypath = addr_keypath.rstrip().split(\"hdkeypath=\")[1]\n \n@@ -52,7 +56,14 @@ def read_dump(file_name, addrs, hd_master_addr_old):\n                         elif keytype == \"reserve=1\":\n                             found_addr_rsv += 1\n                             break\n-        return found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n+\n+                    # count scripts\n+                    for script_addr in script_addrs:\n+                        if script_addr == addr.rstrip() and keytype == \"script=1\":\n+                            found_script_addr += 1\n+                            break\n+\n+        return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -81,13 +92,19 @@ def run_test (self):\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()\n \n+        # Test scripts dump by adding a P2SH witness and a 1-of-1 multisig address\n+        witness_addr = self.nodes[0].addwitnessaddress(addrs[0][\"address\"], True)\n+        multisig_addr = self.nodes[0].addmultisigaddress(1, [addrs[1][\"address\"]])\n+        script_addrs = [witness_addr, multisig_addr]\n+\n         # dump unencrypted wallet\n         result = self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n         assert_equal(result['filename'], os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n-        found_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n-            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, None)\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+            read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n+        assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n         assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n \n@@ -99,9 +116,10 @@ def run_test (self):\n         self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        found_addr, found_addr_chg, found_addr_rsv, _ = \\\n-            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, hd_master_addr_unenc)\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _ = \\\n+            read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n+        assert_equal(found_script_addr, 2)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n "
      }
    ]
  },
  {
    "sha": "68c1e00a002dd2c5982105a6fae59eac2d2ce97b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGMxZTAwYTAwMmRkMmM1OTgyMTA1YTZmYWU1OWVhYzJkMmNlOTdi",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-12T06:01:15Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T05:47:56Z"
      },
      "message": "Add test for importwallet",
      "tree": {
        "sha": "d7f4cc57781184ba8c95cffabb26e764907b01e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7f4cc57781184ba8c95cffabb26e764907b01e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68c1e00a002dd2c5982105a6fae59eac2d2ce97b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68c1e00a002dd2c5982105a6fae59eac2d2ce97b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68c1e00a002dd2c5982105a6fae59eac2d2ce97b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68c1e00a002dd2c5982105a6fae59eac2d2ce97b/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e1184dd54d4b2a1d2ae590207ee5beec0d15b38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e1184dd54d4b2a1d2ae590207ee5beec0d15b38"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "85812f9accd34c526ef55442087e243ae4ce4aaa",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68c1e00a002dd2c5982105a6fae59eac2d2ce97b/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68c1e00a002dd2c5982105a6fae59eac2d2ce97b/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=68c1e00a002dd2c5982105a6fae59eac2d2ce97b",
        "patch": "@@ -126,5 +126,19 @@ def run_test (self):\n         # Overwriting should fail\n         assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n+        # Restart node with new wallet, and test importwallet\n+        self.stop_node(0)\n+        self.start_node(0, ['-wallet=w2'])\n+\n+        # Make sure the address is not IsMine before import\n+        result = self.nodes[0].validateaddress(multisig_addr)\n+        assert(result['ismine'] == False)\n+\n+        self.nodes[0].importwallet(os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n+\n+        # Now check IsMine is true\n+        result = self.nodes[0].validateaddress(multisig_addr)\n+        assert(result['ismine'] == True)\n+\n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "1bab9b23af95986f9452d468257cc34d2c5017b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmFiOWIyM2FmOTU5ODZmOTQ1MmQ0NjgyNTdjYzM0ZDJjNTAxN2Iy",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-12T04:11:26Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T05:47:56Z"
      },
      "message": "Add script dump note to RPC help text and release notes",
      "tree": {
        "sha": "2b179c8097e4e834eac7c3131bf7d4265d360ea1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b179c8097e4e834eac7c3131bf7d4265d360ea1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bab9b23af95986f9452d468257cc34d2c5017b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bab9b23af95986f9452d468257cc34d2c5017b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bab9b23af95986f9452d468257cc34d2c5017b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bab9b23af95986f9452d468257cc34d2c5017b2/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68c1e00a002dd2c5982105a6fae59eac2d2ce97b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68c1e00a002dd2c5982105a6fae59eac2d2ce97b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68c1e00a002dd2c5982105a6fae59eac2d2ce97b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "989e8d636db3f9b1419322fddaaf27453fcf140a",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bab9b23af95986f9452d468257cc34d2c5017b2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bab9b23af95986f9452d468257cc34d2c5017b2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=1bab9b23af95986f9452d468257cc34d2c5017b2",
        "patch": "@@ -100,6 +100,10 @@ The `share/rpcuser/rpcuser.py` script was renamed to `share/rpcauth/rpcauth.py`.\n used to create `rpcauth` credentials for a JSON-RPC user.\n \n \n+- `dumpwallet` now includes hex-encoded scripts from the wallet in the dumpfile, and\n+  `importwallet` now imports these scripts, but corresponding addresses may not be added\n+  correctly or a manual rescan may be required to find relevant transactions.\n+\n Credits\n =======\n "
      },
      {
        "sha": "92c3bd080cb4ec28560a3d7c4aa195234c191cb0",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bab9b23af95986f9452d468257cc34d2c5017b2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bab9b23af95986f9452d468257cc34d2c5017b2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=1bab9b23af95986f9452d468257cc34d2c5017b2",
        "patch": "@@ -613,7 +613,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n             \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n-            \"Imported scripts are not currently included in wallet dumps, these must be backed up separately.\\n\"\n+            \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n             \"Note that if your wallet contains keys which are not derived from your HD seed (e.g. imported keys), these are not covered by\\n\"\n             \"only backing up the seed itself, and must be backed up too (e.g. ensure you back up the whole dumpfile).\\n\"\n             \"\\nArguments:\\n\""
      }
    ]
  },
  {
    "sha": "656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTZmZGU1M2EzYTBkODhhMWUzYzFhZWY3YWU5OTA4M2U0YjA2YTdk",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T06:01:05Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-20T07:24:37Z"
      },
      "message": "Add script birthtime metadata to dump and import wallet",
      "tree": {
        "sha": "3988a21e2b68bfa038328fcd4345d4419147f174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3988a21e2b68bfa038328fcd4345d4419147f174"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bab9b23af95986f9452d468257cc34d2c5017b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bab9b23af95986f9452d468257cc34d2c5017b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bab9b23af95986f9452d468257cc34d2c5017b2"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "41179ebd4a623d26e432c58d1618a767a14237c0",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=656fde53a3a0d88a1e3c1aef7ae99083e4b06a7d",
        "patch": "@@ -545,6 +545,11 @@ UniValue importwallet(const JSONRPCRequest& request)\n                fGood = false;\n                continue;\n            }\n+           int64_t birth_time = DecodeDumpTime(vstr[1]);\n+           if (birth_time > 0) {\n+               pwallet->m_script_metadata[CScriptID(script)].nCreateTime = birth_time;\n+               nTimeBegin = std::min(nTimeBegin, birth_time);\n+           }\n         }\n     }\n     file.close();\n@@ -653,6 +658,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     pwallet->GetKeyBirthTimes(mapKeyBirth);\n \n     std::set<CScriptID> scripts = pwallet->GetCScripts();\n+    // TODO: include scripts in GetKeyBirthTimes() output instead of separate\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n@@ -710,9 +716,15 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file << \"\\n\";\n     for (const CScriptID &scriptid : scripts) {\n         CScript script;\n+        std::string create_time = \"0\";\n         std::string address = EncodeDestination(scriptid);\n+        // get birth times for scripts with metadata\n+        auto it = pwallet->m_script_metadata.find(scriptid);\n+        if (it != pwallet->m_script_metadata.end()) {\n+            create_time = EncodeDumpTime(it->second.nCreateTime);\n+        }\n         if(pwallet->GetCScript(scriptid, script)) {\n-            file << strprintf(\"%s 0 script=1\", HexStr(script.begin(), script.end()));\n+            file << strprintf(\"%s %s script=1\", HexStr(script.begin(), script.end()), create_time);\n             file << strprintf(\" # addr=%s\\n\", address);\n         }\n     }"
      }
    ]
  }
]