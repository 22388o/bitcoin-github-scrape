[
  {
    "sha": "f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTgxZDNkNjU2Y2YyNjllYTA5YWM2ZjEzMGY0YmQ3MGI0MGE5ZTU1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-19T13:27:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-02T18:29:36Z"
      },
      "message": "banlist.dat: store banlist on disk",
      "tree": {
        "sha": "d598d6e1842273946fbbfb7b91744b9e6ca73c4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d598d6e1842273946fbbfb7b91744b9e6ca73c4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6db1157bcab7ace13f046bdfa107b456c1dfbe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6db1157bcab7ace13f046bdfa107b456c1dfbe3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6db1157bcab7ace13f046bdfa107b456c1dfbe3"
      }
    ],
    "stats": {
      "total": 239,
      "additions": 236,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d89cfcf59bdcb5fac6d1a012c2910151c948fef3",
        "filename": "qa/rpc-tests/nodehandling.py",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/qa/rpc-tests/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/qa/rpc-tests/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/nodehandling.py?ref=f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
        "patch": "@@ -48,7 +48,25 @@ def run_test(self):\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n         self.nodes[2].clearbanned()\n         assert_equal(len(self.nodes[2].listbanned()), 0)\n-        \n+\n+        ##test persisted banlist\n+        self.nodes[2].setban(\"127.0.0.0/32\", \"add\")\n+        self.nodes[2].setban(\"127.0.0.0/24\", \"add\")\n+        self.nodes[2].setban(\"192.168.0.1\", \"add\", 1) #ban for 1 seconds\n+        self.nodes[2].setban(\"2001:4d48:ac57:400:cacf:e9ff:fe1d:9c63/19\", \"add\", 1000) #ban for 1000 seconds\n+        listBeforeShutdown = self.nodes[2].listbanned();\n+        assert_equal(\"192.168.0.1/255.255.255.255\", listBeforeShutdown[2]['address']) #must be here\n+        time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n+\n+        #stop node\n+        stop_node(self.nodes[2], 2)\n+\n+        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        listAfterShutdown = self.nodes[2].listbanned();\n+        assert_equal(\"127.0.0.0/255.255.255.0\", listAfterShutdown[0]['address'])\n+        assert_equal(\"127.0.0.0/255.255.255.255\", listAfterShutdown[1]['address'])\n+        assert_equal(\"2001:4000::/ffff:e000:0:0:0:0:0:0\", listAfterShutdown[2]['address'])\n+\n         ###########################\n         # RPC disconnectnode test #\n         ###########################"
      },
      {
        "sha": "3a549d65c47b5e796f3c1c39b59c8dbb9d0d6e8a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 184,
        "deletions": 2,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
        "patch": "@@ -445,11 +445,13 @@ void CNode::PushVersion()\n \n std::map<CSubNet, int64_t> CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n+bool CNode::setBannedIsDirty;\n \n void CNode::ClearBanned()\n {\n     LOCK(cs_setBanned);\n     setBanned.clear();\n+    setBannedIsDirty = true;\n }\n \n bool CNode::IsBanned(CNetAddr ip)\n@@ -498,6 +500,8 @@ void CNode::Ban(const CSubNet& subNet, int64_t bantimeoffset, bool sinceUnixEpoc\n     LOCK(cs_setBanned);\n     if (setBanned[subNet] < banTime)\n         setBanned[subNet] = banTime;\n+\n+    setBannedIsDirty = true;\n }\n \n bool CNode::Unban(const CNetAddr &addr) {\n@@ -508,7 +512,10 @@ bool CNode::Unban(const CNetAddr &addr) {\n bool CNode::Unban(const CSubNet &subNet) {\n     LOCK(cs_setBanned);\n     if (setBanned.erase(subNet))\n+    {\n+        setBannedIsDirty = true;\n         return true;\n+    }\n     return false;\n }\n \n@@ -518,6 +525,43 @@ void CNode::GetBanned(std::map<CSubNet, int64_t> &banMap)\n     banMap = setBanned; //create a thread safe copy\n }\n \n+void CNode::SetBanned(const std::map<CSubNet, int64_t> &banMap)\n+{\n+    LOCK(cs_setBanned);\n+    setBanned = banMap;\n+    setBannedIsDirty = true;\n+}\n+\n+void CNode::SweepBanned()\n+{\n+    int64_t now = GetTime();\n+\n+    LOCK(cs_setBanned);\n+    std::map<CSubNet, int64_t>::iterator it = setBanned.begin();\n+    while(it != setBanned.end())\n+    {\n+        if(now > (*it).second)\n+        {\n+            setBanned.erase(it++);\n+            setBannedIsDirty = true;\n+        }\n+        else\n+            ++it;\n+    }\n+}\n+\n+bool CNode::BannedSetIsDirty()\n+{\n+    LOCK(cs_setBanned);\n+    return setBannedIsDirty;\n+}\n+\n+void CNode::SetBannedSetDirty(bool dirty)\n+{\n+    LOCK(cs_setBanned); //reuse setBanned lock for the isDirty flag\n+    setBannedIsDirty = dirty;\n+}\n+\n \n std::vector<CSubNet> CNode::vWhitelistedRange;\n CCriticalSection CNode::cs_vWhitelistedRange;\n@@ -1212,6 +1256,17 @@ void DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n+void DumpData()\n+{\n+    DumpAddresses();\n+\n+    if (CNode::BannedSetIsDirty())\n+    {\n+        DumpBanlist();\n+        CNode::SetBannedSetDirty(false);\n+    }\n+}\n+\n void static ProcessOneShot()\n {\n     string strDest;\n@@ -1650,6 +1705,17 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!adb.Read(addrman))\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n     }\n+\n+    //try to read stored banlist\n+    CBanDB bandb;\n+    std::map<CSubNet, int64_t> banmap;\n+    if (!bandb.Read(banmap))\n+        LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n+\n+    CNode::SetBanned(banmap); //thread save setter\n+    CNode::SetBannedSetDirty(false); //no need to write down just read or nonexistent data\n+    CNode::SweepBanned(); //sweap out unused entries\n+\n     LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n     fAddressesInitialized = true;\n@@ -1690,7 +1756,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n     threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    scheduler.scheduleEvery(&DumpAddresses, DUMP_ADDRESSES_INTERVAL);\n+    scheduler.scheduleEvery(&DumpData, DUMP_ADDRESSES_INTERVAL);\n }\n \n bool StopNode()\n@@ -1703,7 +1769,7 @@ bool StopNode()\n \n     if (fAddressesInitialized)\n     {\n-        DumpAddresses();\n+        DumpData();\n         fAddressesInitialized = false;\n     }\n \n@@ -2107,3 +2173,119 @@ void CNode::EndMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n }\n+\n+//\n+// CBanDB\n+//\n+\n+CBanDB::CBanDB()\n+{\n+    pathBanlist = GetDataDir() / \"banlist.dat\";\n+}\n+\n+bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+{\n+    // Generate random temporary filename\n+    unsigned short randv = 0;\n+    GetRandBytes((unsigned char*)&randv, sizeof(randv));\n+    std::string tmpfn = strprintf(\"banlist.dat.%04x\", randv);\n+\n+    // serialize banlist, checksum data up to that point, then append csum\n+    CDataStream ssBanlist(SER_DISK, CLIENT_VERSION);\n+    ssBanlist << FLATDATA(Params().MessageStart());\n+    ssBanlist << banSet;\n+    uint256 hash = Hash(ssBanlist.begin(), ssBanlist.end());\n+    ssBanlist << hash;\n+\n+    // open temp output file, and associate with CAutoFile\n+    boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n+    FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n+\n+    // Write and commit header, data\n+    try {\n+        fileout << ssBanlist;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n+    }\n+    FileCommit(fileout.Get());\n+    fileout.fclose();\n+\n+    // replace existing banlist.dat, if any, with new banlist.dat.XXXX\n+    if (!RenameOver(pathTmp, pathBanlist))\n+        return error(\"%s: Rename-into-place failed\", __func__);\n+\n+    return true;\n+}\n+\n+bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+{\n+    // open input file, and associate with CAutoFile\n+    FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n+\n+    // use file size to size memory buffer\n+    int fileSize = boost::filesystem::file_size(pathBanlist);\n+    int dataSize = fileSize - sizeof(uint256);\n+    // Don't try to resize to a negative number if file is small\n+    if (dataSize < 0)\n+        dataSize = 0;\n+    vector<unsigned char> vchData;\n+    vchData.resize(dataSize);\n+    uint256 hashIn;\n+\n+    // read data and checksum from file\n+    try {\n+        filein.read((char *)&vchData[0], dataSize);\n+        filein >> hashIn;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    filein.fclose();\n+\n+    CDataStream ssBanlist(vchData, SER_DISK, CLIENT_VERSION);\n+\n+    // verify stored checksum matches input data\n+    uint256 hashTmp = Hash(ssBanlist.begin(), ssBanlist.end());\n+    if (hashIn != hashTmp)\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n+\n+    unsigned char pchMsgTmp[4];\n+    try {\n+        // de-serialize file header (network specific magic number) and ..\n+        ssBanlist >> FLATDATA(pchMsgTmp);\n+\n+        // ... verify the network matches ours\n+        if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n+            return error(\"%s: Invalid network magic number\", __func__);\n+        \n+        // de-serialize address data into one CAddrMan object\n+        ssBanlist >> banSet;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+    }\n+    \n+    return true;\n+}\n+\n+void DumpBanlist()\n+{\n+    int64_t nStart = GetTimeMillis();\n+\n+    CNode::SweepBanned(); //clean unused entires (if bantime has expired)\n+\n+    CBanDB bandb;\n+    std::map<CSubNet, int64_t> banmap;\n+    CNode::GetBanned(banmap);\n+    bandb.Write(banmap);\n+\n+    LogPrint(\"net\", \"Flushed %d banned node ips/subnets to banlist.dat  %dms\\n\",\n+             banmap.size(), GetTimeMillis() - nStart);\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "42c859e4608ca646aad85c3daad7e41b3804248c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
        "patch": "@@ -287,6 +287,7 @@ class CNode\n     // Key is IP address, value is banned-until-time\n     static std::map<CSubNet, int64_t> setBanned;\n     static CCriticalSection cs_setBanned;\n+    static bool setBannedIsDirty;\n \n     // Whitelisted ranges. Any node connecting from these is automatically\n     // whitelisted (as well as those connecting to whitelisted binds).\n@@ -613,6 +614,14 @@ class CNode\n     static bool Unban(const CNetAddr &ip);\n     static bool Unban(const CSubNet &ip);\n     static void GetBanned(std::map<CSubNet, int64_t> &banmap);\n+    static void SetBanned(const std::map<CSubNet, int64_t> &banmap);\n+\n+    //!check is the banlist has unwritten changes\n+    static bool BannedSetIsDirty();\n+    //!set the \"dirty\" flag for the banlist\n+    static void SetBannedSetDirty(bool dirty=true);\n+    //!clean unused entires (if bantime has expired)\n+    static void SweepBanned();\n \n     void copyStats(CNodeStats &stats);\n \n@@ -644,4 +653,17 @@ class CAddrDB\n     bool Read(CAddrMan& addr);\n };\n \n+/** Access to the banlist database (banlist.dat) */\n+class CBanDB\n+{\n+private:\n+    boost::filesystem::path pathBanlist;\n+public:\n+    CBanDB();\n+    bool Write(const std::map<CSubNet, int64_t>& banSet);\n+    bool Read(std::map<CSubNet, int64_t>& banSet);\n+};\n+\n+void DumpBanlist();\n+\n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "48c2d3455ef1f6b517e05c61e960938aba9551f3",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
        "patch": "@@ -126,6 +126,15 @@ class CSubNet\n         friend bool operator==(const CSubNet& a, const CSubNet& b);\n         friend bool operator!=(const CSubNet& a, const CSubNet& b);\n         friend bool operator<(const CSubNet& a, const CSubNet& b);\n+\n+        ADD_SERIALIZE_METHODS;\n+\n+        template <typename Stream, typename Operation>\n+        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+            READWRITE(network);\n+            READWRITE(FLATDATA(netmask));\n+            READWRITE(FLATDATA(valid));\n+        }\n };\n \n /** A combination of a network address (CNetAddr) and a (TCP) port */"
      },
      {
        "sha": "0c3745a7da1732a6f9f22850a9c49bbc790745e3",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f581d3d656cf269ea09ac6f130f4bd70b40a9e55/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
        "patch": "@@ -527,6 +527,7 @@ UniValue setban(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_MISC_ERROR, \"Error: Unban failed\");\n     }\n \n+    DumpBanlist(); //store banlist to disk\n     return NullUniValue;\n }\n \n@@ -568,6 +569,7 @@ UniValue clearbanned(const UniValue& params, bool fHelp)\n                             );\n \n     CNode::ClearBanned();\n+    DumpBanlist(); //store banlist to disk\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmExNzRjMjk1N2YyNjAwZjA1YmYwZWU5ZGQxN2ZlMThmYjU0ZmQ3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-26T13:21:59Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-02T18:29:36Z"
      },
      "message": "CAddrDB/CBanDB: change filesize variables from int to uint64_t",
      "tree": {
        "sha": "c6bed078f0ef76b2a9ae3e0b7f6fd2e69557a470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6bed078f0ef76b2a9ae3e0b7f6fd2e69557a470"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f581d3d656cf269ea09ac6f130f4bd70b40a9e55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f581d3d656cf269ea09ac6f130f4bd70b40a9e55"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "03db1f06a4c46a74701f7d00fc4638141e3ff4e2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7",
        "patch": "@@ -1973,11 +1973,11 @@ bool CAddrDB::Read(CAddrMan& addr)\n         return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n-    int fileSize = boost::filesystem::file_size(pathAddr);\n-    int dataSize = fileSize - sizeof(uint256);\n+    uint64_t fileSize = boost::filesystem::file_size(pathAddr);\n+    uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n-    if (dataSize < 0)\n-        dataSize = 0;\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n     vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;\n@@ -2230,11 +2230,11 @@ bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n         return error(\"%s: Failed to open file %s\", __func__, pathBanlist.string());\n \n     // use file size to size memory buffer\n-    int fileSize = boost::filesystem::file_size(pathBanlist);\n-    int dataSize = fileSize - sizeof(uint256);\n+    uint64_t fileSize = boost::filesystem::file_size(pathBanlist);\n+    uint64_t dataSize = 0;\n     // Don't try to resize to a negative number if file is small\n-    if (dataSize < 0)\n-        dataSize = 0;\n+    if (fileSize >= sizeof(uint256))\n+        dataSize = fileSize - sizeof(uint256);\n     vector<unsigned char> vchData;\n     vchData.resize(dataSize);\n     uint256 hashIn;"
      }
    ]
  },
  {
    "sha": "409bccfbf52b531b2a9d60ac2308f56223931a2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDliY2NmYmY1MmI1MzFiMmE5ZDYwYWMyMzA4ZjU2MjIzOTMxYTJl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-26T19:38:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-02T18:29:36Z"
      },
      "message": "use CBanEntry as object container for banned nodes\n\n- added a reason enum for a ban\n- added creation time for a ban\n\nUsing CBanEntry as container will keep banlist.dat extenable.",
      "tree": {
        "sha": "fb1f19b73ccad0f597fcd1dc3dc240843a728ccd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb1f19b73ccad0f597fcd1dc3dc240843a728ccd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/409bccfbf52b531b2a9d60ac2308f56223931a2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409bccfbf52b531b2a9d60ac2308f56223931a2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/409bccfbf52b531b2a9d60ac2308f56223931a2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409bccfbf52b531b2a9d60ac2308f56223931a2e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfa174c2957f2600f05bf0ee9dd17fe18fb54fd7"
      }
    ],
    "stats": {
      "total": 143,
      "additions": 106,
      "deletions": 37
    },
    "files": [
      {
        "sha": "a000a81fd94e71e137d07e1e0e29fb5767677e21",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=409bccfbf52b531b2a9d60ac2308f56223931a2e",
        "patch": "@@ -4959,7 +4959,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     LogPrintf(\"Warning: not banning local peer %s!\\n\", pto->addr.ToString());\n                 else\n                 {\n-                    CNode::Ban(pto->addr);\n+                    CNode::Ban(pto->addr, BanReasonNodeMisbehaving);\n                 }\n             }\n             state.fShouldBan = false;"
      },
      {
        "sha": "ade34f57540576b7ed6322f87f891ee272bd7d9a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 23,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=409bccfbf52b531b2a9d60ac2308f56223931a2e",
        "patch": "@@ -443,7 +443,7 @@ void CNode::PushVersion()\n \n \n \n-std::map<CSubNet, int64_t> CNode::setBanned;\n+banmap_t CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n bool CNode::setBannedIsDirty;\n \n@@ -459,12 +459,12 @@ bool CNode::IsBanned(CNetAddr ip)\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        for (std::map<CSubNet, int64_t>::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n+        for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n         {\n             CSubNet subNet = (*it).first;\n-            int64_t t = (*it).second;\n+            CBanEntry banEntry = (*it).second;\n \n-            if(subNet.Match(ip) && GetTime() < t)\n+            if(subNet.Match(ip) && GetTime() < banEntry.nBanUntil)\n                 fResult = true;\n         }\n     }\n@@ -476,30 +476,36 @@ bool CNode::IsBanned(CSubNet subnet)\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        std::map<CSubNet, int64_t>::iterator i = setBanned.find(subnet);\n+        banmap_t::iterator i = setBanned.find(subnet);\n         if (i != setBanned.end())\n         {\n-            int64_t t = (*i).second;\n-            if (GetTime() < t)\n+            CBanEntry banEntry = (*i).second;\n+            if (GetTime() < banEntry.nBanUntil)\n                 fResult = true;\n         }\n     }\n     return fResult;\n }\n \n-void CNode::Ban(const CNetAddr& addr, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+void CNode::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n     CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n-    Ban(subNet, bantimeoffset, sinceUnixEpoch);\n+    Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n }\n \n-void CNode::Ban(const CSubNet& subNet, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n-    if (bantimeoffset > 0)\n-        banTime = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n+void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n+    CBanEntry banEntry(GetTime());\n+    banEntry.banReason = banReason;\n+    if (bantimeoffset <= 0)\n+    {\n+        bantimeoffset = GetArg(\"-bantime\", 60*60*24); // Default 24-hour ban\n+        sinceUnixEpoch = false;\n+    }\n+    banEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;\n+\n \n     LOCK(cs_setBanned);\n-    if (setBanned[subNet] < banTime)\n-        setBanned[subNet] = banTime;\n+    if (setBanned[subNet].nBanUntil < banEntry.nBanUntil)\n+        setBanned[subNet] = banEntry;\n \n     setBannedIsDirty = true;\n }\n@@ -519,13 +525,13 @@ bool CNode::Unban(const CSubNet &subNet) {\n     return false;\n }\n \n-void CNode::GetBanned(std::map<CSubNet, int64_t> &banMap)\n+void CNode::GetBanned(banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n     banMap = setBanned; //create a thread safe copy\n }\n \n-void CNode::SetBanned(const std::map<CSubNet, int64_t> &banMap)\n+void CNode::SetBanned(const banmap_t &banMap)\n {\n     LOCK(cs_setBanned);\n     setBanned = banMap;\n@@ -537,10 +543,11 @@ void CNode::SweepBanned()\n     int64_t now = GetTime();\n \n     LOCK(cs_setBanned);\n-    std::map<CSubNet, int64_t>::iterator it = setBanned.begin();\n+    banmap_t::iterator it = setBanned.begin();\n     while(it != setBanned.end())\n     {\n-        if(now > (*it).second)\n+        CBanEntry banEntry = (*it).second;\n+        if(now > banEntry.nBanUntil)\n         {\n             setBanned.erase(it++);\n             setBannedIsDirty = true;\n@@ -1708,7 +1715,7 @@ void StartNode(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     //try to read stored banlist\n     CBanDB bandb;\n-    std::map<CSubNet, int64_t> banmap;\n+    banmap_t banmap;\n     if (!bandb.Read(banmap))\n         LogPrintf(\"Invalid or missing banlist.dat; recreating\\n\");\n \n@@ -2183,7 +2190,7 @@ CBanDB::CBanDB()\n     pathBanlist = GetDataDir() / \"banlist.dat\";\n }\n \n-bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n+bool CBanDB::Write(const banmap_t& banSet)\n {\n     // Generate random temporary filename\n     unsigned short randv = 0;\n@@ -2221,7 +2228,7 @@ bool CBanDB::Write(const std::map<CSubNet, int64_t>& banSet)\n     return true;\n }\n \n-bool CBanDB::Read(std::map<CSubNet, int64_t>& banSet)\n+bool CBanDB::Read(banmap_t& banSet)\n {\n     // open input file, and associate with CAutoFile\n     FILE *file = fopen(pathBanlist.string().c_str(), \"rb\");\n@@ -2282,7 +2289,7 @@ void DumpBanlist()\n     CNode::SweepBanned(); //clean unused entires (if bantime has expired)\n \n     CBanDB bandb;\n-    std::map<CSubNet, int64_t> banmap;\n+    banmap_t banmap;\n     CNode::GetBanned(banmap);\n     bandb.Write(banmap);\n "
      },
      {
        "sha": "f15b85474f806190395f3e108a78b0e61d7c014d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 65,
        "deletions": 7,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=409bccfbf52b531b2a9d60ac2308f56223931a2e",
        "patch": "@@ -228,8 +228,66 @@ class CNetMessage {\n };\n \n \n+typedef enum BanReason\n+{\n+    BanReasonUnknown          = 0,\n+    BanReasonNodeMisbehaving  = 1,\n+    BanReasonManuallyAdded    = 2\n+} BanReason;\n+\n+class CBanEntry\n+{\n+public:\n+    static const int CURRENT_VERSION=1;\n+    int nVersion;\n+    int64_t nCreateTime;\n+    int64_t nBanUntil;\n+    uint8_t banReason;\n+\n+    CBanEntry()\n+    {\n+        SetNull();\n+    }\n+\n+    CBanEntry(int64_t nCreateTimeIn)\n+    {\n+        SetNull();\n+        nCreateTime = nCreateTimeIn;\n+    }\n \n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(this->nVersion);\n+        nVersion = this->nVersion;\n+        READWRITE(nCreateTime);\n+        READWRITE(nBanUntil);\n+        READWRITE(banReason);\n+    }\n+\n+    void SetNull()\n+    {\n+        nVersion = CBanEntry::CURRENT_VERSION;\n+        nCreateTime = 0;\n+        nBanUntil = 0;\n+        banReason = BanReasonUnknown;\n+    }\n+\n+    std::string banReasonToString()\n+    {\n+        switch (banReason) {\n+        case BanReasonNodeMisbehaving:\n+            return \"node misbehabing\";\n+        case BanReasonManuallyAdded:\n+            return \"manually added\";\n+        default:\n+            return \"unknown\";\n+        }\n+    }\n+};\n \n+typedef std::map<CSubNet, CBanEntry> banmap_t;\n \n /** Information about a peer */\n class CNode\n@@ -285,7 +343,7 @@ class CNode\n \n     // Denial-of-service detection/prevention\n     // Key is IP address, value is banned-until-time\n-    static std::map<CSubNet, int64_t> setBanned;\n+    static banmap_t setBanned;\n     static CCriticalSection cs_setBanned;\n     static bool setBannedIsDirty;\n \n@@ -609,12 +667,12 @@ class CNode\n     static void ClearBanned(); // needed for unit testing\n     static bool IsBanned(CNetAddr ip);\n     static bool IsBanned(CSubNet subnet);\n-    static void Ban(const CNetAddr &ip, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n-    static void Ban(const CSubNet &subNet, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    static void Ban(const CNetAddr &ip, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n+    static void Ban(const CSubNet &subNet, const BanReason &banReason, int64_t bantimeoffset = 0, bool sinceUnixEpoch = false);\n     static bool Unban(const CNetAddr &ip);\n     static bool Unban(const CSubNet &ip);\n-    static void GetBanned(std::map<CSubNet, int64_t> &banmap);\n-    static void SetBanned(const std::map<CSubNet, int64_t> &banmap);\n+    static void GetBanned(banmap_t &banmap);\n+    static void SetBanned(const banmap_t &banmap);\n \n     //!check is the banlist has unwritten changes\n     static bool BannedSetIsDirty();\n@@ -660,8 +718,8 @@ class CBanDB\n     boost::filesystem::path pathBanlist;\n public:\n     CBanDB();\n-    bool Write(const std::map<CSubNet, int64_t>& banSet);\n-    bool Read(std::map<CSubNet, int64_t>& banSet);\n+    bool Write(const banmap_t& banSet);\n+    bool Read(banmap_t& banSet);\n };\n \n void DumpBanlist();"
      },
      {
        "sha": "dd631905fd478a8a4c655541dc8c456115097b9a",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=409bccfbf52b531b2a9d60ac2308f56223931a2e",
        "patch": "@@ -515,7 +515,7 @@ UniValue setban(const UniValue& params, bool fHelp)\n         if (params.size() == 4 && params[3].isTrue())\n             absolute = true;\n \n-        isSubnet ? CNode::Ban(subNet, banTime, absolute) : CNode::Ban(netAddr, banTime, absolute);\n+        isSubnet ? CNode::Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : CNode::Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n \n         //disconnect possible nodes\n         while(CNode *bannedNode = (isSubnet ? FindNode(subNet) : FindNode(netAddr)))\n@@ -542,15 +542,19 @@ UniValue listbanned(const UniValue& params, bool fHelp)\n                             + HelpExampleRpc(\"listbanned\", \"\")\n                             );\n \n-    std::map<CSubNet, int64_t> banMap;\n+    banmap_t banMap;\n     CNode::GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n-    for (std::map<CSubNet, int64_t>::iterator it = banMap.begin(); it != banMap.end(); it++)\n+    for (banmap_t::iterator it = banMap.begin(); it != banMap.end(); it++)\n     {\n+        CBanEntry banEntry = (*it).second;\n         UniValue rec(UniValue::VOBJ);\n         rec.push_back(Pair(\"address\", (*it).first.ToString()));\n-        rec.push_back(Pair(\"banned_untill\", (*it).second));\n+        rec.push_back(Pair(\"banned_until\", banEntry.nBanUntil));\n+        rec.push_back(Pair(\"ban_created\", banEntry.nCreateTime));\n+        rec.push_back(Pair(\"ban_reason\", banEntry.banReasonToString()));\n+\n         bannedAddresses.push_back(rec);\n     }\n "
      },
      {
        "sha": "9e99ff62862c49ec6d28e0254e11852ac394534d",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/409bccfbf52b531b2a9d60ac2308f56223931a2e/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=409bccfbf52b531b2a9d60ac2308f56223931a2e",
        "patch": "@@ -199,7 +199,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n-    UniValue banned_until = find_value(o1, \"banned_untill\");\n+    UniValue banned_until = find_value(o1, \"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n     BOOST_CHECK_EQUAL(banned_until.get_int64(), 1607731200); // absolute time check\n \n@@ -210,7 +210,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     ar = r.get_array();\n     o1 = ar[0].get_obj();\n     adr = find_value(o1, \"address\");\n-    banned_until = find_value(o1, \"banned_untill\");\n+    banned_until = find_value(o1, \"banned_until\");\n     BOOST_CHECK_EQUAL(adr.get_str(), \"127.0.0.0/255.255.255.0\");\n     int64_t now = GetTime();    \n     BOOST_CHECK(banned_until.get_int64() > now);"
      }
    ]
  },
  {
    "sha": "177a0e491449b9accfa0cf17c138147539071358",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzdhMGU0OTE0NDliOWFjY2ZhMGNmMTdjMTM4MTQ3NTM5MDcxMzU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-06-29T18:37:22Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-07-02T18:44:27Z"
      },
      "message": "Adding CSubNet constructor over a single CNetAddr",
      "tree": {
        "sha": "163b252ea7c7204017187f1e0e32ce12831fb7f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/163b252ea7c7204017187f1e0e32ce12831fb7f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/177a0e491449b9accfa0cf17c138147539071358",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177a0e491449b9accfa0cf17c138147539071358",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/177a0e491449b9accfa0cf17c138147539071358",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/177a0e491449b9accfa0cf17c138147539071358/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "409bccfbf52b531b2a9d60ac2308f56223931a2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/409bccfbf52b531b2a9d60ac2308f56223931a2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/409bccfbf52b531b2a9d60ac2308f56223931a2e"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "950311ee3a9e36db470cb00282639c9ba228494d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177a0e491449b9accfa0cf17c138147539071358/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177a0e491449b9accfa0cf17c138147539071358/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=177a0e491449b9accfa0cf17c138147539071358",
        "patch": "@@ -488,7 +488,7 @@ bool CNode::IsBanned(CSubNet subnet)\n }\n \n void CNode::Ban(const CNetAddr& addr, const BanReason &banReason, int64_t bantimeoffset, bool sinceUnixEpoch) {\n-    CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n+    CSubNet subNet(addr);\n     Ban(subNet, banReason, bantimeoffset, sinceUnixEpoch);\n }\n \n@@ -511,7 +511,7 @@ void CNode::Ban(const CSubNet& subNet, const BanReason &banReason, int64_t banti\n }\n \n bool CNode::Unban(const CNetAddr &addr) {\n-    CSubNet subNet(addr.ToString()+(addr.IsIPv4() ? \"/32\" : \"/128\"));\n+    CSubNet subNet(addr);\n     return Unban(subNet);\n }\n "
      },
      {
        "sha": "c9fc7d67f7cc85b701cb5db8a5ce571f8fa5ea5f",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177a0e491449b9accfa0cf17c138147539071358/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177a0e491449b9accfa0cf17c138147539071358/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=177a0e491449b9accfa0cf17c138147539071358",
        "patch": "@@ -1291,6 +1291,13 @@ CSubNet::CSubNet(const std::string &strSubnet, bool fAllowLookup)\n         network.ip[x] &= netmask[x];\n }\n \n+CSubNet::CSubNet(const CNetAddr &addr):\n+    valid(addr.IsValid())\n+{\n+    memset(netmask, 255, sizeof(netmask));\n+    network = addr;\n+}\n+\n bool CSubNet::Match(const CNetAddr &addr) const\n {\n     if (!valid || !addr.IsValid())"
      },
      {
        "sha": "6f8882b8527a5c2846bfc0e331200d6664c902e7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177a0e491449b9accfa0cf17c138147539071358/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177a0e491449b9accfa0cf17c138147539071358/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=177a0e491449b9accfa0cf17c138147539071358",
        "patch": "@@ -118,6 +118,9 @@ class CSubNet\n         CSubNet();\n         explicit CSubNet(const std::string &strSubnet, bool fAllowLookup = false);\n \n+        //constructor for single ip subnet (<ipv4>/32 or <ipv6>/128)\n+        explicit CSubNet(const CNetAddr &addr);\n+\n         bool Match(const CNetAddr &addr) const;\n \n         std::string ToString() const;"
      },
      {
        "sha": "7154476c7c21d50e74a496a85fc413efff098591",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/177a0e491449b9accfa0cf17c138147539071358/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/177a0e491449b9accfa0cf17c138147539071358/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=177a0e491449b9accfa0cf17c138147539071358",
        "patch": "@@ -143,6 +143,17 @@ BOOST_AUTO_TEST_CASE(subnet_test)\n     BOOST_CHECK(CSubNet(\"1:2:3:4:5:6:7:8/128\").IsValid());\n     BOOST_CHECK(!CSubNet(\"1:2:3:4:5:6:7:8/129\").IsValid());\n     BOOST_CHECK(!CSubNet(\"fuzzy\").IsValid());\n+\n+    //CNetAddr constructor test\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).IsValid());\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.1\")));\n+    BOOST_CHECK(!CSubNet(CNetAddr(\"127.0.0.1\")).Match(CNetAddr(\"127.0.0.2\")));\n+    BOOST_CHECK(CSubNet(CNetAddr(\"127.0.0.1\")).ToString() == \"127.0.0.1/255.255.255.255\");\n+\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).IsValid());\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:8\")));\n+    BOOST_CHECK(!CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).Match(CNetAddr(\"1:2:3:4:5:6:7:9\")));\n+    BOOST_CHECK(CSubNet(CNetAddr(\"1:2:3:4:5:6:7:8\")).ToString() == \"1:2:3:4:5:6:7:8/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff\");\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]