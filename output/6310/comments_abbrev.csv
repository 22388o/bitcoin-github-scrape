jgarzik,2015-06-19T15:53:51Z,"Nice feature.  RE -storebanlist, the system should default to storing.   Users may disable.\n\nOr don't create an option at all -- same as CAddrDB, user may delete file to clear the list.\n",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-113555161,113555161,
Diapolo,2015-06-19T19:52:25Z,I'd also vote for treating this the same as peers.dat and don't add an option for it.\n,https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-113624098,113624098,
dexX7,2015-06-26T00:08:47Z,"> @jgarzik: RE -storebanlist, the system should default to storing. Users may disable.\n\nThis seems risky in my opinion, because not all IPs are static, and they don't necessarily always belong to the same node.\n",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115435212,115435212,
sipa,2015-06-26T00:47:13Z,dexX7: that is why all bans are temporary.\n\njonasschnelli: I think defaulting to storing them is perfectly fine (or\neven not offering the option).\n,https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115447766,115447766,
jonasschnelli,2015-06-26T07:15:09Z,"@jgarziks way of resetting the banlist (by removing banlist.dat) is very straightforward and doesn't need any explanation. I'd like to avoid another cmd arg option to not end up in having thousands of tiny options.\n\nNode misbehaving bans are by default 24h. All other bans needs conscious actions from the users.\nThe chance that your node accidentally get an IP out of a dynamic range, where the p",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115555420,115555420,
laanwj,2015-06-26T11:21:18Z,"Concept ACK, also agree that defaulting to store bans is perfectly fine (so is not offering an option).\n\nAs any kind of persistence commits to a format it is good to think forward a bit what should be included: would it make sense to add e.g. a ""ban source"" enum field, that specifies whether the ban is automatic or manual?\n",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115650574,115650574,
jonasschnelli,2015-06-26T13:52:55Z,"I like the idea of storing the ""ban source"". Because we now keep/dump a serialized `std::map<CSubNet, int64_t>` everything beyond that would be a bigger change. We should probably introduce a simple class for the banlist entry like `class CBanEntry { int64_t bantime, enum banSource }`. This might also be capable of allowing ban distinction between multiple bans on the same IP but with different po",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115697741,115697741,
laanwj,2015-06-26T15:20:40Z,"> We should probably introduce a simple class for the banlist entry like class CBanEntry { int64_t bantime, enum banSource }\n\nRight. That would also allow for versioning in serialization.\n\n> This might also be capable of allowing ban distinction between multiple bans on the same IP but with different ports\n\nThis might be overdoing it; at least I don't see much added value in per-port bans, a",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115726862,115726862,
Diapolo,2015-06-26T15:27:51Z,"@laanwj Think about per port bans with incoming Tor/proxy connections, they're all 127.0.0.1 and when I currently ban a single 127.0.0.1 with a specific port all further connection attempts are blocked until bantime is over. Not sure if this is to solve in any way.\n",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115730290,115730290,
laanwj,2015-06-26T15:33:04Z,"@Diapolo That simply won't work. As I try to explain above, source ports aren't unique nor identifying.\n",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115733060,115733060,
Diapolo,2015-06-26T15:55:22Z,"@laanwj Indeed, my fault... but should be warned when banning 127.0.0.1 or do you assume people know what they are banning?\n",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115739326,115739326,
jonasschnelli,2015-06-26T19:58:22Z,"Followed and implemented @laanwj s proposal.\nAdded `CBanEntry` as ban metadata container which uses `enum BanReason` (`BanReasonNodeMisbehaving`, `BanReasonManuallyAdded`). Also added `nCreateTime` within the new metadata class, to allow to backtrack when a ban was added/created.\nUsing now everywhere the typedef `std::map<CSubNet, CBanEntry> banmap_t`.\n\nNow the `banlist.dat` file is extendable",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-115857001,115857001,
laanwj,2015-06-29T14:50:53Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-116713725,116713725,
ajweiss,2015-06-29T18:33:31Z,"I have an unsubmitted patch that also adds ""remembering"" of ban scores associated by IP address across disconnects over a time window (24h I think).  That is, it prevents malicious nodes from carrying out sawtooth attacks where they can reset their ban score by disconnecting and reconnecting before being banned.  There are pros (prevents malicious behavior) and cons (tightens up the rules and incr",https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-116788718,116788718,
laanwj,2015-07-02T18:17:32Z,@ajweiss Not sure about that. At least make sure that the associated structure is size-limited. Especially with IPv6 it will be extremely easy to fill memory that way. But this needs to be  discussed somewhere else as it is not related to this pull.\n,https://github.com/bitcoin/bitcoin/pull/6310#issuecomment-118114715,118114715,
Diapolo,2015-06-19T19:55:25Z,Not sure if this is best to use an int here... what is file_size returning?\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863378,32863378,src/net.cpp
Diapolo,2015-06-19T19:56:33Z,Maybe you could use std:: so we can get rid of using namespace std; easier :)?\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863463,32863463,src/net.cpp
jonasschnelli,2015-06-19T19:58:50Z,Do you expect users with more then 2GB of banned node data?\nI have taken this approach from CAddrDB 1:1. But i agree file sizes should be held in `uint64_t` or in `size_t` if they are not serialized/shared anywhere.\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863654,32863654,src/net.cpp
Diapolo,2015-06-19T20:00:46Z,"I think it's plenty of space, but we should be 100% sure we don't overflow IMHO? Yeah there are more parts in the code that don't do that.\n",https://github.com/bitcoin/bitcoin/pull/6310#discussion_r32863840,32863840,src/net.cpp
laanwj,2015-06-26T11:20:54Z,"Right: to be precise, file sizes should be `uint64_t`, not `size_t`. Remember that size_t depends on the address width, it is for in-memory sizes.\n",https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33347282,33347282,src/net.cpp
jonasschnelli,2015-06-26T13:22:34Z,Agreed. Changed from `int` to `uint64_t` (also in `CAddDB`).\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33354739,33354739,src/net.cpp
laanwj,2015-06-29T14:49:45Z,`s/untill/until/` I suppose?\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33471202,33471202,src/rpcnet.cpp
laanwj,2015-06-29T14:53:32Z,"Hhmm at some point we should add a CSubNet constructor or factory function that makes a subnet with one unique `CNetAddr` (netmask all ones), and use that, instead of going through a string. Not a big deal, though.\n",https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33471651,33471651,src/net.cpp
laanwj,2015-06-29T15:04:26Z,"maybe\n\n```\nif (bantimeoffset <= 0)\n{\n    bantimeoffset = GetArg(""-bantime"", 60*60*24); // Default 24-hour ban\n    sinceUnixEpoch = false;\n}\nbanEntry.nBanUntil = (sinceUnixEpoch ? 0 : GetTime() )+bantimeoffset;    \n```\n\n(slightly cleaner, not calling GetTime() twice)\n",https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33472954,33472954,src/net.cpp
jonasschnelli,2015-06-29T18:04:45Z,> s/untill/until/ I suppose?\n\nFixed typo.\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33492892,33492892,src/rpcnet.cpp
jonasschnelli,2015-06-29T18:05:41Z,Yes. This makes more sense. Fixed and pushed.\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33492993,33492993,src/net.cpp
jonasschnelli,2015-06-29T18:40:25Z,"> Hhmm at some point we should add a CSubNet constructor or factory function that makes a subnet with one unique CNetAddr (netmask all ones), and use that, instead of going through a string. Not a big deal, though.\n\nRight. Added (see latest commit). If we don't add it now, it probably will never be added.\n",https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33497028,33497028,src/net.cpp
laanwj,2015-07-02T18:22:37Z,"Thanks. But this seems a bit circuitous. Let's do just:\n\n``` c++\nCSubNet::CSubNet(const CNetAddr &addr, bool fAllowLookup):\n    valid(addr.IsValid())\n{\n    memset(netmask, 255, sizeof(netmask));\n    network = addr;\n}\n```\n\nAlso the fAllowLookup parameter is unnecessary. It should never be needed to look up anything when going from an already binary address.\n\n**Edit**: added initializat",https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33807337,33807337,src/netbase.cpp
jonasschnelli,2015-07-02T18:38:01Z,Right. Wasn't aware of the `LookupHost()` in the `CNetAddr::CNetAddr()` constructor.\nFixed and pushed.\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33808905,33808905,src/netbase.cpp
jonasschnelli,2015-07-02T18:44:58Z,Right! The isValid must be set explicit. Fixed.\n,https://github.com/bitcoin/bitcoin/pull/6310#discussion_r33809643,33809643,src/netbase.cpp
