hebasto,2021-10-26 11:31:57,cc @achow101 @Sjors @meshcollider @doc-hex @nvk,https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-951844008,951844008,
doc-hex,2021-10-26 13:09:20,- looks useful and simple enough,https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-951922404,951922404,
nvk,2021-10-26 13:12:15,"@hebasto thanks for this, nice to see HW <=> Core getting easier.",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-951925011,951925011,
jamesob,2021-10-26 21:06:09,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-952325398,952325398,
achow101,2021-10-26 22:53:06,-0 on adding device specific code into Core.,https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-952388183,952388183,
Sjors,2021-10-27 09:57:38,"The Coldcard produces a command that the user can copy-paste into the console to perform the import. This PR parses the text file with that command and does the import instead. That seems strange.\n\nI would prefer to see something a bit more generic. E.g. ColdCard and other devices could produce a text file with just descriptors in it, and/or some other wallet metadata. And then we could import",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-952748382,952748382,
fanquake,2021-10-27 14:31:57,"> -0 on adding device specific code into Core.\n> I would prefer to see something a bit more generic\n\nI agree. Wouldn't the HWI or a similar project be a better place for this? I don't really think we should be adding vendor specific code/calls into Bitcoin Core utilities. Or, if it is going to be done, it should be done in some very generic way, otherwise we're likely going to just end up wi",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-952990562,952990562,
jamesob,2021-10-27 14:33:58,"> I would prefer to see something a bit more generic. E.g. ColdCard and other devices could produce a text file with just descriptors in it, and/or some other wallet metadata. And then we could import that.\n\nIn hindsight, coldcard fan though I may be, I think @Sjors and @fanquake are right here. Burdening Core with parsing a potentially-unlimited number of vendor-specific data formats doesn't ",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-952992418,952992418,
nvk,2021-10-27 14:39:17,"Selfishly all I want is _easy_ with my preferred tool. But yes, a more vendor neutral approach makes sense. It seems that supporting core is not priority for most vendors, so I really have no good suggestions. Maybe the patch could be generalized to import a series of any commands and/or we could change CC to export comments (#) on all the other lines in the file, etc...",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-952997418,952997418,
hebasto,2021-10-27 15:17:18,"> Wouldn't the HWI or a similar project be a better place for this?\n\nNo. It's practically infeasible for a non-tech-savvy person to create a safe setup of ""Bitcoin Core + python HWI"" on a new Windows laptop. I tested this scenario many times IRL with different users ((\n\nAlso we should not recommend to such a type of users to use Bitcoin Core GUI console at all.\n\n> I would prefer to see",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-953033587,953033587,
lsilva01,2021-10-30 21:39:30,"I agree.\n> Suggest making a BIP for the format, and renaming this to something vendor-neutral.",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-955597030,955597030,
DrahtBot,2021-11-01 21:51:02,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::`",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-956682203,956682203,
laanwj,2021-11-08 18:02:30,"> -0 on adding device specific code into Core.\n\nYes. I'm all for making the flows easy to use with hardware wallets, but supporting specific hardware seems to go a step too far. Also, we don't have the test framework (e.g. device simulation) set up for use-cases like this.\n\n>  No. It's practically infeasible for a non-tech-savvy person to create a safe setup of ""Bitcoin Core + python HWI"" ",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-963420893,963420893,
meshcollider,2021-11-22 02:32:43,"Absolutely agree with the above comments, its definitely an excellent goal to improve integration with hardware wallets but not at the expense of burdening this repository with a bunch of case handling. Look forward to a vendor-independent proposal üëç ",https://github.com/bitcoin/bitcoin/pull/23362#issuecomment-975017000,975017000,
mjdietzx,2021-10-26 22:34:58,"What are your thoughts on using regex from the standard library for this? https://www.cplusplus.com/reference/regex/\n\nAs someone not familiar w/ coldcard files, it would be much easier for me to understand this (ie the hardcoded string positions here, and at L138). It could possibly simplify this a bit and make it easier to read if we pulled the descriptor from the file w/ a regex",https://github.com/bitcoin/bitcoin/pull/23362#discussion_r736972249,736972249,src/wallet/wallettool.cpp
