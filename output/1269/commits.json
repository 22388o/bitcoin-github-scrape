[
  {
    "sha": "c6aa86afc2fe8995bcb1036c9879f85ef335e295",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmFhODZhZmMyZmU4OTk1YmNiMTAzNmM5ODc5Zjg1ZWYzMzVlMjk1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-12T10:30:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-12T16:39:26Z"
      },
      "message": "Convert RPC console to QTextEdit instead of QTableView\n\n* This allows copy/pasting whole or partial messages\n* Handle output more consistently in console\n    * No more scrollbars-in-scrollbars: by setting per-pixel scrolling on the table, cells can have any height\n* Decorations for \"request\" and \"reply\" are changed to the txin and txout icons instead of colored squares",
      "tree": {
        "sha": "0fe090f2f4f545204601d732353544a6b611dd8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fe090f2f4f545204601d732353544a6b611dd8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6aa86afc2fe8995bcb1036c9879f85ef335e295",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6aa86afc2fe8995bcb1036c9879f85ef335e295",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6aa86afc2fe8995bcb1036c9879f85ef335e295",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6aa86afc2fe8995bcb1036c9879f85ef335e295/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97ec4e50b128c201c82dd76b28ab44508d85e94f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97ec4e50b128c201c82dd76b28ab44508d85e94f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97ec4e50b128c201c82dd76b28ab44508d85e94f"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 62,
      "deletions": 89
    },
    "files": [
      {
        "sha": "cded27479283972b50406a29afc978fca2dc7511",
        "filename": "src/qt/forms/rpcconsole.ui",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6aa86afc2fe8995bcb1036c9879f85ef335e295/src/qt/forms/rpcconsole.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6aa86afc2fe8995bcb1036c9879f85ef335e295/src/qt/forms/rpcconsole.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/rpcconsole.ui?ref=c6aa86afc2fe8995bcb1036c9879f85ef335e295",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>706</width>\n-    <height>382</height>\n+    <height>446</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -327,30 +327,22 @@\n         <number>3</number>\n        </property>\n        <item>\n-        <widget class=\"QTableWidget\" name=\"messagesWidget\">\n+        <widget class=\"QTextEdit\" name=\"messagesWidget\">\n          <property name=\"minimumSize\">\n           <size>\n            <width>0</width>\n            <height>100</height>\n           </size>\n          </property>\n-         <property name=\"tabKeyNavigation\">\n-          <bool>false</bool>\n+         <property name=\"readOnly\">\n+          <bool>true</bool>\n          </property>\n-         <property name=\"selectionBehavior\">\n-          <enum>QAbstractItemView::SelectRows</enum>\n+         <property name=\"tabKeyNavigation\" stdset=\"0\">\n+          <bool>false</bool>\n          </property>\n-         <property name=\"columnCount\">\n+         <property name=\"columnCount\" stdset=\"0\">\n           <number>2</number>\n          </property>\n-         <attribute name=\"horizontalHeaderVisible\">\n-          <bool>false</bool>\n-         </attribute>\n-         <attribute name=\"verticalHeaderVisible\">\n-          <bool>false</bool>\n-         </attribute>\n-         <column/>\n-         <column/>\n         </widget>\n        </item>\n        <item>"
      },
      {
        "sha": "0f78288542f250e772dcfcb64107b4e0176f2ad4",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 70,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6aa86afc2fe8995bcb1036c9879f85ef335e295/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6aa86afc2fe8995bcb1036c9879f85ef335e295/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c6aa86afc2fe8995bcb1036c9879f85ef335e295",
        "patch": "@@ -10,6 +10,7 @@\n #include <QThread>\n #include <QTextEdit>\n #include <QKeyEvent>\n+#include <QUrl>\n \n #include <boost/tokenizer.hpp>\n \n@@ -19,6 +20,19 @@\n const int CONSOLE_SCROLLBACK = 50;\n const int CONSOLE_HISTORY = 50;\n \n+const QSize ICON_SIZE(24, 24);\n+\n+const struct {\n+    const char *url;\n+    const char *source;\n+} ICON_MAPPING[] = {\n+    {\"cmd-request\", \":/icons/tx_input\"},\n+    {\"cmd-reply\", \":/icons/tx_output\"},\n+    {\"cmd-error\", \":/icons/tx_output\"},\n+    {\"misc\", \":/icons/tx_inout\"},\n+    {NULL, NULL}\n+};\n+\n /* Object for executing console RPC commands in a separate thread.\n */\n class RPCExecutor: public QObject\n@@ -83,12 +97,9 @@ void RPCExecutor::request(const QString &command)\n RPCConsole::RPCConsole(QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::RPCConsole),\n-    firstLayout(true),\n     historyPtr(0)\n {\n     ui->setupUi(this);\n-    ui->messagesWidget->horizontalHeader()->setResizeMode(1, QHeaderView::Stretch);\n-    ui->messagesWidget->setContextMenuPolicy(Qt::ActionsContextMenu);\n \n #ifndef WIN32\n     // Show Debug logfile label and Open button only for Windows\n@@ -99,13 +110,6 @@ RPCConsole::RPCConsole(QWidget *parent) :\n     // Install event filter for up and down arrow\n     ui->lineEdit->installEventFilter(this);\n \n-    // Add \"Copy message\" to context menu explicitly\n-    QAction *copyMessageAction = new QAction(tr(\"&Copy\"), this);\n-    copyMessageAction->setShortcut(QKeySequence(Qt::CTRL | Qt::Key_C));\n-    copyMessageAction->setShortcutContext(Qt::WidgetShortcut);\n-    connect(copyMessageAction, SIGNAL(triggered()), this, SLOT(copyMessage()));\n-    ui->messagesWidget->addAction(copyMessageAction);\n-\n     connect(ui->clearButton, SIGNAL(clicked()), this, SLOT(clear()));\n     connect(ui->openDebugLogfileButton, SIGNAL(clicked()), this, SLOT(on_openDebugLogfileButton_clicked()));\n \n@@ -159,68 +163,62 @@ void RPCConsole::setClientModel(ClientModel *model)\n     }\n }\n \n-static QColor categoryColor(int category)\n+static QString categoryClass(int category)\n {\n     switch(category)\n     {\n-    case RPCConsole::MC_ERROR:     return QColor(255,0,0); break;\n-    case RPCConsole::MC_DEBUG:     return QColor(192,192,192); break;\n-    case RPCConsole::CMD_REQUEST:  return QColor(128,128,128); break;\n-    case RPCConsole::CMD_REPLY:    return QColor(128,255,128); break;\n-    case RPCConsole::CMD_ERROR:    return QColor(255,128,128); break;\n-    default:           return QColor(0,0,0);\n+    case RPCConsole::CMD_REQUEST:  return \"cmd-request\"; break;\n+    case RPCConsole::CMD_REPLY:    return \"cmd-reply\"; break;\n+    case RPCConsole::CMD_ERROR:    return \"cmd-error\"; break;\n+    default:                       return \"misc\";\n     }\n }\n \n void RPCConsole::clear()\n {\n     ui->messagesWidget->clear();\n-    ui->messagesWidget->setRowCount(0);\n     ui->lineEdit->clear();\n     ui->lineEdit->setFocus();\n \n-    message(CMD_REPLY, tr(\"Welcome to the bitcoin RPC console.\")+\"\\n\"+\n-                       tr(\"Use up and down arrows to navigate history, and Ctrl-L to clear screen.\")+\"\\n\"+\n-                       tr(\"Type \\\"help\\\" for an overview of available commands.\"));\n+    // Add smoothly scaled icon images.\n+    // (when using width/height on an img, Qt uses nearest instead of linear interpolation)\n+    for(int i=0; ICON_MAPPING[i].url; ++i)\n+    {\n+        ui->messagesWidget->document()->addResource(\n+                    QTextDocument::ImageResource,\n+                    QUrl(ICON_MAPPING[i].url),\n+                    QImage(ICON_MAPPING[i].source).scaled(ICON_SIZE, Qt::IgnoreAspectRatio, Qt::SmoothTransformation));\n+    }\n+\n+    // Set default style sheet\n+    ui->messagesWidget->document()->setDefaultStyleSheet(\n+                \"table { }\"\n+                \"td.time { color: #808080; padding-top: 3px; } \"\n+                \"td.message { font-family: Monospace; font-size: 12px; } \"\n+                \"td.cmd-request { color: #006060; } \"\n+                \"td.cmd-error { color: red; } \"\n+                \"b { color: #006060; } \"\n+                );\n+\n+    message(CMD_REPLY, tr(\"Welcome to the Bitcoin RPC console.<br>\"\n+                          \"Use up and down arrows to navigate history, and <b>Ctrl-L</b> to clear screen.<br>\"\n+                          \"Type <b>help</b> for an overview of available commands.\"), true);\n }\n \n-void RPCConsole::message(int category, const QString &message)\n+void RPCConsole::message(int category, const QString &message, bool html)\n {\n-    // Add row to messages widget\n-    int row = ui->messagesWidget->rowCount();\n-    ui->messagesWidget->setRowCount(row+1);\n-\n     QTime time = QTime::currentTime();\n-    QTableWidgetItem *newTime = new QTableWidgetItem(time.toString());\n-    newTime->setData(Qt::DecorationRole, categoryColor(category));\n-    newTime->setForeground(QColor(128,128,128));\n-    newTime->setFlags(Qt::ItemIsSelectable|Qt::ItemIsEnabled); // make non-editable\n-\n-    int numLines = message.count(\"\\n\") + 1;\n-    // As Qt doesn't like very tall cells (they break scrolling) keep only short messages in\n-    // the cell text, longer messages trigger a display widget with scroll bar\n-    if(numLines < 5)\n-    {\n-        QTableWidgetItem *newItem = new QTableWidgetItem(message);\n-        newItem->setFlags(Qt::ItemIsSelectable|Qt::ItemIsEnabled); // make non-editable\n-        if(category == CMD_ERROR) // Coloring error messages in red\n-            newItem->setForeground(QColor(255,16,16));\n-        ui->messagesWidget->setItem(row, 1, newItem);\n-    } else {\n-        QTextEdit *newWidget = new QTextEdit;\n-        newWidget->setText(message);\n-        newWidget->setMaximumHeight(100);\n-        newWidget->setReadOnly(true);\n-        ui->messagesWidget->setCellWidget(row, 1, newWidget);\n-    }\n-\n-    ui->messagesWidget->setItem(row, 0, newTime);\n-    ui->messagesWidget->resizeRowToContents(row);\n-    // Preserve only limited scrollback buffer\n-    while(ui->messagesWidget->rowCount() > CONSOLE_SCROLLBACK)\n-        ui->messagesWidget->removeRow(0);\n-    // Scroll to bottom after table is updated\n-    QTimer::singleShot(0, ui->messagesWidget, SLOT(scrollToBottom()));\n+    QString timeString = time.toString();\n+    QString out;\n+    out += \"<table><tr><td class=\\\"time\\\" width=\\\"65\\\">\" + timeString + \"</td>\";\n+    out += \"<td class=\\\"icon\\\" width=\\\"32\\\"><img src=\\\"\" + categoryClass(category) + \"\\\"></td>\";\n+    out += \"<td class=\\\"message \" + categoryClass(category) + \"\\\" valign=\\\"middle\\\">\";\n+    if(html)\n+        out += message;\n+    else\n+        out += GUIUtil::HtmlEscape(message, true);\n+    out += \"</td></tr></table>\";\n+    ui->messagesWidget->append(out);\n }\n \n void RPCConsole::setNumConnections(int count)\n@@ -298,24 +296,10 @@ void RPCConsole::startExecutor()\n     thread->start();\n }\n \n-void RPCConsole::copyMessage()\n-{\n-    GUIUtil::copyEntryData(ui->messagesWidget, 1, Qt::EditRole);\n-}\n-\n void RPCConsole::on_tabWidget_currentChanged(int index)\n {\n     if(ui->tabWidget->widget(index) == ui->tab_console)\n     {\n-        if(firstLayout)\n-        {\n-            // Work around QTableWidget issue:\n-            // Call resizeRowsToContents on first Layout request with widget visible,\n-            // to make sure multiline messages that were added before the console was shown\n-            // have the right height.\n-            firstLayout = false;\n-            ui->messagesWidget->resizeRowsToContents();\n-        }\n         ui->lineEdit->setFocus();\n     }\n }"
      },
      {
        "sha": "9c4fab497e80a0572e5679863cd72a52b0fb5f94",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6aa86afc2fe8995bcb1036c9879f85ef335e295/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6aa86afc2fe8995bcb1036c9879f85ef335e295/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=c6aa86afc2fe8995bcb1036c9879f85ef335e295",
        "patch": "@@ -37,15 +37,13 @@ private slots:\n \n public slots:\n     void clear();\n-    void message(int category, const QString &message);\n+    void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks shown in the UI */\n     void setNumBlocks(int count);\n     /** Go forward or back in history */\n     void browseHistory(int offset);\n-    /** Copy currently selected message to clipboard */\n-    void copyMessage();\n \n signals:\n     // For RPC command executor\n@@ -55,7 +53,6 @@ public slots:\n private:\n     Ui::RPCConsole *ui;\n     ClientModel *clientModel;\n-    bool firstLayout;\n     QStringList history;\n     int historyPtr;\n "
      }
    ]
  },
  {
    "sha": "ae744c8b78a78a21cd44e10b65a600ff0c07d250",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTc0NGM4Yjc4YTc4YTIxY2Q0NGUxMGI2NWE2MDBmZjBjMDdkMjUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-12T16:14:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-12T16:39:26Z"
      },
      "message": "RPC console: don't crash on invalid input exception",
      "tree": {
        "sha": "31002ec5ceea502fe011b8e63875f1d74ec4864e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31002ec5ceea502fe011b8e63875f1d74ec4864e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae744c8b78a78a21cd44e10b65a600ff0c07d250",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae744c8b78a78a21cd44e10b65a600ff0c07d250",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae744c8b78a78a21cd44e10b65a600ff0c07d250",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae744c8b78a78a21cd44e10b65a600ff0c07d250/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6aa86afc2fe8995bcb1036c9879f85ef335e295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6aa86afc2fe8995bcb1036c9879f85ef335e295",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6aa86afc2fe8995bcb1036c9879f85ef335e295"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 17,
      "deletions": 10
    },
    "files": [
      {
        "sha": "33b09952b75d06bfba1f0da1ddf6f0c3fc561a80",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 10,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae744c8b78a78a21cd44e10b65a600ff0c07d250/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae744c8b78a78a21cd44e10b65a600ff0c07d250/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=ae744c8b78a78a21cd44e10b65a600ff0c07d250",
        "patch": "@@ -55,19 +55,26 @@ void RPCExecutor::start()\n void RPCExecutor::request(const QString &command)\n {\n     // Parse shell-like command line into separate arguments\n-    boost::escaped_list_separator<char> els('\\\\',' ','\\\"');\n-    std::string strCommand = command.toStdString();\n-    boost::tokenizer<boost::escaped_list_separator<char> > tok(strCommand, els);\n-\n     std::string strMethod;\n     std::vector<std::string> strParams;\n-    int n = 0;\n-    for(boost::tokenizer<boost::escaped_list_separator<char> >::iterator beg=tok.begin(); beg!=tok.end();++beg,++n)\n+    try {\n+        boost::escaped_list_separator<char> els('\\\\',' ','\\\"');\n+        std::string strCommand = command.toStdString();\n+        boost::tokenizer<boost::escaped_list_separator<char> > tok(strCommand, els);\n+\n+        int n = 0;\n+        for(boost::tokenizer<boost::escaped_list_separator<char> >::iterator beg=tok.begin(); beg!=tok.end();++beg,++n)\n+        {\n+            if(n == 0) // First parameter is the command\n+                strMethod = *beg;\n+            else\n+                strParams.push_back(*beg);\n+        }\n+    }\n+    catch(boost::escaped_list_error &e)\n     {\n-        if(n == 0) // First parameter is the command\n-            strMethod = *beg;\n-        else\n-            strParams.push_back(*beg);\n+        emit reply(RPCConsole::CMD_ERROR, QString(\"Parse error\"));\n+        return;\n     }\n \n     try {"
      }
    ]
  }
]