michaelfolkson,2021-01-26 19:02:09,"Concept ACK\n\nCan you [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) your commits @stackman27?",https://github.com/bitcoin/bitcoin/pull/21014#issuecomment-767759198,767759198,
stackman27,2021-01-26 21:00:57,"> Concept ACK\n> \n> Can you [squash](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#squashing-commits) your commits @stackman27?\n\nYes! Should be fine now :) ",https://github.com/bitcoin/bitcoin/pull/21014#issuecomment-767824800,767824800,
DrahtBot,2021-01-27 01:25:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21762 (test: Speed up mempool_spend_coinbase.py by MarcoFalke)\n* #21754 (test: Run feature_cltv with MiniWallet by Marco",https://github.com/bitcoin/bitcoin/pull/21014#issuecomment-767944191,767944191,
DrahtBot,2021-04-29 07:10:22,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21014#issuecomment-828993870,828993870,
MarcoFalke,2021-07-18 13:53:50,Are you still working on this? Otherwise someone else could pick this up.,https://github.com/bitcoin/bitcoin/pull/21014#issuecomment-882059833,882059833,
MarcoFalke,2021-07-20 18:36:39,Picked up in #22509 ,https://github.com/bitcoin/bitcoin/pull/21014#issuecomment-883609446,883609446,
0xB10C,2021-01-28 09:38:28,Why do we +1 here?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r565947664,565947664,test/functional/mempool_accept.py
0xB10C,2021-01-28 09:42:18,Why not add version to `send_self_transfer()` as optional argument too?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r565950244,565950244,test/functional/mempool_accept.py
stackman27,2021-02-05 17:14:28,"oops that was my bad üòÖ. However, I just pushed a new commit and fixed the issue. Not the most eloquent solution, but I'd highly appreciate any suggestions to improve it",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r571121996,571121996,test/functional/mempool_accept.py
stackman27,2021-02-05 17:15:52,"I did try to do that, but I wasn't sure about the stylistic aspect of passing arguments in functions. Do we have a hard cap on the # of arguments we can pass on functions? ",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r571122882,571122882,test/functional/mempool_accept.py
amitiuttarwar,2021-02-07 02:04:37,"the log 3 lines up says 200 blocks, but here we check 400. can you make these consistent?",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r571516444,571516444,test/functional/mempool_accept.py
amitiuttarwar,2021-02-07 02:05:08,"I think this line should be deleted. If you meant it communicate something about the test, please clarify ",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r571516496,571516496,test/functional/mempool_accept.py
amitiuttarwar,2021-02-07 02:10:26,I find this one-line if/else to be pretty confusing. could you just break it into a few lines to clarify the logic flow? ,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r571517084,571517084,test/functional/test_framework/wallet.py
stackman27,2021-02-07 18:36:08,Got it! Fixed,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r571663601,571663601,test/functional/mempool_accept.py
stackman27,2021-02-07 18:37:09,"I broke it down, I hope it makes more sense now :) ",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r571663698,571663698,test/functional/test_framework/wallet.py
MarcoFalke,2021-02-08 16:12:28,Any reason to change this from `node.generate(1)`? `miniwallet.generate` will put an immature utxo in the wallet.,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572172425,572172425,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 16:13:55,any reason to change this? Previously there was a newline between each test,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572173488,572173488,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 16:17:47,Any reason to mention 0xffffffd?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572176537,572176537,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 16:18:42,"why is this no longer passing SEQUENCE_FINAL, etc...?",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572177242,572177242,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 16:24:19,Why is this call needed? The tx should already be signed,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572181551,572181551,test/functional/mempool_accept.py
stackman27,2021-02-08 16:58:43,Thats because the default is set to `0xffffffff` in `send_send_transfer` parameter,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572208649,572208649,test/functional/mempool_accept.py
stackman27,2021-02-08 16:59:47,"I thought we changed the `nValue` and `nSequence` of raw_tx_0 therefore we have to resign it, is that not the case? ",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572209459,572209459,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 17:23:49,"So if the default changes, the test will fail? If so, I'd prefer to set it here to avoid a changed default breaking the test.",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572228039,572228039,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 17:24:43,"miniwallet doesn't do any sighashing, so no. What is the error message you see when not ""signing""?",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572228749,572228749,test/functional/mempool_accept.py
stackman27,2021-02-08 17:29:14,"I commented 114 out and it fails this assertion\n```\n self.check_mempool_result(\n  result_expected=[{'txid': txid_0, 'allowed': True, 'vsize': tx.get_vsize(), 'fees': {'base': (2 * fee)}}],\n  rawtxs=[raw_tx_0],\n )\n****** OUTPUT ******\nAssertionError: not([{'txid': '9295ae1bef2de5cb6dcf3a63504d2a58435572a32cf95caa078cd1a988f19101', 'allowed': True, 'vsize': 96, 'fees': {'base': Decimal",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572232350,572232350,test/functional/mempool_accept.py
stackman27,2021-02-08 17:30:26,Got it! Thank you,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572233311,572233311,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 17:42:14,"You can't comment out the line, but you can remove the ""signing roundtrip"" and simply take the tx as is.",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572241824,572241824,test/functional/mempool_accept.py
stackman27,2021-02-08 17:55:27,I'm sorry but do you mean just take the `raw_tx_0 = tx.serialize().hex()`? ,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572251107,572251107,test/functional/mempool_accept.py
stackman27,2021-02-08 18:19:05,"I tried the above approach but am unable to get/spend the utxo in line 149/151 associated with `txid_0`, because it doesnot have  tides with `send_self_transfer` . Is there any way around it?",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572266680,572266680,test/functional/mempool_accept.py
MarcoFalke,2021-02-08 18:21:49,Maybe add a send_tx to miniwallet which does the needed steps?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r572268388,572268388,test/functional/mempool_accept.py
DariusParvin,2021-02-12 16:11:32,You could use `self.setup_clean_chain = True` to start the blockchain with 0 blocks.,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r575334436,575334436,test/functional/mempool_accept.py
DariusParvin,2021-02-15 02:00:06,I'm curious why `send_tx = False` should affect the fee?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r575906571,575906571,test/functional/test_framework/wallet.py
DariusParvin,2021-02-15 02:02:33,"Maybe it's worth just assuming `nVersion = 2` in the MiniWallet, and add it as an option argument in the future if/when there's a test that requires `nVersion = 1`?",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r575906973,575906973,test/functional/mempool_accept.py
DariusParvin,2021-02-15 02:08:05,"It seems like it might be misleading to have a method whose name is `send_self_transfer`, but then have a flag to say `send = False`. \n\nInstead, maybe it would be more straightforward to have a separate method `create_self_transfer`, that returns the tx hex. This function could be used within `send_self_transfer` to create the transaction before broadcasting it. \n\nI'm about to submit a PR ",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r575907953,575907953,test/functional/test_framework/wallet.py
DariusParvin,2021-02-15 02:18:23,"If `send_tx` was set to `False`, this utxo could be unspendable, potentially causing problems downstream where the `get_utxo` does not yield a spendable utxo. So I it's probably better to only append the new utxo if `send_tx == True`, after calling `sendrawtransaction`.",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r575909995,575909995,test/functional/test_framework/wallet.py
MarcoFalke,2021-02-16 16:55:17,"Generating blocks takes a few seconds in valgrind, so I am thinking if this test may benefit from using `miniwallet.scan_blocks` (to be introduced in #21200)",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r576980164,576980164,test/functional/mempool_accept.py
stackman27,2021-02-19 16:21:27,"It was just a little hack that I found to get the `vsize` and `fee` assertion to work. But, I believe I found a way out! Pushed a new commit :) ",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r579307640,579307640,test/functional/test_framework/wallet.py
stackman27,2021-02-19 16:21:32,"That totally makes sense! or maybe we can simply rename the method to something that mimics it's accurate behavior, something in the lines of `sign_or_send_self_transfer`. Would love to hear @MarcoFalke's thoughts on this ",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r579307693,579307693,test/functional/test_framework/wallet.py
stackman27,2021-02-19 16:22:14,Thank you for the suggestion! I moved the append utxo after `sendrawtransaction`,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r579308133,579308133,test/functional/test_framework/wallet.py
stackman27,2021-02-19 16:22:31,Fixed!,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r579308335,579308335,test/functional/mempool_accept.py
glozow,2021-03-03 03:19:49,"Since it's optional\n```suggestion\n    def send_self_transfer(self, *, fee_rate=Decimal(""0.003""), from_node, utxo_to_spend=None, send_tx=True, nVersion=1, seq_num=0xffffffff, default_fee=False):\n```",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r586078009,586078009,test/functional/test_framework/wallet.py
glozow,2021-03-03 03:26:28,"This should be called `bypass_maxfeerate`. But really, since it's a parameter for `sendrawtransaction`, why isn't the caller doing a `send_tx=False` and then submitting it themselves?",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r586079887,586079887,test/functional/test_framework/wallet.py
glozow,2021-03-03 03:28:01,You're accepting a `nVersion` param but not using it?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r586080430,586080430,test/functional/test_framework/wallet.py
glozow,2021-03-03 03:36:29,You're changing the fee?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r586082917,586082917,test/functional/mempool_accept.py
glozow,2021-03-03 03:39:33,Assuming this is done to mature the coinbases... is there any reason to do more than 100?,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r586083854,586083854,test/functional/mempool_accept.py
stackman27,2021-03-04 15:27:53,"Yea cause the previous fee of `fee = Decimal('0.000007')` was too low to pass the mempool test. I manually calculated the fee here `fee_rate = Decimal('0.00007672') - fee,`, to get the best option",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r587566013,587566013,test/functional/mempool_accept.py
stackman27,2021-03-04 15:28:32,"Not really, just wanted to keep 200 blocks to mimic the current code",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r587566632,587566632,test/functional/mempool_accept.py
stackman27,2021-03-04 15:29:18,oops my bad üòÖ,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r587567355,587567355,test/functional/test_framework/wallet.py
stackman27,2021-03-04 15:34:39,"So this was following Darius's [comment](https://github.com/bitcoin/bitcoin/pull/21014#discussion_r575909995). I could only append tx in self.utxos after sending a transaction. If I try to simply send transaction from somewhere else, I wouldn't be able to append it in the internal wallet.py list",https://github.com/bitcoin/bitcoin/pull/21014#discussion_r587571975,587571975,test/functional/test_framework/wallet.py
stackman27,2021-03-04 15:35:03,Gotchu!,https://github.com/bitcoin/bitcoin/pull/21014#discussion_r587572312,587572312,test/functional/test_framework/wallet.py
