[
  {
    "sha": "00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGRjYWY0YmViYjZlMjM4YjU3MTE1MzBhOGE1ZTRmOGZkYjZiNDU1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-01-12T14:55:48Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-04-02T17:41:01Z"
      },
      "message": "Change download logic to allow calling getheaders/getdata on inbound peers\n\nSendMessages will now call getheaders on both inbound and outbound peers,\nonce the headers chain is close to synced.  It will also try downloading\nblocks from inbound peers once we're out of initial block download (so\ninbound peers will participate in parallel block fetching for the last day\nor two of blocks being downloaded).",
      "tree": {
        "sha": "e0b79e6147b02f1ed178eb523d96b6fdbff11771",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0b79e6147b02f1ed178eb523d96b6fdbff11771"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "446bb70fcdff61dfdd770e0624a3885fe2a28bb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/446bb70fcdff61dfdd770e0624a3885fe2a28bb0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/446bb70fcdff61dfdd770e0624a3885fe2a28bb0"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a741115932ebee1d831d0f5d1d6c765e522398fa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=00dcaf4bebb6e238b5711530a8a5e4f8fdb6b455",
        "patch": "@@ -4459,9 +4459,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (pindexBestHeader == NULL)\n             pindexBestHeader = chainActive.Tip();\n         bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->fOneShot); // Download if this is a nice peer, or we have no nice peers and this one might do.\n-        if (!state.fSyncStarted && !pto->fClient && fFetch && !fImporting && !fReindex) {\n+        if (!state.fSyncStarted && !pto->fClient && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n-            if (nSyncStarted == 0 || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n+            if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n                 nSyncStarted++;\n                 CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n@@ -4549,7 +4549,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Message: getdata (blocks)\n         //\n         vector<CInv> vGetData;\n-        if (!pto->fDisconnect && !pto->fClient && fFetch && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+        if (!pto->fDisconnect && !pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n             vector<CBlockIndex*> vToDownload;\n             NodeId staller = -1;\n             FindNextBlocksToDownload(pto->GetId(), MAX_BLOCKS_IN_TRANSIT_PER_PEER - state.nBlocksInFlight, vToDownload, staller);"
      }
    ]
  }
]