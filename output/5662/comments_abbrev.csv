laanwj,2015-03-09T12:14:20Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-77842755,77842755,
gmaxwell,2015-03-13T21:17:49Z,"Seems like a slightly kludgy approach, but better than not, and at least its simple.  Have we tested much with it set to also pull from inbound just to make sure there are no issues with that?\n\nWRT localhost, thats probably reasonable but otoh it might hide issues.  I think of this restriction on inbound as temporary until we get more controls in place to manage resource usage, after that it can",https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-79408809,79408809,
sdaftuar,2015-03-23T17:12:21Z,"Yeah that's pretty much how I feel too (kludgy but simple).  I did some controlled regtest-testing when I wrote this, but I haven't done any live network tests yet, which I agree would be worth doing so I'll set something up and report back...\n",https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-85100649,85100649,
sipa,2015-03-24T12:29:16Z,"utACK. It's kludgy, but fine as an interim solution.\n\nIt should even be perfectly fine to always enable fetching from any peer, except for the implicitly accepted behavior that not accepting incoming connections will reduce bandwidth usage. When headers-first is more widely deployed, we can get rid of that policy I think, and just add an actual bandwidth throttler.\n",https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-85478280,85478280,
sdaftuar,2015-04-01T16:51:39Z,"I tried testing initial block download with this code to see what kind of load it might put on an inbound peer (in the steady state, it doesn't seem that this code triggers very often, as expected).  It is apparently easier than I realized to run into a situation where a node could start up and acquire inbound peers quickly, before any outbound connections are established.  In repeated testing las",https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-88552015,88552015,
sipa,2015-04-01T17:49:12Z,@sdaftuar Any suggestions for a better strategy? \n,https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-88572725,88572725,
sdaftuar,2015-04-02T17:50:32Z,I've pushed an alternate fix here; please review this alternative solution.\n\nWhat about dropping the insecure_rand in favor of a call to IsInitialBlockDownload():\n\n```\nif (!pto->fDisconnect && !pto->fClient && (fFetch || !IsInitialBlockDownload()) && state.nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n```\n\nThis would mean that we'd be willing to let inbound peers share the download b,https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-88989882,88989882,
sdaftuar,2015-04-03T19:38:12Z,"One behavior worth noting is that with this change, our maximum number of blocks in flight goes up (from 128 to 16 \* Number of Network Peers).  It's probably not generally going to exceed 288, the most blocks that can be outstanding when inbound peers start being used with the outbound peers while fetching.  But if you have a stalling peer that isn't returning a block, then with the existing bloc",https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-89401514,89401514,
sdaftuar,2015-04-06T19:19:23Z,FYI I just opened #5976 to mitigate any issues with longer block download timeouts that the approach here might otherwise exacerbate.\n,https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-90204296,90204296,
sipa,2015-04-07T22:05:29Z,"Concept ACK on the new approach. In the steady state, this shouldn't matter much, as almost all blocks there are fetched through the direct-fetching logic, rather than the asynchronous headers-based fetching.\n",https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-90745906,90745906,
gavinandresen,2015-04-27T14:28:01Z,utACK.\n,https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-96675284,96675284,
laanwj,2015-04-28T08:12:40Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5662#issuecomment-96968637,96968637,
laanwj,2015-01-29T12:31:58Z,"Please use insecure_rand here. GetRandInt() returns cryptographic randomness and is thus quite expensive to call, and its unecessary here.\n",https://github.com/bitcoin/bitcoin/pull/5662#discussion_r23764268,23764268,src/main.cpp
sdaftuar,2015-01-29T14:47:55Z,Thanks -- fixed (commit squashed and amended).\n,https://github.com/bitcoin/bitcoin/pull/5662#discussion_r23771683,23771683,src/main.cpp
