[
  {
    "sha": "b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTUwYjA5ZWRjZDNiNmI3Y2E1ZjI2Y2E2ZWJlZTkyYmJhZDk3MDg5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-06-06T14:23:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-07-01T16:27:15Z"
      },
      "message": "secp256k1: add libtool as a dependency",
      "tree": {
        "sha": "4af877e14b14cab3d45f6736adf0fc5a285edaf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af877e14b14cab3d45f6736adf0fc5a285edaf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f04f1234078288d4806aaab0952d60f137337e81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f04f1234078288d4806aaab0952d60f137337e81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f04f1234078288d4806aaab0952d60f137337e81"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "50b85bcba0638d7628f33fc03360f1c3f53dfe0e",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
        "patch": "@@ -2,4 +2,7 @@\n set -e\n srcdir=\"$(dirname $0)\"\n cd \"$srcdir\"\n+if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n+  export LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+fi\n autoreconf --install --force"
      },
      {
        "sha": "925ac41ad4d465712fcbdee76ae69ce0a753caab",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
        "patch": "@@ -9,6 +9,7 @@ define(_COPYRIGHT_YEAR, 2014)\n AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n AC_CONFIG_AUX_DIR([src/build-aux])\n AC_CONFIG_MACRO_DIR([src/m4])\n+LT_INIT([disable-shared])\n AC_CANONICAL_HOST\n AH_TOP([#ifndef BITCOIN_CONFIG_H])\n AH_TOP([#define BITCOIN_CONFIG_H])"
      },
      {
        "sha": "a04e88d4e175ba0af280d7f791c5e5ba496bdbc2",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
        "patch": "@@ -6,6 +6,7 @@ Uploaders: Micah Anderson <micah@debian.org>\n Build-Depends: debhelper,\n  devscripts,\n  automake,\n+ libtool,\n  bash-completion,\n  libboost-system-dev (>> 1.35) | libboost-system1.35-dev,\n  libdb4.8++-dev,"
      },
      {
        "sha": "bc3d561c357089535420f7d25d9abcf57dc8838f",
        "filename": "contrib/gitian-descriptors/gitian-osx-bitcoin.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/contrib/gitian-descriptors/gitian-osx-bitcoin.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/contrib/gitian-descriptors/gitian-osx-bitcoin.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-bitcoin.yml?ref=b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
        "patch": "@@ -11,6 +11,7 @@ packages:\n - \"bsdmainutils\"\n - \"pkg-config\"\n - \"p7zip-full\"\n+- \"libtool\"\n \n reference_datetime: \"2013-06-01 00:00:00\"\n remotes:"
      },
      {
        "sha": "bc42723b125515bc54e9b65cee4e77183e2357ef",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
        "patch": "@@ -41,7 +41,7 @@ Instructions: MacPorts\n \n ### Install dependencies\n \n-    sudo port install boost db48@+no_java openssl miniupnpc autoconf pkgconfig automake\n+    sudo port install boost db48@+no_java openssl miniupnpc autoconf pkgconfig automake libtool\n \n Optional: install Qt4\n \n@@ -69,7 +69,7 @@ Instructions: Homebrew\n \n #### Install dependencies using Homebrew\n \n-        brew install autoconf automake berkeley-db4 boost miniupnpc openssl pkg-config protobuf qt\n+        brew install autoconf automake libtool berkeley-db4 boost miniupnpc openssl pkg-config protobuf qt\n \n Note: After you have installed the dependencies, you should check that the Homebrew installed version of OpenSSL is the one available for compilation. You can check this by typing\n "
      }
    ]
  },
  {
    "sha": "556682663547f9a9ede69fc4f924b50c531d92b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTY2ODI2NjM1NDdmOWE5ZWRlNjlmYzRmOTI0YjUwYzUzMWQ5MmIz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-06-06T14:57:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-07-01T16:27:19Z"
      },
      "message": "secp256k1: Add build-side changes for libsecp256k1\n\nNote: This is added to our existing automake targets rather than as a\nlibtool-style lib. The switch to libtool-style targets can come later if it\nproves to not add any complications.",
      "tree": {
        "sha": "207c043f9f47b76d921ba973222bbb743663ad7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/207c043f9f47b76d921ba973222bbb743663ad7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/556682663547f9a9ede69fc4f924b50c531d92b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556682663547f9a9ede69fc4f924b50c531d92b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/556682663547f9a9ede69fc4f924b50c531d92b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556682663547f9a9ede69fc4f924b50c531d92b3/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b150b09edcd3b6b7ca5f26ca6ebee92bbad97089"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 32,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3a6a6b6d885305475bf0a3ee9809d59786e05cfc",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556682663547f9a9ede69fc4f924b50c531d92b3/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556682663547f9a9ede69fc4f924b50c531d92b3/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=556682663547f9a9ede69fc4f924b50c531d92b3",
        "patch": "@@ -35,6 +35,7 @@ COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n \n dist-hook:\n \t-$(MAKE) -C $(top_distdir)/src/leveldb clean\n+\t-$(MAKE) -C $(top_distdir)/src/secp256k1 distclean\n \t-$(GIT) archive --format=tar HEAD -- src/version.cpp | $(AMTAR) -C $(top_distdir) -xf -\n \n distcheck-hook:"
      },
      {
        "sha": "2a4636e360dedf277638f1a1e0440a0b3d7accc9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556682663547f9a9ede69fc4f924b50c531d92b3/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556682663547f9a9ede69fc4f924b50c531d92b3/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=556682663547f9a9ede69fc4f924b50c531d92b3",
        "patch": "@@ -680,6 +680,7 @@ AM_CONDITIONAL([USE_LCOV],[test x$use_lcov == xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n+AM_CONDITIONAL([USE_LIBSECP256K1],[test x$use_libsecp256k1 = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])"
      },
      {
        "sha": "e2a62c9699ee8941be9376af2c5dbc760b24bf35",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=556682663547f9a9ede69fc4f924b50c531d92b3",
        "patch": "@@ -1,6 +1,10 @@\n AM_CPPFLAGS =  $(INCLUDES)\n AM_LDFLAGS = $(PTHREAD_CFLAGS)\n \n+if USE_LIBSECP256K1\n+secp256k1/libsecp256k1.la: $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n+\t@$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n+endif\n \n if EMBEDDED_LEVELDB\n LEVELDB_CPPFLAGS += -I$(srcdir)/leveldb/include\n@@ -20,6 +24,10 @@ endif\n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)\n \n+if USE_LIBSECP256K1\n+BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n+endif\n+\n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n@@ -220,6 +228,11 @@ bitcoind_LDADD = \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV)\n+\n+if USE_LIBSECP256K1\n+  bitcoind_LDADD += secp256k1/libsecp256k1.la\n+endif\n+\n if ENABLE_WALLET\n bitcoind_LDADD += libbitcoin_wallet.a\n endif\n@@ -242,6 +255,10 @@ bitcoin_cli_LDADD = \\\n   $(BOOST_LIBS)\n bitcoin_cli_SOURCES = \\\n   bitcoin-cli.cpp\n+\n+if USE_LIBSECP256K1\n+  bitcoin_cli_LDADD += secp256k1/libsecp256k1.la\n+endif\n bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n #\n \n@@ -253,10 +270,11 @@ CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n \n DISTCLEANFILES = obj/build.h\n \n-EXTRA_DIST = leveldb\n+EXTRA_DIST = leveldb secp256k1\n \n clean-local:\n \t-$(MAKE) -C leveldb clean\n+\t-$(MAKE) -C secp256k1 clean\n \trm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n "
      },
      {
        "sha": "4563bb356581f161d237558bfb3a6dc658b59997",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=556682663547f9a9ede69fc4f924b50c531d92b3",
        "patch": "@@ -357,6 +357,9 @@ qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n+if USE_LIBSECP256K1\n+  qt_bitcoin_qt_LDADD += secp256k1/libsecp256k1.la\n+endif\n qt_bitcoin_qt_LDFLAGS = $(QT_LDFLAGS)\n \n #locale/foo.ts -> locale/foo.qm"
      },
      {
        "sha": "7e10ce5a96397c24fd03c41b11720f4f111dde7b",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=556682663547f9a9ede69fc4f924b50c531d92b3",
        "patch": "@@ -33,6 +33,9 @@ endif\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n+if USE_LIBSECP256K1\n+  qt_test_test_bitcoin_qt_LDADD += secp256k1/libsecp256k1.la\n+endif\n qt_test_test_bitcoin_qt_LDFLAGS = $(QT_LDFLAGS)\n \n CLEAN_BITCOIN_QT_TEST = $(TEST_QT_MOC_CPP) qt/test/*.gcda qt/test/*.gcno"
      },
      {
        "sha": "12b90adca3e7d8190de63841619e8e610d52a405",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556682663547f9a9ede69fc4f924b50c531d92b3/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=556682663547f9a9ede69fc4f924b50c531d92b3",
        "patch": "@@ -69,6 +69,11 @@ test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_CO\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n endif\n+\n+if USE_LIBSECP256K1\n+  test_test_bitcoin_LDADD += secp256k1/libsecp256k1.la\n+endif\n+\n test_test_bitcoin_LDADD += $(BDB_LIBS)\n \n nodist_test_test_bitcoin_SOURCES = $(GENERATED_TEST_FILES)"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "src/secp256k1/.empty",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/556682663547f9a9ede69fc4f924b50c531d92b3/src/secp256k1/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/556682663547f9a9ede69fc4f924b50c531d92b3/src/secp256k1/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/secp256k1/.empty?ref=556682663547f9a9ede69fc4f924b50c531d92b3"
      }
    ]
  },
  {
    "sha": "fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGEzZmVkMThhZWRjNGJmYzhjY2ZmZTg5ZDhkMmNhYmIxMjY3N2Fi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-05T23:26:27Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-07-01T16:28:05Z"
      },
      "message": "libsecp256k1 integration",
      "tree": {
        "sha": "86c77c3d8282ae2d7921dd4bbd55043d38abdc38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86c77c3d8282ae2d7921dd4bbd55043d38abdc38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "556682663547f9a9ede69fc4f924b50c531d92b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/556682663547f9a9ede69fc4f924b50c531d92b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/556682663547f9a9ede69fc4f924b50c531d92b3"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 119,
      "deletions": 11
    },
    "files": [
      {
        "sha": "3c4fa77e727fb7ff8303ad6326f785b5d2b871e1",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 119,
        "deletions": 11,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab",
        "patch": "@@ -5,15 +5,34 @@\n #include \"key.h\"\n \n #include \"crypto/sha2.h\"\n+#include <openssl/rand.h>\n \n+#ifdef USE_SECP256K1\n+#include <secp256k1.h>\n+#else\n #include <openssl/bn.h>\n #include <openssl/ecdsa.h>\n #include <openssl/obj_mac.h>\n-#include <openssl/rand.h>\n+#endif\n \n // anonymous namespace with local implementation code (OpenSSL interaction)\n namespace {\n \n+#ifdef USE_SECP256K1\n+#include <secp256k1.h>\n+class CSecp256k1Init {\n+public:\n+    CSecp256k1Init() {\n+        secp256k1_start();\n+    }\n+    ~CSecp256k1Init() {\n+        secp256k1_stop();\n+    }\n+};\n+static CSecp256k1Init instance_of_csecp256k1;\n+\n+#else\n+\n // Generate a private key from just the secret parameter\n int EC_KEY_regenerate_key(EC_KEY *eckey, BIGNUM *priv_key)\n {\n@@ -334,6 +353,8 @@ class CECKey {\n     }\n };\n \n+#endif\n+\n int CompareBigEndian(const unsigned char *c1, size_t c1len, const unsigned char *c2, size_t c2len) {\n     while (c1len > c2len) {\n         if (*c1)\n@@ -398,110 +419,183 @@ void CKey::MakeNewKey(bool fCompressedIn) {\n }\n \n bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n+#ifdef USE_SECP256K1\n+    if (!secp256k1_ecdsa_privkey_import((unsigned char*)begin(), &privkey[0], privkey.size()))\n+        return false;\n+#else\n     CECKey key;\n     if (!key.SetPrivKey(privkey))\n         return false;\n     key.GetSecretBytes(vch);\n+#endif\n     fCompressed = fCompressedIn;\n     fValid = true;\n     return true;\n }\n \n CPrivKey CKey::GetPrivKey() const {\n     assert(fValid);\n+    CPrivKey privkey;\n+#ifdef USE_SECP256K1\n+    privkey.resize(279);\n+    int privkeylen = 279;\n+    int ret = secp256k1_ecdsa_privkey_export(begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n+    assert(ret);\n+    privkey.resize(privkeylen);\n+#else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    CPrivKey privkey;\n     key.GetPrivKey(privkey, fCompressed);\n+#endif\n     return privkey;\n }\n \n CPubKey CKey::GetPubKey() const {\n     assert(fValid);\n+    CPubKey pubkey;\n+#ifdef USE_SECP256K1\n+    int clen = 65;\n+    int ret = secp256k1_ecdsa_pubkey_create((unsigned char*)pubkey.begin(), &clen, begin(), fCompressed);\n+    assert(ret);\n+    assert(pubkey.IsValid());\n+    assert((int)pubkey.size() == clen);\n+#else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    CPubKey pubkey;\n     key.GetPubKey(pubkey, fCompressed);\n+#endif\n     return pubkey;\n }\n \n bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n     if (!fValid)\n         return false;\n+#ifdef USE_SECP256K1\n+    vchSig.resize(72);\n+    int nSigLen = 72;\n+    CKey nonce;\n+    do {\n+        nonce.MakeNewKey(true);\n+        if (secp256k1_ecdsa_sign((const unsigned char*)&hash, 32, (unsigned char*)&vchSig[0], &nSigLen, begin(), nonce.begin()))\n+            break;\n+    } while(true);\n+    vchSig.resize(nSigLen);\n+    return true;\n+#else\n     CECKey key;\n     key.SetSecretBytes(vch);\n     return key.Sign(hash, vchSig);\n+#endif\n }\n \n bool CKey::SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n     if (!fValid)\n         return false;\n-    CECKey key;\n-    key.SetSecretBytes(vch);\n     vchSig.resize(65);\n     int rec = -1;\n+#ifdef USE_SECP256K1\n+    CKey nonce;\n+    do {\n+        nonce.MakeNewKey(true);\n+        if (secp256k1_ecdsa_sign_compact((const unsigned char*)&hash, 32, &vchSig[1], begin(), nonce.begin(), &rec))\n+            break;\n+    } while(true);\n+#else\n+    CECKey key;\n+    key.SetSecretBytes(vch);\n     if (!key.SignCompact(hash, &vchSig[1], rec))\n         return false;\n+#endif\n     assert(rec != -1);\n     vchSig[0] = 27 + rec + (fCompressed ? 4 : 0);\n     return true;\n }\n \n bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n+#ifdef USE_SECP256K1\n+    if (!secp256k1_ecdsa_privkey_import((unsigned char*)begin(), &privkey[0], privkey.size()))\n+        return false;\n+#else\n     CECKey key;\n     if (!key.SetPrivKey(privkey, fSkipCheck))\n         return false;\n-    \n     key.GetSecretBytes(vch);\n+#endif\n     fCompressed = vchPubKey.IsCompressed();\n     fValid = true;\n-    \n+\n     if (fSkipCheck)\n         return true;\n-    \n+\n     if (GetPubKey() != vchPubKey)\n         return false;\n-    \n+\n     return true;\n }\n \n bool CPubKey::Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const {\n     if (!IsValid())\n         return false;\n+#ifdef USE_SECP256K1\n+    if (secp256k1_ecdsa_verify((const unsigned char*)&hash, 32, &vchSig[0], vchSig.size(), begin(), size()) != 1)\n+        return false;\n+#else\n     CECKey key;\n     if (!key.SetPubKey(*this))\n         return false;\n     if (!key.Verify(hash, vchSig))\n         return false;\n+#endif\n     return true;\n }\n \n bool CPubKey::RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig) {\n     if (vchSig.size() != 65)\n         return false;\n+    int recid = (vchSig[0] - 27) & 3;\n+    bool fComp = (vchSig[0] - 27) & 4;\n+#ifdef USE_SECP256K1\n+    int pubkeylen = 65;\n+    if (!secp256k1_ecdsa_recover_compact((const unsigned char*)&hash, 32, &vchSig[1], (unsigned char*)begin(), &pubkeylen, fComp, recid))\n+        return false;\n+    assert((int)size() == pubkeylen);\n+#else\n     CECKey key;\n-    if (!key.Recover(hash, &vchSig[1], (vchSig[0] - 27) & ~4))\n+    if (!key.Recover(hash, &vchSig[1], recid))\n         return false;\n-    key.GetPubKey(*this, (vchSig[0] - 27) & 4);\n+    key.GetPubKey(*this, fComp);\n+#endif\n     return true;\n }\n \n bool CPubKey::IsFullyValid() const {\n     if (!IsValid())\n         return false;\n+#ifdef USE_SECP256K1\n+    if (!secp256k1_ecdsa_pubkey_verify(begin(), size()))\n+        return false;\n+#else\n     CECKey key;\n     if (!key.SetPubKey(*this))\n         return false;\n+#endif\n     return true;\n }\n \n bool CPubKey::Decompress() {\n     if (!IsValid())\n         return false;\n+#ifdef USE_SECP256K1\n+    int clen = size();\n+    int ret = secp256k1_ecdsa_pubkey_decompress((unsigned char*)begin(), &clen);\n+    assert(ret);\n+    assert(clen == (int)size());\n+#else\n     CECKey key;\n     if (!key.SetPubKey(*this))\n         return false;\n     key.GetPubKey(*this, false);\n+#endif\n     return true;\n }\n \n@@ -531,7 +625,12 @@ bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild\n         BIP32Hash(cc, nChild, 0, begin(), out);\n     }\n     memcpy(ccChild, out+32, 32);\n+#ifdef USE_SECP256K1\n+    memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n+    bool ret = secp256k1_ecdsa_privkey_tweak_add((unsigned char*)keyChild.begin(), out);\n+#else\n     bool ret = CECKey::TweakSecret((unsigned char*)keyChild.begin(), begin(), out);\n+#endif\n     UnlockObject(out);\n     keyChild.fCompressed = true;\n     keyChild.fValid = ret;\n@@ -545,10 +644,15 @@ bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned i\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n     memcpy(ccChild, out+32, 32);\n+#ifdef USE_SECP256K1\n+    pubkeyChild = *this;\n+    bool ret = secp256k1_ecdsa_pubkey_tweak_add((unsigned char*)pubkeyChild.begin(), pubkeyChild.size(), out);\n+#else\n     CECKey key;\n     bool ret = key.SetPubKey(*this);\n     ret &= key.TweakPublic(out);\n     key.GetPubKey(pubkeyChild, true);\n+#endif\n     return ret;\n }\n \n@@ -629,13 +733,17 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n }\n \n bool ECC_InitSanityCheck() {\n+#ifdef USE_SECP256K1\n+    return true;\n+#else\n     EC_KEY *pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n     if(pkey == NULL)\n         return false;\n     EC_KEY_free(pkey);\n \n     // TODO Is there more EC functionality that could be missing?\n     return true;\n+#endif\n }\n \n "
      }
    ]
  }
]