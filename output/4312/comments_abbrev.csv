sipa,2014-06-09T19:37:06Z,"Seems to work here, but pulltester is unhappy :(\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45534120,45534120,
laanwj,2014-06-10T06:28:33Z,Pulltester problem doesn't look too bad:\n\n```\nmake[2]: Entering directory `/mnt/bitcoin/src/secp256k1'\nmake[2]: *** No rule to make target `distdir'.  Stop.\n```\n,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45578204,45578204,
sipa,2014-06-10T07:31:55Z,"By the way, at least initially I would prefer it if --enable-libsecp256k1 was mutually incompatible with --enable-wallet. Ideally, there would be a way to remove the mining code too :)\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45582168,45582168,
theuni,2014-06-10T17:16:53Z,"The pull-tester issue is actually a pretty nasty problem. I'm still debating which ""fix"" to use, I'll push something up soon.\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45643839,45643839,
laanwj,2014-06-11T12:13:33Z,I get the following error with\n\n``` bash\n#!/bin/bash\nPARALLELISM=6\n./autogen.sh && ./configure --with-gui=qt5 --enable-libsecp256k1 --disable-wallet && make clean && make -j${PARALLELISM}\n```\n\n```\nmake[2]: Entering directory `/store/orion/projects/bitcoin/bitcoin/src'\n  AR       libbitcoin_server.a\n  CXX      libbitcoin_common_a-key.o\nkey.cpp: In function ‘bool ECC_InitSanityCheck()’:\,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45733141,45733141,
sipa,2014-06-11T12:16:10Z,"Yes, this needs rebasing on top of #4277.\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45733333,45733333,
theuni,2014-06-11T18:37:02Z,rebased. I made a minimal change for @laanwj's error and squashed it into the first commit.\n,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45781727,45781727,
sipa,2014-06-11T23:37:53Z,"Idea: call secp256k1_start from ECC_InitSanityCheck?\n\nThat way, we don't spend the time for building the precomputation tables in bitcoin-cli...\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45814089,45814089,
laanwj,2014-06-12T02:48:07Z,"@sipa Good point, though I'm not sure the sanity check function is the best place. \nI think in general it would be good to move from 'hidden' static classes with constructors and destructors (CInit in util.cpp, CMainCleanup in main.cpp, and now CSecp256k1Init) and implicit initialization (GetDataDir and al) to explicit initialization and shutdown sequences. It's easier (well: possible!) to track ",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45824632,45824632,
sipa,2014-06-12T08:13:28Z,"Agree, I'm fine with an explicit initializer/finalizer as well, independent from the ecc check.\n\nAnd of course, bitcoin-cli shouldn't use key.cpp at all, but I don't know how far we're away from that.\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-45841124,45841124,
pstratem,2014-06-15T21:18:43Z,"**\* Error in `bitcoin/src/bitcoind': munmap_chunk(): invalid pointer: 0x0000000000a2e430 ***\n\n#0  0x00007ffff5d71f79 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56\n#1  0x00007ffff5d75388 in __GI_abort () at abort.c:89\n#2  0x00007ffff5daf1d4 in __libc_message (do_abort=do_abort@entry=1, fmt=fmt@entry=0x7ffff5ebda10 ""**\* Error in `%s': %s: 0x%s _**\n"") at ../sysd",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-46128260,46128260,
sipa,2014-06-15T21:45:31Z,See bitcoin/secp256k1#28 for a fix.\n,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-46128936,46128936,
theuni,2014-06-15T22:05:36Z,@sipa Would you prefer that I sync and rebase this as these come up? Or leave it as-is with the understanding that a sync will be done before merge?\n,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-46129610,46129610,
sipa,2014-06-15T23:04:46Z,"@theuni Up to you. Constantly rebasing will take work, but may make some things easier to review.\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-46130945,46130945,
laanwj,2014-06-23T09:28:21Z,"Needs rebase.\nStrange: I tried a rebase to see where the conflict is with, but rebase gets confused between src/util.h and src/secp256k1/util.h!\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-46822959,46822959,
theuni,2014-06-24T20:55:15Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47029469,47029469,
wtogami,2014-06-24T21:36:42Z,"```\n2014-06-24 21:30:27 Bitcoin version v0.9.99.0-2e04a3d (2014-06-24 16:52:34 -0400)\n2014-06-24 21:30:27 Using OpenSSL version OpenSSL 1.0.1e-fips 11 Feb 2013\n2014-06-24 21:30:27 Using BerkeleyDB version Berkeley DB 4.8.30: (August  3, 2013)\n```\n\nCould you add a print during runtime to display the fact that it is using libsecp256k1 similar to these others?  Otherwise it is difficult to know",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47034399,47034399,
laanwj,2014-06-25T08:07:58Z,I want to merge this as soon as possible due to the build system changes. Is it ready @theuni?\n\nImprovements like @wtogami's (which I fully agree with) can be done later.\n,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47072099,47072099,
theuni,2014-06-25T21:27:06Z,"@laanwj From the build-side, I think it's ok to merge. Up to @sipa on the readiness of the lib itself.\n\nAre you just worried about the (time) cost of rebasing this for build-system changes? If so, I can split it into 2 parts: Build-system changes that are useless without the 2nd part, and the actual secp and configure switch addition. We could merge the first now to prevent future rebasing, then",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47161081,47161081,
laanwj,2014-06-26T05:29:47Z,"If there is a clear condition when the lib is ready we can wait for that, I just want to avoid keeping this open up to some arbitrary time. My belief at the start of this project was that secp256k1 was ready for experimental use in bitcoin core.\n\nSo once the code review comments with regard to the integration are processed, and things are not obviously crashing or failing, I think we should aim ",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47189077,47189077,
theuni,2014-06-26T16:32:02Z,"Ok, I'll split this into 2 PRs. The build-side can be merged, then the discussion can be about the readiness of secp256k1 itself.\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47248192,47248192,
theuni,2014-06-26T22:09:37Z,Split up. @laanwj You can pull as much of this one as you want whenever you're ready. It's a complete no-op without the lib itself and the configure option.\n\nThe rest is here (on top of this PR) for reference: https://github.com/theuni/bitcoin/commits/secp256k1-integration-part2\n,https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47286634,47286634,
sipa,2014-06-26T23:49:24Z,"Sorry for commenting late.\n\nIf we want to merge for experimental use, fine by me. I'd like to make it disable wallet and mining when doing so, but perhaps people compiling from source could easily bypass that anyway.\n\nI do plan to change the API significantly at some point, but everything is functional now, and that won't be immediately. If we want to wait for something like an actual ""release",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47293960,47293960,
laanwj,2014-06-29T08:22:36Z,"Will merge this after rebase.\n\nI definitely don't think we should wait for an actual ""release"" of libsecp256k1. The more testing it gets the better.\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47448613,47448613,
theuni,2014-07-01T16:33:33Z,"Rebased and ready for merge afaik.\n@sipa Would you prefer to take the top commits here and PR it yourself so that I'm not in the way of it? https://github.com/theuni/bitcoin/commits/secp256k1-integration-part2\n\nOtherwise, if you're ok with it as-is, I can just PR those once this one is merged.\n",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47678806,47678806,
BitcoinPullTester,2014-07-01T16:49:06Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4312_fda3fed18aedc4bfc8ccffe89d8d2cabb12677ab/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4312#issuecomment-47680811,47680811,
luke-jr,2014-06-10T07:37:49Z,"NACK, just pull in libsecp256k1 as a normal dependency. No subtree garbage necessary.\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581000,13581000,configure.ac
luke-jr,2014-06-10T07:38:23Z,Dependencies are supposed to be AC_ARG_WITH/--with-libsecp256k1\n,https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581008,13581008,configure.ac
sipa,2014-06-10T07:39:06Z,"Define ""normal dependency""?\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581027,13581027,configure.ac
luke-jr,2014-06-10T07:39:35Z,"Should secp256k1_ecdsa_privkey_export really NEVER return NULL in ordinary circumstances here? If there's a normal condition it might, this shouldn't be an assert...\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581044,13581044,src/key.cpp
laanwj,2014-06-10T07:39:40Z,"Including it as subtree is better IMO. It leaves us control over the code (which is one of the reasons for moving away from OpenSSL in the first place!), and avoids that the person building it has to install a dependency that's pretty much unknown right now.\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581047,13581047,configure.ac
luke-jr,2014-06-10T07:42:25Z,"@sipa Like Qt, boost, or any other dependency.\n\n@laanwj We already have ""control over the code"" - @sipa is upstream! People building code are prepared to deal with dependencies.\n\nSubtree messes just _de_modularise the code into one big ugly blob. Our goal should be modularising, not the opposite!\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581106,13581106,configure.ac
sipa,2014-06-10T07:44:06Z,Currently there is no code path that could make it return 0 even.\n,https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581165,13581165,src/key.cpp
laanwj,2014-06-10T07:47:27Z,"But something could be said that secp256k is in exactly the same spot as leveldb. It's critical to the consensus.\nSure, @sipa is upstream here which helps, _but_ by including the code we avoid having to take version mismatches into account, for example. We test with one bitcoind-secp256k-leveldb combination and everyone will use that.\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581241,13581241,configure.ac
luke-jr,2014-06-10T07:53:35Z,"LevelDB shouldn't be subtree'd either. If you want to tie release code to a specific version, just put it in the configure.ac as a requirement... but that's a bad idea IMO. Especially for libsecp256k1 since upstream understands consensus-critical needs.\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13581444,13581444,configure.ac
laanwj,2014-06-10T08:53:22Z,I'm all for modularizing where it makes sense (eject the wallet today!). But the consensus logic by nature is an ugly atomic blob. There's nothing to be gained by modularizing it.\n,https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13583242,13583242,configure.ac
luke-jr,2014-06-10T09:16:31Z,There is plenty to be gained by modularising it. Other software can use bits.\n,https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13584090,13584090,configure.ac
sipa,2014-06-10T09:36:38Z,Other software can use libsecp256k1 regardless of whether we subtree it or not.\n,https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13584752,13584752,configure.ac
luke-jr,2014-06-10T09:37:43Z,"Not quite, it will reside in memory twice.\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13584774,13584774,configure.ac
sipa,2014-06-10T11:19:21Z,It's 30 kB of object code.\n\nAnd 600 kB of precomputed data (which wouldn't be shared across processes anyway).\n,https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13587955,13587955,configure.ac
theuni,2014-06-10T20:05:23Z,"I'm pretty indifferent on the matter, I just hooked it up as requested. Either outcome is fine by me.\n",https://github.com/bitcoin/bitcoin/pull/4312#discussion_r13615806,13615806,configure.ac
