pierreN,2020-03-24 15:35:36,"It seems that the tests were already including values wider than 2^32 so I reckon there is 2 options : \n\n- remove/update tests to make them fit into a 2^32\n- just prevent the [UB value](https://github.com/bitcoin/bitcoin/pull/18413#pullrequestreview-380164570) instead\n\nThe second option seemed the less intrusive, so I updated the PR to only forbid the value -2^63. I also added 2 tests re",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603311452,603311452,
sipa,2020-03-24 16:14:28,"I think we should just fix UB in CScriptNum::serialize; that should be easy, and avoid all issues.\n\nIn addition, I think we may want to restrict what range of numbers ParseScript accepts in decimal, because numbers outside -0xFFFFFFFF...0xFFFFFFFF are simply illegal in scripts (they don't work as numbers, so they should really be represented as hex strings instead if they're used at all). That",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603338485,603338485,
pierreN,2020-03-24 23:57:43,"OK, thanks. \n\nSo. if I understand correctly, we do agree that the following tests in `src/test/data/script_tests.json` are wrong and should be removed (most of them originally from 90320d67779be5c97061380c035d3fe51b7ce74b ) ?\n\n```\n[""549755813887"", ""SIZE 5 EQUAL"", ""P2SH,STRICTENC"", ""OK""],\n[""549755813888"", ""SIZE 6 EQUAL"", ""P2SH,STRICTENC"", ""OK""],\n[""9223372036854775807"", ""SIZE 8 EQUAL"",",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603565321,603565321,
sipa,2020-03-25 01:36:16,@pierreN They can be converted to hexadecimal.,https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603591610,603591610,
pierreN,2020-03-25 04:06:26,"Ow my bad, I was too focused on the `atoi64` branch to see it that way, thanks.\n\nI edited my branch accordingly.",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603628774,603628774,
laanwj,2020-03-25 16:18:36,"What's the rationale here for saturating the number instead of raising an error? I generally prefer explicit parse errors on invalid input, at least.",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603936577,603936577,
practicalswift,2020-03-25 16:20:55,@laanwj Agreed. That would also be in line with how parsing errors are handled elsewhere in `ParseScript(â€¦)`: a `std::runtime_error` is thrown :),https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603938035,603938035,
sipa,2020-03-25 16:34:06,"Yes, that's what I meant to suggest: fail if a number outside the valid range is present. Sorry if that was not clear.",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603946365,603946365,
MarcoFalke,2020-03-25 17:09:08,"Slightly related: The fuzz tests already have the error condition in this parser here covered: https://marcofalke.github.io/btc_cov/fuzz.coverage/src/core_read.cpp.gcov.html#84 . However our unit and functional tests don't know how to handle this/have this uncovered: https://marcofalke.github.io/btc_cov/total.coverage/src/core_read.cpp.gcov.html#84\n",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603966799,603966799,
MarcoFalke,2020-03-25 17:11:31,"It looks like a test case can be added to:\n\n* `src/test/script_tests.cpp` and/or\n* `test/util/data/bitcoin-util-test.json` with binary `bitcoin-tx`",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603968156,603968156,
pierreN,2020-03-25 17:30:52,"OK so sorry now I'm a bit confused - as stated [above](https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398019058), if we start handling exceptions in `script_test.cpp`, which `ScriptError_t` to have in the JSON ? Do you think this would be useful ?",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603978899,603978899,
MarcoFalke,2020-03-25 17:34:03,"The exception is simply passed in an `error_text` in `test/util/data/bitcoin-util-test.json`. E.g.\n\n```json\n  { ""exec"": ""./bitcoin-tx"",\n    ""args"": [""-create"", ""nversion=1foo""],\n    ""return_code"": 1,\n    ""error_txt"": ""error: Invalid TX version requested"",\n    ""description"": ""Tests the check for invalid nversion value""\n  },\n",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603980603,603980603,
pierreN,2020-03-25 18:07:09,"Ow, OK, thanks, I see.\n\nSo this way if we return an exception, we can just add a test `./src/bitcoin-tx -create outscript=0:9999999999` to check the parser (and have code coverage for the added exception) - hence the test in `src/test/data/tx_invalid.json` containing `4294967296 CHECKLOCKTIMEVERIFY 1` becomes useless since  it would just trigger the same exception in the parser.",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-603998247,603998247,
pierreN,2020-03-25 18:55:07,"OK, I think I updated the branch as we discussed above ? \n\nIf this PR is OK, I'll add a test case in `bitcoin-util-test.json` for the second exception in `ParseScript` in another PR.",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604023671,604023671,
sipa,2020-03-25 20:30:52,ACK 4cefaace020f406d1143cf1351988958ef360861,https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604070780,604070780,
pierreN,2020-03-26 01:45:07,(absorbing an empty commit to re-launch failed CI) ,https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604180034,604180034,
sipa,2020-03-26 22:47:50,re-ACK 2ee8cc07292e62a1be47d09421f93d25ad24fbd4,https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604726395,604726395,
laanwj,2020-03-27 06:59:35,"ACK 9ab14e4d21c73d16d8d782f1576fe29e659e2a70\n(only difference is removing the limits include as suggested: https://github.com/bitcoin/bitcoin/compare/2ee8cc07292e62a1be47d09421f93d25ad24fbd4..9ab14e4d21c73d16d8d782f1576fe29e659e2a70)",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604846100,604846100,
pierreN,2020-03-27 07:27:46,Thanks !,https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604854726,604854726,
laanwj,2020-03-27 08:19:53,"I'm very sorry to only realize this now but `atoi64` itself doesn't do bounds checking. So *very* large or small values outside the 64 bit range will still overflow the 64 bit or at least not raise an error conditions.\nI think the appropriate function to use here is our own `ParseUInt32`.\n\n",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604874373,604874373,
pierreN,2020-03-27 08:31:04,"Sorry, I don't follow, `atoi64` is:\n\n```\nint64_t atoi64(const std::string& str)\n{\n#ifdef _MSC_VER\n    return _atoi64(str.c_str());\n#else\n    return strtoll(str.c_str(), nullptr, 10);\n#endif\n}\n```\n\nAnd both [_atoi64](https://docs.microsoft.com/en-us/cpp/c-runtime-library/reference/atoi64-atoi64-l-wtoi64-wtoi64-l?view=vs-2019) and [strtoll](https://en.cppreference.com/w/cpp",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604878738,604878738,
laanwj,2020-03-27 10:22:19,"> And both _atoi64 and strtoll both return LLONG_MAX or LLONG_MIN when receiving too big positive/negative values ?\n\nIf that's the case this is actually OK. I thought they didn't have any guaranteed return value in that case.\n\n```\n       The strtol() function returns the result of the conversion, unless the value would underflow or overflow.  If an underflow occurs, strtol() returns LONG",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604923651,604923651,
pierreN,2020-03-27 10:25:19,"OK, great, thanks for the code review !",https://github.com/bitcoin/bitcoin/pull/18416#issuecomment-604924913,604924913,
theStack,2020-03-24 08:09:14,"FWIW, here's an alternative shorter version for the same logic, without branches:\n```\n    n = std::min(n, static_cast<int64_t>(std::numeric_limits<int32_t>::max()));\n    n = std::max(n, static_cast<int64_t>(std::numeric_limits<int32_t>::min()));\n```\nNot sure if it's really more readable though, personally I'd be okay with both versions.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396964929,396964929,src/core_read.cpp
pierreN,2020-03-24 08:19:19,"`std::clamp` in C++17 would be even better and less verbose, but unsure if we can use C++17 features ?\n\nNote that `min/max` in the standard also do `exactly one comparison` each.\n\nI can remove the `if/else` though if people think it fits better here.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396970095,396970095,src/core_read.cpp
theStack,2020-03-24 08:31:39,"Ah, `std::clamp` would indeed be a very nice option. Unfortunately, upgrading to C++17 has not happened yet (see this discussion: https://github.com/bitcoin/bitcoin/issues/16684), so it can't be used.\nSometimes substitutes for not-yet-available C++ features are implemented by contributors, like `Span` for the C++20 `std::span` by sipa (see https://github.com/bitcoin/bitcoin/pull/12886), don't kn",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396976681,396976681,src/core_read.cpp
pierreN,2020-03-24 08:35:13,"Thanks, I'd be down to do that in a different PR. I'm looking for stuffs to do to improve my knowledge of the codebase anyway :)\n\nI'll wait for some other people to confirm ""yes this is a good idea, do a separate PR for std::clamp"" before starting though",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r396978657,396978657,src/core_read.cpp
MarcoFalke,2020-03-25 11:45:54,Shouldn't this version be kept as an example of an *_invalid* script?,https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397793149,397793149,src/test/data/tx_invalid.json
pierreN,2020-03-25 14:42:18,"OK, thanks. This is a good idea I think, I was hesitant to add more tests. If I understood you correctly, the tests are invalids here, so I guess you mean adding something like:\n\n```\n[""Argument 2^32 in decimal (hence clamped to 0xffffffff) with nLockTime=2^32-2""],\n[[[""0000000000000000000000000000000000000000000000000000000000000100"", 0, ""4294967296 CHECKLOCKTIMEVERIFY 1""]],\n""010000000100",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397908932,397908932,src/test/data/tx_invalid.json
MarcoFalke,2020-03-25 14:46:56,"Feel free to *add* as many tests as you like, as long as all existing proper test cases also stay there",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397912614,397912614,src/test/data/tx_invalid.json
pierreN,2020-03-25 15:30:10,"OK great, I added 5 more tests in the branch.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397947329,397947329,src/test/data/tx_invalid.json
MarcoFalke,2020-03-25 15:43:38,What I mean is that this shouldn't be silently clamped. The test here looks right. Why would it be safe to parse a script and silently change it while parsing?,https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397958241,397958241,src/test/data/tx_invalid.json
pierreN,2020-03-25 15:49:57,"OK, so you are suggesting in the `core_read.cpp` above to return an `std::runtime_error` when the result of the `atoi64` is beyond the the range -0xffffffff..0xffffffff instead ?",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397963494,397963494,src/test/data/tx_invalid.json
MarcoFalke,2020-03-25 15:51:47,"Yes, some kind of failure",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397965031,397965031,src/test/data/tx_invalid.json
practicalswift,2020-03-25 16:00:08,"`std::runtime_error` is thrown on other script parse errors in `ParseScript(â€¦)`. Shouldn't that be thrown also for this type of script parse error in `ParseScript`?\n\n",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397971817,397971817,src/test/data/tx_invalid.json
pierreN,2020-03-25 16:20:23,"OK, thanks, this is clearly a possibility. \n\nNote that for now, no test trigger the already existing `std::runtime_error`. `script_json_test` doesn't handle exceptions, so it should be modified to catch them (maybe in a different PR then ?). Testcases will have to be modified to handle the exception too I guess. \n\n(the fuzzer harness already handle exceptions well)\n\nI'm not sure which ",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r397987413,397987413,src/test/data/tx_invalid.json
pierreN,2020-03-25 17:02:30,"@practicalswift hm sorry but I guess it's better to ask first:  if you return an `std::runtime_error`, how to describe the error in the JSON test file ?  \n\nI guess that adding a new value to the `ScriptError_t` enum is too intrusive. \nAdding a special `if/else` case in `script_test.cpp:ParseScriptError` seems too hackish.\nReusing an existing `ScriptError_t` seems the less odd option - some",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398019058,398019058,src/test/data/tx_invalid.json
sipa,2020-03-25 17:06:03,"I don't think there is a need. (tx/script)_(valid/invalid) are testing the transaction and script validity logic - not the script parser.\n\nIf a particular test now causes an exception to be thrown, just write that test differently. It's still testing the same thing.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398021643,398021643,src/test/data/tx_invalid.json
pierreN,2020-03-25 18:51:21,"OK, so as stated below, if a test contains `4294967296 CHECKLOCKTIMEVERIFY 1` or `999...999`, this is a script parser error which should be covered in `bitcoin-util-test.json`, not here. I believe this resolve this issue ?",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398092831,398092831,src/test/data/tx_invalid.json
pierreN,2020-03-25 18:53:26,Note that using an exception allowed to raise new errors in `tx_valid` - before the clamped value also valided the test...,https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398094215,398094215,src/test/data/tx_valid.json
MarcoFalke,2020-03-25 18:54:40,"Any reason this needs a static cast?\n \n```suggestion\n            if (n > 0xffffffff || n < -0xffffffff) {\n```",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398094977,398094977,src/core_read.cpp
MarcoFalke,2020-03-25 18:55:20,Could also check that `+-0xffffffff` is accepted and `+-(0xffffffff+1)` is not?,https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398095360,398095360,test/util/data/bitcoin-util-test.json
pierreN,2020-03-25 19:09:37,"The second static_cast seems strictly necessary, see this example : https://godbolt.org/z/Ko33NG\n\nThe first one is superficial (implicit), I just thought that the symetry looked better. I can remove the first one if you prefer ?\n\nedit : at least fixed whitespace style\n\nedit 2 : also note that the `LL` suffix could be used but this would assume that `long long = 64bits` ",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398103802,398103802,src/core_read.cpp
pierreN,2020-03-25 19:10:31,"Yes, thanks, great idea.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398104310,398104310,test/util/data/bitcoin-util-test.json
practicalswift,2020-03-25 21:29:03,Explicit is better than implicit :),https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398181470,398181470,src/core_read.cpp
MarcoFalke,2020-03-26 13:41:42,"I think with C++11 you can also get a safer way to achieve the same: `int64_t{bla}`. If the value doesn't fit in the integer type, it won't compile. Whereas with static_cast it would compile and give the wrong result.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398580174,398580174,src/core_read.cpp
pierreN,2020-03-26 20:56:54,"Thanks, updated the branch accordingly,",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r398886528,398886528,src/core_read.cpp
laanwj,2020-03-27 06:48:48,Is `<limits>` still necessary?,https://github.com/bitcoin/bitcoin/pull/18416#discussion_r399064471,399064471,src/core_read.cpp
pierreN,2020-03-27 06:51:57,"Ow, thank you. No it isn't, just removed it.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r399065473,399065473,src/core_read.cpp
MarcoFalke,2020-03-27 14:06:02,"Why are you changing all the values when translating from dec to hex? It might be fine, but at least for locktime values there are different code paths depending on the value.",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r399288547,399288547,src/test/data/script_tests.json
pierreN,2020-03-27 14:15:50,"Ow, good point. I double checked with the value returned by `ParseScript` in the tests before/after the PR - so that the behavior of the tests doesn't change at all (i.e. before this PR the script built by `ParseScript` from `4294967296` contained `0x050000000001`)",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r399295448,399295448,src/test/data/script_tests.json
MarcoFalke,2020-03-27 14:18:27,"Ah, oops. My bad",https://github.com/bitcoin/bitcoin/pull/18416#discussion_r399297161,399297161,src/test/data/script_tests.json
