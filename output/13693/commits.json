[
  {
    "sha": "111880aaf7e12a12f0797f1b19673e3d96328edd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTE4ODBhYWY3ZTEyYTEyZjA3OTdmMWIxOTY3M2UzZDk2MzI4ZWRk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-17T19:48:09Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-10-09T11:49:30Z"
      },
      "message": "[test] Add coverage to estimaterawfee and estimatesmartfee\n\nThis adds light functional coverage to estimaterawfee - a subset of\nthe testing applied to estimatesmartfee, and argument validation\ntesting to both estimaterawfee and estimatesmartfee.\n\nOne valid estimatesmartfee signature test is commented out because it\nfails currently.",
      "tree": {
        "sha": "dec1f2cc9b8150b561c7051ae5aa42196feef060",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dec1f2cc9b8150b561c7051ae5aa42196feef060"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/111880aaf7e12a12f0797f1b19673e3d96328edd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJdnclRAAoJEG7l83hfeLNFs9QH/RQEs2GPHA9rJ2joVGrRll+j\nb6fidDNYuXHzpkwn1MDj9So3VzJslzV2v9ynch0RxvOJ+Vm8MgGpuR6J8ticNkAn\ncLAwHSjngntTFytzC9u3ExcUxCxwK4A7uDLNLGZAeHaCv8g5s1UTpxLOMZ3t7RbW\n63kkTwslRUALHqoChTd75/VMD3R7rTdXVebSFlKkjnFUw3aPYF+p9A/+r/ADE7Ru\n4Ln3Yvdf/lyO9YmQYG8Jg6EFRgY+0UBvZhsxz+bU64Tv91Xh8QLdCA7oYzqeEPoZ\nbMv/ylFF6NuSkPABkOtG1hXJA6FbWsY9YFXmPxw9zE3W/62AjvPRGZ7+Pg3tQAc=\n=eMBB\n-----END PGP SIGNATURE-----",
        "payload": "tree dec1f2cc9b8150b561c7051ae5aa42196feef060\nparent c08bf2b574636023cd9d68cb43b3dada5b0cc737\nauthor Ben Woosley <ben.woosley@gmail.com> 1531856889 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1570621770 +0100\n\n[test] Add coverage to estimaterawfee and estimatesmartfee\n\nThis adds light functional coverage to estimaterawfee - a subset of\nthe testing applied to estimatesmartfee, and argument validation\ntesting to both estimaterawfee and estimatesmartfee.\n\nOne valid estimatesmartfee signature test is commented out because it\nfails currently.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111880aaf7e12a12f0797f1b19673e3d96328edd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/111880aaf7e12a12f0797f1b19673e3d96328edd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111880aaf7e12a12f0797f1b19673e3d96328edd/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c08bf2b574636023cd9d68cb43b3dada5b0cc737",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c08bf2b574636023cd9d68cb43b3dada5b0cc737",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c08bf2b574636023cd9d68cb43b3dada5b0cc737"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 68,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ec402fbdb6586535a86cf3102937f7cb66711df3",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111880aaf7e12a12f0797f1b19673e3d96328edd/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111880aaf7e12a12f0797f1b19673e3d96328edd/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=111880aaf7e12a12f0797f1b19673e3d96328edd",
        "patch": "@@ -99,8 +99,20 @@ def split_inputs(from_node, txins, txouts, initial_split=False):\n     txouts.append({\"txid\": txid, \"vout\": 0, \"amount\": half_change})\n     txouts.append({\"txid\": txid, \"vout\": 1, \"amount\": rem_change})\n \n+def check_raw_estimates(node, fees_seen):\n+    \"\"\"Call estimaterawfee and verify that the estimates meet certain invariants.\"\"\"\n \n-def check_estimates(node, fees_seen):\n+    delta = 1.0e-6  # account for rounding error\n+    for i in range(1, 26):\n+        for _, e in node.estimaterawfee(i).items():\n+            feerate = float(e[\"feerate\"])\n+            assert_greater_than(feerate, 0)\n+\n+            if feerate + delta < min(fees_seen) or feerate - delta > max(fees_seen):\n+                raise AssertionError(\"Estimated fee (%f) out of range (%f,%f)\"\n+                                     % (feerate, min(fees_seen), max(fees_seen)))\n+\n+def check_smart_estimates(node, fees_seen):\n     \"\"\"Call estimatesmartfee and verify that the estimates meet certain invariants.\"\"\"\n \n     delta = 1.0e-6  # account for rounding error\n@@ -123,6 +135,9 @@ def check_estimates(node, fees_seen):\n         else:\n             assert_greater_than_or_equal(i + 1, e[\"blocks\"])\n \n+def check_estimates(node, fees_seen):\n+    check_raw_estimates(node, fees_seen)\n+    check_smart_estimates(node, fees_seen)\n \n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "8bdecfc8cda4b4fe45a295e73b57e1dd1c2de1ed",
        "filename": "test/functional/rpc_estimatefee.py",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111880aaf7e12a12f0797f1b19673e3d96328edd/test/functional/rpc_estimatefee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111880aaf7e12a12f0797f1b19673e3d96328edd/test/functional/rpc_estimatefee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_estimatefee.py?ref=111880aaf7e12a12f0797f1b19673e3d96328edd",
        "patch": "@@ -0,0 +1,51 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the estimatefee RPCs.\n+\n+Test the following RPCs:\n+   - estimatesmartfee\n+   - estimaterawfee\n+\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_raises_rpc_error\n+\n+class EstimateFeeTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        # missing required params\n+        assert_raises_rpc_error(-1, \"estimatesmartfee\", self.nodes[0].estimatesmartfee)\n+        assert_raises_rpc_error(-1, \"estimaterawfee\", self.nodes[0].estimaterawfee)\n+\n+        # wrong type for conf_target\n+        assert_raises_rpc_error(-3, \"Expected type number, got string\", self.nodes[0].estimatesmartfee, 'foo')\n+        assert_raises_rpc_error(-3, \"Expected type number, got string\", self.nodes[0].estimaterawfee, 'foo')\n+\n+        # wrong type for estimatesmartfee(estimate_mode)\n+        assert_raises_rpc_error(-3, \"Expected type string, got number\", self.nodes[0].estimatesmartfee, 1, 1)\n+        assert_raises_rpc_error(-8, \"Invalid estimate_mode parameter\", self.nodes[0].estimatesmartfee, 1, 'foo')\n+\n+        # wrong type for estimaterawfee(threshold)\n+        assert_raises_rpc_error(-3, \"Expected type number, got string\", self.nodes[0].estimaterawfee, 1, 'foo')\n+\n+        # extra params\n+        assert_raises_rpc_error(-1, \"estimatesmartfee\", self.nodes[0].estimatesmartfee, 1, 'ECONOMICAL', 1)\n+        assert_raises_rpc_error(-1, \"estimaterawfee\", self.nodes[0].estimaterawfee, 1, 1, 1)\n+\n+        # valid calls\n+        self.nodes[0].estimatesmartfee(1)\n+        # self.nodes[0].estimatesmartfee(1, None)\n+        self.nodes[0].estimatesmartfee(1, 'ECONOMICAL')\n+\n+        self.nodes[0].estimaterawfee(1)\n+        self.nodes[0].estimaterawfee(1, None)\n+        self.nodes[0].estimaterawfee(1, 1)\n+\n+\n+if __name__ == '__main__':\n+    EstimateFeeTest().main()"
      },
      {
        "sha": "c40ccf30f38a032fe36b63240144b3d0ece588cc",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/111880aaf7e12a12f0797f1b19673e3d96328edd/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/111880aaf7e12a12f0797f1b19673e3d96328edd/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=111880aaf7e12a12f0797f1b19673e3d96328edd",
        "patch": "@@ -191,6 +191,7 @@\n     'wallet_resendwallettransactions.py',\n     'wallet_fallbackfee.py',\n     'feature_minchainwork.py',\n+    'rpc_estimatefee.py',\n     'rpc_getblockstats.py',\n     'wallet_create_tx.py',\n     'p2p_fingerprint.py',"
      }
    ]
  }
]