[
  {
    "sha": "91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWY2ZTZlNmQxNzIwZTExNTRhZDNmNzBhNTA5OGU5MDI4ZWZhODRh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-22T18:19:05Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-12T08:50:58Z"
      },
      "message": "scripted-diff: add NetPermissionFlags scopes where not already present\n\n-BEGIN VERIFY SCRIPT-\ns() { git grep -l \"$1\" -- 'src' ':!src/net_permissions.h' | xargs sed -i -E \"s/([^:])$1/\\1NetPermissionFlags::$1/\"; }\n\ns 'PF_NONE'\ns 'PF_BLOOMFILTER'\ns 'PF_RELAY'\ns 'PF_FORCERELAY'\ns 'PF_DOWNLOAD'\ns 'PF_NOBAN'\ns 'PF_MEMPOOL'\ns 'PF_ADDR'\ns 'PF_ISIMPLICIT'\ns 'PF_ALL'\n-END VERIFY SCRIPT-\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>",
      "tree": {
        "sha": "62f694aab492d4de41d09ba3b8036978c6de8b01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62f694aab492d4de41d09ba3b8036978c6de8b01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCblvkACgkQT1chs9Dj\nkh27VRAAjF3k4zisqoFvCE22r3DQKtiy6zN+2h2ii/5h3RRIc8XQNRdAJi8tZvFz\nPW6r4R+me1h0gZ2Y8DAJqcNfTKiv2vY+Xt5nBpAFTtN++IS8Qk71CDCzvjZtEN3A\nTU0MAVO/v5ghRxpR0h6Y+mzv10SinblFJmaTUVnpNnGbcRAsXH6Fxi1D8vzszN2n\nl8qdLNMmd7YwoIuCNwbdHg24pfY1jeQ2KvGvgBg060EndsVzc3zYRVHHiU1TfaDX\nMmUbPJ97pfJxCsHfJhcfi+U5XgZE0eaUBBKsXX/KY6T71tqVZUQpY2CWcQvEN5xN\nYXhRUp1ovLSROu4OXyzKPM1UBCnzRnPN+avu4Br37quyAMj0frzvh1wG2o/Z60pV\nXB4XKyx7m3id/a1oyna3eXZVFuW2LLYRn/NrHvJKRSJMcdIWUlio89fBWvmKMFRI\nyK7lS+V6qGCNRSpynJhGWTy8ln7UBpa2L01ueE8ifnRUOi6tVc+EHjAE0oZPqbQg\n/xkpwyO/kHW4doGM6CxC+SBttNRXUVxY864ifcU7hwgwdo9JdnZXhed3RRNtsEFE\nDtKuBI4nKfDZ1eUK2sPWELKMvBVoz6v5/66/K+x56S/BrVJ8CKfQGwrUMjscUquL\n2VKdUSxuNhl4F59EKr0jvTuGiaBu9Wrr8kaedHUmJhxM3EeaT78=\n=XV5s\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIAYZc2ag4pkjYdq+Gx1ZGOwzIuiig/Mr8irR/HSGwczYCP/wEE+jLqMlQV9B\nz3TiqGy3dT4I8QRgm5b68Ai863lhlgXowwCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQ3VaSsm20gDT+QDx4\nX4zP2wjxBGCblvvwCIvUHYRKOo5uAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t8BD7INBmHNweXUIRj/nSqNZtCPEEYJuW+/AIpHat\nRMx0IqcAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 62f694aab492d4de41d09ba3b8036978c6de8b01\nparent 2e30e328a7a46e0405664fd0cb31d971171f71d1\nauthor Jon Atack <jon@atack.com> 1616437145 +0100\ncommitter Jon Atack <jon@atack.com> 1620809458 +0200\n\nscripted-diff: add NetPermissionFlags scopes where not already present\n\n-BEGIN VERIFY SCRIPT-\ns() { git grep -l \"$1\" -- 'src' ':!src/net_permissions.h' | xargs sed -i -E \"s/([^:])$1/\\1NetPermissionFlags::$1/\"; }\n\ns 'PF_NONE'\ns 'PF_BLOOMFILTER'\ns 'PF_RELAY'\ns 'PF_FORCERELAY'\ns 'PF_DOWNLOAD'\ns 'PF_NOBAN'\ns 'PF_MEMPOOL'\ns 'PF_ADDR'\ns 'PF_ISIMPLICIT'\ns 'PF_ALL'\n-END VERIFY SCRIPT-\n\nCo-authored-by: Hennadii Stepanov <32963518+hebasto@users.noreply.github.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e30e328a7a46e0405664fd0cb31d971171f71d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e30e328a7a46e0405664fd0cb31d971171f71d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e30e328a7a46e0405664fd0cb31d971171f71d1"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 65,
      "deletions": 65
    },
    "files": [
      {
        "sha": "590c161cd63f6e731b86127fb9ab45c40580e54f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "patch": "@@ -1005,7 +1005,7 @@ bool CConnman::AttemptToEvictConnection()\n \n         LOCK(cs_vNodes);\n         for (const CNode* node : vNodes) {\n-            if (node->HasPermission(PF_NOBAN))\n+            if (node->HasPermission(NetPermissionFlags::PF_NOBAN))\n                 continue;\n             if (!node->IsInboundConn())\n                 continue;\n@@ -1078,11 +1078,11 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n \n     AddWhitelistPermissionFlags(permissionFlags, addr);\n     if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_ISIMPLICIT)) {\n-        NetPermissions::ClearFlag(permissionFlags, PF_ISIMPLICIT);\n-        if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(permissionFlags, PF_FORCERELAY);\n-        if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(permissionFlags, PF_RELAY);\n-        NetPermissions::AddFlag(permissionFlags, PF_MEMPOOL);\n-        NetPermissions::AddFlag(permissionFlags, PF_NOBAN);\n+        NetPermissions::ClearFlag(permissionFlags, NetPermissionFlags::PF_ISIMPLICIT);\n+        if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_FORCERELAY);\n+        if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_RELAY);\n+        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_MEMPOOL);\n+        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_NOBAN);\n     }\n \n     {\n@@ -1141,7 +1141,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n \n     ServiceFlags nodeServices = nLocalServices;\n-    if (NetPermissions::HasFlag(permissionFlags, PF_BLOOMFILTER)) {\n+    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_BLOOMFILTER)) {\n         nodeServices = static_cast<ServiceFlags>(nodeServices | NODE_BLOOM);\n     }\n "
      },
      {
        "sha": "32569cc39bc40cd9f92bba0c4c2adac55537aeda",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "patch": "@@ -402,7 +402,7 @@ class CNode\n     std::unique_ptr<TransportDeserializer> m_deserializer;\n     std::unique_ptr<TransportSerializer> m_serializer;\n \n-    NetPermissionFlags m_permissionFlags{PF_NONE};\n+    NetPermissionFlags m_permissionFlags{NetPermissionFlags::PF_NONE};\n     std::atomic<ServiceFlags> nServices{NODE_NONE};\n     SOCKET hSocket GUARDED_BY(cs_hSocket);\n     /** Total size of all vSendMsg entries */"
      },
      {
        "sha": "29eec947c08e4cda0059a06353cf8275a0c9d56c",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "patch": "@@ -23,12 +23,12 @@ namespace {\n // The parse the following format \"perm1,perm2@xxxxxx\"\n bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output, size_t& readen, bilingual_str& error)\n {\n-    NetPermissionFlags flags = PF_NONE;\n+    NetPermissionFlags flags = NetPermissionFlags::PF_NONE;\n     const auto atSeparator = str.find('@');\n \n     // if '@' is not found (ie, \"xxxxx\"), the caller should apply implicit permissions\n     if (atSeparator == std::string::npos) {\n-        NetPermissions::AddFlag(flags, PF_ISIMPLICIT);\n+        NetPermissions::AddFlag(flags, NetPermissionFlags::PF_ISIMPLICIT);\n         readen = 0;\n     }\n     // else (ie, \"perm1,perm2@xxxxx\"), let's enumerate the permissions by splitting by ',' and calculate the flags\n@@ -44,14 +44,14 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n             readen += len; // We read \"perm1\"\n             if (commaSeparator != std::string::npos) readen++; // We read \",\"\n \n-            if (permission == \"bloomfilter\" || permission == \"bloom\") NetPermissions::AddFlag(flags, PF_BLOOMFILTER);\n-            else if (permission == \"noban\") NetPermissions::AddFlag(flags, PF_NOBAN);\n-            else if (permission == \"forcerelay\") NetPermissions::AddFlag(flags, PF_FORCERELAY);\n-            else if (permission == \"mempool\") NetPermissions::AddFlag(flags, PF_MEMPOOL);\n-            else if (permission == \"download\") NetPermissions::AddFlag(flags, PF_DOWNLOAD);\n-            else if (permission == \"all\") NetPermissions::AddFlag(flags, PF_ALL);\n-            else if (permission == \"relay\") NetPermissions::AddFlag(flags, PF_RELAY);\n-            else if (permission == \"addr\") NetPermissions::AddFlag(flags, PF_ADDR);\n+            if (permission == \"bloomfilter\" || permission == \"bloom\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_BLOOMFILTER);\n+            else if (permission == \"noban\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_NOBAN);\n+            else if (permission == \"forcerelay\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_FORCERELAY);\n+            else if (permission == \"mempool\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_MEMPOOL);\n+            else if (permission == \"download\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_DOWNLOAD);\n+            else if (permission == \"all\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_ALL);\n+            else if (permission == \"relay\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_RELAY);\n+            else if (permission == \"addr\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_ADDR);\n             else if (permission.length() == 0); // Allow empty entries\n             else {\n                 error = strprintf(_(\"Invalid P2P permission: '%s'\"), permission);\n@@ -71,13 +71,13 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n {\n     std::vector<std::string> strings;\n-    if (NetPermissions::HasFlag(flags, PF_BLOOMFILTER)) strings.push_back(\"bloomfilter\");\n-    if (NetPermissions::HasFlag(flags, PF_NOBAN)) strings.push_back(\"noban\");\n-    if (NetPermissions::HasFlag(flags, PF_FORCERELAY)) strings.push_back(\"forcerelay\");\n-    if (NetPermissions::HasFlag(flags, PF_RELAY)) strings.push_back(\"relay\");\n-    if (NetPermissions::HasFlag(flags, PF_MEMPOOL)) strings.push_back(\"mempool\");\n-    if (NetPermissions::HasFlag(flags, PF_DOWNLOAD)) strings.push_back(\"download\");\n-    if (NetPermissions::HasFlag(flags, PF_ADDR)) strings.push_back(\"addr\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_BLOOMFILTER)) strings.push_back(\"bloomfilter\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_NOBAN)) strings.push_back(\"noban\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_FORCERELAY)) strings.push_back(\"forcerelay\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_RELAY)) strings.push_back(\"relay\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_MEMPOOL)) strings.push_back(\"mempool\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_DOWNLOAD)) strings.push_back(\"download\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_ADDR)) strings.push_back(\"addr\");\n     return strings;\n }\n "
      },
      {
        "sha": "d455d99494dcc03ca9c42ef5ad3827d1c3b6c467",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "patch": "@@ -680,7 +680,7 @@ static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUS\n     nPreferredDownload -= state->fPreferredDownload;\n \n     // Whether this node should be marked as a preferred download node.\n-    state->fPreferredDownload = (!node.IsInboundConn() || node.HasPermission(PF_NOBAN)) && !node.IsAddrFetchConn() && !node.fClient;\n+    state->fPreferredDownload = (!node.IsInboundConn() || node.HasPermission(NetPermissionFlags::PF_NOBAN)) && !node.IsAddrFetchConn() && !node.fClient;\n \n     nPreferredDownload += state->fPreferredDownload;\n }\n@@ -960,24 +960,24 @@ void PeerManagerImpl::AddTxAnnouncement(const CNode& node, const GenTxid& gtxid,\n {\n     AssertLockHeld(::cs_main); // For m_txrequest\n     NodeId nodeid = node.GetId();\n-    if (!node.HasPermission(PF_RELAY) && m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+    if (!node.HasPermission(NetPermissionFlags::PF_RELAY) && m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n         // Too many queued announcements from this peer\n         return;\n     }\n     const CNodeState* state = State(nodeid);\n \n     // Decide the TxRequestTracker parameters for this announcement:\n-    // - \"preferred\": if fPreferredDownload is set (= outbound, or PF_NOBAN permission)\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::PF_NOBAN permission)\n     // - \"reqtime\": current time plus delays for:\n     //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n     //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n     //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n-    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have PF_RELAY).\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::PF_RELAY).\n     auto delay = std::chrono::microseconds{0};\n     const bool preferred = state->fPreferredDownload;\n     if (!preferred) delay += NONPREF_PEER_TX_DELAY;\n     if (!gtxid.IsWtxid() && m_wtxid_relay_peers > 0) delay += TXID_RELAY_DELAY;\n-    const bool overloaded = !node.HasPermission(PF_RELAY) &&\n+    const bool overloaded = !node.HasPermission(NetPermissionFlags::PF_RELAY) &&\n         m_txrequest.CountInFlight(nodeid) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n     if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n     m_txrequest.ReceivedInv(nodeid, gtxid, preferred, current_time + delay);\n@@ -1637,14 +1637,14 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv&\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n     if (m_connman.OutboundTargetReached(true) &&\n         (((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.IsMsgFilteredBlk()) &&\n-        !pfrom.HasPermission(PF_DOWNLOAD) // nodes with the download permission may exceed target\n+        !pfrom.HasPermission(NetPermissionFlags::PF_DOWNLOAD) // nodes with the download permission may exceed target\n     ) {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom.GetId());\n         pfrom.fDisconnect = true;\n         return;\n     }\n     // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n-    if (!pfrom.HasPermission(PF_NOBAN) && (\n+    if (!pfrom.HasPermission(NetPermissionFlags::PF_NOBAN) && (\n             (((pfrom.GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom.GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (m_chainman.ActiveChain().Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n        )) {\n         LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold, disconnect peer=%d\\n\", pfrom.GetId());\n@@ -2738,7 +2738,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fBlocksOnly = m_ignore_incoming_txs || (pfrom.m_tx_relay == nullptr);\n \n         // Allow peers with relay permission to send data other than blocks in blocks only mode\n-        if (pfrom.HasPermission(PF_RELAY)) {\n+        if (pfrom.HasPermission(NetPermissionFlags::PF_RELAY)) {\n             fBlocksOnly = false;\n         }\n \n@@ -2952,7 +2952,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         LOCK(cs_main);\n-        if (m_chainman.ActiveChainstate().IsInitialBlockDownload() && !pfrom.HasPermission(PF_DOWNLOAD)) {\n+        if (m_chainman.ActiveChainstate().IsInitialBlockDownload() && !pfrom.HasPermission(NetPermissionFlags::PF_DOWNLOAD)) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom.GetId());\n             return;\n         }\n@@ -3011,7 +3011,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         // Stop processing the transaction early if\n         // 1) We are in blocks only mode and peer has no relay permission\n         // 2) This peer is a block-relay-only peer\n-        if ((m_ignore_incoming_txs && !pfrom.HasPermission(PF_RELAY)) || (pfrom.m_tx_relay == nullptr))\n+        if ((m_ignore_incoming_txs && !pfrom.HasPermission(NetPermissionFlags::PF_RELAY)) || (pfrom.m_tx_relay == nullptr))\n         {\n             LogPrint(BCLog::NET, \"transaction sent in violation of protocol peer=%d\\n\", pfrom.GetId());\n             pfrom.fDisconnect = true;\n@@ -3056,7 +3056,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         // (older than our recency filter) if trying to DoS us, without any need\n         // for witness malleation.\n         if (AlreadyHaveTx(GenTxid(/* is_wtxid=*/true, wtxid))) {\n-            if (pfrom.HasPermission(PF_FORCERELAY)) {\n+            if (pfrom.HasPermission(NetPermissionFlags::PF_FORCERELAY)) {\n                 // Always relay transactions received from peers with forcerelay\n                 // permission, even if they were already in the mempool, allowing\n                 // the node to function as a gateway for nodes hidden behind it.\n@@ -3585,7 +3585,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         pfrom.vAddrToSend.clear();\n         std::vector<CAddress> vAddr;\n-        if (pfrom.HasPermission(PF_ADDR)) {\n+        if (pfrom.HasPermission(NetPermissionFlags::PF_ADDR)) {\n             vAddr = m_connman.GetAddresses(MAX_ADDR_TO_SEND, MAX_PCT_ADDR_TO_SEND);\n         } else {\n             vAddr = m_connman.GetAddresses(pfrom, MAX_ADDR_TO_SEND, MAX_PCT_ADDR_TO_SEND);\n@@ -3598,19 +3598,19 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n     }\n \n     if (msg_type == NetMsgType::MEMPOOL) {\n-        if (!(pfrom.GetLocalServices() & NODE_BLOOM) && !pfrom.HasPermission(PF_MEMPOOL))\n+        if (!(pfrom.GetLocalServices() & NODE_BLOOM) && !pfrom.HasPermission(NetPermissionFlags::PF_MEMPOOL))\n         {\n-            if (!pfrom.HasPermission(PF_NOBAN))\n+            if (!pfrom.HasPermission(NetPermissionFlags::PF_NOBAN))\n             {\n                 LogPrint(BCLog::NET, \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom.GetId());\n                 pfrom.fDisconnect = true;\n             }\n             return;\n         }\n \n-        if (m_connman.OutboundTargetReached(false) && !pfrom.HasPermission(PF_MEMPOOL))\n+        if (m_connman.OutboundTargetReached(false) && !pfrom.HasPermission(NetPermissionFlags::PF_MEMPOOL))\n         {\n-            if (!pfrom.HasPermission(PF_NOBAN))\n+            if (!pfrom.HasPermission(NetPermissionFlags::PF_NOBAN))\n             {\n                 LogPrint(BCLog::NET, \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom.GetId());\n                 pfrom.fDisconnect = true;\n@@ -3825,7 +3825,7 @@ bool PeerManagerImpl::MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer)\n         peer.m_should_discourage = false;\n     } // peer.m_misbehavior_mutex\n \n-    if (pnode.HasPermission(PF_NOBAN)) {\n+    if (pnode.HasPermission(NetPermissionFlags::PF_NOBAN)) {\n         // We never disconnect or discourage peers for bad behavior if they have the NOBAN permission flag\n         LogPrintf(\"Warning: not punishing noban peer %d!\\n\", peer.m_id);\n         return false;\n@@ -4463,7 +4463,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         if (pto->m_tx_relay != nullptr) {\n                 LOCK(pto->m_tx_relay->cs_tx_inventory);\n                 // Check whether periodic sends should happen\n-                bool fSendTrickle = pto->HasPermission(PF_NOBAN);\n+                bool fSendTrickle = pto->HasPermission(NetPermissionFlags::PF_NOBAN);\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n                     if (pto->IsInboundConn()) {\n@@ -4625,7 +4625,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // Note: If all our peers are inbound, then we won't\n                     // disconnect our sync peer for stalling; we have bigger\n                     // problems if we can't get any outbound peers.\n-                    if (!pto->HasPermission(PF_NOBAN)) {\n+                    if (!pto->HasPermission(NetPermissionFlags::PF_NOBAN)) {\n                         LogPrintf(\"Timeout downloading headers from peer=%d, disconnecting\\n\", pto->GetId());\n                         pto->fDisconnect = true;\n                         return true;\n@@ -4712,7 +4712,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             !m_ignore_incoming_txs &&\n             pto->GetCommonVersion() >= FEEFILTER_VERSION &&\n             gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n-            !pto->HasPermission(PF_FORCERELAY) // peers with the forcerelay permission should not filter txs to us\n+            !pto->HasPermission(NetPermissionFlags::PF_FORCERELAY) // peers with the forcerelay permission should not filter txs to us\n         ) {\n             CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};"
      },
      {
        "sha": "990f891c5e4ecade770455e6105dd32a6a192fb8",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "patch": "@@ -1062,7 +1062,7 @@ void RPCConsole::updateDetailWidget()\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));\n     ui->peerConnectionType->setText(GUIUtil::ConnectionTypeToQString(stats->nodeStats.m_conn_type, /* prepend_direction */ true));\n     ui->peerNetwork->setText(GUIUtil::NetworkToQString(stats->nodeStats.m_network));\n-    if (stats->nodeStats.m_permissionFlags == PF_NONE) {\n+    if (stats->nodeStats.m_permissionFlags == NetPermissionFlags::PF_NONE) {\n         ui->peerPermissions->setText(ts.na);\n     } else {\n         QStringList permissions;"
      },
      {
        "sha": "ea896d83183bc1c5f0678ef9e518f7da0b96af56",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91f6e6e6d1720e1154ad3f70a5098e9028efa84a/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "patch": "@@ -381,19 +381,19 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     // If no permission flags, assume backward compatibility\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"1.2.3.4:32\", whitebindPermissions, error));\n     BOOST_CHECK(error.empty());\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_ISIMPLICIT);\n-    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT));\n-    NetPermissions::ClearFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT);\n-    BOOST_CHECK(!NetPermissions::HasFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n-    NetPermissions::AddFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT);\n-    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, PF_ISIMPLICIT));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n+    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT));\n+    NetPermissions::ClearFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n+    BOOST_CHECK(!NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n+    NetPermissions::AddFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n+    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT));\n \n     // Can set one permission\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n \n     NetWhitebindPermissions noban, noban_download, download_noban, download;\n \n@@ -420,24 +420,24 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     // Happy path, can parse flags\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,forcerelay@1.2.3.4:32\", whitebindPermissions, error));\n     // forcerelay should also activate the relay permission\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_FORCERELAY | NetPermissionFlags::PF_RELAY);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,noban@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_RELAY | PF_NOBAN);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_RELAY | NetPermissionFlags::PF_NOBAN);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,forcerelay,noban@1.2.3.4:32\", whitebindPermissions, error));\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"all@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_ALL);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_ALL);\n \n     // Allow dups\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,noban,noban@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_RELAY | PF_NOBAN | PF_DOWNLOAD); // \"noban\" implies \"download\"\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_RELAY | NetPermissionFlags::PF_NOBAN | NetPermissionFlags::PF_DOWNLOAD); // \"noban\" implies \"download\"\n \n     // Allow empty\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,,noban@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_BLOOMFILTER | PF_RELAY | PF_NOBAN);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_RELAY | NetPermissionFlags::PF_NOBAN);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\",@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\",,@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, PF_NONE);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n \n     // Detect invalid flag\n     BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"bloom,forcerelay,oopsie@1.2.3.4:32\", whitebindPermissions, error));\n@@ -449,16 +449,16 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n \n     // Happy path for whitelist parsing\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"noban@1.2.3.4\", whitelistPermissions, error));\n-    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, PF_NOBAN);\n+    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::PF_NOBAN);\n     BOOST_CHECK(NetPermissions::HasFlag(whitelistPermissions.m_flags, NetPermissionFlags::PF_NOBAN));\n \n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay@1.2.3.4/32\", whitelistPermissions, error));\n-    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, PF_BLOOMFILTER | PF_FORCERELAY | PF_NOBAN | PF_RELAY);\n+    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_FORCERELAY | NetPermissionFlags::PF_NOBAN | NetPermissionFlags::PF_RELAY);\n     BOOST_CHECK(error.empty());\n     BOOST_CHECK_EQUAL(whitelistPermissions.m_subnet.ToString(), \"1.2.3.4/32\");\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, error));\n \n-    const auto strings = NetPermissions::ToStrings(PF_ALL);\n+    const auto strings = NetPermissions::ToStrings(NetPermissionFlags::PF_ALL);\n     BOOST_CHECK_EQUAL(strings.size(), 7U);\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"bloomfilter\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"forcerelay\") != strings.end());"
      }
    ]
  },
  {
    "sha": "7b55a9449778c5ac89799ce4c607c8c8d797ddfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjU1YTk0NDk3NzhjNWFjODk3OTljZTRjNjA3YzhjOGQ3OTdkZGZi",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-12T09:04:34Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-12T09:04:34Z"
      },
      "message": "p2p: NetPermissions::HasFlag() pass flags param by value",
      "tree": {
        "sha": "c08f704e19f2e13c5fe11aecab6189f428845166",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c08f704e19f2e13c5fe11aecab6189f428845166"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b55a9449778c5ac89799ce4c607c8c8d797ddfb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCbmiIACgkQT1chs9Dj\nkh3bqw//Qymw0fhEIMPbFMGAuR0gPC3dEKlQXb3PTIzrRT5/2y7JYNvjDNRzU6Ab\nr+MdeuJPj0gUSdfP1d7TjMvTJ7EDR/hDnQdf+738+G1uHjW4PTJzHNfwrZS+guEO\nj9/XJ+cu8xsUwveaBFaE8G/0UJgZfpLHJSUavPk7eiy+FMazCN5kcjTvgo/pEusq\nbjtz7hmdXFzI6Urz4O2aJFTWy1iiH4Vfxff0ywX8TTWPFnTltiClksky0c4g3LoK\ns7lhXOSTDGivsI0c3VYBJIJj365dap8mbFlK2Qocj3qU2o34Tz9+fTGW5t6uD+R8\nWGpR4A54Y6c2G7t7Hrw0Md++syBogaDi6tevpp2JesM3kmz/AH/kDC/DdufakM4H\noLZERzUJytwEHs5wn6rtoghwZKrt7bhJ5QE/5cJnRGFXmD4rzC6QrlrNDKk5igM4\ny7ivdmo3vcGd5ZWGt1fmDAdpjQtcBhl9rpUHUPmeiPA+Lt9RSZN5cyadKVOyTijR\nDWeRG+c6utb283OIg9fUFbG4BVmc4tR0wqjlzKlVyxpY0u7yfotbUi3viLJHEstf\nshyg8JB8xqz0FkEE5t37wTWiZNudjv5GFRd5Ts1guNZqtetNd2NxqkYb4T/ROOnl\nEqOBHh1KCOmOTW+fs9K64AV3kBwCaKmYZMjYFM5fF6e7txqk4Iw=\n=9dj5\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIGQGctFQVLDu4ruu90pq5Fw6UzFDbUQEqs4iCDq6LUr4CP/wEGEdghCDnCNM\nncHST7nv9voI8QRgm5oj8Aifz4+oag779gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEIM/zkUvqVR4RwmeQ4d9zOMI8CAJa+BV\nF6yrG0dmeGj2+DNnJiDpidH8NzCsS9cy9WMotwjxBGCbmiPwCDJ92mIwHDoiAIPf\n4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1w\ncy5vcmfwEOaeCk9euxgwUWKOmoaoK4AI8QRgm5oj8AjjKCst+cf2IQCD3+MNLvkM\njiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree c08f704e19f2e13c5fe11aecab6189f428845166\nparent 91f6e6e6d1720e1154ad3f70a5098e9028efa84a\nauthor Jon Atack <jon@atack.com> 1620810274 +0200\ncommitter Jon Atack <jon@atack.com> 1620810274 +0200\n\np2p: NetPermissions::HasFlag() pass flags param by value\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b55a9449778c5ac89799ce4c607c8c8d797ddfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b55a9449778c5ac89799ce4c607c8c8d797ddfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b55a9449778c5ac89799ce4c607c8c8d797ddfb/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91f6e6e6d1720e1154ad3f70a5098e9028efa84a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91f6e6e6d1720e1154ad3f70a5098e9028efa84a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f64a9d6eceaf0e60576b6a8f82888d28d0204a9",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b55a9449778c5ac89799ce4c607c8c8d797ddfb/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b55a9449778c5ac89799ce4c607c8c8d797ddfb/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=7b55a9449778c5ac89799ce4c607c8c8d797ddfb",
        "patch": "@@ -43,7 +43,7 @@ class NetPermissions\n public:\n     NetPermissionFlags m_flags;\n     static std::vector<std::string> ToStrings(NetPermissionFlags flags);\n-    static inline bool HasFlag(const NetPermissionFlags& flags, NetPermissionFlags f)\n+    static inline bool HasFlag(NetPermissionFlags flags, NetPermissionFlags f)\n     {\n         return (flags & f) == f;\n     }"
      }
    ]
  },
  {
    "sha": "810d0929c1626bba141af3f779a3c9cd6ece7e75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTBkMDkyOWMxNjI2YmJhMTQxYWYzZjc3OWEzYzljZDZlY2U3ZTc1",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-22T19:05:15Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-12T14:13:23Z"
      },
      "message": "p2p, refactor: make NetPermissionFlags a uint32 enum class\n\nand define/update operation methods to handle type conversions explicitly. See\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-oper\nfor more info.",
      "tree": {
        "sha": "ee53bcfd34893fbdc65c451a376991c5a01043f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee53bcfd34893fbdc65c451a376991c5a01043f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/810d0929c1626bba141af3f779a3c9cd6ece7e75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCb4okACgkQT1chs9Dj\nkh3ymRAAtIZe7X2S+dAz4l/dLmq54ri7AdkmhO64KbhNA9icnQz3n+bEYn0WMUBO\nreZJ1foVdChp6Ym5McvwqQRVMPg0XKJLaqUM3Xa/jkMIu7fkUNeWiFsQSj5/WbPh\n/JbeCbKrUItyKEGBb49L28S1s8WSPyL1po7nolaKev8fS8vLpwTtmN6/7kQVKEMM\nufKdMf8NuQJkiSrd4ga8Yyc1dkDhezakGSu3PD9pmQ0qje2A97lIbqAItYkq1rAG\nSlSiMrz1cLktZPbWnIOEvt1RSFtyKU6zN7nONSTdA85CDTUGX+As+Kp6LKT7vBoz\nPDxdr4vWYoQNG0EQGdxwXEJRVcN54Wk+BmUhtj/9Qnv0ToCLKUEytTdUO3q3nbd4\nCRh4I+6yp/Wl89/ZirHSX64CMRvGbN/FcE0qSa42oMT49nEbkNm2UMeatLVzq/D3\nD+oYeVrsom9gIM+NV22X2n7v3rXL5Tg2XCjyTwG+GMT/829eJ/uuxDfDRvnJHASw\nGK/mytT2lXHgPgIaktz8RzIi6CNglnLRm9oxPk0LpEmAVRme0S0iQJNvPLixDoUO\noNdINVCupgijBrhdotYD+91oua+xLAaudq6uU+LooBQPrZ0qMNwFWUTfyslkID88\nCJj3BVlwqqYyoouNcdKzhJHRQPYGs3lKBoorkVqpRIHGilU9qyE=\n=nIhq\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwILJufL/YjZ4fTRzRFJTlRW8QSDs0gidce+5h8X12Ea55CP/wELbEBwWHGAF3\nkr3x+p4ZVqkI8QRgm+KK8AjJTY7La34mIACD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEO1RAJA+OyXGrUksDARy\nev0I8QRgm+KK8AhE3wY+GeOl5gCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5k\nYXIuY2F0YWxsYXh5LmNvbfAQ/2mjl817T0OPEbDDWqQozwjxBGCb4orwCBYzx6tI\nDwwPAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree ee53bcfd34893fbdc65c451a376991c5a01043f6\nparent 7b55a9449778c5ac89799ce4c607c8c8d797ddfb\nauthor Jon Atack <jon@atack.com> 1616439915 +0100\ncommitter Jon Atack <jon@atack.com> 1620828803 +0200\n\np2p, refactor: make NetPermissionFlags a uint32 enum class\n\nand define/update operation methods to handle type conversions explicitly. See\nhttps://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-oper\nfor more info.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/810d0929c1626bba141af3f779a3c9cd6ece7e75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/810d0929c1626bba141af3f779a3c9cd6ece7e75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/810d0929c1626bba141af3f779a3c9cd6ece7e75/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b55a9449778c5ac89799ce4c607c8c8d797ddfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b55a9449778c5ac89799ce4c607c8c8d797ddfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b55a9449778c5ac89799ce4c607c8c8d797ddfb"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 12,
      "deletions": 4
    },
    "files": [
      {
        "sha": "55b6db58daa2bbea85f30fff50ee293ccc6f2c64",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/810d0929c1626bba141af3f779a3c9cd6ece7e75/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/810d0929c1626bba141af3f779a3c9cd6ece7e75/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=810d0929c1626bba141af3f779a3c9cd6ece7e75",
        "patch": "@@ -5,6 +5,7 @@\n #include <netaddress.h>\n \n #include <string>\n+#include <type_traits>\n #include <vector>\n \n #ifndef BITCOIN_NET_PERMISSIONS_H\n@@ -14,7 +15,7 @@ struct bilingual_str;\n \n extern const std::vector<std::string> NET_PERMISSIONS_DOC;\n \n-enum NetPermissionFlags {\n+enum class NetPermissionFlags : uint32_t {\n     PF_NONE = 0,\n     // Can query bloomfilter even if -peerbloomfilters is false\n     PF_BLOOMFILTER = (1U << 1),\n@@ -37,6 +38,11 @@ enum NetPermissionFlags {\n     PF_ISIMPLICIT = (1U << 31),\n     PF_ALL = PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY | PF_NOBAN | PF_MEMPOOL | PF_DOWNLOAD | PF_ADDR,\n };\n+static inline constexpr NetPermissionFlags operator|(NetPermissionFlags a, NetPermissionFlags b)\n+{\n+    using t = typename std::underlying_type<NetPermissionFlags>::type;\n+    return static_cast<NetPermissionFlags>(static_cast<t>(a) | static_cast<t>(b));\n+}\n \n class NetPermissions\n {\n@@ -45,11 +51,12 @@ class NetPermissions\n     static std::vector<std::string> ToStrings(NetPermissionFlags flags);\n     static inline bool HasFlag(NetPermissionFlags flags, NetPermissionFlags f)\n     {\n-        return (flags & f) == f;\n+        using t = typename std::underlying_type<NetPermissionFlags>::type;\n+        return (static_cast<t>(flags) & static_cast<t>(f)) == static_cast<t>(f);\n     }\n     static inline void AddFlag(NetPermissionFlags& flags, NetPermissionFlags f)\n     {\n-        flags = static_cast<NetPermissionFlags>(flags | f);\n+        flags = flags | f;\n     }\n     //! ClearFlag is only called with `f` == NetPermissionFlags::PF_ISIMPLICIT.\n     //! If that should change in the future, be aware that ClearFlag should not\n@@ -59,7 +66,8 @@ class NetPermissions\n     static inline void ClearFlag(NetPermissionFlags& flags, NetPermissionFlags f)\n     {\n         assert(f == NetPermissionFlags::PF_ISIMPLICIT);\n-        flags = static_cast<NetPermissionFlags>(flags & ~f);\n+        using t = typename std::underlying_type<NetPermissionFlags>::type;\n+        flags = static_cast<NetPermissionFlags>(static_cast<t>(flags) & ~static_cast<t>(f));\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "a95540cf435029f06e56749802d71315ca76b0dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTU1NDBjZjQzNTAyOWYwNmU1Njc0OTgwMmQ3MTMxNWNhNzZiMGRk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-03-21T21:46:50Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-12T14:13:30Z"
      },
      "message": "scripted-diff: rename NetPermissionFlags enumerators\n\n- drop redundant PF_ permission flags prefixes\n- drop ALL_CAPS naming per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-caps\n- rename IsImplicit to Implicit\n\n-BEGIN VERIFY SCRIPT-\ns() { git grep -l \"$1\" src | xargs sed -i \"s/$1/$2/g\"; }\n\ns 'PF_NONE'        'None'\ns 'PF_BLOOMFILTER' 'BloomFilter'\ns 'PF_RELAY'       'Relay'\ns 'PF_FORCERELAY'  'ForceRelay'\ns 'PF_DOWNLOAD'    'Download'\ns 'PF_NOBAN'       'NoBan'\ns 'PF_MEMPOOL'     'Mempool'\ns 'PF_ADDR'        'Addr'\ns 'PF_ISIMPLICIT'  'Implicit'\ns 'PF_ALL'         'All'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "98477de463757ddd35d1238778bcd4c916126eaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98477de463757ddd35d1238778bcd4c916126eaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a95540cf435029f06e56749802d71315ca76b0dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCb4ooACgkQT1chs9Dj\nkh14lhAAryXypSXNtEE/dRvet+ZloLdb2ecJrI8PsZHBx3l2hCOBdg8M6hQKAdEO\n8PKpVAvuA6jpXVMTEihpSZFNMQZfTBk1eBxS7+z0jhtyul2EhNC6ChqS/wWTQf6b\n7c8SAs2q6+HpXe2lFgQza8xskqUXsrv1Bod1S695OzHHaVg/pSjc9NV7Z3gmmxWx\nwo9B9C77Y3N7u/2yujZKp6vFw/tSWdfdbxgupldrdPMcD/Wu3HZ759F1GjylpcXS\nUQlMcnMz63mm2cqvfc7wsdmNMXk1BDp9DJe3TG7aFRsCVxGPlcwpAc6+0bl2aiAV\n9ZTvcX01vjMEKahxa9uL59517GA/ZxDIC6yjz+TVq1cTzS8B+gauin9cKw4kF2fM\nNDixGgEcp18Pq9un78MZhflcxeb6F+i1LQA7R/N/1DQdmE4qtQz8aV1aiMnP28We\nMG+8+SDF84+icmHgZvwQOM/7MiBKs+EEzm/S2H1mMpSqb5Qnw5mnrekeiiPuij26\nmy7NldX7e4Sy4vMeSyp4GLY0lDiIo4WeytzXot0+x7AWgqSu6nq3yf34mizAyNB+\nt7jN8EJIXDTzWRv/eJiR/3qRrNOpOBo07xBrO2LQT1bV16zQAFgVpLjPCuOOpPpZ\n6QKnO1xUYNENgcWs3zD+qDq9SL3Si/hQ1WdoMR0Z3bVBE/6d2DU=\n=VX3y\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIOYhuW4CsvanKIfPcJ57Z1su58Z2zHtVO4AOO0ohZV5PCP/wECIsNoauaH0W\nck9b5racwC0I8QRgm+KM8Ag2iQQEFHEdoACD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wEJx7ou6ccue1bHQFqshdq2MI8QRgm+KM\n8AgAc24e8OgaCACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn8BDpttXNT7dGjtgucLvPNRKqCPEEYJvijPAI0z9O\n9D/QIDcAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGlt\nZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 98477de463757ddd35d1238778bcd4c916126eaa\nparent 810d0929c1626bba141af3f779a3c9cd6ece7e75\nauthor Jon Atack <jon@atack.com> 1616363210 +0100\ncommitter Jon Atack <jon@atack.com> 1620828810 +0200\n\nscripted-diff: rename NetPermissionFlags enumerators\n\n- drop redundant PF_ permission flags prefixes\n- drop ALL_CAPS naming per https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Renum-caps\n- rename IsImplicit to Implicit\n\n-BEGIN VERIFY SCRIPT-\ns() { git grep -l \"$1\" src | xargs sed -i \"s/$1/$2/g\"; }\n\ns 'PF_NONE'        'None'\ns 'PF_BLOOMFILTER' 'BloomFilter'\ns 'PF_RELAY'       'Relay'\ns 'PF_FORCERELAY'  'ForceRelay'\ns 'PF_DOWNLOAD'    'Download'\ns 'PF_NOBAN'       'NoBan'\ns 'PF_MEMPOOL'     'Mempool'\ns 'PF_ADDR'        'Addr'\ns 'PF_ISIMPLICIT'  'Implicit'\ns 'PF_ALL'         'All'\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a95540cf435029f06e56749802d71315ca76b0dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a95540cf435029f06e56749802d71315ca76b0dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a95540cf435029f06e56749802d71315ca76b0dd/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "810d0929c1626bba141af3f779a3c9cd6ece7e75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/810d0929c1626bba141af3f779a3c9cd6ece7e75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/810d0929c1626bba141af3f779a3c9cd6ece7e75"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 108,
      "deletions": 108
    },
    "files": [
      {
        "sha": "6e1344aa0ed822d9a2bc285bc04369257baae420",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -1005,7 +1005,7 @@ bool CConnman::AttemptToEvictConnection()\n \n         LOCK(cs_vNodes);\n         for (const CNode* node : vNodes) {\n-            if (node->HasPermission(NetPermissionFlags::PF_NOBAN))\n+            if (node->HasPermission(NetPermissionFlags::NoBan))\n                 continue;\n             if (!node->IsInboundConn())\n                 continue;\n@@ -1062,7 +1062,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     const CAddress addr_bind = GetBindAddress(hSocket);\n \n-    NetPermissionFlags permissionFlags = NetPermissionFlags::PF_NONE;\n+    NetPermissionFlags permissionFlags = NetPermissionFlags::None;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n \n     CreateNodeFromAcceptedSocket(hSocket, permissionFlags, addr_bind, addr);\n@@ -1077,12 +1077,12 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     int nMaxInbound = nMaxConnections - m_max_outbound;\n \n     AddWhitelistPermissionFlags(permissionFlags, addr);\n-    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_ISIMPLICIT)) {\n-        NetPermissions::ClearFlag(permissionFlags, NetPermissionFlags::PF_ISIMPLICIT);\n-        if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_FORCERELAY);\n-        if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_RELAY);\n-        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_MEMPOOL);\n-        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::PF_NOBAN);\n+    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::Implicit)) {\n+        NetPermissions::ClearFlag(permissionFlags, NetPermissionFlags::Implicit);\n+        if (gArgs.GetBoolArg(\"-whitelistforcerelay\", DEFAULT_WHITELISTFORCERELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::ForceRelay);\n+        if (gArgs.GetBoolArg(\"-whitelistrelay\", DEFAULT_WHITELISTRELAY)) NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::Relay);\n+        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::Mempool);\n+        NetPermissions::AddFlag(permissionFlags, NetPermissionFlags::NoBan);\n     }\n \n     {\n@@ -1111,7 +1111,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n \n     // Don't accept connections from banned peers.\n     bool banned = m_banman && m_banman->IsBanned(addr);\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && banned)\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::NoBan) && banned)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -1120,7 +1120,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n \n     // Only accept connections from discouraged peers if our inbound slots aren't (almost) full.\n     bool discouraged = m_banman && m_banman->IsDiscouraged(addr);\n-    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && discouraged)\n+    if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::NoBan) && nInbound + 1 >= nMaxInbound && discouraged)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n         CloseSocket(hSocket);\n@@ -1141,7 +1141,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n \n     ServiceFlags nodeServices = nLocalServices;\n-    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_BLOOMFILTER)) {\n+    if (NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::BloomFilter)) {\n         nodeServices = static_cast<ServiceFlags>(nodeServices | NODE_BLOOM);\n     }\n \n@@ -2253,7 +2253,7 @@ void CConnman::ThreadI2PAcceptIncoming()\n             continue;\n         }\n \n-        CreateNodeFromAcceptedSocket(conn.sock->Release(), NetPermissionFlags::PF_NONE,\n+        CreateNodeFromAcceptedSocket(conn.sock->Release(), NetPermissionFlags::None,\n                                      CAddress{conn.me, NODE_NONE}, CAddress{conn.peer, NODE_NONE});\n     }\n }\n@@ -2411,7 +2411,7 @@ bool CConnman::Bind(const CService &addr, unsigned int flags, NetPermissionFlags\n         return false;\n     }\n \n-    if (addr.IsRoutable() && fDiscover && !(flags & BF_DONT_ADVERTISE) && !NetPermissions::HasFlag(permissions, NetPermissionFlags::PF_NOBAN)) {\n+    if (addr.IsRoutable() && fDiscover && !(flags & BF_DONT_ADVERTISE) && !NetPermissions::HasFlag(permissions, NetPermissionFlags::NoBan)) {\n         AddLocal(addr, LOCAL_BIND);\n     }\n \n@@ -2425,7 +2425,7 @@ bool CConnman::InitBinds(\n {\n     bool fBound = false;\n     for (const auto& addrBind : binds) {\n-        fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR), NetPermissionFlags::PF_NONE);\n+        fBound |= Bind(addrBind, (BF_EXPLICIT | BF_REPORT_ERROR), NetPermissionFlags::None);\n     }\n     for (const auto& addrBind : whiteBinds) {\n         fBound |= Bind(addrBind.m_service, (BF_EXPLICIT | BF_REPORT_ERROR), addrBind.m_flags);\n@@ -2434,12 +2434,12 @@ bool CConnman::InitBinds(\n         struct in_addr inaddr_any;\n         inaddr_any.s_addr = htonl(INADDR_ANY);\n         struct in6_addr inaddr6_any = IN6ADDR_ANY_INIT;\n-        fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE, NetPermissionFlags::PF_NONE);\n-        fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE, NetPermissionFlags::PF_NONE);\n+        fBound |= Bind(CService(inaddr6_any, GetListenPort()), BF_NONE, NetPermissionFlags::None);\n+        fBound |= Bind(CService(inaddr_any, GetListenPort()), !fBound ? BF_REPORT_ERROR : BF_NONE, NetPermissionFlags::None);\n     }\n \n     for (const auto& addr_bind : onion_binds) {\n-        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::PF_NONE);\n+        fBound |= Bind(addr_bind, BF_EXPLICIT | BF_DONT_ADVERTISE, NetPermissionFlags::None);\n     }\n \n     return fBound;"
      },
      {
        "sha": "65b262e573c100fd5aa2942094ff050161bbe84e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -402,7 +402,7 @@ class CNode\n     std::unique_ptr<TransportDeserializer> m_deserializer;\n     std::unique_ptr<TransportSerializer> m_serializer;\n \n-    NetPermissionFlags m_permissionFlags{NetPermissionFlags::PF_NONE};\n+    NetPermissionFlags m_permissionFlags{NetPermissionFlags::None};\n     std::atomic<ServiceFlags> nServices{NODE_NONE};\n     SOCKET hSocket GUARDED_BY(cs_hSocket);\n     /** Total size of all vSendMsg entries */"
      },
      {
        "sha": "228453df20095c8574a1f88af68787f0578c6d3c",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -23,12 +23,12 @@ namespace {\n // The parse the following format \"perm1,perm2@xxxxxx\"\n bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output, size_t& readen, bilingual_str& error)\n {\n-    NetPermissionFlags flags = NetPermissionFlags::PF_NONE;\n+    NetPermissionFlags flags = NetPermissionFlags::None;\n     const auto atSeparator = str.find('@');\n \n     // if '@' is not found (ie, \"xxxxx\"), the caller should apply implicit permissions\n     if (atSeparator == std::string::npos) {\n-        NetPermissions::AddFlag(flags, NetPermissionFlags::PF_ISIMPLICIT);\n+        NetPermissions::AddFlag(flags, NetPermissionFlags::Implicit);\n         readen = 0;\n     }\n     // else (ie, \"perm1,perm2@xxxxx\"), let's enumerate the permissions by splitting by ',' and calculate the flags\n@@ -44,14 +44,14 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n             readen += len; // We read \"perm1\"\n             if (commaSeparator != std::string::npos) readen++; // We read \",\"\n \n-            if (permission == \"bloomfilter\" || permission == \"bloom\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_BLOOMFILTER);\n-            else if (permission == \"noban\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_NOBAN);\n-            else if (permission == \"forcerelay\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_FORCERELAY);\n-            else if (permission == \"mempool\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_MEMPOOL);\n-            else if (permission == \"download\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_DOWNLOAD);\n-            else if (permission == \"all\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_ALL);\n-            else if (permission == \"relay\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_RELAY);\n-            else if (permission == \"addr\") NetPermissions::AddFlag(flags, NetPermissionFlags::PF_ADDR);\n+            if (permission == \"bloomfilter\" || permission == \"bloom\") NetPermissions::AddFlag(flags, NetPermissionFlags::BloomFilter);\n+            else if (permission == \"noban\") NetPermissions::AddFlag(flags, NetPermissionFlags::NoBan);\n+            else if (permission == \"forcerelay\") NetPermissions::AddFlag(flags, NetPermissionFlags::ForceRelay);\n+            else if (permission == \"mempool\") NetPermissions::AddFlag(flags, NetPermissionFlags::Mempool);\n+            else if (permission == \"download\") NetPermissions::AddFlag(flags, NetPermissionFlags::Download);\n+            else if (permission == \"all\") NetPermissions::AddFlag(flags, NetPermissionFlags::All);\n+            else if (permission == \"relay\") NetPermissions::AddFlag(flags, NetPermissionFlags::Relay);\n+            else if (permission == \"addr\") NetPermissions::AddFlag(flags, NetPermissionFlags::Addr);\n             else if (permission.length() == 0); // Allow empty entries\n             else {\n                 error = strprintf(_(\"Invalid P2P permission: '%s'\"), permission);\n@@ -71,13 +71,13 @@ bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output,\n std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n {\n     std::vector<std::string> strings;\n-    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_BLOOMFILTER)) strings.push_back(\"bloomfilter\");\n-    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_NOBAN)) strings.push_back(\"noban\");\n-    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_FORCERELAY)) strings.push_back(\"forcerelay\");\n-    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_RELAY)) strings.push_back(\"relay\");\n-    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_MEMPOOL)) strings.push_back(\"mempool\");\n-    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_DOWNLOAD)) strings.push_back(\"download\");\n-    if (NetPermissions::HasFlag(flags, NetPermissionFlags::PF_ADDR)) strings.push_back(\"addr\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::BloomFilter)) strings.push_back(\"bloomfilter\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::NoBan)) strings.push_back(\"noban\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::ForceRelay)) strings.push_back(\"forcerelay\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::Relay)) strings.push_back(\"relay\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::Mempool)) strings.push_back(\"mempool\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::Download)) strings.push_back(\"download\");\n+    if (NetPermissions::HasFlag(flags, NetPermissionFlags::Addr)) strings.push_back(\"addr\");\n     return strings;\n }\n "
      },
      {
        "sha": "7a158aa6c5b6d6770c0d289490813e7571c6de04",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -16,27 +16,27 @@ struct bilingual_str;\n extern const std::vector<std::string> NET_PERMISSIONS_DOC;\n \n enum class NetPermissionFlags : uint32_t {\n-    PF_NONE = 0,\n+    None = 0,\n     // Can query bloomfilter even if -peerbloomfilters is false\n-    PF_BLOOMFILTER = (1U << 1),\n+    BloomFilter = (1U << 1),\n     // Relay and accept transactions from this peer, even if -blocksonly is true\n     // This peer is also not subject to limits on how many transaction INVs are tracked\n-    PF_RELAY = (1U << 3),\n+    Relay = (1U << 3),\n     // Always relay transactions from this peer, even if already in mempool\n     // Keep parameter interaction: forcerelay implies relay\n-    PF_FORCERELAY = (1U << 2) | PF_RELAY,\n+    ForceRelay = (1U << 2) | Relay,\n     // Allow getheaders during IBD and block-download after maxuploadtarget limit\n-    PF_DOWNLOAD = (1U << 6),\n+    Download = (1U << 6),\n     // Can't be banned/disconnected/discouraged for misbehavior\n-    PF_NOBAN = (1U << 4) | PF_DOWNLOAD,\n+    NoBan = (1U << 4) | Download,\n     // Can query the mempool\n-    PF_MEMPOOL = (1U << 5),\n+    Mempool = (1U << 5),\n     // Can request addrs without hitting a privacy-preserving cache\n-    PF_ADDR = (1U << 7),\n+    Addr = (1U << 7),\n \n     // True if the user did not specifically set fine grained permissions\n-    PF_ISIMPLICIT = (1U << 31),\n-    PF_ALL = PF_BLOOMFILTER | PF_FORCERELAY | PF_RELAY | PF_NOBAN | PF_MEMPOOL | PF_DOWNLOAD | PF_ADDR,\n+    Implicit = (1U << 31),\n+    All = BloomFilter | ForceRelay | Relay | NoBan | Mempool | Download | Addr,\n };\n static inline constexpr NetPermissionFlags operator|(NetPermissionFlags a, NetPermissionFlags b)\n {\n@@ -58,14 +58,14 @@ class NetPermissions\n     {\n         flags = flags | f;\n     }\n-    //! ClearFlag is only called with `f` == NetPermissionFlags::PF_ISIMPLICIT.\n+    //! ClearFlag is only called with `f` == NetPermissionFlags::Implicit.\n     //! If that should change in the future, be aware that ClearFlag should not\n-    //! be called with a subflag of a multiflag, e.g. NetPermissionFlags::PF_RELAY\n-    //! or NetPermissionFlags::PF_DOWNLOAD, as that would leave `flags` in an\n+    //! be called with a subflag of a multiflag, e.g. NetPermissionFlags::Relay\n+    //! or NetPermissionFlags::Download, as that would leave `flags` in an\n     //! invalid state corresponding to none of the existing flags.\n     static inline void ClearFlag(NetPermissionFlags& flags, NetPermissionFlags f)\n     {\n-        assert(f == NetPermissionFlags::PF_ISIMPLICIT);\n+        assert(f == NetPermissionFlags::Implicit);\n         using t = typename std::underlying_type<NetPermissionFlags>::type;\n         flags = static_cast<NetPermissionFlags>(static_cast<t>(flags) & ~static_cast<t>(f));\n     }"
      },
      {
        "sha": "f6d02f0314175b3ca328466ce6b28d244c69c3e3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -680,7 +680,7 @@ static void UpdatePreferredDownload(const CNode& node, CNodeState* state) EXCLUS\n     nPreferredDownload -= state->fPreferredDownload;\n \n     // Whether this node should be marked as a preferred download node.\n-    state->fPreferredDownload = (!node.IsInboundConn() || node.HasPermission(NetPermissionFlags::PF_NOBAN)) && !node.IsAddrFetchConn() && !node.fClient;\n+    state->fPreferredDownload = (!node.IsInboundConn() || node.HasPermission(NetPermissionFlags::NoBan)) && !node.IsAddrFetchConn() && !node.fClient;\n \n     nPreferredDownload += state->fPreferredDownload;\n }\n@@ -960,24 +960,24 @@ void PeerManagerImpl::AddTxAnnouncement(const CNode& node, const GenTxid& gtxid,\n {\n     AssertLockHeld(::cs_main); // For m_txrequest\n     NodeId nodeid = node.GetId();\n-    if (!node.HasPermission(NetPermissionFlags::PF_RELAY) && m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n+    if (!node.HasPermission(NetPermissionFlags::Relay) && m_txrequest.Count(nodeid) >= MAX_PEER_TX_ANNOUNCEMENTS) {\n         // Too many queued announcements from this peer\n         return;\n     }\n     const CNodeState* state = State(nodeid);\n \n     // Decide the TxRequestTracker parameters for this announcement:\n-    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::PF_NOBAN permission)\n+    // - \"preferred\": if fPreferredDownload is set (= outbound, or NetPermissionFlags::NoBan permission)\n     // - \"reqtime\": current time plus delays for:\n     //   - NONPREF_PEER_TX_DELAY for announcements from non-preferred connections\n     //   - TXID_RELAY_DELAY for txid announcements while wtxid peers are available\n     //   - OVERLOADED_PEER_TX_DELAY for announcements from peers which have at least\n-    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::PF_RELAY).\n+    //     MAX_PEER_TX_REQUEST_IN_FLIGHT requests in flight (and don't have NetPermissionFlags::Relay).\n     auto delay = std::chrono::microseconds{0};\n     const bool preferred = state->fPreferredDownload;\n     if (!preferred) delay += NONPREF_PEER_TX_DELAY;\n     if (!gtxid.IsWtxid() && m_wtxid_relay_peers > 0) delay += TXID_RELAY_DELAY;\n-    const bool overloaded = !node.HasPermission(NetPermissionFlags::PF_RELAY) &&\n+    const bool overloaded = !node.HasPermission(NetPermissionFlags::Relay) &&\n         m_txrequest.CountInFlight(nodeid) >= MAX_PEER_TX_REQUEST_IN_FLIGHT;\n     if (overloaded) delay += OVERLOADED_PEER_TX_DELAY;\n     m_txrequest.ReceivedInv(nodeid, gtxid, preferred, current_time + delay);\n@@ -1637,14 +1637,14 @@ void PeerManagerImpl::ProcessGetBlockData(CNode& pfrom, Peer& peer, const CInv&\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n     if (m_connman.OutboundTargetReached(true) &&\n         (((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.IsMsgFilteredBlk()) &&\n-        !pfrom.HasPermission(NetPermissionFlags::PF_DOWNLOAD) // nodes with the download permission may exceed target\n+        !pfrom.HasPermission(NetPermissionFlags::Download) // nodes with the download permission may exceed target\n     ) {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom.GetId());\n         pfrom.fDisconnect = true;\n         return;\n     }\n     // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n-    if (!pfrom.HasPermission(NetPermissionFlags::PF_NOBAN) && (\n+    if (!pfrom.HasPermission(NetPermissionFlags::NoBan) && (\n             (((pfrom.GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom.GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (m_chainman.ActiveChain().Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n        )) {\n         LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold, disconnect peer=%d\\n\", pfrom.GetId());\n@@ -2738,7 +2738,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         bool fBlocksOnly = m_ignore_incoming_txs || (pfrom.m_tx_relay == nullptr);\n \n         // Allow peers with relay permission to send data other than blocks in blocks only mode\n-        if (pfrom.HasPermission(NetPermissionFlags::PF_RELAY)) {\n+        if (pfrom.HasPermission(NetPermissionFlags::Relay)) {\n             fBlocksOnly = false;\n         }\n \n@@ -2952,7 +2952,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         }\n \n         LOCK(cs_main);\n-        if (m_chainman.ActiveChainstate().IsInitialBlockDownload() && !pfrom.HasPermission(NetPermissionFlags::PF_DOWNLOAD)) {\n+        if (m_chainman.ActiveChainstate().IsInitialBlockDownload() && !pfrom.HasPermission(NetPermissionFlags::Download)) {\n             LogPrint(BCLog::NET, \"Ignoring getheaders from peer=%d because node is in initial block download\\n\", pfrom.GetId());\n             return;\n         }\n@@ -3011,7 +3011,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         // Stop processing the transaction early if\n         // 1) We are in blocks only mode and peer has no relay permission\n         // 2) This peer is a block-relay-only peer\n-        if ((m_ignore_incoming_txs && !pfrom.HasPermission(NetPermissionFlags::PF_RELAY)) || (pfrom.m_tx_relay == nullptr))\n+        if ((m_ignore_incoming_txs && !pfrom.HasPermission(NetPermissionFlags::Relay)) || (pfrom.m_tx_relay == nullptr))\n         {\n             LogPrint(BCLog::NET, \"transaction sent in violation of protocol peer=%d\\n\", pfrom.GetId());\n             pfrom.fDisconnect = true;\n@@ -3056,7 +3056,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n         // (older than our recency filter) if trying to DoS us, without any need\n         // for witness malleation.\n         if (AlreadyHaveTx(GenTxid(/* is_wtxid=*/true, wtxid))) {\n-            if (pfrom.HasPermission(NetPermissionFlags::PF_FORCERELAY)) {\n+            if (pfrom.HasPermission(NetPermissionFlags::ForceRelay)) {\n                 // Always relay transactions received from peers with forcerelay\n                 // permission, even if they were already in the mempool, allowing\n                 // the node to function as a gateway for nodes hidden behind it.\n@@ -3585,7 +3585,7 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n \n         pfrom.vAddrToSend.clear();\n         std::vector<CAddress> vAddr;\n-        if (pfrom.HasPermission(NetPermissionFlags::PF_ADDR)) {\n+        if (pfrom.HasPermission(NetPermissionFlags::Addr)) {\n             vAddr = m_connman.GetAddresses(MAX_ADDR_TO_SEND, MAX_PCT_ADDR_TO_SEND);\n         } else {\n             vAddr = m_connman.GetAddresses(pfrom, MAX_ADDR_TO_SEND, MAX_PCT_ADDR_TO_SEND);\n@@ -3598,19 +3598,19 @@ void PeerManagerImpl::ProcessMessage(CNode& pfrom, const std::string& msg_type,\n     }\n \n     if (msg_type == NetMsgType::MEMPOOL) {\n-        if (!(pfrom.GetLocalServices() & NODE_BLOOM) && !pfrom.HasPermission(NetPermissionFlags::PF_MEMPOOL))\n+        if (!(pfrom.GetLocalServices() & NODE_BLOOM) && !pfrom.HasPermission(NetPermissionFlags::Mempool))\n         {\n-            if (!pfrom.HasPermission(NetPermissionFlags::PF_NOBAN))\n+            if (!pfrom.HasPermission(NetPermissionFlags::NoBan))\n             {\n                 LogPrint(BCLog::NET, \"mempool request with bloom filters disabled, disconnect peer=%d\\n\", pfrom.GetId());\n                 pfrom.fDisconnect = true;\n             }\n             return;\n         }\n \n-        if (m_connman.OutboundTargetReached(false) && !pfrom.HasPermission(NetPermissionFlags::PF_MEMPOOL))\n+        if (m_connman.OutboundTargetReached(false) && !pfrom.HasPermission(NetPermissionFlags::Mempool))\n         {\n-            if (!pfrom.HasPermission(NetPermissionFlags::PF_NOBAN))\n+            if (!pfrom.HasPermission(NetPermissionFlags::NoBan))\n             {\n                 LogPrint(BCLog::NET, \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom.GetId());\n                 pfrom.fDisconnect = true;\n@@ -3825,7 +3825,7 @@ bool PeerManagerImpl::MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer)\n         peer.m_should_discourage = false;\n     } // peer.m_misbehavior_mutex\n \n-    if (pnode.HasPermission(NetPermissionFlags::PF_NOBAN)) {\n+    if (pnode.HasPermission(NetPermissionFlags::NoBan)) {\n         // We never disconnect or discourage peers for bad behavior if they have the NOBAN permission flag\n         LogPrintf(\"Warning: not punishing noban peer %d!\\n\", peer.m_id);\n         return false;\n@@ -4463,7 +4463,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n         if (pto->m_tx_relay != nullptr) {\n                 LOCK(pto->m_tx_relay->cs_tx_inventory);\n                 // Check whether periodic sends should happen\n-                bool fSendTrickle = pto->HasPermission(NetPermissionFlags::PF_NOBAN);\n+                bool fSendTrickle = pto->HasPermission(NetPermissionFlags::NoBan);\n                 if (pto->m_tx_relay->nNextInvSend < current_time) {\n                     fSendTrickle = true;\n                     if (pto->IsInboundConn()) {\n@@ -4625,7 +4625,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n                     // Note: If all our peers are inbound, then we won't\n                     // disconnect our sync peer for stalling; we have bigger\n                     // problems if we can't get any outbound peers.\n-                    if (!pto->HasPermission(NetPermissionFlags::PF_NOBAN)) {\n+                    if (!pto->HasPermission(NetPermissionFlags::NoBan)) {\n                         LogPrintf(\"Timeout downloading headers from peer=%d, disconnecting\\n\", pto->GetId());\n                         pto->fDisconnect = true;\n                         return true;\n@@ -4712,7 +4712,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             !m_ignore_incoming_txs &&\n             pto->GetCommonVersion() >= FEEFILTER_VERSION &&\n             gArgs.GetBoolArg(\"-feefilter\", DEFAULT_FEEFILTER) &&\n-            !pto->HasPermission(NetPermissionFlags::PF_FORCERELAY) // peers with the forcerelay permission should not filter txs to us\n+            !pto->HasPermission(NetPermissionFlags::ForceRelay) // peers with the forcerelay permission should not filter txs to us\n         ) {\n             CAmount currentFilter = m_mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK();\n             static FeeFilterRounder g_filter_rounder{CFeeRate{DEFAULT_MIN_RELAY_TX_FEE}};"
      },
      {
        "sha": "eed73e8ce3450962ce8331e7957a7189a11576ba",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -1062,7 +1062,7 @@ void RPCConsole::updateDetailWidget()\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));\n     ui->peerConnectionType->setText(GUIUtil::ConnectionTypeToQString(stats->nodeStats.m_conn_type, /* prepend_direction */ true));\n     ui->peerNetwork->setText(GUIUtil::NetworkToQString(stats->nodeStats.m_network));\n-    if (stats->nodeStats.m_permissionFlags == NetPermissionFlags::PF_NONE) {\n+    if (stats->nodeStats.m_permissionFlags == NetPermissionFlags::None) {\n         ui->peerPermissions->setText(ts.na);\n     } else {\n         QStringList permissions;"
      },
      {
        "sha": "6ea79464d019c912c65c85bdb384b0b794a68023",
        "filename": "src/test/fuzz/net_permissions.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/test/fuzz/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/test/fuzz/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/net_permissions.cpp?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -25,7 +25,7 @@ FUZZ_TARGET(net_permissions)\n         (void)NetPermissions::ToStrings(net_whitebind_permissions.m_flags);\n         (void)NetPermissions::AddFlag(net_whitebind_permissions.m_flags, net_permission_flags);\n         assert(NetPermissions::HasFlag(net_whitebind_permissions.m_flags, net_permission_flags));\n-        (void)NetPermissions::ClearFlag(net_whitebind_permissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n+        (void)NetPermissions::ClearFlag(net_whitebind_permissions.m_flags, NetPermissionFlags::Implicit);\n         (void)NetPermissions::ToStrings(net_whitebind_permissions.m_flags);\n     }\n \n@@ -35,7 +35,7 @@ FUZZ_TARGET(net_permissions)\n         (void)NetPermissions::ToStrings(net_whitelist_permissions.m_flags);\n         (void)NetPermissions::AddFlag(net_whitelist_permissions.m_flags, net_permission_flags);\n         assert(NetPermissions::HasFlag(net_whitelist_permissions.m_flags, net_permission_flags));\n-        (void)NetPermissions::ClearFlag(net_whitelist_permissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n+        (void)NetPermissions::ClearFlag(net_whitelist_permissions.m_flags, NetPermissionFlags::Implicit);\n         (void)NetPermissions::ToStrings(net_whitelist_permissions.m_flags);\n     }\n }"
      },
      {
        "sha": "3c47cf83e2044e4c2ecba8a474a9bed5d4f013c4",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 26,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -381,27 +381,27 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     // If no permission flags, assume backward compatibility\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"1.2.3.4:32\", whitebindPermissions, error));\n     BOOST_CHECK(error.empty());\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n-    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT));\n-    NetPermissions::ClearFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n-    BOOST_CHECK(!NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n-    NetPermissions::AddFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT);\n-    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::PF_ISIMPLICIT));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::Implicit);\n+    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::Implicit));\n+    NetPermissions::ClearFlag(whitebindPermissions.m_flags, NetPermissionFlags::Implicit);\n+    BOOST_CHECK(!NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::Implicit));\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::None);\n+    NetPermissions::AddFlag(whitebindPermissions.m_flags, NetPermissionFlags::Implicit);\n+    BOOST_CHECK(NetPermissions::HasFlag(whitebindPermissions.m_flags, NetPermissionFlags::Implicit));\n \n     // Can set one permission\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::BloomFilter);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::None);\n \n     NetWhitebindPermissions noban, noban_download, download_noban, download;\n \n     // \"noban\" implies \"download\"\n     BOOST_REQUIRE(NetWhitebindPermissions::TryParse(\"noban@1.2.3.4:32\", noban, error));\n-    BOOST_CHECK_EQUAL(noban.m_flags, NetPermissionFlags::PF_NOBAN);\n-    BOOST_CHECK(NetPermissions::HasFlag(noban.m_flags, NetPermissionFlags::PF_DOWNLOAD));\n-    BOOST_CHECK(NetPermissions::HasFlag(noban.m_flags, NetPermissionFlags::PF_NOBAN));\n+    BOOST_CHECK_EQUAL(noban.m_flags, NetPermissionFlags::NoBan);\n+    BOOST_CHECK(NetPermissions::HasFlag(noban.m_flags, NetPermissionFlags::Download));\n+    BOOST_CHECK(NetPermissions::HasFlag(noban.m_flags, NetPermissionFlags::NoBan));\n \n     // \"noban,download\" is equivalent to \"noban\"\n     BOOST_REQUIRE(NetWhitebindPermissions::TryParse(\"noban,download@1.2.3.4:32\", noban_download, error));\n@@ -413,31 +413,31 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n \n     // \"download\" excludes (does not imply) \"noban\"\n     BOOST_REQUIRE(NetWhitebindPermissions::TryParse(\"download@1.2.3.4:32\", download, error));\n-    BOOST_CHECK_EQUAL(download.m_flags, NetPermissionFlags::PF_DOWNLOAD);\n-    BOOST_CHECK(NetPermissions::HasFlag(download.m_flags, NetPermissionFlags::PF_DOWNLOAD));\n-    BOOST_CHECK(!NetPermissions::HasFlag(download.m_flags, NetPermissionFlags::PF_NOBAN));\n+    BOOST_CHECK_EQUAL(download.m_flags, NetPermissionFlags::Download);\n+    BOOST_CHECK(NetPermissions::HasFlag(download.m_flags, NetPermissionFlags::Download));\n+    BOOST_CHECK(!NetPermissions::HasFlag(download.m_flags, NetPermissionFlags::NoBan));\n \n     // Happy path, can parse flags\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,forcerelay@1.2.3.4:32\", whitebindPermissions, error));\n     // forcerelay should also activate the relay permission\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_FORCERELAY | NetPermissionFlags::PF_RELAY);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::BloomFilter | NetPermissionFlags::ForceRelay | NetPermissionFlags::Relay);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,noban@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_RELAY | NetPermissionFlags::PF_NOBAN);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::BloomFilter | NetPermissionFlags::Relay | NetPermissionFlags::NoBan);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,forcerelay,noban@1.2.3.4:32\", whitebindPermissions, error));\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"all@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_ALL);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::All);\n \n     // Allow dups\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,noban,noban@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_RELAY | NetPermissionFlags::PF_NOBAN | NetPermissionFlags::PF_DOWNLOAD); // \"noban\" implies \"download\"\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::BloomFilter | NetPermissionFlags::Relay | NetPermissionFlags::NoBan | NetPermissionFlags::Download); // \"noban\" implies \"download\"\n \n     // Allow empty\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\"bloom,relay,,noban@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_RELAY | NetPermissionFlags::PF_NOBAN);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::BloomFilter | NetPermissionFlags::Relay | NetPermissionFlags::NoBan);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\",@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::None);\n     BOOST_CHECK(NetWhitebindPermissions::TryParse(\",,@1.2.3.4:32\", whitebindPermissions, error));\n-    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::PF_NONE);\n+    BOOST_CHECK_EQUAL(whitebindPermissions.m_flags, NetPermissionFlags::None);\n \n     // Detect invalid flag\n     BOOST_CHECK(!NetWhitebindPermissions::TryParse(\"bloom,forcerelay,oopsie@1.2.3.4:32\", whitebindPermissions, error));\n@@ -449,16 +449,16 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n \n     // Happy path for whitelist parsing\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"noban@1.2.3.4\", whitelistPermissions, error));\n-    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::PF_NOBAN);\n-    BOOST_CHECK(NetPermissions::HasFlag(whitelistPermissions.m_flags, NetPermissionFlags::PF_NOBAN));\n+    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::NoBan);\n+    BOOST_CHECK(NetPermissions::HasFlag(whitelistPermissions.m_flags, NetPermissionFlags::NoBan));\n \n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay@1.2.3.4/32\", whitelistPermissions, error));\n-    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::PF_BLOOMFILTER | NetPermissionFlags::PF_FORCERELAY | NetPermissionFlags::PF_NOBAN | NetPermissionFlags::PF_RELAY);\n+    BOOST_CHECK_EQUAL(whitelistPermissions.m_flags, NetPermissionFlags::BloomFilter | NetPermissionFlags::ForceRelay | NetPermissionFlags::NoBan | NetPermissionFlags::Relay);\n     BOOST_CHECK(error.empty());\n     BOOST_CHECK_EQUAL(whitelistPermissions.m_subnet.ToString(), \"1.2.3.4/32\");\n     BOOST_CHECK(NetWhitelistPermissions::TryParse(\"bloom,forcerelay,noban,relay,mempool@1.2.3.4/32\", whitelistPermissions, error));\n \n-    const auto strings = NetPermissions::ToStrings(NetPermissionFlags::PF_ALL);\n+    const auto strings = NetPermissions::ToStrings(NetPermissionFlags::All);\n     BOOST_CHECK_EQUAL(strings.size(), 7U);\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"bloomfilter\") != strings.end());\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"forcerelay\") != strings.end());"
      },
      {
        "sha": "71685d437adcb54c9a44d901588030105812c626",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a95540cf435029f06e56749802d71315ca76b0dd/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a95540cf435029f06e56749802d71315ca76b0dd/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=a95540cf435029f06e56749802d71315ca76b0dd",
        "patch": "@@ -46,16 +46,16 @@ constexpr ServiceFlags ALL_SERVICE_FLAGS[]{\n };\n \n constexpr NetPermissionFlags ALL_NET_PERMISSION_FLAGS[]{\n-    NetPermissionFlags::PF_NONE,\n-    NetPermissionFlags::PF_BLOOMFILTER,\n-    NetPermissionFlags::PF_RELAY,\n-    NetPermissionFlags::PF_FORCERELAY,\n-    NetPermissionFlags::PF_NOBAN,\n-    NetPermissionFlags::PF_MEMPOOL,\n-    NetPermissionFlags::PF_ADDR,\n-    NetPermissionFlags::PF_DOWNLOAD,\n-    NetPermissionFlags::PF_ISIMPLICIT,\n-    NetPermissionFlags::PF_ALL,\n+    NetPermissionFlags::None,\n+    NetPermissionFlags::BloomFilter,\n+    NetPermissionFlags::Relay,\n+    NetPermissionFlags::ForceRelay,\n+    NetPermissionFlags::NoBan,\n+    NetPermissionFlags::Mempool,\n+    NetPermissionFlags::Addr,\n+    NetPermissionFlags::Download,\n+    NetPermissionFlags::Implicit,\n+    NetPermissionFlags::All,\n };\n \n constexpr ConnectionType ALL_CONNECTION_TYPES[]{"
      }
    ]
  },
  {
    "sha": "7075f604e8d0b21b2255fa57e20cd365dc10a288",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDc1ZjYwNGU4ZDBiMjFiMjI1NWZhNTdlMjBjZDM2NWRjMTBhMjg4",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-04-02T14:32:09Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2021-05-12T14:13:32Z"
      },
      "message": "scripted-diff: update noban documentation in net_processing.cpp\n\n-BEGIN VERIFY SCRIPT-\ns() { git grep -l \"$1\" src/net_processing.cpp | xargs sed -i \"s/$1/$2/g\"; }\ns 'the noban permission'      'NetPermissionFlags::NoBan permission'\ns 'the NOBAN permission flag' 'NetPermissionFlags::NoBan permission'\ns 'noban permission'          'NetPermissionFlags::NoBan permission'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e1c8b36e98f2bff2464c8cc3c86b3b475c6fdd4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1c8b36e98f2bff2464c8cc3c86b3b475c6fdd4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7075f604e8d0b21b2255fa57e20cd365dc10a288",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAmCb4owACgkQT1chs9Dj\nkh0rxw/7BI9Co5h3GJC0tk4yJeOXY/SEbv5I5GeWL5XY5k0eI2bdk/snNsED4qJi\no3nKRl/wXUNlO/TTDVlEn7jrUQ4J19XaezT8Z7yQkSqJcqBfuHfF2+NNXKsblWJz\ngXjyvFEAdyDQ0fHc72wrVwrsPeXGAbjuaqKKp5T0wLrhY55thobYqotQnK66Mb/C\nLRgU0F/YCrRbQefryeOkC3ggOqd01OHY0NuuwsNiR68HUseWEq/A9ho4s6xsw583\n9c7GRVh2ftR4tMJ4//TUIUgHP4e0DTRw7WMbxeocHGMhQF5epznioWFRGVuOK1Vm\nmQm/QZAWQ0G/+Mq3bVG2vd0nH5EztBofdxF/5N2bIBr2px0uszM7UOru+tYqi7vq\nXbN38zALHJA4Ux0rccc2/H/J6l+b6QqZClVoM0Y0K/m5eY6Jny1gySVVrMGhMVSs\ncS1f/WLaajj1qFiHXp4z479rlunmX/z3YusEAnshAvLs5QuRXEjxCmBxBqIcrbWF\ne/SH2nZFGiR6SS69HIuTPnvModEQruRcSyDVh39US1NoicTaq/YrPK9IjQ+v/146\n2CMCRn/8zTeJr3QiJ/cIdB588gkR7Cz9mQug8wRjidwyld3GndzbCep6HDi0Zdcx\n9rjRvBMAe7lQqCuLRXqpHfq7BDskbU1mqfNfRJ953h+fnFhAMMI=\n=bUwr\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIOtwB833MNMvaSxsH1I+dukYfk7wsgQyZxAEP/FDY/voCP/wEJVqV/wGpa32\n1o8DO6f+mLII8QRgm+KO8AiPYP5Db8MG9wCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wELhWGi7HG4LD+GLtn1BW\n2E4I8QRgm+KO8Agc81uuqRl2xACD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDTGrXwLxw0oFdbBoZldYwwCPEE\nYJvijvAIaxlAKJvNcHMAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNh\ndGFsbGF4eS5jb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e1c8b36e98f2bff2464c8cc3c86b3b475c6fdd4e\nparent a95540cf435029f06e56749802d71315ca76b0dd\nauthor Jon Atack <jon@atack.com> 1617373929 +0200\ncommitter Jon Atack <jon@atack.com> 1620828812 +0200\n\nscripted-diff: update noban documentation in net_processing.cpp\n\n-BEGIN VERIFY SCRIPT-\ns() { git grep -l \"$1\" src/net_processing.cpp | xargs sed -i \"s/$1/$2/g\"; }\ns 'the noban permission'      'NetPermissionFlags::NoBan permission'\ns 'the NOBAN permission flag' 'NetPermissionFlags::NoBan permission'\ns 'noban permission'          'NetPermissionFlags::NoBan permission'\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7075f604e8d0b21b2255fa57e20cd365dc10a288",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7075f604e8d0b21b2255fa57e20cd365dc10a288",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7075f604e8d0b21b2255fa57e20cd365dc10a288/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a95540cf435029f06e56749802d71315ca76b0dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a95540cf435029f06e56749802d71315ca76b0dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a95540cf435029f06e56749802d71315ca76b0dd"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fdd36835c2a625b53d9adf8051bf019d4b11e10f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7075f604e8d0b21b2255fa57e20cd365dc10a288/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7075f604e8d0b21b2255fa57e20cd365dc10a288/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7075f604e8d0b21b2255fa57e20cd365dc10a288",
        "patch": "@@ -124,11 +124,11 @@ static constexpr auto AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24h;\n /** Average delay between peer address broadcasts */\n static constexpr auto AVG_ADDRESS_BROADCAST_INTERVAL = 30s;\n /** Average delay between trickled inventory transmissions for inbound peers.\n- *  Blocks and peers with noban permission bypass this. */\n+ *  Blocks and peers with NetPermissionFlags::NoBan permission bypass this. */\n static constexpr auto INBOUND_INVENTORY_BROADCAST_INTERVAL = 5s;\n /** Average delay between trickled inventory transmissions for outbound peers.\n  *  Use a smaller delay as there is less privacy concern for them.\n- *  Blocks and peers with noban permission bypass this. */\n+ *  Blocks and peers with NetPermissionFlags::NoBan permission bypass this. */\n static constexpr auto OUTBOUND_INVENTORY_BROADCAST_INTERVAL = 2s;\n /** Maximum rate of inventory items to send per second.\n  *  Limits the impact of low-fee transaction floods. */\n@@ -183,7 +183,7 @@ struct Peer {\n     Mutex m_misbehavior_mutex;\n     /** Accumulated misbehavior score for this peer */\n     int m_misbehavior_score GUARDED_BY(m_misbehavior_mutex){0};\n-    /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n+    /** Whether this peer should be disconnected and marked as discouraged (unless it has NetPermissionFlags::NoBan permission). */\n     bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n \n     /** Protects block inventory data members */\n@@ -3826,7 +3826,7 @@ bool PeerManagerImpl::MaybeDiscourageAndDisconnect(CNode& pnode, Peer& peer)\n     } // peer.m_misbehavior_mutex\n \n     if (pnode.HasPermission(NetPermissionFlags::NoBan)) {\n-        // We never disconnect or discourage peers for bad behavior if they have the NOBAN permission flag\n+        // We never disconnect or discourage peers for bad behavior if they have NetPermissionFlags::NoBan permission\n         LogPrintf(\"Warning: not punishing noban peer %d!\\n\", peer.m_id);\n         return false;\n     }\n@@ -4620,7 +4620,7 @@ bool PeerManagerImpl::SendMessages(CNode* pto)\n             // Detect whether this is a stalling initial-headers-sync peer\n             if (pindexBestHeader->GetBlockTime() <= GetAdjustedTime() - 24 * 60 * 60) {\n                 if (current_time > state.m_headers_sync_timeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n-                    // Disconnect a peer (without the noban permission) if it is our only sync peer,\n+                    // Disconnect a peer (without NetPermissionFlags::NoBan permission) if it is our only sync peer,\n                     // and we have others we could be using instead.\n                     // Note: If all our peers are inbound, then we won't\n                     // disconnect our sync peer for stalling; we have bigger"
      }
    ]
  }
]