[
  {
    "sha": "481b45c5ea7a5a9322fa008d7ec562a3744505bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODFiNDVjNWVhN2E1YTkzMjJmYTAwOGQ3ZWM1NjJhMzc0NDUwNWJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-08T21:03:53Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-26T05:52:27Z"
      },
      "message": "Require setBlockIndexCandidates be !BLOCK_FAILED_MASK\n\nWhen we find an invalid block, instead of adding BLOCK_FAILED_CHILD\nto its descendants in FindMostWorkChain, iterate\nsetBlockIndexCandidates to find candidate descendants and mark them\nas BLOCK_FAILED_CHILD immediately, removing them from\nsetBlockIndexCandidates as we go. This keeps BLOCK_FAILED_MASK\nentries out of setBlockIndexCandidates.\n\nThis also adds a few checks to CheckBlockIndex, including one which\nchecks that blocks with BLOCK_FAILED_CHILD are not, themselves,\nmarked invalid, but have an invalid parent. This should be fine for\nmost block indexes, however InvalidateBlock previously violated\nthis. Luckily most users shouldn't be running with -checkblockindex\n\nNote that this introduces a bug where a block who's header was\nreceived but data was not when a ancestor was found to be invalid\nwill not be marked BLOCK_FAILED_CHILD. Thus, when that block is\nreceived, it will be added to setBlockIndexCandidates, violating\nthe new invariant. This is fixed in the next commit.",
      "tree": {
        "sha": "ba645b214f1f67c75447df9198aa432926af2591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba645b214f1f67c75447df9198aa432926af2591"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/481b45c5ea7a5a9322fa008d7ec562a3744505bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvSq5sACgkQV/+b28ww\nEAl73Q/8DqodqZP7n3lKVziPTnxOTvaIviBtUM/X66AHOQsvUGkjdCKJHzA6AlQf\nEjPMsfwnyLMKvWfwHCmCglx8I8sfu26UwzZsA7sqhwQyeGcXG+fYR5kav5nzhBDD\n126dUVo0QyBjd4EBTs8GD0s5fpk8tHgS9tCpWabTmJ6kYWf4Fm2WPHBN5hEkMDGv\ncLrhYJDtbIdlcglJpEC2T+Y4VutXlXKXOKieQ4qxSR5SHuAV8Js1SdcksSIpwdXb\nYB9ljwPV6rXrCGLC5+ha/6RC6mA8bvNu3RSl6qyGMROQ11OY4qoObS5e2pvmqlGu\nYoqG7cvjPe3zf8YCfF4EnJb70AdWRhVEENPpAOYqVEwY5QI85rwG69OgjTp+9fdi\np7P7oA2RBk2s8FzOpq4pwl8di7pRTAqmRXAbvkXgvQqmYPsqWwm1eV/TSeSfMamN\nlzqOTIHDodYpq05z3ZWHVuo6g75iImlj0/e8Nxn9ReIsxvmAHFxhfdB2T3/OD35Y\n++nx9NJSTMF2hohgxq5iT6QAuizAcMz7yX8x6FXU57PZnlvN7gs1X5WSj2KQuouT\nkzBJDNlWZMCD/ffiJi536HCmlP/qv7pNCYoEjTlHzoxEurBKM8l3a8tuRHB6s+Rc\nEkjyRTivxGrMKLBUAGSTEYbOZvkYvZL5D6UNDX91FCDCurkmdxk=\n=1G0Y\n-----END PGP SIGNATURE-----",
        "payload": "tree ba645b214f1f67c75447df9198aa432926af2591\nparent 754a00d55f30f6112a1b68cb0bec5d59565096d1\nauthor Matt Corallo <git@bluematt.me> 1507496633 -0400\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1540533147 +0800\n\nRequire setBlockIndexCandidates be !BLOCK_FAILED_MASK\n\nWhen we find an invalid block, instead of adding BLOCK_FAILED_CHILD\nto its descendants in FindMostWorkChain, iterate\nsetBlockIndexCandidates to find candidate descendants and mark them\nas BLOCK_FAILED_CHILD immediately, removing them from\nsetBlockIndexCandidates as we go. This keeps BLOCK_FAILED_MASK\nentries out of setBlockIndexCandidates.\n\nThis also adds a few checks to CheckBlockIndex, including one which\nchecks that blocks with BLOCK_FAILED_CHILD are not, themselves,\nmarked invalid, but have an invalid parent. This should be fine for\nmost block indexes, however InvalidateBlock previously violated\nthis. Luckily most users shouldn't be running with -checkblockindex\n\nNote that this introduces a bug where a block who's header was\nreceived but data was not when a ancestor was found to be invalid\nwill not be marked BLOCK_FAILED_CHILD. Thus, when that block is\nreceived, it will be added to setBlockIndexCandidates, violating\nthe new invariant. This is fixed in the next commit.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/481b45c5ea7a5a9322fa008d7ec562a3744505bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/481b45c5ea7a5a9322fa008d7ec562a3744505bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/481b45c5ea7a5a9322fa008d7ec562a3744505bb/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "754a00d55f30f6112a1b68cb0bec5d59565096d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/754a00d55f30f6112a1b68cb0bec5d59565096d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/754a00d55f30f6112a1b68cb0bec5d59565096d1"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 72,
      "deletions": 29
    },
    "files": [
      {
        "sha": "d5930e26bebe5000f8048ddb28d64edad1ab72a3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 29,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/481b45c5ea7a5a9322fa008d7ec562a3744505bb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/481b45c5ea7a5a9322fa008d7ec562a3744505bb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=481b45c5ea7a5a9322fa008d7ec562a3744505bb",
        "patch": "@@ -60,6 +60,7 @@\n namespace {\n     struct CBlockIndexWorkComparator\n     {\n+        // Returns pa < pb in work-order\n         bool operator()(const CBlockIndex *pa, const CBlockIndex *pb) const {\n             // First sort by most total work, ...\n             if (pa->nChainWork > pb->nChainWork) return false;\n@@ -107,8 +108,7 @@ class CChainState {\n private:\n     /**\n      * The set of all CBlockIndex entries with BLOCK_VALID_TRANSACTIONS (for itself and all ancestors) and\n-     * as good as our current tip or better. Entries may be failed, though, and pruning nodes may be\n-     * missing the data for the block.\n+     * as good as our current tip or better. Pruning nodes may be missing the data for the block.\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n \n@@ -206,6 +206,7 @@ class CChainState {\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    void PruneInvalidBlockIndexCandidates(CBlockIndex* pindexInvalid);\n \n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n } g_chainstate;\n@@ -1281,6 +1282,48 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) E\n     CheckForkWarningConditions();\n }\n \n+// Helper for PruneInvalidBlockIndexCandidates\n+static void PruneInvalidIndexCandidatesInSet(CBlockIndex* pindexInvalid, std::set<CBlockIndex*, CBlockIndexWorkComparator>& set_candidates) {\n+    // Iterate set_candidates downwards, deleting parents of pindexInvalid,\n+    // until we get to headers which are lower total-work than pindexInvalid\n+    // (at which point they can't be parents of pindexInvalid).\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator>::reverse_iterator it = set_candidates.rbegin();\n+    while (it != set_candidates.rend() && (*it)->nChainWork > pindexInvalid->nChainWork) {\n+        if ((*it)->GetAncestor(pindexInvalid->nHeight) == pindexInvalid) {\n+            CBlockIndex* pindexInvalidTip = *it;\n+            if (!pindexBestInvalid || pindexInvalidTip->nChainWork > pindexBestInvalid->nChainWork)\n+                pindexBestInvalid = pindexInvalidTip;\n+\n+            while (pindexInvalidTip != pindexInvalid) {\n+                if (!(pindexInvalidTip->nStatus & BLOCK_FAILED_MASK)) {\n+                    pindexInvalidTip->nStatus |= BLOCK_FAILED_CHILD;\n+                    setDirtyBlockIndex.insert(pindexInvalidTip);\n+                }\n+                pindexInvalidTip = pindexInvalidTip->pprev;\n+            }\n+            std::set<CBlockIndex*, CBlockIndexWorkComparator>::iterator forward_it = it.base(); // Is one past it\n+            forward_it--; // Now points to it\n+            forward_it = set_candidates.erase(forward_it);\n+            it = std::set<CBlockIndex*, CBlockIndexWorkComparator>::reverse_iterator(forward_it);\n+            // forward_it == it.base() now points to one-past previous it, making it point to one-before previous it.\n+        } else {\n+            it++;\n+        }\n+    }\n+    set_candidates.erase(pindexInvalid);\n+}\n+\n+/**\n+ * Removes any descendants of pindexInvalid from candidate blocks,\n+ * marking them BLOCK_FAILED_CHILD as we go\n+ */\n+void CChainState::PruneInvalidBlockIndexCandidates(CBlockIndex* pindexInvalid) {\n+    AssertLockHeld(cs_main);\n+    assert(pindexInvalid->nStatus & BLOCK_FAILED_MASK);\n+\n+    PruneInvalidIndexCandidatesInSet(pindexInvalid, setBlockIndexCandidates);\n+}\n+\n void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n@@ -1302,7 +1345,7 @@ void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         m_failed_blocks.insert(pindex);\n         setDirtyBlockIndex.insert(pindex);\n-        setBlockIndexCandidates.erase(pindex);\n+        PruneInvalidBlockIndexCandidates(pindex);\n         InvalidChainFound(pindex);\n     }\n }\n@@ -2490,28 +2533,21 @@ CBlockIndex* CChainState::FindMostWorkChain() {\n         bool fInvalidAncestor = false;\n         while (pindexTest && !chainActive.Contains(pindexTest)) {\n             assert(pindexTest->nChainTx || pindexTest->nHeight == 0);\n+            assert(pindexTest->IsValid(BLOCK_VALID_TRANSACTIONS));\n \n             // Pruned nodes may have entries in setBlockIndexCandidates for\n             // which block files have been deleted.  Remove those as candidates\n             // for the most work chain if we come across them; we can't switch\n             // to a chain unless we have all the non-active-chain parent blocks.\n-            bool fFailedChain = pindexTest->nStatus & BLOCK_FAILED_MASK;\n-            bool fMissingData = !(pindexTest->nStatus & BLOCK_HAVE_DATA);\n-            if (fFailedChain || fMissingData) {\n+            if (!(pindexTest->nStatus & BLOCK_HAVE_DATA)) {\n                 // Candidate chain is not usable (either invalid or missing data)\n-                if (fFailedChain && (pindexBestInvalid == nullptr || pindexNew->nChainWork > pindexBestInvalid->nChainWork))\n-                    pindexBestInvalid = pindexNew;\n                 CBlockIndex *pindexFailed = pindexNew;\n                 // Remove the entire chain from the set.\n                 while (pindexTest != pindexFailed) {\n-                    if (fFailedChain) {\n-                        pindexFailed->nStatus |= BLOCK_FAILED_CHILD;\n-                    } else if (fMissingData) {\n-                        // If we're missing data, then add back to mapBlocksUnlinked,\n-                        // so that if the block arrives in the future we can try adding\n-                        // to setBlockIndexCandidates again.\n-                        mapBlocksUnlinked.insert(std::make_pair(pindexFailed->pprev, pindexFailed));\n-                    }\n+                    // If we're missing data, then add back to mapBlocksUnlinked,\n+                    // so that if the block arrives in the future we can try adding\n+                    // to setBlockIndexCandidates again.\n+                    mapBlocksUnlinked.insert(std::make_pair(pindexFailed->pprev, pindexFailed));\n                     setBlockIndexCandidates.erase(pindexFailed);\n                     pindexFailed = pindexFailed->pprev;\n                 }\n@@ -4550,20 +4586,27 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n             // Checks for not-invalid blocks.\n             assert((pindex->nStatus & BLOCK_FAILED_MASK) == 0); // The failed mask cannot be set for blocks without invalid parents.\n         }\n-        if (!CBlockIndexWorkComparator()(pindex, chainActive.Tip()) && pindexFirstNeverProcessed == nullptr) {\n-            if (pindexFirstInvalid == nullptr) {\n-                // If this block sorts at least as good as the current tip and\n-                // is valid and we have all data for its parents, it must be in\n-                // setBlockIndexCandidates.  chainActive.Tip() must also be there\n-                // even if some data has been pruned.\n-                if (pindexFirstMissing == nullptr || pindex == chainActive.Tip()) {\n-                    assert(setBlockIndexCandidates.count(pindex));\n-                }\n-                // If some parent is missing, then it could be that this block was in\n-                // setBlockIndexCandidates but had to be removed because of the missing data.\n-                // In this case it must be in mapBlocksUnlinked -- see test below.\n+        if (pindex->nStatus & BLOCK_FAILED_CHILD) {\n+            // Blocks which failed with \"CHILD\" must have an invalid parent\n+            assert(pindexFirstInvalid);\n+            assert(pindexFirstInvalid != pindex);\n+            assert(!(pindex->nStatus & BLOCK_FAILED_VALID));\n+        }\n+        if (pindex->nStatus & BLOCK_FAILED_VALID) {\n+            assert(!(pindex->nStatus & BLOCK_FAILED_CHILD));\n+        }\n+        if (!CBlockIndexWorkComparator()(pindex, chainActive.Tip()) && pindexFirstNeverProcessed == nullptr && pindexFirstInvalid == nullptr) {\n+            // If this block sorts at least as good as the current tip and\n+            // is valid and we have all data for its parents, it must be in\n+            // setBlockIndexCandidates.  chainActive.Tip() must also be there\n+            // even if some data has been pruned.\n+            if (pindexFirstMissing == nullptr || pindex == chainActive.Tip()) {\n+                assert(setBlockIndexCandidates.count(pindex));\n             }\n-        } else { // If this block sorts worse than the current tip or some ancestor's block has never been seen, it cannot be in setBlockIndexCandidates.\n+            // If some parent is missing, then it could be that this block was in\n+            // setBlockIndexCandidates but had to be removed because of the missing data.\n+            // In this case it must be in mapBlocksUnlinked -- see test below.\n+        } else { // If this block sorts worse than the current tip or some ancestor's block has never been seen or is invalid, it cannot be in setBlockIndexCandidates.\n             assert(setBlockIndexCandidates.count(pindex) == 0);\n         }\n         // Check whether this block is in mapBlocksUnlinked."
      }
    ]
  },
  {
    "sha": "e0bb934113617fd799af81abced78039e88c790e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGJiOTM0MTEzNjE3ZmQ3OTlhZjgxYWJjZWQ3ODAzOWU4OGM3OTBl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-08T23:43:23Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-26T05:52:27Z"
      },
      "message": "Add a set to track potential future chain tips based only on SPV.\n\nThis mirrors setBlockIndexCandidates but for BLOCK_VALID_TREE\ninstead of BLOCK_VALID_TRANSACTIONS && nTx. There are a few\ndifferences between the two to keep the new set practical, see\ncode comments for more.",
      "tree": {
        "sha": "8b9c251fde61fa64e7d9589592fe7b976c93db6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b9c251fde61fa64e7d9589592fe7b976c93db6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0bb934113617fd799af81abced78039e88c790e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvSq5sACgkQV/+b28ww\nEAnZtg/+LX/bPnxfX/0qe3W23yjLJryfHpYQv4ch2e83f7miyFWnGB81Dk0xz5bO\ntm5HzTXzvtARGutC8/EuKK3zyWCC5dDr4UPTDUtIQKZBqB8mmd4FzkxuSHc87fXI\npnoAM7Aux2jzQWBlvioJbChzc6hFl8FEZIsG9wZJ3Yw6nNXajzWw3QwckkGaT8fX\nfpF2Q972Wu6MrY+e7ruiUEPfDygL1pWVLmD2cVvMC/8cEe/SrpINxCUnYGb1bq+Q\n2kgWAMpKlJwAiepNG2PmgskTxdzv8J5b67dVPClnqC3NWRYseLIksSqBSv/NfoTj\nJXtlB17lpgflAzFMxsCX1pm4dtLF5xUIIA/tnYPTfCtnM58TtPKBbVAen3cbqKyp\nTYeO2Dwivuz8as32/1WS6iX4eU1yBJMSqn6ELYsmsI5Khk23nhCsLD5UlNJgICsp\nFOlQws+0geVC4tKJz0T2igO5daxR1bcFUTHmZPuO5GGiEjRF8foMmz/3+Qt5NTNw\nWiFpoo/nBxJOgcv/zSQ9Yde/8o0FGdgifLoQsAVAqPOMYQfpEM5jf2AkrLywLz1v\nPfheGOTy1us/ctPUXVNYI7McK0viXlUXE9cTW60EyqfleLDk+jKSZ/dx28CfJqPB\n6GaFOzCmQrUmQDmrGbXwvIaup/I01IeH2nDPMc2LqisiQjz3tKo=\n=HXKd\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b9c251fde61fa64e7d9589592fe7b976c93db6e\nparent 481b45c5ea7a5a9322fa008d7ec562a3744505bb\nauthor Matt Corallo <git@bluematt.me> 1507506203 -0400\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1540533147 +0800\n\nAdd a set to track potential future chain tips based only on SPV.\n\nThis mirrors setBlockIndexCandidates but for BLOCK_VALID_TREE\ninstead of BLOCK_VALID_TRANSACTIONS && nTx. There are a few\ndifferences between the two to keep the new set practical, see\ncode comments for more.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bb934113617fd799af81abced78039e88c790e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0bb934113617fd799af81abced78039e88c790e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bb934113617fd799af81abced78039e88c790e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "481b45c5ea7a5a9322fa008d7ec562a3744505bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/481b45c5ea7a5a9322fa008d7ec562a3744505bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/481b45c5ea7a5a9322fa008d7ec562a3744505bb"
      }
    ],
    "stats": {
      "total": 210,
      "additions": 192,
      "deletions": 18
    },
    "files": [
      {
        "sha": "ec984832f767112f16505aff86afd5e21b10885d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 192,
        "deletions": 18,
        "changes": 210,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0bb934113617fd799af81abced78039e88c790e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0bb934113617fd799af81abced78039e88c790e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e0bb934113617fd799af81abced78039e88c790e",
        "patch": "@@ -111,6 +111,31 @@ class CChainState {\n      * as good as our current tip or better. Pruning nodes may be missing the data for the block.\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexCandidates;\n+    /**\n+     * The set of all leaf CBlockIndex entries with BLOCK_VALID_TREE (for itself and all ancestors) and\n+     * as good as our current tip or better. Entries here are potential future candidates for insertion\n+     * into setBlockIndexCandidates, once we get all the required block data. Thus, entries here\n+     * represent chains on which we should be actively downloading block data.\n+     *\n+     * Note that we define \"as good as our current tip or better\" slightly differently here than in\n+     * setBlockIndexCandidates - we include things which will have a higher nSequence (but have the\n+     * same chain work) here, but do not include such entries in setBlockIndexCandidates. This is\n+     * because we prefer to also download towards chains which have the same total work as our current\n+     * chain (as an optimization since a reorg is very possible in such cases).\n+     *\n+     * Note that, unlike setBlockIndexCandidates, we only store \"leaf\" entries here, as we are not as\n+     * aggressively prune-able (setBlockIndexCandidates are things which we can, and usually do, try to\n+     * connect immediately, and thus entries dont stick around for long). Thus, it may be the case that\n+     * chainActive.Tip() is NOT in setBlockIndexHeaderCandidates.\n+     *\n+     * Additionally, unlike setBlockIndexCandidates, we are happy to store entries which are not\n+     * connectable due to pruning here.\n+     *\n+     * Note that we have to be pretty careful with nSequenceId here - CBlockIndexWorkComparator uses\n+     * nSequenceId to sort, but entries may have the same work and sequence! Thus, we don't use the set's\n+     * sorter but instead compare using nChainWork while iterating!\n+     */\n+    std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexHeaderCandidates;\n \n     /**\n      * Every received block is assigned a unique and increasing identifier, so we\n@@ -207,6 +232,7 @@ class CChainState {\n     void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     void PruneInvalidBlockIndexCandidates(CBlockIndex* pindexInvalid);\n+    void MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants);\n \n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n } g_chainstate;\n@@ -1282,6 +1308,75 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) E\n     CheckForkWarningConditions();\n }\n \n+/**\n+ * Called when a header (re-)reached BLOCK_VALID_TREE.\n+ *\n+ * setBlockIndexHeaderCandidates is a bit more complicated than\n+ * setBlockIndexCandidates as setBlockIndexCandidates can be rather lazy\n+ * as everything in it is about to be connected. In our case, we may have many\n+ * headers above the tip leading down different chains, for which we really\n+ * only want to keep the tip of each chain.\n+ *\n+ * Works even if chainActive is empty!\n+ *\n+ * If chain_ordered_inertion, we assume that if pindex->pprev was previously a\n+ * header candidate, it will be when we're called. ie we assume that there are\n+ * no header candidates which are parents of us except for possibly our direct\n+ * parent.\n+ *\n+ * no_descendants allows us to make a similar, but inverted, assumption -\n+ * assuming no descendant blocks may be header candidates.\n+ */\n+void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ordered_insertion, bool no_descendants) {\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return; // We only want things that have a valid header tree\n+\n+    bool lower_work = chainActive.Tip() != nullptr && chainActive.Tip()->nChainWork > pindex->nChainWork;\n+    if (lower_work) return; // We don't want things with less work than our current tip\n+\n+    bool parent_present = false;\n+    if (pindex->pprev && setBlockIndexHeaderCandidates.count(pindex->pprev)) {\n+        // If the parent is a previous candidate, then no parents of it could\n+        // be candidates, either. This is the only thing we need to check by\n+        // definition of chain_ordered_insertion, however even in the case of\n+        // !chain_ordered_insertion, if this is true, no need to do a full\n+        // parent scan (as no further-up parent can be a candidate, either).\n+        setBlockIndexHeaderCandidates.erase(pindex->pprev);\n+        parent_present = true;\n+    } else if (!chain_ordered_insertion) {\n+        // We are being called in a for(p : mapBlockIndex) loop, so can make no\n+        // assumptions about existing entries. Scan all other entries to check\n+        // if we're a descendant of some other candidate.\n+        for (auto it = setBlockIndexHeaderCandidates.begin(); it != setBlockIndexHeaderCandidates.end() && (*it)->nChainWork < pindex->nChainWork; it++) {\n+            if (pindex->GetAncestor((*it)->nHeight) == *it) {\n+                // it should be removed - we only keep the tip of potential\n+                // chains, not anything in them. At this point we should be\n+                // consistent by adding pindex, there should be more more work\n+                // to do here.\n+                setBlockIndexHeaderCandidates.erase(it);\n+                break;\n+                parent_present = true;\n+            }\n+        }\n+    }\n+\n+    if (!parent_present && !no_descendants) {\n+        // Scan higher-work entries to check that we're not a parent of some\n+        // other candidate(s). If a parent of ours was already present then we\n+        // can be certain that no such child is also a candidate, so we can\n+        // skip the whole scan.\n+        for (auto it = setBlockIndexHeaderCandidates.rbegin(); it != setBlockIndexHeaderCandidates.rend() && (*it)->nChainWork > pindex->nChainWork; it++) {\n+            if ((*it)->GetAncestor(pindex->nHeight) == pindex) {\n+                // pindex is useless - even if there are other tips based on it\n+                // which we want in setBlockIndexHeaderCandidates, we're not\n+                // gonna find them here.\n+                return;\n+            }\n+        }\n+    }\n+\n+    setBlockIndexHeaderCandidates.insert(pindex);\n+}\n+\n // Helper for PruneInvalidBlockIndexCandidates\n static void PruneInvalidIndexCandidatesInSet(CBlockIndex* pindexInvalid, std::set<CBlockIndex*, CBlockIndexWorkComparator>& set_candidates) {\n     // Iterate set_candidates downwards, deleting parents of pindexInvalid,\n@@ -1322,6 +1417,7 @@ void CChainState::PruneInvalidBlockIndexCandidates(CBlockIndex* pindexInvalid) {\n     assert(pindexInvalid->nStatus & BLOCK_FAILED_MASK);\n \n     PruneInvalidIndexCandidatesInSet(pindexInvalid, setBlockIndexCandidates);\n+    PruneInvalidIndexCandidatesInSet(pindexInvalid, setBlockIndexHeaderCandidates);\n }\n \n void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n@@ -1346,6 +1442,16 @@ void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState\n         m_failed_blocks.insert(pindex);\n         setDirtyBlockIndex.insert(pindex);\n         PruneInvalidBlockIndexCandidates(pindex);\n+        if (pindex->pprev) {\n+            // In the simple case where we tried to advance forward one block,\n+            // but failed, we may now have an empty setBlockIndexHeaderCandidates,\n+            // so we need to re-add the previous block here. The same is not true\n+            // for setBlockIndexCandidates, as it does not have the same leaf-only\n+            // precondition which setBlockIndexHeaderCandidates has.\n+            // Note that its possible there are later descendants that are candidates\n+            // so we cannot set no_descendants here.\n+            MaybeAddNewHeaderCandidate(pindex->pprev, true, false);\n+        }\n         InvalidChainFound(pindex);\n     }\n }\n@@ -2572,6 +2678,16 @@ void CChainState::PruneBlockIndexCandidates() {\n     }\n     // Either the current tip or a successor of it we're working towards is left in setBlockIndexCandidates.\n     assert(!setBlockIndexCandidates.empty());\n+    // Now do the same for setBlockIndexHeaderCandidates (noting that we have to compare manually due to nSequenceId oddities)\n+    it = setBlockIndexHeaderCandidates.begin();\n+    while (it != setBlockIndexHeaderCandidates.end() && (*it)->nChainWork <= chainActive.Tip()->nChainWork) {\n+        if (chainActive.Tip()->nChainWork > (*it)->nChainWork) {\n+            setBlockIndexHeaderCandidates.erase(it++);\n+        } else {\n+            it++;\n+        }\n+    }\n+    assert(!setBlockIndexHeaderCandidates.empty());\n }\n \n /**\n@@ -2808,13 +2924,20 @@ bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& par\n             nBlockReverseSequenceId = -1;\n         }\n         nLastPreciousChainwork = chainActive.Tip()->nChainWork;\n+        // Make sure to remove from sets which are indexed by nSequenceId first...\n         setBlockIndexCandidates.erase(pindex);\n+        bool pindex_is_header_candidate = setBlockIndexHeaderCandidates.erase(pindex);\n         pindex->nSequenceId = nBlockReverseSequenceId;\n         if (nBlockReverseSequenceId > std::numeric_limits<int32_t>::min()) {\n             // We can't keep reducing the counter if somebody really wants to\n             // call preciousblock 2**31-1 times on the same set of tips...\n             nBlockReverseSequenceId--;\n         }\n+        if (pindex_is_header_candidate) {\n+            // Note that because we only changed the sequence, pindex should be in\n+            // setBlockIndexHeaderCandidates iff it was previously in the same.\n+            setBlockIndexHeaderCandidates.insert(pindex);\n+        }\n         if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && pindex->nChainTx) {\n             setBlockIndexCandidates.insert(pindex);\n             PruneBlockIndexCandidates();\n@@ -2838,7 +2961,6 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n \n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n     DisconnectedBlockTransactions disconnectpool;\n     while (chainActive.Contains(pindex)) {\n@@ -2853,19 +2975,13 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         }\n     }\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n-        invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n-        setDirtyBlockIndex.insert(invalid_walk_tip);\n-        setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n-    }\n-\n     // Mark the block itself as invalid.\n     pindex->nStatus |= BLOCK_FAILED_VALID;\n     setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n+\n+    // chainActive.Tip() is always in our candidate sets, so any blocks we just\n+    // disconnected will be marked BLOCK_FAILED_CHILD by PruneInvalidBlockIndexCandidates.\n+    PruneInvalidBlockIndexCandidates(pindex);\n     m_failed_blocks.insert(pindex);\n \n     // DisconnectTip will add transactions to disconnectpool; try to add these\n@@ -2876,8 +2992,26 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     // add it again.\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n-            setBlockIndexCandidates.insert(it->second);\n+        if (it->second->nChainWork >= chainActive.Tip()->nChainWork) {\n+            if (it->second->GetAncestor(pindex->nHeight) == pindex) {\n+                // It is possible that we have a CBlockIndex which is a\n+                // descendant of the one we just marked invalid, but which we\n+                // did not mark BLOCK_FAILED_CHILD in the\n+                // PruneInvalidBlockIndexCandidates pass, as it was below our\n+                // previous tip. We should mark it (and its parents) invalid.\n+                CBlockIndex* invalid_walk = it->second;\n+                while (invalid_walk != pindex && !(invalid_walk->nStatus & BLOCK_FAILED_MASK)) {\n+                    invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                    setDirtyBlockIndex.insert(invalid_walk);\n+                    invalid_walk = invalid_walk->pprev;\n+                }\n+            } else if (it->second->IsValid(BLOCK_VALID_TREE)) {\n+                MaybeAddNewHeaderCandidate(it->second, false, false);\n+                if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx &&\n+                        !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) { // check sequence now because we didn't earlier\n+                    setBlockIndexCandidates.insert(it->second);\n+                }\n+            }\n         }\n         it++;\n     }\n@@ -2906,8 +3040,12 @@ void CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n         if (!it->second->IsValid() && it->second->GetAncestor(nHeight) == pindex) {\n             it->second->nStatus &= ~BLOCK_FAILED_MASK;\n             setDirtyBlockIndex.insert(it->second);\n-            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) {\n-                setBlockIndexCandidates.insert(it->second);\n+            if (it->second->IsValid(BLOCK_VALID_TREE) && it->second->nChainWork >= chainActive.Tip()->nChainWork) {\n+                MaybeAddNewHeaderCandidate(it->second, false, false);\n+                if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx &&\n+                        setBlockIndexCandidates.value_comp()(chainActive.Tip(), it->second)) { // Check nSequence here\n+                    setBlockIndexCandidates.insert(it->second);\n+                }\n             }\n             if (it->second == pindexBestInvalid) {\n                 // Reset invalid block marker if it was pointing to one of those.\n@@ -2963,6 +3101,7 @@ CBlockIndex* CChainState::AddToBlockIndex(const CBlockHeader& block)\n     pindexNew->RaiseValidity(BLOCK_VALID_TREE);\n     if (pindexBestHeader == nullptr || pindexBestHeader->nChainWork < pindexNew->nChainWork)\n         pindexBestHeader = pindexNew;\n+    MaybeAddNewHeaderCandidate(pindexNew, true, true);\n \n     setDirtyBlockIndex.insert(pindexNew);\n \n@@ -2994,10 +3133,18 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n             CBlockIndex *pindex = queue.front();\n             queue.pop_front();\n             pindex->nChainTx = (pindex->pprev ? pindex->pprev->nChainTx : 0) + pindex->nTx;\n+            // Make sure to remove from sets which are indexed by nSequenceId first...\n+            bool was_header_candidate = setBlockIndexHeaderCandidates.erase(pindex);\n             {\n                 LOCK(cs_nBlockSequenceId);\n                 pindex->nSequenceId = nBlockSequenceId++;\n             }\n+            if (was_header_candidate) {\n+                // It is safe to use chain_ordered_insertion and no_descendants here\n+                // as, if the block was previously a header candidate, we know there\n+                // are no parents/descendants which are also header candidates.\n+                MaybeAddNewHeaderCandidate(pindex, true, true);\n+            }\n             if (chainActive.Tip() == nullptr || !setBlockIndexCandidates.value_comp()(pindex, chainActive.Tip())) {\n                 setBlockIndexCandidates.insert(pindex);\n             }\n@@ -3528,9 +3675,8 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n \n     if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n         !ContextualCheckBlock(block, state, chainparams.GetConsensus(), pindex->pprev)) {\n-        if (state.IsInvalid() && !state.CorruptionPossible()) {\n-            pindex->nStatus |= BLOCK_FAILED_VALID;\n-            setDirtyBlockIndex.insert(pindex);\n+        if (state.IsInvalid()) {\n+            InvalidBlockFound(pindex, state);\n         }\n         return error(\"%s: %s\", __func__, FormatStateMessage(state));\n     }\n@@ -3889,6 +4035,8 @@ bool CChainState::LoadBlockIndex(const Consensus::Params& consensus_params, CBlo\n             pindex->nStatus |= BLOCK_FAILED_CHILD;\n             setDirtyBlockIndex.insert(pindex);\n         }\n+        if (pindex->IsValid(BLOCK_VALID_TREE))\n+            MaybeAddNewHeaderCandidate(pindex, true, true);\n         if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->nChainTx || pindex->pprev == nullptr))\n             setBlockIndexCandidates.insert(pindex);\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n@@ -4261,6 +4409,11 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n         } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->nChainTx) {\n             setBlockIndexCandidates.insert(pindexIter);\n         }\n+        // In case we disconnected blocks which resulted in new header\n+        // candidates, we need to re-add them here.\n+        if (pindexIter->IsValid(BLOCK_VALID_TREE)) {\n+            MaybeAddNewHeaderCandidate(pindexIter, false, false);\n+        }\n     }\n \n     if (chainActive.Tip() != nullptr) {\n@@ -4297,6 +4450,7 @@ void CChainState::UnloadBlockIndex() {\n     nBlockSequenceId = 1;\n     m_failed_blocks.clear();\n     setBlockIndexCandidates.clear();\n+    setBlockIndexHeaderCandidates.clear();\n }\n \n // May NOT be used after any connections are up as much\n@@ -4543,6 +4697,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n     CBlockIndex* pindexFirstNotTransactionsValid = nullptr; // Oldest ancestor of pindex which does not have BLOCK_VALID_TRANSACTIONS (regardless of being valid or not).\n     CBlockIndex* pindexFirstNotChainValid = nullptr; // Oldest ancestor of pindex which does not have BLOCK_VALID_CHAIN (regardless of being valid or not).\n     CBlockIndex* pindexFirstNotScriptsValid = nullptr; // Oldest ancestor of pindex which does not have BLOCK_VALID_SCRIPTS (regardless of being valid or not).\n+    CBlockIndex* pindexFirstInBlockIndexHeaderCandidates = nullptr; // Oldest ancestor of pindex which is in setBlockIndexHeaderCandidates (should always be only pindex)\n     while (pindex != nullptr) {\n         nNodes++;\n         if (pindexFirstInvalid == nullptr && pindex->nStatus & BLOCK_FAILED_VALID) pindexFirstInvalid = pindex;\n@@ -4609,6 +4764,23 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n         } else { // If this block sorts worse than the current tip or some ancestor's block has never been seen or is invalid, it cannot be in setBlockIndexCandidates.\n             assert(setBlockIndexCandidates.count(pindex) == 0);\n         }\n+        bool must_be_header_candidate_if_leaf = false;\n+        if (pindex->nChainWork < chainActive.Tip()->nChainWork) {\n+            // Irrespective of pruned-ness, if this block sorts worse than the current tip, it cannot be in setBlockIndexHeaderCandidates\n+            assert(setBlockIndexHeaderCandidates.count(pindex) == 0);\n+        } else if (pindexFirstInvalid == nullptr) {\n+            // If pindex is a leaf node and sorts at the same or greater height\n+            // than chainActive.Tip(), it must be in setBlockIndexHeaderCandidates.\n+            must_be_header_candidate_if_leaf = true;\n+        }\n+        if (setBlockIndexHeaderCandidates.count(pindex)) {\n+            // setBlockIndexHeaderCandidates may not contain anything for which a parent is invalid\n+            assert(pindexFirstInvalid == nullptr);\n+            assert(pindex->IsValid(BLOCK_VALID_TREE));\n+            // We should only be in setBlockIndexHeaderCandidates if we are a leaf node\n+            assert(pindexFirstInBlockIndexHeaderCandidates == nullptr);\n+            pindexFirstInBlockIndexHeaderCandidates = pindex;\n+        }\n         // Check whether this block is in mapBlocksUnlinked.\n         std::pair<std::multimap<CBlockIndex*,CBlockIndex*>::iterator,std::multimap<CBlockIndex*,CBlockIndex*>::iterator> rangeUnlinked = mapBlocksUnlinked.equal_range(pindex->pprev);\n         bool foundInUnlinked = false;\n@@ -4655,6 +4827,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n             continue;\n         }\n         // This is a leaf node.\n+        if (must_be_header_candidate_if_leaf) assert(setBlockIndexHeaderCandidates.count(pindex));\n         // Move upwards until we reach a node of which we have not yet visited the last child.\n         while (pindex) {\n             // We are going to either move to a parent or a sibling of pindex.\n@@ -4666,6 +4839,7 @@ void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)\n             if (pindex == pindexFirstNotTransactionsValid) pindexFirstNotTransactionsValid = nullptr;\n             if (pindex == pindexFirstNotChainValid) pindexFirstNotChainValid = nullptr;\n             if (pindex == pindexFirstNotScriptsValid) pindexFirstNotScriptsValid = nullptr;\n+            if (pindex == pindexFirstInBlockIndexHeaderCandidates) pindexFirstInBlockIndexHeaderCandidates = nullptr;\n             // Find our parent.\n             CBlockIndex* pindexPar = pindex->pprev;\n             // Find which child we just visited."
      }
    ]
  },
  {
    "sha": "411604033734e33e0383a831a72ae4db0e1a4f2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTE2MDQwMzM3MzRlMzNlMDM4M2E4MzFhNzJhZTRkYjBlMWE0ZjJm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-09T16:34:42Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-26T05:59:36Z"
      },
      "message": "Stop using pindexBestHeader outside of validation.cpp\n\npindexBestHeader never considers the invalidity of a chain, only\nthe validity of the header chain. Using it for sync estimation and\nGETHEADERS etc requests in net makes no sense. Instead, use the\nnew setBlockIndexHeaderCandidates to find the best candidate tip.",
      "tree": {
        "sha": "7140d57c048daed5765e4ec19050b4acc4b1e88d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7140d57c048daed5765e4ec19050b4acc4b1e88d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/411604033734e33e0383a831a72ae4db0e1a4f2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvSrUgACgkQV/+b28ww\nEAmmDxAAvB7MP8a2FfSHgVmB2rgqm6j890oaAZKauMCCuKSO7WlSExz7h2xXbUk0\ncb6Vfn0jnP7VtG2tg49EjzlS6rZ29kx/bTqdrO67JHmUGysdOiRf4udXp8T5kyl+\nmo++tvMXZAYhVkKw/tdUVcmrmw0EnMKTiF+1FvMmZW9a6nW4JKKkEL48V0R7gzgp\nNfoewMvqVcz1SXoAMIGWxCd/fVSYR86K5nA+aImkmIk7pPIMlpbHmL5k1ZsSHVmA\nAmwZlNVsQJoY40ba0+C+ShNmhutcaW3jhPjjmSKfww8oDzpT6rPu565LG60Gxu/k\n6nxQ5Gs4u/4N2NhbbKqxhzWzj6S+eBj9MbJHmM32LKP4bvRTHaQAyGo6Pp4m9kK+\nATg5bjGasJyx9gpiItno2vriMgSVWg3AqF5zcZIhh1gNGggXT4P0ph+RluM+CCzF\npdAHpyV7bL9V4m4CBS5v1qYDl8esJ7XByfk+dyBdzJE2PT5wq/mQjMmlcQ6+d3n8\nQcE3rIzD048ZPlIudRP27xV9JmInr1097oDVZOMjX1XPFp7LSk8cMomnydsqpKuO\nkaDjHtRAE7twb4tKzwNTtqGlEb8mzTh0dAcEmF9DmbgBIcUTJVjV2UGkFPW9bdSF\nvUEd6EeV8DGOaGeH/v+X5D+neVY7io1uNZ+EUYMl87Rqn3E09+U=\n=R3av\n-----END PGP SIGNATURE-----",
        "payload": "tree 7140d57c048daed5765e4ec19050b4acc4b1e88d\nparent e0bb934113617fd799af81abced78039e88c790e\nauthor Matt Corallo <git@bluematt.me> 1507566882 -0400\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1540533576 +0800\n\nStop using pindexBestHeader outside of validation.cpp\n\npindexBestHeader never considers the invalidity of a chain, only\nthe validity of the header chain. Using it for sync estimation and\nGETHEADERS etc requests in net makes no sense. Instead, use the\nnew setBlockIndexHeaderCandidates to find the best candidate tip.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/411604033734e33e0383a831a72ae4db0e1a4f2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/411604033734e33e0383a831a72ae4db0e1a4f2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/411604033734e33e0383a831a72ae4db0e1a4f2f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0bb934113617fd799af81abced78039e88c790e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bb934113617fd799af81abced78039e88c790e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0bb934113617fd799af81abced78039e88c790e"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 49,
      "deletions": 29
    },
    "files": [
      {
        "sha": "2962febad1f48578700017414c36e32e4cf69bb0",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411604033734e33e0383a831a72ae4db0e1a4f2f/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411604033734e33e0383a831a72ae4db0e1a4f2f/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=411604033734e33e0383a831a72ae4db0e1a4f2f",
        "patch": "@@ -153,10 +153,10 @@ class NodeImpl : public Node\n     size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n     {\n-        LOCK(::cs_main);\n-        if (::pindexBestHeader) {\n-            height = ::pindexBestHeader->nHeight;\n-            block_time = ::pindexBestHeader->GetBlockTime();\n+        const CBlockIndex* best_header = ::GetBestHeader();\n+        if (best_header) {\n+            height = best_header->nHeight;\n+            block_time = best_header->GetBlockTime();\n             return true;\n         }\n         return false;"
      },
      {
        "sha": "54fcb7580aba608cd27b6cd09b9eef29cead27a0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 16,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411604033734e33e0383a831a72ae4db0e1a4f2f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411604033734e33e0383a831a72ae4db0e1a4f2f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=411604033734e33e0383a831a72ae4db0e1a4f2f",
        "patch": "@@ -835,9 +835,10 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n {\n     AssertLockHeld(cs_main);\n     if (chainActive.Contains(pindex)) return true;\n-    return pindex->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != nullptr) &&\n-        (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n-        (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n+    const CBlockIndex* best_header = GetBestHeader();\n+    return pindex->IsValid(BLOCK_VALID_SCRIPTS) &&\n+        (best_header->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n+        (GetBlockProofEquivalentTime(*best_header, *pindex, *best_header, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler, bool enable_bip61)\n@@ -1153,7 +1154,7 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n     // never disconnect whitelisted nodes\n-    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+    if (send && connman->OutboundTargetReached(true) && ( ((GetBestHeader()->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n     {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n@@ -1374,11 +1375,12 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         //   nUnconnectingHeaders gets reset back to 0.\n         if (!LookupBlockIndex(headers[0].hashPrevBlock) && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+            const CBlockIndex* best_header = GetBestHeader();\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(best_header), uint256()));\n             LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n-                    pindexBestHeader->nHeight,\n+                    best_header->nHeight,\n                     pfrom->GetId(), nodestate->nUnconnectingHeaders);\n             // Set hashLastUnknownBlock for this peer, so that if we\n             // eventually get the headers - even from a different peer -\n@@ -1965,8 +1967,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     // fell back to inv we probably have a reorg which we should get the headers for first,\n                     // we now only provide a getheaders response here. When we receive the headers, we will\n                     // then ask for the blocks we need.\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash));\n-                    LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->GetId());\n+                    const CBlockIndex* best_header = GetBestHeader();\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(best_header), inv.hash));\n+                    LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", best_header->nHeight, inv.hash.ToString(), pfrom->GetId());\n                 }\n             }\n             else\n@@ -2387,7 +2390,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!LookupBlockIndex(cmpctblock.header.hashPrevBlock)) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n             if (!IsInitialBlockDownload())\n-                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(GetBestHeader()), uint256()));\n             return true;\n         }\n \n@@ -3316,22 +3319,22 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         }\n \n         // Start block sync\n-        if (pindexBestHeader == nullptr)\n-            pindexBestHeader = chainActive.Tip();\n+        const CBlockIndex* best_header = GetBestHeader();\n+        assert(best_header != nullptr);\n         bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->fOneShot); // Download if this is a nice peer, or we have no nice peers and this one might do.\n         if (!state.fSyncStarted && !pto->fClient && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n-            if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n+            if ((nSyncStarted == 0 && fFetch) || best_header->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n-                state.nHeadersSyncTimeout = GetTimeMicros() + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - pindexBestHeader->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n+                state.nHeadersSyncTimeout = GetTimeMicros() + HEADERS_DOWNLOAD_TIMEOUT_BASE + HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER * (GetAdjustedTime() - best_header->GetBlockTime())/(consensusParams.nPowTargetSpacing);\n                 nSyncStarted++;\n-                const CBlockIndex *pindexStart = pindexBestHeader;\n+                const CBlockIndex *pindexStart = best_header;\n                 /* If possible, start at the block preceding the currently\n                    best known header.  This ensures that we always get a\n                    non-empty list of headers back as long as the peer\n                    is up-to-date.  With a non-empty response, we can initialise\n                    the peer's known best block.  This wouldn't be possible\n-                   if we requested starting at pindexBestHeader and\n+                   if we requested starting at best_header and\n                    got back an empty response.  */\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n@@ -3652,7 +3655,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n         // Check for headers sync timeouts\n         if (state.fSyncStarted && state.nHeadersSyncTimeout < std::numeric_limits<int64_t>::max()) {\n             // Detect whether this is a stalling initial-headers-sync peer\n-            if (pindexBestHeader->GetBlockTime() <= GetAdjustedTime() - 24*60*60) {\n+            if (best_header->GetBlockTime() <= GetAdjustedTime() - 24*60*60) {\n                 if (nNow > state.nHeadersSyncTimeout && nSyncStarted == 1 && (nPreferredDownload - state.fPreferredDownload >= 1)) {\n                     // Disconnect a (non-whitelisted) peer if it is our only sync peer,\n                     // and we have others we could be using instead."
      },
      {
        "sha": "c392b01e5d21032241f8862b5048c81e0ab93c84",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411604033734e33e0383a831a72ae4db0e1a4f2f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411604033734e33e0383a831a72ae4db0e1a4f2f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=411604033734e33e0383a831a72ae4db0e1a4f2f",
        "patch": "@@ -1248,7 +1248,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"chain\",                 Params().NetworkIDString());\n     obj.pushKV(\"blocks\",                (int)chainActive.Height());\n-    obj.pushKV(\"headers\",               pindexBestHeader ? pindexBestHeader->nHeight : -1);\n+    obj.pushKV(\"headers\",               GetBestHeader()->nHeight);\n     obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n     obj.pushKV(\"difficulty\",            (double)GetDifficulty(chainActive.Tip()));\n     obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());"
      },
      {
        "sha": "a453c2bf04edf8318386064f63266712ac195486",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 6,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411604033734e33e0383a831a72ae4db0e1a4f2f/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411604033734e33e0383a831a72ae4db0e1a4f2f/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=411604033734e33e0383a831a72ae4db0e1a4f2f",
        "patch": "@@ -137,6 +137,8 @@ class CChainState {\n      */\n     std::set<CBlockIndex*, CBlockIndexWorkComparator> setBlockIndexHeaderCandidates;\n \n+    CBlockIndex *pindexBestHeader = nullptr;\n+\n     /**\n      * Every received block is assigned a unique and increasing identifier, so we\n      * know which one to give priority in case of a fork.\n@@ -213,6 +215,7 @@ class CChainState {\n \n     void UnloadBlockIndex();\n \n+    const CBlockIndex* GetBestHeader();\n private:\n     bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -491,7 +494,7 @@ static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n         return false;\n     if (chainActive.Tip()->GetBlockTime() < (GetTime() - MAX_FEE_ESTIMATION_TIP_AGE))\n         return false;\n-    if (chainActive.Height() < pindexBestHeader->nHeight - 1)\n+    if (chainActive.Height() < GetBestHeader()->nHeight - 1)\n         return false;\n     return true;\n }\n@@ -1214,7 +1217,7 @@ bool IsInitialBlockDownload()\n     return false;\n }\n \n-CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n+static CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n \n static void AlertNotify(const std::string& strMessage)\n {\n@@ -1377,6 +1380,18 @@ void CChainState::MaybeAddNewHeaderCandidate(CBlockIndex* pindex, bool chain_ord\n     setBlockIndexHeaderCandidates.insert(pindex);\n }\n \n+const CBlockIndex* CChainState::GetBestHeader() {\n+    LOCK(cs_main);\n+    auto it = setBlockIndexHeaderCandidates.rbegin();\n+    if (it == setBlockIndexHeaderCandidates.rend())\n+        return nullptr;\n+    return *it;\n+}\n+\n+const CBlockIndex* GetBestHeader() {\n+    return g_chainstate.GetBestHeader();\n+}\n+\n // Helper for PruneInvalidBlockIndexCandidates\n static void PruneInvalidIndexCandidatesInSet(CBlockIndex* pindexInvalid, std::set<CBlockIndex*, CBlockIndexWorkComparator>& set_candidates) {\n     // Iterate set_candidates downwards, deleting parents of pindexInvalid,\n@@ -2000,6 +2015,8 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->nChainWork >= nMinimumChainWork) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n+                // Note that we use pindexBestHeader here, not GetBestHeader(), ignoring potential\n+                // chain-invalidity of the best header.\n                 // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n                 //  Requiring a software change or burying the invalid block, regardless of the setting, makes\n@@ -2780,11 +2797,11 @@ bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainPar\n static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     bool fNotify = false;\n     bool fInitialBlockDownload = false;\n-    static CBlockIndex* pindexHeaderOld = nullptr;\n-    CBlockIndex* pindexHeader = nullptr;\n+    static const CBlockIndex* pindexHeaderOld = nullptr;\n+    const CBlockIndex* pindexHeader = nullptr;\n     {\n         LOCK(cs_main);\n-        pindexHeader = pindexBestHeader;\n+        pindexHeader = GetBestHeader();\n \n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n@@ -4448,6 +4465,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n \n void CChainState::UnloadBlockIndex() {\n     nBlockSequenceId = 1;\n+    pindexBestHeader = nullptr;\n     m_failed_blocks.clear();\n     setBlockIndexCandidates.clear();\n     setBlockIndexHeaderCandidates.clear();\n@@ -4461,7 +4479,6 @@ void UnloadBlockIndex()\n     LOCK(cs_main);\n     chainActive.SetTip(nullptr);\n     pindexBestInvalid = nullptr;\n-    pindexBestHeader = nullptr;\n     mempool.clear();\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();"
      },
      {
        "sha": "23b34111d70d92f4403e82d0cad3ef275ed5c862",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/411604033734e33e0383a831a72ae4db0e1a4f2f/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/411604033734e33e0383a831a72ae4db0e1a4f2f/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=411604033734e33e0383a831a72ae4db0e1a4f2f",
        "patch": "@@ -176,8 +176,8 @@ extern uint256 hashAssumeValid;\n /** Minimum work we will assume exists on some valid chain. */\n extern arith_uint256 nMinimumChainWork;\n \n-/** Best header we've seen so far (used for getheaders queries' starting points). */\n-extern CBlockIndex *pindexBestHeader;\n+/** Get the best (potentially-)valid header we've seen so far (used for getheaders queries' starting points). */\n+const CBlockIndex* GetBestHeader();\n \n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;"
      }
    ]
  },
  {
    "sha": "6096c63802ccc010eecc58fc9039bd77962afc3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDk2YzYzODAyY2NjMDEwZWVjYzU4ZmM5MDM5YmQ3Nzk2MmFmYzNi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-09T19:18:53Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-26T05:59:36Z"
      },
      "message": "Replace ProcessNewBlock's fRequested with candidate header check\n\nInstead of allowing net_processing to inform AcceptBlock as to\nwhether a block is interesting enough to commit to disk, use the\nnew setBlockIndexHeadersCandidates to determine if they lead\ntowards a chain with at least the same (or more) work as our\ncurrent tip. This further decouples the maze in net_processing from\nour consensus anti-DoS logic.",
      "tree": {
        "sha": "7276537e585afb2e7cc91d22d372bed4b2ebfacc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7276537e585afb2e7cc91d22d372bed4b2ebfacc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6096c63802ccc010eecc58fc9039bd77962afc3b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvSrUgACgkQV/+b28ww\nEAl0BxAAsUez9xaYHVrf38x0Kq4mK2G2znQoy92Lf7fSBkvO5ebHThoXJQHM0DKF\n0+tQGmsmgIPtBgi+Ag8RoJWUuNHiFgsRLNwliQfs54aQf2qIlvXYOeD0cn1UAMfb\nRH8AzHRVr8kT/mqJMR+h1V71cnc3DElg0eh/V2vePa0j1WKBVw/rqtK9IbKVcg+Q\nCKdTtvxa0or91d9ieNoQEbWaXNTVj0Wq0ZkiplgQuYx7rUSw4BGpaygSB1N1q/KG\ntHSus7oQLSnz0fzD8zr3sq6UHJ9fNZu3UCUzLkvVrmbEqitDpbVvljuCIDDspgv0\nCaCZ4SnRndxk0SaIaRpwSW99IPyNfCCidgCMsLdBxQGw6aWKNqad/wJKmlGSvm5+\nBxuPT3tNee31RB1AqUBzDELH2zxQSEMnzB6SpC17QUquyLsShsww2fiSFJSnpdMa\nFXtBhrv+k5Xf7hMeKu4EYOZccW5ajFs32sBRshhckgLxMZ9W5Qd0BsAInHNTKhs1\nZRF2YbSqjKYsOAeZySb08RiUsY9ihHtg1k3B/g1Rr4SA4VmpBdWZ5qT4cMy91U66\nGm0lL8e966FU2xiUtPISqUwRMHOu3UCDfDxYWbHF0CERNmVU0x9eNd7P5V9r6NXb\nJKiOhxrW0wzzc97ywV609v7nE8loHCj88AgrZFnvv3XZ0fQJcSY=\n=TIbA\n-----END PGP SIGNATURE-----",
        "payload": "tree 7276537e585afb2e7cc91d22d372bed4b2ebfacc\nparent 411604033734e33e0383a831a72ae4db0e1a4f2f\nauthor Matt Corallo <git@bluematt.me> 1507576733 -0400\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1540533576 +0800\n\nReplace ProcessNewBlock's fRequested with candidate header check\n\nInstead of allowing net_processing to inform AcceptBlock as to\nwhether a block is interesting enough to commit to disk, use the\nnew setBlockIndexHeadersCandidates to determine if they lead\ntowards a chain with at least the same (or more) work as our\ncurrent tip. This further decouples the maze in net_processing from\nour consensus anti-DoS logic.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6096c63802ccc010eecc58fc9039bd77962afc3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6096c63802ccc010eecc58fc9039bd77962afc3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6096c63802ccc010eecc58fc9039bd77962afc3b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "411604033734e33e0383a831a72ae4db0e1a4f2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/411604033734e33e0383a831a72ae4db0e1a4f2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/411604033734e33e0383a831a72ae4db0e1a4f2f"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 54,
      "deletions": 93
    },
    "files": [
      {
        "sha": "92de60cfc335f800a0fb55b193a9df4aeb8a7f2d",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -45,7 +45,7 @@ static CTxIn MineBlock(const CScript& coinbase_scriptPubKey)\n         assert(block->nNonce);\n     }\n \n-    bool processed{ProcessNewBlock(Params(), block, true, nullptr)};\n+    bool processed{ProcessNewBlock(Params(), block, nullptr)};\n     assert(processed);\n \n     return CTxIn{block->vtx[0]->GetHash(), 0};"
      },
      {
        "sha": "99dceafbd9468aa66a728ef3fc7410c2eb24dacf",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 20,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -2570,16 +2570,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            // Setting fForceProcessing to true means that we bypass some of\n-            // our anti-DoS protections in AcceptBlock, which filters\n-            // unrequested blocks that might be trying to waste our resources\n-            // (eg disk space). Because we only try to reconstruct blocks when\n-            // we're close to caught up (via the CanDirectFetch() requirement\n-            // above, combined with the behavior of not requesting blocks until\n-            // we have a chain with at least nMinimumChainWork), and we ignore\n-            // compact blocks with less work than our tip, it is safe to treat\n-            // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2658,11 +2649,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n-            // disk-space attacks), but this should be safe due to the\n-            // protections in the compact block handler -- see related comment\n-            // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            ProcessNewBlock(chainparams, pblock, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2705,19 +2692,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n \n-        bool forceProcessing = false;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n-            // Also always process if we requested the block explicitly, as we may\n-            // need it even though it is not a candidate for a new best tip.\n-            forceProcessing |= MarkBlockAsReceived(hash);\n+            MarkBlockAsReceived(hash);\n             // mapBlockSource is only used for sending reject messages and DoS scores,\n             // so the race between here and cs_main in ProcessNewBlock is fine.\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        ProcessNewBlock(chainparams, pblock, &fNewBlock);\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {"
      },
      {
        "sha": "47e94c808b37b54c46e710f9fea36a6be0b7adbe",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -138,7 +138,7 @@ UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGen\n             continue;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        if (!ProcessNewBlock(Params(), shared_pblock, true, nullptr))\n+        if (!ProcessNewBlock(Params(), shared_pblock, nullptr))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -751,7 +751,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     bool new_block;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n+    bool accepted = ProcessNewBlock(Params(), blockptr, /* fNewBlock */ &new_block);\n     UnregisterValidationInterface(&sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";"
      },
      {
        "sha": "1e8e2e0d8ad0da793531aca67a856e4aea7c1590",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -248,7 +248,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n             pblock->nNonce = blockinfo[i].nonce;\n         }\n         std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(*pblock);\n-        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, true, nullptr));\n+        BOOST_CHECK(ProcessNewBlock(chainparams, shared_pblock, nullptr));\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n "
      },
      {
        "sha": "a7c184e80dac71228b8d496112690c4211755243",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -168,7 +168,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n+    ProcessNewBlock(chainparams, shared_pblock, nullptr);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "7b532587231f809fa1c2ad04f76a841781918953",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -137,7 +137,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored);\n+    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), &ignored);\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -158,13 +158,13 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             bool ignored;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[GetRand(blocks.size() - 1)];\n-                ProcessNewBlock(Params(), block, true, &ignored);\n+                ProcessNewBlock(Params(), block, &ignored);\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n             for (auto block : blocks) {\n                 if (block->vtx.size() == 1) {\n-                    bool processed = ProcessNewBlock(Params(), block, true, &ignored);\n+                    bool processed = ProcessNewBlock(Params(), block, &ignored);\n                     assert(processed);\n                 }\n             }"
      },
      {
        "sha": "3d23f298f14428e60914b58972840ed646cbd6f0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 21,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -192,7 +192,7 @@ class CChainState {\n      * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n      */\n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n@@ -3645,7 +3645,7 @@ static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CCh\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, const CDiskBlockPos* dbp, bool* fNewBlock)\n {\n     const CBlock& block = *pblock;\n \n@@ -3670,24 +3670,32 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     // not process unrequested blocks.\n     bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n-    // TODO: Decouple this function from the block download logic by removing fRequested\n-    // This requires some new chain data structure to efficiently look up if a\n-    // block is in a chain leading to a candidate for best tip, despite not\n-    // being such a candidate itself.\n-\n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n-    if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n-        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n-        if (fTooFarAhead) return true;        // Block height is too high\n-\n-        // Protect against DoS attacks from low-work chains.\n-        // If our tip is behind, a peer could try to send us\n-        // low-work blocks on a fake chain that we would never\n-        // request; don't process these.\n-        if (pindex->nChainWork < nMinimumChainWork) return true;\n+    if (!pindex->IsValid(BLOCK_VALID_TREE)) return true; // Parent block somewhere is invalid\n+    if (pindex->nTx != 0) return true;                   // This is a previously-processed block that was pruned\n+    if (fTooFarAhead) return true;                       // Block height is too high\n+\n+    bool parent_of_header_candidate = false;\n+    bool parent_of_min_chainwork_header_candidate = false;\n+    for (auto it = setBlockIndexHeaderCandidates.rbegin(); it != setBlockIndexHeaderCandidates.rend(); it++) {\n+        if ((*it)->GetAncestor(pindex->nHeight) == pindex) {\n+            parent_of_header_candidate = true;\n+            // Protect against DoS attacks from low-work chains.\n+            // If our tip is behind, a peer could try to send us\n+            // low-work blocks on a fake chain that we would never\n+            // request; don't process these.\n+            if ((*it)->nChainWork >= nMinimumChainWork) {\n+                parent_of_min_chainwork_header_candidate = true;\n+                break;\n+            }\n+        }\n+    }\n+    if (!fHasMoreOrSameWork && !parent_of_header_candidate) return true; // We dont think this block leads somewhere interesting\n+    if (!parent_of_min_chainwork_header_candidate && pindex->nChainWork < nMinimumChainWork) {\n+        // Neither this new block, nor any descendants we have, meet our minimum chain work.\n+        return true;\n     }\n \n     if (!CheckBlock(block, state, chainparams.GetConsensus()) ||\n@@ -3723,7 +3731,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n     return true;\n }\n \n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool *fNewBlock)\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool *fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -3739,7 +3747,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n \n         if (ret) {\n             // Store to disk\n-            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, fForceProcessing, nullptr, fNewBlock);\n+            ret = g_chainstate.AcceptBlock(pblock, state, chainparams, &pindex, nullptr, fNewBlock);\n         }\n         if (!ret) {\n             GetMainSignals().BlockChecked(*pblock, state);\n@@ -4613,7 +4621,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     CBlockIndex* pindex = LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       CValidationState state;\n-                      if (g_chainstate.AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {\n+                      if (g_chainstate.AcceptBlock(pblock, state, chainparams, nullptr, dbp, nullptr)) {\n                           nLoaded++;\n                       }\n                       if (state.IsError()) {\n@@ -4650,7 +4658,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                                     head.ToString());\n                             LOCK(cs_main);\n                             CValidationState dummy;\n-                            if (g_chainstate.AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, true, &it->second, nullptr))\n+                            if (g_chainstate.AcceptBlock(pblockrecursive, dummy, chainparams, nullptr, &it->second, nullptr))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(pblockrecursive->GetHash());"
      },
      {
        "sha": "8369e8b2c097e9a06c25c09ac579df62f18c390f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -223,11 +223,10 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * validationinterface callback.\n  *\n  * @param[in]   pblock  The block we want to process.\n- * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers."
      },
      {
        "sha": "0a695c605ee3e68b9b37bcb7bd8baad738b47827",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 12,
        "deletions": 42,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6096c63802ccc010eecc58fc9039bd77962afc3b/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6096c63802ccc010eecc58fc9039bd77962afc3b/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=6096c63802ccc010eecc58fc9039bd77962afc3b",
        "patch": "@@ -32,30 +32,23 @@\n    Node0 should process all but the last block (too far ahead in height).\n \n 5. Send a duplicate of the block in #3 to Node0.\n-   Node0 should not process the block because it is unrequested, and stay on\n-   the shorter chain.\n+   Node0 should process the block even though it is unrequested, and reorg to\n+   the longer chain.\n \n-6. Send Node0 an inv for the height 3 block produced in #4 above.\n-   Node0 should figure out that Node0 has the missing height 2 block and send a\n-   getdata.\n-\n-7. Send Node0 the missing block again.\n-   Node0 should process and the tip should advance.\n-\n-8. Create a fork which is invalid at a height longer than the current chain\n+6. Create a fork which is invalid at a height longer than the current chain\n    (ie to which the node will try to reorg) but which has headers built on top\n    of the invalid block. Check that we get disconnected if we send more headers\n    on the chain the node now knows to be invalid.\n \n-9. Test Node1 is able to sync when connected to node0 (which should have sufficient\n+7. Test Node1 is able to sync when connected to node0 (which should have sufficient\n    work on its chain).\n \"\"\"\n \n import time\n \n from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n-from test_framework.messages import CBlockHeader, CInv, msg_block, msg_headers, msg_inv\n-from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.messages import CBlockHeader, msg_block, msg_headers\n+from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, sync_blocks\n \n@@ -99,8 +92,8 @@ def run_test(self):\n         for x in [test_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        assert_equal(self.nodes[1].getblockcount(), 1)\n-        self.log.info(\"First height 2 block accepted by node0; correctly rejected by node1\")\n+        assert_equal(self.nodes[1].getblockcount(), 0)\n+        self.log.info(\"First height 2 block accepted by node0; all blocks correctly rejected by node1\")\n \n         # 3. Send another block that builds on genesis.\n         block_h1f = create_block(int(\"0x\" + self.nodes[0].getblockhash(0), 0), create_coinbase(1), block_time)\n@@ -192,8 +185,8 @@ def run_test(self):\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         # 5. Test handling of unrequested block on the node that didn't process\n-        # Should still not be processed (even though it has a child that has more\n-        # work).\n+        # Should be processed as the node can figure out that it leads to a new\n+        # chain that it will want.\n \n         # The node should have requested the blocks at some point, so\n         # disconnect/reconnect first\n@@ -205,37 +198,14 @@ def run_test(self):\n \n         test_node.send_message(msg_block(block_h1f))\n \n-        test_node.sync_with_ping()\n-        assert_equal(self.nodes[0].getblockcount(), 2)\n-        self.log.info(\"Unrequested block that would complete more-work chain was ignored\")\n-\n-        # 6. Try to get node to request the missing block.\n-        # Poke the node with an inv for block at height 3 and see if that\n-        # triggers a getdata on block 2 (it should if block 2 is missing).\n-        with mininode_lock:\n-            # Clear state so we can check the getdata request\n-            test_node.last_message.pop(\"getdata\", None)\n-            test_node.send_message(msg_inv([CInv(2, block_h3.sha256)]))\n-\n-        test_node.sync_with_ping()\n-        with mininode_lock:\n-            getdata = test_node.last_message[\"getdata\"]\n-\n-        # Check that the getdata includes the right block\n-        assert_equal(getdata.inv[0].hash, block_h1f.sha256)\n-        self.log.info(\"Inv at tip triggered getdata for unprocessed block\")\n-\n-        # 7. Send the missing block for the third time (now it is requested)\n-        test_node.send_message(msg_block(block_h1f))\n-\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         self.nodes[0].getblock(all_blocks[286].hash)\n         assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Create a chain which is invalid at a height longer than the\n+        # 6. Create a chain which is invalid at a height longer than the\n         # current chain, but which has more blocks on top of that\n         block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n         block_289f.solve()\n@@ -300,7 +270,7 @@ def run_test(self):\n         test_node.send_message(headers_message)\n         test_node.wait_for_disconnect()\n \n-        # 9. Connect node1 to node0 and ensure it is able to sync\n+        # 7. Connect node1 to node0 and ensure it is able to sync\n         connect_nodes(self.nodes[0], 1)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n         self.log.info(\"Successfully synced nodes 1 and 0\")"
      }
    ]
  },
  {
    "sha": "5fcddb0126e1ecd77920cfe3e44873fd7b0197bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmNkZGIwMTI2ZTFlY2Q3NzkyMGNmZTNlNDQ4NzNmZDdiMDE5N2Ji",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-10T13:54:51Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-27T02:41:31Z"
      },
      "message": "[test] precious_block: additional debug log statements",
      "tree": {
        "sha": "3e8b9b138d5cf618a5644a381452c41556cb8ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e8b9b138d5cf618a5644a381452c41556cb8ec8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvT0FsACgkQV/+b28ww\nEAlqDBAAr90tg1pD19u8E9Nr/pDDoK/N41J/sj59y117/W9Kwxi6RI8QiJ7T6Spv\nOIfKxoKbyQLH3b+XwWsmcF0NLNUM/H3VwON48Z+TB8LXmLaiD8P6XL5KDn3J6Z6r\nV206IcECC4KDAG/v92ylvB4vI/c+k4xymLZDMv+WxQKzhWBSVCfS1gzhutr/KAYC\nOFeFbOnc6RKizASHeq7Z2apxPzkkiBOkzpiKvM1H/O7L+eLXhVIC+GG15KNa3gxp\nvgSns8aBtHG5LyveH7Qv7N5/tjSZyqdGK/hl7gUFMjlQPNPgqG+e58vYu7G7XAJc\nCzi4AKRo6U6TcqAcSIzBcC4L5vDPqn8Ca84mYNf4PW7thO6klqKL5LmKvXDansU5\nflpmVsr2UAjZRUCrBBOWS3DKZOb973fAt/3+003hsaEhavDLt44e0vbCdqF1QeMR\nMuk5qlLDBMg68Nmm9/fIw7f/DZDW1KyUC2o7EYRS1X6eI2q9A9us0uxrCtyPf07I\neIaqy+c35hxc2qLlxn2g4QEDvZLCatTpbpgVD3D1AqHDt7uG07aIj9o465FL7dgH\n++Rwq/WSwPlsv9G57XKQ4Zs+HgLQ/tf9ztRIFMqJlIMENJfpbJt7eVP7MLlTjYD7\nDOhMcPdlYdC0nOWdj/dXtVYPGnw2ZQgw10EfE0ModKbuh7mWaRE=\n=PZ0T\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e8b9b138d5cf618a5644a381452c41556cb8ec8\nparent 6096c63802ccc010eecc58fc9039bd77962afc3b\nauthor Sjors Provoost <sjors@sprovoost.nl> 1533909291 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1540608091 +0800\n\n[test] precious_block: additional debug log statements\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6096c63802ccc010eecc58fc9039bd77962afc3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6096c63802ccc010eecc58fc9039bd77962afc3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6096c63802ccc010eecc58fc9039bd77962afc3b"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "65d864afdacf0aa5859befae2c50659c4a0d85f3",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=5fcddb0126e1ecd77920cfe3e44873fd7b0197bb",
        "patch": "@@ -11,7 +11,7 @@\n     sync_blocks,\n )\n \n-def unidirectional_node_sync_via_rpc(node_src, node_dest):\n+def unidirectional_node_sync_via_rpc(self, node_src, node_dest):\n     blocks_to_copy = []\n     blockhash = node_src.getbestblockhash()\n     while True:\n@@ -22,16 +22,19 @@ def unidirectional_node_sync_via_rpc(node_src, node_dest):\n             blocks_to_copy.append(blockhash)\n             blockhash = node_src.getblockheader(blockhash, True)['previousblockhash']\n     blocks_to_copy.reverse()\n+    self.log.debug(\"Blocks to copy: %s\", blocks_to_copy)\n     for blockhash in blocks_to_copy:\n         blockdata = node_src.getblock(blockhash, False)\n-        assert(node_dest.submitblock(blockdata) in (None, 'inconclusive'))\n+        result = node_dest.submitblock(blockdata)\n+        assert result in (None, 'inconclusive'), \"submitblock returned %r\" % result\n \n-def node_sync_via_rpc(nodes):\n-    for node_src in nodes:\n-        for node_dest in nodes:\n+def node_sync_via_rpc(self, nodes):\n+    for src_idx, node_src in enumerate(nodes):\n+        for dest_idx, node_dest in enumerate(nodes):\n             if node_src is node_dest:\n                 continue\n-            unidirectional_node_sync_via_rpc(node_src, node_dest)\n+            self.log.debug(\"Sync from node %r to %r\", src_idx, dest_idx)\n+            unidirectional_node_sync_via_rpc(self, node_src, node_dest)\n \n class PreciousTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -48,7 +51,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getblockcount(), 1)\n         hashZ = self.nodes[1].generatetoaddress(2, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        node_sync_via_rpc(self.nodes[0:3])\n+        node_sync_via_rpc(self, self.nodes[0:3])\n         assert_equal(self.nodes[0].getbestblockhash(), hashZ)\n \n         self.log.info(\"Mine blocks A-B-C on Node 0\")\n@@ -60,7 +63,7 @@ def run_test(self):\n         assert(hashC != hashG)\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n-        node_sync_via_rpc(self.nodes[0:2])\n+        node_sync_via_rpc(self, self.nodes[0:2])\n         connect_nodes_bi(self.nodes,0,1)\n         assert_equal(self.nodes[0].getbestblockhash(), hashC)\n         assert_equal(self.nodes[1].getbestblockhash(), hashG)\n@@ -97,7 +100,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getblockcount(), 6)\n         hashL = self.nodes[2].getbestblockhash()\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n-        node_sync_via_rpc(self.nodes[1:3])\n+        node_sync_via_rpc(self, self.nodes[1:3])\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         assert_equal(self.nodes[0].getbestblockhash(), hashH)"
      }
    ]
  },
  {
    "sha": "6638093b60309780452bc381a6b3f163c18d1a4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjM4MDkzYjYwMzA5NzgwNDUyYmMzODFhNmIzZjE2M2MxOGQxYTRl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-26T13:48:26Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-27T02:41:31Z"
      },
      "message": "[validation] explictly handle GetBestHeader() == nullptr",
      "tree": {
        "sha": "dafe508c49de8adf2ca11474b7484c86f9360d17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dafe508c49de8adf2ca11474b7484c86f9360d17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6638093b60309780452bc381a6b3f163c18d1a4e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvT0FsACgkQV/+b28ww\nEAm6TQ/8ChS53IBfPuJnc7xaCVAr8cBh/6M/xspHAlLsNxBuZURaBI/L6so5EeGH\nzm5uEBe1WBjGyY7FSe1f8OqJ6xmSmPYdErBqxx8lsE8Nq85iyqFzdA5VS2/l7Pij\nJhNVkKiWGuWgew7Q0p2i0dJlSqBv5xEgaFSmuxykNgJH8et6oHO1W+nvW47sCXfT\nUlhxDBef7yBSUuk4xBBzMZyPbi9aPv4CoC424dT3wJJYSFRE3lMeJ8r/LJr1Trje\nEckP5UfZOqUaSEsZxlyyHGRzM0n9J2WNuRntFVn3kd0kaJ2KqA87c8NSbWDLRtDk\nVu1gdwx8WJmxwJYDoXqZa6eFXYN0TzGDxbwKUstg0AaPmo/WxGtd7A4n+eAOl1/y\nSGWWWTG2MW3S0LLJg2JBpfXNi1SdXEKC8jCsj+bxdpQq3hb5kj+m42tFxkLt2eYU\n2vYoRBriRz5SY7pj4FO9eTtCYROekSqQymcbWaa8MiS1Z9ymOlwNBJRzCDsin3oW\nFHg/zqxWvYMa1etb/fE+r+5eue02aKgBx8nUkP42k1pt2C40v8Fuq+GKSZJaNvXX\nghzjTiCNz8SuoLhN8eEuOUYbUsqwgzHgGcwXqvDuPP7u9BjeI20SLt16KnhHKg4p\nUXE5zGk1gV06DcA6CLegraY3WGo2/HU7kXalN6KRM5a7uQX+XYY=\n=1aSJ\n-----END PGP SIGNATURE-----",
        "payload": "tree dafe508c49de8adf2ca11474b7484c86f9360d17\nparent 5fcddb0126e1ecd77920cfe3e44873fd7b0197bb\nauthor Sjors Provoost <sjors@sprovoost.nl> 1535291306 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1540608091 +0800\n\n[validation] explictly handle GetBestHeader() == nullptr\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6638093b60309780452bc381a6b3f163c18d1a4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6638093b60309780452bc381a6b3f163c18d1a4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6638093b60309780452bc381a6b3f163c18d1a4e/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5fcddb0126e1ecd77920cfe3e44873fd7b0197bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5fcddb0126e1ecd77920cfe3e44873fd7b0197bb"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5d7aff9be0543be0d6ee3a19faad5e3c0ed0e805",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6638093b60309780452bc381a6b3f163c18d1a4e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6638093b60309780452bc381a6b3f163c18d1a4e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=6638093b60309780452bc381a6b3f163c18d1a4e",
        "patch": "@@ -215,6 +215,7 @@ class CChainState {\n \n     void UnloadBlockIndex();\n \n+    // This may return nullptr:\n     const CBlockIndex* GetBestHeader();\n private:\n     bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -494,7 +495,10 @@ static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n         return false;\n     if (chainActive.Tip()->GetBlockTime() < (GetTime() - MAX_FEE_ESTIMATION_TIP_AGE))\n         return false;\n-    if (chainActive.Height() < GetBestHeader()->nHeight - 1)\n+    const CBlockIndex* best_header = GetBestHeader();\n+    if (best_header == nullptr)\n+        return false;\n+    if (chainActive.Height() < best_header->nHeight - 1)\n         return false;\n     return true;\n }\n@@ -2809,8 +2813,9 @@ static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n             pindexHeaderOld = pindexHeader;\n         }\n     }\n-    // Send block tip changed notifications without cs_main\n-    if (fNotify) {\n+    // Send block tip changed notifications without cs_main, except in the\n+    // (unlikely) event there aren't any header candidates.\n+    if (fNotify && pindexHeader != nullptr) {\n         uiInterface.NotifyHeaderTip(fInitialBlockDownload, pindexHeader);\n     }\n }"
      }
    ]
  },
  {
    "sha": "bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGFmOWY5NjkzNzc2OWFlNjhhZTZjYTgxMTkzZTEyZmMyNmEyOWFl",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-08-26T14:05:56Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2018-10-27T02:41:31Z"
      },
      "message": "[rpc] explictly handle GetBestHeader() == nullptr",
      "tree": {
        "sha": "62b4df38a2703f738d48eae80c76c8a94da43d41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62b4df38a2703f738d48eae80c76c8a94da43d41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAlvT0FwACgkQV/+b28ww\nEAmihw//fJk/9zrUyrEZ/cdvsK98IM3wVYLB29zpnmkagb4UNr2Zku+ezVLljkQA\nQ6xMTAO6mAz9LLCtQ5rjGqM5OMEvDlie7eqwDRSs8BDcKmgui+Htby6r1ZSHSH7r\ntzxfd85QvgJ+EygVkNd5biWfrZEgAiskjjBNZ3MUI91bAnKkq8D7Pxmdl1ilp/WP\nD9JWcY6saekGn6bcDTX8oBm/Ui9pw/e48xZ+j1B1xqZYh7tLi2GcA/2mk6Dy2/S4\nK/GTxWCECvSXVwX7+xThxKiwIDhd5iDgDrGdXAxdqTcf4k9kzStsmVJpblyXNvYI\nOePX6Apu+7loGW6vasN1f5aiToaFnRm9HWIW0c6saeAoqum8I6mgSwGI8nxFdW7U\nVHWnPMhp6pTyXJSPOtfnkh0bfZ2FPpCcuFpdex9OxfCHnw4TOVZB9zppZhWTnBD1\npYmbUdscUA9ms/d4hhyp+qvlFDMqi1kqIjt6hHwhl2kEkIeq2ipStTRM88JV/shr\nWp8BYJNdvioA1tEWzZGfoRrJOTR5DMViCWPFGBzXlJO2VXC6WM/KNmwel2tnS46V\nZRAjhp9g25RWqN5SM/gtv01/LI3q/P6o5cLqcqwguDYX9F2MEjx/RzrblBaTsfsk\nsA6CBfSmzoL66nxwT8N28i/u35Rjy21DxdNEVhj4j5IxgGAO9i4=\n=E7VV\n-----END PGP SIGNATURE-----",
        "payload": "tree 62b4df38a2703f738d48eae80c76c8a94da43d41\nparent 6638093b60309780452bc381a6b3f163c18d1a4e\nauthor Sjors Provoost <sjors@sprovoost.nl> 1535292356 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1540608091 +0800\n\n[rpc] explictly handle GetBestHeader() == nullptr\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdaf9f96937769ae68ae6ca81193e12fc26a29ae/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6638093b60309780452bc381a6b3f163c18d1a4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6638093b60309780452bc381a6b3f163c18d1a4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6638093b60309780452bc381a6b3f163c18d1a4e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "12b325d6cfb976034f9305dbbf38b27607d76a79",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdaf9f96937769ae68ae6ca81193e12fc26a29ae/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdaf9f96937769ae68ae6ca81193e12fc26a29ae/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bdaf9f96937769ae68ae6ca81193e12fc26a29ae",
        "patch": "@@ -1245,10 +1245,12 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n+    const CBlockIndex* best_header = GetBestHeader();\n+\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"chain\",                 Params().NetworkIDString());\n     obj.pushKV(\"blocks\",                (int)chainActive.Height());\n-    obj.pushKV(\"headers\",               GetBestHeader()->nHeight);\n+    obj.pushKV(\"headers\",               best_header == nullptr ? chainActive.Height() : best_header->nHeight);\n     obj.pushKV(\"bestblockhash\",         chainActive.Tip()->GetBlockHash().GetHex());\n     obj.pushKV(\"difficulty\",            (double)GetDifficulty(chainActive.Tip()));\n     obj.pushKV(\"mediantime\",            (int64_t)chainActive.Tip()->GetMedianTimePast());"
      }
    ]
  }
]