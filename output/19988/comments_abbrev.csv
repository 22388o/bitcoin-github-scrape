jonatack,2020-09-21 11:00:49,"Initial light Concept ACK based on first reading of the code, the documentation in `txrequest.h`, and thinking about the differences with respect to the current tx request logic. Debug build clean and local tests green at each commit. The new `txrequest` fuzzer is running so far without issues.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-696044101,696044101,
DrahtBot,2020-09-21 11:34:35,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 19988](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/19988/tot,https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-696058761,696058761,
instagibbs,2020-09-21 14:59:43,committing to review soon(TM),https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-696171592,696171592,
jonatack,2020-09-21 18:11:54,"Reviewed the first commit, ""Add txrequest module"". Overall looks good. Various minor suggestions in https://github.com/jonatack/bitcoin/commits/pr-19988-review-suggestions to not add noise here; feel free to pick and choose.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-696281970,696281970,
sipa,2020-09-22 00:58:59,"Pushed an update, incorporating @jonatack's nits above, and addressing a number of @ariard's comments on #19184. I also moved the entire implementation to txrequest.cpp, hidden using a `TxRequestTracker::Impl` object. I hope this makes it easier to distinguish the comments in the .h (now entirely about the observable behavior without implementation details) vs the .cpp (which works quite different",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-696458038,696458038,
sipa,2020-09-23 03:06:40,@sr-gi You may be interested in this.,https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-697104797,697104797,
sipa,2020-09-27 16:56:54,"I think using `.CountInFlight()` isn't actually the right way to determine being overloaded. If a peer dumps 5000 INVs on us at once, they'll all be inserted at a time when inflight==0, and thus all be eligible to get the ""first"" marker, and won't get any delay penalty.\n\nOn the other hand, I think using `CountTracked` is suboptimal as well, as it includes entries in COMPLETED state as well, wh",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-699660003,699660003,
sipa,2020-09-27 18:25:04,"I've made that change, and re-instated a ""max in flight"" P2P test.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-699670117,699670117,
sr-gi,2020-09-28 15:06:58,"Started to give a look at this, hope I'm not late to the party.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-700067143,700067143,
sipa,2020-09-30 20:59:39,"I've removed the ""first"" marker logic as @ajtowns found that it has little effect in practice (and is unlikely to have one absent other significant changes to the logic), see https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497222956 and preceding comments. A branch that re-enables it (in a final commit on top) is here: https://github.com/sipa/bitcoin/commits/202009_txrequest_rand_wtxid_f",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-701642487,701642487,
sipa,2020-10-06 02:36:14,"@ariard @jnewbery @ajtowns As the size of this PR's page is growing, would you mind going over your older un-""resolved"" comments and resolve if you feel they've been addressed? For obvious fixes I've been doing that, but in cases where it's not clear to me I've left them open.\n\n@ariard Nice, I've squashed your test into the relevent commit here (mentioning you in the commit message).",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-703993017,703993017,
jnewbery,2020-10-06 09:26:31,"> would you mind going over your older un-""resolved"" comments and resolve if you feel they've been addressed?\n\nDone all mine. Thanks for being so responsive to review comments!",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-704146642,704146642,
vasild,2020-10-07 07:57:58,"[Filtered code coverage report](https://people.freebsd.org/~vd/pr19988_4e3e2f6a2_coverage/) (files not modified by this PR are omitted and not modified lines in files that are otherwise modified are dimmed).\n\n[List of modified and not covered lines](https://people.freebsd.org/~vd/pr19988_4e3e2f6a2_coverage/modified_and_not_covered.html).",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-704764681,704764681,
sipa,2020-10-08 01:38:52,"Addressed a bunch of review comments by @hebasto, @jnewbery, and @ariard. I've also added some extra unit tests to hopefully cover the txrequest.cpp lines @vasild pointed out were uncovered (but I haven't verified if they're covered now).",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-705280132,705280132,
naumenkogs,2020-10-08 08:06:46,"Light code review ACK.\nIt‚Äôs a really big change, and I‚Äôm a bit worried we‚Äôd break some existing non-obvious behaviour‚Ä¶ The test and fuzzing stuff adds some confidence, and also the existing tests pass, so that‚Äôs good.\n\nI‚Äôll spend more time in the next couple days doing more review. Perhaps I'll try to use this new test framework to break this approach.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-705404663,705404663,
jnewbery,2020-10-08 09:37:27,Code review ACK bf3f99291b,https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-705453980,705453980,
jonatack,2020-10-08 09:46:55,Looks like there is much to catch up with since my first pass over the code. Will circle back to review this after #19953 in the next 3-4 days.,https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-705458904,705458904,
vasild,2020-10-08 10:02:03,"(re-generated on bf3f99291)\n\n[Filtered code coverage report](https://people.freebsd.org/~vd/pr19988_bf3f99291_coverage/) (files not modified by this PR are omitted and not modified lines in files that are otherwise modified are dimmed).\n\n[List of modified and not covered lines](https://people.freebsd.org/~vd/pr19988_bf3f99291_coverage/modified_and_not_covered.html).",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-705466889,705466889,
sipa,2020-10-08 18:54:41,"Rebased on the now-merged #20027, addressed a few more comments, and added yet another unit test to increase coverage.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-705759406,705759406,
jnewbery,2020-10-09 08:27:18,Code review ACK f7f75da6dc,https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-706046224,706046224,
naumenkogs,2020-10-12 10:41:21,"utACK 93d6a00a2da5eace70afd2e794a772a7c9be541a basic scenarios modulo my comments above.\nI'm still planning to review couple corner cases: tx-dependencies, notfounds, reorgs.\n\nI don‚Äôt have a strong opinion on keeping time-going-backwards in the codebase.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-707040648,707040648,
sipa,2020-10-12 19:32:27,"@ariard The only advantages to dropping the time-going-backwards support are IMO:\n\n* Slightly easier to review because fewer situations to take into account\n* Better worst-case amortized complexity under insane clock situations (as now m_state can only move forward, and is thus restricted to 1 creation, 1 deletion, 4 state transitions, and once being returned by GetRequestable).",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-707306313,707306313,
sipa,2020-10-12 22:12:26,"I dropped the last commit, so time can go backwards again. It seems it's not a clear-cut improvement, so it's probably better to deal with it in a follow-up. The old commit is here https://github.com/sipa/bitcoin/commits/202010_txrequest_rand_wtxid_monotime in case we want it in the future.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-707371298,707371298,
sipa,2020-10-13 17:30:48,I'm going to leave further comment-only nits for a follow-up now.,https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-707897500,707897500,
ariard,2020-10-14 01:18:53,"Code Review ACK fd9a006. I've reviewed the new TxRequestTracker, its integration in net_processing, unit/functional/fuzzing test coverage. I looked more for soundness of new specification rather than functional consistency with old transaction request logic.\n\nDiff with last ACK is dropping ""Remove support for time going backwards"", new units/functional tests comments.",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-708095863,708095863,
MarcoFalke,2020-10-14 07:46:06,"Approach ACK fd9a0060f028a4c01bd88f58777dea34bdcbafd1 üèπ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nApproach ACK fd9a0060f028a4c01bd88f58777dea34bdcbafd1 üèπ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhjIwv9EYiV1H9OmL1ZUSW0nLll5hHVgDQvvRx/",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-708224832,708224832,
naumenkogs,2020-10-14 09:10:12,"Code Review ACK fd9a006. I've reviewed everything, mostly to see how this stuff works at the lower level (less documentation-wise, more implementation-wise), and to try breaking it with unexpected sequences of events.\n\nComparison to the current master code is still hard, but maybe we shouldn't even try: the only advantage current code has is standing test-of-time. This PR, on the other hand, h",https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-708269841,708269841,
laanwj,2020-10-14 16:37:41,code review ACK fd9a0060f028a4c01bd88f58777dea34bdcbafd1,https://github.com/bitcoin/bitcoin/pull/19988#issuecomment-708521000,708521000,
MarcoFalke,2020-09-22 15:30:39,"```suggestion\n * - Whether it's from a ""preferred"" peer or not (outbound and noban peers are preferred).\n```\n\nstyle-nit: Would be good to mention the exact permission flag, because legacy whitelisted is discouraged, has been deprecated, and might be removed some time in the future.\n\n(Same below)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r492832470,492832470,src/txrequest.h
ajtowns,2020-09-23 02:23:39,"`exptime` is slightly ambiguous with ""expected time"" to me, maybe replace with ""timeout"" or ""expiry_time"" or just ""expiry"" ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493158786,493158786,src/txrequest.h
ajtowns,2020-09-23 02:30:44,"""(see further for details)"" is true of all these points, I think.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493160848,493160848,src/txrequest.h
ajtowns,2020-09-23 02:33:34,"This was confusing -- I read it as ""the first of many markers"" rather than ""a marker indicating it was first"" and wondered what these ""markers"" were. Adding quotes around ""first"" consistently might be better?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493161600,493161600,src/txrequest.h
ajtowns,2020-09-23 02:35:50,Incomplete sentence?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493162248,493162248,src/txrequest.h
ajtowns,2020-09-23 02:41:13,"Add a reference to https://allquantor.at/blockchainbib/pdf/miller2015topology.pdf to document/explain the invblock terminology? ""What does this have to do with an INV message about a block?""",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493163586,493163586,src/txrequest.h
ajtowns,2020-09-23 02:42:25,"""and **not** being influencable by attackers""",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493163901,493163901,src/txrequest.h
ajtowns,2020-09-23 02:53:21,"""uint64_t"" as a parameter name?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493166644,493166644,src/txrequest.h
ajtowns,2020-09-23 03:00:34,"Isn't this exactly the same performance as having a subclass and making the methods virtual, except with all the dispatching written out explicitly? ie, could instead write something like:\n\n```c++\nclass TxRequestTracker\n{\nprotected:\n    TxRequestTracker() { } // pure virtual class, must instantiate via subclass\npublic:\n    virtual ~TxRequestTracker();\n    virtual void DeletedPeer",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493168472,493168472,src/txrequest.h
ajtowns,2020-09-23 03:05:34,"Are these needed for fuzz testing, or could they be deleted as well? (copy constructors are implicitly deleted because of the unique ptr, so I think currently this is just making the implicit defaults explicit)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493169664,493169664,src/txrequest.h
sipa,2020-09-23 03:17:11,"I'd like to keep txrequest mostly about the decision logic and data structure, while leaving net_processing responsible for the actual policy choices (""what delays are given to which peers/requests"", ""what timeouts are used"", ""when exactly is a peer considered preferred"", ""when exactly is a peer considered overloaded"", ""how many announcements can be tracked per peer"").\n\nOf course, the explanat",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493172470,493172470,src/txrequest.h
ajtowns,2020-09-23 03:35:42,"Does anything limit the size of the returned vector? I think the main constraints are those in net_processing.cpp:RequestTx which could leave as many as 100k entries in CANDIDATE state for a given peer, so this could be a 4MB vector, which seems like it might be larger than desirable?\n\nIt's also constrained by how many txs can be INVed by a peer inbetween calls to GetRequestable, so in normal ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493177000,493177000,src/txrequest.h
ajtowns,2020-09-23 03:44:42,"""Run a check on consistency of request times after a call to GetRequestable (requires the same timestamp as was passed to GetRequestable)"" might be a better description? (At first glance I thought it might have been timing the sanity check, or doing a limited sanity check that checked different things depending on how much time it was taking to run)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493179243,493179243,src/txrequest.h
ajtowns,2020-09-23 04:18:11,Maybe this should be `overloaded == ... || g_txrequest.CountCandidates() >= 5000` or similar? I'm not sure I have a plausible enough scenario where this would be a benefit to justify the added code though.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493187263,493187263,src/net_processing.cpp
ajtowns,2020-09-23 04:30:45,"I think if you were to make `RequestTx()` a method of `class PeerManager`, you could make `g_txrequest` be a private member `PeerManager::m_txrequest GUARDED_BY(cs_main)` instead of a global. OTOH, might be better to not do that until other globals that `PeerManager` methods rely on (like `mapNodeState`) are also moved. cc @jnewbery",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493190576,493190576,src/net_processing.cpp
ajtowns,2020-09-23 05:00:55,Should replace this test with one that checks we start applying `OVERLOAD_PEER_TX_DELAY` ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493198222,493198222,test/functional/p2p_tx_download.py
sipa,2020-09-23 19:05:24,@ajtowns Feel like writing such a test?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493830506,493830506,test/functional/p2p_tx_download.py
sipa,2020-09-24 00:10:18,"Done, approximately.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493966435,493966435,src/txrequest.h
sipa,2020-09-24 00:10:29,"Changed to ""expiry"".",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493966501,493966501,src/txrequest.h
sipa,2020-09-24 00:10:57,"I was trying to refer to the specific section on the ""first"" marker. Made that more explicit.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493966652,493966652,src/txrequest.h
sipa,2020-09-24 00:11:05,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493966692,493966692,src/txrequest.h
sipa,2020-09-24 00:11:20,Removed. It was a leftover of what turned into the last comment section.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493966778,493966778,src/txrequest.h
sipa,2020-09-24 00:11:26,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493966818,493966818,src/txrequest.h
sipa,2020-09-24 00:11:41,"Done, approximately.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493966899,493966899,src/txrequest.h
sipa,2020-09-24 00:12:19,"Apparently that's not actually a 128-bit type ;)\n\nFixed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493967057,493967057,src/txrequest.h
sipa,2020-09-24 00:18:55,"It's not **exactly** the same, I think. Calling member functions on a `TxRequestTracker` would incur a lookup in the vtable to find the code to execute. The current solution has link-time determined code flow, and only an extra indirection to find the object's storage.\n\nI don't think either is remotely relevant for performance here, and the subclass approach you suggest is probably somewhat li",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493968967,493968967,src/txrequest.h
sipa,2020-09-24 00:19:27,Gone.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493969150,493969150,src/txrequest.h
sipa,2020-09-24 00:21:04,I've added a commit that just reduces MAX_PEER_TX_ANNOUNCEMENTS; 100000 was ridiculous. It can be bypassed using the PF_RELAY permission.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493969647,493969647,src/txrequest.h
sipa,2020-09-24 00:22:26,"With MAX_PEER_TX_ANNOUNCEMENTS reduced, is that still needed?\n\nI'm a bit hesitant about this, as the number of announcements tracked for a peer is somewhat dependent on other peers' behavior.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493970079,493970079,src/net_processing.cpp
sipa,2020-09-24 00:23:02,"Renamed to PostGetRequestableSanityCheck, and updated comment.\n\nIt's not just a consistency check of request times.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493970217,493970217,src/txrequest.h
sipa,2020-09-24 00:23:31,"I haven't paid too much attention to that, but I'm happy to change this if desirable.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493970343,493970343,src/net_processing.cpp
ajtowns,2020-09-24 04:46:23,"Ah, good point! That seems a sufficient reason, so going to mark this as resolved.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494035871,494035871,src/txrequest.h
ajtowns,2020-09-24 05:01:46,"Yeah, sounds good.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494039908,494039908,src/net_processing.cpp
ajtowns,2020-09-24 05:09:51,"Not sure I follow, the only asserts are comparisons between `entry.m_time` and `now` ? Or should I have said ""entry times"" because ""request"" times might only mean REQUESTED entries?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494041957,494041957,src/txrequest.h
sipa,2020-09-24 05:16:04,"m_time is the reqtime for CANDIDATE_*, but expiry for REQUESTED entries.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494043594,494043594,src/txrequest.h
ajtowns,2020-09-24 05:49:32,"Not sure if it's worth adding any explicit justification for picking that number. But for the record, my thinking is: if our peers use the same `INVENTORY_BROADCAST_INTERVAL`, `INVENTORY_BROADCAST_MAX` params as us (and assuming they also halve the interval when they consider us an outbound, ie when we consider them an inbound), then 5000 is about 16 minutes worth of INVs for our outbounds, and 5 ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494053379,494053379,src/net_processing.cpp
jnewbery,2020-09-24 11:36:53,"Yes, I think this would be an improvement for encapsulation and for being explicit about when the TxRequestManager is constructed/destructed. It's my understanding that global static objects can be constructed before main() or later.\n\nThere isn't any requirement to wait for `mapNodeState` to move to `PeerManager`.\n\nI have a branch that moves TxRequestTracker and RequestTx() to be members o",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494242666,494242666,src/net_processing.cpp
jnewbery,2020-09-24 12:00:49,"Consider using the `default` syntax to indicate that you only included this in the cpp file so the `m_impl` unique ptr can be destructed:\n\n```suggestion\nTxRequestTracker::~TxRequestTracker() = default;\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494257310,494257310,src/txrequest.cpp
jnewbery,2020-09-24 13:38:39,"It looks like this is only in the header so that the unit and fuzz tests can call `GetPriorityComputer()` and get the computer, and the only reason they do that is so they can call `PriorityComputer::operator()()`.\n\nCould you move all this to the implementation file, and add a public method `ComputePriority` to by used by the tests that calculates the priority internally and returns it?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494323998,494323998,src/txrequest.h
jnewbery,2020-09-24 14:06:12,"Consider using an initializer list here instead of setting `m_impl` in the ctor function body.\n\nIf you did that, you could make `m_impl` const, which is fine since you've deleted the move constructor and assignment.\n\n`const unique_ptr` communicates that _this_ `m_impl` is always the object that `TxRequestTracker` owns. See Herb Sutter's Leak-Freedom talk at https://youtu.be/JfmTagWcqoE?t=5",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494348645,494348645,src/txrequest.cpp
instagibbs,2020-09-24 16:55:02,"`Deleted`(past tense) is a bit weird since it's actually deleting the peer.\n\nAt a risk of making it too verbose via self-documenting:\n`DeletePeerEntries`?\n\nAlternatively we can name it like some of the other functions e.g. `ReceivedInv` et. al:\n`DisconnectedPeer` describing when it's to be called and leaving the first sentence in the comment.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494469813,494469813,src/txrequest.h
instagibbs,2020-09-24 16:58:35,"```suggestion\n     * whatever reason we no longer care about it. Only the hash field of gtxid is used.\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494471997,494471997,src/txrequest.h
instagibbs,2020-09-24 17:01:38,"Maybe talk about what it's used for instead of what it's not, or just change the interface to make it clear.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494473828,494473828,src/txrequest.h
instagibbs,2020-09-24 17:08:07,"`COMPLETED` sounds more like `FAILED`.\n\n`COMPLETED` is also hit when the transaction is received properly, no?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494477588,494477588,src/txrequest.h
instagibbs,2020-09-24 17:20:59,"```suggestion\n    std::vector<GenTxid> ExpireReqestedAndGetRequestable(uint64_t peer, std::chrono::microseconds now);\n```\n\nto make it less reliant on comments for intent",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494485317,494485317,src/txrequest.h
instagibbs,2020-09-24 17:26:07,"Wouldn't hurt to make this block not publicly callable somehow.\n\nJust an idea in case it's not crazy: https://stackoverflow.com/a/23267346",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494488392,494488392,src/txrequest.h
instagibbs,2020-09-24 17:32:00,tangentially-related nit: Comments above function are getting pretty stale.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494491883,494491883,src/net_processing.cpp
sipa,2020-09-24 17:33:49,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494492919,494492919,src/net_processing.cpp
sipa,2020-09-24 17:34:03,Of course! Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494493059,494493059,src/txrequest.cpp
sipa,2020-09-24 17:34:13,"Nice, done.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494493201,494493201,src/txrequest.h
sipa,2020-09-24 17:34:23,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494493318,494493318,src/txrequest.cpp
instagibbs,2020-09-24 17:37:26,The witness-ness of GenTxid doesn't matter. I find the interface distracting since it needs to be passed in.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494495109,494495109,src/net_processing.cpp
jnewbery,2020-09-24 17:53:13,"I'd prefer to move these into a friend `TxRequestTrackerTester` class (I thought I'd left a review comment suggesting that, but I appear to have lost it).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494504239,494504239,src/txrequest.h
sipa,2020-09-24 18:11:16,"Ah, my thinking behind the name was the caller informing TxRequestTracker ""Hey I have deleted peer X, you may want to forget about them"".\n\nDisconnectedPeer sounds better.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494514532,494514532,src/txrequest.h
sipa,2020-09-24 18:12:52,I'm not sure what you're suggesting here. FAILED seems like a bad name as it indeed doesn't imply failure.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494515427,494515427,src/txrequest.h
sipa,2020-09-24 18:16:36,"I'm not entirely sure, as the caller really doesn't care about the fact that it also expires things. It just wants to know what should be requested.\n\nIt's not an implementation detail, as the effect of expiration is observable (CountInFlight, CountTracked() and Size() go  down), but I think that makes just specification details rather than the caller's intent.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494517514,494517514,src/txrequest.h
sipa,2020-09-24 18:17:09,@jnewbery How do you suggest to do that in combination with the impl pattern?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494517808,494517808,src/txrequest.h
instagibbs,2020-09-24 18:22:20,"apologies I wrote my comment in two frame of minds. I mean to say the comment doesn't mention ""success"" as a possibility to transition to this state. Update the comment and I'm happy.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494520862,494520862,src/txrequest.h
sipa,2020-09-24 18:53:08,"My hope here was that making TxRequestTracker deal solely with GenTxids would simplify the interface. The caller just has these gtxids that it hands to TxRequestTracker, and gets gtxids back. The idea was that the knowledge about when the is_wtxid flag mattered in certain contexts could be restricted to TxRequestTracker. I don't this idea really works. This optimization (in ""Expedite removal"") spe",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494541577,494541577,src/net_processing.cpp
jnewbery,2020-09-24 21:15:15,"Hmmm yes, very good question! I wonder if something along the lines of https://stackoverflow.com/a/34054983/933705 might work (but then again, it might not be worth it just to avoid putting these three test helper functions in the public interface).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494614814,494614814,src/txrequest.h
sipa,2020-09-24 23:43:50,Renamed to `DisconnectedPeer`.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494669129,494669129,src/txrequest.h
sipa,2020-09-24 23:44:13,Changed the interface to take just a uint256.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494669252,494669252,src/txrequest.h
sipa,2020-09-24 23:44:24,Done. Better?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494669300,494669300,src/txrequest.h
sipa,2020-09-24 23:46:29,I think it's not unreasonable to have sanity checking functions for involved data structures in code that actually deals with that data structure. It could possibly be called at runtime using something something similar to `-checkmempool` too if we wanted.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494669912,494669912,src/txrequest.h
sipa,2020-09-24 23:46:38,Updated.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494669962,494669962,src/net_processing.cpp
sipa,2020-09-24 23:50:16,"Ok, I've looked into this more, and I believe the code looks a lot better with `ForgetTxHash` that just takes a uint256. This means the caller needs to understand the semantics for when calling with a txid/wtxid is fine, but that was the case already - just less obviously so. So I've switched the code to that.\n\nI've also removed the ""if (txid != wtxid) ForgetTx(wtxid);"" optimization. I think i",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494671048,494671048,src/net_processing.cpp
instagibbs,2020-09-25 00:56:04,"yes, thank you",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494688751,494688751,src/txrequest.h
ajtowns,2020-09-25 03:23:47,"Maybe ""chose the first (non-overloaded) peer to have announced the transaction (managed by the ""first"" marker, see below)"" would be a better description -- ie focus on the aim, rather than the mechanism?\n\nMight make sense to follow the ""Rationale: in non-attack scenarios..."" with ""This is implemented via using a ""first"" marker, with the following rules:"" rather than having those rules be in a ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494725595,494725595,src/txrequest.h
ajtowns,2020-09-25 03:26:09,"""avoiding influenceable"" doesn't make sense?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494726175,494726175,src/txrequest.h
ajtowns,2020-09-25 06:11:25,"Since `Impl` is now only defined in the `cpp` file, I think you can reasonably move `State` and the like outside of the class, ideally sticking it in an anonymous namespace so the internal class methods get internal linkage. Main benefit would be that it's easier to see what the actual data being put in `Impl` is, I think.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494767822,494767822,src/txrequest.cpp
jnewbery,2020-09-25 06:17:04,I agree. That seems reasonable.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494769750,494769750,src/txrequest.h
ajtowns,2020-09-25 06:22:40,"This isn't templated, so `typename` isn't needed, I think? Making an alias for the iterators in general might be useful: `template<typename Tag> using IndexIter = typename Index::index<Tag>::type::iterator;` and `void PromoteCandidateReady(IndexIter<ByTxHash> it)`?\n",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494771653,494771653,src/txrequest.cpp
ajtowns,2020-09-25 07:28:07,"The comments in txrequest.h are great. I feel like txrequest.cpp could use more though -- there's no real overview of how the optimised data structures are laid out though, and what the deeper invariants are. Maybe it would make sense to use the `SanityCheck` functions as a way of documenting them? Many of the comments are already there and sufficient, but maybe make it the first function in the c",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494799280,494799280,src/txrequest.cpp
ajtowns,2020-09-25 07:36:52,`for (const Entry& entry : m_index) {    Counts& counts = table[entry.m_txhash];` ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494803585,494803585,src/txrequest.cpp
ajtowns,2020-09-25 08:09:20,"`= (1 << 1)` ? Maybe I'm dumb but it took me a bit to realise these are getting or'ed together. Seems slightly weird to have `m_per_txhash : 2` instead of `m_last_preferred : 1` and `m_last_nonpreferred : 1` (""If you ain't first, you're last"" - Ricky Bobby), but I guess it simplifies the code that updates these values enough to make sense.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494820447,494820447,src/txrequest.cpp
ajtowns,2020-09-25 08:38:42,"Might make sense to drop this method and move the logic directly into `EntryTxHashExtractor`. If done that way, then can move the `PriorityComputer` definition after `Entry` and move the`Entry::ComputePriority` logic into a `PriorityComputer::ComputePriority(const Entry&) const` method (changing the `entry.ComputePriority(computer)` calls to `computer.ComputePriority(entry)` calls). That pretty mu",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494836609,494836609,src/txrequest.cpp
ajtowns,2020-09-25 09:40:09,"`(txid,peer)`",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r494871473,494871473,src/txrequest.cpp
sipa,2020-09-25 22:56:42,I added some rationale.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495299330,495299330,src/net_processing.cpp
sipa,2020-09-25 22:57:46,"I've merged the ""first"" marker section into this bulletpoint, and incorporated your suggested text.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495299926,495299926,src/txrequest.h
sipa,2020-09-25 22:58:20,It are English perfect.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495300276,495300276,src/txrequest.h
sipa,2020-09-25 22:58:53,I like that. Moved all the type definitions out of `::Impl`.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495300611,495300611,src/txrequest.cpp
sipa,2020-09-25 22:59:40,"I'm pretty sure it was needed at some point.\n\nI've added an Iter<Tag> type alias as suggested (outside of `Impl`, yay).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495301113,495301113,src/txrequest.cpp
sipa,2020-09-25 22:59:59,I haven't addressed this yet.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495301338,495301338,src/txrequest.cpp
sipa,2020-09-25 23:00:22,I've changed it to `c` for Counts objects and `e` for Entry objects.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495301559,495301559,src/txrequest.cpp
sipa,2020-09-25 23:00:56,At some point I had more flags than 2. I've changed it to two bools now (this makes the SanityCheck code for it a lot more readable in particular).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495301867,495301867,src/txrequest.cpp
sipa,2020-09-25 23:01:51,"Yep, done. To match the ""functor"" concept I'm overloading `operator()` instead of having a `ComputePriority` function.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495302373,495302373,src/txrequest.cpp
sipa,2020-09-25 23:02:08,"`(txhash,peer)` actually, fixed in many places.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495302543,495302543,src/txrequest.cpp
ajtowns,2020-09-26 04:55:48,They is now anyhoo,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495415363,495415363,src/txrequest.h
ajtowns,2020-09-26 04:58:34,Similar change would be good for the `peerinfo` reconstruction; it has `auto& entry =` for a `PeerInfo`.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495415539,495415539,src/txrequest.cpp
ajtowns,2020-09-26 05:00:26,Rationale looks fine to me :+1:,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495415682,495415682,src/net_processing.cpp
ajtowns,2020-09-26 05:17:58,"""The ""first"" marker is given to announcements for which at the time they are received:"" -> ""given to announcements at the time they are received, provided:"" might be clearer?\n\n""(within the class of preferred or non-preferred announcements)"" -- everywhere else refers to preferred peers, not announcements. Might make sense to explicitly clarify that a peer may switch its preferred status at any ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495416992,495416992,src/txrequest.h
sipa,2020-09-27 07:41:43,"Done, and addressed the ""preferredness"" being changeable in the first section.\n\nYou're right that fuzzer tests this, but isn't reachable through the current net_processing layer.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495541641,495541641,src/txrequest.h
sipa,2020-09-27 18:24:22,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495600473,495600473,test/functional/p2p_tx_download.py
ajtowns,2020-09-28 00:51:36,"> I think using `.CountInFlight()` isn't actually the right way to determine being overloaded. If a peer dumps 5000 INVs on us at once, they'll all be inserted at a time when `inflight==0`, and thus all be eligible to get the ""first"" marker, and won't get any delay penalty.\n\nI'm not sure the original behaviour didn't make more sense? If you have a peer that drops 5000 INVs at once, then gets r",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495641913,495641913,src/net_processing.cpp
ajtowns,2020-09-28 01:20:33,"I wonder if it wouldn't make more sense to move the `overloaded` judgement entirely into `ReceivedInv` and instead pass the peer's `MAX_PEER_TX_LOAD` in and have `OVERLOADED_PEER_TX_DELAY` passed in when constructing`m_txrequest`. So `ReceivedInv` would then do `if (CountLoad(peer) > max_load) { first = false; reqtime += m_overloaded_delay; }`.\n\nThe reason I say that is I think the ""first"" mar",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495646456,495646456,src/net_processing.cpp
sipa,2020-09-28 02:44:36,"The reason I don't like using just in-flight is that it has this strong dependency on local ordering of events.\n\nIf you receive 100 INVs, then do a round of `SendMessages`, and request them, followed by 4900 of them, they get punished (no `first`, penalty `OVERLOADED_PEER_TX_DELAY`).\n\nIf you receive 100 INVs, then 4900 INVs, and then do a round of `SendMessages`, they don't get punished.\",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495662860,495662860,src/net_processing.cpp
sipa,2020-09-28 02:47:43,"I did this at first, but I like the current approach a lot more. It leaves the actual policy decisions inside net_processing, without needing configuration flags etc. in the txrequest interface.\n\nNot a very strong opinion, but I like the fact that txrequest is mostly the data structure, and its responsibility is consistency and efficiency - not policy parameters. There are currently a lot of f",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495663507,495663507,src/net_processing.cpp
ajtowns,2020-09-28 05:14:09,"> Only minimally, but I think we are. There are plenty of spy peers that do weird things, and if they announce abundantly, they can interfere somewhat with ordering of dependent transactions (after the first request, they go out randomly, so parents and children may go to different peers, and the parent may arrive first).\n\n> Judging by actual numbers, having 100 candidates simultaneously for a",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495692754,495692754,src/net_processing.cpp
ajtowns,2020-09-28 08:46:53,"> There are currently a lot of future improvements that can be made without changing txrequest - and that due to the nature of its current interface are already covered by fuzz testing.\n\nKind-of? I would have said the fuzz testing only really tests the optimisations work; it doesn't really check that the basic implementation makes ""sense""?\n\neg, we could check the ""don't request dependent t",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r495781805,495781805,src/net_processing.cpp
sipa,2020-09-28 22:08:16,"That's a pretty convincing argument.\n\nIf we assume that getting the ""overloaded"" treatment is relevant at all, it seems worse that an attacker can cause it to occur in ""third party"" connections than possibly missing out on getting that effect himself.\n\nI also don't see how a large at-once dump can be at all exploited. It means an attacker needs an excessive amount of transactions to begin ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496263583,496263583,src/net_processing.cpp
sipa,2020-09-29 01:02:24,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496315814,496315814,src/net_processing.cpp
sipa,2020-09-29 01:18:17,"> Kind-of? I would have said the fuzz testing only really tests the optimisations work; it doesn't really check that the basic implementation makes ""sense""?\n\nYeah, kind of.\n\nThe fuzz test only verifies consistency of the optimized data structure, and observational equivalence with the naive reimplementation. That naive reimplementation is hopefully close enough to the written specification",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496320026,496320026,src/net_processing.cpp
sipa,2020-09-29 01:29:37,"> Either way, it may make sense for noban or relay permission to override considering a peer to be overloaded?\n\nAlso done.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496323073,496323073,src/net_processing.cpp
ajtowns,2020-09-29 03:44:42,"Yeah, agree with what you wrote. (Well, I was thinking you'd call `ReceivedInv(peer, gtxid, preferred, max_load, current_time)` and pass `max_load=max()` to bypass overloaded, fwiw)\n\nI'm more thinking of the API in terms of what the caller has to do to ensure the txrequest modules behaves ""sensibly"" -- avoids requesting txs out of order, avoiding double requesting a tx, etc. If there's a way t",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496360433,496360433,src/net_processing.cpp
sipa,2020-09-29 04:06:30,"I see what you mean now.\n\nThere is no strict reason why we couldn't have both. There could a class around TxRequestTracker that adds the policy and sanity checking of inputs, which just forwards to the inner TxRequestTracker. That would let the inner part still be tested for consistency, while permitting testing of the higher level construct for higher level ""goal"" properties.\n\nAs the logic in",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496365716,496365716,src/net_processing.cpp
ajtowns,2020-09-29 04:27:58,"Okay, so I've run some stats on this now. Results (for me) after just under 230k calls to `RequestedTx` are:\n\n * in 77.9% of cases, it's requesting the tx from a preferred peer, with no alternative (non-delayed) candidates\n * in 18.2% of cases, it's requesting the tx from a non-preferred peer, with no alternative (n-d) candidates\n * in 1.3% of cases, it's requesting the tx from a preferred",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496379595,496379595,src/txrequest.h
ajtowns,2020-09-29 04:33:50,"Yeah. I don't think a wrapper would really be an improvement on documenting the expectations, and agree that sticking fixed params in txrequest is really too restrictive. Going to mark this thread as resolved, but still continue thinking about it.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496383496,496383496,src/net_processing.cpp
ajtowns,2020-09-29 05:12:04,"Not 100% on topic for this PR I guess, but `if (!gtixd.m_is_wtxid && g_wtxid_relay_peers > 0)` perhaps? That was we delay requesting a parent by txid when handing orphans in case we might have already been requesting the parent by wtxid from some peer (even this one if they were announced/requested/replied out of order for some reason).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496410646,496410646,src/net_processing.cpp
sipa,2020-09-29 06:44:38,"That's great data, and perhaps not very surprising: we'd hope to pick good peers as outbounds, so most announcements will come in from preferred peers (and even more within the first 2s after the first announcement from inbound connections). As we fetch immediately from preferred connections in general, the ""first"" marker shouldn't do much.\n\nGiven that information, perhaps I wouldn't have adde",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496453269,496453269,src/txrequest.h
ajtowns,2020-09-29 07:54:15,"I think all those cases would just change the distribution between the cases where the ""first"" marker doesn't matter -- ie they're entirely determined by reqtime and preferredness.\n\nI do think it might improve robustness *somewhere* though...\n\nAlso, if, in the future, we changed the code to either update current_time less, or to target specific reqtimes (""anything between t=0.0 and t=0.499",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r496491011,496491011,src/txrequest.h
sipa,2020-09-29 19:43:27,"Good point; I think was overlooked in #19569.\n\nFixed in a separate commit.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497000115,497000115,src/net_processing.cpp
sipa,2020-09-29 23:15:03,Done. Also included some more comments from your branch linked above.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497128048,497128048,src/txrequest.cpp
ajtowns,2020-09-29 23:53:08,"Ok, updated stats based on 257k `RequestedTx` calls with wtxidrelay disabled (added a `false &&` to the if's in net_processing)\n\nI'm seeing 98.04% of requests being trivial cases -- there's no alternatives that have hit reqtime, and this is the first request of a tx. Despite having lots of (up to ~50?) inbounds, it's still choosing outbounds for almost all txs.\n\nPreferredness only mattered",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497155136,497155136,src/txrequest.h
ajtowns,2020-09-30 03:31:22,"Am currently running a test to see if removing ""first"" markers has a noticable effect on orphans (or anything else), but my current feeling is that the benefits of ""first"" markers don't justify the complexity. I've had a quick go at pulling the feature out into its own commit at https://github.com/ajtowns/bitcoin/commits/202009-txoverhaul-sep-first to see how much complexity that is, fwiw.\n\nI ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497222956,497222956,src/txrequest.h
jnewbery,2020-09-30 13:42:59,Unmatched `)` parse error,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497519563,497519563,src/txrequest.h
jnewbery,2020-09-30 14:32:45,"Maybe personal preference, but I *really* don't like the invblock terminology (for this reason: https://github.com/bitcoin/bitcoin/pull/19988#discussion_r493163586) and would prefer not to introduce it to the Bitcoin Core codebase.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497558883,497558883,src/txrequest.h
jnewbery,2020-09-30 14:35:43,"I think this depends on your definition of progress? If all of your peers are announcing but not relaying transactions, then it doesn't matter how many times you request the tx, you're never making progress.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497561110,497561110,src/txrequest.h
jnewbery,2020-09-30 14:36:28,change 'net_processing' to 'caller',https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497561680,497561680,src/txrequest.h
jnewbery,2020-09-30 14:40:56,"remove ""(outbound, whitelisted)"". The caller chooses which peers are preferred, so it's best to avoid what we expect the caller to do here.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497565261,497565261,src/txrequest.h
jnewbery,2020-09-30 14:45:49,"Perhaps reword this to be singular i.e. ""..marker is given to an announcement at the time it is received ... The peer that announced it was not overloaded.""\n\nCurrently your mixing plural (""announcements"") with singular (""its txhash"", ""the same txhash"")",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497569242,497569242,src/txrequest.h
jnewbery,2020-09-30 15:57:23,"""when backwards"" -> ""went backwards""?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497623013,497623013,src/txrequest.cpp
jnewbery,2020-09-30 16:36:48,"Perhaps comment that this is only used in sanity testing, or even better remove it entirely and move the logic into `TxRequestTracker::Impl::SanityCheck()` (since it's only called in one place).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497649495,497649495,src/txrequest.cpp
jnewbery,2020-09-30 16:37:23,"Consider moving this logic into `SanityCheck()`, since it's only called in one place.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497649827,497649827,src/txrequest.cpp
jnewbery,2020-09-30 16:58:03,"What's the thinking behind having this logic in a separate function, rather than contained in `SanityCheck()`? It's only called in one place.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497662929,497662929,src/txrequest.cpp
jnewbery,2020-09-30 17:57:50,"Actually, I think just a comment saying that his is just used for sanity checking is sufficient.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497699166,497699166,src/txrequest.cpp
jnewbery,2020-09-30 17:58:16,"Marking as resolved. AJ asked you to separate this, and I don't have a strong opionion.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497699422,497699422,src/txrequest.cpp
jnewbery,2020-09-30 17:58:22,"Marking as resolved. AJ asked you to separate this, and I don't have a strong opionion.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497699475,497699475,src/txrequest.cpp
sipa,2020-09-30 19:25:11,"""progress towards forgetting a transaction"" is unambiguous I think? Every minute one peer is crossed off the list of candidates, so eventually you will run out. Note that this section isn't about successfully receiving the transaction, but bounding memory usage.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497747371,497747371,src/txrequest.h
sipa,2020-09-30 19:35:06,"Actually, thinking more about this, it isn't exactly true, because for non-preferred connections we should assume the attacker can disconnect and reconnect, giving them a new opportunity. I think this should be restated as: an attacker can force us to keep a transaction in memory (even in the queues of honest peers) for as long as they can prevent us from receiving the transaction. That's not nece",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497752786,497752786,src/txrequest.h
sipa,2020-09-30 20:31:06,"Done, I've changed this PR to drop the ""first"" marker logic, based on your branch + adjusting fuzz tester and some extra comments. The commit to add it back is here: https://github.com/sipa/bitcoin/commits/202009_txrequest_rand_wtxid_first",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497782110,497782110,src/txrequest.h
sipa,2020-09-30 20:31:31,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497782343,497782343,src/txrequest.h
sipa,2020-09-30 20:31:48,"I've replaced it with ""transaction censorship attacks"".",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497782492,497782492,src/txrequest.h
sipa,2020-09-30 20:32:22,"I've adjusted the comments, merging this paragraph into the previous one (they were already kind of circularly referring to each other). Also changed the formula for delay to take this potential for reconnection behavior into account.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497782811,497782811,src/txrequest.h
sipa,2020-09-30 20:33:09,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497783237,497783237,src/txrequest.h
sipa,2020-09-30 20:33:17,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497783298,497783298,src/txrequest.h
sipa,2020-09-30 20:33:29,Gone (moved to https://github.com/sipa/bitcoin/commits/202009_txrequest_rand_wtxid_first).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497783405,497783405,src/txrequest.h
sipa,2020-09-30 20:33:36,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497783457,497783457,src/txrequest.cpp
sipa,2020-09-30 20:33:41,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497783508,497783508,src/txrequest.cpp
ariard,2020-09-30 23:42:00,"You can add ""pushback mechanisms (OVERLOADED_PEER_TX_DELAY)"".\n\nA future improvement of pushback mechanism could be to scale it up by the number of times of MAX_PEER_TX_IN_FLIGHT is reached, like `m_txrequest.CountInFlightMagnitude(nodeid, MAX_PEER_TX_IN_FLIGHT)` ? Thus delaying further and further a likely-malicious peer.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497859597,497859597,src/net_processing.cpp
ariard,2020-09-30 23:47:31,I think this delay applies to non-preferred peers which is strictly a different set than inbound ones as some of them might be PF_NOBAN==true. Variable name can be updated to reflect this.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497861187,497861187,src/net_processing.cpp
ariard,2020-09-30 23:55:42,"It's documented in TxRequestTracker specification but I think you could recall that a preferred, txid-relay peer will be always favored on a non-preferred, wtxid-relay one. So it doesn't matter that all delay penalties are actually 2 seconds. They order peers inside a class, not across ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497863468,497863468,src/net_processing.cpp
ariard,2020-10-01 00:32:11,Why not pass `current_time` only for false-branch of ternary ? Entry should be promoted to {READY/BEST} in `SetTimePoint` anyway.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497879370,497879370,src/net_processing.cpp
ariard,2020-10-01 00:36:58,"Have you considered moving `m_txrequest` under it's own lock as it's a well-contained, new data structure ? a) useless as we already take `cs_main` independently in all code paths reaching `m_txrequest` or b) too much work and this PR is already complex enough?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497882360,497882360,src/net_processing.cpp
ariard,2020-10-01 00:41:22,"I think this comment isn't clear with other comments spread elsewhere like ""Lower priorities are selected first"". ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497885320,497885320,src/txrequest.cpp
ariard,2020-10-01 00:45:04,to convert to CANDIDATE_BEST?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497887645,497887645,src/txrequest.cpp
ariard,2020-10-01 00:48:20,Is there a caveat here if the same transaction is announced concurrently by txid and wtxid ? You may have a download collision due to transaction identifier ambiguity.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497889661,497889661,src/txrequest.h
ariard,2020-10-01 00:50:34,"I find this confusing. Is ""Announcements"" denoting all Entry under the same txhash or a given (peer/txhash) Entry. In the former, a peer going offline shouldn't carry deletion of other different-peer/same-txhash Entries.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497891117,497891117,src/txrequest.h
ariard,2020-10-01 00:52:36,"At least one _what_ ? An attacker controlled-peer, a non-buggy honest preferred connection?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497892403,497892403,src/txrequest.h
ariard,2020-10-01 01:01:37,"How does entry uniqueness is enforced w.r.t to wtxid/txid ? For segwit txn, the ByPeer can't dissociate between a txid and wtxid announcement, it's different hash ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497898269,497898269,src/txrequest.h
sipa,2020-10-01 02:06:31,"> You can add ""pushback mechanisms (OVERLOADED_PEER_TX_DELAY)"".\n\nDone.\n\n> A future improvement of pushback mechanism could be to scale it up by the number of times of MAX_PEER_TX_IN_FLIGHT is reached, like m_txrequest.CountInFlightMagnitude(nodeid, MAX_PEER_TX_IN_FLIGHT) ? Thus delaying further and further a likely-malicious peer.\n\nYes, there are a number of possibilities there.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497939185,497939185,src/net_processing.cpp
sipa,2020-10-01 02:11:33,"> It's documented in TxRequestTracker specification but I think you could recall that a preferred, txid-relay peer will be always favored on a non-preferred, wtxid-relay one.\n\nI'd rather not duplicate the explanations; it'll just risk things becoming inconsistent and confusing.\n\n> So it doesn't matter that all delay penalties are actually 2 seconds. They order peers inside a class, not acr",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497942461,497942461,src/net_processing.cpp
sipa,2020-10-01 02:11:52,"Agree, the current code is just unnecessarily complicated. Fixed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497942638,497942638,src/net_processing.cpp
sipa,2020-10-01 02:13:10,"I don't think there is a benefit to giving it a separate lock. There may be one at some point, but probably together with the majority of net_processing moving from cs_main to its own lock(s). At this point, cs_main is already held anyway.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497943426,497943426,src/net_processing.cpp
sipa,2020-10-01 02:13:36,"I've removed it, preferredness is explained much better in the .h file now then when this comment was added.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497943680,497943680,src/txrequest.cpp
sipa,2020-10-01 02:13:43,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497943760,497943760,src/txrequest.cpp
sipa,2020-10-01 02:17:16,"As far as txrequest is converned, transactions are identified by its txhash. If there is both a txid and wtxid announcement for the same transaction (and the wtxid differs from the txid), it'll be treated as two transactions, and they could be fetched both. That is exactly the reason why an extra delay for txid announcements was introduced (prior to this PR), to avoid downloading the same thing tw",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497946020,497946020,src/txrequest.h
sipa,2020-10-01 02:19:04,"This is the specification, there is no concept of Entry here.\n\nEarlier in the file it says that a txhash/peer combination is called an announcement, so I don't think this is ambiguous.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497947120,497947120,src/txrequest.h
sipa,2020-10-01 02:19:24,"I've clarified this, I think.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497947359,497947359,src/txrequest.h
sipa,2020-10-01 02:20:27,"I think that's explained exactly in this paragraph? ""if one already exists for that (txhash, peer) combination"". Uniqueness is on that combination.\n\nIf the txhash is the same, it's the same. If they're not, they're not.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497948043,497948043,src/txrequest.h
ajtowns,2020-10-01 04:28:17,"(replying to resolved thread without marking it unresolved)\n\nWith ""first"" marker disabled (essentially treating every peer as oveloaded), I got:\n\n```\n 324484 ABCD  requested  preferred=1  first=0  candidates=[-,-]  completed=[-,-] -- 81.7%\n  61457 ABCD  requested  preferred=0  first=0  candidates=[-,-]  completed=[-,-] -- 15.5%\n    599 ABCD  requested  preferred=0  first=0  candidate",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497976995,497976995,src/txrequest.h
ajtowns,2020-10-01 05:00:14,"With this change, if time goes slightly backwards due to a non-monotonic clock, a later announcement may get requested first, even when no delay is intended:\n\n * t=1.000  peer=1 preferred=1 txid=X --> ReceivedInv --> reqtime=1.000 state=CANDIDATE_DELAYED\n * t=0.997  GetRequestable(peer=1) --> (no change)\n * t=0.998  peer=2 preferred=1 txid=X --> ReceivedInv --> reqtime=0.999 state=CANDIDAT",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r497984375,497984375,src/net_processing.cpp
glozow,2020-10-01 11:30:56,Question: why wasn't `entry.IsSelectable()` used instead?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498173969,498173969,src/txrequest.cpp
glozow,2020-10-01 15:41:32,"I interpret this comment to mean that `ForgetTxHash` i.e. the `TxRequestTracker` is responsible for deleting the transaction by txid and wtxid, but I don't think this is the case... that's `PeerManager`'s job right?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498342921,498342921,src/txrequest.h
sipa,2020-10-01 16:44:13,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498381797,498381797,src/net_processing.cpp
sipa,2020-10-01 17:17:43,"Yes, that was the original reasoning, but I'm not sure clocks going backward is worth extra complexity (it should do something sane, and be tested, but it should be sufficiently rare that the actual behavior doesn't matter too much).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498400043,498400043,src/net_processing.cpp
glozow,2020-10-01 17:31:38,"In https://github.com/bitcoin/bitcoin/pull/19988/commits/987b27176e41f38b997f7b732f087a518fa678ca\n\nPlease forgive me but I just want to make sure I'm understanding this commit correctly... we want to add a delay for transactions by txid just in case we're able to get it by wtxid from another peer. But when we get an orphan, we only have the txid of the missing parent.\n-Using the logic of pee",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498407749,498407749,src/net_processing.cpp
sipa,2020-10-01 17:57:53,"That would also compute the priority for entries in the CANDIDATE_BEST state. That would be harmless as it wouldn't change behavior, but the computation of priority isn't exactly free either, so better avoid it when not needed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498422091,498422091,src/txrequest.cpp
sipa,2020-10-01 18:07:32,"`TxRequestTracker` is a data structure that manages the set of announced txids/wtxids for all peers, exposes ways to alter that set, and answers queries about it. Its responsibility is maintaining the consistency of that data structure, and doing as it's told; it isn't responsible for deciding what mutations to make and when; that's net_processing's job.\n\nThis function is the mutator that remo",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498427113,498427113,src/txrequest.h
sipa,2020-10-01 18:24:30,"Imagine we have multiple announcements for the same witness transaction, and all peers have different witnesses for it. So the transaction will be known by one txid, but multiple distinct wtxids. We don't know that these are all for the same transaction, as all the (non-txid) requests have different hashes.\n\nNo matter who we ask, or what we receive, we'll always be able to delete all txid-base",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498435998,498435998,src/net_processing.cpp
ariard,2020-10-02 00:09:03,"Okay so the only download duplication we may have is if any preferred, wtxid-relay peers is really slow, requiring from a txid-relay peer and receiving both. Really a edge case once the network is sufficiently upgraded I guess.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498569001,498569001,src/txrequest.h
ariard,2020-10-02 00:12:37,"I think I hurted on ""Note that this means a second INV with the same txhash from the same peer will be ignored, even if one is a txid and the other is wtxid"". I interpreted it ""As if first is txid, does nothing even if a second announcement is wtxid"". That's my English here, nevermind.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498569749,498569749,src/txrequest.h
sipa,2020-10-02 00:18:25,"Just so we're on the same page. The scenario is:\n* Peer P announces txid H\n* Peer P announces wtxid H\n\nIn this case, the second announcement is ignored, because one already exists for peer/txhash combination (P, H). This is harmless for two reasons:\n* The txid and wtxid being identical implies it's a non-segwit transaction, so it doesn't matter how we fetch.\n* BIP339 prescribes that al",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498570981,498570981,src/txrequest.h
sipa,2020-10-02 00:27:38,"I don't expect it to be super rare, but the risk of double fetching during rollout is inherent to BIP339 (and exists in the same form in current master, so I don't think it's significantly affected by this PR).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498572854,498572854,src/txrequest.h
sipa,2020-10-02 00:39:39,I've elaborated this a bit. Is it clearer now?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498575252,498575252,src/txrequest.h
sipa,2020-10-02 00:39:53,Added a note about this.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498575310,498575310,src/txrequest.h
sipa,2020-10-02 00:40:17,I've rewritten the comment.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498575373,498575373,src/txrequest.h
MarcoFalke,2020-10-02 06:55:31,"```suggestion\nstatic constexpr std::chrono::seconds NONPREF_PEER_TX_DELAY{2};\n```\n\nThis can be written shorter, as the compiler will do the chrono conversion for you\n\n(Same below)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498644419,498644419,src/net_processing.cpp
jnewbery,2020-10-02 08:58:53,"`==()` doesn't need to be a friend, since it's not accessing any private/protected members:\n\n```diff\ndiff --git a/src/txrequest.cpp b/src/txrequest.cpp\nindex bef3460dd6..b7347d8d34 100644\n--- a/src/txrequest.cpp\n+++ b/src/txrequest.cpp\n@@ -206,14 +206,15 @@ struct PeerInfo {\n     size_t m_completed = 0; //!< Number of COMPLETED entries for this peer.\n     size_t m_requested = 0; ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498699913,498699913,src/txrequest.cpp
jnewbery,2020-10-02 09:15:18,"This is really just a stylistic thing, but is there a reason to make any members of an impl class private? By definition it doesn't have an exposed interface, so theoretically everything could just be public. The first two examples at https://en.cppreference.com/w/cpp/language/pimpl are actually declared as `struct`s (although the third example does have a private data member)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498708036,498708036,src/txrequest.cpp
jnewbery,2020-10-02 09:29:12,"Is there a reason not to use `NodeId` throughout instead of `uint64_t`? It seems to me that `NodeId` would be more consistent with net/net_processing, and more readable in function signatures/returns types/typedefs.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498714760,498714760,src/txrequest.cpp
jnewbery,2020-10-02 09:38:19,s/takes it/takes its/,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498718932,498718932,src/txrequest.h
jnewbery,2020-10-02 09:47:07,s/AlreadyHave/ForgetTxHash/,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498723043,498723043,src/txrequest.cpp
jnewbery,2020-10-02 09:51:30,Delete all this. It's no longer needed now that there's no 'first' marker.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498725131,498725131,src/txrequest.cpp
jnewbery,2020-10-02 09:57:24,Delete,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498727923,498727923,src/txrequest.cpp
jnewbery,2020-10-02 10:06:56,s/ForgetTx/ForgetTxHash/,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498732054,498732054,src/txrequest.h
jnewbery,2020-10-02 10:12:29,"Possible changes to this interface:\n\n1. Change the `GenTxid` argument to `uint256`. The function doesn't make any distinction between txids and wtxids, so why make it part of the interface?\n2. Pass a `const std::vector<uint256>&`, with all txs that have been requested, rather than repeatedly calling the same function with different tx hashes.\n3. Also pass in a `const std::vector<uint256>& ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498734530,498734530,src/txrequest.h
jnewbery,2020-10-02 10:20:00,"_overloaded_ isn't a TxRequestTracker parameter, so I think it's fine just to have the `OVERLOADED_PEER_TX_DELAY` comment in the sub-bullet below",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498737921,498737921,src/net_processing.cpp
jnewbery,2020-10-02 10:20:40,s/announcements from txid peers/txid announcements/ (since requesting an orphan tx from a wtxid peer counts as a txid announcement),https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498738238,498738238,src/net_processing.cpp
jnewbery,2020-10-02 10:30:01,s/How many microseconds/How long/ (commenting that a `std::chrono::microseconds` constant is microseconds is redundant),https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498742352,498742352,src/net_processing.cpp
jnewbery,2020-10-02 10:38:46,Delete all this. No longer needed since you removed the 'first' marker.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498746033,498746033,src/txrequest.cpp
jnewbery,2020-10-02 10:39:49,"I don't understand this comment about catching a non-CANDIDATE_BEST entry automatically. `m_index.get<ByPeer>().count()` will return 0 in that case.\n\nEdit: Ah! I've just seen the comment below. Perhaps update this comment to say ""will be caught by the uniqueness property when we try to emplace the new Entry object"".",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498746475,498746475,src/txrequest.cpp
jnewbery,2020-10-02 10:47:35,"Why not just index by (peer, txhash), and then in `GetRequestable()` just add an `if (it_peer->GetState() == State::CANDIDATE_BEST)` before adding the hash to `selected`? It seems like in all other places (`DisconnectedPeer()`, `ReceivedInv()` and `ReceivedResponse()`), we're actually interested in all the outstanding Entry objects for a given peer.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498749661,498749661,src/txrequest.cpp
jnewbery,2020-10-02 11:09:50,Maybe assert that `it` is not `end()` at the top of this function?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498758268,498758268,src/txrequest.cpp
jnewbery,2020-10-02 11:46:40,"This can be changed to take a hash instead of a GenTxid. The function doesn't do anything with whether it's a txid or wtxid, so it shouldn't be part of the interface.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498772237,498772237,src/txrequest.h
jnewbery,2020-10-02 11:49:18,No point in calling this twice. `ReceivedResponse()` only cares about the hash.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498773268,498773268,src/net_processing.cpp
jnewbery,2020-10-02 11:55:35,"Testing my understanding here: do we ever expect to hit this? I think that every action that causes a tx to become AlreadyHave will also cause us to ForgetTxHash, and we won't add an AlreadyHave tx back into TxRequestTracker. If I'm right, perhaps just add a comment here saying that we don't expect to hit this and it's here for belt-and-suspenders.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498775868,498775868,src/net_processing.cpp
jnewbery,2020-10-02 12:03:50,This `CInv` only needs to be constructed inside the `!AlreadyHaveTx` block. It could even be emplaced directly into `vGetData`.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498779231,498779231,src/net_processing.cpp
jnewbery,2020-10-02 12:09:43,"This function is now on the hot path and is called for every peer on every SendMessages() loop. Have you done any profiling to see how much time we'll spend in here on a normally loaded system? I think all of the lookups in here are O(1) in the size of the index, but is the constant factor important?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498781706,498781706,src/txrequest.cpp
jnewbery,2020-10-02 12:13:56,"If you don't change the `m_peer` to be `NodeId`, consider making a typedef `SeqNo` for the sequence number, so that it's obvious which types are using sequence numbers and which are using peer ids.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498783476,498783476,src/txrequest.cpp
jnewbery,2020-10-02 12:17:02,Is there a reason not to just construct the `GenTxid`s directly into `selected`?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498784855,498784855,src/txrequest.cpp
jnewbery,2020-10-02 12:24:49,"Are ""entry"" and ""announcement"" synonymous? If so, would it make sense to rename `Entry` to `Announcement` and drop the ""entry"" terminology?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498788277,498788277,src/txrequest.cpp
sr-gi,2020-10-02 13:35:26,"Is there any specific flag for this? I guess it is implicitly store in `m_state`, but also alongside any other state the transaction can be at. ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498825108,498825108,src/txrequest.h
sr-gi,2020-10-02 13:35:46,"There is no longer a ""first"" maker for the entires, is there?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498825307,498825307,src/txrequest.cpp
ajtowns,2020-10-02 14:08:35,"Constructing vectors instead of repeatedly calling the function seems worse to me, fwiw, but agree that it would be nice to have a simpler description of the constraint.\n\nMaybe tying it to the return value of `GetRequestable` might be better: ""each value returned by `GetRequestable` may used with either `ForgetTxHash` or `RequestedTx` for the given peer, but not both, and at most only once. An",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498844918,498844918,src/txrequest.h
ajtowns,2020-10-02 14:11:46,That would make `GetRequestable` be `O(nr_announcements)` instead of `O(nr_best)` which I think makes the complexity blow out in worst case scenarios.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498846846,498846846,src/txrequest.cpp
ariard,2020-10-02 14:11:59,"Yes, better!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498846972,498846972,src/txrequest.h
ariard,2020-10-02 14:13:57,Yes clearer.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498848066,498848066,src/txrequest.h
amitiuttarwar,2020-10-02 14:35:01,+1 was wondering the same ,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498860862,498860862,src/txrequest.cpp
ajtowns,2020-10-02 14:41:06,"`m_index.get<ByX>.begin()` should be `O(log_2(n))`, `++it` should be `O(1)`, `.emplace()` should be `O(log_2(n))` with about 3x constant factor overhead, `.modify()` should the same except maybe 6x constant factor overhead. `n` is limited to about 600k, so `log_2(n)` is below about 20. With max peers and max announcements, the entire index could be something like 100MB I think, more if you're remo",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498864365,498864365,src/txrequest.cpp
ajtowns,2020-10-02 14:46:46,"It needs to be sorted by sequence before being returned to ensure txs are requested in order of announcement, and the sequence isn't needed in the return value, so having a temporary vector's sensible, I think. And sorting a vector of 16-byte seq/pointer pairs should be more cache efficient than for 48-byte seq/is_wtxid/uint256 tuples (or 40 bytes if you combined is_wtxid into seq).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498867957,498867957,src/txrequest.cpp
jnewbery,2020-10-02 14:48:38,"Yes, makes sense. Thanks!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498869138,498869138,src/txrequest.cpp
ariard,2020-10-02 15:29:26,If you assume the return 23-bit integers are statically uniform across samples (`RandomTime()`) I don't understand why adding them increase randomness ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498893703,498893703,src/test/txrequest_tests.cpp
ariard,2020-10-02 15:39:50,You may draw a new `starttime` for every new scenario such increasing the space of starting time covered at each `TestInterleavedScenarios` ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498899567,498899567,src/test/txrequest_tests.cpp
sipa,2020-10-02 16:12:03,"Yes, that's exactly the reason.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498916810,498916810,src/txrequest.cpp
sipa,2020-10-02 16:28:19,The only reason not to is avoiding a dependency on net.h.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498925098,498925098,src/txrequest.cpp
ariard,2020-10-02 16:31:43,Does this test check that the non-preferred announcement is requested after expiration of the first one to verify that wtxidness doesn't interfere with promotion of CANDIDATEs left to _BEST ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498926860,498926860,src/test/txrequest_tests.cpp
jnewbery,2020-10-02 16:49:40,You mean in the header file? Could you make the public functions take `int64_t` and use `NodeId` internally in the cpp file (which already includes net.h)?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498935631,498935631,src/txrequest.cpp
ariard,2020-10-02 16:50:55,"What about `m_cur_sequence` to dissociate clearly from the per-Entry `m_sequence` ? Also comment could be clearer that the the request are ordered per-peer, not globally. I had a doubt while reviewing `BuildRequestOrderTest`",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498936239,498936239,src/txrequest.cpp
sipa,2020-10-02 16:51:18,"It may be matter of personal taste.\n\nIn general I think it still makes sense to have non-exposed classes with private/public fields/members. It's not there to prevent external code from messing with the internals, obviously, but it does still kind of define a layer between what is part of the class's representation and what is its (even just internally) exposed interface.\n\nIn this case wit",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498936404,498936404,src/txrequest.cpp
ariard,2020-10-02 16:54:00,Maybe add a config where they're _all_ preferred/non-preferred ? `InsecureRandRange` is really unlikely to return min and max values when you have 7 peers ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498937736,498937736,src/test/txrequest_tests.cpp
sipa,2020-10-02 16:54:44,"I think the observable ""c++ file dependencies"" are only an approximation for what actually matters in terms of code organization: ""conceptual dependencies between modules"". What you're suggesting is just as much a dependency of txrequest on net in my view - just slightly more hidden.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498938083,498938083,src/txrequest.cpp
sipa,2020-10-02 17:00:54,"All of this to say: I'd like to avoid a dependency on net, and am therefore using uint64_t as opaque peer identifier rather than NodeId.\n\nBut if we feel that's not worth the cost, it should be changed to use NodeId everywhere (in both the .h and the .cpp).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498941128,498941128,src/txrequest.cpp
sipa,2020-10-02 17:07:39,"It wouldn't be too hard to just drop the constraint, and instead specify it as:\n* If no announcement with the specified (peer, txhash) exists, or it isn't in CANDIDATE state, the call has no effect.\n* The specified announcement is changed from CANDIDATE to REQUESTED.\n* If another announcement for the same txhash was already in REQUESTED state, it is marked COMPLETED.\n\nIt'd be a bit more ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498944375,498944375,src/txrequest.h
jnewbery,2020-10-02 17:14:22,No strong opinion. Feel free to mark this resolved.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498947675,498947675,src/txrequest.cpp
jnewbery,2020-10-02 17:17:14,"I do feel like we should use the same type to represent node ids in all components. Perhaps the purest way to do it would be to move the `typedef NodeId int64_t` somewhere outside net.h, but that seems a bit overkill.\n\nEven if you don't use `NodeId`, is there a reason that you're using `uint64_t` rather than `int64_t` like everywhere else?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498949058,498949058,src/txrequest.cpp
ariard,2020-10-02 17:17:54,If I understand `NewTxHash` correctly it will return a `uint256` which is guaranteed to respect the priority order of peers for both preferred and non-preferred classes ? And those `NewTxHash` checks are needed as peer identifier is part of siphash message. It's more find a `txhash` rather than a `gtxid` as wtxidness shouldn't interfere with priority. ,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498949341,498949341,src/test/txrequest_tests.cpp
jnewbery,2020-10-02 17:21:07,"Either is fine. I also like @ajtowns's description.\n\nWhichever way we go, I still think the function should be changed to take a txhash - I should have left that as a separate comment.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498950864,498950864,src/txrequest.h
ariard,2020-10-02 17:32:04,"""Decide reqtimes in opposite order of the _expected_ request order which is function of the announcement order and peer preferredness"". Clearer to underscore there are two orders, and you're deliberately tweaking the second one.\n\nMaybe, ""The lowest priority peer will get the soonest reqtime. It will be the to-be-requested-from peer until the time (Scenario.m_now) is jumped above reqtime of nex",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498956144,498956144,src/test/txrequest_tests.cpp
ariard,2020-10-02 17:44:32,"""We pin back current time under checked peer reqtime. We observe it's not the current to-be-requested-from peer.\nWe advance forward current time beyond checked peer reqtime. We observe it's henceforth the new to-be-requested-from peer""",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498961964,498961964,src/test/txrequest_tests.cpp
sipa,2020-10-02 17:45:53,The hash is different in both calls.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498962583,498962583,src/net_processing.cpp
ariard,2020-10-02 17:46:54,"""Observe the to-be-requested peer change for the remaining peer with the highest priority""",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498963087,498963087,src/test/txrequest_tests.cpp
ariard,2020-10-02 17:55:32,"This is just to test that advancing time doesn't change the ""requestability"" of the transaction without a call to `RequestedTx` ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498967076,498967076,src/test/txrequest_tests.cpp
ariard,2020-10-02 18:04:30,"I think advancing time should be a config alternative of its own, otherwise can you dissociate the state transition REQUESTED -> COMPLETED triggered by a `ReceivedResponse/DisconnectPeer` from a `GetRequestable` one ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498971329,498971329,src/test/txrequest_tests.cpp
ariard,2020-10-02 18:07:18,I think using a AND here will get you higher coverage of this case ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498972630,498972630,src/test/txrequest_tests.cpp
ariard,2020-10-02 18:08:28,Isn't advancing the time blurring the further observance that the transaction state has been moved ? Compared to only relying on `DisconnectPeer`/`ForgetTxHash` ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498973098,498973098,src/test/txrequest_tests.cpp
sipa,2020-10-02 18:27:49,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498984068,498984068,src/txrequest.cpp
sipa,2020-10-02 18:29:04,"I've bitten the bullet and converted everything to `NodeId`.\n\nI believe it being a uint64_t dates back to a time when I was trying to squeeze out bits by using less than 64 bits for the peer (and signed bitfields are implementation defined, IIRC). This was a bad idea.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498984686,498984686,src/txrequest.cpp
sipa,2020-10-02 18:29:16,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498984798,498984798,src/txrequest.cpp
sipa,2020-10-02 18:29:25,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498984897,498984897,src/txrequest.h
sipa,2020-10-02 18:29:32,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498984960,498984960,src/txrequest.cpp
sipa,2020-10-02 18:29:39,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985023,498985023,src/txrequest.cpp
sipa,2020-10-02 18:29:45,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985082,498985082,src/txrequest.h
sipa,2020-10-02 18:29:59,Changed to AJ's description.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985227,498985227,src/txrequest.h
sipa,2020-10-02 18:30:11,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985299,498985299,src/net_processing.cpp
sipa,2020-10-02 18:30:18,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985344,498985344,src/net_processing.cpp
sipa,2020-10-02 18:30:24,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985400,498985400,src/net_processing.cpp
sipa,2020-10-02 18:30:32,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985451,498985451,src/txrequest.cpp
sipa,2020-10-02 18:30:45,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985556,498985556,src/txrequest.cpp
sipa,2020-10-02 18:31:00,Done (also for RequestedTx).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985679,498985679,src/txrequest.h
sipa,2020-10-02 18:31:19,Added a comment.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985836,498985836,src/net_processing.cpp
sipa,2020-10-02 18:31:29,Indeed! Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498985911,498985911,src/net_processing.cpp
sipa,2020-10-02 18:31:55,I'll do some benchmarks.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498986149,498986149,src/txrequest.cpp
sipa,2020-10-02 18:32:16,Added a `SequenceNumber` and `Priority` type alias for uint64_t.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498986306,498986306,src/txrequest.cpp
sipa,2020-10-02 18:33:46,"Yeah, the reason is that we want to sort by sequence number, but those aren't included in the output itself, so we need some kind of proxy. It could be a list of (sequence, gtxid) pairs that are sorted, but that would still require an extraction step to convert it to just gtxids. This seems simplest.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498987047,498987047,src/txrequest.cpp
sipa,2020-10-02 18:35:36,"Done, renamed a few things:\n* Entry -> Announcement\n* Entry{TxHash,Peer,Time} -> By{TxHash,Peer,Time}View\n* Entry{TxHash,Peer,Time}Extractor -> By{TxHash,Peer,Time}ViewExtractor\n\nNo more ""entr"" anywhere in txrequest (I did not make the same change in the fuzz test, though).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498987967,498987967,src/txrequest.cpp
sipa,2020-10-02 18:36:25,"State::COMPLETED. That doesn't just cover failure, but there is no observable difference between failed and otherwise completed announcements.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498988308,498988308,src/txrequest.h
sipa,2020-10-02 18:36:35,Gone.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498988383,498988383,src/txrequest.cpp
sipa,2020-10-02 18:44:01,Done (and in a few more places).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r498991644,498991644,src/txrequest.cpp
sipa,2020-10-02 19:38:54,"Here is the patch to make `RequestedTx` fully specified:\n\n```patch\ndiff --git a/src/txrequest.cpp b/src/txrequest.cpp\nindex af4b59755b..581b498180 100644\n--- a/src/txrequest.cpp\n+++ b/src/txrequest.cpp\n@@ -590,11 +590,29 @@ public:\n     void RequestedTx(NodeId peer, const uint256& txhash, std::chrono::microseconds expiry)\n     {\n         auto it = m_index.get<ByPeer>().find(ByP",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499015363,499015363,src/txrequest.h
sipa,2020-10-03 01:39:41,Not sure what you mean here. There are four paths through the cascade of `if`s here and each value of `config >> 3` selects one of them.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499104292,499104292,src/test/txrequest_tests.cpp
sipa,2020-10-03 01:57:14,Turned it into a config bit.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499105668,499105668,src/test/txrequest_tests.cpp
sipa,2020-10-03 01:57:24,Yes.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499105677,499105677,src/test/txrequest_tests.cpp
sipa,2020-10-03 01:57:41,"Yeah, I've added some comments.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499105712,499105712,src/test/txrequest_tests.cpp
sipa,2020-10-03 01:58:05,"Not really, one in 8. Given that every number of peers runs 30 times, I think that's plenty.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499105743,499105743,src/test/txrequest_tests.cpp
sipa,2020-10-03 01:58:57,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499105790,499105790,src/txrequest.cpp
sipa,2020-10-03 02:04:31,The sum of 3 uniformly random values is not uniformly random. I think the sum matches better with the distribution of timestamps that end up being generated during the scenarios (which are also sums of uniformly random values).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499106248,499106248,src/test/txrequest_tests.cpp
sipa,2020-10-03 02:07:16,Some variation in start time was achieved in the Scenario constructor. I've moved it here.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499106453,499106453,src/test/txrequest_tests.cpp
sipa,2020-10-03 02:22:37,Added as an extra commit on top.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499107540,499107540,src/txrequest.h
sipa,2020-10-03 02:23:36,"I assume not, as this test only looks at what is being requested.\n\nCan you write out the actual scenario you have in mind (or even better, write a commit that adds it)?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499107593,499107593,src/test/txrequest_tests.cpp
sipa,2020-10-03 02:23:53,I've changed the comments here a bit.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499107610,499107610,src/test/txrequest_tests.cpp
sipa,2020-10-03 08:15:53,"In a TxRequestTracker with N peers and 5000 (unique) txids each, in a stable state (where `GetRequestable` returns nothing):\n* N=10, around 50 ns per `GetRequestable`.\n* N=20, 60 ns\n* N=50, 80 ns\n* N=100, 90 ns\n* N=200, 180 ns\n* N=500, 230 ns\n* N=1000, 240 ns\n* N=2000, 500 ns.\n* N=20000, 1500 ns.\n\n(these numbers grow much faster than what would be expected from O(log n) growt",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499127674,499127674,src/txrequest.cpp
ajtowns,2020-10-03 08:54:13,"I think that ~without~ following this change all the remaining asserts are redundant internal checks, rather than ""invalid use of API"" ones, which I think is a plus. Also makes perfect sense (in retrospect) that that would then make the fuzz tester a bunch simpler.\n\nI think that means that you can call TxRequestTracker methods with any params and the behaviours well-defined, reasonably logical",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499130027,499130027,src/txrequest.h
sipa,2020-10-03 19:03:27,"Done, switched to the fully-defined version (squashed into the appropriate commits). I added some of @ajtowns's comments, and more.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499173475,499173475,src/txrequest.h
sipa,2020-10-04 09:12:42,"Another benchmark: I tweaked the unit test:\n* Run all tests 12000 times\n* Sanity checks turned off\n* Randomly removed 90% of GetRequestable calls (there is a far from representative number of them otherwise).\n\n... and then timed the actual execution of the queued actions, and while gathering statistics about the number of calls, and the Size() of the data structure:\n* Runtime: 7.38015 ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499223778,499223778,src/txrequest.cpp
jnewbery,2020-10-05 09:17:38,"Yeah, I understood the sorting step, and was just wondering why not create a vector of (seq, gtxid) pairs. As you point out, you'd still need an extraction (copy) step afterwards, so that seems less efficient.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499455683,499455683,src/txrequest.cpp
jnewbery,2020-10-05 09:32:13,"Oops. Confused myself with the gtxid constructors. These are indeed different!\n\nThanks for removing the for loop. Makes it a lot clearer what's going on.\n\nIt would be better if these lines were above the `TxValidationState state;` declaration, but that's maybe unrelated to this PR, since the code you're replacing should also have been above that declaration.\n",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499465538,499465538,src/net_processing.cpp
jnewbery,2020-10-05 09:37:27,"I think we'll also enter this branch if there's an announcement for this peer/txhash that's REQUESTED or COMPLETE. If that's true, I think we should update the comment to ""The txhash was not tracked for this peer or has already been requested from this peer...""",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499468847,499468847,src/txrequest.cpp
jnewbery,2020-10-05 09:37:57,It's still here :),https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499469100,499469100,src/txrequest.cpp
jnewbery,2020-10-05 09:56:08,"These seem like good numbers.\n\nI was going to suggest moving`SetTimePoint()` out of `GetRequestable()` and only calling it once per message handler thread loop (e.g. in a global tasks function like https://github.com/bitcoin/bitcoin/pull/19364/commits/0ea9abf9b4c3694dede390b759df01c1ce0d3166), since it doesn't need to be called in the context of an individual peer, and it doesn't need to be ca",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499479782,499479782,src/txrequest.cpp
jnewbery,2020-10-05 09:57:39,I also like this. Good change!,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499480702,499480702,src/txrequest.h
jnewbery,2020-10-05 10:20:50,"```suggestion\n            assert(it_last != m_index.get<ByTxHash>().begin() && it_last->m_txhash == item.first);\n```\n\n`it_last` is the return value of a `std::prev()` call, so I think by definition it can't be the `end` iterator.\n\nAlternatively you could do something like:\n\n```\n            auto it_last = m_index.get<ByTxHash>().upper_bound(\n                ByTxHashView{item.fir",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499493545,499493545,src/txrequest.cpp
jnewbery,2020-10-05 10:39:20,I think `AddTxAnnouncement` or similar would be a better name for this function. Calling this function does not imply that we'll ever request the transaction from this peer.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499503606,499503606,src/net_processing.cpp
jnewbery,2020-10-05 10:43:42,"Move this two lines down (so it's immediately above the one place where `overloaded` is used).\n\nCould also mark these two bools as `const`, but meh.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499505840,499505840,src/net_processing.cpp
jnewbery,2020-10-05 10:46:45,This comment is now wrong.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499507369,499507369,src/net_processing.cpp
jnewbery,2020-10-05 10:54:44,"A peer can cause us to do up to 5016 calls into `ReceivedResponse()` per `notfound` message, where each `RecievedResponse()` call results in two `find()` operations into the index that can be up to 625k. Is that likely to be costly?\n\nPreviously, the limit on `notfound` processing was 116 `find()` calls into a map of maxsize 100.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499511223,499511223,src/net_processing.cpp
jnewbery,2020-10-05 10:56:09,Delete this comment.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499511969,499511969,src/net_processing.cpp
jnewbery,2020-10-05 10:56:30,"It doesn't make much difference, but this cs_main scope can now move down into the if block.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499512149,499512149,src/net_processing.cpp
ajtowns,2020-10-05 11:04:04,"Moving `SetTimePoint()` out of `GetRequestable()` might have better worst-case behaviour in the event of arbitrarily non-monotonic clocks In particular, currently you could have, say, two peers, peer=1 with no announcements, and peer=2 with N announcements all with a reqtime = t. If you call `GetRequestable(peer=1, now=t+1)` then you'll get an empty vector as the result, but update all N announcem",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499515932,499515932,src/txrequest.cpp
jnewbery,2020-10-05 11:14:10,"I also have a slight preference that this is guarded by its own mutex since I don't like adding yet more non-validation state to cs_main, but agree that it should be straightforward to move it later.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499521161,499521161,src/net_processing.cpp
ajtowns,2020-10-05 11:19:41,"`(txhash, state, priority)` and ""Note, `priority == 0` whenever `state != CANDIDATE_READY`"" below might be clearer.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499523971,499523971,src/txrequest.cpp
ajtowns,2020-10-05 11:35:22,"`assert(new_state == COMPLETED || new_state == CANDIDATE_DELAYED);` ? The existing `assert(!it->IsSelected());` at the end would also allow `new_state == CANDIDATE_READY` which I don't think would be handled correctly (in that if it were the first READY, it should be assigned BEST but will not be).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499532324,499532324,src/txrequest.cpp
ajtowns,2020-10-05 12:33:27,"`ByTxHashView` takes the uint256 as the first param, the last one is just a uint64_t Priority, so replacing with `COMPLETED, std::numeric_limits<Priority>::max()` should be straightforward (`1` would also be fine, since COMPLETED means priority is `0`). Seems to pass the fuzz tester okay. Adding a `static constexpr auto PRIORITY_MAX` alias and using it for `m_priority_best_candidate_ready` as well",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499563280,499563280,src/txrequest.cpp
ajtowns,2020-10-05 12:40:18,"I think the constraints on the ordering here are:\n * COMPLETED comes last, so that looping `it = Erase<ByTxHash>(it)` starting from the only non-completed entry for a txhash will erase all the entries for that txhash\n * BEST and REQUESTED are next to each other so that it's easy to enforce the ""only one best or requestable per txhash""\n * BEST/REQUESTED comes immediately before/after READY so",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499567299,499567299,src/txrequest.cpp
ajtowns,2020-10-05 13:02:21,"Maybe\n\n```c++\nenum class WaitState {\n    WAITING,\n    COMPLETED,\n    SELECTABLE,\n};\nstatic inline WaitState GetWaitState(const Announcement& ann) {\n    return (ann.IsWaiting() ? WaitState::WAITING : ann.IsSelectable() ? WaitState::SELECTABLE, WaitState::COMPLETED);\n}\n```\n\nand say `sorted by (wait_state, time)`, and describe it is easy to find all the WAITING announcements",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499581088,499581088,src/txrequest.cpp
ajtowns,2020-10-05 13:18:27,"At some point in the future it would probably be good to expose expiring requests somehow -- peers might want to deprioritise those peers or disconnect them, eg.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499591256,499591256,src/txrequest.cpp
ajtowns,2020-10-05 13:39:07,`ret.reserve(selected.size())` ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499605596,499605596,src/txrequest.cpp
ajtowns,2020-10-05 14:10:51,"In future, might be useful to return `it->GetState() == REQUESTED ? it->m_time : min()` here to allow the caller to estimate relay latency for a peer, in case they wanted to use that info to adjust that peer's expiry delay.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499627889,499627889,src/txrequest.cpp
ajtowns,2020-10-05 14:13:34,"Should be ""already-failed"" not ""already-requested"" per the terminology above (""Whether or not the transaction request failed already (timed out, or NOTFOUND was received)"")",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499629695,499629695,src/txrequest.h
ajtowns,2020-10-05 14:55:01,Maybe `RandomTime_15s()` and `RandomTime_1y()` (assuming I've done the math right for bits=23 and bits=44 which are the only ways this is called) ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499661041,499661041,src/test/txrequest_tests.cpp
ajtowns,2020-10-05 14:56:44,"I'm not really following the unit testing strategy here; in particular what all the interleaving ends up doing, and what cases are really covered, and what the effect of doing some things exhaustively and other things randomly is . Feels like there's a lot of novel scaffolding hiding what's actual tested.\n\nIt might be good to create some template magic for the Action/Runner/Scenario pattern, a",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499662302,499662302,src/test/txrequest_tests.cpp
ajtowns,2020-10-05 15:10:51,`NodeId` and `Priority` instead of `uint64_t` and `::min()` instead of `m_priority_candidate_best = 0`?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499672470,499672470,src/txrequest.cpp
ajtowns,2020-10-05 15:22:25,"`244466666` (pronounced ""one 2, three 4, five 6"")  or `1123581321` are also amusing. Super helpful review comments 'r us!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499680741,499680741,src/test/fuzz/txrequest.cpp
ajtowns,2020-10-05 15:27:10,"Maybe:\n\n```\nif (ann.m_state != NOTHING) {\n    if (ann.m_state != COMPLETED) return;\n    all_nothing = false;\n}\n```\n\nHad to double take to realise that not being CANDIDATE, REQUESTED or NOTHING here meant it was definitely COMPLETED. No big deal.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499684028,499684028,src/test/fuzz/txrequest.cpp
ajtowns,2020-10-05 16:27:25,`auto* state =` ? Was wondering if we were returning a reference and making an unnecessary copy.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499724149,499724149,src/net_processing.cpp
ajtowns,2020-10-05 16:34:22,`if (tx.HasWitness()) ReceivedResponse(wtxid);` ? Or is the idea that txrequest is so cheap it's better to let it check if the extra call is redundant?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499728201,499728201,src/net_processing.cpp
ajtowns,2020-10-05 16:39:58,Might be worth adding some sort of sanity check to see that there aren't any code paths where we fail to call `DisconnectedPeer` and end up leaving `CANDIDATE_BEST` entries in the tracker that will never get cleared?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499731414,499731414,src/net_processing.cpp
ajtowns,2020-10-05 17:08:34,"Could just send 44 NOTFOUND messages with 116 entries instead of one with 5016 for almost exactly the same overhead; and they should be plenty fast anyway, I think, especially compared to looking up the UTXO database when we receive a transaction. Since we've increased the in flight limit, I think it makes sense to increase the notfound limit correspondingly.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499747735,499747735,src/net_processing.cpp
ajtowns,2020-10-05 17:11:23,"Commit for this change says ""orphan fetches"" but it's really ""fetches of orphan's parents""...",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499749174,499749174,src/net_processing.cpp
ajtowns,2020-10-05 17:33:43,"Random idea that I don't think we should do right now: I think we could limit this attack further if we added a `bool m_horribly_delayed : 1;` bit to each announcement. Change the ordering for choosing BEST to be `(preferred, horribly_delayed, priority)` and flip the horribly_delayed bit as part of `SetTimePoint()` when `req_time + txrequest.m_horrible_delay_time < now`, where `m_horrible_delay_ti",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499761594,499761594,src/txrequest.h
sipa,2020-10-05 18:20:23,"I agree with the goal of eventually having this not under cs_main, but the hard part will be disentangling the existing code calling into txrequest not covered by cs_main. Just adding another lock in addition to cs_main here isn't helping with that part, so I prefer doing this as a follow-up (together with probably a bigger part of net_processing also losing cs_main).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499786489,499786489,src/net_processing.cpp
sipa,2020-10-05 18:39:08,"Hmm, that's interesting. Before the `RequestedTx` change I'd be hesitant about such a change, as it'd make specifying the conditions under which it can be called even more cumbersome. There isn't much concern about that anymore, though.\n\n@ajtowns Right, or more generally: if your clock is arbitrarily jittery, increasing the frequency of SetTimePoint calls will result in up to proportionally mo",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499796319,499796319,src/txrequest.cpp
sipa,2020-10-05 18:40:02,"I've changed some comments here, let me know if it's better.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499796821,499796821,src/test/txrequest_tests.cpp
sipa,2020-10-05 18:40:16,I've changed some comments.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499796950,499796950,src/test/txrequest_tests.cpp
sipa,2020-10-05 19:10:48,"Right, I don't think this is a DoS vector as it's fairly cheap per byte compared to many other requests.\n\nThe only concern would be latency, e.g. might it cause a significant interruption of a net processing loop to process 5016 NOTFOUNDs at once? I think not, but if it is, we may use the split processing technique used for getdata and orphan processing - independent of what the limit here is.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499813414,499813414,src/net_processing.cpp
sipa,2020-10-05 20:09:59,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499843653,499843653,src/net_processing.cpp
sipa,2020-10-05 20:10:19,Really done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499843825,499843825,src/txrequest.cpp
sipa,2020-10-05 20:10:47,"Yeah, trying to minimize diff - this shouldn't matter much.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499844082,499844082,src/net_processing.cpp
sipa,2020-10-05 20:11:29,I've made it conditional with an `if InsecureRandBool()` around it.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499844446,499844446,src/test/txrequest_tests.cpp
sipa,2020-10-05 20:11:43,Agreed. I've rewritten this a bit.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499844557,499844557,src/txrequest.cpp
sipa,2020-10-05 20:12:29,I've just deleted this (as well as the TOO_LARGE enum value). It was only needed when the SanityCheck code actually needed it_last for the per-txhash flags which are gone now.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499844934,499844934,src/txrequest.cpp
sipa,2020-10-05 20:12:40,"Ok, renamed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499845033,499845033,src/net_processing.cpp
sipa,2020-10-05 20:12:53,"Done, also the meh.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499845151,499845151,src/net_processing.cpp
sipa,2020-10-05 20:13:03,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499845237,499845237,src/net_processing.cpp
sipa,2020-10-05 20:13:50,"What a wasted opportunity to say ""Remove the STALE comment from the pr"" instead.\n\nDone.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499845608,499845608,src/net_processing.cpp
sipa,2020-10-05 20:14:27,Done. I haven't moved it into the loop as I expect common iterations of the loop to be faster or at least in the same order of magnitude as grabbing a lock.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499845940,499845940,src/net_processing.cpp
sipa,2020-10-05 20:15:49,"Done, that's more readable indeed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499846639,499846639,src/txrequest.cpp
sipa,2020-10-05 20:17:22,"Done.\n\nIt's borderline, I think, as you could read the comments for this function do not claim they'll do anything but change the state of the passed iterator to the passed value - only about other announcements. Still, better to be explicit so added an assert.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499847441,499847441,src/txrequest.cpp
sipa,2020-10-05 20:18:01,That would be a more logical ordering. Let me try what would be needed to make this work later.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499847764,499847764,src/txrequest.cpp
sipa,2020-10-05 20:18:09,"Nice, done.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499847825,499847825,src/txrequest.cpp
sipa,2020-10-05 20:18:47,"Agree, but that sounds like really a follow-up (or even a follow-up issue to investigate the use of that first).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499848146,499848146,src/txrequest.cpp
sipa,2020-10-05 20:18:55,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499848208,499848208,src/txrequest.cpp
sipa,2020-10-05 20:19:13,"Yeah, future work...",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499848391,499848391,src/txrequest.cpp
sipa,2020-10-05 20:19:22,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499848478,499848478,src/txrequest.h
sipa,2020-10-05 20:19:49,Done. Your math was almost right (it's 8s and half a year).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499848693,499848693,src/test/txrequest_tests.cpp
sipa,2020-10-05 20:27:01,"I've added this comment blob to explain it better:\n\n> Each Scenario is a proxy through which actions for the (sequential) execution of various tests are added to a Runner. The actions from multiple scenarios are then run concurrently, resulting in these tests being performed against a TxRequestTracker in parallel. Every test has its own unique txhashes and NodeIds which are not reused in other",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499852565,499852565,src/test/txrequest_tests.cpp
sipa,2020-10-05 20:27:34,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499852827,499852827,src/txrequest.cpp
sipa,2020-10-05 20:27:52,"Major improvement, done!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499852985,499852985,src/test/fuzz/txrequest.cpp
sipa,2020-10-05 20:28:07,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499853151,499853151,src/test/fuzz/txrequest.cpp
sipa,2020-10-05 20:28:33,Clearly this shouldn't be an `auto` type if it's confusing. Just made the type explicit.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499853402,499853402,src/net_processing.cpp
sipa,2020-10-05 20:29:13,"I don't think it matters much as it's fairly cheap, plus doesn't change worst case behaviour (attacker can use witness-carrying transactions). Still, done.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499853758,499853758,src/net_processing.cpp
sipa,2020-10-05 20:29:24,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499853876,499853876,src/net_processing.cpp
sipa,2020-10-05 20:30:17,"Nice idea. I was thinking in a similar direction, but couldn't figure out how to make it efficient. Updating the flag after the fact is a neat solution.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499854307,499854307,src/txrequest.h
ariard,2020-10-05 23:53:33,"I think that describing ForgetTxHash to be called when a good transaction is received doesn't match its usage.\n\nWe call it ForgetTxHash (8ef5953), in net_processing, at transaction reception :\n* L2933, when a transaction has been accepted to the mempool\n* L2996, when an orphan  transaction is added to the orphan pool\n* L3014, when an orphan transaction is added to the rejection filter fo",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499932949,499932949,src/txrequest.h
ariard,2020-10-06 00:32:34,Announcements sizes are only compared at fuzzer input exhaustion not after every `ReceivedInv`. It would add little value to check them after every `ReceivedInv` to catch Tester/TxRequestTracker divergence at that point ? They may converge at the end and thus a divergence during the running wouldn't be detected ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499943473,499943473,src/test/fuzz/txrequest.cpp
sipa,2020-10-06 01:23:55,"In that case, a shorter fuzzer input would have caught the issue instead, I think.\n\nPerhaps it's worth seeing how much performance impact doing it all the time has; if it's not too much maybe it's worth changing.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499956327,499956327,src/test/fuzz/txrequest.cpp
sipa,2020-10-06 01:46:19,"You're right that the description doesn't match the usage in net_processing here, but ""has been evaluation by the mempool"" is perhaps incorrect as well. If it's seen in a block, it can be forgotten as well, for example.\n\nReally the right criterion is: has it been made AlreadyHaveTx()==true. If we'd delete something that isn't AlreadyHaveTx(), it means we risk fetching it again if it's announce",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r499961749,499961749,src/txrequest.h
MarcoFalke,2020-10-06 06:51:55,"In commit ee4f89a44b:\n\nThere is no warning for me. If there is a bug or a false positive warning in an ancient gcc version, we often ignore that instead of ""crippling"" the code.\n\nMind sharing what kind of warning this is, and what gcc version was used? Maybe even add it to that comment.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500042966,500042966,src/txrequest.cpp
MarcoFalke,2020-10-06 07:33:52,"in commit ee4f89a44b\n\nAny reason to have ONE defined in uint256.h, but ZERO here?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500063984,500063984,src/txrequest.cpp
jnewbery,2020-10-06 09:19:21,"Yes, seems reasonable. Perhaps at some point in the future we might also want to have a return value from `ReceivedResponse()` so net_processing can know whether the peer is sending spurious notfound entries.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500129074,500129074,src/net_processing.cpp
jnewbery,2020-10-06 09:22:21,Marking as resolved.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500130921,500130921,src/txrequest.cpp
jnewbery,2020-10-06 09:25:02,Agree it doesn't matter at all. It just offends my aesthetic sensibilities. Marking resolved.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500132563,500132563,src/net_processing.cpp
MarcoFalke,2020-10-06 10:51:10,"in commit ee4f89a44b:\n\nThe comment says ""fail"", the code says ""return false"", this seems inconsistent.\n\nThis can't happen in normal operation. If this happens, it would be a logic error, so `assert` seems appropriate? Or maybe even remove the dead code?\n\nEdit: According to the coverage report this *is* hit, so I might have to take another look here.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500180971,500180971,src/txrequest.cpp
jnewbery,2020-10-06 11:58:57,"This assert seems redundant now that you have the `assert(new_state == State::COMPLETED || new_state == State::CANDIDATE_DELAYED);` at the top. It's not doing any harm, but it seems unnecessary.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500217220,500217220,src/txrequest.cpp
MarcoFalke,2020-10-06 12:09:03,"in commit ee4f89a44b41a860f2bda98957db2d6871a8e8ea:\n\nThe same peer can't have duplicate hashes, so this can be clarified to say ""different peer""\n\n\n```suggestion\n     *    (reqtime <= now) for which no existing REQUESTED announcement with the same txhash exists from a different peer, and for which\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500222894,500222894,src/txrequest.h
MarcoFalke,2020-10-06 13:05:03,"in commit a9a0504f12cb3c301bc56cc5f8f59ca57c1dc433:\n\nThe default seems to be unused\n\n```suggestion\n    void ReceivedInv(NodeId peer, const GenTxid& gtxid, bool pref, std::chrono::microseconds reqtime)\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500258527,500258527,src/test/txrequest_tests.cpp
MarcoFalke,2020-10-06 13:12:42,"in commit a9a0504f12cb3c301bc56cc5f8f59ca57c1dc433:\n\nCan be written shorter\n\n```suggestion\n            scenario.AdvanceTime(GetRandMicros(expiry));\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500263942,500263942,src/test/txrequest_tests.cpp
MarcoFalke,2020-10-06 13:39:32,"same commit:\n\n```suggestion\n    // Two peers. They will announce in order.\n```\n\nAm I missing something here? There are only two (and a reference to either of them)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500285591,500285591,src/test/txrequest_tests.cpp
MarcoFalke,2020-10-06 13:40:11,"same commit:\n\n```suggestion\n    NodeId priopeer = stage2_prio ? peer2 : peer1, otherpeer = stage2_prio ? peer1 : peer2;\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500286203,500286203,src/test/txrequest_tests.cpp
jnewbery,2020-10-06 14:31:29,'fail' here means 'there exists another announcement for this txhash which isn't COMPLETED',https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500336120,500336120,src/txrequest.cpp
jnewbery,2020-10-06 14:51:03,"We can avoid using an awkward pair here by constructing a vector of pointers and then use a custom comparator function to sort:\n\n```diff\n--- a/src/txrequest.cpp\n+++ b/src/txrequest.cpp\n@@ -101,6 +101,9 @@ struct Announcement {\n         m_is_wtxid(gtxid.IsWtxid()), m_state(uint8_t(State::CANDIDATE_DELAYED)) {}\n };\n \n+bool seq_comparator(const Announcement* ann1, const Announcement",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500355096,500355096,src/txrequest.cpp
sipa,2020-10-06 17:58:25,"Marking this as resolved, as @ariard wrote a test that was squashed in.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500491087,500491087,src/test/txrequest_tests.cpp
sipa,2020-10-06 18:57:32,"This was indeed not a problem at all. I've applied the following diff:\n\n```patch\ndiff --git a/src/test/fuzz/txrequest.cpp b/src/test/fuzz/txrequest.cpp\nindex 0ff00d23e0..ff32de25eb 100644\n--- a/src/test/fuzz/txrequest.cpp\n+++ b/src/test/fuzz/txrequest.cpp\n@@ -129,7 +129,7 @@ class Tester\n             if (ann.m_state == State::REQUESTED) return -1;\n             // If it's a viable",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500527283,500527283,src/txrequest.cpp
sipa,2020-10-06 20:05:22,"Done. I've changed it to `static constexpr auto VARNAME = std::chrono::seconds{2};`, as I think it's slightly more readable to have the unit and the magnitude together.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500563787,500563787,src/net_processing.cpp
sipa,2020-10-06 20:06:32,"It was in GCC 9.3, but I believe it was in a much older iteration of this code, where there was a `switch` on `State`, and GCC would always complain about unhandled cases. I see no more warning, so I've dropped this (along with `GetState`/`SetState`).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500564375,500564375,src/txrequest.cpp
sipa,2020-10-06 20:06:51,None at all. I've moved it to uint256.h.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500564547,500564547,src/txrequest.cpp
sipa,2020-10-06 20:09:12,"I've updated the comments a bit here.\n\nIt's indeed possible: e.g. if you have two `CANDIDATE_DELAYED` Announcements with the same txhash (and thus distinct peers), and the first of the two goes offline (`DisconnectedPeer`), then this function would be called to determine if that Announcement was the last non-`COMPLETED` one. `std::next(it)` isn't `end()`, has the same `m_txhash`, and isn't `CO",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500565773,500565773,src/txrequest.cpp
sipa,2020-10-06 20:09:25,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500565891,500565891,src/txrequest.h
sipa,2020-10-06 20:09:35,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500566003,500566003,src/test/txrequest_tests.cpp
sipa,2020-10-06 20:10:12,That would use the real RNG rather than the faster test-only `g_insecure_rand_ctx`.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500566362,500566362,src/test/txrequest_tests.cpp
sipa,2020-10-06 20:11:07,"Fixed.\n\nLeftover from an old version of the code. The situation with 3 peers (and more) is now covered by `BuildBigPriorityTest`.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500566826,500566826,src/test/txrequest_tests.cpp
sipa,2020-10-06 20:11:16,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500566917,500566917,src/test/txrequest_tests.cpp
sipa,2020-10-06 20:11:25,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500566991,500566991,src/txrequest.cpp
sipa,2020-10-06 20:12:10,"Done, with lambdas instead of separate functions (as they're only used in one place).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500567374,500567374,src/txrequest.cpp
ajtowns,2020-10-06 20:51:19,"Hmm, in bad cases (where GetRequestable is returning a lot of txhashes, there are a lot of announcements, and the relevant announcements are fragmented) that would be a fair bit less cache friendly than the old code (sort would be re-accessing each entry an additional `O(log(selected.size()))` times). But in reality the 5000 ann limit means at worst it just moves from sorting an 80kB array in L1 t",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500587967,500587967,src/txrequest.cpp
sipa,2020-10-06 20:59:22,"> Or rather, it's probably not even worth gathering the performance data that would be needed to make a decision based on one being faster or not.\n\nYeah.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500592155,500592155,src/txrequest.cpp
jnewbery,2020-10-06 21:59:38,"> Done, with lambdas instead of separate functions (as they're only used in one place).\n\nHa. I went the other way - did this with lambdas first and then moved them to named functions because the lines were getting a bit long. Either way seems fine.\n\n> it's probably not even worth gathering the performance data that would be needed to make a decision based on one being faster or not\n\nYe",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500620402,500620402,src/txrequest.cpp
hebasto,2020-10-07 06:00:28,"8d0dd46b4fcdf4c664747e638eda046f8d51079c\nnit: Lexicographic order for headers?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500755725,500755725,src/test/fuzz/txrequest.cpp
hebasto,2020-10-07 06:01:20,"8d0dd46b4fcdf4c664747e638eda046f8d51079c\n```suggestion\n//! Randomly generated GenTxids used in this test (length is MAX_TXHASHES).\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500756023,500756023,src/test/fuzz/txrequest.cpp
hebasto,2020-10-07 06:04:21,"8d0dd46b4fcdf4c664747e638eda046f8d51079c\n\nWhat is the reason for these conditions? Why does any `rand256()` not suit?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500756972,500756972,src/test/fuzz/txrequest.cpp
hebasto,2020-10-07 06:09:01,"8d0dd46b4fcdf4c664747e638eda046f8d51079c\nCould the only `int i{0};` before all of the `for` loops be more readable and maintainable?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500758594,500758594,src/test/fuzz/txrequest.cpp
hebasto,2020-10-07 06:43:01,"8d0dd46b4fcdf4c664747e638eda046f8d51079c\n```suggestion\n        std::vector<std::tuple<uint64_t, int, bool>> result; //!< list of (sequence number, txhash, is_wtxid) tuples.\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500771818,500771818,src/test/fuzz/txrequest.cpp
hebasto,2020-10-07 06:44:13,"8d0dd46b4fcdf4c664747e638eda046f8d51079c\n\n`PENDING` ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500772328,500772328,src/test/fuzz/txrequest.cpp
hebasto,2020-10-07 06:47:22,"ea7839c8889864be174b85a1f4de326f5e12e430, typo:\n```suggestion\n            if ((config >> 3) == 3) { // A response will arrive for the transaction\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500773745,500773745,src/test/txrequest_tests.cpp
hebasto,2020-10-07 06:48:10,"ea7839c8889864be174b85a1f4de326f5e12e430, typo:\n```suggestion\n/** Add to scenario a test that verifies behavior related to both txid and wtxid with the same\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500774092,500774092,src/test/txrequest_tests.cpp
hebasto,2020-10-07 06:50:30,"d9dc98b73d3d3b7979e76514e822e74814f8ff6d, typo:\n```suggestion\n            // The next best CANDIDATE_READY, if any, immediately precedes the REQUESTED or CANDIDATE_BEST\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500775218,500775218,src/txrequest.cpp
jnewbery,2020-10-07 09:38:44,s/transactions/transaction requests/ ?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500875513,500875513,test/functional/p2p_tx_download.py
jnewbery,2020-10-07 09:39:30,DELAYED/READY/BEST,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500875961,500875961,src/test/fuzz/txrequest.cpp
jnewbery,2020-10-07 09:58:21,More out of curiosity than a suggestion to change: is there any reason to use C arrays here and elsewhere rather than std::arrays? std::array would allow you to replace many of the hand-written loops below with stl algorithms (e.g. `Cleanup()` becomes a single `std::any()` call and a single `std::transform()` call).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500887683,500887683,src/test/fuzz/txrequest.cpp
hebasto,2020-10-07 13:09:13,"I believe that `all_nothing == true` means that all `txhash`es have the `State::NOTHING`.\nFurthermore, re-assigning `State::NOTHING` to them will be effectively noop, right?\nSo one could comment out this LOC. Or not?\n\nUPDATE: ignore it, sorry for noise.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r500997698,500997698,src/test/fuzz/txrequest.cpp
MarcoFalke,2020-10-07 13:29:08,"in commit ea7839c888:\n\nCould mention that config is [0,4) like in the other tests.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501012361,501012361,src/test/txrequest_tests.cpp
MarcoFalke,2020-10-07 13:36:11,"same commit, config is also [0,4)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501017573,501017573,src/test/txrequest_tests.cpp
glozow,2020-10-07 13:51:33,`CANDIDATE`,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501029442,501029442,src/test/fuzz/txrequest.cpp
MarcoFalke,2020-10-07 13:55:41,"in commit ea7839c8889864be174b85a1f4de326f5e12e430:\n\nI am wondering why `config` is used here. Generally, it seems that `config` is used to enumerate observable behaviour changes, whereas randomness is used to augment the test with noise that shouldn't change behavior. Is this correct? If yes, it could make sense to replace `config` here with randomness.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501032704,501032704,src/test/txrequest_tests.cpp
MarcoFalke,2020-10-07 14:21:38,"in commit 8d0dd46b4fcdf4c664747e638eda046f8d51079c\n\n```suggestion\ntest_fuzz_txrequest_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501053201,501053201,src/Makefile.test.include
ariard,2020-10-07 15:34:44,"Note that the other call to `AdTxAnnouncement` (L2657) is conditional on `!m_chainman.ActiveChainState().IsInitialBlockDownload()`. \n\nI think it's not worthy to download orphan parents when still in IBD as :\n* a) we may not have the UTXO(s) from which they spend and thus they will be considered again as orphans\n* b) we may not have already seen the block in which they're already spent and ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501110589,501110589,src/net_processing.cpp
ariard,2020-10-07 16:51:00,"Should we ensure that a honest sender's NOTFOUND stays strictly under `MAX_PEER_TX_ANNOUNCEMENTS`  in ProcessGetData ?\n\nLet's say you have the following topology : Mallory <--> Alice <--> Bob.\n\n1) Mallory send 5000 txn (MAX_PEER_TX_ANNOUNCEMENTS) to Alice. This set of txn conflict with the rest of the network minus Alice and Bob. Bob can only learn then from Alice.\n2) Alice relays this s",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501163754,501163754,src/net_processing.cpp
ariard,2020-10-07 17:54:23,"I didn't figure this during previous reviews, but this doesn't underscore that CANDIDATE_READY expiration time is never if it's never promoted to REQUESTED or the expected transaction is never received. Just to prevent a future change introducing a expiration time for then and thus a strong dependency order where malicious announcement(s) request first could interfere with honest CANDIDATE_READY.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501202699,501202699,src/txrequest.cpp
ariard,2020-10-07 17:54:54,"I think this is ""higher priority"" after latest update.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501202989,501202989,src/txrequest.cpp
ariard,2020-10-07 17:56:33,"Same ""higher priority"" ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501204080,501204080,src/txrequest.cpp
ariard,2020-10-07 23:42:04,"I think MAX_PEER_TX_IN_FLIGHT and its comments could be clearer by being called `MAX_PEER_TX_REQUEST_IN_FLIGHT`. \n\nEverytime I'm re-reading this variable I wonder if its a superset of `MAX_PEER_TX_ANNOUNCEMENTS` (which is not ofc) or a disjunctive limit. Even, those 2 variables could leak their directionality, e.g `MAX_FROM_PEER_TX_ANNOUNCEMENTS`/`MAX_TO_PEER_TX_REQUEST` \n\nPlease discard i",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501370829,501370829,src/net_processing.cpp
ariard,2020-10-07 23:48:06,"As another consistency checks, at PeerManager::InitializeNode you can verify that `m_txrequest.Count(nodeid)==0` ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501372569,501372569,src/net_processing.cpp
ariard,2020-10-08 00:36:03,"On this diff, I've the new unit tests stalling, is this an expected property ? It would fail CI anyway so likely okay.\n\n```\ndiff --git a/src/txrequest.cpp b/src/txrequest.cpp\nindex fb5f1e325..cf4d55713 100644\n--- a/src/txrequest.cpp\n+++ b/src/txrequest.cpp\n@@ -483,7 +483,7 @@ private:\n         while (!m_index.empty()) {\n             auto it = m_index.get<ByTime>().begin();\n    ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501385561,501385561,src/txrequest.cpp
sipa,2020-10-08 01:09:42,"This is a good point, but perhaps left best for an orthogonal PR?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501394086,501394086,src/net_processing.cpp
ariard,2020-10-08 01:10:57,"I think this function is right but I was confused for a while on the behavior if we can have concurrently two announcements, one  _BEST the other _REQUESTED. We can't but it would be better to document it as a friendly reminder.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501394394,501394394,src/txrequest.cpp
sipa,2020-10-08 01:17:18,"I'm not sure there is really a problem here, because:\n\n* In step 2, that relay will take several minutes (we relay at most 35 tx invs per message, `INVENTORY_BROADCAST_MAX`, and around 1 inv message every 2s on outbound connections, so 17.5 tx/s), so announcements will come in gradually.\n* In step 5, Bob will expire requests after 1 min anyway, even without NOTFOUNDs.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501395842,501395842,src/net_processing.cpp
sipa,2020-10-08 01:21:18,"I can't understand your first paragraph.\n\nYour suggested text would be incorrect, as they're expected to first transition to CANDIDATE_BEST, before becoming REQUESTED. Feel free to suggest something that includes that.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501396771,501396771,src/txrequest.cpp
sipa,2020-10-08 01:23:47,"I think ""in flight"" rather unambiguously means ""requested but no response yet"".",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501397307,501397307,src/net_processing.cpp
sipa,2020-10-08 01:29:50,"Yes, that's expected. The loop is expected to make progress in every step, or break. With the change you're making, it will infinitely spin when reaching a CANDIDATE_DELAYED.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501398776,501398776,src/txrequest.cpp
sipa,2020-10-08 01:30:46,"It says ""and no REQUESTED exists"", is that enough?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399018,501399018,src/txrequest.cpp
sipa,2020-10-08 01:31:27,No worries. It's just avoiding the work in case there is nothing to do.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399202,501399202,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:32:30,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399484,501399484,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:32:37,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399540,501399540,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:33:09,It does. This just helped debugging as it meant I could look at a hex txid and know which #txhash it was. Removed it.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399684,501399684,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:33:18,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399709,501399709,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:33:26,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399730,501399730,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:33:37,"Done. Indeed, `CANDIDATE`.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399797,501399797,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:33:44,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399858,501399858,src/test/txrequest_tests.cpp
sipa,2020-10-08 01:33:51,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399880,501399880,src/test/txrequest_tests.cpp
sipa,2020-10-08 01:33:59,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399922,501399922,src/txrequest.cpp
sipa,2020-10-08 01:34:17,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501399970,501399970,test/functional/p2p_tx_download.py
sipa,2020-10-08 01:34:27,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501400023,501400023,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:34:48,All those things work with arrays as well?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501400106,501400106,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 01:35:06,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501400232,501400232,src/txrequest.cpp
sipa,2020-10-08 01:35:13,Fixed.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501400266,501400266,src/txrequest.cpp
sipa,2020-10-08 01:35:31,Added.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501400342,501400342,src/net_processing.cpp
jnewbery,2020-10-08 09:26:59,"Ah ok. I guess it's more of a style question really. Is there ever a reason to prefer C arrays over std::array?\n\nMarking this as resolved since it's not important.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501576026,501576026,src/test/fuzz/txrequest.cpp
jnewbery,2020-10-08 09:32:05,You replaced the wrong word. It should be CANDIDATE or REQUESTED.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501579279,501579279,src/test/fuzz/txrequest.cpp
ariard,2020-10-08 13:51:28,"> In step 2, that relay will take several minutes (we relay at most 35 tx invs per message, INVENTORY_BROADCAST_MAX, and around 1 inv message every 2s on outbound connections, so 17.5 tx/s), so announcements will come in gradually.\n\nYes but I'm wondering if you can bypass this by forcing to relay orphans with a lot of missing parents, thus the receiver marking them as announcements from the se",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501737525,501737525,src/net_processing.cpp
ariard,2020-10-08 13:54:28,IMO it doesn't mark enough directionality but yeah bikeshedding.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501739888,501739888,src/net_processing.cpp
ariard,2020-10-08 13:55:19,Right there is an _and_ marking the conjunction.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501740587,501740587,src/txrequest.cpp
ariard,2020-10-08 13:59:46,"Just wanted to add a comment saying that _READY expiration time is never, if it doesn't get promoted to _BEST or the announced transaction is no longer needed.\n\nRight forget a step,  ""CANDIDATE_READY announcements don't expire until they're promoted to _BEST or the announced transaction is no longer needed"" better?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501744108,501744108,src/txrequest.cpp
ariard,2020-10-08 14:15:38,"You mean ""successor"" instead of ""predecessor"", given `std::next()` usage ?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501756151,501756151,src/txrequest.cpp
hebasto,2020-10-08 16:33:02,"```suggestion\n    //! Number of CANDIDATE_BEST announcements for this txhash (at most one).\n    size_t m_candidate_best = 0;\n    //! Number of REQUESTED announcements for this txhash (at most one).\n    size_t m_requested = 0;\n```\n\nThis is checked in https://github.com/bitcoin/bitcoin/blob/bf3f99291b8f207a809d6fd3309ef99eb3711388/src/txrequest.cpp#L324-L325",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501856577,501856577,src/txrequest.cpp
hebasto,2020-10-08 17:29:01,"```suggestion\n    explicit TxRequestTracker(bool deterministic = false);\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501890663,501890663,src/txrequest.h
sipa,2020-10-08 17:38:39,"> Yes but I'm wondering if you can bypass this by forcing to relay orphans with a lot of missing parents, thus the receiver marking them as announcements from the sender.\n\nMallory can't cause Alice to relay orphans to Bob - they're only relayed when they enter the mempool, which implies the parents are known.\n\n> I'll write a test to get certainty on behavior. Feel free to mark as resolved.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501896792,501896792,src/net_processing.cpp
sipa,2020-10-08 18:52:24,"Details.\n\nFixed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501942005,501942005,src/test/fuzz/txrequest.cpp
sipa,2020-10-08 18:52:42,"Ok, added some more comments.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501942154,501942154,src/txrequest.cpp
sipa,2020-10-08 18:53:08,"If it's unclear to you, better to improve it. Renamed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501942451,501942451,src/net_processing.cpp
sipa,2020-10-08 18:53:21,"Indeed, done.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501942597,501942597,src/txrequest.cpp
sipa,2020-10-08 18:53:29,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501942676,501942676,src/txrequest.cpp
sipa,2020-10-08 18:53:39,"Good idea, done.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r501942790,501942790,src/txrequest.h
ariard,2020-10-09 01:31:30,"> Mallory can't cause Alice to relay orphans to Bob - they're only relayed when they enter the mempool, which implies the parents are known\n\nWhat is an orphan for Bob might not be an orphan for Alice if their mempools are divergent ? Mallory broadcast tx123 to Alice and tx123' to Bob, then send children from tx123 to Alice which will be relayed to Bob ? \n\n`fRejectedParents` checks parents,",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502124237,502124237,src/net_processing.cpp
sipa,2020-10-09 03:41:35,"Ok, so Mallory also knows the victim specifically, and is able to connect directly to them.\n\nI believe you may be right that if Mallory has connections to both Alice and Bob, he may be able to induce a stream of orphans between them. If that stream is resolved slow enough (due to processing speed, bandwidth, ...), it may be possible to temporarily reach the 5000 MAX_PEER_TX_ANNOUNCEMENTS limit",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502167722,502167722,src/net_processing.cpp
MarcoFalke,2020-10-09 10:54:43,"in commit 3227f15f9d  :  \n\nThis seems to indicate peer misbehaviour (to some extent), so I'd prefer if the log under the net category was kept.\n\nI am aware that this requires code changes more than just adding back the LogPrint, but I think it might be worth the additional code to keep this debug log statement.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502348271,502348271,src/net_processing.cpp
MarcoFalke,2020-10-09 11:54:03,"in commit 3227f15f9d:\n\nSeems confusing to mix mocktime, but then wait for wall clock time. Is there any reason the process message loop will do anything different if called for two seconds in a loop but with fixed time? I think running it once is enough. You can do that with `p.sync_with_ping()`.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502375365,502375365,test/functional/p2p_tx_download.py
MarcoFalke,2020-10-09 11:55:24,"Generally, it seems that the code has strong unit and fuzz coverage for the internal logic, but the net_processing ""glue code"" is relatively untested when it comes to edge cases. I've written some edge-case tests. Feel free to steal or ignore:\n\n\n```diff\ndiff --git a/test/functional/p2p_tx_download.py b/test/functional/p2p_tx_download.py\nindex 01b0f0efa0..9cb92b77ae 100755\n--- a/test/fu",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502376038,502376038,test/functional/p2p_tx_download.py
sdaftuar,2020-10-09 12:49:55,"Shouldn't this say: ` k ~ P + NB(p=1-NPh/NP,r=1) ` ?\n",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502404037,502404037,src/txrequest.h
hebasto,2020-10-09 13:42:31,"1950db7598a426232aeb5b6e1114a1f7e1ab35a1, nit:\n```suggestion\n// See https://www.boost.org/doc/libs/1_58_0/libs/multi_index/doc/reference/key_extraction.html#key_extractors\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502435736,502435736,src/txrequest.cpp
sdaftuar,2020-10-09 14:48:35,"I have long wondered whether we should just prevent time from going backwards in `GetTime()`, by enforcing that it can only go forward.  Even if we didn't do that globally in bitcoind, I think we could consider doing that for `SetTimePoint()`...?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502481885,502481885,src/txrequest.cpp
sdaftuar,2020-10-09 15:19:23,"I was concerned whether converting the bool to a uint64_t was guaranteed to work as expected (ie map true to uint64_t(1) on all platforms/all compilers), so I tried to check.  From https://en.cppreference.com/w/cpp/language/implicit_conversion:\n\n> If the source type is bool, the value false is converted to zero and the value true is converted to the value one of the destination type (note that",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502503373,502503373,src/txrequest.cpp
laanwj,2020-10-09 20:15:06,"Yes, converting bool to int is (luckily!) fully defined behavior in C++!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502651283,502651283,src/txrequest.cpp
sipa,2020-10-09 20:23:32,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502654547,502654547,src/txrequest.cpp
sipa,2020-10-09 20:23:43,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502654602,502654602,src/test/txrequest_tests.cpp
sipa,2020-10-09 20:23:54,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502654650,502654650,src/test/txrequest_tests.cpp
sipa,2020-10-09 20:24:14,Changed to a random one.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502654788,502654788,src/test/txrequest_tests.cpp
sipa,2020-10-09 20:24:24,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502654847,502654847,src/Makefile.test.include
sipa,2020-10-09 20:25:21,"Added a commit at the end that re-introduces a way to account for expirations. It's nontrivial, so if other reviewers prefer doing it separately, that's ok by me.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502655209,502655209,src/net_processing.cpp
sipa,2020-10-09 20:25:32,"Ha, of course. Fixed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502655291,502655291,test/functional/p2p_tx_download.py
sipa,2020-10-09 20:26:32,"This is great, I've squashed these tests in.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502655703,502655703,test/functional/p2p_tx_download.py
sipa,2020-10-09 20:26:50,"Indeed, fixed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502655819,502655819,src/txrequest.h
sipa,2020-10-09 20:29:23,"Yeah, that works. My earlier argument was that it wasn't much code to deal with time going backwards, and it's elegant that these time-based operations work symmetrically. I've since added a test for time-going-backward behavior, so perhaps it isn't quite true anymore.\n\nI've added a new commit at the end that removes the time-going-backward-makes-candidates-unrequestable-again behavior by intr",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502656867,502656867,src/txrequest.cpp
sipa,2020-10-09 20:30:04,That's what I was assuming - booleans are effectively integers that can only take on value 0 and 1. Good to verify in any case.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502657169,502657169,src/txrequest.cpp
MarcoFalke,2020-10-10 09:15:12,"in commit ff290ca931f7131b3c1f7b7ac62b7a58ecc3c794:\n\nAny reason for this change? gcc and clang (c++17) compile fine for me without it.\n\nIf you want to modify this class in this pull, you might add a `ToString()const` method that returns `IsWtxid() ? ""wtx "" : ""tx "" + GetHash().ToString()` and use it where appropriate.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502768369,502768369,src/primitives/transaction.h
MarcoFalke,2020-10-10 09:23:59,Does that mean Bitcoin Core will crash when the user adjusts the time?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502769162,502769162,src/test/fuzz/txrequest.cpp
sipa,2020-10-10 15:58:38,"The std::sort (in unit tests) on pairs of NodeId, GenTxid failed without GenTxid having an assignment operator for me.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502804835,502804835,src/primitives/transaction.h
sipa,2020-10-10 15:59:53,"No, this is in the fuzz test. I wanted to verify that the test wasn't wasting time by trying situations in which time go backwards (which are now pointless).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502804944,502804944,src/test/fuzz/txrequest.cpp
MarcoFalke,2020-10-10 17:38:44,Thanks. Didn't realize this was in the fuzz test. :see_no_evil: ,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502813674,502813674,src/test/fuzz/txrequest.cpp
MarcoFalke,2020-10-10 17:39:02,Thanks. Didn't compile the fuzz tests.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502813684,502813684,src/primitives/transaction.h
hebasto,2020-10-10 18:26:37,"~Both gcc 9.3.0 and clang 10.0.0 compile fine for me without this change.~\n\n> Thanks. Didn't compile the fuzz tests.\n\nIndeed.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502818119,502818119,src/primitives/transaction.h
hebasto,2020-10-10 18:31:12,"```suggestion\n        // Compare Size(), Count(), CountInFlight() and CountCandidates() with naive structure.\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502818548,502818548,src/test/fuzz/txrequest.cpp
hebasto,2020-10-10 18:33:32,"```suggestion\n * Check() calls the TxRequestTracker's sanity check, plus compares the\n * output of the constant accessors (Size(), Count(), CountInFlight() and\n * CountCandidates()) with expected values.\n```",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502818767,502818767,src/test/fuzz/txrequest.cpp
ariard,2020-10-10 23:47:44,"> This may be costly as the attacker has produce huge amounts of actually valid transactions to get Alice to relay them to Bob - transactions which may confirm.\n\nAssuming a mass-connecting malicious node, I think you can mempool-partition from the rest of the honest network, Alice and Bob, by announcing yet-another different spend tx123''. Thus not having to pay for the malicious stream of orp",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r502844932,502844932,src/net_processing.cpp
naumenkogs,2020-10-12 07:53:38,"But this will miss the case when a COMPLETED announcement is not the immediate next?\n{.... it-1, it, it+1, COMPLETED}.\n\nIt seems like it actually works properly because it is called for CANDIDATE_BEST (implicit rule). Perhaps add this assert then?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503103640,503103640,src/txrequest.cpp
sipa,2020-10-12 08:09:26,"> {.... it-1, it, it+1, COMPLETED}.\n\nIn that case `it` is not the only non-COMPLETED Announcement for this txhash (it-1 and it+1 are also non-COMPLETED), so false is the correct return value.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503112543,503112543,src/txrequest.cpp
naumenkogs,2020-10-12 08:13:01,"Right, thanks!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503114647,503114647,src/txrequest.cpp
sipa,2020-10-12 08:17:55,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503117527,503117527,src/test/fuzz/txrequest.cpp
sipa,2020-10-12 08:18:04,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503117613,503117613,src/test/fuzz/txrequest.cpp
naumenkogs,2020-10-12 09:30:33,"So, let's say we start iterating, and the very first one is `CANDIDATE_READY` or `COMPLETED` or `CANDIDATE_BEST` with `it->m_time <= now`. So, it's possible that we have `CANDIDATE_DELAYED` and `REQUESTED` which should be updated, but we won't reach them because we quit. \n\nIs it not possible for some reason?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503163698,503163698,src/txrequest.cpp
naumenkogs,2020-10-12 09:40:35,"Is this safe?\nI guess as long as the change of position is moderate (happening within a peer). And perhaps can only go backward? I'm wondering if we may stuck in an endless loop here somehow...",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503170039,503170039,src/txrequest.cpp
naumenkogs,2020-10-12 09:47:33,Why is this useful? I guess handling dependencies? Worth documenting I think.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503174543,503174543,src/txrequest.cpp
naumenkogs,2020-10-12 09:52:43,Shouldn't this be outside the `if (it == m_index.get<ByPeer>().end()) {` condition and happen unconditionally?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503177712,503177712,src/txrequest.cpp
naumenkogs,2020-10-12 09:56:41,"I guess this ideally should happen atomically with setting `it` to REQUESTED? Otherwise, some call in-between these two actions may, for example, make another request for the same tx? (as they see there is no currently `REQUESTED`) ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503180137,503180137,src/txrequest.cpp
naumenkogs,2020-10-12 10:03:41,"I guess this implementation should assume that either false or true exists? Otherwise I'm not sure what happens.\nMaybe worth documenting or adding an explicit assert?\n",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503184403,503184403,src/txrequest.cpp
jnewbery,2020-10-12 12:13:58,"it's a bit gross that you're calling into an getter lambda function for peer1 through a peer2 method, but I guess it works, and now that `wait_until()` can't take a lock parameter I can't think of a cleaner way to do this.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503253418,503253418,test/functional/p2p_tx_download.py
jnewbery,2020-10-12 12:14:29,"This should be under the `p2p_lock` scope, since you're accessing `peer1.tx_getdata_count`",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503253680,503253680,test/functional/p2p_tx_download.py
jnewbery,2020-10-12 12:36:43,"Could this be racy? The pong from `peer_fallback` will be sent at almost the exact same time as the getdata, and maybe before. If we take the `p2p_lock` as soon as we receive the pong, then the getdata might not have arrived yet.\n\nHere's the log from a successful run\n\n```\nnode0 2020-10-12T12:31:39.447800Z (mocktime: 2020-10-12T12:32:40Z) [msghand] timeout of inflight wtx 0000000000000000",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503265556,503265556,test/functional/p2p_tx_download.py
jnewbery,2020-10-12 12:58:29,"This new function signature where we're returning pairs of <NodeId, GenTxid> makes me more convinced that there should be a follow-up PR to pull this function out of `GetRequestable()` and call it outside the context of a single peer (https://github.com/bitcoin/bitcoin/pull/19988/files#r499479782).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503278319,503278319,src/txrequest.cpp
jnewbery,2020-10-12 13:02:03,"The `WaitState` enum and this function seem superfluous now, since you can just replace the enum with a bool and use `IsWaiting()`.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503280475,503280475,src/txrequest.cpp
jnewbery,2020-10-12 13:04:40,"I think we can just say ""For CANDIDATE_DELAYED the reqtime; for REQUESTED the expiry; no meaning for CANDIDATE_READY, CANDIDATE_BEST and COMPLETED""",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503281990,503281990,src/txrequest.cpp
jnewbery,2020-10-12 13:06:05,Just drop this now that m_time has no meaning for CANDIDATE_READY and CANDIDATE_BEST.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503282823,503282823,src/txrequest.cpp
MarcoFalke,2020-10-12 14:17:38,"It would be possible to use `self.wait_until` and take the lock inside the lambda. Though, the lambda would no longer fit on one line then, which I didn't like.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503327319,503327319,test/functional/p2p_tx_download.py
MarcoFalke,2020-10-12 14:17:54,Good catch,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503327474,503327474,test/functional/p2p_tx_download.py
MarcoFalke,2020-10-12 14:18:13,Same here,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503327667,503327667,test/functional/p2p_tx_download.py
MarcoFalke,2020-10-12 14:22:58,"I didn't use a `wait_until` because I wanted to show that the fallback is selected ""immediately"" after expiry. When this is switched to a `wait_until`, it should probably use a short delay. An alternative would be to sync with two pings? :grimacing: \n\nNote to myself: There might be other places in the functional tests where this could be racy, though at least no others in this test script?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503330776,503330776,test/functional/p2p_tx_download.py
ariard,2020-10-12 15:17:29,Yes see https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459143538. It's not documented on actual tip. I thought it was addressed on a previous tip but can't find where.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503365902,503365902,src/txrequest.cpp
ariard,2020-10-12 15:53:48,"""Weird as peer2 should have the preference on gtxid2 request"".",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503387394,503387394,src/test/txrequest_tests.cpp
ariard,2020-10-12 15:56:28,"Shouldn't this say ""If gtxid2 is requested from peer2"".",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503389028,503389028,src/test/txrequest_tests.cpp
jnewbery,2020-10-12 15:59:10,"yeah, I think this is ok, just not very aesthetically pleasing!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503390673,503390673,test/functional/p2p_tx_download.py
jnewbery,2020-10-12 16:00:25,"Yeah, I think a wait until with 1 second is fine. On a p2p network, 1s seems close enough to immediate.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503391435,503391435,test/functional/p2p_tx_download.py
ariard,2020-10-12 17:07:40,"AFAICT, I think fallback in case of requestee disconnection isn't covered :\n\n```\ndiff --git a/test/functional/p2p_tx_download.py b/test/functional/p2p_tx_download.py\nindex 71877a6ee..92b327b36 100755\n--- a/test/functional/p2p_tx_download.py\n+++ b/test/functional/p2p_tx_download.py\n@@ -172,6 +172,24 @@ class TxDownloadTest(BitcoinTestFramework):\n             assert_equal(peer_fallba",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503426653,503426653,test/functional/p2p_tx_download.py
sipa,2020-10-12 17:13:33,"This is iterating the `ByTime` index, which is sorted by (state is CANDIDATE_DELAYED or REQUESTED, time). So in that index, all CANDIDATE_DELAYED and REQUESTED Announcements come before any others. If another one is reached, it means there are no CANDIDATE_DELAYED or REQUESTED left.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503429405,503429405,src/txrequest.cpp
ariard,2020-10-12 17:25:46,"If the clock keeps going back-and-forth but without never crossing announcements' `m_time`, _DELAYED are going to stale forever ? Maybe worth to document to be sure we have all the same understanding of the new behavior.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503434987,503434987,src/txrequest.h
sipa,2020-10-12 17:40:58,"I agree, and considered that, but it's a pain to make that have ""any order of calls has well-specified behavior"" that introduced a while ago. The problem is that ReceivedInv and RequestedTx cause the ""PostGetRequestable"" invariants to be violated until the next SetTimePoint. That's currently not a problem as the only way to observe that is through GetRequestable, which calls SetTimePoint. But if S",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503442183,503442183,src/txrequest.cpp
sipa,2020-10-12 17:59:24,`TxRequestTracker` is thread-agnostic so that's not allowed. The caller needs external synchronization if multiple threads are going to be accessing it.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503450607,503450607,src/txrequest.cpp
sipa,2020-10-12 18:15:39,That seems absolutely trivial. If your clock makes no long-term progress then obviously no time-based events can be guaranteed to happen.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503459996,503459996,src/txrequest.h
sipa,2020-10-12 18:56:16,What is the difference?,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503477308,503477308,src/test/txrequest_tests.cpp
sipa,2020-10-12 19:19:00,"Yes, it's safe. The key insight is that no other Announcement objects from the same peer are ever affected by this call (std::next(it) may be affected, but only if it's from a different peer). I've elaborated the comments to hopefully clarify this.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503486693,503486693,src/txrequest.cpp
sipa,2020-10-12 19:19:36,I've added a comment about this in txrequest.h (but not here; it's just following the specification defined there).,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503486936,503486936,src/txrequest.cpp
sipa,2020-10-12 19:21:07,"That's not necessary as it's only possible in case no CANDIDATE_BEST entry for the specified (peer, txhash) was found (if there was, then no other REQUESTED or CANDIDATE_BEST for the same txhash by another peer can exist, due to invariant that there is at most one of those per txhash). I've added more comments to hopefully clarify.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503487612,503487612,src/txrequest.cpp
sipa,2020-10-12 19:22:46,`ReceivedResponse` is supposed to have no having no effect in case no CANDIDATE or REQUESTED announcement with the specified peer/txhash combination exists. I've updated the comment in txrequest.h to clarify.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503488292,503488292,src/txrequest.cpp
sipa,2020-10-12 19:22:59,"Fixed, here and in other places.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503488375,503488375,test/functional/p2p_tx_download.py
sipa,2020-10-12 19:23:34,"I've made some changes to this effect. Please have a look, I'm not super familiar with the p2p functionality in the python tests.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503488614,503488614,test/functional/p2p_tx_download.py
sipa,2020-10-12 19:23:43,Gone.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503488675,503488675,src/txrequest.cpp
sipa,2020-10-12 19:23:53,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503488754,503488754,src/txrequest.cpp
sipa,2020-10-12 19:27:45,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503490421,503490421,src/txrequest.cpp
sipa,2020-10-12 19:27:58,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503490490,503490490,test/functional/p2p_tx_download.py
sipa,2020-10-12 19:28:11,Done.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503490557,503490557,src/test/txrequest_tests.cpp
sipa,2020-10-12 19:28:24,"Added, thanks!",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503490630,503490630,test/functional/p2p_tx_download.py
ariard,2020-10-12 20:36:27,"If I understand the test correctly, we (the unit test) request from the peer2, but peer2 is never a requester.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503519948,503519948,src/test/txrequest_tests.cpp
jnewbery,2020-10-12 21:35:53,"> ReceivedInv and RequestedTx cause the ""PostGetRequestable"" invariants to be violated until the next SetTimePoint.\n\nHow about calling `PromoteCandidateReady()` from `ReceivedInv()` if `reqtime` is before `m_time` and calling `MakeCompleted()` from `RequestedTx()` if `expiry` is before `m_time`? That means that the invariants in `PostGetRequestableSanityCheck()` are actually invariant all the ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503545954,503545954,src/txrequest.cpp
ajtowns,2020-10-12 21:37:24,"This seems like it has slightly worse behaviour if time jumps backwards significantly (by more than the request/expiry delays). In that case:\n\n * any txs that are currently REQUESTED and get a NOTFOUND will result in all the CANDIDATE_READY alternatives being immediately requested (expiry will be set to the past so will expire immediately)\n * any new txs that come in will get immediately pro",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503547250,503547250,src/txrequest.h
jnewbery,2020-10-12 21:40:02,"The `assert_equal(peer_fallback.tx_getdata_count, 1)` calls after the `wait_until()` calls aren't necessary (since if you've waited until something is true, then you don't need to assert it's true), but they're not doing any harm.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503548550,503548550,test/functional/p2p_tx_download.py
jnewbery,2020-10-12 21:44:20,"> The callback idea seems reasonable, and perhaps can be extended to more than just expirations\n\nYes, this could potentially be useful if there are other events that we want to expose to net_prociessing.\n\n> I'd like to keep it as a follow-up.\n\nI think whatever we do should be kept as a follow-up. Time to freeze this PR and get it merged :)",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503550147,503550147,src/txrequest.cpp
sipa,2020-10-12 22:08:31,Agree.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503558684,503558684,src/txrequest.cpp
sipa,2020-10-12 22:09:13,"Ok? I don't see the difference between the two sentences, except subject and object are swapped.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503558927,503558927,src/test/txrequest_tests.cpp
sipa,2020-10-12 22:09:59,"Ok, removed the last commit, and moved it to https://github.com/sipa/bitcoin/commits/202010_txrequest_rand_wtxid_monotime if we want it still.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503559217,503559217,src/txrequest.h
sipa,2020-10-12 22:13:43,"The wait_until tests for (>= 1), while the assertion tests for (== 1). So it would help catching the case where it errorneously instantly jumps to 2 or more.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503560487,503560487,test/functional/p2p_tx_download.py
ajtowns,2020-10-12 22:17:38,"We could use clang's lock annotations for the additional rule so the extra burden is on the compiler rather than the caller? Have SetTimePoint return an RAII mutex-like thing, make GetRequestable require the mutex-like is held, and make the other functions require that it not be held. cf #18017",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503561871,503561871,src/txrequest.cpp
naumenkogs,2020-10-13 07:00:23,"Oh, yeah, it works since it's sorted by state first, yeah.\nI just assumed it is sorted by time only..",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503710265,503710265,src/txrequest.cpp
naumenkogs,2020-10-13 07:04:59,Thanks!,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503712517,503712517,src/txrequest.cpp
naumenkogs,2020-10-13 07:10:27,Thanks!,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503715120,503715120,src/txrequest.cpp
naumenkogs,2020-10-13 07:19:45,Right.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503720038,503720038,src/txrequest.cpp
naumenkogs,2020-10-13 07:21:56,I see.,https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503721274,503721274,src/txrequest.cpp
naumenkogs,2020-10-13 07:24:04,"Sorry, I probably meant that both cannot exist at the same time? Otherwise this call can only delete one.\nBut since peer+tx_hash is supposed to be a unique tuple, I guess it is safe. Feel free to close this one.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503722503,503722503,src/txrequest.cpp
naumenkogs,2020-10-13 07:28:01,"The difference is the role of peer2.\nCurrently, peer2 is a requester. Antoine suggests that peer2 is a non-requester (it is a responder).",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503725108,503725108,src/test/txrequest_tests.cpp
jnewbery,2020-10-13 08:47:56,"Right, so it's asserting that a getdata doesn't contain multiple transaction `CInv`s. That doesn't seem relevant to the test scenario (functionally I think we're only interested that the transaction we're interested in is requested).\n\nMarking as resolved since I don't think it's important, just not necessary.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503776637,503776637,test/functional/p2p_tx_download.py
jnewbery,2020-10-13 08:51:33,"I don't like the idea of exporting more state and conditions to the caller, but we can discuss in the follow-up PR. Marking this resolved.",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503778982,503778982,src/txrequest.cpp
jnewbery,2020-10-13 09:06:39,"You've regressed this comment in the latest force push. It should say:\n\n`// Compare Size(), Count(), CountInFlight(), and CountCandidates() with naive structure.`",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r503789487,503789487,src/test/fuzz/txrequest.cpp
sdaftuar,2020-10-13 16:13:57,"It seems we no longer care whether the transaction was requested in order to mark the announcement as COMPLETED.  I wondered if this might cause any problems (DoS or otherwise), but I think this preferable to the current behavior.  Perhaps we should update the comment to omit the phrase ""for a tx we requested""?",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r504081144,504081144,src/net_processing.cpp
sdaftuar,2020-10-13 16:49:32,"Just wanted to note that this expiry timer in the old code is checking for no response (and logging it) after a much longer time period (10minutes or more) than in the new code, and the purpose was for re-enabling transaction relay with a peer that we might have stopped downloading from (which is not possible in the new code).\n\nI'm happy to have this new code that logs, as it should be helpful",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r504109956,504109956,src/net_processing.cpp
ajtowns,2020-10-14 04:07:19,"```c++\nif (it->m_peer != peer) return; // no tracked announcements\n// invariant from this point: it == end or it->m_peer == peer\nwhile (it != index.end()) {\n    auto it_next = std::next(it);\n    if (it_next != index.end() && it_next->m_peer != peer) it_next = index.end();\n    // do things with it, but don't affect any other announcement from peer, so it_next remains valid\n    it = it",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r504388689,504388689,src/txrequest.cpp
jnewbery,2020-10-14 08:13:48,"I think @ariard is correct here. See the comment above the previous code block:\n\n`// and request it from peer1 ...`\n\nThe unit test is simulating that the node has requested the transaction from peer 1.\n\nHere:\n\n`// If peer2 now (normally) requests gtxid2, the existing request by peer1 becomes COMPLETED.`\n\nis incorrect. The unit test is simulating that the node has requested the ",https://github.com/bitcoin/bitcoin/pull/19988#discussion_r504486111,504486111,src/test/txrequest_tests.cpp
