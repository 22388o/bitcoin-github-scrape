[
  {
    "sha": "9044522ef76f880760165d98fab024802ccfc062",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDQ0NTIyZWY3NmY4ODA3NjAxNjVkOThmYWIwMjQ4MDJjY2ZjMDYy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-02T17:35:01Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-04-07T08:53:26Z"
      },
      "message": "Drop JSONRPCRequest constructors after #21366\n\nThis just makes an additional simplification after #21366 replaced\nutil::Ref with std::any. It was originally suggested\nhttps://github.com/bitcoin/bitcoin/pull/21366#issuecomment-792044351 but\ndelayed for a followup. It would have prevented usage bug\nhttps://github.com/bitcoin/bitcoin/pull/21572.",
      "tree": {
        "sha": "63f8b5c4d33440fda5e50c34ca22c6f80f81e269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63f8b5c4d33440fda5e50c34ca22c6f80f81e269"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9044522ef76f880760165d98fab024802ccfc062",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9044522ef76f880760165d98fab024802ccfc062",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9044522ef76f880760165d98fab024802ccfc062",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9044522ef76f880760165d98fab024802ccfc062/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa69471ecd553dbcd7dd6d1b2e59dfb69d6a0cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa69471ecd553dbcd7dd6d1b2e59dfb69d6a0cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa69471ecd553dbcd7dd6d1b2e59dfb69d6a0cf3"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 28,
      "deletions": 41
    },
    "files": [
      {
        "sha": "225b8b1ec40f7bb27b1c7c377da9f1d9466e1aa0",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -224,7 +224,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitInterfaces(node) && AppInitMain(context, node);\n+        fRet = AppInitInterfaces(node) && AppInitMain(node);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");"
      },
      {
        "sha": "e11e4acb5c2dd0b6c64a8d6560049e48e86bb25c",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -159,7 +159,8 @@ static bool HTTPReq_JSONRPC(const std::any& context, HTTPRequest* req)\n         return false;\n     }\n \n-    JSONRPCRequest jreq(context);\n+    JSONRPCRequest jreq;\n+    jreq.context = context;\n     jreq.peerAddr = req->GetPeer().ToString();\n     if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", jreq.peerAddr);\n@@ -294,7 +295,7 @@ bool StartHTTPRPC(const std::any& context)\n     if (!InitRPCAuthentication())\n         return false;\n \n-    auto handle_rpc = [&context](HTTPRequest* req, const std::string&) { return HTTPReq_JSONRPC(context, req); };\n+    auto handle_rpc = [context](HTTPRequest* req, const std::string&) { return HTTPReq_JSONRPC(context, req); };\n     RegisterHTTPHandler(\"/\", true, handle_rpc);\n     if (g_wallet_init_interface.HasWalletSupport()) {\n         RegisterHTTPHandler(\"/wallet/\", false, handle_rpc);"
      },
      {
        "sha": "701a7529afa5cd16d5e84d4b0236281e9fd782fd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -788,7 +788,7 @@ static bool InitSanityCheck()\n     return true;\n }\n \n-static bool AppInitServers(const std::any& context, NodeContext& node)\n+static bool AppInitServers(NodeContext& node)\n {\n     const ArgsManager& args = *Assert(node.args);\n     RPCServer::OnStarted(&OnRPCStarted);\n@@ -797,9 +797,9 @@ static bool AppInitServers(const std::any& context, NodeContext& node)\n         return false;\n     StartRPC();\n     node.rpc_interruption_point = RpcInterruptionPoint;\n-    if (!StartHTTPRPC(context))\n+    if (!StartHTTPRPC(&node))\n         return false;\n-    if (args.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(context);\n+    if (args.GetBoolArg(\"-rest\", DEFAULT_REST_ENABLE)) StartREST(&node);\n     StartHTTPServer();\n     return true;\n }\n@@ -1277,7 +1277,7 @@ bool AppInitInterfaces(NodeContext& node)\n     return true;\n }\n \n-bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n+bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n {\n     const ArgsManager& args = *Assert(node.args);\n     const CChainParams& chainparams = Params();\n@@ -1382,7 +1382,7 @@ bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAn\n      */\n     if (args.GetBoolArg(\"-server\", false)) {\n         uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n-        if (!AppInitServers(context, node))\n+        if (!AppInitServers(node))\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n "
      },
      {
        "sha": "328eda9c7e859b13687ef2df76bae9ed79c1ab39",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -64,7 +64,7 @@ bool AppInitInterfaces(NodeContext& node);\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(const std::any& context, NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info = nullptr);\n+bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info = nullptr);\n \n /**\n  * Register all arguments with the ArgsManager"
      },
      {
        "sha": "e10e89b8cfee37429c4f25e24404c83899c095ca",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -80,7 +80,7 @@ class NodeImpl : public Node\n     }\n     bool appInitMain(interfaces::BlockAndHeaderTipInfo* tip_info) override\n     {\n-        return AppInitMain(m_context_ref, *m_context, tip_info);\n+        return AppInitMain(*m_context, tip_info);\n     }\n     void appShutdown() override\n     {\n@@ -244,7 +244,8 @@ class NodeImpl : public Node\n     CFeeRate getDustRelayFee() override { return ::dustRelayFee; }\n     UniValue executeRpc(const std::string& command, const UniValue& params, const std::string& uri) override\n     {\n-        JSONRPCRequest req(m_context_ref);\n+        JSONRPCRequest req;\n+        req.context = m_context;\n         req.params = params;\n         req.strMethod = command;\n         req.URI = uri;\n@@ -314,14 +315,8 @@ class NodeImpl : public Node\n     void setContext(NodeContext* context) override\n     {\n         m_context = context;\n-        if (context) {\n-            m_context_ref = context;\n-        } else {\n-            m_context_ref.reset();\n-        }\n     }\n     NodeContext* m_context{nullptr};\n-    std::any m_context_ref;\n };\n \n bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<RecursiveMutex>& lock, const CChain& active)"
      },
      {
        "sha": "71d258b077b56b6c5e25908c005c14bb99147586",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -317,7 +317,8 @@ static bool rest_chaininfo(const std::any& context, HTTPRequest* req, const std:\n \n     switch (rf) {\n     case RetFormat::JSON: {\n-        JSONRPCRequest jsonRequest(context);\n+        JSONRPCRequest jsonRequest;\n+        jsonRequest.context = context;\n         jsonRequest.params = UniValue(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo().HandleRequest(jsonRequest);\n         std::string strJSON = chainInfoObject.write() + \"\\n\";\n@@ -687,7 +688,7 @@ static const struct {\n void StartREST(const std::any& context)\n {\n     for (const auto& up : uri_prefixes) {\n-        auto handler = [&context, up](HTTPRequest* req, const std::string& prefix) { return up.handler(context, req, prefix); };\n+        auto handler = [context, up](HTTPRequest* req, const std::string& prefix) { return up.handler(context, req, prefix); };\n         RegisterHTTPHandler(up.prefix, false, handler);\n     }\n }"
      },
      {
        "sha": "bb091efea80992d3bbf85a718c57a6bf87c20ed8",
        "filename": "src/rpc/request.h",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/rpc/request.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/rpc/request.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/request.h?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -35,18 +35,7 @@ class JSONRPCRequest\n     std::string URI;\n     std::string authUser;\n     std::string peerAddr;\n-    const std::any& context;\n-\n-    explicit JSONRPCRequest(const std::any& context) : id(NullUniValue), params(NullUniValue), context(context) {}\n-\n-    //! Initializes request information from another request object and the\n-    //! given context. The implementation should be updated if any members are\n-    //! added or removed above.\n-    JSONRPCRequest(const JSONRPCRequest& other, const std::any& context)\n-        : id(other.id), strMethod(other.strMethod), params(other.params), mode(other.mode), URI(other.URI),\n-          authUser(other.authUser), peerAddr(other.peerAddr), context(context)\n-    {\n-    }\n+    std::any context;\n \n     void parse(const UniValue& valRequest);\n };"
      },
      {
        "sha": "e2f8725fcb38066d5015469f9346509354f4b9cf",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -33,8 +33,8 @@ UniValue RPCTestingSetup::CallRPC(std::string args)\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n     std::string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n-    std::any context{&m_node};\n-    JSONRPCRequest request(context);\n+    JSONRPCRequest request;\n+    request.context = &m_node;\n     request.strMethod = strMethod;\n     request.params = RPCConvertValues(strMethod, vArgs);\n     if (RPCIsInWarmup(nullptr)) SetRPCWarmupFinished();"
      },
      {
        "sha": "23bdaa671a3e777609ee58711228e5213c7c28fb",
        "filename": "src/wallet/interfaces.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/wallet/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/wallet/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/interfaces.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -514,15 +514,19 @@ class WalletClientImpl : public WalletClient\n     {\n         for (const CRPCCommand& command : GetWalletRPCCommands()) {\n             m_rpc_commands.emplace_back(command.category, command.name, [this, &command](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n-                return command.actor({request, &m_context}, result, last_handler);\n+                JSONRPCRequest wallet_request = request;\n+                wallet_request.context = &m_context;\n+                return command.actor(wallet_request, result, last_handler);\n             }, command.argNames, command.unique_id);\n             m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n         }\n \n #ifdef ENABLE_EXTERNAL_SIGNER\n         for (const CRPCCommand& command : GetSignerRPCCommands()) {\n             m_rpc_commands.emplace_back(command.category, command.name, [this, &command](const JSONRPCRequest& request, UniValue& result, bool last_handler) {\n-                return command.actor({request, &m_context}, result, last_handler);\n+                JSONRPCRequest wallet_request = request;\n+                wallet_request.context = &m_context;\n+                return command.actor(wallet_request, result, last_handler);\n             }, command.argNames, command.unique_id);\n             m_rpc_handlers.emplace_back(m_context.chain->handleRpc(m_rpc_commands.back()));\n         }"
      },
      {
        "sha": "01f2dfe06bfd278754edd3a0ec1cf5a8238ca7e8",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9044522ef76f880760165d98fab024802ccfc062/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9044522ef76f880760165d98fab024802ccfc062/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=9044522ef76f880760165d98fab024802ccfc062",
        "patch": "@@ -213,8 +213,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n         key.pushKV(\"timestamp\", newTip->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1);\n         key.pushKV(\"internal\", UniValue(true));\n         keys.push_back(key);\n-        std::any context;\n-        JSONRPCRequest request(context);\n+        JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back(keys);\n \n@@ -265,8 +264,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n             AddWallet(wallet);\n             wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         }\n-        std::any context;\n-        JSONRPCRequest request(context);\n+        JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back(backup_file);\n \n@@ -281,8 +279,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n-        std::any context;\n-        JSONRPCRequest request(context);\n+        JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back(backup_file);\n         AddWallet(wallet);"
      }
    ]
  }
]