amitiuttarwar,2021-02-02 07:23:50,"## Future work \nto be addressed either in this PR or a follow up: \n- persist rebroadcast attempt tracker to disk\n- remove wallet dependency for `p2p_rebroadcast.py` \n\n## Merge Plan & Next Steps:\nAll of the functionality in this PR is hidden behind a configuration switch that defaults to off, and the wallet rebroadcast logic is currently untouched. The idea is to make these changes as s",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879,771426879,
DrahtBot,2021-02-02 08:05:13,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21866 ([Bundle 7/7] validation: Farewell, global Chainstate! by dongcarl)\n* #21789 (refactor: Remove ::Params() global f",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771448221,771448221,
amitiuttarwar,2021-02-03 03:32:21,marking as draft until I resolve CI issues,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-772195305,772195305,
amitiuttarwar,2021-02-10 02:44:12,"rebased master, added a functional test, some small fixups. \n\nthis PR is ready for review! 🎈",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-776398956,776398956,
amitiuttarwar,2021-02-16 20:27:35,rebased,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-780097794,780097794,
amitiuttarwar,2021-02-17 23:29:05,rebased to include #21121,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-780922203,780922203,
casey,2021-02-28 00:52:52,"This seems like a big win, both for privacy and for quality of service. There are a lot of nodes out there with larger-than-default mempools, and if this were the default, they would serve as reservoirs for transactions that were dropped from the default mempool, eventually rebroadcasting them when they noticed that they had a chance of getting confirmed. This would save users from sometimes havin",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-787211962,787211962,
amitiuttarwar,2021-02-28 22:17:36,"@casey thanks for taking a look! \n\nThe current code does have some logging, the most relevant statement firing here: https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R90. This prints the transactions hashes where a rebroadcast will ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-787533629,787533629,
casey,2021-03-01 06:09:15,"> The current code does have some logging, the most relevant statement firing here:\n\nAh, excellent! I was looking where the transactions are actually rebroadcast, so I missed that. What's there looks good, I can't think of anything else I'd want.\n\n> …but I'd love to gather more data so It'd be helpful if you are willing to run the patch and share your findings.\n\nI was thinking about ru",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-787673640,787673640,
amitiuttarwar,2021-03-02 05:15:10,"@casey \n\n> I was thinking about running a node with a very large max mempool size, as well as no mempool expiration time, to try to maximize transaction rebroadcasting\n\nyup, that's exactly what I did, I also minimized the `feefilter` and `minrelaytxfee` to ensure I'd get all the transactions. \n\n> I'll definitely share the logs if I wind up doing this!\n\nsounds good, thanks :) ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-788594423,788594423,
amitiuttarwar,2021-03-04 22:27:15,Rebased,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-790989016,790989016,
amitiuttarwar,2021-03-11 23:34:30,Rebased,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797121429,797121429,
prayank23,2021-03-12 00:45:57,"Motivation and PR overview looks interesting. Couldn't compile though. Maybe I should have checked CI results.\n\n![image](https://user-images.githubusercontent.com/13405205/110874750-525a0c00-82fa-11eb-9a14-e632f0084574.png)\n\n\n",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797153844,797153844,
amitiuttarwar,2021-03-12 18:39:21,@prayank23 Thanks for taking a look. I missed the tests in a recent rebase. It should be fixed now,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797676411,797676411,
prayank23,2021-03-13 00:58:42,"Concept ACK. Have few questions about the approach and will mention them below. Compiled successfully on Ubuntu. Tests passed.\n\n> Conceptually, we want to rebroadcast transactions that we believe “should” have been mined by now.\n\nNot sure about this part. Can we randomly rebroadcast different transactions to make it difficult for spy nodes to notice any pattern?\n\nI used below `bitcoin.",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797836751,797836751,
laanwj,2021-03-24 09:15:19,"Sorry to bring bad news but this needs rebase. There is a silent merge conflict (with 680eb56d828ce358b4e000c140f5b247ff5e6179 part of #21162). Merged on top of master the following build error appears:\n```\n  CXX      libbitcoin_server_a-net_processing.o\nnet_processing.cpp:1396:55: error: too many arguments to function call, expected 2, have 3\n            RelayTransaction(ids.m_txid, ids.m",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-805633642,805633642,
prayank23,2021-03-25 00:01:23,"~~NACK if:~~\n\n~~1. Not random\nhttps://github.com/bitcoin/bitcoin/pull/21061#issuecomment-797836751~~\n\n~~2.  User cannot decide REBROADCAST_MIN_TX_AGE https://github.com/bitcoin/bitcoin/pull/21061#discussion_r593968023~~\n\n~~Because, then it does not achieve things mentioned in  motivation: _This is bad for privacy because it leaks information that allows spy nodes to link bitcoin addr",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806259991,806259991,
sipa,2021-03-25 00:07:22,"@prayank23 I think you're confused about the goal of this PR. The current problem is that rebroadcasting is something that _only_ happens for your own transactions. Any peer that observes rebroadcasting knows for a fact that it is yours. This PR changes things so that rebroadcasting is done uniformly for *all* transactions, without special treatment of your own. By definition, if the fact whether ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806262328,806262328,
prayank23,2021-03-25 00:44:53,"> This PR changes things so that rebroadcasting is done **uniformly for all transactions**, **without special treatment** of your own. By definition, if the fact whether a transaction is yours is no longer used in the decision to rebroadcast or not, there is no signal any peer can infer anything from.\n\nThis PR improves on 1 thing: They are not all mine\nThis PR adds 1 thing: New pattern (fee ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806276155,806276155,
sipa,2021-03-25 01:09:02,"> This PR adds 1 thing: New pattern (fee rate and time in mempool)\n\nI see what you mean now. Indeed, it does, but I think this is completely negligible. What it leaks about the mempool is on a scale of 30 minutes to hours. Within such amounts of time, we already reveal the transactions we've learned (simply by telling other nodes in the process of normal relay, every few seconds). The concern ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806284509,806284509,
prayank23,2021-03-26 08:14:26,"I thought of different scenarios including weekends when we see less transactions but couldn't find anything that supports my argument. So I change my opinion for now and maybe need to do more research. This PR improves things and if there is any need for further changes to improve privacy it can be done in follow up PRs.\n\nBelow is a diagram in which I was trying to visualize what happens in A",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-808026799,808026799,
0xB10C,2021-03-31 13:33:39,Concept ACK: this removes the rebroadcasting privacy leak\n\nI found the your [summary](https://github.com/amitiuttarwar/bitcoin-notes/blob/main/rebroadcast-history.md) of the previous discussion very helpful and still want to think though some of the edge cases in regards to e.g. bandwidth usage (which I think is already in a good state).\n\n--- \n\n@prayank23 I'm not sure I understood your conce,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-811072127,811072127,
laanwj,2021-04-07 14:14:19,"Looks like 7b8e976cd5ac78a22f1be2b2fed8562c693af5d9 (#21525) introduced a small merge conflict with 9307196d13ec589f01546ff8c4758211fc1d48cb in `miner.cpp` (function `BlockAssembler::CreateNewBlock`).\n\nI think it can be solved by changing `chainparams` to `m_chainparams` on the affected line.\nEdit: no, it is needed on more lines. This is just the only one where an explicit conflict happens.",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-814949875,814949875,
amitiuttarwar,2021-04-08 02:08:53,"thank you all for the reviews! I'm working on incorporating/addressing all the comments. I've taken a first pass, but am still working my way through, I'll post again when I believe I've addressed all outstanding comments. ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-815393414,815393414,
vasild,2021-04-09 15:09:05,"Two noob questions (I did not look at the code):\n\n1. Could it happen that well propagated transactions with high fees are unnecessary rebroadcasted by all nodes at the same time, if a new block is mined that does not include them? Could this even be common? @0xB10C do you have some stats, on average, per block, how many transactions are not mined, that should have been mined?\n\n2. Wrt trans",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-816751363,816751363,
0xB10C,2021-04-09 21:41:45,"> 0xB10C do you have some stats, on average, per block, how many transactions are not mined, that should have been mined?\n\nOver the last ~2350 blocks there were on average 38 transactions (standard derivation of 116) and median 15 transactions not in the the block that my node's template (generated a few seconds before the pool-set block time ¹ ) would have included. Not all of these on averag",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-816987152,816987152,
vasild,2021-04-12 08:38:36,"@0xB10C, thanks!\n\nSo, to summarize, most of the time, shortly after every block is created, all nodes (that run this software) will rebroadcast a few 10s of transactions (and occasionally a few 1000s of transactions (corresponding to max 3226 above)). And this will be because miners' algo for composing a block differ from ours, not necessary because the transactions are not well propagated.\n",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-817610973,817610973,
ajtowns,2021-04-15 03:29:42,"FWIW, I've been running this for about a week (a total of 1012 blocks), and most blocks result in an attempt to rebroadcast 6 or fewer txs, 75% of blocks are 51 or under, 99% of blocks are under 600 transactions, and the highest 1% of blocks result in 586- 1075 txs being queued for rebroadcast.\n\nI haven't investigated how many of these ""queued for attempted rebroadcast"" txs actually result in ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-820030611,820030611,
amitiuttarwar,2021-04-16 23:31:21,"thank you all SO MUCH for these reviews 🙌🏽 I believe I have addressed all outstanding review comments 🎉 I have one more piece of functionality I'd like to implement in this patch ([link](https://github.com/bitcoin/bitcoin/pull/21061#discussion_r596515495)), but otherwise everything in this PR should be current and ready for further review.\n\nMy next step is to develop a patch for more insightfu",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-821722492,821722492,
DISC30,2021-04-21 05:19:25,Hey @amitiuttarwar what is the best way to pay you for the work you have done? I don't have BTCPay but can do static address or paypal.,https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-823783793,823783793,
fjahr,2021-04-25 13:25:26,"I haven't followed the project in detail over the past few months and might have missed some discussions on this aspect, so forgive me if this is a stupid question: The issues around nodes that use this new module but are not aware of a new softfork were discussed in the review club and also that `m_attempt_tracker` seems to resolve the issue. But it seems this could be exploited by an attacker at",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-826324358,826324358,
ajtowns,2021-04-29 11:45:15,"> But it seems this could be exploited by an attacker at almost zero cost, spamming these nodes with such txs that are high fee but invalid under the new rules.\n\nIf the txs are invalid under the new rules no node will accept them -- new nodes won't because they'll be invalid, old nodes won't because anything covered by the new rules is non-standard so not acceptable to the mempool/for relay.\",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-829160497,829160497,
amitiuttarwar,2021-05-05 20:35:24,"I believe all review comments are now addressed (including the explanations below) 🎈\n\nSome updates about the latest push: \n- The rebroadcast logic now mines a block with a weight of 3/4 weight-of-incoming-block instead of 3/4 weight-of-maximum-block, to reduce bandwidth spikes \n- Rebased on master to resolve a silent merge conflict \n- We now store the last two values for the fee-rate cac",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-832989504,832989504,
ariard,2021-05-06 18:22:27,"@amitiuttarwar \n\n> I don't understand what you are trying to say here. I don't find it unexpected or undesirable for various applications, users, companies to run custom rebroadcast logic. \n\nI think the problem this work is alleguing to solve is ""How to improve Bitcoin Core Wallet rebroadcast privacy"". The solution proposed is to rebroadcast _any_ transaction identified as missing from a b",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-833755057,833755057,
michaelfolkson,2021-05-06 19:01:34,"@ariard: To summarize, I think what you are concerned with is the rebroadcast privacy offered by this module to nodes that are using it assuming only a minority (perhaps a small minority) of the network is using it. This module is currently off by default and according to you (I have no reason to doubt you) a significant proportion of the network is already running custom rebroadcast logic.\n\nT",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-833784113,833784113,
prayank23,2021-05-07 00:29:17,"> However, and that's my point, a lot of full-nodes are hosting Bitcoin applications with custom rebroadcast logic, and this trend is likely to increase in the future\n\nInteresting. Can you please share few examples?",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-833970247,833970247,
ariard,2021-05-07 18:16:26,"@michaelfolkson \n\n> @ariard: To summarize, I think what you are concerned with is the rebroadcast privacy offered by this module to nodes that are using it assuming only a minority (perhaps a small minority) of the network is using it. This module is currently off by default and according to you (I have no reason to doubt you) a significant proportion of the network is already running custom r",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-834668685,834668685,
michaelfolkson,2021-05-08 13:54:07,"@ariard:\n\n> Where I'm really skeptical is about activating by default this module in the future and thus inflating everyone's bandwidth if only a minority of nodes operators are benefiting from the feature.\n\n> Most of Lightning nodes implementations are able to CPFP their transactions. It might be automatically triggered by a block-based timer, a user-selected once-for-all height confirmat",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-835373212,835373212,
sdaftuar,2021-05-31 15:33:29,"I've been simulating the behavior of this logic using historical transaction and block data, and I have some general concept thoughts:\n\n1) In a situation where a transaction propagated reasonably well, it doesn't make sense that the whole network should simultaneously try to rebroadcast that transaction at the same time.  That is needlessly bandwidth-wasteful, as it results in an INV for that ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-851563105,851563105,
sdaftuar,2021-06-01 14:00:47,"I had one other thought about how we select transactions for rebroadcast; I think it could be problematic to base transaction rebroadcast solely on how transactions in our mempool compare to transactions that we would select in `CreateNewBlock` without regard to what transaction fees we're actually seeing in blocks on the network.\n\nImagine that you are running a somewhat older node, and there ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-852149829,852149829,
amitiuttarwar,2021-06-04 21:57:49,"Marking this PR as draft-\nAfter offline conversations with @ajtowns, @sdaftuar & @jnewbery, I'm planning to rework the approach of this patch to increase the requirements for a transaction to be rebroadcast. The biggest change will be only sending an INV after a transaction has been missed from 3 blocks. ",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-855023462,855023462,
prayank23,2021-07-30 17:31:24,"I was searching for privacy related PRs to review and write tests using PowerShell scripts for my project.\n\nFound this PR in the search results which I had already reviewed in March 2021, however I don't think writing test for it makes sense based on last two comments.\n\nAlso agree with the things mentioned by Suhas Daftuar. \n\n> I'm planning to rework the approach of this patch to incre",https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-890045629,890045629,
amitiuttarwar,2021-02-08 17:44:59,"I'm importing this file so I can use the default key extractors in the `indexed_rebroadcast_set` multi_index: 1. https://github.com/bitcoin/bitcoin/pull/21061/files#diff-eccf6b88ae8b612dbdbdb92c110b66e4e7e3ffa665ccdc1acf08093aadc66b82R49 2. https://github.com/bitcoin/bitcoin/pull/21061/files#diff-eccf6b88ae8b612dbdbdb92c110b66e4e7e3ffa665ccdc1acf08093aadc66b82R55\n\nThe contents of the boost hea",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r572243729,572243729,test/lint/lint-includes.sh
laanwj,2021-02-11 06:58:44,"I think it's fine to add a boost multi_index header dependency, it's the only submodule of boost that we really need and for which there is no replacement on the horizon. So just use what you need IMO, re-implementing anything from multi-index without a good plan would be a waste of time, I think. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r574281895,574281895,test/lint/lint-includes.sh
prayank23,2021-03-14 22:03:37,Any reasons for 30 minutes? Less than 30 minutes might have issues. What if we use more than 30 minutes or user can define this in `bitcoin.conf`?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r593968023,593968023,src/txrebroadcast.cpp
jnewbery,2021-03-15 20:27:25,"Prefer default initialization when a member will always be initialized to the same value.\n\n```suggestion\n    int m_count{1};\n```\n\nAnd remove `m_count` from the initializer list.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594660140,594660140,src/txrebroadcast.h
jnewbery,2021-03-15 20:28:58,I think this is unused.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594661183,594661183,src/txrebroadcast.h
jnewbery,2021-03-15 20:38:08,"It seems unnecessary to define a type here. `GetRebroadcastTransactions()` could just return a vector of std::pairs, and the one caller (`UpdatedBlockTip()`) can unpack that vector of pairs using :sparkle: s t r u c t u t e d :sparkle: b i n d i n g s :sparkle:. Here's what the caller would look like:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 7811e3ca40..e",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594666637,594666637,src/txrebroadcast.h
jnewbery,2021-03-15 20:44:21,"Perhaps make this a unique_ptr, and then pass in a boolean to the PeerManagerImpl ctor to indicate whether you want to enable tx rebroadcast and initialize the pointer.\n\nThen, in `UpdatedBlockTip`:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 7811e3ca40..8bb5e8f87f 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -1392,8 +1392,8 @",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594670252,594670252,src/net_processing.cpp
jnewbery,2021-03-15 20:46:39,"Prefer default initialization in the declaration, rather than setting these in the ctor.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594671707,594671707,src/miner.cpp
jnewbery,2021-03-15 20:48:04,These aren't doing anything. They already get set in the `Options` constructor.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594672688,594672688,src/miner.cpp
jnewbery,2021-03-15 20:49:54,not needed!,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594673886,594673886,src/test/txrebroadcast_tests.cpp
jnewbery,2021-03-15 20:50:31,"Separate library imports from local project imports:\n\n```suggestion\n#include <boost/test/unit_test.hpp>\n\n#include <amount.h>\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594674279,594674279,src/test/txrebroadcast_tests.cpp
jnewbery,2021-03-15 20:55:29,It'd be really nice to avoid including these boost headers in a header that will transitively be included in a lot of translation units. Could you hide the `indexed_rebroadcast_set` inside the .cpp file to avoid this?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r594677303,594677303,src/txrebroadcast.h
jnewbery,2021-03-16 10:20:02,"A quick and easy way to do this is to make `indexed_rebroadcast_set` a class that inherits from the `boost::multi_index_container` template class (defined in .cpp), forward declare it in .h and make `m_attempt_tracker` a unique pointer to `indexed_rebroadcast_set`. A few other things need to be shuffled around to make that work, but here's a rough implementation:\n\n<details>\n<summary>Diff</su",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r595033242,595033242,src/txrebroadcast.h
ajtowns,2021-03-18 02:50:16,"Could keep the old cached fee rate here, so that if you try end up doing `UpdateTip / CacheMinRebroadcastFee / RebroadcatTxs` you can do something sensible?\n\n```c++\n   new_tip = ::ChainActive().Tip();\n   if (new_tip != m_tip_at_cache_time) {\n       m_last_cached_fee_rate = m_cached_fee_rate;\n   } else {\n       m_last_cached_fee_rate = max; // ?\n   }\n   m_tip_at_cache_time = new_t",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r596515495,596515495,src/txrebroadcast.cpp
ajtowns,2021-03-18 02:54:33,"txrebroadcast.h is only included from net_processing and txrebroadcast.cpp itself, and net_processing already includes txmempool.h so there's not much saving to be had here I think",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r596516729,596516729,src/txrebroadcast.h
jnewbery,2021-03-24 12:17:30,"Not currently, but I think a long-term it'd be good to remove the boost header dependencies from modules that aren't using boost multi_index. That'd involve refactoring the txmempool interface so it's not exposing multi_index objects.\n\nTo be honest, I'm not entirely sure how much actual benefit this would have on build times and binary size. I think that boost multi_index is almost entirely te",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600423847,600423847,src/txrebroadcast.h
mzumsande,2021-03-24 23:51:06,Why is this lock added in the first commit and then removed?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600948474,600948474,src/txrebroadcast.cpp
mzumsande,2021-03-25 00:02:14,Entries from `m_attempt_tracker` seem to be only cleared after 3 months or when it's full. Shouldn't we also remove them if the tx is removed from the mempool because it has made it into a block (which would seem like the most common cause for removing)?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600952359,600952359,src/txrebroadcast.cpp
mzumsande,2021-03-25 00:10:19,"The mempool is persisted to disk, would it make sense to do the same with the rebroadcast tracker? With the index designed to keep a memory of months, I'd guess that several nodes would undergo several restarts during such a long period and, currently, lose all memory about past rebroadcasts.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r600955209,600955209,src/txrebroadcast.h
jnewbery,2021-03-26 10:27:16,"We're trying to get rid of global calls like `Params()`. Consider adding a:\n\n```\n    const CChainParams& m_chainparams;\n```\n\nmember to `TxRebroadcastHandler` and setting it in the ctor (like `PeerManagerImpl` does)",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602170601,602170601,src/txrebroadcast.cpp
jnewbery,2021-03-26 12:38:06,"```suggestion\n    bool m_check_block_validity;\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602247755,602247755,src/miner.h
jnewbery,2021-03-26 12:41:37,"The type is obvious from the template parameter, so may be a good place to use auto:\n\n```suggestion\n    auto start_time = GetTime<std::chrono::microseconds>();\n```\n\n(and in the other calls to `GetTime`)",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602249928,602249928,src/txrebroadcast.cpp
jnewbery,2021-03-26 12:46:16,AUTO,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602253880,602253880,src/txrebroadcast.cpp
jnewbery,2021-03-26 12:47:38,"Maybe better to use ""us"" instead of ""µs"" to keep logs in ascii.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602255196,602255196,src/txrebroadcast.cpp
jnewbery,2021-03-26 12:53:40,Also make sure that you remove transactions that are conflicted out by the block (ie a conflicting transaction is included in the block).,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602260866,602260866,src/txrebroadcast.cpp
jnewbery,2021-03-26 12:59:11,use `std::make_unique()` to make unique pointers.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602266206,602266206,src/miner.cpp
jnewbery,2021-03-26 13:00:03,This seems impossible to hit. You've just constructed a new `std::unique_ptr<CBlockTemplate>`.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602267130,602267130,src/miner.cpp
jnewbery,2021-03-26 13:01:11,I don't think this is needed. Witness is definitely enabled at the tip!,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602268144,602268144,src/miner.cpp
jnewbery,2021-03-26 13:03:02,Avoid calls to the global `::ChainActive()`.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602269820,602269820,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:03:10,"```suggestion\n    auto start_time = GetTime<std::chrono::microseconds>();\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602269986,602269986,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:03:54,"Functions should be capitalized:\n\n```suggestion\n    CFeeRate MinTxFeeRate();\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602270596,602270596,src/miner.h
jnewbery,2021-03-26 13:05:25,"again, maybe avoid greek letters:\n\n```suggestion\n    LogPrint(BCLog::BENCH, ""Caching minimum fee for rebroadcast to %s, took %d us to calculate.\n"", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602272135,602272135,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:09:48,Are these definitely needed? You're just going to throw the block template away at the end.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602276459,602276459,src/miner.cpp
jnewbery,2021-03-26 13:10:12,Avoid the global `::ChainActive()`,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602276869,602276869,src/miner.cpp
jnewbery,2021-03-26 13:12:33,I don't think this is needed. You're throwing away the block afterwards.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602278993,602278993,src/miner.cpp
jnewbery,2021-03-26 13:12:42,join these lines?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602279120,602279120,src/miner.cpp
jnewbery,2021-03-26 13:17:38,Is `cs_main` definitely required here? `addPackageTxs()` isn't annotated to say that it's required.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602283867,602283867,src/miner.cpp
jnewbery,2021-03-26 13:32:06,"`min_package_fee_rate` seems very cheap to calculate. Perhaps just make it a reference so it's always returned.\n\n(even better would be:\n\n```suggestion\nstd::tuple<int, int, CFeeRate> BlockAssembler::addPackageTxs()\n```\n\nbut that's maybe beyond the scope of this PR)",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602295773,602295773,src/miner.cpp
jnewbery,2021-03-26 13:40:39,avoid global `::ChainActive`,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602301898,602301898,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:46:30,"I think we prefer to include all headers that are used in the translation unit, even if they're also included in the corresponding header file. You don't need to remove the ""#include <util/time.h> in the _[rebroadcast] Track rebroadcast attempts_ commit.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602306177,602306177,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:47:29,"Perhaps add some of the description from the _[rebroadcast] Track rebroadcast attempts_ commit log here. It's not at all obvious why we'd stop rebroadcasting after some time, and that commit log has a good explanation.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602306915,602306915,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:52:23,Maybe pass in the current time to avoid calling `GetTime()` for every transaction?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602310627,602310627,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:55:51,"y so verbose?\n\n```suggestion\nstatic constexpr std::chrono::hours MAX_ENTRY_AGE = 24h * 30 * 3;\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602313388,602313388,src/txrebroadcast.cpp
jnewbery,2021-03-26 13:58:26,"Import standard libraries first, then local modules (this is the opposite order from c++)",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602315679,602315679,test/functional/p2p_rebroadcast.py
glozow,2021-04-01 21:26:23,braced initialization? 😛 ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605955358,605955358,src/txrebroadcast.cpp
glozow,2021-04-01 21:34:05,"Why oldest and not random eviction, for example?\nHave you considered having a configurable value (similar to `-maxorphantx`)?",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605958836,605958836,src/txrebroadcast.h
glozow,2021-04-01 21:48:08,"Other cases:\n- tx was RBFed out of mempool\n- parents were invalidated by conflicting tx in mempool and/or block\n\n~I think it boils down to = if we aren't keeping the tx in mempool, don't keep it in the rebroadcast tracker.~ I totally misunderstood, I thought you wouldn't want a tx in rebroadcast tracker if you didn't have it in mempool, but actually you'd want to keep it for a bit.\n\n",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605964572,605964572,src/txrebroadcast.cpp
glozow,2021-04-01 21:55:02,"~I don't think we should rebroadcast after every block if we're in IBD?~\nNevermind there's already an IBD gate above",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605967262,605967262,src/net_processing.cpp
glozow,2021-04-01 21:58:17,"Same, maybe not worth doing until after IBD?",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r605968636,605968636,src/net_processing.cpp
amitiuttarwar,2021-04-03 02:14:31,"so you'd prefer if I hard coded this to `fIncludeWitness = true`? \n🤔 `IsWitnessEnabled` doesn't seem like an expensive function. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r606592920,606592920,src/miner.cpp
i0x0ff,2021-04-07 06:46:11,"Removing entries from `m_attempt_tracker` when tx is removed from mempool doesn't seem necessary given `m_attempt_tracker` isn't used as a source for txs that need to be rebroadcasted.\n\nI also don't see an issue with keeping txs that have already been included in a block or RBFed out of mempool in the `m_attempt_tracker` for up to 90 days (as per current setting) or till it gets removed after ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r608381620,608381620,src/txrebroadcast.cpp
practicalswift,2021-04-07 09:42:05,Super small nit: Since this is new code - consider renaming as `after_cnb_time` to conform to the symbol naming conventions as described in the developer notes? :),https://github.com/bitcoin/bitcoin/pull/21061#discussion_r608501464,608501464,src/txrebroadcast.cpp
mzumsande,2021-04-07 16:40:54,"> Removing entries from `m_attempt_tracker` when tx is removed from mempool doesn't seem necessary given `m_attempt_tracker` isn't used as a source for txs that need to be rebroadcasted.\n\nI agree that rebroadcast would still work - the problem is more that `m_attempt_tracker` might not be able to fulfill its intended purpose with a 500 limit if it was keeping track of too many unnecessary tran",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r608820579,608820579,src/txrebroadcast.cpp
amitiuttarwar,2021-04-07 23:28:31,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609138170,609138170,src/txrebroadcast.h
amitiuttarwar,2021-04-07 23:28:50,removed,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609138293,609138293,src/txrebroadcast.h
amitiuttarwar,2021-04-07 23:31:12,"yeah, I considered this approach but I went for an explicitly defined structure because its easy to mix up txid & wtxid, and doing so would cause quiet failures. It feels harder for a call site to accidentally mixup with the named access. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609139124,609139124,src/txrebroadcast.h
amitiuttarwar,2021-04-07 23:31:42,great idea! done ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609139254,609139254,src/net_processing.cpp
amitiuttarwar,2021-04-07 23:35:55,"good point, removed",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609140585,609140585,src/miner.cpp
amitiuttarwar,2021-04-07 23:36:04,removed,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609140637,609140637,src/test/txrebroadcast_tests.cpp
amitiuttarwar,2021-04-07 23:40:55,"I separated them, but I have boost after internal. Is that ok? Btw, I don't see anything in the style guide about this, maybe we should add? ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609142392,609142392,src/test/txrebroadcast_tests.cpp
amitiuttarwar,2021-04-07 23:49:10,"I don't think that having the boost headers has much tangible impact, but I decided to implement mostly for code legibility. The boost logic was ~1/2 of `txrebroadcast.h`, obscuring the way the module is supposed to be interacted with. I think it'd be fine for now, but more annoying if the rebroadcast logic were to get any more complex, which I think is a possibility. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609145300,609145300,src/txrebroadcast.h
amitiuttarwar,2021-04-07 23:50:44,"oops, removed",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609145812,609145812,src/txrebroadcast.cpp
amitiuttarwar,2021-04-07 23:54:01,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609146845,609146845,src/txrebroadcast.cpp
amitiuttarwar,2021-04-07 23:54:24,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609146983,609146983,src/miner.h
amitiuttarwar,2021-04-07 23:55:49,"ok ok, I think I auto-ed the `GetTime` call sites. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609147479,609147479,src/txrebroadcast.cpp
amitiuttarwar,2021-04-07 23:56:21,"aw man, I thought I was _so cool_ ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609147657,609147657,src/txrebroadcast.cpp
amitiuttarwar,2021-04-07 23:56:45,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609147770,609147770,src/miner.cpp
amitiuttarwar,2021-04-07 23:57:35,"yeah, looks like I copied this from `CreateNewBlock` and thought it was a ""safety check"" but I agree, it seems pointless. Removed.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609148059,609148059,src/miner.cpp
amitiuttarwar,2021-04-08 00:04:45,done by making chainman a member,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609150392,609150392,src/txrebroadcast.cpp
amitiuttarwar,2021-04-08 00:05:04,fixed,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r609150476,609150476,src/miner.h
amitiuttarwar,2021-04-08 19:49:05,"I think you're right, so I've removed these three lines. nice catch! ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610047195,610047195,src/miner.cpp
amitiuttarwar,2021-04-08 19:51:40,fixed ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610048842,610048842,src/miner.cpp
amitiuttarwar,2021-04-08 19:52:47,"agreed, gone",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610049607,610049607,src/miner.cpp
amitiuttarwar,2021-04-08 22:29:21,fixed ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r610161831,610161831,src/txrebroadcast.cpp
achow101,2021-04-12 20:06:55,"In 06890651027cc50bdf3897283386a973bbf55725 ""[mining] Add recency condition on block creation to get rebroadcast set""\n\nThis comment could be clearer as `m_skip_inclusion_until` isn't really an age. Rather we exclude any transactions that entered the mempool after the time specified by `m_skip_inclusion_until`.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611919507,611919507,src/miner.h
achow101,2021-04-12 20:26:14,"In 8b4db051bac56cefa8c85fe20e5548ddfab0f070 ""[rebroadcast] Apply a fee rate filter""\n\nI'm having a hard time understanding how this comment explains the condition here. Could you explain in more detail?",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611930625,611930625,src/txrebroadcast.cpp
achow101,2021-04-12 21:03:35,"In d579110263ad07386f1fbf796a3397a12340b6d5 ""[test] Add unit test for rebroadcast attempt logic""\n\nIt seems like this for loop is not necessary as it is essentially doing `m_count += count`. Could instead be:\n\n```suggestion\n    auto UpdateRebroadcastEntry = [last_attempt_time, count](RebroadcastEntry& rebroadcast_entry) {\n        rebroadcast_entry.m_last_attempt = last_attempt_time;\n ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611952972,611952972,src/txrebroadcast.cpp
achow101,2021-04-12 21:06:07,"In d579110263ad07386f1fbf796a3397a12340b6d5 ""[test] Add unit test for rebroadcast attempt logic""\n\nIt seems a bit odd to me that this function is supposed to be a wrapper but it also implements a little bit of test logic in that it changes the recorded last attempt time. I think it would make more sense to have the main test logic calculate the timestamp change and make this function a pure wra",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611954385,611954385,src/test/txrebroadcast_tests.cpp
achow101,2021-04-12 21:10:11,"In 0f13d876977d6a83549fa40f68a73308ba10d95d ""[test] Add unit test for the fee rate cache""\n\nSeems like this change should be part of the previous commit.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611956645,611956645,src/test/txrebroadcast_tests.cpp
achow101,2021-04-12 21:10:20,"In 0f13d876977d6a83549fa40f68a73308ba10d95d ""[test] Add unit test for the fee rate cache""\n\nSeems like this change should be part of the previous commit.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611956732,611956732,src/test/txrebroadcast_tests.cpp
achow101,2021-04-12 21:18:18,"In 7005767691005f66e7e08ec2e575d436dae3be47 ""[test] Functional tests for rebroadcast logic.""\n\n```suggestion\n# Copyright (c) 2021 The Bitcoin Core developers\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611961040,611961040,test/functional/p2p_rebroadcast.py
achow101,2021-04-12 21:24:05,"In 7005767691005f66e7e08ec2e575d436dae3be47 ""[test] Functional tests for rebroadcast logic.""\n\n`getrawtransaction` can decode txs too.\n\n\n```suggestion\n        raw_tx = node.getrawtransaction(input_tx_hsh, True)\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611964069,611964069,test/functional/p2p_rebroadcast.py
achow101,2021-04-12 21:29:58,"In 7005767691005f66e7e08ec2e575d436dae3be47 ""[test] Functional tests for rebroadcast logic.""\n\nIt would be nice to not require the wallet for a p2p test.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r611967264,611967264,test/functional/p2p_rebroadcast.py
amitiuttarwar,2021-04-13 03:40:34,"30 minutes was chosen as the minimum age to ensure that transactions would have ample time to propagate through mempools. I don't think it makes sense for this to be a configurable value, both because of what sipa highlighted here: https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-806284509, as well as the fact that it would increase the complexity of reasoning about & maintenance burden.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612104598,612104598,src/txrebroadcast.cpp
amitiuttarwar,2021-04-13 04:06:49,"RE oldest vs random:\nsince the attempt tracker updates the timestamp every time a transaction is selected as a candidate for rebroadcast, it makes sense to me that the least relevant would be ones that haven't been selected for the longest time. usually we use randomness in p2p data structures to ensure that a malicious peer cannot have disproportionate influence, which I don't think quite appli",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612114162,612114162,src/txrebroadcast.h
amitiuttarwar,2021-04-13 04:29:17,"you're right, this comment is really confusing. updated to: \n```\n    // If the cache has run since we received the last block, the fee rate\n    // condition will not filter out any transactions, so skip this run.\n```\n\nAnd here's some more explanation: \n\nLet's refer to the fee rate for a txn to be in the top `MAX_REBROADCAST_WEIGHT` as top-of-mempool fee rate. The only event that ha",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612122954,612122954,src/txrebroadcast.cpp
amitiuttarwar,2021-04-13 04:49:55,"done, how's it look? [`3f4b664` (#21061)](https://github.com/bitcoin/bitcoin/pull/21061/commits/3f4b664fbc021b1c1ccabbf0f448a208c1463496)",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612128556,612128556,src/txrebroadcast.cpp
amitiuttarwar,2021-04-13 04:52:22,"no longer using the `RecordAttempt` function here, but did apply the concept so we don't call `GetTime` on a loop, https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.h&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R124",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612129176,612129176,src/txrebroadcast.cpp
amitiuttarwar,2021-04-13 04:53:16,"ok, done for all the constants in this file ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612129381,612129381,src/txrebroadcast.cpp
amitiuttarwar,2021-04-13 04:54:31,"good point! I kick off the scheduler here, but an early exit in the function if IBD: https://github.com/bitcoin/bitcoin/pull/21061/files?file-filters%5B%5D=.cpp&file-filters%5B%5D=.py&file-filters%5B%5D=.sh#diff-7dff50848db96bdb8edffc4d21daeca6d9050ec0e67d96072780ea5751e7df06R152",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612129729,612129729,src/net_processing.cpp
amitiuttarwar,2021-04-13 04:56:46,"Used this suggested wording & updated to: \n```\n      * If m_skip_inclusion_until is set in the options, we will exclude any\n      * transactions that entered the mempool after the time specified. This is\n      * currently used for rebroadcast logic. */\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612130356,612130356,src/miner.h
amitiuttarwar,2021-04-13 04:57:49,"good point, updated!",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612130713,612130713,src/txrebroadcast.cpp
amitiuttarwar,2021-04-13 04:57:57,fixed,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612130777,612130777,src/test/txrebroadcast_tests.cpp
jnewbery,2021-04-13 10:37:13,"Yes, that's the right way to do it.\n\nI don't think we have any guidance in the style guide, but general best practice seems to be to go from small to large: https://stackoverflow.com/a/2762596/933705.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612329994,612329994,src/test/txrebroadcast_tests.cpp
jnewbery,2021-04-13 10:37:59,(this is recommended in PEP8: https://www.python.org/dev/peps/pep-0008/#imports),https://github.com/bitcoin/bitcoin/pull/21061#discussion_r612330523,612330523,test/functional/p2p_rebroadcast.py
amitiuttarwar,2021-04-16 19:00:00,"agree that updating `min_package_fee_rate` is pretty cheap, there's no additional calculation, its just updating the stored value, but might do so up to ~once per mempool transaction. \n\nbut can you help me understand the context of why you're suggesting a reference? even if it's not a lot of calculation, seems unnecessary? \n\n(agree that returning a tuple instead of in/out params would be n",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615063731,615063731,src/miner.cpp
amitiuttarwar,2021-04-16 20:26:56,"I added some logging to see how often this happens, and indeed it looks like it skips 1-3 times on most days, sometimes up to ~10 times. So, this mechanism seems good, I'll add it. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615105060,615105060,src/txrebroadcast.cpp
amitiuttarwar,2021-04-16 20:31:06,"I added commit 2ac22164f82a51d4eaece9acc42f346e8db679a5 to address this! I agree that when transactions are removed from the mempool for certain reasons, we are highly unlikely to see it again, so it makes sense for it to be removed from the rebroadcast attempt tracker. It's ok if it doesn't work perfectly for edge cases, but this behavior supports helps it work as intended. Thanks! ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615107046,615107046,src/txrebroadcast.cpp
amitiuttarwar,2021-04-16 20:32:08,"seems reasonable, but this PR is getting pretty huge so I'd rather keep this for a follow-up. I've noted it down here https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879 so I can keep track of it, and am going to resolve this conversation. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615107487,615107487,src/txrebroadcast.h
amitiuttarwar,2021-04-16 20:34:05,"I tried to audit `addPackageTxs` and I think you're right that it's not necessary, but it's hard to be certain because there is a lot going on in the function & its only ever called under the `cs_main` lock. Do you have any recommendations for how I could build confidence other than checking the thread of every call site of every invoked function / variable? Maybe I could just remove and run the n",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615108294,615108294,src/miner.cpp
amitiuttarwar,2021-04-16 20:34:51,ok! removed the entire class and just made the test functions public with a comment indicating they are test only ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615108623,615108623,src/test/txrebroadcast_tests.cpp
amitiuttarwar,2021-04-16 20:35:31,"agreed, I've noted it down here: https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879 so I can keep track of it, and will address either in this PR or in a follow up. I'm going to resolve this conversation and will track it with that comment.  ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615108953,615108953,test/functional/p2p_rebroadcast.py
ariard,2021-04-16 21:34:02,"IIUC the purpose of this variable, we assume miners's mempools to be composed in average of 1/4 of _irreplaceable_ transactions. I.e transactions even if we know better feerate candidates, we won't be able to replace them as their scores are unduly increased by miner's mempool policy.\n\nIntuitively, this sounds a lot, do you have any real-world data backing up this assumption ? One could look o",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615132868,615132868,src/txrebroadcast.cpp
ariard,2021-04-16 22:14:41,"Let's say an attacker partitions a victim's mempool from the rest of network mempools thanks to maliciously conflicting transactions. E.g send non-rbf signaling, _differing_ transactions to victim and all its tx-relay connected peers. \n\nThose malicious transactions are attached a feerate high-enough to completely occupy the `m_attempt_tracker`. Due to `MIN_REATTEMPT_INTERVAL`=4h and assuming 6",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615146994,615146994,src/txrebroadcast.cpp
ariard,2021-04-16 22:38:12,"Assuming an entry's `m_count` reaches `MAX_REBROADCAST_COUNT`, it should never be again selected by `GetRebroadcastTransactions`. At that point, should we return an event to the wallet logic inviting to RBF the transaction ? \n\nOtherwise, the entry should stale until deletion by `TrimMaxRebroadcast`. At that point should we return an event inviting to re-submit the _same_ transaction ? Network ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615153925,615153925,src/txrebroadcast.cpp
ariard,2021-04-16 22:48:22,"What's the rational to pick up this value ?\n\nI don't think Bitcoin applications care about confirmation of transactions broadcast 3 months ago. At the contrary, an attacker could use this really long expiration delay as a fingerprint vector.\n\nLet's say in optimistic scenarios, a rebroadcast entry has a compelling feerate enough to be selected by `GetRebroadcastTransactions` after each `MIN",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615156761,615156761,src/txrebroadcast.cpp
78051301012,2021-04-16 22:49:23,"```suggestion\n  txdb.h \\n  txmempool.h \\n  txorphanage.h \\n  txrebroadcast.h \\n  txrequest.h \\n  undo.h \\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615157000,615157000,src/Makefile.am
amitiuttarwar,2021-04-16 22:53:42,is there a suggestion here?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615158074,615158074,src/Makefile.am
ariard,2021-04-16 22:54:41,"Have you tried to run this branch on mainet with a wide-sized mempool ? I think there is a logger in `CacheMinRebroadcastFee`, do you have stats to share on how much time it take by attempts ?\n\nNot sure if the block min feerate accuracy is worth the CPU time...",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615158323,615158323,src/net_processing.cpp
ariard,2021-04-16 22:58:11,I think a deletion criteria which might applied before age is delaying if `m_count` == `MAX_REBROADCAST_COUNT`. A transaction might be the oldest one but still feerate compelling and was unlucky on its previous rebroadcast attempts ?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615159376,615159376,src/txrebroadcast.cpp
ariard,2021-04-16 23:00:26,Not exactly to be included in a block as we overprice its weight with `MAX_REBROADCAST_WEIGHT` ?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615159937,615159937,src/txrebroadcast.h
ariard,2021-04-16 23:06:21,"I don't understand how victim's node distance from miner mempools make it easier or harder to successfully conflict. Of course, you can assume that few miner mempools are running full-rbf and as such you can't leverage lack of rbf signaling as a tx-relay jamming vector but a) require victim to be _strict neighbor_ of miner and b) attacker can exploit other relay policies differences, i.e non tapro",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615161228,615161228,src/txrebroadcast.h
ariard,2021-04-16 23:18:42,"I think you should document somewhere how `filterInventoryKnown` is mitigating bandwidth attacks as described by gmaxwell in your notes. Even if you can pin `m_attempt_tracker` permanently or for a while, most of reattempt should be ended up by being passed over and won't consume again INV bandwidth.\n\nThough you may roll over a majority of network nodes's `filterInventoryKnown` with cheap-RBF ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615164135,615164135,src/txrebroadcast.cpp
ariard,2021-04-16 23:30:54,"I think for rational 2) to hold (""If a spy observes a bitcoin core node rebroadcasting a transaction, it would no longer know that the node has wallet enabled""), you need bandwidth increase from rebroadcast set to be low enough for not being a burden to a wide majority of node operators. Otherwise, a privacy attacker can still guess with high success that only node operators with an associated wal",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615166865,615166865,src/init.cpp
amitiuttarwar,2021-04-17 14:45:45,"we apply `MAX_REBROADCAST_WEIGHT` for calculating the set of candidates when it is time to rebroadcast, not for calculating the minimum fee rate ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615263491,615263491,src/txrebroadcast.h
amitiuttarwar,2021-04-17 18:30:31,"yup, here are some values are for running the whole function. Note that it does not distinguish CPU time vs time spent waiting to acquire the lock, as it currently acquires `cs_main` and `mempool.cs`, but the first might be unnecessary (see https://github.com/bitcoin/bitcoin/pull/21061#discussion_r602283867): \n\nthe median value is 9090 μs, with 75% of the runs being under 11300 μs, and 99% of ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615289678,615289678,src/net_processing.cpp
amitiuttarwar,2021-04-17 18:36:48,agree that we don't want rebroadcast to have high bandwidth requirements. the longer plan is to activate it by default after building confidence about resource usage. please see [Merge Plan & Next Steps](https://github.com/bitcoin/bitcoin/pull/21061#issuecomment-771426879).,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615290277,615290277,src/init.cpp
amitiuttarwar,2021-04-17 19:31:03,"> I don't understand how victim's node distance from miner mempools make it easier or harder to successfully conflict\n\nI'm not suggesting it is?? ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615295498,615295498,src/txrebroadcast.h
ariard,2021-04-21 14:58:09,"So what are you suggesting is how a victim node distance from a miner enters into attacker motivation to target it ? Otherwise, I would suggest just drop ""distance from a miner"" part, I'm not sure if it significant information here.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r617629020,617629020,src/txrebroadcast.h
ariard,2021-04-21 15:26:17,"> the median value is 9090 μs, with 75% of the runs being under 11300 μs, and 99% of the run being under 11826 μs.\n\nOkay and with a fulfilled mempool of the default size 300 MiB ? If yes I agree that's not that much and I think we're relieved on this concern :) If it does causes issues on low-grade nodes in the future, due to non-linear scaling of the CPU time in function of mempool size, I gu",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r617653118,617653118,src/net_processing.cpp
amitiuttarwar,2021-04-27 21:51:05,"what is the fundamental resource that is being spent in this attack? are you evaluating the possibility of asymmetric bandwidth usage? if that's the case then you also need to factor in rolling over `filterInventoryKnown`. \n\nalso I don't understand how the attacker avoids spending any funds- say A and A' are two versions of the same txn via RBF. A is sent to the victim & A' is sent to the rest",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621629648,621629648,src/txrebroadcast.cpp
amitiuttarwar,2021-04-27 21:56:47,"> At that point, should we return an event to the wallet logic inviting to RBF the transaction ?\n\nthat's a cool idea. I don't think it is applicable yet, but I've noted it down for future work where it would be more relevant.\n\nwhy I don't think it is applicable yet: as of this patch, `ResendWalletTransactions` still calls `SubmitMemoryPoolAndRelay` with the `relay` bool set to `true` (aka ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621632712,621632712,src/txrebroadcast.cpp
amitiuttarwar,2021-04-27 22:30:54,"I don't understand this comment, let me explain some of the mechanisms incase that helps. otherwise, please help me understand what you are trying to communicate.\n\n> I don't think Bitcoin applications care about confirmation of transactions broadcast 3 months ago.\n\n1. the attempt tracker records the timestamp of when the mempool transaction was last selected for rebroadcast, not when it wa",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621658134,621658134,src/txrebroadcast.cpp
amitiuttarwar,2021-04-27 22:36:39,"> Okay and with a fulfilled mempool of the default size 300 MiB ? If yes I agree that's not that much and I think we're relieved on this concern :)\n\nmy mempool is bumped up to 1000MiB, so these are values for a significantly-larger-than-normal mempool :)\n\n> I guess we'll be able to make this value configurable\n\nyup, rebroadcast currently defaults off, but the plan is to keep this toggl",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621660734,621660734,src/net_processing.cpp
amitiuttarwar,2021-04-27 22:59:45,"hm, then what do you propose as the method to ensure old attempts expire from the tracker?\n\nkeep in mind that the time is updated every time a transaction is selected to be rebroadcast.\n\nthat said, there still could be the case that the transaction is very high fee rate but hasn't been rebroadcast in a long time because it hit the `MAX_REBROADCAST_COUNT`. if this is the concern, we could a",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621673594,621673594,src/txrebroadcast.cpp
amitiuttarwar,2021-04-27 23:20:21,"I'm unable to parse your question. Although I think it helps motivate the attack, I'll drop the end of the sentence.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621685372,621685372,src/txrebroadcast.h
amitiuttarwar,2021-04-27 23:25:43,"this comment seems to have a lot of overlap with the one you left here: https://github.com/bitcoin/bitcoin/pull/21061#discussion_r615146994. I don't understand exactly what you mean by ""cheap-RBF replacement"". I'm going to resolve this conversation, but we can continue the topic in that other thread. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621687434,621687434,src/txrebroadcast.cpp
amitiuttarwar,2021-04-28 00:03:20,"> maybe replace 1 by a named constant like `CACHE_REBROADCAST_FEERATE_FREQUENCY`\n\ndone",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621709334,621709334,src/net_processing.cpp
amitiuttarwar,2021-04-28 00:04:02,"updated to `2. An attacker targets the network by sending conflicting transactions to nodes.`\n",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r621709628,621709628,src/txrebroadcast.h
amitiuttarwar,2021-05-05 20:13:05,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r626866576,626866576,src/txrebroadcast.cpp
ariard,2021-05-06 14:26:28,"Thanks, my question was simply ""Why a node distance from a miner helps to motivate the attack ?""",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627470377,627470377,src/txrebroadcast.h
ariard,2021-05-06 16:20:16,"Thanks for the second clarifying update, effectively this is documented L124 in `src/txrebroadcast.cpp`, ""No existing entry, we will rebroadcast, so create new one"". \n\nSo IIUC, even if `m_attempt_tracker` is fulfilled with pinning transactions, it won't block node rebroadcast capability. I think pinning costs of `m_attempt_tracker` above roughly above but it can't be abused by an attacker to j",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627575612,627575612,src/txrebroadcast.cpp
ariard,2021-05-06 17:08:55,"IIRC, by ""legitimately expired"" I meant a transaction of which `m_count` has reached `MAX_REBROADCAST_COUNT`. As we already rebroadcasted this transaction the maximum number of times permitted, we skip its rebroadcasting forever, but without necessarily removing it from `m_attempt_tracker` ? I think such transaction has exhausted its rebroadcast ""credit"" and it's mature enough to be ""legitimately""",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627615103,627615103,src/txrebroadcast.cpp
ariard,2021-05-06 17:21:38,"Do we agree first on the problem solved by `m_attempt_tracker` ? See new comment : https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627615103\n\nWhat we want to do in `TrimMaxRebroadcast()` is pending on this conversation imo.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627623142,627623142,src/txrebroadcast.cpp
ariard,2021-05-06 17:38:49,"See second half of other comment answer on why you can consider RBF cheap for an attacker. More generally there is also the fact that the bip125 replacement penalty is static (DEFAULT_INCREMENTAL_RELAY_FEE) is _static_ and doesn't scale up in function of your mempool congestion.\n\nSimplify fee-bumping algorithms a lot though at the price of bandwidth overcost for network nodes processing replac",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r627635595,627635595,src/txrebroadcast.cpp
jnewbery,2021-05-07 08:55:45,"It seems a shame to add a disk read here (which gets called in net_processing's `UpdatedBlockTip()` callback). We could avoid this by updating the `UpdatedBlockTip()` signature function to also pass a `const std::shared_ptr<const CBlock> &block` in the same way that `BlockConnected()` does. It could also just pass the weight of the new block, but that seems strangely specific for the validation in",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628043830,628043830,src/txrebroadcast.cpp
jnewbery,2021-05-07 09:11:19,"This could go in the initializer list:\n\n```diff\ndiff --git a/src/net_processing.cpp b/src/net_processing.cpp\nindex 9a7bc8efd3..79897845d3 100644\n--- a/src/net_processing.cpp\n+++ b/src/net_processing.cpp\n@@ -337,7 +337,7 @@ private:\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n-    std::unique_ptr<TxRe",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628053757,628053757,src/net_processing.cpp
jnewbery,2021-05-07 09:12:48,"Don't put the value (`minute`) in this comment. If the constant is updated at some point in the future, this comment will become outdated. In fact, I think this comment can be removed entirely. The code is pretty self-documenting.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628054781,628054781,src/net_processing.cpp
jnewbery,2021-05-07 09:21:13,"It'd be really nice if `BlockAssembler` could be extracted so that rebroadcast doesn't have dependencies on the mining-specific code. That would allow you to remove `m_chainman.ActiveChainstate()`, `m_chainparams` and `CScript()` from this call.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628060392,628060392,src/txrebroadcast.cpp
jnewbery,2021-05-07 09:27:55,"Maybe move this initialization down to below the call to CNB (just above the main for loop in this function where `rebroadcast_txs` is used), and then call `reserve` to the size of `block_template->block.vtx` so that we don't to multiple reallocations)",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628064681,628064681,src/txrebroadcast.cpp
jnewbery,2021-05-07 09:54:48,That's fair. Marking this as resolved.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628081472,628081472,src/txrebroadcast.h
jnewbery,2021-05-07 09:58:49,"Could this be a `const CBlockIndex&` rather than pointer? `ReadBlockFromDisk()` unconditionally dereferences the pointer, so it can't be null.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628084018,628084018,src/txrebroadcast.h
jnewbery,2021-05-07 10:21:35,Maybe add an assertion that `m_attempt_tracker` is held.,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628097324,628097324,src/txrebroadcast.cpp
jnewbery,2021-05-07 10:28:31,"The two while loops can be consolidated:\n\n```diff\ndiff --git a/src/txrebroadcast.cpp b/src/txrebroadcast.cpp\nindex 940735df1a..401621153c 100644\n--- a/src/txrebroadcast.cpp\n+++ b/src/txrebroadcast.cpp\n@@ -195,18 +195,11 @@ void TxRebroadcastHandler::TrimMaxRebroadcast()\n \n     while (!m_attempt_tracker->empty()) {\n         auto it = m_attempt_tracker->get<index_by_last_attempt>",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628101402,628101402,src/txrebroadcast.cpp
jnewbery,2021-05-07 10:30:24,Perhaps remove this added newline?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628102526,628102526,src/miner.cpp
jnewbery,2021-05-07 10:58:58,"It seems to me that `m_attempt_tracker` has two distinct purposes:\n\n1. prevent us from rebroadcasting transactions too frequently (see `entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL`)\n2. prevent us from rebroadcasting transactions too many times (see `else if (entry_it->m_count >= MAX_REBROADCAST_COUNT)`)\n\nI think the expiry strategies conflict for these two purposes. Im",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628119730,628119730,src/txrebroadcast.cpp
amitiuttarwar,2021-05-08 19:17:09,"> So IIUC, even if m_attempt_tracker is fulfilled with pinning transactions, it won't block node rebroadcast capability. \n\nyeah, exactly. \n\n> I would recommend to document this ""pinning-doesn't-block-rebroadcast-so-not-a-new-tx-relay jamming-vector"" around m_attempt_tracker declaration in src/txreconciliation.h, it's quite an important design aspect imo.\n\nI don't think it makes sense t",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628786207,628786207,src/txrebroadcast.cpp
amitiuttarwar,2021-05-09 02:14:06,"it seems like the majority of this comment is based on a misunderstanding of how `m_attempt_tracker` works. \n\nthe update seems like its getting on the right track- the main purpose of tracking rebroadcast entries is to allow enforcing a maximum number of rebroadcast attempts. \n\n> IIUC, the problem we're trying to solve is ""How to avoid never-going-to-be-mined transactions to forever ping-p",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628821403,628821403,src/txrebroadcast.cpp
amitiuttarwar,2021-05-09 02:15:16,"ok, going to resolve this conversation here in favor of the other comment thread. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r628821498,628821498,src/txrebroadcast.cpp
jonatack,2021-05-10 11:50:13,"Quick comment noticed while writing about this review club session. IIRC it's preferable to pass `uint256` by reference to const rather than by value, e.g. `const uint256& txid{tx->GetHash()};` or `const auto& txid = tx->GetHash();` (and here these aliases may as well be const anyway as IIUC they aren't intended to be mutated). It looks like there are a few other places.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629292659,629292659,src/txrebroadcast.cpp
glozow,2021-05-11 02:32:14,"In a3367b9b79086326f75d111d6b381088d88312f0 [p2p] Implement flag to disable rebroadcast \n\nShould this be in net_processing.h instead of net.h? It seems more like an application-layer thing.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629805112,629805112,src/net.h
glozow,2021-05-11 02:45:57,"Approach-related question about d72f030be9c9fa77e23132268e16708d7cbb192e  [mining] Calculate the minimum fee rate for transaction inclusion\n\nApologies if this has already been asked. Why is a new `BlockAssembler::MinTxFeeRate()` function created instead of using `CBlockPolicyEstimator::estimateSmartFee()` with a confirmation target of 1 block or some implementation built using the fee estimato",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629809015,629809015,src/miner.cpp
glozow,2021-05-11 02:58:16,"In 956819c69de99db84908df0fb3b25ba616f2362d [rebroadcast] Apply a fee rate filter:\n\nWhat happens if our node has its own prioritized transactions, which could be returned by our own block assembler but miners wouldn't care about? I believe the block assembler uses modified feerate, so setting `blockMinFeeRate` here won't filter those out.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629812701,629812701,src/txrebroadcast.cpp
glozow,2021-05-11 03:19:23,"In 4165cb0606e4be476651899b80525f63f6e4465a [rebroadcast] Stop tracking rebroadcast attempts for certain transactions\n\nWould it be possible to write in a comment here ""we want to avoid a situation where two peers that are unaware of new policy/consensus rules endlessly rebroadcast a transaction considered invalid by the majority of the network. Thus, the rebroadcast attempt tracker should reme",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629818366,629818366,src/net_processing.cpp
glozow,2021-05-11 03:24:51,"In 4165cb0606e4be476651899b80525f63f6e4465a [rebroadcast] Stop tracking rebroadcast attempts for certain transactions\n\nWhy not group `MemPoolRemovalReason::BLOCK` with the cases that we call `RemoveFromAttemptTracker()` for (while keeping the comment indicating that they don't go through this callback)?",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629819928,629819928,src/net_processing.cpp
glozow,2021-05-11 03:27:56,"```suggestion\n * - Delete tracked rebroadcast attempts for block transactions\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629820715,629820715,src/net_processing.cpp
glozow,2021-05-11 03:39:41,"In 0ae1420767a320cfeafd2acee0b54bc6a6eb9b27 [test] Add unit test for the fee rate cache \n\nWhy note just use + REBROADCAST_MIN_TX_AGE + 5 minutes here?",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629823940,629823940,src/test/txrebroadcast_tests.cpp
glozow,2021-05-11 03:40:41,"In 0ae1420767a320cfeafd2acee0b54bc6a6eb9b27 [test] Add unit test for the fee rate cache \n\nWould be nice if the test also checked what happens with transactions that are prioritized.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629824222,629824222,src/test/txrebroadcast_tests.cpp
glozow,2021-05-11 03:43:43,"In 87d6466380737c2d05932d4af3879950982e61c4 [test] Add unit test for rebroadcast attempt logic \n\nI'm not sure what difference it would make, but why don't these require `m_rebroadcast_mutex` instead of doing the locking internally?",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r629825081,629825081,src/txrebroadcast.h
amitiuttarwar,2021-05-13 03:51:25,"yeah, I went through a similar thought process. In the initial pass, I opted for the `ReadBlockFromDisk` approach because it seemed simpler. But in the latest push, I updated the `UpdateBlockTip` function signature to also take in `block`. Unfortunately, it seems like callers cannot rely on `block` to be properly populated, so I still need to have the `ReadBlockFromDisk` as a fallback. The relevan",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543314,631543314,src/txrebroadcast.cpp
amitiuttarwar,2021-05-13 03:52:07,"very nice, done ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543511,631543511,src/net_processing.cpp
amitiuttarwar,2021-05-13 03:52:27,"agree, removed.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543597,631543597,src/net_processing.cpp
amitiuttarwar,2021-05-13 03:54:02,"yeah, that would be nice! I don't think it makes sense to increase the complexity of this PR, but I have noted it down as potential future work.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631543989,631543989,src/txrebroadcast.cpp
amitiuttarwar,2021-05-13 03:54:23,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631544094,631544094,src/txrebroadcast.cpp
amitiuttarwar,2021-05-13 03:55:01,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631544292,631544292,src/txrebroadcast.h
amitiuttarwar,2021-05-13 03:56:16,done ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631544648,631544648,src/txrebroadcast.cpp
amitiuttarwar,2021-05-13 03:58:09,"good point on consolidating the two loops. the code you shared doesn't quite make sense (it no longer erases anything from the attempt tracker? 😛), but I got the gist and reworked the logic. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631545127,631545127,src/txrebroadcast.cpp
amitiuttarwar,2021-05-13 04:04:32,"yup, makes sense. thanks!\n\nI've updated this site, but in all the other places that I found, was already using references. Let me know if I'm missing some?",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631546704,631546704,src/txrebroadcast.cpp
amitiuttarwar,2021-05-13 04:06:59,"great point! fixed now, thanks.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631547275,631547275,src/net.h
amitiuttarwar,2021-05-13 04:15:54,"it's an interesting idea, but I don't think it makes sense to reuse. although they are answering conceptually similar questions, the way these two functions are going about answering is quite different. `MinTxFeeRate` is calculating very precisely based on the state of the mempool _right now_, where as the `estimateSmartFee` function is trying to predict a rate based on current conditions combined",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631549506,631549506,src/miner.cpp
amitiuttarwar,2021-05-13 04:18:59,"GREAT point! in the original PR (#16698), I had a commit to update the `prioritisetransaction` help documentation, but somehow got lost along the way to this current PR. In the latest push, I've cherry-picked that commit onto this PR. \n\nand, to confirm, you're absolutely right. the block assembler uses modified feerate, so could select transactions to rebroadcast that the user has manually add",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631550246,631550246,src/txrebroadcast.cpp
amitiuttarwar,2021-05-13 04:19:55,"done, thanks! I've been having a hard time explaining, added a comment along these lines.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631550445,631550445,src/net_processing.cpp
amitiuttarwar,2021-05-13 04:20:31,"sure, doesn't seem like it matters either way? but done regardless",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631550588,631550588,src/net_processing.cpp
amitiuttarwar,2021-05-13 04:24:41,"`REBROADCAST_MIN_TX_AGE` is defined in the `.cpp`, so isn't available to import in the test. I could move it to the header, but I was trying to minimize how much stuff is in the header only for tests. I could redefine the symbol as a constant in the test, but then we run into the same issue of having to update it if the code changes, so doesn't seem much better.. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631551672,631551672,src/test/txrebroadcast_tests.cpp
amitiuttarwar,2021-05-13 04:27:14,just so I can keep `m_rebroadcast_mutex` as a private member ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r631552240,631552240,src/txrebroadcast.h
MarcoFalke,2021-05-15 06:42:22,"```suggestion\n    const bool enable_rebroadcast{args.GetArg(""-rebroadcast"", DEFAULT_REBROADCAST_ENABLED)};\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r632905508,632905508,src/init.cpp
MarcoFalke,2021-05-15 06:54:27,"to avoid the recursive lock\n\n```suggestion\n            _RelayTransaction(ids.m_txid, ids.m_wtxid);\n```",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r632906592,632906592,src/net_processing.cpp
MarcoFalke,2021-05-15 06:59:10,would be nice to select the exact permission needed,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r632907051,632907051,test/functional/p2p_rebroadcast.py
amitiuttarwar,2021-05-17 23:44:55,"done. note: had to change `GetArg` to `GetBoolArg` to work with braced initialization, which seems better anyways. ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r633934902,633934902,src/init.cpp
amitiuttarwar,2021-05-17 23:45:32,"good call, rebased to get the internal function & updated ",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r633935088,633935088,src/net_processing.cpp
amitiuttarwar,2021-05-17 23:45:40,done,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r633935119,633935119,test/functional/p2p_rebroadcast.py
ajtowns,2021-05-19 04:14:30,"This gives a 1-in-10k fp rate, so once the bloom filter has had time to fill up, we should expect each node to incorrectly not rebroadcast 1-in-10k transactions. However, the nTweak parameter should ensure that this is affects different transactions on different nodes, so I think this should be fine.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r634900036,634900036,src/txrebroadcast.cpp
ajtowns,2021-05-25 03:00:00,"I think you should be locking `cs_main` prior to calling this -- you want a consistent view between `tip` and `current_fee_rate`, but currently there's no reason you couldn't update the tip immediately after this line, thus associating the old tip with the new (much reduced) fee rate.",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638418544,638418544,src/txrebroadcast.cpp
ajtowns,2021-05-25 03:04:23,"Earlier in this function, there's code to skip transactions if they're too large for the block. I think this can result in the mempool containing txs with fee rates of: `120 s/vb, 119 s/vb, 118 s/vb, 117 s/vb, 115 s/vb, 110 s/vb, 105 s/vb, 100 s/vb, 95 s/vb, 80 s/vb, 79 s/vb, ...` and the block containing txs with fee rates of: `120, 119, 118, 117, 95, 80` -- because the 110-100 s/vb txs just didn",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638419647,638419647,src/miner.cpp
ajtowns,2021-05-25 03:20:24,Perhaps this should also be conditional on `mempool.IsLoaded()` ?,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638423702,638423702,src/txrebroadcast.cpp
amitiuttarwar,2021-05-31 05:01:15,done ,https://github.com/bitcoin/bitcoin/pull/21061#discussion_r642210611,642210611,src/txrebroadcast.cpp
amitiuttarwar,2021-05-31 05:01:31,"yeah makes sense, done",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r642210663,642210663,src/txrebroadcast.cpp
amitiuttarwar,2021-05-31 05:03:43,"I removed the `cs_main` call from here, but think I actually have to lock it from the caller, see:  https://github.com/bitcoin/bitcoin/pull/21061#discussion_r638418544",https://github.com/bitcoin/bitcoin/pull/21061#discussion_r642211263,642211263,src/miner.cpp
