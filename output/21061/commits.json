[
  {
    "sha": "c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWVmYTdmZmJhNDIzM2NlNjNhMzlhMGZlODAzNjVkZDRmZTU4ODE2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-11T23:20:13Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[interface] Add block param to the UpdatedBlockTip interface function",
      "tree": {
        "sha": "e71d2f8ce800ce6745eb9353cca63512e93e09e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e71d2f8ce800ce6745eb9353cca63512e93e09e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "741749a6159eb68dd8a3c5ef0d1701337931e6df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741749a6159eb68dd8a3c5ef0d1701337931e6df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/741749a6159eb68dd8a3c5ef0d1701337931e6df"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 17,
      "deletions": 14
    },
    "files": [
      {
        "sha": "a90e9fa6fbc87c98514e446aba3f6c845a4c0932",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -235,7 +235,7 @@ class PeerManagerImpl final : public PeerManager\n     /** Overridden from CValidationInterface. */\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    void UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override;\n     void BlockChecked(const CBlock& block, const BlockValidationState& state) override;\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n@@ -1403,7 +1403,7 @@ void PeerManagerImpl::NewPoWValidBlock(const CBlockIndex *pindex, const std::sha\n  * Update our best height and announce any block hashes which weren't previously\n  * in m_chainman.ActiveChain() to our peers.\n  */\n-void PeerManagerImpl::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+void PeerManagerImpl::UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n {\n     SetBestHeight(pindexNew->nHeight);\n     SetServiceFlagsIBDCache(!fInitialDownload);"
      },
      {
        "sha": "2a07e3710676a0bd96ef6a8688456499a089bd33",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -360,7 +360,7 @@ class NotificationsProxy : public CValidationInterface\n     {\n         m_notifications->blockDisconnected(*block, index->nHeight);\n     }\n-    void UpdatedBlockTip(const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n+    void UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* index, const CBlockIndex* fork_index, bool is_ibd) override\n     {\n         m_notifications->updatedBlockTip();\n     }"
      },
      {
        "sha": "55b2447f742f202934286514e409278586a8bb2d",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -36,7 +36,7 @@ struct TestSubscriber final : public CValidationInterface {\n \n     explicit TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n \n-    void UpdatedBlockTip(const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n+    void UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override\n     {\n         BOOST_CHECK_EQUAL(m_expected_tip, pindexNew->GetBlockHash());\n     }"
      },
      {
        "sha": "88b40ba9abca755c603b6b015511b12a623edac4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -2608,6 +2608,7 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n \n     CBlockIndex *pindexMostWork = nullptr;\n     CBlockIndex *pindexNewTip = nullptr;\n+    const std::shared_ptr<const CBlock> nullBlockPtr;\n     int nStopAtHeight = gArgs.GetArg(\"-stopatheight\", DEFAULT_STOPATHEIGHT);\n     do {\n         // Block until the validation queue drains. This should largely\n@@ -2638,7 +2639,6 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n                 }\n \n                 bool fInvalidFound = false;\n-                std::shared_ptr<const CBlock> nullBlockPtr;\n                 if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : nullBlockPtr, fInvalidFound, connectTrace)) {\n                     // A system error occurred\n                     return false;\n@@ -2665,7 +2665,8 @@ bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainPar\n             // Enqueue while holding cs_main to ensure that UpdatedBlockTip is called in the order in which blocks are connected\n             if (pindexFork != pindexNewTip) {\n                 // Notify ValidationInterface subscribers\n-                GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n+                auto block_tip = pblock && pblock->GetHash() == pindexNewTip->GetBlockHash() ? pblock : nullBlockPtr;\n+                GetMainSignals().UpdatedBlockTip(block_tip, pindexNewTip, pindexFork, fInitialDownload);\n \n                 // Always notify the UI if a new block tip was connected\n                 uiInterface.NotifyBlockTip(GetSynchronizationState(fInitialDownload), pindexNewTip);"
      },
      {
        "sha": "81fb030c6025d1c2fbbfa7794d98647ea7ca9da0",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -185,13 +185,14 @@ void SyncWithValidationInterfaceQueue()\n #define LOG_EVENT(fmt, ...) \\\n     LogPrint(BCLog::VALIDATION, fmt \"\\n\", __VA_ARGS__)\n \n-void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+void CMainSignals::UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n+{\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n-        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload); });\n+    auto event = [block, pindexNew, pindexFork, fInitialDownload, this] {\n+        m_internals->Iterate([&](CValidationInterface& callbacks) { callbacks.UpdatedBlockTip(block, pindexNew, pindexFork, fInitialDownload); });\n     };\n     ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%s)\", __func__,\n                           pindexNew->GetBlockHash().ToString(),"
      },
      {
        "sha": "7e8d2494eb37a3991adb509ea52d28aa38687882",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -90,8 +90,10 @@ class CValidationInterface {\n      * subscribe to BlockConnected() instead.\n      *\n      * Called on a background thread.\n+     *\n+     * @param block Either nullptr or a pointer to the block corresponding to pindexNew\n      */\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n+    virtual void UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) {}\n     /**\n      * Notifies listeners of a transaction having been added to mempool.\n      *\n@@ -196,8 +198,7 @@ class CMainSignals {\n \n     size_t CallbacksPending();\n \n-\n-    void UpdatedBlockTip(const CBlockIndex *, const CBlockIndex *, bool fInitialDownload);\n+    void UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex*, const CBlockIndex*, bool fInitialDownload);\n     void TransactionAddedToMempool(const CTransactionRef&, uint64_t mempool_sequence);\n     void TransactionRemovedFromMempool(const CTransactionRef&, MemPoolRemovalReason, uint64_t mempool_sequence);\n     void BlockConnected(const std::shared_ptr<const CBlock> &, const CBlockIndex *pindex);"
      },
      {
        "sha": "7a50f95efe918e7f404f3e7ea6d978028dd651be",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -129,7 +129,7 @@ void TryForEachAndRemoveFailed(std::list<std::unique_ptr<CZMQAbstractNotifier>>&\n \n } // anonymous namespace\n \n-void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n+void CZMQNotificationInterface::UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload)\n {\n     if (fInitialDownload || pindexNew == pindexFork) // In IBD or blocks were disconnected without any new ones\n         return;"
      },
      {
        "sha": "0cd2622c3957951035b5b5c8acb6b71138570a1e",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5efa7ffba4233ce63a39a0fe80365dd4fe58816/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "patch": "@@ -30,7 +30,7 @@ class CZMQNotificationInterface final : public CValidationInterface\n     void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexDisconnected) override;\n-    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n+    void UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override;\n \n private:\n     CZMQNotificationInterface();"
      }
    ]
  },
  {
    "sha": "b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMThkZTE4Y2EyN2JkYTQ2ZTdlMGNmZDZjZThlZjQ3OTFmZTRlNGI5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T17:56:51Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[rebroadcast] Introduce a mempool rebroadcast module\n\nIntroduce a module that rebroadcasts transactions from the node instead of the\nwallet. This module is currently unused.\n\nThe fundamental difference from the existing wallet rebroadcast logic is that\nwe apply the logic to all transactions, not just \"mine\". In order to prevent\nspam, we need to carefully select which transactions to rebroadcast. As of this\ncommit, we select the transactions in the mempool that have the highest\nfeerate.",
      "tree": {
        "sha": "e50d66c37914200fceeb12efab2a7d64e0a7b0c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e50d66c37914200fceeb12efab2a7d64e0a7b0c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5efa7ffba4233ce63a39a0fe80365dd4fe58816",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5efa7ffba4233ce63a39a0fe80365dd4fe58816"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 70,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b7b43e41a291cbe68bcf8ca8268846429c304789",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
        "patch": "@@ -235,6 +235,7 @@ BITCOIN_CORE_H = \\\n   txdb.h \\\n   txmempool.h \\\n   txorphanage.h \\\n+  txrebroadcast.h \\\n   txrequest.h \\\n   undo.h \\\n   util/asmap.h \\\n@@ -364,6 +365,7 @@ libbitcoin_server_a_SOURCES = \\\n   txdb.cpp \\\n   txmempool.cpp \\\n   txorphanage.cpp \\\n+  txrebroadcast.cpp \\\n   txrequest.cpp \\\n   validation.cpp \\\n   validationinterface.cpp \\"
      },
      {
        "sha": "ace9567431e73041b87743461310d3ac00687bb6",
        "filename": "src/txrebroadcast.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <consensus/consensus.h>\n+#include <miner.h>\n+#include <node/blockstorage.h>\n+#include <script/script.h>\n+#include <txrebroadcast.h>\n+\n+/** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n+ * circumstances such as miners mining priority transactions. */\n+static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n+\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+{\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n+    std::vector<TxIds> rebroadcast_txs;\n+    auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n+                              .CreateNewBlock(CScript());\n+    rebroadcast_txs.reserve(block_template->block.vtx.size());\n+\n+    for (const CTransactionRef& tx : block_template->block.vtx) {\n+        if (tx->IsCoinBase()) continue;\n+\n+        rebroadcast_txs.push_back(TxIds(tx->GetHash(), tx->GetWitnessHash()));\n+    }\n+\n+    return rebroadcast_txs;\n+};"
      },
      {
        "sha": "ffbaf0c15c2f73f7c585735ea956bb16d917d166",
        "filename": "src/txrebroadcast.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TXREBROADCAST_H\n+#define BITCOIN_TXREBROADCAST_H\n+\n+#include <policy/feerate.h>\n+#include <txmempool.h>\n+\n+struct TxIds {\n+    TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n+\n+    const uint256 m_txid;\n+    const uint256 m_wtxid;\n+};\n+\n+class TxRebroadcastHandler\n+{\n+public:\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+        : m_mempool(mempool),\n+          m_chainman(chainman),\n+          m_chainparams(chainparams){};\n+\n+    std::vector<TxIds> GetRebroadcastTransactions();\n+\n+private:\n+    const CTxMemPool& m_mempool;\n+    const ChainstateManager& m_chainman;\n+    const CChainParams& m_chainparams;\n+};\n+\n+#endif // BITCOIN_TXREBROADCAST_H"
      }
    ]
  },
  {
    "sha": "a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGIzNDJmYTdhMmMzMWUzZmNkODQ1M2UzMzdlOWIzNjAxM2E3MWZi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-13T01:57:16Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[rebroadcast] Reduce amount of rebroadcast candidates\n\nInstead of determining the maximum size of the rebroadcast candidates based on\nthe maximum allowed block weight, calculate based on the incoming block that\ntriggered the mechanism. This will reduce the possible bandwidth usage when\nsmaller blocks are mined, for example, an empty block.",
      "tree": {
        "sha": "f533dd52c6c6397b9a7b4d73f0786e1d87a401d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f533dd52c6c6397b9a7b4d73f0786e1d87a401d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b18de18ca27bda46e7e0cfd6ce8ef4791fe4e4b9"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 31,
      "deletions": 3
    },
    "files": [
      {
        "sha": "04ab304ae81acac354001dd3b0ca368dbd651906",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
        "patch": "@@ -13,10 +13,27 @@\n  * circumstances such as miners mining priority transactions. */\n static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n \n-std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions()\n+std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n {\n+\n+    // Calculate how many transactions to rebroadcast based on the size of the\n+    // incoming block.\n+    float rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+    if (recent_block) {\n+        // If the passed in block is populated, use to avoid a disk read.\n+        rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(*recent_block.get());\n+    } else {\n+        // Otherwise, use the block index to retrieve the relevant block.\n+        const Consensus::Params& consensus_params = m_chainparams.GetConsensus();\n+        CBlock block;\n+\n+        if (ReadBlockFromDisk(block, &recent_block_index, consensus_params)) {\n+            rebroadcast_block_weight = REBROADCAST_WEIGHT_RATIO * GetBlockWeight(block);\n+        }\n+    }\n+\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+    options.nBlockMaxWeight = rebroadcast_block_weight;\n \n     // Use CreateNewBlock to identify rebroadcast candidates\n     std::vector<TxIds> rebroadcast_txs;"
      },
      {
        "sha": "d70de28f90a73663719dd1921e1f7f9f08cb764f",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
        "patch": "@@ -23,7 +23,18 @@ class TxRebroadcastHandler\n           m_chainman(chainman),\n           m_chainparams(chainparams){};\n \n-    std::vector<TxIds> GetRebroadcastTransactions();\n+    /**\n+     * Identify transaction candidates to be rebroadcast.\n+     * Calculates the top of the mempool by fee rate, limits the size based on\n+     * recent block information passed in, rate limits candidates and enforces\n+     * a maximum number of rebroadcast attempts per transaction.\n+     *\n+     * @param[in]  recent_block        Optionally provide a reference to skip a disk read\n+     * @param[in]  recent_block_index  An index to the recent block, used to\n+     *                                 calculate weight of rebroadcast candidates\n+     * @return     std::vector<TxIds>  Returns transaction ids of rebroadcast candidates\n+     * */\n+    std::vector<TxIds> GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index);\n \n private:\n     const CTxMemPool& m_mempool;"
      }
    ]
  },
  {
    "sha": "61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWY1ZDBkNzNiOWU5NTBkYWExMjA0ODY1ZmM4MTMyYTJlNmZkYmU5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-29T00:22:25Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[p2p] Start rebroadcasting mempool transactions\n\nAfter we process a block, invoke the rebroadcast module to identify if there\nare any transactions we would have expected to be included, and queue them up\nfor relay to our peers.\n\nThis will only identify rebroadcast candidates, as transactions will be subject\nto RelayTransaction and subsequent SendMessages logic, such as checking\nfilterInventoryKnown, the rate limit logic of INVENTORY_BROADCAST_MAX, etc.",
      "tree": {
        "sha": "8b97b35eae02859e17894b5518ae8f64be4fe1f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b97b35eae02859e17894b5518ae8f64be4fe1f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4b342fa7a2c31e3fcd8453e337e9b36013a71fb"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f5e1c06798f9514b749cbffff377fff70dbb0a29",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
        "patch": "@@ -29,6 +29,7 @@\n #include <tinyformat.h>\n #include <txmempool.h>\n #include <txorphanage.h>\n+#include <txrebroadcast.h>\n #include <txrequest.h>\n #include <util/check.h> // For NDEBUG compile time check\n #include <util/strencodings.h>\n@@ -339,6 +340,7 @@ class PeerManagerImpl final : public PeerManager\n     ChainstateManager& m_chainman;\n     CTxMemPool& m_mempool;\n     TxRequestTracker m_txrequest GUARDED_BY(::cs_main);\n+    const std::unique_ptr<TxRebroadcastHandler> m_txrebroadcast;\n \n     /** The height of the best chain */\n     std::atomic<int> m_best_height{-1};\n@@ -1272,6 +1274,7 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n       m_banman(banman),\n       m_chainman(chainman),\n       m_mempool(pool),\n+      m_txrebroadcast{std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams)},\n       m_stale_tip_check_time(0),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n@@ -1424,6 +1427,7 @@ void PeerManagerImpl::UpdatedBlockTip(const std::shared_ptr<const CBlock>& block\n         }\n     }\n \n+    // Queue the new blocks for announcement to peers\n     {\n         LOCK(m_peer_mutex);\n         for (auto& it : m_peer_map) {\n@@ -1435,6 +1439,16 @@ void PeerManagerImpl::UpdatedBlockTip(const std::shared_ptr<const CBlock>& block\n         }\n     }\n \n+    // Rebroadcast selected mempool transactions\n+    const std::vector<TxIds> rebroadcast_txs = m_txrebroadcast->GetRebroadcastTransactions(block, *pindexNew);\n+    {\n+        LOCK(cs_main);\n+\n+        for (auto ids : rebroadcast_txs) {\n+            _RelayTransaction(ids.m_txid, ids.m_wtxid);\n+        }\n+    }\n+\n     m_connman.WakeMessageHandler();\n }\n "
      }
    ]
  },
  {
    "sha": "23635b4874ae123ba54aec2f9363ca3cff4b079e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzYzNWI0ODc0YWUxMjNiYTU0YWVjMmY5MzYzY2EzY2ZmNGIwNzll",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-11-05T20:03:33Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[p2p] Implement flag to disable rebroadcast\n\nTo initially roll out and test, default the node rebroadcast functionality to\nfalse. Since this is for developer testing, make this a hidden option so we do\nnot need to maintain an additional option in the long-term.",
      "tree": {
        "sha": "cd4e9048894bc71cd7c8262e43224e2411ae68c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd4e9048894bc71cd7c8262e43224e2411ae68c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23635b4874ae123ba54aec2f9363ca3cff4b079e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23635b4874ae123ba54aec2f9363ca3cff4b079e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23635b4874ae123ba54aec2f9363ca3cff4b079e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23635b4874ae123ba54aec2f9363ca3cff4b079e/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61f5d0d73b9e950daa1204865fc8132a2e6fdbe9"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 24,
      "deletions": 15
    },
    "files": [
      {
        "sha": "f40b37d584117cac682a2d2823b2c8e3a3076444",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=23635b4874ae123ba54aec2f9363ca3cff4b079e",
        "patch": "@@ -449,6 +449,7 @@ void SetupServerArgs(NodeContext& node)\n     argsman.AddArg(\"-port=<port>\", strprintf(\"Listen for connections on <port>. Nodes not using the default ports (default: %u, testnet: %u, signet: %u, regtest: %u) are unlikely to get incoming connections.\", defaultChainParams->GetDefaultPort(), testnetChainParams->GetDefaultPort(), signetChainParams->GetDefaultPort(), regtestChainParams->GetDefaultPort()), ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxy=<ip:port>\", \"Connect through SOCKS5 proxy, set -noproxy to disable (default: disabled)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-proxyrandomize\", strprintf(\"Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)\", DEFAULT_PROXYRANDOMIZE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+    argsman.AddArg(\"-rebroadcast\", strprintf(\"Enable node rebroadcast functionality (default: %u)\", DEFAULT_REBROADCAST_ENABLED), ArgsManager::ALLOW_BOOL | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-seednode=<ip>\", \"Connect to a node to retrieve peer addresses, and disconnect. This option can be specified multiple times to connect to multiple nodes.\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-networkactive\", \"Enable all P2P network activity (default: 1). Can be changed by the setnetworkactive RPC command\", ArgsManager::ALLOW_BOOL, OptionsCategory::CONNECTION);\n     argsman.AddArg(\"-timeout=<n>\", strprintf(\"Specify socket connection timeout in milliseconds. If an initial attempt to connect is unsuccessful after this amount of time, drop it (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1184,8 +1185,10 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n     ChainstateManager& chainman = *Assert(node.chainman);\n \n     assert(!node.peerman);\n+    const bool enable_rebroadcast {args.GetBoolArg(\"-rebroadcast\", DEFAULT_REBROADCAST_ENABLED)};\n     node.peerman = PeerManager::make(chainparams, *node.connman, *node.addrman, node.banman.get(),\n-                                     *node.scheduler, chainman, *node.mempool, ignores_incoming_txs);\n+                                     *node.scheduler, chainman, *node.mempool, ignores_incoming_txs,\n+                                     enable_rebroadcast);\n     RegisterValidationInterface(node.peerman.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "33db166416dc43b7515a4354961676af46800b2c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=23635b4874ae123ba54aec2f9363ca3cff4b079e",
        "patch": "@@ -231,7 +231,7 @@ class PeerManagerImpl final : public PeerManager\n public:\n     PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n                     BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n-                    CTxMemPool& pool, bool ignore_incoming_txs);\n+                    CTxMemPool& pool, bool ignore_incoming_txs, bool enable_rebroadcast);\n \n     /** Overridden from CValidationInterface. */\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n@@ -1260,21 +1260,21 @@ bool PeerManagerImpl::BlockRequestAllowed(const CBlockIndex* pindex)\n \n std::unique_ptr<PeerManager> PeerManager::make(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n                                                BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n-                                               CTxMemPool& pool, bool ignore_incoming_txs)\n+                                               CTxMemPool& pool, bool ignore_incoming_txs, bool enable_rebroadcast)\n {\n-    return std::make_unique<PeerManagerImpl>(chainparams, connman, addrman, banman, scheduler, chainman, pool, ignore_incoming_txs);\n+    return std::make_unique<PeerManagerImpl>(chainparams, connman, addrman, banman, scheduler, chainman, pool, ignore_incoming_txs, enable_rebroadcast);\n }\n \n PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n                                  BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n-                                 CTxMemPool& pool, bool ignore_incoming_txs)\n+                                 CTxMemPool& pool, bool ignore_incoming_txs, bool enable_rebroadcast)\n     : m_chainparams(chainparams),\n       m_connman(connman),\n       m_addrman(addrman),\n       m_banman(banman),\n       m_chainman(chainman),\n       m_mempool(pool),\n-      m_txrebroadcast{std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams)},\n+      m_txrebroadcast{enable_rebroadcast ? std::make_unique<TxRebroadcastHandler>(m_mempool, m_chainman, m_chainparams) : nullptr},\n       m_stale_tip_check_time(0),\n       m_ignore_incoming_txs(ignore_incoming_txs)\n {\n@@ -1440,10 +1440,10 @@ void PeerManagerImpl::UpdatedBlockTip(const std::shared_ptr<const CBlock>& block\n     }\n \n     // Rebroadcast selected mempool transactions\n-    const std::vector<TxIds> rebroadcast_txs = m_txrebroadcast->GetRebroadcastTransactions(block, *pindexNew);\n-    {\n-        LOCK(cs_main);\n+    if (m_txrebroadcast) {\n+        const std::vector<TxIds> rebroadcast_txs = m_txrebroadcast->GetRebroadcastTransactions(block, *pindexNew);\n \n+        LOCK(cs_main);\n         for (auto ids : rebroadcast_txs) {\n             _RelayTransaction(ids.m_txid, ids.m_wtxid);\n         }"
      },
      {
        "sha": "7ceb33b7d6e79dbc9fd0224e2408623af608a851",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=23635b4874ae123ba54aec2f9363ca3cff4b079e",
        "patch": "@@ -22,6 +22,8 @@ static const bool DEFAULT_PEERBLOOMFILTERS = false;\n static const bool DEFAULT_PEERBLOCKFILTERS = false;\n /** Threshold for marking a node to be discouraged, e.g. disconnected and added to the discouragement filter. */\n static const int DISCOURAGEMENT_THRESHOLD{100};\n+/** Default for node rebroadcast logic */\n+static constexpr bool DEFAULT_REBROADCAST_ENABLED = false;\n \n struct CNodeStateStats {\n     int nSyncHeight = -1;\n@@ -36,7 +38,7 @@ class PeerManager : public CValidationInterface, public NetEventsInterface\n public:\n     static std::unique_ptr<PeerManager> make(const CChainParams& chainparams, CConnman& connman, CAddrMan& addrman,\n                                              BanMan* banman, CScheduler& scheduler, ChainstateManager& chainman,\n-                                             CTxMemPool& pool, bool ignore_incoming_txs);\n+                                             CTxMemPool& pool, bool ignore_incoming_txs, bool enable_rebroadcast);\n     virtual ~PeerManager() { }\n \n     /** Get statistics from node state */"
      },
      {
        "sha": "056466f6840165b05ea37b36ca0bc965c5e4142d",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=23635b4874ae123ba54aec2f9363ca3cff4b079e",
        "patch": "@@ -70,7 +70,8 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     const CChainParams& chainparams = Params();\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool,\n+                                       false, false);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -138,7 +139,8 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     const CChainParams& chainparams = Params();\n     auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool,\n+                                       false, false);\n \n     constexpr int max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n     CConnman::Options options;\n@@ -211,7 +213,8 @@ BOOST_AUTO_TEST_CASE(peer_discouragement)\n     auto banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnmanTest>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool,\n+                                       false, false);\n \n     CNetAddr tor_netaddr;\n     BOOST_REQUIRE(\n@@ -305,7 +308,8 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     auto banman = std::make_unique<BanMan>(m_args.GetDataDirPath() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman);\n     auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, banman.get(),\n-                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool, false);\n+                                       *m_node.scheduler, *m_node.chainman, *m_node.mempool,\n+                                       false, false);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "792844c1210396dc71dea3c93c735061d4f84161",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23635b4874ae123ba54aec2f9363ca3cff4b079e/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=23635b4874ae123ba54aec2f9363ca3cff4b079e",
        "patch": "@@ -199,7 +199,7 @@ TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const\n     m_node.connman = std::make_unique<CConnman>(0x1337, 0x1337, *m_node.addrman); // Deterministic randomness for tests.\n     m_node.peerman = PeerManager::make(chainparams, *m_node.connman, *m_node.addrman,\n                                        m_node.banman.get(), *m_node.scheduler, *m_node.chainman,\n-                                       *m_node.mempool, false);\n+                                       *m_node.mempool, /* ignore_incoming_txs */ false, /* enable_rebroadcast */ true);\n     {\n         CConnman::Options options;\n         options.m_msgproc = m_node.peerman.get();"
      }
    ]
  },
  {
    "sha": "3d5d12383815f376532a21f62c39be2cdcba464a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDVkMTIzODM4MTVmMzc2NTMyYTIxZjYyYzM5YmUyY2RjYmE0NjRh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:11:14Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[mining] Add recency condition on block creation to get rebroadcast set\n\nWhen identifying the rebroadcast candidates, only select transactions that\nentered the mempool REBROADCAST_MIN_TX_AGE ago. This gives the transactions a\nchance to have been picked up by a block, versus one that just entered our\nmempool.",
      "tree": {
        "sha": "ecd024370d3e9744f8a5f007874f02438f3f8241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecd024370d3e9744f8a5f007874f02438f3f8241"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d5d12383815f376532a21f62c39be2cdcba464a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d5d12383815f376532a21f62c39be2cdcba464a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d5d12383815f376532a21f62c39be2cdcba464a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d5d12383815f376532a21f62c39be2cdcba464a/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23635b4874ae123ba54aec2f9363ca3cff4b079e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23635b4874ae123ba54aec2f9363ca3cff4b079e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23635b4874ae123ba54aec2f9363ca3cff4b079e"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 17,
      "deletions": 2
    },
    "files": [
      {
        "sha": "19da4a6df59efb388b618160a7bed491db94929e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d5d12383815f376532a21f62c39be2cdcba464a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d5d12383815f376532a21f62c39be2cdcba464a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3d5d12383815f376532a21f62c39be2cdcba464a",
        "patch": "@@ -57,7 +57,8 @@ BlockAssembler::Options::Options() {\n }\n \n BlockAssembler::BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params, const Options& options)\n-    : chainparams(params),\n+    : m_skip_inclusion_until(options.m_skip_inclusion_until),\n+      chainparams(params),\n       m_mempool(mempool),\n       m_chainstate(chainstate)\n {\n@@ -280,9 +281,13 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n // guaranteed to fail again, but as a belt-and-suspenders check we put it in\n // failedTx and avoid re-evaluation, since the re-evaluation would be using\n // cached size/sigops/fee values that are not actually correct.\n+// Finally, we have a check for transaction recency. The default case will not\n+// skip any transactions for being too recent. This filter is used for\n+// identifying transactions to rebroadcast.\n bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set &mapModifiedTx, CTxMemPool::setEntries &failedTx)\n {\n     assert(it != m_mempool.mapTx.end());\n+    if (it->GetTime() > m_skip_inclusion_until) return true; // transaction is too recent\n     return mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it);\n }\n "
      },
      {
        "sha": "92d5918707295206982da0a1b50561f018ad3f62",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d5d12383815f376532a21f62c39be2cdcba464a/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d5d12383815f376532a21f62c39be2cdcba464a/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=3d5d12383815f376532a21f62c39be2cdcba464a",
        "patch": "@@ -133,6 +133,7 @@ class BlockAssembler\n     bool fIncludeWitness;\n     unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n+    const std::chrono::microseconds m_skip_inclusion_until;\n \n     // Information on the current status of the block\n     uint64_t nBlockWeight;\n@@ -153,6 +154,7 @@ class BlockAssembler\n         Options();\n         size_t nBlockMaxWeight;\n         CFeeRate blockMinFeeRate;\n+        std::chrono::microseconds m_skip_inclusion_until{std::chrono::microseconds::max()};\n     };\n \n     explicit BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params);\n@@ -188,7 +190,10 @@ class BlockAssembler\n       * only as an extra check in case of suboptimal node configuration */\n     bool TestPackageTransactions(const CTxMemPool::setEntries& package) const;\n     /** Return true if given transaction from mapTx has already been evaluated,\n-      * or if the transaction's cached data in mapTx is incorrect. */\n+      * or if the transaction's cached data in mapTx is incorrect.\n+      * If m_skip_inclusion_until is set in the options, we will exclude any\n+      * transactions that entered the mempool after the time specified. This is\n+      * currently used for rebroadcast logic.*/\n     bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set& mapModifiedTx, CTxMemPool::setEntries& failedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n     /** Sort the package in an order that is valid to appear in a block */\n     void SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries);"
      },
      {
        "sha": "5580ddb0e833711e49dfa5f4830a5b100af153c2",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d5d12383815f376532a21f62c39be2cdcba464a/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d5d12383815f376532a21f62c39be2cdcba464a/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=3d5d12383815f376532a21f62c39be2cdcba464a",
        "patch": "@@ -8,11 +8,15 @@\n #include <node/blockstorage.h>\n #include <script/script.h>\n #include <txrebroadcast.h>\n+#include <util/time.h>\n \n /** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n  * circumstances such as miners mining priority transactions. */\n static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n \n+/** Default minimum age for a transaction to be rebroadcast */\n+static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n+\n std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n {\n \n@@ -34,6 +38,7 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n \n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = rebroadcast_block_weight;\n+    options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n \n     // Use CreateNewBlock to identify rebroadcast candidates\n     std::vector<TxIds> rebroadcast_txs;"
      }
    ]
  },
  {
    "sha": "32970c9457773fd7907cd82e9f08523848f3adc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjk3MGM5NDU3NzczZmQ3OTA3Y2Q4MmU5ZjA4NTIzODQ4ZjNhZGM2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-18T01:18:10Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[p2p] Rebroadcast skips the block-validity check\n\nIt's not worth throwing a runtime error if the rebroadcast block fails the\nvalidity checks. Also, its an unnecessary use of resources to be regularly\nperforming the check.",
      "tree": {
        "sha": "297f2082c6a243fc038009ccebaaf96542e1e50c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/297f2082c6a243fc038009ccebaaf96542e1e50c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32970c9457773fd7907cd82e9f08523848f3adc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32970c9457773fd7907cd82e9f08523848f3adc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32970c9457773fd7907cd82e9f08523848f3adc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32970c9457773fd7907cd82e9f08523848f3adc6/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d5d12383815f376532a21f62c39be2cdcba464a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d5d12383815f376532a21f62c39be2cdcba464a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d5d12383815f376532a21f62c39be2cdcba464a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "de45d0de1d0722ebab3720e23f7b6edb1e22ba4a",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32970c9457773fd7907cd82e9f08523848f3adc6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32970c9457773fd7907cd82e9f08523848f3adc6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=32970c9457773fd7907cd82e9f08523848f3adc6",
        "patch": "@@ -58,6 +58,7 @@ BlockAssembler::Options::Options() {\n \n BlockAssembler::BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params, const Options& options)\n     : m_skip_inclusion_until(options.m_skip_inclusion_until),\n+      m_check_block_validity(options.m_check_block_validity),\n       chainparams(params),\n       m_mempool(mempool),\n       m_chainstate(chainstate)\n@@ -178,7 +179,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n     BlockValidationState state;\n     assert(std::addressof(::ChainstateActive()) == std::addressof(m_chainstate));\n-    if (!TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {\n+    if (m_check_block_validity && !TestBlockValidity(state, chainparams, m_chainstate, *pblock, pindexPrev, false, false)) {\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, state.ToString()));\n     }\n     int64_t nTime2 = GetTimeMicros();"
      },
      {
        "sha": "a5676afe41edebf54b30f0f503e75b22f5f8c73a",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32970c9457773fd7907cd82e9f08523848f3adc6/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32970c9457773fd7907cd82e9f08523848f3adc6/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=32970c9457773fd7907cd82e9f08523848f3adc6",
        "patch": "@@ -135,6 +135,9 @@ class BlockAssembler\n     CFeeRate blockMinFeeRate;\n     const std::chrono::microseconds m_skip_inclusion_until;\n \n+    // To permit disabling block validity check\n+    const bool m_check_block_validity;\n+\n     // Information on the current status of the block\n     uint64_t nBlockWeight;\n     uint64_t nBlockTx;\n@@ -155,6 +158,7 @@ class BlockAssembler\n         size_t nBlockMaxWeight;\n         CFeeRate blockMinFeeRate;\n         std::chrono::microseconds m_skip_inclusion_until{std::chrono::microseconds::max()};\n+        bool m_check_block_validity{true};\n     };\n \n     explicit BlockAssembler(CChainState& chainstate, const CTxMemPool& mempool, const CChainParams& params);"
      },
      {
        "sha": "f12942038b26077a8bc0a6d231ac370fb9eeb5cc",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32970c9457773fd7907cd82e9f08523848f3adc6/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32970c9457773fd7907cd82e9f08523848f3adc6/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=32970c9457773fd7907cd82e9f08523848f3adc6",
        "patch": "@@ -39,6 +39,7 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = rebroadcast_block_weight;\n     options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n+    options.m_check_block_validity = false;\n \n     // Use CreateNewBlock to identify rebroadcast candidates\n     std::vector<TxIds> rebroadcast_txs;"
      }
    ]
  },
  {
    "sha": "028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjg1MzZhMWQzYmJmMzUwMmY0M2ExZDFjNTRjZGJjN2FkZTczYzg3",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-28T22:37:08Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-18T18:16:19Z"
      },
      "message": "[mining] Use the new option to skip unconditional logging.\n\nThe unconditional logging would make sense if a user is calling\nCreateNewBlock to mine blocks. However, it seems confusing as a\nside effect of normal transaction relay, so skip it.",
      "tree": {
        "sha": "5d1dbd7ec4a6036434315d09b5a6dd05d7e9590e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d1dbd7ec4a6036434315d09b5a6dd05d7e9590e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32970c9457773fd7907cd82e9f08523848f3adc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32970c9457773fd7907cd82e9f08523848f3adc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32970c9457773fd7907cd82e9f08523848f3adc6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8d45392692ca6edfdbe6682c76bd4ad91cb338ef",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
        "patch": "@@ -168,7 +168,9 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n     pblocktemplate->vTxFees[0] = -nFees;\n \n-    LogPrintf(\"CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\\n\", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n+    if (m_check_block_validity) {\n+        LogPrintf(\"CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\\n\", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n+    }\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();"
      }
    ]
  },
  {
    "sha": "f80a01a23cd7b06c909b1d4ee65a64e86d609809",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODBhMDFhMjNjZDdiMDZjOTA5YjFkNGVlNjVhNjRlODZkNjA5ODA5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-28T22:46:02Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[mining] Calculate the minimum fee rate for transaction inclusion.\n\nThe functionality introduced in this commit is currently unused. The ability\nto calculate the minimum fee rate for a transaction to be included into a block\nis used to identify the top of the mempool, and later applied to filter the\nrebroadcast candidates before sending them to peers.",
      "tree": {
        "sha": "1f22d6425976a5d75cf2ef2fa08812b2a611a9a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f22d6425976a5d75cf2ef2fa08812b2a611a9a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f80a01a23cd7b06c909b1d4ee65a64e86d609809",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80a01a23cd7b06c909b1d4ee65a64e86d609809",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f80a01a23cd7b06c909b1d4ee65a64e86d609809",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80a01a23cd7b06c909b1d4ee65a64e86d609809/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/028536a1d3bbf3502f43a1d1c54cdbc7ade73c87"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 40,
      "deletions": 3
    },
    "files": [
      {
        "sha": "83926be4398ac9e44865614933e97c49f45f5c53",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 1,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80a01a23cd7b06c909b1d4ee65a64e86d609809/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80a01a23cd7b06c909b1d4ee65a64e86d609809/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f80a01a23cd7b06c909b1d4ee65a64e86d609809",
        "patch": "@@ -305,6 +305,25 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n     std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n }\n \n+CFeeRate BlockAssembler::MinTxFeeRate()\n+{\n+    int packages_selected = 0;\n+    int descendants_updated = 0;\n+    CFeeRate min_fee_rate = CFeeRate(COIN, 1);\n+\n+    resetBlock();\n+    pblocktemplate = std::make_unique<CBlockTemplate>();\n+\n+    CBlockIndex* prev_block_index = m_chainstate.m_chain.Tip();\n+    assert(prev_block_index != nullptr);\n+    nHeight = prev_block_index->nHeight + 1;\n+    nLockTimeCutoff = prev_block_index->GetMedianTimePast();\n+    fIncludeWitness = IsWitnessEnabled(prev_block_index, chainparams.GetConsensus());\n+\n+    WITH_LOCK(m_mempool.cs, addPackageTxs(packages_selected, descendants_updated, &min_fee_rate));\n+    return min_fee_rate;\n+}\n+\n // This transaction selection algorithm orders the mempool based\n // on feerate of a transaction including all unconfirmed ancestors.\n // Since we don't remove transactions from the mempool as we select them\n@@ -315,7 +334,7 @@ void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::ve\n // Each time through the loop, we compare the best transaction in\n // mapModifiedTxs with the next transaction in the mempool to decide what\n // transaction package to work on next.\n-void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpdated)\n+void BlockAssembler::addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated, CFeeRate* min_package_fee_rate)\n {\n     // mapModifiedTx will store sorted packages after they are modified\n     // because some of their txs are already in the block\n@@ -397,6 +416,10 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n                 failedTx.insert(iter);\n             }\n \n+            // We ran out of space, so don't track fee rates of leftover\n+            // transactions that can be squeezed in\n+            min_package_fee_rate = nullptr;\n+\n             ++nConsecutiveFailed;\n \n             if (nConsecutiveFailed > MAX_CONSECUTIVE_FAILURES && nBlockWeight >\n@@ -427,6 +450,12 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         // This transaction will make it in; reset the failed counter.\n         nConsecutiveFailed = 0;\n \n+        if (min_package_fee_rate) {\n+            // Compare package fee rate and potentially update new minimum\n+            const CFeeRate new_fee_rate(packageFees, packageSize);\n+            if (new_fee_rate < *min_package_fee_rate) *min_package_fee_rate = new_fee_rate;\n+        }\n+\n         // Package can be added. Sort the entries in a valid order.\n         std::vector<CTxMemPool::txiter> sortedEntries;\n         SortForBlock(ancestors, sortedEntries);"
      },
      {
        "sha": "b2ba98dc1f7edc34d889bdee9d7d8da2c57adc63",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f80a01a23cd7b06c909b1d4ee65a64e86d609809/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f80a01a23cd7b06c909b1d4ee65a64e86d609809/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=f80a01a23cd7b06c909b1d4ee65a64e86d609809",
        "patch": "@@ -170,6 +170,12 @@ class BlockAssembler\n     inline static std::optional<int64_t> m_last_block_num_txs{};\n     inline static std::optional<int64_t> m_last_block_weight{};\n \n+    /* This function wraps addPackageTxs to calculate and return the minimum fee\n+     * rate required for a package to currently be included in the highest fee rate\n+     * block possible based on mempool transactions.\n+     */\n+    CFeeRate MinTxFeeRate();\n+\n private:\n     // utility functions\n     /** Clear the block's state and prepare for assembling a new block */\n@@ -180,8 +186,10 @@ class BlockAssembler\n     // Methods for how to add transactions to a block.\n     /** Add transactions based on feerate including unconfirmed ancestors\n       * Increments nPackagesSelected / nDescendantsUpdated with corresponding\n-      * statistics from the package selection (for logging statistics). */\n-    void addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n+      * statistics from the package selection (for logging statistics).\n+      * Populates min_package_fee_rate with the minimum fee rate of a package\n+      * included in the block (used for rebroadcast cache). */\n+    void addPackageTxs(int& nPackagesSelected, int& nDescendantsUpdated, CFeeRate* min_package_fee_rate = nullptr) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */"
      }
    ]
  },
  {
    "sha": "25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWE0MWU2YTcyMDYxMTlhZmQ1Y2ViOWNjZjdkNTFjZmZkNzUzZWU0",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-29T20:17:28Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[rebroadcast] Apply a fee rate filter\n\nEvery minute, calculate the threshold fee rate for a transaction to be\nconsidered at the top of the mempool, and cache this value. Apply this as a\ncondition when identifying rebroadcast candidates.",
      "tree": {
        "sha": "57e820aecf44ada9a999f912a97a8b449c23344d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57e820aecf44ada9a999f912a97a8b449c23344d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f80a01a23cd7b06c909b1d4ee65a64e86d609809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f80a01a23cd7b06c909b1d4ee65a64e86d609809",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f80a01a23cd7b06c909b1d4ee65a64e86d609809"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 71,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4a679f774ea4f4149ac29574588bc905ee257ab8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
        "patch": "@@ -1293,14 +1293,18 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n     // same probability that we have in the reject filter).\n     m_recent_confirmed_transactions.reset(new CRollingBloomFilter(48000, 0.000001));\n \n+    if (enable_rebroadcast) {\n+        scheduler.scheduleEvery([this] { m_txrebroadcast->CacheMinRebroadcastFee(); }, REBROADCAST_CACHE_FREQUENCY);\n+    }\n+\n     // Stale tip checking and peer eviction are on two different timers, but we\n     // don't want them to get out of sync due to drift in the scheduler, so we\n     // combine them in one function and schedule at the quicker (peer-eviction)\n     // timer.\n     static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n     scheduler.scheduleEvery([this] { this->CheckForStaleTipAndEvictPeers(); }, std::chrono::seconds{EXTRA_PEER_CHECK_INTERVAL});\n \n-    // schedule next run for 10-15 minutes in the future\n+    // Attempt initial broadcast of locally submitted transactions in 10-15 minutes\n     const std::chrono::milliseconds delta = std::chrono::minutes{10} + GetRandMillis(std::chrono::minutes{5});\n     scheduler.scheduleFromNow([&] { ReattemptInitialBroadcast(scheduler); }, delta);\n }"
      },
      {
        "sha": "ac0f3c68173d1cd563a91f2152548d039318924f",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 1,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
        "patch": "@@ -41,8 +41,29 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n     options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n     options.m_check_block_validity = false;\n \n-    // Use CreateNewBlock to identify rebroadcast candidates\n+    // The fee rate condition only filters out transactions if it runs before\n+    // we process the recently mined block. If the cache has since been\n+    // updated, used the value from the previous run to filter transactions.\n+    // Increment the cached value by 1 satoshi / 1000 bytes to avoid\n+    // rebroadcasting a long-tail of transactions at a fee rate boundary.\n+    {\n+        const CBlockIndex* tip = m_chainman.ActiveTip();\n+        LOCK(m_rebroadcast_mutex);\n+        if (m_tip_at_cache_time == tip) {\n+            m_previous_cached_fee_rate += CFeeRate(1);\n+            options.blockMinFeeRate = m_previous_cached_fee_rate;\n+        } else {\n+            m_cached_fee_rate += CFeeRate(1);\n+            options.blockMinFeeRate = m_cached_fee_rate;\n+        }\n+    }\n+\n+    // Skip if the fee rate cache has not yet run, which could happen once on\n+    // startup\n     std::vector<TxIds> rebroadcast_txs;\n+    if (options.blockMinFeeRate.GetFeePerK() == CAmount(0)) return rebroadcast_txs;\n+\n+    // Use CreateNewBlock to identify rebroadcast candidates\n     auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n                               .CreateNewBlock(CScript());\n     rebroadcast_txs.reserve(block_template->block.vtx.size());\n@@ -55,3 +76,27 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n \n     return rebroadcast_txs;\n };\n+\n+void TxRebroadcastHandler::CacheMinRebroadcastFee()\n+{\n+    CChainState& chain_state = m_chainman.ActiveChainstate();\n+    if (chain_state.IsInitialBlockDownload() || !m_mempool.IsLoaded()) return;\n+\n+    // Calculate a new fee rate\n+    BlockAssembler::Options options;\n+    options.nBlockMaxWeight = REBROADCAST_WEIGHT_RATIO * MAX_BLOCK_WEIGHT;\n+\n+    CBlockIndex* tip;\n+    CFeeRate current_fee_rate;\n+    {\n+        LOCK(cs_main);\n+        tip = m_chainman.ActiveTip();\n+        current_fee_rate = BlockAssembler(chain_state, m_mempool, m_chainparams, options).MinTxFeeRate();\n+    }\n+\n+    // Update stored information\n+    LOCK(m_rebroadcast_mutex);\n+    m_tip_at_cache_time = tip;\n+    m_previous_cached_fee_rate = m_cached_fee_rate;\n+    m_cached_fee_rate = current_fee_rate;\n+};"
      },
      {
        "sha": "bdec70ffca8a6836c9874010f2395c713893ea4f",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
        "patch": "@@ -7,6 +7,10 @@\n \n #include <policy/feerate.h>\n #include <txmempool.h>\n+#include <validation.h>\n+\n+/** Frequency to run the fee rate cache. */\n+constexpr std::chrono::minutes REBROADCAST_CACHE_FREQUENCY{1};\n \n struct TxIds {\n     TxIds(uint256 txid, uint256 wtxid) : m_txid(txid), m_wtxid(wtxid) {}\n@@ -36,10 +40,26 @@ class TxRebroadcastHandler\n      * */\n     std::vector<TxIds> GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index);\n \n+    /** Assemble a block from the highest fee rate packages in the local\n+     *  mempool. Update the cache with the minimum fee rate for a package to be\n+     *  included.\n+     * */\n+    void CacheMinRebroadcastFee();\n+\n private:\n     const CTxMemPool& m_mempool;\n     const ChainstateManager& m_chainman;\n     const CChainParams& m_chainparams;\n+\n+    /** Protects internal data members */\n+    Mutex m_rebroadcast_mutex;\n+\n+    /** Block at time of cache */\n+    CBlockIndex* m_tip_at_cache_time GUARDED_BY(m_rebroadcast_mutex){nullptr};\n+\n+    /** Minimum fee rate for package to be included in block */\n+    CFeeRate m_cached_fee_rate GUARDED_BY(m_rebroadcast_mutex);\n+    CFeeRate m_previous_cached_fee_rate GUARDED_BY(m_rebroadcast_mutex);\n };\n \n #endif // BITCOIN_TXREBROADCAST_H"
      }
    ]
  },
  {
    "sha": "a615dd3df87d258b57e043c78fabfa8532737780",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjE1ZGQzZGY4N2QyNThiNTdlMDQzYzc4ZmFiZmE4NTMyNzM3Nzgw",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-26T23:06:27Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[rebroadcast] Track rebroadcast attempts\n\nIntroduce a boost::multi_index to track our previous rebroadcast attempts. We\nuse this information primarily to ensure we don't exceed a maximum number of\nrebroadcast attempts. This allows transactions to genuinely expire from the\nmajority of mempools. We disable automatic rebroadcasts because the\nconceptually desired behavior should be that after a certain amount of time,\nonly the source wallet should rebroadcast the transaction. (Of course, we\ncannot enforce this on a decentralized network, but design the default behavior\nto uphold this idea.)",
      "tree": {
        "sha": "412079da3d7f9828a67ccc5e8e0dcf2706620be8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/412079da3d7f9828a67ccc5e8e0dcf2706620be8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a615dd3df87d258b57e043c78fabfa8532737780",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a615dd3df87d258b57e043c78fabfa8532737780",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a615dd3df87d258b57e043c78fabfa8532737780",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a615dd3df87d258b57e043c78fabfa8532737780/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25a41e6a7206119afd5ceb9ccf7d51cffd753ee4"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 112,
      "deletions": 6
    },
    "files": [
      {
        "sha": "40c67d08220acb3d02737f32236bfc10eb37e496",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 2,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615dd3df87d258b57e043c78fabfa8532737780/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615dd3df87d258b57e043c78fabfa8532737780/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=a615dd3df87d258b57e043c78fabfa8532737780",
        "patch": "@@ -10,15 +10,67 @@\n #include <txrebroadcast.h>\n #include <util/time.h>\n \n+#include <boost/multi_index/hashed_index.hpp>\n+#include <boost/multi_index/member.hpp>\n+#include <boost/multi_index/ordered_index.hpp>\n+#include <boost/multi_index_container.hpp>\n+\n /** We rebroadcast upto 3/4 of max block weight to reduce noise due to\n  * circumstances such as miners mining priority transactions. */\n static constexpr float REBROADCAST_WEIGHT_RATIO{0.75};\n \n /** Default minimum age for a transaction to be rebroadcast */\n static constexpr std::chrono::minutes REBROADCAST_MIN_TX_AGE{30min};\n \n+/** Maximum number of times we will rebroadcast a transaction */\n+static constexpr int MAX_REBROADCAST_COUNT{6};\n+\n+/** Minimum amount of time between returning the same transaction for\n+ * rebroadcast */\n+static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n+\n+struct RebroadcastEntry {\n+    RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n+        : m_last_attempt(now_time),\n+          m_wtxid(wtxid) {}\n+\n+    std::chrono::microseconds m_last_attempt;\n+    const uint256 m_wtxid;\n+    int m_count{1};\n+};\n+\n+/** Used for multi_index tag  */\n+struct index_by_last_attempt {};\n+\n+class indexed_rebroadcast_set : public\n+boost::multi_index_container<\n+    RebroadcastEntry,\n+    boost::multi_index::indexed_by<\n+        // sorted by wtxid\n+        boost::multi_index::hashed_unique<\n+            boost::multi_index::tag<index_by_wtxid>,\n+            boost::multi_index::member<RebroadcastEntry, const uint256, &RebroadcastEntry::m_wtxid>,\n+            SaltedTxidHasher\n+        >,\n+        // sorted by last rebroadcast time\n+        boost::multi_index::ordered_non_unique<\n+            boost::multi_index::tag<index_by_last_attempt>,\n+            boost::multi_index::member<RebroadcastEntry, std::chrono::microseconds, &RebroadcastEntry::m_last_attempt>\n+        >\n+    >\n+>{};\n+\n+TxRebroadcastHandler::~TxRebroadcastHandler() = default;\n+\n+TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n+    : m_mempool{mempool},\n+      m_chainman{chainman},\n+      m_chainparams(chainparams),\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+\n std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n {\n+    auto start_time = GetTime<std::chrono::microseconds>();\n \n     // Calculate how many transactions to rebroadcast based on the size of the\n     // incoming block.\n@@ -38,7 +90,7 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n \n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = rebroadcast_block_weight;\n-    options.m_skip_inclusion_until = GetTime<std::chrono::microseconds>() - REBROADCAST_MIN_TX_AGE;\n+    options.m_skip_inclusion_until = start_time - REBROADCAST_MIN_TX_AGE;\n     options.m_check_block_validity = false;\n \n     // The fee rate condition only filters out transactions if it runs before\n@@ -68,10 +120,43 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n                               .CreateNewBlock(CScript());\n     rebroadcast_txs.reserve(block_template->block.vtx.size());\n \n+    LOCK(m_rebroadcast_mutex);\n     for (const CTransactionRef& tx : block_template->block.vtx) {\n         if (tx->IsCoinBase()) continue;\n \n-        rebroadcast_txs.push_back(TxIds(tx->GetHash(), tx->GetWitnessHash()));\n+        const uint256& txid = tx->GetHash();\n+        const uint256& wtxid = tx->GetWitnessHash();\n+\n+        // Check if we have previously rebroadcasted, decide if we will this\n+        // round, and if so, record the attempt.\n+        auto entry_it = m_attempt_tracker->find(wtxid);\n+\n+        if (entry_it == m_attempt_tracker->end()) {\n+            // No existing entry, we will rebroadcast, so create a new one\n+            RebroadcastEntry entry(start_time, wtxid);\n+            m_attempt_tracker->insert(entry);\n+        } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n+            // We have already rebroadcast this transaction the maximum number\n+            // of times permitted, so skip rebroadcasting.\n+            continue;\n+        } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n+            // We already rebroadcasted this in the past 4 hours. Even if we\n+            // added it to the set, it would probably not get INVed to most\n+            // peers due to filterInventoryKnown.\n+            continue;\n+        } else {\n+            // We have rebroadcasted this transaction before, but will try\n+            // again now. Record the attempt.\n+            auto UpdateRebroadcastEntry = [start_time](RebroadcastEntry& rebroadcast_entry) {\n+                rebroadcast_entry.m_last_attempt = start_time;\n+                ++rebroadcast_entry.m_count;\n+            };\n+\n+            m_attempt_tracker->modify(entry_it, UpdateRebroadcastEntry);\n+        }\n+\n+        // Add to set of rebroadcast candidates\n+        rebroadcast_txs.push_back(TxIds(txid, wtxid));\n     }\n \n     return rebroadcast_txs;"
      },
      {
        "sha": "3d3806aa553a816ca79b8ef2b21dba6bd4f91272",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615dd3df87d258b57e043c78fabfa8532737780/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615dd3df87d258b57e043c78fabfa8532737780/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=a615dd3df87d258b57e043c78fabfa8532737780",
        "patch": "@@ -19,13 +19,13 @@ struct TxIds {\n     const uint256 m_wtxid;\n };\n \n+class indexed_rebroadcast_set;\n+\n class TxRebroadcastHandler\n {\n public:\n-    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams)\n-        : m_mempool(mempool),\n-          m_chainman(chainman),\n-          m_chainparams(chainparams){};\n+    TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n+    ~TxRebroadcastHandler();\n \n     /**\n      * Identify transaction candidates to be rebroadcast.\n@@ -60,6 +60,26 @@ class TxRebroadcastHandler\n     /** Minimum fee rate for package to be included in block */\n     CFeeRate m_cached_fee_rate GUARDED_BY(m_rebroadcast_mutex);\n     CFeeRate m_previous_cached_fee_rate GUARDED_BY(m_rebroadcast_mutex);\n+\n+    /** Keep track of previous rebroadcast attempts.\n+     *\n+     *  There are circumstances where our mempool might know about transactions\n+     *  that will never be mined. Two examples:\n+     *  1. A software upgrade tightens policy, but the node has not been\n+     *  upgraded and thus is accepting transactions that other nodes on the\n+     *  network now reject.\n+     *  2. An attacker targets the network by sending conflicting transactions\n+     *  to nodes.\n+     *\n+     *  Under such circumstances, we want to avoid wasting a significant amount\n+     *  of network bandwidth. Also we want to let transactions genuinely expire\n+     *  from the majority of mempools, unless the source wallet decides to\n+     *  rebroadcast the transaction.\n+     *\n+     *  So, we use this tracker to limit the frequency and the maximum number\n+     *  of times we will attempt to rebroadcast a transaction.\n+     * */\n+    std::unique_ptr<indexed_rebroadcast_set> m_attempt_tracker GUARDED_BY(m_rebroadcast_mutex);\n };\n \n #endif // BITCOIN_TXREBROADCAST_H"
      },
      {
        "sha": "b56ef5cde706cb3b6e7e86abfd29f755665d748b",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a615dd3df87d258b57e043c78fabfa8532737780/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a615dd3df87d258b57e043c78fabfa8532737780/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=a615dd3df87d258b57e043c78fabfa8532737780",
        "patch": "@@ -57,6 +57,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/filesystem.hpp\n     boost/filesystem/fstream.hpp\n     boost/multi_index/hashed_index.hpp\n+    boost/multi_index/member.hpp\n     boost/multi_index/ordered_index.hpp\n     boost/multi_index/sequenced_index.hpp\n     boost/multi_index_container.hpp"
      }
    ]
  },
  {
    "sha": "d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDhmNDkzMGZhNTY3NWU3ZjM2ZGJmOTE2ZjQwOGEyMDQwZDJjZDVh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-04-07T18:44:27Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[rebroadcast] Delete TxRebroadcastHandler default copy member functions.\n\nSince the attempt tracker is implemented as a unique pointer, it should not be\ncopied. Delete the special member functions that would allow copying the\nTxRebroadcastHandler, and thus the unique pointer member variable (copy\nconstructor and copy assignment operator).",
      "tree": {
        "sha": "da6459caef770abe9731c185657ad4a4d94168cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da6459caef770abe9731c185657ad4a4d94168cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48f4930fa5675e7f36dbf916f408a2040d2cd5a/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a615dd3df87d258b57e043c78fabfa8532737780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a615dd3df87d258b57e043c78fabfa8532737780",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a615dd3df87d258b57e043c78fabfa8532737780"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9ca9a9b46fcdb23b262fdcb1e6b57f7f3013be65",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d48f4930fa5675e7f36dbf916f408a2040d2cd5a/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d48f4930fa5675e7f36dbf916f408a2040d2cd5a/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
        "patch": "@@ -27,6 +27,9 @@ class TxRebroadcastHandler\n     TxRebroadcastHandler(const CTxMemPool& mempool, const ChainstateManager& chainman, const CChainParams& chainparams);\n     ~TxRebroadcastHandler();\n \n+    TxRebroadcastHandler(const TxRebroadcastHandler& other) = delete;\n+    TxRebroadcastHandler& operator=(const TxRebroadcastHandler& other) = delete;\n+\n     /**\n      * Identify transaction candidates to be rebroadcast.\n      * Calculates the top of the mempool by fee rate, limits the size based on"
      }
    ]
  },
  {
    "sha": "8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWNjYzFlMjliMmU4MmZlNzVlNmFhODIyNjliYjU0ZTkwNmViMjc0",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-13T23:30:46Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[rebroadcast] Add a bloom filter for txns that have been max rebroadcasted.\n\nWhen a transaction hits the maximum on the attempt tracker, add it to a bloom\nfilter. Don't rebroadcast transactions present in the bloom filter. This\nensures that we won't repeatedly rebroadcast transactions that have hit the\nMAX_REBROADCAST_COUNT, even if there are more transactions than can fit in\nm_attempt_tracker at once.",
      "tree": {
        "sha": "81b3ee2e118953fabd4bc66fad2b400792d9c66d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81b3ee2e118953fabd4bc66fad2b400792d9c66d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eccc1e29b2e82fe75e6aa82269bb54e906eb274/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d48f4930fa5675e7f36dbf916f408a2040d2cd5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d48f4930fa5675e7f36dbf916f408a2040d2cd5a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "508fd8b767184fa40ffaf14d9b30383bfedce7b4",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eccc1e29b2e82fe75e6aa82269bb54e906eb274/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eccc1e29b2e82fe75e6aa82269bb54e906eb274/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
        "patch": "@@ -66,7 +66,8 @@ TxRebroadcastHandler::TxRebroadcastHandler(const CTxMemPool& mempool, const Chai\n     : m_mempool{mempool},\n       m_chainman{chainman},\n       m_chainparams(chainparams),\n-      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()}{}\n+      m_attempt_tracker{std::make_unique<indexed_rebroadcast_set>()},\n+      m_max_filter(1500, 0.0001){}\n \n std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::shared_ptr<const CBlock>& recent_block, const CBlockIndex& recent_block_index)\n {\n@@ -127,6 +128,10 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n         const uint256& txid = tx->GetHash();\n         const uint256& wtxid = tx->GetWitnessHash();\n \n+        // Check if we have kinda recently rebroadcasted this transaction the\n+        // maximum number of times.\n+        if (m_max_filter.contains(wtxid)) continue;\n+\n         // Check if we have previously rebroadcasted, decide if we will this\n         // round, and if so, record the attempt.\n         auto entry_it = m_attempt_tracker->find(wtxid);\n@@ -137,7 +142,12 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n             m_attempt_tracker->insert(entry);\n         } else if (entry_it->m_count >= MAX_REBROADCAST_COUNT) {\n             // We have already rebroadcast this transaction the maximum number\n-            // of times permitted, so skip rebroadcasting.\n+            // of times permitted. Record in the max filter, remove from\n+            // attempt tracker, and skip rebroadcasting.\n+            LogPrint(BCLog::NET, \"Max number of rebroadcasts hit for tx %s.\\n\", wtxid.ToString());\n+            m_max_filter.insert(wtxid);\n+            const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+            if (it != m_attempt_tracker->end()) m_attempt_tracker->erase(it);\n             continue;\n         } else if (entry_it->m_last_attempt > start_time - MIN_REATTEMPT_INTERVAL) {\n             // We already rebroadcasted this in the past 4 hours. Even if we"
      },
      {
        "sha": "11537c85f88029bc9cfa705f420882fad62c4cf0",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8eccc1e29b2e82fe75e6aa82269bb54e906eb274/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8eccc1e29b2e82fe75e6aa82269bb54e906eb274/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_TXREBROADCAST_H\n #define BITCOIN_TXREBROADCAST_H\n \n+#include <bloom.h>\n #include <policy/feerate.h>\n #include <txmempool.h>\n #include <validation.h>\n@@ -83,6 +84,14 @@ class TxRebroadcastHandler\n      *  of times we will attempt to rebroadcast a transaction.\n      * */\n     std::unique_ptr<indexed_rebroadcast_set> m_attempt_tracker GUARDED_BY(m_rebroadcast_mutex);\n+\n+    /** Keep track of transactions we have rebroadcasted a maximum number of times.\n+     *\n+     *  Once a transaction hits the MAX_REBROADCAST_COUNT on the\n+     *  m_attempt_tracker, add it to this bloom filter so we can prevent\n+     *  further rebroadcasts until this filter rolls over.\n+     * */\n+    CRollingBloomFilter m_max_filter GUARDED_BY(m_rebroadcast_mutex);\n };\n \n #endif // BITCOIN_TXREBROADCAST_H"
      }
    ]
  },
  {
    "sha": "83777da9fe1018e5368e69b257dd1e401eba2619",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Mzc3N2RhOWZlMTAxOGU1MzY4ZTY5YjI1N2RkMWU0MDFlYmEyNjE5",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-26T23:17:20Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[rebroadcast] Delete and expire entries from m_attempt_tracker\n\nEnsure the index does not grow unbounded, and delete entries that\nwere last updated >3 months ago.",
      "tree": {
        "sha": "b6e24b9a55b902009b92b049b67ff7c61cb46fbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b6e24b9a55b902009b92b049b67ff7c61cb46fbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83777da9fe1018e5368e69b257dd1e401eba2619",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83777da9fe1018e5368e69b257dd1e401eba2619",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83777da9fe1018e5368e69b257dd1e401eba2619",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83777da9fe1018e5368e69b257dd1e401eba2619/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8eccc1e29b2e82fe75e6aa82269bb54e906eb274",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8eccc1e29b2e82fe75e6aa82269bb54e906eb274"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 31,
      "deletions": 0
    },
    "files": [
      {
        "sha": "aeb509d856fc74b6a212065f94ef0ce12ed86dc7",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83777da9fe1018e5368e69b257dd1e401eba2619/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83777da9fe1018e5368e69b257dd1e401eba2619/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=83777da9fe1018e5368e69b257dd1e401eba2619",
        "patch": "@@ -29,6 +29,12 @@ static constexpr int MAX_REBROADCAST_COUNT{6};\n  * rebroadcast */\n static constexpr std::chrono::hours MIN_REATTEMPT_INTERVAL{4h};\n \n+/** The maximum number of entries permitted in m_attempt_tracker */\n+static constexpr int MAX_ENTRIES{500};\n+\n+/** The maximum age of an entry ~3 months */\n+static constexpr std::chrono::hours MAX_ENTRY_AGE{24h * 30 * 3};\n+\n struct RebroadcastEntry {\n     RebroadcastEntry(std::chrono::microseconds now_time, uint256 wtxid)\n         : m_last_attempt(now_time),\n@@ -169,6 +175,8 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n         rebroadcast_txs.push_back(TxIds(txid, wtxid));\n     }\n \n+    TrimMaxRebroadcast();\n+\n     return rebroadcast_txs;\n };\n \n@@ -195,3 +203,23 @@ void TxRebroadcastHandler::CacheMinRebroadcastFee()\n     m_previous_cached_fee_rate = m_cached_fee_rate;\n     m_cached_fee_rate = current_fee_rate;\n };\n+\n+void TxRebroadcastHandler::TrimMaxRebroadcast()\n+{\n+    AssertLockHeld(m_rebroadcast_mutex);\n+    auto min_time = GetTime<std::chrono::microseconds>() - MAX_ENTRY_AGE;\n+\n+    while (!m_attempt_tracker->empty()) {\n+        auto it = m_attempt_tracker->get<index_by_last_attempt>().begin();\n+        if (it->m_last_attempt <= min_time || m_attempt_tracker->size() > MAX_ENTRIES) {\n+            // Either we last attempted to rebroadcast longer than\n+            // MAX_ENTRY_AGE ago, or the attempt tracker is full and this is\n+            // the oldest attempt.\n+            m_attempt_tracker->get<index_by_last_attempt>().erase(it);\n+        } else {\n+            // There are no more attempts older than min_time and the attempt\n+            // tracker is not full.\n+            break;\n+        }\n+    }\n+};"
      },
      {
        "sha": "7bdc89347679d697df96aee89e02d4beb1a7fd4d",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83777da9fe1018e5368e69b257dd1e401eba2619/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83777da9fe1018e5368e69b257dd1e401eba2619/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=83777da9fe1018e5368e69b257dd1e401eba2619",
        "patch": "@@ -92,6 +92,9 @@ class TxRebroadcastHandler\n      *  further rebroadcasts until this filter rolls over.\n      * */\n     CRollingBloomFilter m_max_filter GUARDED_BY(m_rebroadcast_mutex);\n+\n+    /** Limit the size of m_attempt_tracker by deleting the oldest entries */\n+    void TrimMaxRebroadcast() EXCLUSIVE_LOCKS_REQUIRED(m_rebroadcast_mutex);\n };\n \n #endif // BITCOIN_TXREBROADCAST_H"
      }
    ]
  },
  {
    "sha": "b3053c338c1f8199583f09a181fbe8eef798a4ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzA1M2MzMzhjMWY4MTk5NTgzZjA5YTE4MWZiZThlZWY3OThhNGJh",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-25T22:54:33Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[rebroadcast] Add logging to monitor rebroadcast.",
      "tree": {
        "sha": "da1aabdbe461c273e2331eeba4a3f8b282dbe89d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da1aabdbe461c273e2331eeba4a3f8b282dbe89d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3053c338c1f8199583f09a181fbe8eef798a4ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3053c338c1f8199583f09a181fbe8eef798a4ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3053c338c1f8199583f09a181fbe8eef798a4ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3053c338c1f8199583f09a181fbe8eef798a4ba/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83777da9fe1018e5368e69b257dd1e401eba2619",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83777da9fe1018e5368e69b257dd1e401eba2619",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83777da9fe1018e5368e69b257dd1e401eba2619"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d5d9300c5786b3aca6aaedc57792268c18c0bcee",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3053c338c1f8199583f09a181fbe8eef798a4ba/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3053c338c1f8199583f09a181fbe8eef798a4ba/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=b3053c338c1f8199583f09a181fbe8eef798a4ba",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <chainparams.h>\n #include <consensus/consensus.h>\n+#include <logging.h>\n #include <miner.h>\n #include <node/blockstorage.h>\n #include <script/script.h>\n@@ -125,6 +126,7 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n     // Use CreateNewBlock to identify rebroadcast candidates\n     auto block_template = BlockAssembler(m_chainman.ActiveChainstate(), m_mempool, m_chainparams, options)\n                               .CreateNewBlock(CScript());\n+    auto after_cnb_time = GetTime<std::chrono::microseconds>();\n     rebroadcast_txs.reserve(block_template->block.vtx.size());\n \n     LOCK(m_rebroadcast_mutex);\n@@ -177,6 +179,15 @@ std::vector<TxIds> TxRebroadcastHandler::GetRebroadcastTransactions(const std::s\n \n     TrimMaxRebroadcast();\n \n+    auto delta1 = after_cnb_time - start_time;\n+    auto delta2 = GetTime<std::chrono::microseconds>() - start_time;\n+    LogPrint(BCLog::BENCH, \"GetRebroadcastTransactions(): %d us total, %d us spent in CreateNewBlock.\\n\", delta2.count(), delta1.count());\n+    LogPrint(BCLog::NET, \"Queued %d transactions for attempted rebroadcast, filtered from %d candidates with cached fee rate of %s.\\n\", rebroadcast_txs.size(), block_template->block.vtx.size() - 1, m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB));\n+\n+    for (TxIds ids : rebroadcast_txs) {\n+        LogPrint(BCLog::NET, \"Attempting to rebroadcast txid: %s wtxid: %s\\n\", ids.m_txid.ToString(), ids.m_wtxid.ToString());\n+    }\n+\n     return rebroadcast_txs;\n };\n \n@@ -191,17 +202,21 @@ void TxRebroadcastHandler::CacheMinRebroadcastFee()\n \n     CBlockIndex* tip;\n     CFeeRate current_fee_rate;\n+    auto start_time = GetTime<std::chrono::microseconds>();\n     {\n         LOCK(cs_main);\n         tip = m_chainman.ActiveTip();\n         current_fee_rate = BlockAssembler(chain_state, m_mempool, m_chainparams, options).MinTxFeeRate();\n     }\n+    auto delta_time = GetTime<std::chrono::microseconds>() - start_time;\n \n     // Update stored information\n     LOCK(m_rebroadcast_mutex);\n     m_tip_at_cache_time = tip;\n     m_previous_cached_fee_rate = m_cached_fee_rate;\n     m_cached_fee_rate = current_fee_rate;\n+\n+    LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n };\n \n void TxRebroadcastHandler::TrimMaxRebroadcast()"
      }
    ]
  },
  {
    "sha": "4eabc075b685c67f47226c0a13b0e35c6a702146",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWFiYzA3NWI2ODVjNjdmNDcyMjZjMGExM2IwZTM1YzZhNzAyMTQ2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-04-16T18:10:11Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[rebroadcast] Stop tracking rebroadcast attempts for certain transactions\n\nDepending on the reason a transaction is removed from the mempool, it can be\nextremely unlikely for it to be able to re-enter. Some examples are if it was\nmined into a block or replaced using RBF. In these circumstances, we can remove\nthe transaction entry from the rebroadcast tracker. Under an unlikely\ncircumstance where the transaction does re-enter the mempool and gets\nrebroadcast, it will simply be re-added to the attempt tracker.",
      "tree": {
        "sha": "b14834a3c2bae29d03ae44d6ffeb0e5de10c07aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b14834a3c2bae29d03ae44d6ffeb0e5de10c07aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eabc075b685c67f47226c0a13b0e35c6a702146",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eabc075b685c67f47226c0a13b0e35c6a702146",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4eabc075b685c67f47226c0a13b0e35c6a702146",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eabc075b685c67f47226c0a13b0e35c6a702146/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3053c338c1f8199583f09a181fbe8eef798a4ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3053c338c1f8199583f09a181fbe8eef798a4ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3053c338c1f8199583f09a181fbe8eef798a4ba"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 54,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4b5f2f71a45bc00cdd032c696f0fd5d7950e9f9d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 3,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eabc075b685c67f47226c0a13b0e35c6a702146/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eabc075b685c67f47226c0a13b0e35c6a702146/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=4eabc075b685c67f47226c0a13b0e35c6a702146",
        "patch": "@@ -234,6 +234,7 @@ class PeerManagerImpl final : public PeerManager\n                     CTxMemPool& pool, bool ignore_incoming_txs, bool enable_rebroadcast);\n \n     /** Overridden from CValidationInterface. */\n+    void TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock> &block, const CBlockIndex* pindex) override;\n     void UpdatedBlockTip(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindexNew, const CBlockIndex* pindexFork, bool fInitialDownload) override;\n@@ -1310,9 +1311,42 @@ PeerManagerImpl::PeerManagerImpl(const CChainParams& chainparams, CConnman& conn\n }\n \n /**\n- * Evict orphan txn pool entries based on a newly connected\n- * block, remember the recently confirmed transactions, and delete tracked\n- * announcements for them. Also save the time of the last tip update.\n+ * If a transaction was removed from the mempool for a reason that entails it\n+ * most likely will not re-enter, let the rebroadcast handler know.\n+ */\n+void PeerManagerImpl::TransactionRemovedFromMempool(const CTransactionRef& tx, MemPoolRemovalReason reason, uint64_t mempool_sequence)\n+{\n+    if (!m_txrebroadcast) return;\n+\n+    switch(reason) {\n+        case MemPoolRemovalReason::BLOCK:\n+            // Although transactions removed for this reason will not be\n+            // returned by this callback, include it here so the compiler\n+            // can warn about missing cases in this switch statement.\n+            // These transactions are handled by BlockConnected.\n+        case MemPoolRemovalReason::EXPIRY:\n+            // The rebroadcast attempt tracker should remember transactions\n+            // even after they have expired from the mempool to avoid endlessly\n+            // rebroadcasting certain transactions. For example, if two peers\n+            // are unaware of new policy or consensus rules, we don't want them\n+            // to ping-pong transactions that are considered invalid by the\n+            // majority of the network.\n+        case MemPoolRemovalReason::SIZELIMIT:\n+            break;\n+        case MemPoolRemovalReason::REORG:\n+        case MemPoolRemovalReason::CONFLICT:\n+        case MemPoolRemovalReason::REPLACED:\n+            m_txrebroadcast->RemoveFromAttemptTracker(tx);\n+    } // No default case, so the compiler can warn about missing cases\n+}\n+\n+/**\n+ * Update state based on a newly connected block:\n+ * - Evict orphan txn pool entries\n+ * - Save the time of the last tip update\n+ * - Remember recently confirmed transactions\n+ * - Delete tracked announcements for block transactions\n+ * - Delete tracked rebroadcast attempts for block transactions\n  */\n void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n@@ -1328,6 +1362,13 @@ void PeerManagerImpl::BlockConnected(const std::shared_ptr<const CBlock>& pblock\n             }\n         }\n     }\n+\n+    if (m_txrebroadcast) {\n+        for (const auto& ptx : pblock->vtx) {\n+            m_txrebroadcast->RemoveFromAttemptTracker(ptx);\n+        }\n+    }\n+\n     {\n         LOCK(cs_main);\n         for (const auto& ptx : pblock->vtx) {"
      },
      {
        "sha": "fabd774742631c00acdad6063f2a199cafbe1d5a",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eabc075b685c67f47226c0a13b0e35c6a702146/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eabc075b685c67f47226c0a13b0e35c6a702146/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=4eabc075b685c67f47226c0a13b0e35c6a702146",
        "patch": "@@ -219,6 +219,13 @@ void TxRebroadcastHandler::CacheMinRebroadcastFee()\n     LogPrint(BCLog::BENCH, \"Caching minimum fee for rebroadcast to %s, took %d us to calculate.\\n\", m_cached_fee_rate.ToString(FeeEstimateMode::SAT_VB), delta_time.count());\n };\n \n+void TxRebroadcastHandler::RemoveFromAttemptTracker(const CTransactionRef& tx) {\n+    LOCK(m_rebroadcast_mutex);\n+    const auto it = m_attempt_tracker->find(tx->GetWitnessHash());\n+    if (it == m_attempt_tracker->end()) return;\n+    m_attempt_tracker->erase(it);\n+}\n+\n void TxRebroadcastHandler::TrimMaxRebroadcast()\n {\n     AssertLockHeld(m_rebroadcast_mutex);"
      },
      {
        "sha": "af0a7a11cd2db497a5524e9e7b298d72d72d7cde",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eabc075b685c67f47226c0a13b0e35c6a702146/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eabc075b685c67f47226c0a13b0e35c6a702146/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=4eabc075b685c67f47226c0a13b0e35c6a702146",
        "patch": "@@ -50,6 +50,9 @@ class TxRebroadcastHandler\n      * */\n     void CacheMinRebroadcastFee();\n \n+    /** Remove transaction entry from the attempt tracker.*/\n+    void RemoveFromAttemptTracker(const CTransactionRef& tx);\n+\n private:\n     const CTxMemPool& m_mempool;\n     const ChainstateManager& m_chainman;"
      }
    ]
  },
  {
    "sha": "d584294c21b9630c111661e055deba9a16955cd4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTg0Mjk0YzIxYjk2MzBjMTExNjYxZTA1NWRlYmE5YTE2OTU1Y2Q0",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2020-12-15T23:35:27Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[test] Add unit test to confirm the recency filter works.\n\nIncludes adding a helper to the shared unit test utilities to create a valid\ntransaction and submit to the mempool.\n\nupdate test to use normal key generation",
      "tree": {
        "sha": "f31e3c4c04121ca1044775c025fbdb7f5a090e61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f31e3c4c04121ca1044775c025fbdb7f5a090e61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d584294c21b9630c111661e055deba9a16955cd4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d584294c21b9630c111661e055deba9a16955cd4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d584294c21b9630c111661e055deba9a16955cd4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d584294c21b9630c111661e055deba9a16955cd4/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4eabc075b685c67f47226c0a13b0e35c6a702146",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eabc075b685c67f47226c0a13b0e35c6a702146",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4eabc075b685c67f47226c0a13b0e35c6a702146"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "eccd57bb61e9da08b29fb51126bd19a3e5916abd",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d584294c21b9630c111661e055deba9a16955cd4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d584294c21b9630c111661e055deba9a16955cd4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d584294c21b9630c111661e055deba9a16955cd4",
        "patch": "@@ -135,6 +135,7 @@ BITCOIN_TESTS =\\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n   test/txindex_tests.cpp \\\n+  test/txrebroadcast_tests.cpp \\\n   test/txrequest_tests.cpp \\\n   test/txvalidation_tests.cpp \\\n   test/txvalidationcache_tests.cpp \\"
      },
      {
        "sha": "6240c1e546907fcdbee1601f42dfff48ac1f1a32",
        "filename": "src/test/txrebroadcast_tests.cpp",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d584294c21b9630c111661e055deba9a16955cd4/src/test/txrebroadcast_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d584294c21b9630c111661e055deba9a16955cd4/src/test/txrebroadcast_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txrebroadcast_tests.cpp?ref=d584294c21b9630c111661e055deba9a16955cd4",
        "patch": "@@ -0,0 +1,65 @@\n+// Copyright (c) 2011-2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <amount.h>\n+#include <clientversion.h>\n+#include <consensus/tx_check.h>\n+#include <consensus/validation.h>\n+#include <core_io.h>\n+#include <key_io.h>\n+#include <rpc/util.h>\n+#include <script/interpreter.h>\n+#include <script/script.h>\n+#include <streams.h>\n+#include <test/util/setup_common.h>\n+#include <txmempool.h>\n+#include <txrebroadcast.h>\n+#include <util/time.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(txrebroadcast_tests, TestChain100Setup)\n+\n+BOOST_AUTO_TEST_CASE(recency)\n+{\n+    // Since the test chain comes with 100 blocks, the first coinbase is\n+    // already valid to spend. Generate another block to have two valid\n+    // coinbase inputs to spend.\n+    CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+\n+    // Create a transaction\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CScript output_destination = GetScriptForDestination(PKHash(key.GetPubKey()));\n+    CMutableTransaction tx_old = CreateValidMempoolTransaction(m_coinbase_txns[0], /* vout */ 0, /* input_height */ 0, coinbaseKey, output_destination, CAmount(48 * COIN));\n+\n+    // Age transaction to be older than REBROADCAST_MIN_TX_AGE\n+    SetMockTime(GetTime<std::chrono::seconds>() + 35min);\n+\n+    // Create a recent transaction\n+    CMutableTransaction tx_new = CreateValidMempoolTransaction(m_coinbase_txns[1], /* vout */ 0, /* input_height */ 1, coinbaseKey, output_destination, CAmount(48 * COIN));\n+\n+    // Confirm both transactions successfully made it into the mempool\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), 2U);\n+\n+    // Instantiate rebroadcast module & mine a block, so when we run\n+    // GetRebroadcastTransactions, Chain tip will be beyond m_tip_at_cache_time\n+    const auto chain_params = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    TxRebroadcastHandler tx_rebroadcast(*m_node.mempool, *m_node.chainman, *chain_params);\n+    CBlock recent_block = CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+    CBlockIndex recent_block_index{recent_block.GetBlockHeader()};\n+\n+    // Update the fee rate to be >0 so the rebroadcast logic doesn't return early\n+    CFeeRate cached_fee_rate(100, 100); // 1 sat/vB\n+    tx_rebroadcast.UpdateCachedFeeRate(cached_fee_rate);\n+\n+    // Confirm that only the old transaction is included\n+    const std::shared_ptr<const CBlock> empty_block;\n+    std::vector<TxIds> candidates = tx_rebroadcast.GetRebroadcastTransactions(empty_block, recent_block_index);\n+    BOOST_REQUIRE_EQUAL(candidates.size(), 1U);\n+    BOOST_CHECK_EQUAL(candidates.front().m_txid, tx_old.GetHash());\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "998547b60d4324a1987cf2f55c9b0eb52ec7ce86",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d584294c21b9630c111661e055deba9a16955cd4/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d584294c21b9630c111661e055deba9a16955cd4/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=d584294c21b9630c111661e055deba9a16955cd4",
        "patch": "@@ -245,3 +245,9 @@ void TxRebroadcastHandler::TrimMaxRebroadcast()\n         }\n     }\n };\n+\n+void TxRebroadcastHandler::UpdateCachedFeeRate(const CFeeRate& new_fee_rate)\n+{\n+    LOCK(m_rebroadcast_mutex);\n+    m_cached_fee_rate = new_fee_rate;\n+};"
      },
      {
        "sha": "00cf9d699f9e66c8e679332e921db03d07a077d7",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d584294c21b9630c111661e055deba9a16955cd4/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d584294c21b9630c111661e055deba9a16955cd4/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=d584294c21b9630c111661e055deba9a16955cd4",
        "patch": "@@ -53,6 +53,9 @@ class TxRebroadcastHandler\n     /** Remove transaction entry from the attempt tracker.*/\n     void RemoveFromAttemptTracker(const CTransactionRef& tx);\n \n+    /** Test only */\n+    void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n+\n private:\n     const CTxMemPool& m_mempool;\n     const ChainstateManager& m_chainman;"
      }
    ]
  },
  {
    "sha": "26b3c58f813109d76513c857abe0d42bf2bde2c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmIzYzU4ZjgxMzEwOWQ3NjUxM2M4NTdhYmUwZDQyYmYyYmRlMmM2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-27T23:40:00Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[test] Add unit test for rebroadcast attempt logic",
      "tree": {
        "sha": "4a6cc5b217c30fcfc23dd9cde4bd5292085989fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a6cc5b217c30fcfc23dd9cde4bd5292085989fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26b3c58f813109d76513c857abe0d42bf2bde2c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26b3c58f813109d76513c857abe0d42bf2bde2c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26b3c58f813109d76513c857abe0d42bf2bde2c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26b3c58f813109d76513c857abe0d42bf2bde2c6/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d584294c21b9630c111661e055deba9a16955cd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d584294c21b9630c111661e055deba9a16955cd4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d584294c21b9630c111661e055deba9a16955cd4"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 107,
      "deletions": 1
    },
    "files": [
      {
        "sha": "403443accf76d7800648b77c7b4eda198978a254",
        "filename": "src/test/txrebroadcast_tests.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26b3c58f813109d76513c857abe0d42bf2bde2c6/src/test/txrebroadcast_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26b3c58f813109d76513c857abe0d42bf2bde2c6/src/test/txrebroadcast_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txrebroadcast_tests.cpp?ref=26b3c58f813109d76513c857abe0d42bf2bde2c6",
        "patch": "@@ -62,4 +62,68 @@ BOOST_AUTO_TEST_CASE(recency)\n     BOOST_CHECK_EQUAL(candidates.front().m_txid, tx_old.GetHash());\n }\n \n+BOOST_AUTO_TEST_CASE(max_rebroadcast)\n+{\n+    // Create a transaction\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CScript output_destination = GetScriptForDestination(PKHash(key.GetPubKey()));\n+    CMutableTransaction tx = CreateValidMempoolTransaction(m_coinbase_txns[0], /* vout */ 0, /* input_height */ 0, coinbaseKey, output_destination, CAmount(48 * COIN));\n+    uint256 txhsh = tx.GetHash();\n+\n+    // Instantiate rebroadcast module & mine a block, so when we run\n+    // GetRebroadcastTransactions, Chain tip will be beyond m_tip_at_cache_time\n+    const auto chain_params = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    TxRebroadcastHandler tx_rebroadcast(*m_node.mempool, *m_node.chainman, *chain_params);\n+    CBlock recent_block = CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+    CBlockIndex recent_block_index{recent_block.GetBlockHeader()};\n+\n+    // Age transaction by 35 minutes, to be older than REBROADCAST_MIN_TX_AGE\n+    std::chrono::seconds current_time = GetTime<std::chrono::seconds>();\n+    current_time += 35min;\n+    SetMockTime(current_time);\n+\n+    // Update the fee rate to be >0 so the rebroadcast logic doesn't return early\n+    CFeeRate cached_fee_rate(100, 100); // 1 sat/vB\n+    tx_rebroadcast.UpdateCachedFeeRate(cached_fee_rate);\n+\n+    // Check that the transaction gets returned to rebroadcast\n+    const std::shared_ptr<const CBlock> empty_block;\n+    std::vector<TxIds> candidates = tx_rebroadcast.GetRebroadcastTransactions(empty_block, recent_block_index);\n+    BOOST_REQUIRE_EQUAL(candidates.size(), 1U);\n+    BOOST_CHECK_EQUAL(candidates.front().m_txid, txhsh);\n+\n+    // Check if transaction was properly added to m_attempt_tracker\n+    // The attempt tracker records wtxids, but since this transaction does not\n+    // have a witness, the txhsh = wtxhsh so works for look ups.\n+    BOOST_CHECK(tx_rebroadcast.CheckRecordedAttempt(txhsh, 1, current_time));\n+\n+    // Since the transaction was returned within the last\n+    // REBROADCAST_MIN_TX_AGE time, check it does not get returned again\n+    candidates = tx_rebroadcast.GetRebroadcastTransactions(empty_block, recent_block_index);\n+    BOOST_CHECK_EQUAL(candidates.size(), 0U);\n+    // And that the m_attempt_tracker entry is not updated\n+    BOOST_CHECK(tx_rebroadcast.CheckRecordedAttempt(txhsh, 1, current_time));\n+\n+    // Bump time by 4 hours, to pass the MIN_INTERVAL time\n+    current_time += 4h;\n+    SetMockTime(current_time);\n+    // Then check that it gets returned for rebroadacst\n+    candidates = tx_rebroadcast.GetRebroadcastTransactions(empty_block, recent_block_index);\n+    BOOST_REQUIRE_EQUAL(candidates.size(), 1U);\n+    // And that m_attempt_tracker is properly updated\n+    BOOST_CHECK(tx_rebroadcast.CheckRecordedAttempt(txhsh, 2, current_time));\n+\n+    // Update the record to have m_count to be MAX_REBROADCAST_COUNT, and last\n+    // attempt time of 4 hours ago\n+    auto attempt_time = GetTime<std::chrono::microseconds>() - 4h;\n+    tx_rebroadcast.UpdateAttempt(txhsh, 4, attempt_time);\n+    // Check that transaction is not rebroadcast\n+    candidates = tx_rebroadcast.GetRebroadcastTransactions(empty_block, recent_block_index);\n+    BOOST_CHECK_EQUAL(candidates.size(), 0U);\n+    // Check that the entry is removed from the m_attempt_tracker\n+    // And added to the m_max_filter\n+    BOOST_CHECK(tx_rebroadcast.CheckMaxAttempt(txhsh));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "15dffd85b46ad157cde91bebe73dd8a1e2b13969",
        "filename": "src/txrebroadcast.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26b3c58f813109d76513c857abe0d42bf2bde2c6/src/txrebroadcast.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26b3c58f813109d76513c857abe0d42bf2bde2c6/src/txrebroadcast.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.cpp?ref=26b3c58f813109d76513c857abe0d42bf2bde2c6",
        "patch": "@@ -246,6 +246,39 @@ void TxRebroadcastHandler::TrimMaxRebroadcast()\n     }\n };\n \n+void TxRebroadcastHandler::UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time)\n+{\n+    LOCK(m_rebroadcast_mutex);\n+    auto it = m_attempt_tracker->find(wtxid);\n+    auto UpdateRebroadcastEntry = [last_attempt_time, count](RebroadcastEntry& rebroadcast_entry) {\n+        rebroadcast_entry.m_last_attempt = last_attempt_time;\n+        rebroadcast_entry.m_count += count;\n+    };\n+\n+    m_attempt_tracker->modify(it, UpdateRebroadcastEntry);\n+};\n+\n+bool TxRebroadcastHandler::CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const\n+{\n+    LOCK(m_rebroadcast_mutex);\n+    const auto it = m_attempt_tracker->find(wtxid);\n+    if (it == m_attempt_tracker->end()) return false;\n+    if (it->m_count != expected_count) return false;\n+\n+    // Check the recorded timestamp is within 2 seconds of the param passed in\n+    std::chrono::microseconds delta = expected_timestamp - it->m_last_attempt;\n+    if (delta.count() > 2) return false;\n+\n+    return true;\n+};\n+\n+bool TxRebroadcastHandler::CheckMaxAttempt(const uint256& wtxid) const{\n+    LOCK(m_rebroadcast_mutex);\n+\n+    const auto it = m_attempt_tracker->find(wtxid);\n+    return it == m_attempt_tracker->end() && m_max_filter.contains(wtxid);\n+};\n+\n void TxRebroadcastHandler::UpdateCachedFeeRate(const CFeeRate& new_fee_rate)\n {\n     LOCK(m_rebroadcast_mutex);"
      },
      {
        "sha": "9393907d5c7c471fe144a1835354e54cfeead7fa",
        "filename": "src/txrebroadcast.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26b3c58f813109d76513c857abe0d42bf2bde2c6/src/txrebroadcast.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26b3c58f813109d76513c857abe0d42bf2bde2c6/src/txrebroadcast.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txrebroadcast.h?ref=26b3c58f813109d76513c857abe0d42bf2bde2c6",
        "patch": "@@ -53,6 +53,15 @@ class TxRebroadcastHandler\n     /** Remove transaction entry from the attempt tracker.*/\n     void RemoveFromAttemptTracker(const CTransactionRef& tx);\n \n+    /** Test only */\n+    void UpdateAttempt(const uint256& wtxid, const int count, const std::chrono::microseconds last_attempt_time);\n+\n+    /** Test only */\n+    bool CheckRecordedAttempt(const uint256& wtxid, const int expected_count, const std::chrono::microseconds expected_timestamp) const;\n+\n+    /** Test only */\n+    bool CheckMaxAttempt(const uint256& wtxid) const;\n+\n     /** Test only */\n     void UpdateCachedFeeRate(const CFeeRate& new_fee_rate);\n \n@@ -62,7 +71,7 @@ class TxRebroadcastHandler\n     const CChainParams& m_chainparams;\n \n     /** Protects internal data members */\n-    Mutex m_rebroadcast_mutex;\n+    mutable Mutex m_rebroadcast_mutex;\n \n     /** Block at time of cache */\n     CBlockIndex* m_tip_at_cache_time GUARDED_BY(m_rebroadcast_mutex){nullptr};"
      }
    ]
  },
  {
    "sha": "f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODFhNzI4YTkyMGJhM2U3YzdkMDNiNWMwZjRmNjZiOTMwZThiYWMz",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-30T02:51:16Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[test] Add unit test for the fee rate cache",
      "tree": {
        "sha": "9bddc4139ff33552632a65ecc93e2b6f44c1bf82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bddc4139ff33552632a65ecc93e2b6f44c1bf82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26b3c58f813109d76513c857abe0d42bf2bde2c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26b3c58f813109d76513c857abe0d42bf2bde2c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26b3c58f813109d76513c857abe0d42bf2bde2c6"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "da2a156a6ef3550c21bab2e987c4aa94f08db015",
        "filename": "src/test/txrebroadcast_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3/src/test/txrebroadcast_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3/src/test/txrebroadcast_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txrebroadcast_tests.cpp?ref=f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
        "patch": "@@ -62,6 +62,49 @@ BOOST_AUTO_TEST_CASE(recency)\n     BOOST_CHECK_EQUAL(candidates.front().m_txid, tx_old.GetHash());\n }\n \n+BOOST_AUTO_TEST_CASE(fee_rate)\n+{\n+    // Since the test chain comes with 100 blocks, the first coinbase is\n+    // already valid to spend. Generate another block to have two valid\n+    // coinbase inputs to spend.\n+    CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+\n+    // Instantiate rebroadcast module & mine a block, so when we run\n+    // GetRebroadcastTransactions, Chain tip will be beyond m_tip_at_cache_time\n+    const auto chain_params = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    TxRebroadcastHandler tx_rebroadcast(*m_node.mempool, *m_node.chainman, *chain_params);\n+    CBlock recent_block = CreateAndProcessBlock(std::vector<CMutableTransaction>(), CScript());\n+    CBlockIndex recent_block_index{recent_block.GetBlockHeader()};\n+\n+    // Update m_cached_fee_rate\n+    // The transactions created in this test are each 157 bytes, and they set\n+    // the fee at 1 BTC and 2 BTC.\n+    CFeeRate cached_fee_rate(1.5 * COIN, 157);\n+    tx_rebroadcast.UpdateCachedFeeRate(cached_fee_rate);\n+\n+    // Create two transactions\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CScript output_destination = GetScriptForDestination(PKHash(key.GetPubKey()));\n+\n+    // - One with a low fee rate\n+    CMutableTransaction tx_low = CreateValidMempoolTransaction(m_coinbase_txns[0], /* vout */ 0, /* input_height */ 0, coinbaseKey, output_destination, CAmount(49 * COIN));\n+    // - One with a high fee rate\n+    CMutableTransaction tx_high = CreateValidMempoolTransaction(m_coinbase_txns[1], /* vout */ 0, /* input_height */ 1, coinbaseKey, output_destination, CAmount(48 * COIN));\n+\n+    // Confirm both transactions successfully made it into the mempool\n+    BOOST_CHECK_EQUAL(m_node.mempool->size(), 2U);\n+\n+    // Age transaction to be older than REBROADCAST_MIN_TX_AGE\n+    SetMockTime(GetTime<std::chrono::seconds>() + 35min);\n+\n+    // Check that only the high fee rate transaction would be selected\n+    const std::shared_ptr<const CBlock> empty_block;\n+    std::vector<TxIds> candidates = tx_rebroadcast.GetRebroadcastTransactions(empty_block, recent_block_index);\n+    BOOST_REQUIRE_EQUAL(candidates.size(), 1U);\n+    BOOST_CHECK_EQUAL(candidates.front().m_txid, tx_high.GetHash());\n+}\n+\n BOOST_AUTO_TEST_CASE(max_rebroadcast)\n {\n     // Create a transaction"
      }
    ]
  },
  {
    "sha": "d46fdb83c759ea526103e9ec538902ae459ce362",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDZmZGI4M2M3NTllYTUyNjEwM2U5ZWM1Mzg5MDJhZTQ1OWNlMzYy",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-09T21:52:47Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[test] Functional tests for rebroadcast logic.\n\nWe test that when a block comes in, we rebroadcast missing transactions based\non time and fee rate.",
      "tree": {
        "sha": "e477241ae9a809baf1710919eedf2fc1f8606288",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e477241ae9a809baf1710919eedf2fc1f8606288"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d46fdb83c759ea526103e9ec538902ae459ce362",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d46fdb83c759ea526103e9ec538902ae459ce362",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d46fdb83c759ea526103e9ec538902ae459ce362",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d46fdb83c759ea526103e9ec538902ae459ce362/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f81a728a920ba3e7c7d03b5c0f4f66b930e8bac3"
      }
    ],
    "stats": {
      "total": 206,
      "additions": 206,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e825fd0cd6e4b26011e2c3a4b3d52665e6b0ef54",
        "filename": "test/functional/p2p_rebroadcast.py",
        "status": "added",
        "additions": 205,
        "deletions": 0,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d46fdb83c759ea526103e9ec538902ae459ce362/test/functional/p2p_rebroadcast.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d46fdb83c759ea526103e9ec538902ae459ce362/test/functional/p2p_rebroadcast.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_rebroadcast.py?ref=d46fdb83c759ea526103e9ec538902ae459ce362",
        "patch": "@@ -0,0 +1,205 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\"\"\"Test node rebroadcast logic.\n+\n+We start by creating a set of transactions to set the rebroadcast minimum fee\n+cache to a medium fee rate value.\n+\n+We then create three sets of transactions:\n+    1. aged, high fee rate\n+    2. aged, low fee rate\n+    3. recent, high fee rate\n+\n+We add a new connection, trigger the rebroadcast functionality by mining an\n+empty block, check that the aged high fee rate transactions were succesfully\n+rebroadcast, and that the other two sets were not rebroadcast.\n+\"\"\"\n+\n+import time\n+from decimal import Decimal\n+\n+from test_framework.p2p import P2PTxInvStore\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_approx,\n+    assert_greater_than,\n+    create_confirmed_utxos,\n+)\n+\n+# Constant from consensus.h\n+MAX_BLOCK_WEIGHT = 4000000\n+\n+\n+class NodeRebroadcastTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\n+            \"-whitelist=noban@127.0.0.1\",\n+            \"-txindex\",\n+            \"-rebroadcast=1\"\n+        ]] * self.num_nodes\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def make_txn_at_fee_rate(self, input_utxo, outputs, outputs_sum, desired_fee_rate, change_address):\n+        node = self.nodes[0]\n+        node1 = self.nodes[1]\n+\n+        inputs = [{'txid': input_utxo['txid'], 'vout': input_utxo['vout']}]\n+\n+        # Calculate how much input values add up to\n+        input_tx_hsh = input_utxo['txid']\n+        raw_tx = node.getrawtransaction(input_tx_hsh, True)\n+        inputs_list = raw_tx['vout']\n+        if 'coinbase' in raw_tx['vin'][0].keys():\n+            return\n+        index = raw_tx['vin'][0]['vout']\n+        inputs_sum = inputs_list[index]['value']\n+\n+        # Divide by 1000 because vsize is in bytes & cache fee rate is BTC / kB\n+        tx_vsize_with_change = 1660\n+        desired_fee_btc = desired_fee_rate * tx_vsize_with_change / 1000\n+        current_fee_btc = inputs_sum - Decimal(str(outputs_sum))\n+\n+        # Add another output with change\n+        outputs[change_address] = float(current_fee_btc - desired_fee_btc)\n+        outputs_sum += outputs[change_address]\n+\n+        # Form transaction & submit to mempool of both nodes directly\n+        raw_tx_hex = node.createrawtransaction(inputs, outputs)\n+        signed_tx = node.signrawtransactionwithwallet(raw_tx_hex)\n+        tx_hsh = node.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+        node1.sendrawtransaction(hexstring=signed_tx['hex'], maxfeerate=0)\n+\n+        # Retrieve mempool transaction to calculate fee rate\n+        mempool_entry = node.getmempoolentry(tx_hsh)\n+\n+        # Check absolute fee matches up to expectations\n+        fee_calculated = inputs_sum - Decimal(str(outputs_sum))\n+        fee_got = mempool_entry['fee']\n+        assert_approx(float(fee_calculated), float(fee_got))\n+\n+        # mempool_entry['fee'] is in BTC, fee rate should be BTC / kb\n+        fee_rate = mempool_entry['fee'] * 1000 / mempool_entry['vsize']\n+        assert_approx(float(fee_rate), float(desired_fee_rate))\n+\n+        return tx_hsh\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+\n+        self.log.info(\"Make transactions to set the cache fee rate\")\n+        # Create UTXOs that we can spend\n+        min_relay_fee = node.getnetworkinfo()[\"relayfee\"]\n+        utxos = create_confirmed_utxos(min_relay_fee, node, 2000)\n+\n+        addresses = []\n+        for _ in range(50):\n+            addresses.append(node.getnewaddress())\n+\n+        # Create large transactions by sending to all the addresses\n+        outputs = {addr: 0.0001 for addr in addresses}\n+        change_address = node.getnewaddress()\n+        outputs_sum = 0.0001 * 50\n+\n+        self.sync_mempools()\n+\n+        # Create lots of cache_fee_rate transactions with that large output\n+        cache_fee_rate = min_relay_fee * 3\n+        for _ in range(len(utxos) - 1000):\n+            self.make_txn_at_fee_rate(utxos.pop(), outputs, outputs_sum, cache_fee_rate, change_address)\n+\n+        self.sync_mempools()\n+\n+        # Confirm we've created enough transactions to fill a cache block,\n+        # ensuring the threshold fee rate will be cache_fee_rate\n+        # Divide by 4 to convert from weight to virtual bytes\n+        assert_greater_than(node.getmempoolinfo()['bytes'], MAX_BLOCK_WEIGHT / 4)\n+\n+        # Make transactions to later mine into a block\n+        block_txns = []\n+        for _ in range(600):\n+            block_txns.append(self.make_txn_at_fee_rate(utxos.pop(), outputs, outputs_sum, cache_fee_rate, change_address))\n+        block_txns = list(filter(None, block_txns))\n+\n+        # CacheMinRebroadcastFee is scheduled to run every minute\n+        # Bump the scheduled jobs by slightly over a minute to trigger it\n+        node.mockscheduler(62)\n+\n+        self.log.info(\"Make high fee-rate transactions\")\n+        high_fee_rate_tx_hshs = []\n+        high_fee_rate = min_relay_fee * 4\n+\n+        for _ in range(10):\n+            tx_hsh = self.make_txn_at_fee_rate(utxos.pop(), outputs, outputs_sum, high_fee_rate, change_address)\n+            high_fee_rate_tx_hshs.append(tx_hsh)\n+\n+        self.log.info(\"Make low fee-rate transactions\")\n+        low_fee_rate_tx_hshs = []\n+        low_fee_rate = min_relay_fee * 2\n+\n+        for _ in range(10):\n+            tx_hsh = self.make_txn_at_fee_rate(utxos.pop(), outputs, outputs_sum, low_fee_rate, change_address)\n+            low_fee_rate_tx_hshs.append(tx_hsh)\n+\n+        # Ensure these transactions are removed from the unbroadcast set. Or in\n+        # other words, that all GETDATAs have been received before its time to\n+        # rebroadcast\n+        self.sync_mempools()\n+\n+        # Confirm that the remaining bytes in the mempool are less than what\n+        # fits in the rebroadcast block. Otherwise, we could get a false\n+        # positive where the low_fee_rate transactions are not rebroadcast\n+        # simply because they do not fit, not because they were filtered out.\n+        assert_greater_than(3 * MAX_BLOCK_WEIGHT / 4, node.getmempoolinfo()['bytes'])\n+\n+        # Bump time forward to ensure existing transactions meet\n+        # REBROADCAST_MIN_TX_AGE.\n+        node.setmocktime(int(time.time()) + 35 * 60)\n+\n+        self.log.info(\"Make recent transactions\")\n+        recent_tx_hshs = []\n+\n+        for _ in range(10):\n+            tx_hsh = self.make_txn_at_fee_rate(utxos.pop(), outputs, outputs_sum, high_fee_rate, change_address)\n+            recent_tx_hshs.append(tx_hsh)\n+\n+        self.log.info(\"Trigger rebroadcast by mining a block\")\n+        conn = node.add_p2p_connection(P2PTxInvStore())\n+\n+        block_hash = self.nodes[0].generateblock(output=node.getnewaddress(), transactions=block_txns)\n+\n+        # We identify rebroadcast transaction canadidates by mining a block\n+        # with 3/4 the weight of the block received from the network. Ensure\n+        # that this test setup triggers rebroadcast functionality with a\n+        # sufficiently large block.\n+        assert(self.nodes[0].getblock(block_hash['hash'])['weight'] > 3000000)\n+\n+        self.wait_until(lambda: conn.get_invs(), timeout=30)\n+        rebroadcasted_invs = conn.get_invs()\n+\n+        self.log.info(\"Check that high fee rate transactions are rebroadcast\")\n+        for txhsh in high_fee_rate_tx_hshs:\n+            wtxhsh = node.getmempoolentry(txhsh)['wtxid']\n+            wtxid = int(wtxhsh, 16)\n+            assert(wtxid in rebroadcasted_invs)\n+\n+        self.log.info(\"Check that low fee rate transactions are NOT rebroadcast\")\n+        for txhsh in low_fee_rate_tx_hshs:\n+            wtxhsh = node.getmempoolentry(txhsh)['wtxid']\n+            wtxid = int(wtxhsh, 16)\n+            assert(wtxid not in rebroadcasted_invs)\n+\n+        self.log.info(\"Check that recent transactions are NOT rebroadcast\")\n+        for txhsh in recent_tx_hshs:\n+            wtxhsh = node.getmempoolentry(txhsh)['wtxid']\n+            wtxid = int(wtxhsh, 16)\n+            assert(wtxid not in rebroadcasted_invs)\n+\n+\n+if __name__ == '__main__':\n+    NodeRebroadcastTest().main()"
      },
      {
        "sha": "23e2e606927ddc4fa9b4fd0a92df7f2b179177b5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d46fdb83c759ea526103e9ec538902ae459ce362/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d46fdb83c759ea526103e9ec538902ae459ce362/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d46fdb83c759ea526103e9ec538902ae459ce362",
        "patch": "@@ -122,6 +122,7 @@\n     'wallet_listreceivedby.py --descriptors',\n     'wallet_abandonconflict.py --legacy-wallet',\n     'wallet_abandonconflict.py --descriptors',\n+    'p2p_rebroadcast.py',\n     'feature_csv_activation.py',\n     'rpc_rawtransaction.py --legacy-wallet',\n     'rpc_rawtransaction.py --descriptors',"
      }
    ]
  },
  {
    "sha": "9b757c214e59fbf5dd028323a54734726a1c461b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjc1N2MyMTRlNTlmYmY1ZGQwMjgzMjNhNTQ3MzQ3MjZhMWM0NjFi",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2019-08-23T15:10:10Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-05-29T02:04:57Z"
      },
      "message": "[docs] Update prioritisetransaction help man",
      "tree": {
        "sha": "69008c5ba81ac8cf0ebf82864316320c60f3f45f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69008c5ba81ac8cf0ebf82864316320c60f3f45f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b757c214e59fbf5dd028323a54734726a1c461b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b757c214e59fbf5dd028323a54734726a1c461b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b757c214e59fbf5dd028323a54734726a1c461b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b757c214e59fbf5dd028323a54734726a1c461b/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d46fdb83c759ea526103e9ec538902ae459ce362",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d46fdb83c759ea526103e9ec538902ae459ce362",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d46fdb83c759ea526103e9ec538902ae459ce362"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b753dc38c2feb498e9b3a0a1c14277bab3193b99",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b757c214e59fbf5dd028323a54734726a1c461b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b757c214e59fbf5dd028323a54734726a1c461b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=9b757c214e59fbf5dd028323a54734726a1c461b",
        "patch": "@@ -453,7 +453,9 @@ static RPCHelpMan getmininginfo()\n static RPCHelpMan prioritisetransaction()\n {\n     return RPCHelpMan{\"prioritisetransaction\",\n-                \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\",\n+                \"Accepts the transaction into mined blocks at a higher (or lower) priority.\\n\"\n+                \"\\nNote that prioritizing a transaction could leak privacy, through both\\n\"\n+                \"block mining and likelihood of rebroadcast.\",\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id.\"},\n                     {\"dummy\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"API-Compatibility for previous API. Must be zero or null.\\n\""
      }
    ]
  }
]