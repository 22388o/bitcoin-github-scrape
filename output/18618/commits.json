[
  {
    "sha": "3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTU4ZjJhZTE3ZmJiMDE2Y2JjZGEyMjczYmUyOGQ3YzFhNDNiMGY3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-04-12T17:40:43Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-05-27T11:16:10Z"
      },
      "message": "refactor: Remove CAddressBookData::destdata\n\nThis is cleanup that doesn't change external behavior.\n\n- Removes awkward `StringMap` intermediate representation\n- Deals with receive request \"rr\" keys in walletdb.cpp instead of all over qt, wallet, and interfaces code\n- Deals with destination \"used\" keys in walletdb.cpp instead of all over wallet code\n- Adds test coverage\n- Reduces code (+85/-138 lines)\n- Reduces memory usage\n\nThis PR doesn't change externally observable behavior. Internally, only change in behavior is that EraseDestData deletes directly from database because the `StringMap` is gone. This is more direct and efficient because it uses a single btree lookup and scan instead of multiple lookups\n\nMotivation for this cleanup is making changes like #18550, #18192, #13756 easier to reason about and less likely to result in unintended behavior and bugs",
      "tree": {
        "sha": "a85975113c666399ad6642f2b24789f207ef43d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85975113c666399ad6642f2b24789f207ef43d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ccaee1d5e2e4b79b0a7c29aadb41b97e4741332"
      }
    ],
    "stats": {
      "total": 275,
      "additions": 126,
      "deletions": 149
    },
    "files": [
      {
        "sha": "2abc31f89bd9109be7209b9e1aa999886962045f",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -177,22 +177,20 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n-    bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) override\n-    {\n+    std::vector<std::string> getReceiveRequests() override {\n         LOCK(m_wallet->cs_wallet);\n-        WalletBatch batch{m_wallet->GetDatabase()};\n-        return m_wallet->AddDestData(batch, dest, key, value);\n+        std::vector<std::string> requests;\n+        for (const auto& dest : m_wallet->m_address_book) {\n+            for (const auto& request : dest.second.GetReceiveRequests()) {\n+                requests.emplace_back(request.second);\n+            }\n+        }\n+        return requests;\n     }\n-    bool eraseDestData(const CTxDestination& dest, const std::string& key) override\n-    {\n+    bool saveReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& value) override {\n         LOCK(m_wallet->cs_wallet);\n         WalletBatch batch{m_wallet->GetDatabase()};\n-        return m_wallet->EraseDestData(batch, dest, key);\n-    }\n-    std::vector<std::string> getDestValues(const std::string& prefix) override\n-    {\n-        LOCK(m_wallet->cs_wallet);\n-        return m_wallet->GetDestValues(prefix);\n+        return m_wallet->m_address_book[dest].SetReceiveRequest(id, value) && batch.WriteReceiveRequest(dest, id, value);\n     }\n     void lockCoin(const COutPoint& output) override\n     {"
      },
      {
        "sha": "f2f65bd2a054da3fea8f0c55524f345240bdfeca",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -110,14 +110,11 @@ class Wallet\n     //! Get wallet address list.\n     virtual std::vector<WalletAddress> getAddresses() = 0;\n \n-    //! Add dest data.\n-    virtual bool addDestData(const CTxDestination& dest, const std::string& key, const std::string& value) = 0;\n+    //! Get receive requests.\n+    virtual std::vector<std::string> getReceiveRequests() = 0;\n \n-    //! Erase dest data.\n-    virtual bool eraseDestData(const CTxDestination& dest, const std::string& key) = 0;\n-\n-    //! Get dest values with prefix.\n-    virtual std::vector<std::string> getDestValues(const std::string& prefix) = 0;\n+    //! Save receive request.\n+    virtual bool saveReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& value) = 0;\n \n     //! Lock coin.\n     virtual void lockCoin(const COutPoint& output) = 0;"
      },
      {
        "sha": "e4cda0f81d3cd86a5670bfb5ef3925887805d7f3",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -10,18 +10,20 @@\n #include <qt/walletmodel.h>\n \n #include <clientversion.h>\n+#include <key_io.h>\n+#include <interfaces/wallet.h>\n #include <streams.h>\n+#include <util/string.h>\n \n #include <utility>\n \n RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n     QAbstractTableModel(parent), walletModel(parent)\n {\n     // Load entries from wallet\n-    std::vector<std::string> vReceiveRequests;\n-    parent->loadReceiveRequests(vReceiveRequests);\n-    for (const std::string& request : vReceiveRequests)\n+    for (const std::string& request : parent->wallet().getReceiveRequests()) {\n         addNewRequest(request);\n+    }\n \n     /* These columns must match the indices in the ColumnIndex enumeration */\n     columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n@@ -141,7 +143,7 @@ bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex\n         for (int i = 0; i < count; ++i)\n         {\n             const RecentRequestEntry* rec = &list[row+i];\n-            if (!walletModel->saveReceiveRequest(rec->recipient.address.toStdString(), rec->id, \"\"))\n+            if (!walletModel->wallet().saveReceiveRequest(DecodeDestination(rec->recipient.address.toStdString()), ToString(rec->id), \"\"))\n                 return false;\n         }\n \n@@ -170,7 +172,7 @@ void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient\n     CDataStream ss(SER_DISK, CLIENT_VERSION);\n     ss << newEntry;\n \n-    if (!walletModel->saveReceiveRequest(recipient.address.toStdString(), newEntry.id, ss.str()))\n+    if (!walletModel->wallet().saveReceiveRequest(DecodeDestination(recipient.address.toStdString()), ToString(newEntry.id), ss.str()))\n         return;\n \n     addNewRequest(newEntry);"
      },
      {
        "sha": "464a67386196072640680e0a026b874fa640a849",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -467,25 +467,6 @@ void WalletModel::UnlockContext::CopyFrom(UnlockContext&& rhs)\n     rhs.relock = false;\n }\n \n-void WalletModel::loadReceiveRequests(std::vector<std::string>& vReceiveRequests)\n-{\n-    vReceiveRequests = m_wallet->getDestValues(\"rr\"); // receive request\n-}\n-\n-bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest)\n-{\n-    CTxDestination dest = DecodeDestination(sAddress);\n-\n-    std::stringstream ss;\n-    ss << nId;\n-    std::string key = \"rr\" + ss.str(); // \"rr\" prefix = \"receive request\" in destdata\n-\n-    if (sRequest.empty())\n-        return m_wallet->eraseDestData(dest, key);\n-    else\n-        return m_wallet->addDestData(dest, key, sRequest);\n-}\n-\n bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n {\n     CCoinControl coin_control;"
      },
      {
        "sha": "008039af567809e27e54ee80bcdf0a6ea850a35f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -135,9 +135,6 @@ class WalletModel : public QObject\n \n     UnlockContext requestUnlock();\n \n-    void loadReceiveRequests(std::vector<std::string>& vReceiveRequests);\n-    bool saveReceiveRequest(const std::string &sAddress, const int64_t nId, const std::string &sRequest);\n-\n     bool bumpFee(uint256 hash, uint256& new_hash);\n \n     static bool isWalletEnabled();"
      },
      {
        "sha": "b38a095a7a4b6acea384a05db61bb89af8156b4a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -330,7 +330,7 @@ class BerkeleyBatch\n         if (!pdb)\n             return nullptr;\n         Dbc* pcursor = nullptr;\n-        int ret = pdb->cursor(nullptr, &pcursor, 0);\n+        int ret = pdb->cursor(activeTxn, &pcursor, 0);\n         if (ret != 0)\n             return nullptr;\n         return pcursor;\n@@ -357,6 +357,22 @@ class BerkeleyBatch\n         return 0;\n     }\n \n+    bool ErasePrefix(const char* data, size_t size)\n+    {\n+        TxnBegin();\n+        Dbc* pcursor = GetCursor();\n+        Dbt prefix((void*)data, size), prefix_value;\n+        int ret = pcursor->get(&prefix, &prefix_value, DB_SET_RANGE);\n+        for (int flag = DB_CURRENT; ret == 0; flag = DB_NEXT) {\n+            SafeDbt key, value;\n+            if ((ret = pcursor->get(key, value, flag)) != 0 || key.get_size() < size || memcmp(key.get_data(), data, size) != 0) break;\n+            pcursor->del(0);\n+        }\n+        pcursor->close();\n+        TxnCommit();\n+        return ret == 0 || ret == DB_NOTFOUND;\n+    }\n+\n     bool TxnBegin()\n     {\n         if (!pdb || activeTxn)"
      },
      {
        "sha": "66936ac407f1711685e7cef279191ad986dd1020",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 12,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -386,19 +386,47 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n     SetMockTime(0);\n }\n \n-BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n+template<typename F>\n+void TestLoadWallet(std::shared_ptr<BerkeleyEnvironment> env, F&& f)\n {\n-    CTxDestination dest = PKHash();\n-    LOCK(m_wallet.cs_wallet);\n-    WalletBatch batch{m_wallet.GetDatabase()};\n-    m_wallet.AddDestData(batch, dest, \"misc\", \"val_misc\");\n-    m_wallet.AddDestData(batch, dest, \"rr0\", \"val_rr0\");\n-    m_wallet.AddDestData(batch, dest, \"rr1\", \"val_rr1\");\n-\n-    auto values = m_wallet.GetDestValues(\"rr\");\n-    BOOST_CHECK_EQUAL(values.size(), 2U);\n-    BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n-    BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n+    auto wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), MakeUnique<WalletDatabase>(env, \"\"));\n+    bool first_run;\n+    wallet->LoadWallet(first_run);\n+    WITH_LOCK(wallet->cs_wallet, f(wallet));\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(LoadReceiveRequests, TestingSetup)\n+{\n+    auto env = std::make_shared<BerkeleyEnvironment>();\n+    TestLoadWallet(env, [](std::shared_ptr<CWallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet) {\n+        BOOST_CHECK(!wallet->m_address_book[PKHash()].IsUsed());\n+        BOOST_CHECK(WalletBatch(wallet->GetDatabase()).WriteUsed(PKHash(), true));\n+        BOOST_CHECK(WalletBatch(wallet->GetDatabase()).WriteUsed(ScriptHash(), true));\n+        BOOST_CHECK(interfaces::MakeWallet(wallet)->saveReceiveRequest(PKHash(), \"0\", \"val_rr00\"));\n+        BOOST_CHECK(interfaces::MakeWallet(wallet)->saveReceiveRequest(PKHash(), \"0\", \"\"));\n+        BOOST_CHECK(!interfaces::MakeWallet(wallet)->saveReceiveRequest(PKHash(), \"0\", \"\"));\n+        BOOST_CHECK(interfaces::MakeWallet(wallet)->saveReceiveRequest(PKHash(), \"1\", \"val_rr10\"));\n+        BOOST_CHECK(interfaces::MakeWallet(wallet)->saveReceiveRequest(PKHash(), \"1\", \"val_rr11\"));\n+        BOOST_CHECK(interfaces::MakeWallet(wallet)->saveReceiveRequest(ScriptHash(), \"2\", \"val_rr20\"));\n+    });\n+    TestLoadWallet(env, [](std::shared_ptr<CWallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet) {\n+        BOOST_CHECK(wallet->m_address_book[PKHash()].IsUsed());\n+        BOOST_CHECK(wallet->m_address_book[ScriptHash()].IsUsed());\n+        auto requests = interfaces::MakeWallet(wallet)->getReceiveRequests();\n+        auto erequests = {\"val_rr11\", \"val_rr20\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(requests.begin(), requests.end(), std::begin(erequests), std::end(erequests));\n+        BOOST_CHECK(WalletBatch(wallet->GetDatabase()).WriteUsed(PKHash(), false));\n+        BOOST_CHECK(WalletBatch(wallet->GetDatabase()).EraseDestData(ScriptHash()));\n+    });\n+    TestLoadWallet(env, [](std::shared_ptr<CWallet> wallet) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet) {\n+        BOOST_CHECK(!wallet->m_address_book[PKHash()].IsUsed());\n+        BOOST_CHECK(!wallet->m_address_book[ScriptHash()].IsUsed());\n+        auto requests = interfaces::MakeWallet(wallet)->getReceiveRequests();\n+        auto erequests = {\"val_rr11\"};\n+        BOOST_CHECK_EQUAL_COLLECTIONS(requests.begin(), requests.end(), std::begin(erequests), std::end(erequests));\n+    });\n }\n \n // Test some watch-only LegacyScriptPubKeyMan methods by the procedure of loading (LoadWatchOnly),"
      },
      {
        "sha": "18042e8ca2eb1721ed65c5fbf7aba4ebe5f000fb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 64,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -728,6 +728,12 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n+static bool IsUsedDest(const std::map<CTxDestination, CAddressBookData>& address_book, const CTxDestination& dest)\n+{\n+    auto it = address_book.find(dest);\n+    return it != address_book.end() && it->second.IsUsed();\n+}\n+\n void CWallet::SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations)\n {\n     AssertLockHeld(cs_wallet);\n@@ -737,12 +743,12 @@ void CWallet::SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned\n     CTxDestination dst;\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n         if (IsMine(dst)) {\n-            if (used && !GetDestData(dst, \"used\", nullptr)) {\n-                if (AddDestData(batch, dst, \"used\", \"p\")) { // p for \"present\", opposite of absent (null)\n+            if (used != IsUsedDest(m_address_book, dst)) {\n+                if (used) {\n                     tx_destinations.insert(dst);\n                 }\n-            } else if (!used && GetDestData(dst, \"used\", nullptr)) {\n-                EraseDestData(batch, dst, \"used\");\n+                m_address_book[dst].SetUsed(used);\n+                batch.WriteUsed(dst, used);\n             }\n         }\n     }\n@@ -759,23 +765,23 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n         if (!ExtractDestination(srctx->tx->vout[n].scriptPubKey, dest)) {\n             return false;\n         }\n-        if (GetDestData(dest, \"used\", nullptr)) {\n+        if (IsUsedDest(m_address_book, dest)) {\n             return true;\n         }\n         if (IsLegacy()) {\n             LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n             assert(spk_man != nullptr);\n             for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n                 WitnessV0KeyHash wpkh_dest(keyid);\n-                if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n+                if (IsUsedDest(m_address_book, wpkh_dest)) {\n                     return true;\n                 }\n                 ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n-                if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n+                if (IsUsedDest(m_address_book, sh_wpkh_dest)) {\n                     return true;\n                 }\n                 PKHash pkh_dest(keyid);\n-                if (GetDestData(pkh_dest, \"used\", nullptr)) {\n+                if (IsUsedDest(m_address_book, pkh_dest)) {\n                     return true;\n                 }\n             }\n@@ -3152,12 +3158,7 @@ bool CWallet::DelAddressBook(const CTxDestination& address)\n         LOCK(cs_wallet);\n \n         // Delete destdata tuples associated with address\n-        std::string strAddress = EncodeDestination(address);\n-        for (const std::pair<const std::string, std::string> &item : m_address_book[address].destdata)\n-        {\n-            WalletBatch(*database).EraseDestData(strAddress, item.first);\n-        }\n-        m_address_book.erase(address);\n+        WalletBatch(*database).EraseDestData(address);\n     }\n \n     NotifyAddressBookChanged(this, address, \"\", IsMine(address) != ISMINE_NO, \"\", CT_DELETED);\n@@ -3600,56 +3601,6 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n     return nTimeSmart;\n }\n \n-bool CWallet::AddDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key, const std::string &value)\n-{\n-    if (boost::get<CNoDestination>(&dest))\n-        return false;\n-\n-    m_address_book[dest].destdata.insert(std::make_pair(key, value));\n-    return batch.WriteDestData(EncodeDestination(dest), key, value);\n-}\n-\n-bool CWallet::EraseDestData(WalletBatch& batch, const CTxDestination &dest, const std::string &key)\n-{\n-    if (!m_address_book[dest].destdata.erase(key))\n-        return false;\n-    return batch.EraseDestData(EncodeDestination(dest), key);\n-}\n-\n-void CWallet::LoadDestData(const CTxDestination &dest, const std::string &key, const std::string &value)\n-{\n-    m_address_book[dest].destdata.insert(std::make_pair(key, value));\n-}\n-\n-bool CWallet::GetDestData(const CTxDestination &dest, const std::string &key, std::string *value) const\n-{\n-    std::map<CTxDestination, CAddressBookData>::const_iterator i = m_address_book.find(dest);\n-    if(i != m_address_book.end())\n-    {\n-        CAddressBookData::StringMap::const_iterator j = i->second.destdata.find(key);\n-        if(j != i->second.destdata.end())\n-        {\n-            if(value)\n-                *value = j->second;\n-            return true;\n-        }\n-    }\n-    return false;\n-}\n-\n-std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n-{\n-    std::vector<std::string> values;\n-    for (const auto& address : m_address_book) {\n-        for (const auto& data : address.second.destdata) {\n-            if (!data.first.compare(0, prefix.size(), prefix)) {\n-                values.emplace_back(data.second);\n-            }\n-        }\n-    }\n-    return values;\n-}\n-\n bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:"
      },
      {
        "sha": "a8237cda6d1af5c39cce98c13f0128a6f590dace",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 17,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -187,21 +187,29 @@ class CAddressBookData\n {\n private:\n     bool m_change{true};\n+    bool m_used{false};\n     std::string m_label;\n+    std::map<std::string, std::string> m_receive_requests;\n public:\n     std::string purpose;\n \n     CAddressBookData() : purpose(\"unknown\") {}\n \n-    typedef std::map<std::string, std::string> StringMap;\n-    StringMap destdata;\n-\n     bool IsChange() const { return m_change; }\n+    bool IsUsed() const { return m_used; }\n+    void SetUsed(bool used) { m_used = used;}\n     const std::string& GetLabel() const { return m_label; }\n     void SetLabel(const std::string& label) {\n         m_change = false;\n         m_label = label;\n     }\n+    const std::map<std::string, std::string>& GetReceiveRequests() const { return m_receive_requests; }\n+    bool SetReceiveRequest(const std::string& id, const std::string& value)\n+    {\n+        if (value.empty()) return m_receive_requests.erase(id);\n+        m_receive_requests[id] = value;\n+        return true;\n+    }\n };\n \n struct CRecipient\n@@ -855,20 +863,6 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n-    /**\n-     * Adds a destination data tuple to the store, and saves it to disk\n-     * When adding new fields, take care to consider how DelAddressBook should handle it!\n-     */\n-    bool AddDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Erases a destination data tuple in the store and on disk\n-    bool EraseDestData(WalletBatch& batch, const CTxDestination& dest, const std::string& key) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Adds a destination data tuple to the store, without saving it to disk\n-    void LoadDestData(const CTxDestination& dest, const std::string& key, const std::string& value) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Look up a destination data tuple in the store, return true if found false otherwise\n-    bool GetDestData(const CTxDestination& dest, const std::string& key, std::string* value) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    //! Get all destination values matching a prefix.\n-    std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-\n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n     int64_t nRelockTime GUARDED_BY(cs_wallet){0};\n "
      },
      {
        "sha": "e53b70d6d995e2d2b997accf8cc60cc1359dcdb0",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -536,7 +536,12 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> strAddress;\n             ssKey >> strKey;\n             ssValue >> strValue;\n-            pwallet->LoadDestData(DecodeDestination(strAddress), strKey, strValue);\n+            CAddressBookData& data = pwallet->m_address_book[DecodeDestination(strAddress)];\n+            if (strKey.compare(\"used\") == 0) {\n+                data.SetUsed(true);\n+            } else if (strKey.compare(0, 2, \"rr\") == 0) {\n+                data.SetReceiveRequest(strKey.substr(2), std::move(strValue));\n+            }\n         } else if (strType == DBKeys::HDCHAIN) {\n             CHDChain chain;\n             ssValue >> chain;\n@@ -993,16 +998,24 @@ bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str&\n     return BerkeleyBatch::VerifyDatabaseFile(wallet_path, errorStr);\n }\n \n-bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n+bool WalletBatch::WriteUsed(const CTxDestination& dest, bool used)\n {\n-    return WriteIC(std::make_pair(DBKeys::DESTDATA, std::make_pair(address, key)), value);\n+    auto key = std::make_pair(DBKeys::DESTDATA, std::make_pair(EncodeDestination(dest), std::string(\"used\")));\n+    return used ? WriteIC(key, std::string(\"p\")) : EraseIC(key); // p for \"present\", opposite of absent (null)\n }\n \n-bool WalletBatch::EraseDestData(const std::string &address, const std::string &key)\n+bool WalletBatch::WriteReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& receive_request)\n {\n-    return EraseIC(std::make_pair(DBKeys::DESTDATA, std::make_pair(address, key)));\n+    auto key = std::make_pair(DBKeys::DESTDATA, std::make_pair(EncodeDestination(dest), \"rr\" + id));\n+    return receive_request.empty() ? EraseIC(key) : WriteIC(key, receive_request);\n }\n \n+bool WalletBatch::EraseDestData(const CTxDestination& dest)\n+{\n+    CDataStream prefix(SER_DISK, CLIENT_VERSION);\n+    prefix << DBKeys::DESTDATA << EncodeDestination(dest);\n+    return m_batch.ErasePrefix(prefix.data(), prefix.size());\n+}\n \n bool WalletBatch::WriteHDChain(const CHDChain& chain)\n {"
      },
      {
        "sha": "6eeb8c03cc64f31faafe20dc4f52d53f8eee17aa",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <amount.h>\n #include <script/sign.h>\n+#include <script/standard.h>\n #include <wallet/db.h>\n #include <wallet/walletutil.h>\n #include <key.h>\n@@ -250,10 +251,9 @@ class WalletBatch\n     bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n     bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n \n-    /// Write destination data key,value tuple to database\n-    bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n-    /// Erase destination data tuple from wallet database\n-    bool EraseDestData(const std::string &address, const std::string &key);\n+    bool WriteUsed(const CTxDestination& dest, bool used);\n+    bool WriteReceiveRequest(const CTxDestination& dest, const std::string& id, const std::string& receive_request);\n+    bool EraseDestData(const CTxDestination& dest);\n \n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n "
      }
    ]
  },
  {
    "sha": "47a85bce356042875f065fe543460a68735f833e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2E4NWJjZTM1NjA0Mjg3NWYwNjVmZTU0MzQ2MGE2ODczNWY4MzNl",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-04-13T00:40:58Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-06-01T00:20:50Z"
      },
      "message": "gui: Drop RecentRequestsTableModel dependency to WalletModel",
      "tree": {
        "sha": "73bf1bb8a1ee7f9e3579b95684f41ccdbad344a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73bf1bb8a1ee7f9e3579b95684f41ccdbad344a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47a85bce356042875f065fe543460a68735f833e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a85bce356042875f065fe543460a68735f833e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47a85bce356042875f065fe543460a68735f833e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a85bce356042875f065fe543460a68735f833e/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a58f2ae17fbb016cbcda2273be28d7c1a43b0f7"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "fdd9d72f3e434addfa31b47138199d8df7169d3c",
        "filename": "src/qt/recentrequeststablemodel.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a85bce356042875f065fe543460a68735f833e/src/qt/recentrequeststablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a85bce356042875f065fe543460a68735f833e/src/qt/recentrequeststablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.cpp?ref=47a85bce356042875f065fe543460a68735f833e",
        "patch": "@@ -7,7 +7,6 @@\n #include <qt/bitcoinunits.h>\n #include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n-#include <qt/walletmodel.h>\n \n #include <clientversion.h>\n #include <key_io.h>\n@@ -17,18 +16,18 @@\n \n #include <utility>\n \n-RecentRequestsTableModel::RecentRequestsTableModel(WalletModel *parent) :\n-    QAbstractTableModel(parent), walletModel(parent)\n+RecentRequestsTableModel::RecentRequestsTableModel(interfaces::Wallet& wallet, OptionsModel* options_model, QObject* parent) :\n+    QAbstractTableModel(parent), m_wallet(wallet), m_options_model(options_model)\n {\n     // Load entries from wallet\n-    for (const std::string& request : parent->wallet().getReceiveRequests()) {\n+    for (const std::string& request : m_wallet.getReceiveRequests()) {\n         addNewRequest(request);\n     }\n \n     /* These columns must match the indices in the ColumnIndex enumeration */\n     columns << tr(\"Date\") << tr(\"Label\") << tr(\"Message\") << getAmountTitle();\n \n-    connect(walletModel->getOptionsModel(), &OptionsModel::displayUnitChanged, this, &RecentRequestsTableModel::updateDisplayUnit);\n+    connect(m_options_model, &OptionsModel::displayUnitChanged, this, &RecentRequestsTableModel::updateDisplayUnit);\n }\n \n RecentRequestsTableModel::~RecentRequestsTableModel()\n@@ -84,9 +83,9 @@ QVariant RecentRequestsTableModel::data(const QModelIndex &index, int role) cons\n             if (rec->recipient.amount == 0 && role == Qt::DisplayRole)\n                 return tr(\"(no amount requested)\");\n             else if (role == Qt::EditRole)\n-                return BitcoinUnits::format(walletModel->getOptionsModel()->getDisplayUnit(), rec->recipient.amount, false, BitcoinUnits::separatorNever);\n+                return BitcoinUnits::format(m_options_model->getDisplayUnit(), rec->recipient.amount, false, BitcoinUnits::separatorNever);\n             else\n-                return BitcoinUnits::format(walletModel->getOptionsModel()->getDisplayUnit(), rec->recipient.amount);\n+                return BitcoinUnits::format(m_options_model->getDisplayUnit(), rec->recipient.amount);\n         }\n     }\n     else if (role == Qt::TextAlignmentRole)\n@@ -124,7 +123,7 @@ void RecentRequestsTableModel::updateAmountColumnTitle()\n /** Gets title for amount column including current display unit if optionsModel reference available. */\n QString RecentRequestsTableModel::getAmountTitle()\n {\n-    return (this->walletModel->getOptionsModel() != nullptr) ? tr(\"Requested\") + \" (\"+BitcoinUnits::shortName(this->walletModel->getOptionsModel()->getDisplayUnit()) + \")\" : \"\";\n+    return (m_options_model != nullptr) ? tr(\"Requested\") + \" (\"+BitcoinUnits::shortName(m_options_model->getDisplayUnit()) + \")\" : \"\";\n }\n \n QModelIndex RecentRequestsTableModel::index(int row, int column, const QModelIndex &parent) const\n@@ -143,7 +142,7 @@ bool RecentRequestsTableModel::removeRows(int row, int count, const QModelIndex\n         for (int i = 0; i < count; ++i)\n         {\n             const RecentRequestEntry* rec = &list[row+i];\n-            if (!walletModel->wallet().saveReceiveRequest(DecodeDestination(rec->recipient.address.toStdString()), ToString(rec->id), \"\"))\n+            if (!m_wallet.saveReceiveRequest(DecodeDestination(rec->recipient.address.toStdString()), ToString(rec->id), \"\"))\n                 return false;\n         }\n \n@@ -172,7 +171,7 @@ void RecentRequestsTableModel::addNewRequest(const SendCoinsRecipient &recipient\n     CDataStream ss(SER_DISK, CLIENT_VERSION);\n     ss << newEntry;\n \n-    if (!walletModel->wallet().saveReceiveRequest(DecodeDestination(recipient.address.toStdString()), ToString(newEntry.id), ss.str()))\n+    if (!m_wallet.saveReceiveRequest(DecodeDestination(recipient.address.toStdString()), ToString(newEntry.id), ss.str()))\n         return;\n \n     addNewRequest(newEntry);"
      },
      {
        "sha": "74ef83a7fb8b638362f21d97ab5ce9f2a9bad691",
        "filename": "src/qt/recentrequeststablemodel.h",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a85bce356042875f065fe543460a68735f833e/src/qt/recentrequeststablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a85bce356042875f065fe543460a68735f833e/src/qt/recentrequeststablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/recentrequeststablemodel.h?ref=47a85bce356042875f065fe543460a68735f833e",
        "patch": "@@ -11,7 +11,11 @@\n #include <QStringList>\n #include <QDateTime>\n \n-class WalletModel;\n+namespace interfaces {\n+class Wallet;\n+} // namespace interfaces\n+\n+class OptionsModel;\n \n class RecentRequestEntry\n {\n@@ -52,7 +56,7 @@ class RecentRequestsTableModel: public QAbstractTableModel\n     Q_OBJECT\n \n public:\n-    explicit RecentRequestsTableModel(WalletModel *parent);\n+    explicit RecentRequestsTableModel(interfaces::Wallet& wallet, OptionsModel* options_model, QObject* parent);\n     ~RecentRequestsTableModel();\n \n     enum ColumnIndex {\n@@ -85,7 +89,8 @@ public Q_SLOTS:\n     void updateDisplayUnit();\n \n private:\n-    WalletModel *walletModel;\n+    interfaces::Wallet& m_wallet;\n+    OptionsModel* const m_options_model;\n     QStringList columns;\n     QList<RecentRequestEntry> list;\n     int64_t nReceiveRequestsMaxId{0};"
      },
      {
        "sha": "12410beb077bd2976e59750883f3e00474adefb8",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a85bce356042875f065fe543460a68735f833e/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a85bce356042875f065fe543460a68735f833e/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=47a85bce356042875f065fe543460a68735f833e",
        "patch": "@@ -52,7 +52,7 @@ WalletModel::WalletModel(std::unique_ptr<interfaces::Wallet> wallet, ClientModel\n     fHaveWatchOnly = m_wallet->haveWatchOnly();\n     addressTableModel = new AddressTableModel(this);\n     transactionTableModel = new TransactionTableModel(platformStyle, this);\n-    recentRequestsTableModel = new RecentRequestsTableModel(this);\n+    recentRequestsTableModel = new RecentRequestsTableModel(*m_wallet, optionsModel, this);\n \n     subscribeToCoreSignals();\n }"
      },
      {
        "sha": "95dc619beb14e46f9a1db75862124353b99ee287",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a85bce356042875f065fe543460a68735f833e/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a85bce356042875f065fe543460a68735f833e/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=47a85bce356042875f065fe543460a68735f833e",
        "patch": "@@ -14,7 +14,6 @@ EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\"\n     \"qt/bitcoingui -> qt/walletframe -> qt/bitcoingui\"\n-    \"qt/recentrequeststablemodel -> qt/walletmodel -> qt/recentrequeststablemodel\"\n     \"qt/sendcoinsdialog -> qt/walletmodel -> qt/sendcoinsdialog\"\n     \"qt/transactiontablemodel -> qt/walletmodel -> qt/transactiontablemodel\"\n     \"txmempool -> validation -> txmempool\""
      }
    ]
  }
]