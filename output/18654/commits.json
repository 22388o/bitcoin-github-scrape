[
  {
    "sha": "4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjM4MjI0ZjY0YmE3YzhlYTdjNGZiNTUwZWM4OWM2YTZkOGM3ODg3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T18:48:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-25T19:32:11Z"
      },
      "message": "Add psbtbumpfee RPC",
      "tree": {
        "sha": "96ab74627981ea9418e5305cc7afd304e70da49b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96ab74627981ea9418e5305cc7afd304e70da49b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f32f7e907a5eb73e880c567c699569081608ed7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f32f7e907a5eb73e880c567c699569081608ed7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f32f7e907a5eb73e880c567c699569081608ed7a"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 33,
      "deletions": 9
    },
    "files": [
      {
        "sha": "41050edaa6041528cdc8648a7af633acf33ad289",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
        "patch": "@@ -151,6 +151,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getmempoolancestors\", 1, \"verbose\" },\n     { \"getmempooldescendants\", 1, \"verbose\" },\n     { \"bumpfee\", 1, \"options\" },\n+    { \"psbtbumpfee\", 1, \"options\" },\n     { \"logging\", 0, \"include\" },\n     { \"logging\", 1, \"exclude\" },\n     { \"disconnectnode\", 1, \"nodeid\" },"
      },
      {
        "sha": "6bc0d874335fa02006f229b538d9bcbb7e5e9662",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 8,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
        "patch": "@@ -3245,8 +3245,11 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n {\n-            RPCHelpMan{\"bumpfee\",\n+    bool want_psbt = request.strMethod == \"psbtbumpfee\";\n+\n+            RPCHelpMan{request.strMethod,\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+                + std::string(want_psbt ? \"Returns a PSBT instead of creating and signing a new transaction.\\n\" : \"\") +\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n                 \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n                 \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n@@ -3277,27 +3280,35 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                         \"options\"},\n                 },\n                 RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\", {\n-                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\"},\n-                        {RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction. Only returned when wallet private keys are enabled.\"},\n+                    RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+                    {\n+                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction.\" + std::string(want_psbt ? \"\" : \" Only returned when wallet private keys are disabled. (DEPRECATED)\")},\n+                    },\n+                    want_psbt ? std::vector<RPCResult>{} : std::vector<RPCResult>{{RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction. Only returned when wallet private keys are enabled.\"}}\n+                    ),\n+                    {\n                         {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n                         {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n                         {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n                         {\n                             {RPCResult::Type::STR, \"\", \"\"},\n                         }},\n-                    }\n+                    })\n                 },\n                 RPCExamples{\n-            \"\\nBump the fee, get the new transaction\\'s txid\\n\" +\n-                    HelpExampleCli(\"bumpfee\", \"<txid>\")\n+            \"\\nBump the fee, get the new transaction\\'s\" + std::string(want_psbt ? \"psbt\" : \"txid\") + \"\\n\" +\n+                    HelpExampleCli(request.strMethod, \"<txid>\")\n                 },\n             }.Check(request);\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n     CWallet* const pwallet = wallet.get();\n \n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !want_psbt) {\n+        want_psbt = true;\n+    }\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n@@ -3382,7 +3393,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n     // If wallet private keys are enabled, return the new transaction id,\n     // otherwise return the base64-encoded unsigned PSBT of the new transaction.\n-    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (!want_psbt) {\n         if (!feebumper::SignTransaction(*pwallet, mtx)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n         }\n@@ -3415,6 +3426,11 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue psbtbumpfee(const JSONRPCRequest& request)\n+{\n+    return bumpfee(request);\n+}\n+\n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"rescanblockchain\",\n@@ -4160,6 +4176,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n+    { \"wallet\",             \"psbtbumpfee\",                      &psbtbumpfee,                   {\"txid\", \"options\"} },\n     { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },"
      },
      {
        "sha": "91f1bf561f185bf969d4ba2461f289d8c63f8a86",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
        "patch": "@@ -123,13 +123,19 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     self.sync_mempools((rbf_node, peer_node))\n     assert rbfid in rbf_node.getrawmempool() and rbfid in peer_node.getrawmempool()\n     if mode == \"fee_rate\":\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid, {\"fee_rate\": NORMAL})\n         bumped_tx = rbf_node.bumpfee(rbfid, {\"fee_rate\": NORMAL})\n     else:\n+        bumped_psbt = rbf_node.psbtbumpfee(rbfid)\n         bumped_tx = rbf_node.bumpfee(rbfid)\n     assert_equal(bumped_tx[\"errors\"], [])\n     assert bumped_tx[\"fee\"] > -rbftx[\"fee\"]\n     assert_equal(bumped_tx[\"origfee\"], -rbftx[\"fee\"])\n     assert \"psbt\" not in bumped_tx\n+    assert_equal(bumped_psbt[\"errors\"], [])\n+    assert bumped_psbt[\"fee\"] > -rbftx[\"fee\"]\n+    assert_equal(bumped_psbt[\"origfee\"], -rbftx[\"fee\"])\n+    assert \"psbt\" in bumped_psbt\n     # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n     self.sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n@@ -391,7 +397,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     assert_equal(len(watcher.decodepsbt(psbt)[\"tx\"][\"vin\"]), 1)\n \n     # Bump fee, obnoxiously high to add additional watchonly input\n-    bumped_psbt = watcher.bumpfee(original_txid, {\"fee_rate\": HIGH})\n+    bumped_psbt = watcher.psbtbumpfee(original_txid, {\"fee_rate\": HIGH})\n     assert_greater_than(len(watcher.decodepsbt(bumped_psbt['psbt'])[\"tx\"][\"vin\"]), 1)\n     assert \"txid\" not in bumped_psbt\n     assert_equal(bumped_psbt[\"origfee\"], -watcher.gettransaction(original_txid)[\"fee\"])"
      }
    ]
  },
  {
    "sha": "431071c28ae35be8aa012df51233be19067d625c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzEwNzFjMjhhZTM1YmU4YWEwMTJkZjUxMjMzYmUxOTA2N2Q2MjVj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-13T20:28:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-25T19:32:11Z"
      },
      "message": "Hide bumpfee's psbt creation behavior behind -deprecatedrpc\n\nWith psbtbumpfee, we can deprecate bumpfee's psbt creation behavior.\nSo put that behind a -deprecatedrpc",
      "tree": {
        "sha": "45a44bc35a490c8ccc5ec3b9f7952eda7937ba0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45a44bc35a490c8ccc5ec3b9f7952eda7937ba0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/431071c28ae35be8aa012df51233be19067d625c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/431071c28ae35be8aa012df51233be19067d625c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/431071c28ae35be8aa012df51233be19067d625c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/431071c28ae35be8aa012df51233be19067d625c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4638224f64ba7c8ea7c4fb550ec89c6a6d8c7887"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 37,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f3c5ae99fdab4f772cc81f3efcd6da231e0875f9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/431071c28ae35be8aa012df51233be19067d625c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/431071c28ae35be8aa012df51233be19067d625c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=431071c28ae35be8aa012df51233be19067d625c",
        "patch": "@@ -3306,6 +3306,9 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     CWallet* const pwallet = wallet.get();\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !want_psbt) {\n+        if (!pwallet->chain().rpcEnableDeprecated(\"bumpfee\")) {\n+            throw JSONRPCError(RPC_METHOD_DEPRECATED, \"Using bumpfee with wallets that have private keys disabled is deprecated. Use psbtbumpfee instead or restart bitcoind with -deprecatedrpc=bumpfee. This functionality will be removed in 0.22\");\n+        }\n         want_psbt = true;\n     }\n "
      },
      {
        "sha": "b71854d2341dc26f41bc5be9b6b1e22ce356f134",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/431071c28ae35be8aa012df51233be19067d625c/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/431071c28ae35be8aa012df51233be19067d625c/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=431071c28ae35be8aa012df51233be19067d625c",
        "patch": "@@ -4,13 +4,13 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-# from test_framework.util import assert_raises_rpc_error\n+from test_framework.util import assert_raises_rpc_error, find_vout_for_address\n \n class DeprecatedRpcTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[], []]\n+        self.extra_args = [[], ['-deprecatedrpc=bumpfee']]\n \n     def run_test(self):\n         # This test should be used to verify correct behaviour of deprecated\n@@ -23,7 +23,38 @@ def run_test(self):\n         # self.log.info(\"Test generate RPC\")\n         # assert_raises_rpc_error(-32, 'The wallet generate rpc method is deprecated', self.nodes[0].rpc.generate, 1)\n         # self.nodes[1].generate(1)\n-        self.log.info(\"No tested deprecated RPC methods\")\n+\n+        if self.is_wallet_compiled():\n+            self.log.info(\"Test bumpfee RPC\")\n+            self.nodes[0].generate(101)\n+            self.nodes[0].createwallet(wallet_name='nopriv', disable_private_keys=True)\n+            noprivs0 = self.nodes[0].get_wallet_rpc('nopriv')\n+            w0 = self.nodes[0].get_wallet_rpc('')\n+            self.nodes[1].createwallet(wallet_name='nopriv', disable_private_keys=True)\n+            noprivs1 = self.nodes[1].get_wallet_rpc('nopriv')\n+\n+            address = w0.getnewaddress()\n+            desc = w0.getaddressinfo(address)['desc']\n+            change_addr = w0.getrawchangeaddress()\n+            change_desc = w0.getaddressinfo(change_addr)['desc']\n+            txid = w0.sendtoaddress(address=address, amount=10)\n+            vout = find_vout_for_address(w0, txid, address)\n+            self.nodes[0].generate(1)\n+            rawtx = w0.createrawtransaction([{'txid': txid, 'vout': vout}], {w0.getnewaddress(): 5}, 0, True)\n+            rawtx = w0.fundrawtransaction(rawtx, {'changeAddress': change_addr})\n+            signed_tx = w0.signrawtransactionwithwallet(rawtx['hex'])['hex']\n+\n+            noprivs0.importmulti([{'desc': desc, 'timestamp': 0}, {'desc': change_desc, 'timestamp': 0, 'internal': True}])\n+            noprivs1.importmulti([{'desc': desc, 'timestamp': 0}, {'desc': change_desc, 'timestamp': 0, 'internal': True}])\n+\n+            txid = w0.sendrawtransaction(signed_tx)\n+            self.sync_all()\n+\n+            assert_raises_rpc_error(-32, 'Using bumpfee with wallets that have private keys disabled is deprecated. Use psbtbumpfee instead or restart bitcoind with -deprecatedrpc=bumpfee. This functionality will be removed in 0.22', noprivs0.bumpfee, txid)\n+            bumped_psbt = noprivs1.bumpfee(txid)\n+            assert 'psbt' in bumped_psbt\n+        else:\n+            self.log.info(\"No tested deprecated RPC methods\")\n \n if __name__ == '__main__':\n     DeprecatedRpcTest().main()"
      }
    ]
  },
  {
    "sha": "79d6332e9e4fc01e6418247c31e31b4faa1b3b84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OWQ2MzMyZTllNGZjMDFlNjQxODI0N2MzMWUzMWI0ZmFhMWIzYjg0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-16T21:17:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-25T22:11:05Z"
      },
      "message": "moveonly: Fix indentation in bumpfee RPC\n\nReview this with -w to see that nothing actually changes.",
      "tree": {
        "sha": "495be86bdf1d1393c2e66007151baf149ac620a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/495be86bdf1d1393c2e66007151baf149ac620a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79d6332e9e4fc01e6418247c31e31b4faa1b3b84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d6332e9e4fc01e6418247c31e31b4faa1b3b84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79d6332e9e4fc01e6418247c31e31b4faa1b3b84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79d6332e9e4fc01e6418247c31e31b4faa1b3b84/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "431071c28ae35be8aa012df51233be19067d625c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/431071c28ae35be8aa012df51233be19067d625c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/431071c28ae35be8aa012df51233be19067d625c"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 51,
      "deletions": 51
    },
    "files": [
      {
        "sha": "63f4afa3bcfbba14a0c8ac736726b256cf8963c1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 51,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79d6332e9e4fc01e6418247c31e31b4faa1b3b84/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79d6332e9e4fc01e6418247c31e31b4faa1b3b84/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=79d6332e9e4fc01e6418247c31e31b4faa1b3b84",
        "patch": "@@ -3247,59 +3247,59 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n {\n     bool want_psbt = request.strMethod == \"psbtbumpfee\";\n \n-            RPCHelpMan{request.strMethod,\n-                \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n-                + std::string(want_psbt ? \"Returns a PSBT instead of creating and signing a new transaction.\\n\" : \"\") +\n-                \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n-                \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n-                \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n-                \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n-                \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n-                \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n-                \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n-                \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n-                \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n+    RPCHelpMan{request.strMethod,\n+        \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n+        + std::string(want_psbt ? \"Returns a PSBT instead of creating and signing a new transaction.\\n\" : \"\") +\n+        \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n+        \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n+        \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n+        \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n+        \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n+        \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n+        \"Alternatively, the user can specify a fee_rate (\" + CURRENCY_UNIT + \" per kB) for the new transaction.\\n\"\n+        \"At a minimum, the new fee rate must be high enough to pay an additional new relay fee (incrementalfee\\n\"\n+        \"returned by getnetworkinfo) to enter the node's mempool.\\n\",\n+        {\n+            {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n+            {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n                 {\n-                    {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The txid to be bumped\"},\n-                    {\"options\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED_NAMED_ARG, \"\",\n-                        {\n-                            {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n-                            {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n-            \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n-                                     \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n-                            {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n-            \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n-            \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n-            \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n-            \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n-            \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n-            \"                         are replaceable).\"},\n-                            {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n-            \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n-                        },\n-                        \"options\"},\n-                },\n-                RPCResult{\n-                    RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n-                    {\n-                        {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction.\" + std::string(want_psbt ? \"\" : \" Only returned when wallet private keys are disabled. (DEPRECATED)\")},\n-                    },\n-                    want_psbt ? std::vector<RPCResult>{} : std::vector<RPCResult>{{RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction. Only returned when wallet private keys are enabled.\"}}\n-                    ),\n-                    {\n-                        {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n-                        {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n-                        {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n-                        {\n-                            {RPCResult::Type::STR, \"\", \"\"},\n-                        }},\n-                    })\n-                },\n-                RPCExamples{\n-            \"\\nBump the fee, get the new transaction\\'s\" + std::string(want_psbt ? \"psbt\" : \"txid\") + \"\\n\" +\n-                    HelpExampleCli(request.strMethod, \"<txid>\")\n+                    {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet default\", \"Confirmation target (in blocks)\"},\n+                    {\"fee_rate\", RPCArg::Type::NUM, /* default */ \"fall back to 'conf_target'\", \"fee rate (NOT total fee) to pay, in \" + CURRENCY_UNIT + \" per kB\\n\"\n+    \"                         Specify a fee rate instead of relying on the built-in fee estimator.\\n\"\n+                             \"Must be at least 0.0001 \" + CURRENCY_UNIT + \" per kB higher than the current transaction fee rate.\\n\"},\n+                    {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n+    \"                         marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\"\n+    \"                         be left unchanged from the original. If false, any input sequence numbers in the\\n\"\n+    \"                         original transaction that were less than 0xfffffffe will be increased to 0xfffffffe\\n\"\n+    \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n+    \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n+    \"                         are replaceable).\"},\n+                    {\"estimate_mode\", RPCArg::Type::STR, /* default */ \"unset\", std::string() + \"The fee estimate mode, must be one of (case insensitive):\\n\"\n+    \"         \\\"\" + FeeModes(\"\\\"\\n\\\"\") + \"\\\"\"},\n                 },\n-            }.Check(request);\n+                \"options\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\", Cat(Cat<std::vector<RPCResult>>(\n+            {\n+                {RPCResult::Type::STR, \"psbt\", \"The base64-encoded unsigned PSBT of the new transaction.\" + std::string(want_psbt ? \"\" : \" Only returned when wallet private keys are disabled. (DEPRECATED)\")},\n+            },\n+            want_psbt ? std::vector<RPCResult>{} : std::vector<RPCResult>{{RPCResult::Type::STR_HEX, \"txid\", \"The id of the new transaction. Only returned when wallet private keys are enabled.\"}}\n+            ),\n+            {\n+                {RPCResult::Type::STR_AMOUNT, \"origfee\", \"The fee of the replaced transaction.\"},\n+                {RPCResult::Type::STR_AMOUNT, \"fee\", \"The fee of the new transaction.\"},\n+                {RPCResult::Type::ARR, \"errors\", \"Errors encountered during processing (may be empty).\",\n+                {\n+                    {RPCResult::Type::STR, \"\", \"\"},\n+                }},\n+            })\n+        },\n+        RPCExamples{\n+    \"\\nBump the fee, get the new transaction\\'s\" + std::string(want_psbt ? \"psbt\" : \"txid\") + \"\\n\" +\n+            HelpExampleCli(request.strMethod, \"<txid>\")\n+        },\n+    }.Check(request);\n \n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;"
      }
    ]
  }
]