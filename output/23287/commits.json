[
  {
    "sha": "130ee481082d2612d452d7d69131ade935b225b5",
    "node_id": "C_kwDOABII59oAKDEzMGVlNDgxMDgyZDI2MTJkNDUyZDdkNjkxMzFhZGU5MzViMjI1YjU",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-15T14:11:30Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-17T16:10:36Z"
      },
      "message": "test: get and decode tx with a single `gettransaction` RPC call\n\nRather than subsequently calling `gettransaction` and\n`decoderawtransaction` to get the decoded information  for a specific\ntx-id, we can simply use the verbose version of `gettransaction`, which\nreturns this in a 'decoded' key. I.e.\n\nnode.decoderawtransaction(node.gettransaction(txid)['hex'])\n\ncan be replaced by:\n\nnode.gettransaction(txid=txid, verbose=True)['decoded']",
      "tree": {
        "sha": "cf8b9712d1f12dbf57781e7dd5a159b8a58a5992",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf8b9712d1f12dbf57781e7dd5a159b8a58a5992"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/130ee481082d2612d452d7d69131ade935b225b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/130ee481082d2612d452d7d69131ade935b225b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/130ee481082d2612d452d7d69131ade935b225b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/130ee481082d2612d452d7d69131ade935b225b5/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dbba3bac70f78e764910f357c875c09569a8fc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dbba3bac70f78e764910f357c875c09569a8fc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dbba3bac70f78e764910f357c875c09569a8fc4"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 10,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ff5e45519fee61905d9aa30fddb141817348013e",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130ee481082d2612d452d7d69131ade935b225b5/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130ee481082d2612d452d7d69131ade935b225b5/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=130ee481082d2612d452d7d69131ade935b225b5",
        "patch": "@@ -65,8 +65,7 @@ def run_test(self):\n             value = sent_value\n             chain.append(txid)\n             # We need the wtxids to check P2P announcements\n-            fulltx = self.nodes[0].getrawtransaction(txid)\n-            witnesstx = self.nodes[0].decoderawtransaction(fulltx, True)\n+            witnesstx = self.nodes[0].gettransaction(txid=txid, verbose=True)['decoded']\n             witness_chain.append(witnesstx['hash'])\n \n             # Check that listunspent ancestor{count, size, fees} yield the correct results"
      },
      {
        "sha": "7a448e85903cc3827b27d51a66742ebe45c2299a",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=130ee481082d2612d452d7d69131ade935b225b5",
        "patch": "@@ -204,8 +204,7 @@ def test_desc(self, node, address, multisig, typ, utxo):\n \n     def test_change_output_type(self, node_sender, destinations, expected_type):\n         txid = self.nodes[node_sender].sendmany(dummy=\"\", amounts=dict.fromkeys(destinations, 0.001))\n-        raw_tx = self.nodes[node_sender].getrawtransaction(txid)\n-        tx = self.nodes[node_sender].decoderawtransaction(raw_tx)\n+        tx = self.nodes[node_sender].gettransaction(txid=txid, verbose=True)['decoded']\n \n         # Make sure the transaction has change:\n         assert_equal(len(tx[\"vout\"]), len(destinations) + 1)"
      },
      {
        "sha": "92da54d97c6c82250ff1e024bc1888acf251e122",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=130ee481082d2612d452d7d69131ade935b225b5",
        "patch": "@@ -666,7 +666,7 @@ def run_test(self):\n         self.generate(self.nodes[0], 1)\n         destination = self.nodes[1].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(destination, 0.123)\n-        tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        tx = self.nodes[0].gettransaction(txid=txid, verbose=True)['decoded']\n         output_addresses = [vout['scriptPubKey']['address'] for vout in tx[\"vout\"]]\n         assert len(output_addresses) > 1\n         for address in output_addresses:"
      },
      {
        "sha": "00ee08002e3191ec94df56b035f6ac50261f5c00",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=130ee481082d2612d452d7d69131ade935b225b5",
        "patch": "@@ -34,13 +34,13 @@ def test_anti_fee_sniping(self):\n         self.log.info('Check that we have some (old) blocks and that anti-fee-sniping is disabled')\n         assert_equal(self.nodes[0].getblockchaininfo()['blocks'], 200)\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        tx = self.nodes[0].gettransaction(txid=txid, verbose=True)['decoded']\n         assert_equal(tx['locktime'], 0)\n \n         self.log.info('Check that anti-fee-sniping is enabled when we mine a recent block')\n         self.generate(self.nodes[0], 1)\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        tx = self.nodes[0].decoderawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+        tx = self.nodes[0].gettransaction(txid=txid, verbose=True)['decoded']\n         assert 0 < tx['locktime'] <= 201\n \n     def test_tx_size_too_large(self):"
      },
      {
        "sha": "f54ae89c04d0aa6c1e7b546c7c5b73fe13bd0dad",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=130ee481082d2612d452d7d69131ade935b225b5",
        "patch": "@@ -129,7 +129,7 @@ def run_test(self):\n \n         # send a tx and make sure its using the internal chain for the changeoutput\n         txid = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        outs = self.nodes[1].decoderawtransaction(self.nodes[1].gettransaction(txid)['hex'])['vout']\n+        outs = self.nodes[1].gettransaction(txid=txid, verbose=True)['decoded']['vout']\n         keypath = \"\"\n         for out in outs:\n             if out['value'] != 1:"
      },
      {
        "sha": "cec978cb8a20c850b58c0cba63832daa1a47915e",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/130ee481082d2612d452d7d69131ade935b225b5/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=130ee481082d2612d452d7d69131ade935b225b5",
        "patch": "@@ -454,7 +454,7 @@ def run_test(self):\n         self.generate(self.nodes[0], 6)\n         self.sync_all()\n         send_txid = wmulti_priv.sendtoaddress(w0.getnewaddress(), 8)\n-        decoded = wmulti_priv.decoderawtransaction(wmulti_priv.gettransaction(send_txid)['hex'])\n+        decoded = wmulti_priv.gettransaction(txid=send_txid, verbose=True)['decoded']\n         assert_equal(len(decoded['vin'][0]['txinwitness']), 4)\n         self.generate(self.nodes[0], 6)\n         self.sync_all()\n@@ -586,7 +586,7 @@ def run_test(self):\n         self.sync_all()\n         # It is standard and would relay.\n         txid = wmulti_priv_big.sendtoaddress(w0.getnewaddress(), 9.999)\n-        decoded = wmulti_priv_big.decoderawtransaction(wmulti_priv_big.gettransaction(txid)['hex'])\n+        decoded = wmulti_priv_big.gettransaction(txid=txid, verbose=True)['decoded']\n         # 20 sigs + dummy + witness script\n         assert_equal(len(decoded['vin'][0]['txinwitness']), 22)\n \n@@ -620,12 +620,8 @@ def run_test(self):\n         self.generate(self.nodes[0], 6)\n         self.sync_all()\n         # It is standard and would relay.\n-        txid = multi_priv_big.sendtoaddress(w0.getnewaddress(), 10, \"\", \"\",\n-                                            True)\n-        decoded = multi_priv_big.decoderawtransaction(\n-            multi_priv_big.gettransaction(txid)['hex']\n-        )\n-\n+        txid = multi_priv_big.sendtoaddress(w0.getnewaddress(), 10, \"\", \"\", True)\n+        decoded = multi_priv_big.gettransaction(txid=txid, verbose=True)['decoded']\n \n         self.log.info(\"Amending multisig with new private keys\")\n         self.nodes[1].createwallet(wallet_name=\"wmulti_priv3\", descriptors=True)"
      }
    ]
  }
]