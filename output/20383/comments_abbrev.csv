DrahtBot,2020-11-13 20:11:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21007 (bitcoind: Add -daemonwait option to wait for initialization by laanwj)\n* #20406 (util: Avoid invalid integer nega",https://github.com/bitcoin/bitcoin/pull/20383#issuecomment-727007724,727007724,
practicalswift,2020-11-16 07:13:35,"@promag A fuzz test is added in #19259 (""tests: Add fuzzing harness for LoadMempool(...) and DumpMempool(...)""). Review welcome! :)",https://github.com/bitcoin/bitcoin/pull/20383#issuecomment-727784758,727784758,
practicalswift,2021-01-15 14:06:19,"> Maybe a note ""pls don't fuzz your rpc interface in production"" is good enough?\n\nI think we should try to make all our interfaces robust against crazy inputs. That includes our RPC interface :)\n\nWhere ""robustness"" includes being able to handle crazy inputs without triggering ASAN, MSAN, TSAN or UBSAN warnings.\n\nIn other words I think we should strive for handling crazy user input (UI ",https://github.com/bitcoin/bitcoin/pull/20383#issuecomment-760961178,760961178,
MarcoFalke,2021-01-15 14:16:18,"Sure, when it is possible to add a simple check if the input is invalid, but here it requires changing the whole mempool package tracking code",https://github.com/bitcoin/bitcoin/pull/20383#issuecomment-760966729,760966729,
luke-jr,2020-11-13 18:42:39,Why?,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523154287,523154287,src/txmempool.cpp
luke-jr,2020-11-13 21:45:30,This needs to be in the parent commit,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523248706,523248706,src/test/fuzz/util.h
luke-jr,2020-11-13 21:48:52,Maybe a bit more verbosity here would be good.,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523250052,523250052,src/rpc/mining.cpp
luke-jr,2020-11-13 21:50:55,"This should be literally impossible to hit based on invalid data...?\n\nAFAICT, the only possibility is if the user manages to call `prioritisetransaction` RPC before it's loaded the transaction in question",https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523250885,523250885,src/validation.cpp
practicalswift,2020-11-13 21:50:56,"Otherwise the following invalid integer negation will take place:\n\n```\nutil/moneystr.cpp:16:34: runtime error: negation of -9223372036854775808 cannot be represented in type 'CAmount' (aka 'long'); cast to an unsigned type to negate this value to itself\n    #0 0x55b386a14eac in FormatMoney[abi:cxx11](long const&) src/util/moneystr.cpp:16:34\n    #1 0x55b3861962f3 in CTxMemPool::Prioritise",https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523250890,523250890,src/txmempool.cpp
practicalswift,2020-11-13 22:12:01,"It is possible, but don't take my word for it. Take my PoC for it! :)\n\nProof of concept:\n\n```\n$ git checkout master\n$ make -C src/ bitcoind\n$ xxd -p -r > mempool-signed-integer-overflow.dat << ""EOF""\n01000000000000003f2d3f3f21f800000000000000000000000000000000\n6d697464657363656e64616e00000001000000ec000000003d6a6c000000\n000000000000ec9bf601000000000000000000ec9b0001000000000001f",https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523260712,523260712,src/validation.cpp
practicalswift,2020-11-13 22:14:03,Good point. Now fixed.,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523261363,523261363,src/test/fuzz/util.h
practicalswift,2020-11-13 22:24:28,Now using a slightly more verbose error message which hints that an invalid `fee_delta` argument is the most likely cause. Let me know if you have any other suggestion on wording.,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523264921,523264921,src/rpc/mining.cpp
Crypt-iQ,2020-11-14 14:46:24,@practicalswift do you have a PoC for this one too? Just curious what the input looks like.,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523426834,523426834,src/validation.cpp
practicalswift,2020-11-15 11:43:20,"@Crypt-iQ Absolutely, your wish is my command: here you go! :)\n\nProof of concept:\n\n```\n$ git checkout master\n$ make -C src/ bitcoind\n$ xxd -p -r > mempool-poc-for-second-case-on-line-5115.dat << EOF\n0100000000000000010000000000000000000000000000003f0020202020\n202020202020202020ff20ff016e2682a8e0af181ae4ffa4ce2fc42b1e3d\n8ce88019b194a45cd7c476b88ef1e220202020202020802020ff2020\n",https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523747142,523747142,src/validation.cpp
promag,2020-11-15 23:11:45,Add as a test?,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523828685,523828685,src/validation.cpp
practicalswift,2020-11-16 07:12:47,"@promag A fuzz test is added in #19259 (""tests: Add fuzzing harness for LoadMempool(...) and DumpMempool(...)""). Review welcome! :)",https://github.com/bitcoin/bitcoin/pull/20383#discussion_r523934241,523934241,src/validation.cpp
practicalswift,2020-11-19 16:09:00,If the fix to `FormayMoney` in #20406 is applied we don't have to have the restriction. I think that would be even better :),https://github.com/bitcoin/bitcoin/pull/20383#discussion_r527009032,527009032,src/txmempool.cpp
MarcoFalke,2021-01-14 09:22:45,"This check isn't complete. You'd have to check all ancestors and descandants as well. Also, I don't understand why this can't be `FeeDeltaRange` https://github.com/bitcoin/bitcoin/pull/20089/files#r557249710",https://github.com/bitcoin/bitcoin/pull/20383#discussion_r557250615,557250615,src/txmempool.cpp
MarcoFalke,2021-01-14 09:25:45,"might be good to update the docs and release notes. Something like\n\n\n```diff\ndiff --git a/src/amount.h b/src/amount.h\nindex 47968e80b1..9c770a8fe3 100644\n--- a/src/amount.h\n+++ b/src/amount.h\n@@ -24,5 +24,6 @@ static const CAmount COIN = 100000000;\n  * */\n static const CAmount MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 &&",https://github.com/bitcoin/bitcoin/pull/20383#discussion_r557252571,557252571,src/rpc/mining.cpp
luke-jr,2021-02-28 16:56:26,Fee deltas have no such range limit.,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r584325323,584325323,src/amount.h
practicalswift,2021-02-28 18:15:30,Context: https://github.com/bitcoin/bitcoin/pull/20089#discussion_r557249710 + https://github.com/bitcoin/bitcoin/pull/20383#discussion_r557252571,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r584335817,584335817,src/amount.h
MarcoFalke,2021-11-02 19:52:19,Implemented an alternative that also checks all ancestors and descendants here: #23418 ,https://github.com/bitcoin/bitcoin/pull/20383#discussion_r741416636,741416636,src/txmempool.cpp
