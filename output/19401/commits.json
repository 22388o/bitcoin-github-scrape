[
  {
    "sha": "1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGYyY2QxYzhmNDY4YmQ3YTViMTMzNWE0NmNjZWEyOGZiZGRhYWNi",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-01-12T19:44:01Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-09-12T18:24:26Z"
      },
      "message": "QA: blocktools: Accept block template to create_block",
      "tree": {
        "sha": "7e0372b1cee21d7166441911a258ef3231556579",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e0372b1cee21d7166441911a258ef3231556579"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49464004701e5ac256fe1f3e969464012af7c598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49464004701e5ac256fe1f3e969464012af7c598",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49464004701e5ac256fe1f3e969464012af7c598"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 24,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7d462fa223075901b5c678aa992f2a6feac5e9aa",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 24,
        "deletions": 8,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb",
        "patch": "@@ -4,6 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n \n+from binascii import a2b_hex\n+import io\n+import struct\n+import time\n import unittest\n \n from .address import (\n@@ -51,19 +55,31 @@\n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n \n+NORMAL_GBT_REQUEST_PARAMS = {\"rules\": [\"segwit\"]}\n \n-def create_block(hashprev, coinbase, ntime=None, *, version=1):\n+\n+def create_block(hashprev=None, coinbase=None, ntime=None, *, version=None, tmpl=None, txlist=None):\n     \"\"\"Create a block (with regtest difficulty).\"\"\"\n     block = CBlock()\n-    block.nVersion = version\n-    if ntime is None:\n-        import time\n-        block.nTime = int(time.time() + 600)\n+    if tmpl is None:\n+        tmpl = {}\n+    block.nVersion = version or tmpl.get('version') or 1\n+    block.nTime = ntime or tmpl.get('curtime') or int(time.time() + 600)\n+    block.hashPrevBlock = hashprev or int(tmpl['previousblockhash'], 0x10)\n+    if tmpl and not tmpl.get('bits') is None:\n+        block.nBits = struct.unpack('>I', a2b_hex(tmpl['bits']))[0]\n     else:\n-        block.nTime = ntime\n-    block.hashPrevBlock = hashprev\n-    block.nBits = 0x207fffff  # difficulty retargeting is disabled in REGTEST chainparams\n+        block.nBits = 0x207fffff  # difficulty retargeting is disabled in REGTEST chainparams\n+    if coinbase is None:\n+        coinbase = create_coinbase(height=tmpl['height'])\n     block.vtx.append(coinbase)\n+    if txlist:\n+        for tx in txlist:\n+            if not hasattr(tx, 'calc_sha256'):\n+                txo = CTransaction()\n+                txo.deserialize(io.BytesIO(tx))\n+                tx = txo\n+            block.vtx.append(tx)\n     block.hashMerkleRoot = block.calc_merkle_root()\n     block.calc_sha256()\n     return block"
      }
    ]
  },
  {
    "sha": "d438d609cd64fe532d94e45000495de93ef99aa6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDM4ZDYwOWNkNjRmZTUzMmQ5NGU0NTAwMDQ5NWRlOTNlZjk5YWE2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-27T00:24:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-09-12T18:24:26Z"
      },
      "message": "QA: Use GBT to get block versions correct",
      "tree": {
        "sha": "af32a6c3c8490b59903ec32c2af7f9b8b96f047d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af32a6c3c8490b59903ec32c2af7f9b8b96f047d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d438d609cd64fe532d94e45000495de93ef99aa6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d438d609cd64fe532d94e45000495de93ef99aa6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d438d609cd64fe532d94e45000495de93ef99aa6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d438d609cd64fe532d94e45000495de93ef99aa6/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1df2cd1c8f468bd7a5b1335a46ccea28fbddaacb"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 21,
      "deletions": 24
    },
    "files": [
      {
        "sha": "480e0fab9cf179c5edb2e78fec2b42c6caa55f6d",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=d438d609cd64fe532d94e45000495de93ef99aa6",
        "patch": "@@ -6,7 +6,7 @@\n \n import time\n \n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n+from test_framework.blocktools import create_block, NORMAL_GBT_REQUEST_PARAMS, add_witness_commitment\n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -272,6 +272,8 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n         # Advance the time on the node so that we can test timelocks\n         self.nodes[0].setmocktime(cur_time+600)\n+        # Save block template now to use for the reorg later\n+        tmpl = self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n         self.nodes[0].generate(1)\n         assert tx2.hash not in self.nodes[0].getrawmempool()\n \n@@ -315,16 +317,15 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # diagram above).\n         # This would cause tx2 to be added back to the mempool, which in turn causes\n         # tx3 to be removed.\n-        tip = int(self.nodes[0].getblockhash(self.nodes[0].getblockcount()-1), 16)\n-        height = self.nodes[0].getblockcount()\n         for i in range(2):\n-            block = create_block(tip, create_coinbase(height), cur_time)\n-            block.nVersion = 3\n+            block = create_block(tmpl=tmpl, ntime=cur_time)\n             block.rehash()\n             block.solve()\n             tip = block.sha256\n-            height += 1\n             assert_equal(None if i == 1 else 'inconclusive', self.nodes[0].submitblock(ToHex(block)))\n+            tmpl = self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n+            tmpl['previousblockhash'] = '%x' % tip\n+            tmpl['transactions'] = []\n             cur_time += 1\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -372,9 +373,7 @@ def test_bip68_not_consensus(self):\n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n \n         # make a block that violates bip68; ensure that the tip updates\n-        tip = int(self.nodes[0].getbestblockhash(), 16)\n-        block = create_block(tip, create_coinbase(self.nodes[0].getblockcount()+1))\n-        block.nVersion = 3\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS))\n         block.vtx.extend([tx1, tx2, tx3])\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.rehash()"
      },
      {
        "sha": "d1196a4bbde772f4790463f8baa8e38341f0ea61",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=d438d609cd64fe532d94e45000495de93ef99aa6",
        "patch": "@@ -14,7 +14,7 @@\n \"\"\"\n import time\n \n-from test_framework.blocktools import create_coinbase, create_block, create_transaction, add_witness_commitment\n+from test_framework.blocktools import NORMAL_GBT_REQUEST_PARAMS, create_block, create_transaction, add_witness_commitment\n from test_framework.messages import CTransaction\n from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n@@ -37,14 +37,15 @@ def trueDummy(tx):\n class NULLDUMMYTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n-        self.num_nodes = 1\n+        # Need two nodes only so GBT doesn't complain that it's not connected\n+        self.num_nodes = 2\n         self.setup_clean_chain = True\n         # This script tests NULLDUMMY activation, which is part of the 'segwit' deployment, so we go through\n         # normal segwit activation here (and don't use the default always-on behaviour).\n         self.extra_args = [[\n             '-segwitheight=432',\n             '-addresstype=legacy',\n-        ]]\n+        ]] * 2\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -61,7 +62,6 @@ def run_test(self):\n             coinbase_txid.append(self.nodes[0].getblock(i)['tx'][0])\n         self.nodes[0].generate(427)  # Block 429\n         self.lastblockhash = self.nodes[0].getbestblockhash()\n-        self.tip = int(\"0x\" + self.lastblockhash, 0)\n         self.lastblockheight = 429\n         self.lastblocktime = int(time.time()) + 429\n \n@@ -102,8 +102,10 @@ def run_test(self):\n         self.block_submit(self.nodes[0], test6txs, True, True)\n \n     def block_submit(self, node, txs, witness=False, accept=False):\n-        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1), self.lastblocktime + 1)\n-        block.nVersion = 4\n+        tmpl = node.getblocktemplate(NORMAL_GBT_REQUEST_PARAMS)\n+        assert_equal(tmpl['previousblockhash'], self.lastblockhash)\n+        assert_equal(tmpl['height'], self.lastblockheight + 1)\n+        block = create_block(tmpl=tmpl, ntime=self.lastblocktime + 1)\n         for tx in txs:\n             tx.rehash()\n             block.vtx.append(tx)\n@@ -114,7 +116,6 @@ def block_submit(self, node, txs, witness=False, accept=False):\n         assert_equal(None if accept else 'block-validation-failed', node.submitblock(block.serialize().hex()))\n         if (accept):\n             assert_equal(node.getbestblockhash(), block.hash)\n-            self.tip = block.sha256\n             self.lastblockhash = block.hash\n             self.lastblocktime += 1\n             self.lastblockheight += 1"
      },
      {
        "sha": "afb08870cd1c01742b9afd146ae4e63626163c61",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=d438d609cd64fe532d94e45000495de93ef99aa6",
        "patch": "@@ -61,14 +61,12 @@ def set_test_params(self):\n             ],\n             [\n                 \"-acceptnonstdtxn=1\",\n-                \"-blockversion=4\",\n                 \"-rpcserialversion=1\",\n                 \"-segwitheight=432\",\n                 \"-addresstype=legacy\",\n             ],\n             [\n                 \"-acceptnonstdtxn=1\",\n-                \"-blockversion=536870915\",\n                 \"-segwitheight=432\",\n                 \"-addresstype=legacy\",\n             ],"
      },
      {
        "sha": "2b6219e80f739b94205f4cba726ce2a5f199920f",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d438d609cd64fe532d94e45000495de93ef99aa6/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=d438d609cd64fe532d94e45000495de93ef99aa6",
        "patch": "@@ -9,7 +9,7 @@\n \"\"\"\n import random\n \n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n+from test_framework.blocktools import create_block, NORMAL_GBT_REQUEST_PARAMS, add_witness_commitment\n from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n from test_framework.mininode import mininode_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n@@ -104,11 +104,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def build_block_on_tip(self, node, segwit=False):\n-        height = node.getblockcount()\n-        tip = node.getbestblockhash()\n-        mtp = node.getblockheader(tip)['mediantime']\n-        block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n-        block.nVersion = 4\n+        block = create_block(tmpl=node.getblocktemplate(NORMAL_GBT_REQUEST_PARAMS))\n         if segwit:\n             add_witness_commitment(block)\n         block.solve()\n@@ -789,6 +785,9 @@ def announce_cmpct_block(node, peer):\n         assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n     def run_test(self):\n+        # Get the nodes out of IBD\n+        self.nodes[0].generate(1)\n+\n         # Setup the p2p connections\n         self.segwit_node = self.nodes[0].add_p2p_connection(TestP2PConn(cmpct_version=2))\n         self.old_node = self.nodes[0].add_p2p_connection(TestP2PConn(cmpct_version=1), services=NODE_NETWORK)"
      }
    ]
  }
]