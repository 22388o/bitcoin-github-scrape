[
  {
    "sha": "99cccb900beb4a32c0ad31a7d8b7d1461339f677",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWNjY2I5MDBiZWI0YTMyYzBhZDMxYTdkOGI3ZDE0NjEzMzlmNjc3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:43:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:14:00Z"
      },
      "message": "Add a method to add a pubkey to the keypool\n\nIntroduces AddKeypoolPubkey in order to add a pubkey to the keypool",
      "tree": {
        "sha": "fa851e6dfdc33e905d5c1838e36dcb8b2647f689",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa851e6dfdc33e905d5c1838e36dcb8b2647f689"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0ec74801f7b185087d1b6dbb82bdd6fbd8dcc5"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 26,
      "deletions": 13
    },
    "files": [
      {
        "sha": "186c136eebad3ebb76e1dd710dbdaba08b0f65a9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 13,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "patch": "@@ -3443,20 +3443,8 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 internal = true;\n             }\n \n-            assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n-            int64_t index = ++m_max_keypool_index;\n-\n             CPubKey pubkey(GenerateNewKey(batch, internal));\n-            if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n-                throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n-            }\n-\n-            if (internal) {\n-                setInternalKeyPool.insert(index);\n-            } else {\n-                setExternalKeyPool.insert(index);\n-            }\n-            m_pool_key_to_index[pubkey.GetID()] = index;\n+            AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n         }\n         if (missingInternal + missingExternal > 0) {\n             WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n@@ -3466,6 +3454,29 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return true;\n }\n \n+void CWallet::AddKeypoolPubkey(const CPubKey& pubkey, const bool internal)\n+{\n+    WalletBatch batch(*database);\n+    AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n+    NotifyCanGetAddressesChanged();\n+}\n+\n+void CWallet::AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch)\n+{\n+    LOCK(cs_wallet);\n+    assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+    int64_t index = ++m_max_keypool_index;\n+    if (!batch.WritePool(index, CKeyPool(pubkey, internal))) {\n+        throw std::runtime_error(std::string(__func__) + \": writing imported pubkey failed\");\n+    }\n+    if (internal) {\n+        setInternalKeyPool.insert(index);\n+    } else {\n+        setExternalKeyPool.insert(index);\n+    }\n+    m_pool_key_to_index[pubkey.GetID()] = index;\n+}\n+\n bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal)\n {\n     nIndex = -1;"
      },
      {
        "sha": "2a5d6caaf8c000c0f3bc079e513a93a6616cf767",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99cccb900beb4a32c0ad31a7d8b7d1461339f677/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "patch": "@@ -1001,6 +1001,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n+    void AddKeypoolPubkey(const CPubKey& pubkey, const bool internal);\n+    void AddKeypoolPubkeyWithDB(const CPubKey& pubkey, const bool internal, WalletBatch& batch);\n \n     /**\n      * Reserves a key from the keypool and sets nIndex to its index"
      }
    ]
  },
  {
    "sha": "9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjgxZmQxOWFjN2ZmOWYzNGNjMzJjYzIyMWYwNTdkOWMzY2Q3MjE4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:44:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:14:00Z"
      },
      "message": "Fetch keys from keypool when private keys are disabled\n\nWhen private keys are disabled, still fetch keys from the keypool\nif the keypool has keys. Those keys come from importing them and\nadding them to the keypool.",
      "tree": {
        "sha": "d3cec592ffcc4e8991ff4962c2536b910f021859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3cec592ffcc4e8991ff4962c2536b910f021859"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99cccb900beb4a32c0ad31a7d8b7d1461339f677",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99cccb900beb4a32c0ad31a7d8b7d1461339f677"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 16,
      "deletions": 25
    },
    "files": [
      {
        "sha": "22ea59273859dc581a59dd342ff0e69c7f22b1a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "patch": "@@ -173,18 +173,12 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    // Belt and suspenders check for disabled private keys\n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: This wallet has no available keys\");\n     }\n \n-\n     // Parse the label first so we don't generate a key if there's an error\n     std::string label;\n     if (!request.params[0].isNull())\n@@ -240,11 +234,6 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    // Belt and suspenders check for disabled private keys\n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n-    }\n-\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses(true)) {\n@@ -2447,7 +2436,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n     CKeyID seed_id = pwallet->GetHDChain().seed_id;\n-    if (!seed_id.IsNull() && pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n+    if (pwallet->CanSupportFeature(FEATURE_HD_SPLIT)) {\n         obj.pushKV(\"keypoolsize_hd_internal\",   (int64_t)(pwallet->GetKeyPoolSize() - kpExternalSize));\n     }\n     if (pwallet->IsCrypted()) {"
      },
      {
        "sha": "d174e308f0ffb30c3ed7130d2bf12acbb74e0d02",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "patch": "@@ -2833,8 +2833,8 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n                 //  post-backup change.\n \n                 // Reserve a new key pair from key pool\n-                if (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-                    strFailReason = _(\"Can't generate a change-address key. Private keys are disabled for this wallet.\");\n+                if (!CanGetAddresses(true)) {\n+                    strFailReason = _(\"Can't generate a change-address key. No keys in the internal keypool and can't generate any keys.\");\n                     return false;\n                 }\n                 CPubKey vchPubKey;\n@@ -3487,7 +3487,8 @@ bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!IsLocked())\n             TopUpKeyPool();\n \n-        bool fReturningInternal = IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT) && fRequestedInternal;\n+        bool fReturningInternal = fRequestedInternal;\n+        fReturningInternal &= (IsHDEnabled() && CanSupportFeature(FEATURE_HD_SPLIT)) || IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n         bool use_split_keypool = set_pre_split_keypool.empty();\n         std::set<int64_t>& setKeyPool = use_split_keypool ? (fReturningInternal ? setInternalKeyPool : setExternalKeyPool) : set_pre_split_keypool;\n \n@@ -3504,7 +3505,8 @@ bool CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRe\n         if (!batch.ReadPool(nIndex, keypool)) {\n             throw std::runtime_error(std::string(__func__) + \": read failed\");\n         }\n-        if (!HaveKey(keypool.vchPubKey.GetID())) {\n+        CPubKey pk;\n+        if (!GetPubKey(keypool.vchPubKey.GetID(), pk)) {\n             throw std::runtime_error(std::string(__func__) + \": unknown key in key pool\");\n         }\n         // If the key was pre-split keypool, we don't care about what type it is\n@@ -3558,7 +3560,7 @@ bool CWallet::GetKeyFromPool(CPubKey& result, bool internal)\n     {\n         LOCK(cs_wallet);\n         int64_t nIndex;\n-        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal)) {\n+        if (!ReserveKeyFromKeyPool(nIndex, keypool, internal) && !IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             if (IsLocked()) return false;\n             WalletBatch batch(*database);\n             result = GenerateNewKey(batch, internal);"
      },
      {
        "sha": "7ec72b86491ff566f4061b280b6c2d6ca03d6790",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "patch": "@@ -31,8 +31,8 @@ def run_test(self):\n         self.log.info(\"Test disableprivatekeys creation.\")\n         self.nodes[0].createwallet(wallet_name='w1', disable_private_keys=True)\n         w1 = node.get_wallet_rpc('w1')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w1.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w1.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w1.getrawchangeaddress)\n         w1.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n \n         self.log.info('Test that private keys cannot be imported')\n@@ -48,8 +48,8 @@ def run_test(self):\n         self.log.info(\"Test blank creation with private keys disabled.\")\n         self.nodes[0].createwallet(wallet_name='w2', disable_private_keys=True, blank=True)\n         w2 = node.get_wallet_rpc('w2')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w2.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w2.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w2.getrawchangeaddress)\n         w2.importpubkey(w0.getaddressinfo(address1)['pubkey'])\n \n         self.log.info(\"Test blank creation with private keys enabled.\")\n@@ -89,12 +89,12 @@ def run_test(self):\n         self.nodes[0].createwallet(wallet_name='w5', disable_private_keys=True, blank=True)\n         w5 = node.get_wallet_rpc('w5')\n         assert_equal(w5.getwalletinfo()['keypoolsize'], 0)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getrawchangeaddress)\n         # Encrypt the wallet\n         w5.encryptwallet('pass')\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getnewaddress)\n-        assert_raises_rpc_error(-4, \"Error: Private keys are disabled for this wallet\", w5.getrawchangeaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getnewaddress)\n+        assert_raises_rpc_error(-4, \"Error: This wallet has no available keys\", w5.getrawchangeaddress)\n \n if __name__ == '__main__':\n     CreateWalletTest().main()"
      }
    ]
  },
  {
    "sha": "513719c5f860a5758411331d5ced0bb50c5c5054",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTM3MTljNWY4NjBhNTc1ODQxMTMzMWQ1Y2VkMGJiNTBjNWM1MDU0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T14:47:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:14:42Z"
      },
      "message": "Add option to importmulti add an imported pubkey to the keypool\n\nAdds a new option to importmulti where the pubkeys specified in the import\nobject can be added to the keypool. This only works if the wallet has\nprivate keys disabled.",
      "tree": {
        "sha": "e7d8784a77a4d60e296f8df11b6424946175d17d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7d8784a77a4d60e296f8df11b6424946175d17d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/513719c5f860a5758411331d5ced0bb50c5c5054",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513719c5f860a5758411331d5ced0bb50c5c5054",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/513719c5f860a5758411331d5ced0bb50c5c5054",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513719c5f860a5758411331d5ced0bb50c5c5054/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b81fd19ac7ff9f34cc32cc221f057d9c3cd7218"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "30555886f7d9de36f7a407914fc4c67352068994",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/513719c5f860a5758411331d5ced0bb50c5c5054/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/513719c5f860a5758411331d5ced0bb50c5c5054/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=513719c5f860a5758411331d5ced0bb50c5c5054",
        "patch": "@@ -1207,6 +1207,12 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n         }\n         const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+        const bool add_keypool = data.exists(\"keypool\") ? data[\"keypool\"].get_bool() : false;\n+\n+        // Add to keypool only works with privkeys disabled\n+        if (add_keypool && !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Keys can only be imported to the keypool when private keys are disabled\");\n+        }\n \n         ImportData import_data;\n         std::map<CKeyID, CPubKey> pubkey_map;\n@@ -1267,6 +1273,11 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 pwallet->AddKeyOrigin(pubkey, key_orig_it->second);\n             }\n             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n+\n+            // Add to keypool only works with pubkeys\n+            if (add_keypool) {\n+                pwallet->AddKeypoolPubkey(pubkey, internal);\n+            }\n         }\n \n         for (const CScript& script : script_pub_keys) {"
      }
    ]
  },
  {
    "sha": "9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTE1NTFiOWNlZGEwMDU2ZmNiYzc4YmY1ODI3YmZmMWJmYzVkNTFi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-11-06T15:14:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:33:29Z"
      },
      "message": "Test pubkey import to keypool",
      "tree": {
        "sha": "a26d3fc44d077fffef04c41c89bddd82b90b5afe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a26d3fc44d077fffef04c41c89bddd82b90b5afe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "513719c5f860a5758411331d5ced0bb50c5c5054",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/513719c5f860a5758411331d5ced0bb50c5c5054",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/513719c5f860a5758411331d5ced0bb50c5c5054"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 87,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f77c5e5fda0432b616cf44e966ee6b6c13300ae",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 87,
        "deletions": 1,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
        "patch": "@@ -625,7 +625,6 @@ def run_test(self):\n                      ismine=False,\n                      iswatchonly=False)\n \n-\n         # Import pubkeys with key origin info\n         self.log.info(\"Addresses should have hd keypath and master key id after import with key origin\")\n         pub_addr = self.nodes[1].getnewaddress()\n@@ -691,5 +690,92 @@ def run_test(self):\n         assert 'hdmasterfingerprint' not in pub_import_info\n         assert 'hdkeypath' not in pub_import_info\n \n+        # Import some public keys to the keypool of a no privkey wallet\n+        self.log.info(\"Adding pubkey to keypool of disableprivkey wallet\")\n+        self.nodes[1].createwallet(wallet_name=\"noprivkeys\", disable_private_keys=True)\n+        wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n+\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                'desc': 'wpkh(' + pub2 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert result[1]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 2)\n+        newaddr1 = wrpc.getnewaddress()\n+        assert_equal(addr1, newaddr1)\n+        newaddr2 = wrpc.getnewaddress()\n+        assert_equal(addr2, newaddr2)\n+\n+        # Import some public keys to the internal keypool of a no privkey wallet\n+        self.log.info(\"Adding pubkey to internal keypool of disableprivkey wallet\")\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                'internal': True,\n+                \"timestamp\": \"now\",\n+            },\n+            {\n+                'desc': 'wpkh(' + pub2 + ')',\n+                'keypool': True,\n+                'internal': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert result[1]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize_hd_internal\"], 2)\n+        newaddr1 = wrpc.getrawchangeaddress()\n+        assert_equal(addr1, newaddr1)\n+        newaddr2 = wrpc.getrawchangeaddress()\n+        assert_equal(addr2, newaddr2)\n+\n+        # Import a multisig and make sure the keys don't go into the keypool\n+        self.log.info('Imported scripts with pubkeys shoud not have their pubkeys go into the keypool')\n+        addr1 = self.nodes[0].getnewaddress()\n+        addr2 = self.nodes[0].getnewaddress()\n+        pub1 = self.nodes[0].getaddressinfo(addr1)['pubkey']\n+        pub2 = self.nodes[0].getaddressinfo(addr2)['pubkey']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wsh(multi(2,' + pub1 + ',' + pub2 + '))',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert result[0]['success']\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 0)\n+\n+        # Cannot import those pubkeys to keypool of wallet with privkeys\n+        self.log.info(\"Pubkeys cannot be added to the keypool of a wallet with private keys\")\n+        wrpc = self.nodes[1].get_wallet_rpc(\"\")\n+        assert wrpc.getwalletinfo()['private_keys_enabled']\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh(' + pub1 + ')',\n+                'keypool': True,\n+                \"timestamp\": \"now\",\n+            }]\n+        )\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], \"Keys can only be imported to the keypool when private keys are disabled\")\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  },
  {
    "sha": "f4b00b70e811d3772589ab3c64d7658f4dbdab69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGIwMGI3MGU4MTFkMzc3MjU4OWFiM2M2NGQ3NjU4ZjRkYmRhYjY5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-12-16T19:08:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-02-14T23:34:03Z"
      },
      "message": "Import public keys in order\n\nDo public key imports in the order that they are specified in the import\nor in the descriptor range.",
      "tree": {
        "sha": "81a3f474331aff4d7bbf1c65567582e92f3fc069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81a3f474331aff4d7bbf1c65567582e92f3fc069"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4b00b70e811d3772589ab3c64d7658f4dbdab69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b00b70e811d3772589ab3c64d7658f4dbdab69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4b00b70e811d3772589ab3c64d7658f4dbdab69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4b00b70e811d3772589ab3c64d7658f4dbdab69/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e1551b9ceda0056fcbc78bf5827bff1bfc5d51b"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 62,
      "deletions": 29
    },
    "files": [
      {
        "sha": "930274f8a177a954e327d11a52dfc13f8bcca488",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 29,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b00b70e811d3772589ab3c64d7658f4dbdab69/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b00b70e811d3772589ab3c64d7658f4dbdab69/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f4b00b70e811d3772589ab3c64d7658f4dbdab69",
        "patch": "@@ -967,7 +967,7 @@ static std::string RecurseImportData(const CScript& script, ImportData& import_d\n     }\n }\n \n-static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n+static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n {\n     UniValue warnings(UniValue::VARR);\n \n@@ -1038,6 +1038,7 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey \\\"\" + str + \"\\\" is not a valid public key\");\n         }\n         pubkey_map.emplace(pubkey.GetID(), pubkey);\n+        ordered_pubkeys.push_back(pubkey.GetID());\n     }\n     for (size_t i = 0; i < keys.size(); ++i) {\n         const auto& str = keys[i].get_str();\n@@ -1110,7 +1111,7 @@ static UniValue ProcessImportLegacy(ImportData& import_data, std::map<CKeyID, CP\n     return warnings;\n }\n \n-static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data)\n+static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID, CPubKey>& pubkey_map, std::map<CKeyID, CKey>& privkey_map, std::set<CScript>& script_pub_keys, bool& have_solving_data, const UniValue& data, std::vector<CKeyID>& ordered_pubkeys)\n {\n     UniValue warnings(UniValue::VARR);\n \n@@ -1144,22 +1145,25 @@ static UniValue ProcessImportDescriptor(ImportData& import_data, std::map<CKeyID\n \n     const UniValue& priv_keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n \n-    FlatSigningProvider out_keys;\n-\n     // Expand all descriptors to get public keys and scripts.\n     // TODO: get private keys from descriptors too\n     for (int i = range_start; i <= range_end; ++i) {\n+        FlatSigningProvider out_keys;\n         std::vector<CScript> scripts_temp;\n         parsed_desc->Expand(i, keys, scripts_temp, out_keys);\n         std::copy(scripts_temp.begin(), scripts_temp.end(), std::inserter(script_pub_keys, script_pub_keys.end()));\n-    }\n+        for (const auto& key_pair : out_keys.pubkeys) {\n+            ordered_pubkeys.push_back(key_pair.first);\n+        }\n \n-    for (const auto& x : out_keys.scripts) {\n-        import_data.import_scripts.emplace(x.second);\n+        for (const auto& x : out_keys.scripts) {\n+            import_data.import_scripts.emplace(x.second);\n+        }\n+\n+        std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n+        import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     }\n \n-    std::copy(out_keys.pubkeys.begin(), out_keys.pubkeys.end(), std::inserter(pubkey_map, pubkey_map.end()));\n-    import_data.key_origins.insert(out_keys.origins.begin(), out_keys.origins.end());\n     for (size_t i = 0; i < priv_keys.size(); ++i) {\n         const auto& str = priv_keys[i].get_str();\n         CKey key = DecodeSecret(str);\n@@ -1218,14 +1222,15 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         std::map<CKeyID, CPubKey> pubkey_map;\n         std::map<CKeyID, CKey> privkey_map;\n         std::set<CScript> script_pub_keys;\n+        std::vector<CKeyID> ordered_pubkeys;\n         bool have_solving_data;\n \n         if (data.exists(\"scriptPubKey\") && data.exists(\"desc\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Both a descriptor and a scriptPubKey should not be provided.\");\n         } else if (data.exists(\"scriptPubKey\")) {\n-            warnings = ProcessImportLegacy(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+            warnings = ProcessImportLegacy(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data, ordered_pubkeys);\n         } else if (data.exists(\"desc\")) {\n-            warnings = ProcessImportDescriptor(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data);\n+            warnings = ProcessImportDescriptor(import_data, pubkey_map, privkey_map, script_pub_keys, have_solving_data, data, ordered_pubkeys);\n         } else {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Either a descriptor or scriptPubKey must be provided.\");\n         }\n@@ -1247,25 +1252,28 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         for (const auto& entry : import_data.import_scripts) {\n             if (!pwallet->HaveCScript(CScriptID(entry)) && !pwallet->AddCScript(entry)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n+             }\n+         }\n+         for (const auto& entry : privkey_map) {\n+             const CKey& key = entry.second;\n+             CPubKey pubkey = key.GetPubKey();\n+             const CKeyID& id = entry.first;\n+             assert(key.VerifyPubKey(pubkey));\n+             pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n+             // If the private key is not present in the wallet, insert it.\n+             if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n+                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+             }\n+             pwallet->UpdateTimeFirstKey(timestamp);\n+         }\n+        for (const CKeyID& id : ordered_pubkeys) {\n+            auto entry = pubkey_map.find(id);\n+            if (entry == pubkey_map.end()) {\n+                continue;\n             }\n-        }\n-        for (const auto& entry : privkey_map) {\n-            const CKey& key = entry.second;\n-            CPubKey pubkey = key.GetPubKey();\n-            const CKeyID& id = entry.first;\n-            assert(key.VerifyPubKey(pubkey));\n-            pwallet->mapKeyMetadata[id].nCreateTime = timestamp;\n-            // If the private key is not present in the wallet, insert it.\n-            if (!pwallet->HaveKey(id) && !pwallet->AddKeyPubKey(key, pubkey)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-            }\n-            pwallet->UpdateTimeFirstKey(timestamp);\n-        }\n-        for (const auto& entry : pubkey_map) {\n-            const CPubKey& pubkey = entry.second;\n-            const CKeyID& id = entry.first;\n-            CPubKey temp;\n-            if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n+             const CPubKey& pubkey = entry->second;\n+             CPubKey temp;\n+             if (!pwallet->GetPubKey(id, temp) && !pwallet->AddWatchOnly(GetScriptForRawPubKey(pubkey), timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n             const auto& key_orig_it = import_data.key_origins.find(id);"
      },
      {
        "sha": "46e3ab77c85dd2f5c61abdb4c52ae60a38521fd9",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4b00b70e811d3772589ab3c64d7658f4dbdab69/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4b00b70e811d3772589ab3c64d7658f4dbdab69/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=f4b00b70e811d3772589ab3c64d7658f4dbdab69",
        "patch": "@@ -777,5 +777,30 @@ def run_test(self):\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], \"Keys can only be imported to the keypool when private keys are disabled\")\n \n+        # Make sure ranged imports import keys in order\n+        self.log.info('Key ranges should be imported in order')\n+        wrpc = self.nodes[1].get_wallet_rpc(\"noprivkeys\")\n+        assert_equal(wrpc.getwalletinfo()[\"keypoolsize\"], 0)\n+        assert_equal(wrpc.getwalletinfo()[\"private_keys_enabled\"], False)\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+        result = wrpc.importmulti(\n+            [{\n+                'desc': 'wpkh([80002067/0h/0h]' + xpub + '/*)',\n+                'keypool': True,\n+                'timestamp': 'now',\n+                'range' : {'start': 0, 'end': 4}\n+            }]\n+        )\n+        for i in range(0, 5):\n+            addr = wrpc.getnewaddress('', 'bech32')\n+            assert_equal(addr, addresses[i])\n+\n if __name__ == '__main__':\n     ImportMultiTest().main()"
      }
    ]
  }
]