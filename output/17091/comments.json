[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540478923",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-540478923",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
    "id": 540478923,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDQ3ODkyMw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-10T09:16:28Z",
    "updated_at": "2019-10-10T09:16:28Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, thanks.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540478923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540859045",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-540859045",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
    "id": 540859045,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0MDg1OTA0NQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-11T01:12:52Z",
    "updated_at": "2019-10-20T16:07:09Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17104](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17104.html) (build: `make dist` uses `git archive` by ch4ot1c)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/540859045/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545352646",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-545352646",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
    "id": 545352646,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTM1MjY0Ng==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T09:21:02Z",
    "updated_at": "2019-10-23T09:21:02Z",
    "author_association": "MEMBER",
    "body": "ACK 89339d14607434b33cfa343dc75877b62b1dfe0e",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545352646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545450071",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#issuecomment-545450071",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17091",
    "id": 545450071,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NTQ1MDA3MQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-23T13:42:33Z",
    "updated_at": "2019-10-23T13:42:33Z",
    "author_association": "MEMBER",
    "body": "Thanks. ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/545450071/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333413682",
    "pull_request_review_id": 299926684,
    "id": 333413682,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzQxMzY4Mg==",
    "diff_hunk": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
    "path": "test/functional/feature_loadblock.py",
    "position": null,
    "original_position": 61,
    "commit_id": "89339d14607434b33cfa343dc75877b62b1dfe0e",
    "original_commit_id": "b94959e1a1021ee13b6b6537b771e01e6908c058",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do you really need the `shell=True` here? The immediate problem is that the arguments aren't escaped, so this won't work with paths with spaces, or other characters in it. You could escape the args with `shlex.quote`, but in general, it's better to avoid the shell completely and use Python's stdin/stdout/stderr redirection.",
    "created_at": "2019-10-10T09:18:15Z",
    "updated_at": "2019-10-13T11:10:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333413682",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333413682"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333413682"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333413682/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511366",
    "pull_request_review_id": 300055796,
    "id": 333511366,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzUxMTM2Ng==",
    "diff_hunk": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
    "path": "test/functional/feature_loadblock.py",
    "position": null,
    "original_position": 61,
    "commit_id": "89339d14607434b33cfa343dc75877b62b1dfe0e",
    "original_commit_id": "b94959e1a1021ee13b6b6537b771e01e6908c058",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think there is no way around it since output redirect with `>` is a shell feature. I could not find a different way to achieve it. In a normal case I would have used Pythons output redirect but I wanted to simulate the use of the scripts exactly as described in the script's README. I guess one way to get rid of it would be to extend `linearize-hashes.py` to take an output parameter like `linearize-data.py` does. I could do this here or in a follow-up PR. ",
    "created_at": "2019-10-10T13:14:21Z",
    "updated_at": "2019-10-13T11:10:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511366",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511366"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511366"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511366/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 333413682
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511857",
    "pull_request_review_id": 300056443,
    "id": 333511857,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzUxMTg1Nw==",
    "diff_hunk": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
    "path": "test/functional/feature_loadblock.py",
    "position": null,
    "original_position": 61,
    "commit_id": "89339d14607434b33cfa343dc75877b62b1dfe0e",
    "original_commit_id": "b94959e1a1021ee13b6b6537b771e01e6908c058",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I added `quote` for now to make it more robust.",
    "created_at": "2019-10-10T13:15:19Z",
    "updated_at": "2019-10-13T11:10:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511857",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511857"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333511857"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333511857/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 333413682
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333541923",
    "pull_request_review_id": 300096727,
    "id": 333541923,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzU0MTkyMw==",
    "diff_hunk": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
    "path": "test/functional/feature_loadblock.py",
    "position": null,
    "original_position": 61,
    "commit_id": "89339d14607434b33cfa343dc75877b62b1dfe0e",
    "original_commit_id": "b94959e1a1021ee13b6b6537b771e01e6908c058",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "In python it is possible to capture the output in a string and then write it to a file",
    "created_at": "2019-10-10T14:09:20Z",
    "updated_at": "2019-10-13T11:10:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333541923",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333541923"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333541923"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333541923/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 333413682
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333542693",
    "pull_request_review_id": 300097715,
    "id": 333542693,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzU0MjY5Mw==",
    "diff_hunk": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
    "path": "test/functional/feature_loadblock.py",
    "position": null,
    "original_position": 61,
    "commit_id": "89339d14607434b33cfa343dc75877b62b1dfe0e",
    "original_commit_id": "b94959e1a1021ee13b6b6537b771e01e6908c058",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "or directly redirect the output to a file\r\n\r\nI am pretty sure we already do that in various places in our framework.",
    "created_at": "2019-10-10T14:10:35Z",
    "updated_at": "2019-10-13T11:10:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333542693",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333542693"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333542693"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333542693/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 333413682
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333589035",
    "pull_request_review_id": 300159460,
    "id": 333589035,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMzU4OTAzNQ==",
    "diff_hunk": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
    "path": "test/functional/feature_loadblock.py",
    "position": null,
    "original_position": 61,
    "commit_id": "89339d14607434b33cfa343dc75877b62b1dfe0e",
    "original_commit_id": "b94959e1a1021ee13b6b6537b771e01e6908c058",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Like this? https://github.com/bitcoin/bitcoin/blob/2a0164085b001a79b8d37b28751b115322124cfc/test/functional/test_runner.py#L506-L519",
    "created_at": "2019-10-10T15:29:56Z",
    "updated_at": "2019-10-13T11:10:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333589035",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333589035"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r333589035"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/333589035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 333413682
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334257430",
    "pull_request_review_id": 301026943,
    "id": 334257430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzNDI1NzQzMA==",
    "diff_hunk": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test loadblock option\n+\n+Test the option to start a node with the option loadblock which loads\n+a serialized blockchain from a file (usually called bootstrap.dat).\n+To generate that file this test uses the helper scripts available\n+in contrib/linearize.\n+\"\"\"\n+\n+import os\n+import subprocess\n+import urllib\n+\n+from test_framework.test_framework import (\n+    BitcoinTestFramework,\n+)\n+from test_framework.util import assert_equal, wait_until\n+\n+\n+class LoadblockTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+\n+    def run_test(self):\n+        self.nodes[1].setnetworkactive(state=False)\n+        self.nodes[0].generate(100)\n+\n+        # Parsing the url of our node to get settings for config file\n+        data_dir = self.nodes[0].datadir\n+        node_url = urllib.parse.urlparse(self.nodes[0].url)\n+        cfg_path = os.path.join(data_dir, \"linearize.cfg\")\n+        hashlist_path = os.path.join(data_dir, \"hashlist.txt\")\n+        bootstrap_file = os.path.join(self.options.tmpdir, \"bootstrap.dat\")\n+        genesis_block = self.nodes[0].getblockhash(0)\n+        block_dir = os.path.join(data_dir, \"regtest\", \"blocks\")\n+\n+        self.log.info(\"Create linearization config file\")\n+        with open(cfg_path, \"a\", encoding=\"utf-8\") as cfg:\n+            cfg.write(\"datadir={}\\n\".format(data_dir))\n+            cfg.write(\"rpcuser={}\\n\".format(node_url.username))\n+            cfg.write(\"rpcpassword={}\\n\".format(node_url.password))\n+            cfg.write(\"port={}\\n\".format(node_url.port))\n+            cfg.write(\"host={}\\n\".format(node_url.hostname))\n+            cfg.write(\"output_file={}\\n\".format(bootstrap_file))\n+            cfg.write(\"max_height=100\\n\")\n+            cfg.write(\"netmagic=fabfb5da\\n\")\n+            cfg.write(\"input={}\\n\".format(block_dir))\n+            cfg.write(\"genesis={}\\n\".format(genesis_block))\n+            cfg.write(\"hashlist={}\\n\".format(hashlist_path))\n+\n+        base_dir = self.config[\"environment\"][\"SRCDIR\"]\n+        linearize_dir = os.path.join(base_dir, \"contrib\", \"linearize\")\n+\n+        self.log.info(\"Run linearization of block hashes\")\n+        linearize_hashes_path = os.path.join(linearize_dir, \"linearize-hashes.py\")\n+        hashes_args = [linearize_hashes_path, cfg_path, \">\", hashlist_path]\n+        subprocess.run(\" \".join(hashes_args), shell=True).check_returncode()",
    "path": "test/functional/feature_loadblock.py",
    "position": null,
    "original_position": 61,
    "commit_id": "89339d14607434b33cfa343dc75877b62b1dfe0e",
    "original_commit_id": "b94959e1a1021ee13b6b6537b771e01e6908c058",
    "user": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Alright, I changed it do the output redirect in python now.",
    "created_at": "2019-10-13T00:06:41Z",
    "updated_at": "2019-10-13T11:10:02Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r334257430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334257430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17091#discussion_r334257430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17091"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/334257430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 62,
    "side": "RIGHT",
    "in_reply_to_id": 333413682
  }
]