[
  {
    "sha": "9247134eaba9a1d0fa74f22de238af1476663005",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjQ3MTM0ZWFiYTlhMWQwZmE3NGYyMmRlMjM4YWYxNDc2NjYzMDA1",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-06-11T05:40:14Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-06-12T05:21:03Z"
      },
      "message": "introduce a new StartShutdown() function, which starts a thread with Shutdown() if no GUI is used and calls uiInterface.QueueShutdown() if a GUI is used / all direct uiInterface.QueueShutdown() calls are replaced with Shutdown() - this ensures a clean GUI shutdown, even when catching a SIGTERM and allows the BitcoinGUI destructor to get called (which fixes a tray-icon issue and keeps the tray-icon until Bitcoin-Qt exits)",
      "tree": {
        "sha": "50a54aae174152f5a27f48c923d2124937331f43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50a54aae174152f5a27f48c923d2124937331f43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9247134eaba9a1d0fa74f22de238af1476663005",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9247134eaba9a1d0fa74f22de238af1476663005",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9247134eaba9a1d0fa74f22de238af1476663005",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9247134eaba9a1d0fa74f22de238af1476663005/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "883a310904b3d36c9d74b887d47c14a072ebae7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/883a310904b3d36c9d74b887d47c14a072ebae7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/883a310904b3d36c9d74b887d47c14a072ebae7d"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 25,
      "deletions": 16
    },
    "files": [
      {
        "sha": "8c3a615fd11f8534ed52dba61747a53415a42e59",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9247134eaba9a1d0fa74f22de238af1476663005/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9247134eaba9a1d0fa74f22de238af1476663005/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=9247134eaba9a1d0fa74f22de238af1476663005",
        "patch": "@@ -20,7 +20,7 @@\n #include <boost/iostreams/stream.hpp>\n #include <boost/algorithm/string.hpp>\n #include <boost/lexical_cast.hpp>\n-#include <boost/asio/ssl.hpp> \n+#include <boost/asio/ssl.hpp>\n #include <boost/filesystem/fstream.hpp>\n typedef boost::asio::ssl::stream<boost::asio::ip::tcp::socket> SSLStream;\n \n@@ -436,7 +436,7 @@ Value stop(const Array& params, bool fHelp)\n             \"stop\\n\"\n             \"Stop Bitcoin server.\");\n     // Shutdown will take long enough that the response should get back\n-    uiInterface.QueueShutdown();\n+    StartShutdown();\n     return \"Bitcoin server stopping\";\n }\n \n@@ -1148,7 +1148,7 @@ Value sendmany(const Array& params, bool fHelp)\n \n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(address.Get());\n-        int64 nAmount = AmountFromValue(s.value_); \n+        int64 nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -1524,7 +1524,7 @@ Value listtransactions(const Array& params, bool fHelp)\n         if ((int)ret.size() >= (nCount+nFrom)) break;\n     }\n     // ret is newest to oldest\n-    \n+\n     if (nFrom > (int)ret.size())\n         nFrom = ret.size();\n     if ((nFrom + nCount) > (int)ret.size())\n@@ -1935,7 +1935,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n     // BDB seems to have a bad habit of writing old data into\n     // slack space in .dat files; that is bad if the old data is\n     // unencrypted private keys.  So:\n-    uiInterface.QueueShutdown();\n+    StartShutdown();\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet\";\n }\n \n@@ -2682,7 +2682,7 @@ void ThreadRPCServer2(void* parg)\n                 GetConfigFile().string().c_str(),\n                 EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str()),\n             _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n-        uiInterface.QueueShutdown();\n+        StartShutdown();\n         return;\n     }\n \n@@ -2703,7 +2703,7 @@ void ThreadRPCServer2(void* parg)\n     {\n         uiInterface.ThreadSafeMessageBox(strprintf(_(\"An error occured while setting up the RPC port %i for listening: %s\"), endpoint.port(), e.what()),\n                              _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n-        uiInterface.QueueShutdown();\n+        StartShutdown();\n         return;\n     }\n "
      },
      {
        "sha": "08b594f56c057a0c8e97841969bf0d132df002da",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9247134eaba9a1d0fa74f22de238af1476663005/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9247134eaba9a1d0fa74f22de238af1476663005/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9247134eaba9a1d0fa74f22de238af1476663005",
        "patch": "@@ -38,6 +38,17 @@ void ExitTimeout(void* parg)\n #endif\n }\n \n+void StartShutdown()\n+{\n+#ifdef QT_GUI\n+    // ensure we leave the Qt main loop for a clean GUI exit (Shutdown() is called in bitcoin.cpp afterwards)\n+    uiInterface.QueueShutdown();\n+#else\n+    // Without UI, Shutdown() can simply be started in a new thread\n+    CreateThread(Shutdown, NULL);\n+#endif\n+}\n+\n void Shutdown(void* parg)\n {\n     static CCriticalSection cs_Shutdown;\n@@ -66,7 +77,10 @@ void Shutdown(void* parg)\n         Sleep(50);\n         printf(\"Bitcoin exited\\n\\n\");\n         fExit = true;\n+#ifndef QT_GUI\n+        // ensure non UI client get's exited here, but let Bitcoin-Qt reach return 0; in bitcoin.cpp\n         exit(0);\n+#endif\n     }\n     else\n     {"
      },
      {
        "sha": "8308ee648bcc0cfc372dfe651e1d116c5cdaa1ac",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9247134eaba9a1d0fa74f22de238af1476663005/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9247134eaba9a1d0fa74f22de238af1476663005/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=9247134eaba9a1d0fa74f22de238af1476663005",
        "patch": "@@ -9,6 +9,7 @@\n \n extern CWallet* pwalletMain;\n \n+void StartShutdown();\n void Shutdown(void* parg);\n bool AppInit2();\n std::string HelpMessage();"
      },
      {
        "sha": "fa3eb592a998159a7184932ad05c37455727d6f3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9247134eaba9a1d0fa74f22de238af1476663005/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9247134eaba9a1d0fa74f22de238af1476663005/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9247134eaba9a1d0fa74f22de238af1476663005",
        "patch": "@@ -1875,7 +1875,7 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n         uiInterface.ThreadSafeMessageBox(strMessage, \"Bitcoin\", CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n-        uiInterface.QueueShutdown();\n+        StartShutdown();\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "804cb0f5439cca0ecdbf3d3c8a71a20856ce6297",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9247134eaba9a1d0fa74f22de238af1476663005/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9247134eaba9a1d0fa74f22de238af1476663005/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9247134eaba9a1d0fa74f22de238af1476663005",
        "patch": "@@ -1658,7 +1658,7 @@ void ThreadMessageHandler2(void* parg)\n         vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n         Sleep(100);\n         if (fRequestShutdown)\n-            Shutdown(NULL);\n+            StartShutdown();\n         vnThreadsRunning[THREAD_MESSAGEHANDLER]++;\n         if (fShutdown)\n             return;"
      },
      {
        "sha": "db25f2d28504b2fafe8f64b99d0577431bbb1b59",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9247134eaba9a1d0fa74f22de238af1476663005/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9247134eaba9a1d0fa74f22de238af1476663005/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=9247134eaba9a1d0fa74f22de238af1476663005",
        "patch": "@@ -20,16 +20,9 @@ static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCapt\n     return true;\n }\n \n-static void noui_QueueShutdown()\n-{\n-    // Without UI, Shutdown can simply be started in a new thread\n-    CreateThread(Shutdown, NULL);\n-}\n-\n void noui_connect()\n {\n     // Connect bitcoind signal handlers\n     uiInterface.ThreadSafeMessageBox.connect(noui_ThreadSafeMessageBox);\n     uiInterface.ThreadSafeAskFee.connect(noui_ThreadSafeAskFee);\n-    uiInterface.QueueShutdown.connect(noui_QueueShutdown);\n }"
      },
      {
        "sha": "8c8c73f0655c5d53ed2d1c3e7d7731d34813e864",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9247134eaba9a1d0fa74f22de238af1476663005/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9247134eaba9a1d0fa74f22de238af1476663005/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=9247134eaba9a1d0fa74f22de238af1476663005",
        "patch": "@@ -290,6 +290,7 @@ int main(int argc, char *argv[])\n                 window.setWalletModel(0);\n                 guiref = 0;\n             }\n+            // Shutdown the core and it's threads, but don't exit Bitcoin-Qt here\n             Shutdown(NULL);\n         }\n         else"
      }
    ]
  }
]