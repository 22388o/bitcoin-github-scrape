jonasschnelli,2017-08-14T10:27:21Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-322155803,322155803,
TheBlueMatt,2017-08-14T14:45:33Z,"This may make #10692 a bit simpler, though I'm not sure it matters what order they come in.",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-322210067,322210067,
promag,2017-08-15T15:37:16Z,Fixed bug and rebased.,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-322503789,322503789,
promag,2017-08-22T14:56:47Z,@laanwj I believe it's ready.,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-324052747,324052747,
laanwj,2017-08-22T15:49:20Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-324069155,324069155,
promag,2017-08-25T14:38:45Z,Rebased and fixed @MeshCollider comment.,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-324939734,324939734,
promag,2017-11-02T16:39:26Z,"Thanks @ryanofsky, I have to rebase and then I'll take into account your comment above.",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-341482401,341482401,
promag,2017-12-06T23:39:19Z,"This needs rebase. I can do it and adapt the new code if there is interest in merging it quick.\n\nMaybe it should also make `BlockMap mapBlockIndex` static?\n\ncc @MarcoFalke @laanwj",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-349811860,349811860,
TheBlueMatt,2017-12-12T15:42:26Z,Concept ACK. Would like to see this rebased sooner rather than later.,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-351089901,351089901,
promag,2017-12-13T15:42:44Z,Forgot to tackle @ryanofsky [comment](https://github.com/bitcoin/bitcoin/pull/11041#discussion_r148586107) above..,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-351429645,351429645,
MarcoFalke,2017-12-13T19:00:00Z,"travis failure:\n\n```\nAssertion failed: lock cs_main not held in ./validation.h:433; locks held:\n\n```",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-351488544,351488544,
promag,2017-12-14T11:30:03Z,"> I think it would be preferable to use const CBlockIndex* where it's possible\n\nAgree.\n\n> There are some cs_main locking changes; can you please explain them? Were locks missing there before, making this a bugfix as well as refactor?\n\nYes, for instance `FindForkInGlobalIndex`.\n\nI'll check if adding annotations helps identifying more missing locks. I'll update accordingly.",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-351685379,351685379,
TheBlueMatt,2017-12-14T15:52:50Z,re: const CBlockIndex (and associated things): see #10692.,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-351750863,351750863,
promag,2018-01-15T15:30:08Z,"> Again, please do not use LookupBlockIndex here (and a few other places).\n\nAs requested, last commit reverts changes to `CChainState`. Please review.",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-357714509,357714509,
promag,2018-02-05T22:30:08Z,Thanks @ryanofsky.,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-363243529,363243529,
promag,2018-03-06T19:30:40Z,"Rebased.\n\n@kallewoof why drop `const` qualifier?",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-370899472,370899472,
kallewoof,2018-03-06T19:41:52Z,"@promag Sorry, I only meant ""move the `*`""",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-370903133,370903133,
promag,2018-03-06T19:52:35Z,"@kallewoof no problem, done.",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-370906413,370906413,
kallewoof,2018-03-06T19:57:07Z,utACK 92fabcd,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-370907962,370907962,
ryanofsky,2018-03-12T21:29:12Z,"utACK 92fabcd443322dcfdf2b3477515fae79e8647d86. No changes since last review except rebase and squash.\n",https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-372468972,372468972,
rebroad,2021-05-11T10:23:48Z,@promag What's the reason for avoiding mapBlockIndex lookups?,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-838225751,838225751,
promag,2021-05-11T12:05:05Z,@rebroad it avoids duplicate lookups - its unnecessary work.,https://github.com/bitcoin/bitcoin/pull/11041#issuecomment-838355450,838355450,
promag,2017-08-13T17:39:50Z,!pblockindex,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r132848026,132848026,src/rest.cpp
promag,2017-08-13T17:40:23Z,Same as above.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r132848037,132848037,src/rpc/blockchain.cpp
promag,2017-08-13T17:40:52Z,Remove assert.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r132848061,132848061,src/rpc/blockchain.cpp
meshcollider,2017-08-23T01:20:42Z,Maybe explicit cast to bool here for clarity,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r134638513,134638513,src/net_processing.cpp
promag,2017-08-23T03:26:10Z,"Prefer this?\n```cpp\nreturn LookupBlockIndex(inv.hash) != nullptr;\n```",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r134649948,134649948,src/net_processing.cpp
meshcollider,2017-08-23T04:33:37Z,Yeah or a ternary or even an if statement would be a lot clearer,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r134655245,134655245,src/net_processing.cpp
promag,2017-10-30T14:45:15Z,Missing assert lock is held.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r147724360,147724360,src/validation.h
practicalswift,2017-10-30T19:25:44Z,Missing `EXCLUSIVE_LOCKS_REQUIRED(cs_main)` too :-),https://github.com/bitcoin/bitcoin/pull/11041#discussion_r147808975,147808975,src/validation.h
ryanofsky,2017-11-02T16:25:59Z,"In some of these places you could do \n\n```c++\nif (const CBlockIndex* pindex = LookupBlockIndex(wtx.hashBlock))\n```\n\nto reduce the scope of the pindex variables.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r148586107,148586107,src/wallet/wallet.cpp
jimpo,2017-12-06T23:13:36Z,Need to keep the `!mapBlockIndex.empty()`.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r155389796,155389796,src/init.cpp
jimpo,2017-12-06T23:17:43Z,Needs a `!`,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r155390546,155390546,src/net_processing.cpp
laanwj,2017-12-14T10:46:02Z,const?,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156909940,156909940,src/qt/transactionrecord.cpp
laanwj,2017-12-14T10:49:31Z,`const CBlockIndex*`?,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156910767,156910767,src/rpc/blockchain.cpp
laanwj,2017-12-14T10:50:39Z,"Another one that could be const. There are more, but I'll stop commenting every one.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156910997,156910997,src/rpc/blockchain.cpp
TheBlueMatt,2017-12-14T16:04:56Z,"I dont think that is the type of const you meant. Probably just leave it non-const for now and I'll fix it up in #10692 (or you can start pulling stuff out of there into this PR if you prefer, but that probably just ends up taking more time).",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156985799,156985799,src/checkpoints.cpp
TheBlueMatt,2017-12-14T16:06:34Z,This seems unrelated. Maybe leave it for #11596 instead? Or just do as I suggested at https://github.com/bitcoin/bitcoin/pull/11596#discussion_r155811677 and put a cs_main at the top of the load-chain-data block here.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156986317,156986317,src/init.cpp
TheBlueMatt,2017-12-14T16:25:24Z,"Looks like you're just adding this for CreateWalletFromFile, which already needs cs_main (and is missing it there). This should be an AssertLockHeld.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156992080,156992080,src/validation.cpp
TheBlueMatt,2017-12-14T16:26:29Z,Dunno if its worth bothering for things in CChainState. The whole goal here is to make mapBlockIndex a private in CChainState and expose LookupBlockIndex externally.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156992400,156992400,src/validation.cpp
TheBlueMatt,2017-12-14T16:36:38Z,"This should absolutely be an AssertLockHeld, if anything. If you add the LOCK(cs_main) in the block-index-loading code in init.cpp this should be able to go away.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156995634,156995634,src/validation.cpp
TheBlueMatt,2017-12-14T16:37:18Z,Same here. Can go away with an init.cpp LOCK(cs_main).,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r156995817,156995817,src/validation.cpp
promag,2017-12-17T00:55:00Z,Do we want to lock that long?,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157355249,157355249,src/validation.cpp
promag,2017-12-17T00:56:47Z,And why does `CreateWalletFromFile` needs `cs_main`?,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157355270,157355270,src/validation.cpp
TheBlueMatt,2017-12-17T05:15:36Z,"Hmm, there was some discussion of this in some other PR recently, maybe a @practicalswift PR? In any case, there are a number of things in CreateWalletFromFile that need cs_main (though possibly we want to avoid it and just take it for parts to avoid cs_main during the rescan after #11281), eg chainActive.GetLocator(), chainActive.Genesis (maybe not technically, but probably), FindForkInGlobalInde",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157357731,157357731,src/validation.cpp
TheBlueMatt,2017-12-17T05:17:29Z,"It doesnt matter, its early in init long before anything else is going to take cs_main, so taking it should have no impact.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157357753,157357753,src/validation.cpp
promag,2017-12-17T10:04:33Z,It's needed for the assert below (L1502).,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157363805,157363805,src/init.cpp
promag,2017-12-17T10:11:09Z,"I'd prefer to avoid special cases for now. Eventually `LookupBlockIndex` will loose `inline`, so do it then?",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157363935,157363935,src/validation.cpp
promag,2017-12-17T10:16:32Z,"I don't think so, this can be called from RPC. Also, below there is  `ReadBlockFromDisk` and we want to avoid cs_main lock there right?",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157364039,157364039,src/validation.cpp
TheBlueMatt,2017-12-17T19:41:00Z,Looks like you can remove this line now?,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157377812,157377812,src/init.cpp
TheBlueMatt,2017-12-17T19:54:05Z,nit: bad spacing here.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157378108,157378108,src/validation.cpp
TheBlueMatt,2017-12-17T19:55:21Z,"For cases where we are fine with a const CBlockIndex* result, I dont think it matters much, but I'd kinda like to have LookupBlockIndex only return const CBlockIndex*es, so for things like CChainState::AddToBlockIndex, we'd have to partially revert this change then, easier to not do it in the first place IMO.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157378131,157378131,src/validation.cpp
TheBlueMatt,2017-12-17T19:59:49Z,"Hmm, this is gonna conflict partially with #11281. The neccessary refactors seem somewhat unrelated, so I'd be fine with pushing the conflict resolution onto #11281, but if #11281 lands first this is gonna need a bit of tweaking...up to you if you want to do it now.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r157378244,157378244,src/wallet/wallet.cpp
promag,2018-01-03T02:13:55Z,"> have LookupBlockIndex only return const CBlockIndex*es\n\nIf you look closely you will see that a lot of function signatures require non-const `CBlockIndex*`, although a const should do the work (almost?) everywhere. I'm happy to do that in a follow up and deal with the non-const cases there. At least this PR is *complete*.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r159353223,159353223,src/validation.cpp
TheBlueMatt,2018-01-11T18:08:10Z,This should be in a separate commit.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161032172,161032172,src/init.cpp
TheBlueMatt,2018-01-11T18:24:33Z,This could go in a separate commit.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161036192,161036192,src/validation.cpp
TheBlueMatt,2018-01-11T18:26:17Z,"Making everything const isnt so hard, see #10692, which did it mostly in scripted-diffs.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161036661,161036661,src/validation.cpp
TheBlueMatt,2018-01-11T18:27:19Z,"Again, please do not use LookupBlockIndex here (and a few other places). If the next step is to make LookupBlockIndex return a const CBlockIndex* (which I think it clearly is), this part of the patch just has to get reverted. There is no reason to avoid using mapBlockIndex in CChainState members, that's what CChainState is there for :).",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161036940,161036940,src/validation.cpp
promag,2018-01-11T23:50:14Z,"> There is no reason to avoid using mapBlockIndex in CChainState members, that's what CChainState is there for\n\nAt that point there can be `CBlockIndex* CChainState::LookupBlockIndex()`?",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161108308,161108308,src/validation.cpp
promag,2018-01-12T01:00:20Z,Done.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161117840,161117840,src/init.cpp
promag,2018-01-12T01:00:23Z,Done.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161117847,161117847,src/validation.cpp
TheBlueMatt,2018-01-14T18:42:14Z,"Why? I see no reason to have a LookupBlockIndex at all *except* to avoid exposing mapBlockIndex/non-const CBlockIndexes outside of CChainState/validation.cpp. If we're inside of CChainState, doing a LookupBlockIndex only serves to add needless indirection.",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r161406243,161406243,src/validation.cpp
kallewoof,2018-03-06T18:59:01Z,Nit: `CBlockIndex* pindex`,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r172623597,172623597,src/rpc/mining.cpp
kallewoof,2018-03-06T18:59:08Z,Nit: `CBlockIndex* pindex`,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r172623642,172623642,src/rpc/mining.cpp
kallewoof,2018-03-06T18:59:33Z,Nit: `CBlockIndex* pindex`,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r172623750,172623750,src/rpc/mining.cpp
kallewoof,2018-03-06T19:05:38Z,I didn't know you could declare inside an if statement. Cool.,https://github.com/bitcoin/bitcoin/pull/11041#discussion_r172625597,172625597,src/wallet/wallet.cpp
ryanofsky,2018-03-13T22:29:32Z,"I think this new lock is causing test failures on master. If I run\n\n```\n./configure --enable-debug\nmake -j12 -C src test/test_bitcoin && src/test/test_bitcoin --log_level=test_suite --run_test=wallet_tests/ComputeTimeSmart\n```\n\nI see:\n\n```\nEntering test case ""ComputeTimeSmart""\ntest_bitcoin: sync.cpp:100: void potential_deadlock_detected(const std::pair<void*, void*>&, const L",https://github.com/bitcoin/bitcoin/pull/11041#discussion_r174305214,174305214,src/wallet/wallet.cpp
