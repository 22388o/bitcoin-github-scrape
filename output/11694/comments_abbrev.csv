practicalswift,2017-11-15T15:23:15Z,"@luke-jr @promag, would you mind reviewing this revised version? :-)",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-344626045,344626045,
promag,2017-11-15T16:11:56Z,Restarted travis job.,https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-344642334,344642334,
luke-jr,2017-11-15T16:43:37Z,"The whole point of csBestBlock was that we shouldn't need cs_main to simply check the best block. It looks like the logic for that got lost somewhere, and I'm not sure we're even safe from races anymore. :(\n\nSuggest instead of this, fixing csBestBlock so it is sufficient/works.",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-344652882,344652882,
practicalswift,2017-11-15T16:45:06Z,@promag Now using a lambda to keep it DRY - please re-review :-),https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-344653344,344653344,
practicalswift,2017-11-21T19:08:55Z,"@luke-jr Do you mean that fixing this make things worse? If so, please describe why :-)\n\nI'm not familiar with the `csBestBlock` issue you are describing, so I'm afraid I'll have to leave fixing that to someone else :-)",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-346129546,346129546,
practicalswift,2017-11-30T08:32:04Z,Pinging @luke-jr :-),https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-348117755,348117755,
TheBlueMatt,2017-12-04T17:58:51Z,"No reason to wait on a ""better fix"" before merging this. Lets just merge and then @luke-jr can fix it in the way he wants in a cleanup follow-up.\n\nutACK 6e65f35f23337cf0b284acb2bb2ec038ae83aeca",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-349047928,349047928,
theuni,2017-12-04T18:42:33Z,I agree with @luke-jr on this one. I'd rather fix it to use csBestBlock properly than waste the time figuring out the possible impact of locking cs_main in the loop.,https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-349062038,349062038,
TheBlueMatt,2017-12-04T18:45:25Z,"@theuni i find the current code relatively readable, and I'm really not at all sure what ""fixing csBestBlock"" means, given a condition variable is allowed to wake up spuriously whenever it wants.",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-349063020,349063020,
theuni,2017-12-04T19:06:15Z,"@TheBlueMatt as @luke-jr mentioned, presumably cvBlockChange was at one point paired with a uint256 reflecting the miner's best known hash, which at some point got removed. We shouldn't need to take cs_main to check whether the new tip matches the cached one.\n\n",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-349070425,349070425,
practicalswift,2017-12-04T19:28:27Z,"If the scope of this grows beyond this PR's goal of fixing the missing `cs_main` lock I'm afraid I'll have to leave that for others to fix. Let me know when a fix for the issue described by @luke-jr is available and I'll close this PR.\n\nIf that is something that is unlikely to happen soon I'd vote for merging this fix while waiting for a future better fix.",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-349077835,349077835,
TheBlueMatt,2017-12-04T19:53:07Z,"@theuni ""fixing"" cvBlockChanged/csBestBlock probably means wholesale removing it and replacing it with appropriate event listeners, but for that, I think, we (realistically) need to beef up the infrastructure behind CValidationInterface so that we dont end up with wallet or other things blocking each other just because they're all on the validation interface (or add some new interface for this stu",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-349085011,349085011,
theuni,2017-12-04T20:15:37Z,"Ok, since we re-lock cs_main before returning anyway, and since cs_main being locked for any notable period of time after a legitimate cvBlockChange notification would likely indicate a rapid 2nd block anyway, I suppose no regressions would be introduced.\n\nSo, -0 to 6e65f35f23337cf0b284acb2bb2ec038ae83aeca. Looks correct to fix the unguarded access.",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-349091379,349091379,
practicalswift,2018-03-14T20:02:06Z,Any chance of getting this merged? :-),https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-373155836,373155836,
practicalswift,2018-03-14T22:26:00Z,"@promag Good suggestion. Please re-review!\n\n@TheBlueMatt @theuni Would you mind re-reviewing in light of the latest commit? :-)",https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-373195606,373195606,
sipa,2018-03-21T04:06:39Z,Here is an alternative: #12743,https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-374829288,374829288,
practicalswift,2018-03-21T07:09:11Z,Closing in favour of #12743 which is a better alternative :-),https://github.com/bitcoin/bitcoin/pull/11694#issuecomment-374849379,374849379,
promag,2017-11-15T15:29:25Z,"My suggestion is to create a function like:\n```cpp\nbool KeepRunning() {\n    LOCK(cs_main);\n    assert(chainActive.Tip());\n    return chainActive.Tip()->GetBlockHash() == hashWatchedChain && IsRPCRunning();\n}\n```\nAnd here just:\n```cpp\nwhile (KeepRunning()) {\n    ...\n}\n```",https://github.com/bitcoin/bitcoin/pull/11694#discussion_r151159309,151159309,src/rpc/mining.cpp
promag,2018-03-14T21:00:34Z,"Sorry but how about plain code?\n```cpp\nwhile (IsRPCRunning()) {\n    {\n        LOCK(cs_main);\n        if (chainActive.Tip()->GetBlockHash() != hashWatchedChain) break;\n    }\n    ...\n```\n   \n",https://github.com/bitcoin/bitcoin/pull/11694#discussion_r174608456,174608456,src/rpc/mining.cpp
promag,2018-03-14T21:09:49Z,"I would drop the assert, otherwise should we add all over where tip is used?",https://github.com/bitcoin/bitcoin/pull/11694#discussion_r174611185,174611185,src/rpc/mining.cpp
