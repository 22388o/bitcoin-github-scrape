DrahtBot,2021-05-13 15:24:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #22500 by MarcoFalke\n* #22498 by MarcoFalke\n* #21129 by vasild\n* #20233 by jnewbery\n\nIf you consider this pull reques",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-840636294,840636294,
MarcoFalke,2021-05-22 07:39:37,Rebased,https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-846369502,846369502,
MarcoFalke,2021-06-14 07:25:47,Rebased and added one commit,https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-860450764,860450764,
MarcoFalke,2021-07-21 14:03:59,Force pushed to add comment,https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-884215996,884215996,
MarcoFalke,2021-07-21 14:05:33,"> Can GetAddr() also be made const?\n\nIt already is. (Adjusted title)",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-884217236,884217236,
sipa,2021-07-22 18:08:53,"Concept ACK. Perhaps this deserves a comment in addrman.h though, to state that even `const` member functions cannot be used without synchronization?",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-885126653,885126653,
MarcoFalke,2021-07-22 18:41:49,"Added a lock annotation to the mutable member, which can be ""read"" by compilers and developers",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-885147360,885147360,
jnewbery,2021-07-23 10:05:45,Code review ACK fae108ceb53f61d7338ba205873623ede3c1d3be,https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-885534621,885534621,
MarcoFalke,2021-07-29 11:06:46,@promag or @theStack interested in donating a re-ACK?,https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-889025193,889025193,
jonatack,2021-08-02 11:07:48,"Did any of the reviewers test this change with DEBUG_ADDRMAN defined? It blows up for me.\n\n```\naddrman.cpp:467:15: error: out-of-line definition of 'Check_' does not match any declaration in 'CAddrMan'\nint CAddrMan::Check_()\n              ^~~~~~\n./addrman.h:746:9: note: member declaration does not match because it is const qualified\n    int Check_() const EXCLUSIVE_LOCKS_REQUIRED(cs)",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-890937517,890937517,
MarcoFalke,2021-08-02 11:11:17,"@jonatack Good catch. I didn't test this with the CPP flag set and CI doesn't either.\n\nLuckily the code will be always compiled after #20233, so shouldn't happen again after that pull is merged.",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-890939675,890939675,
jnewbery,2021-08-02 11:44:41,Thanks @jonatack. I'm currently rebasing #20233 and will include a fix for this issue in that PR.,https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-890959158,890959158,
jonatack,2021-08-02 11:51:54,"> Thanks @jonatack. I'm currently rebasing #20233 and will include a fix for this issue in that PR.\n\nThanks!",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-890962918,890962918,
MarcoFalke,2021-08-02 12:29:01,"I created a fix in #22601 , because I didn't see the comment here.",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-890986019,890986019,
jonatack,2021-08-02 12:34:04,"Thanks, in the meantime will cherry-pick this commit locally.",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-890988880,890988880,
theStack,2021-08-02 16:10:56,"> Did any of the reviewers test this change with DEBUG_ADDRMAN defined? It blows up for me.\n\nOops, no, I didn't :( thanks for catching this.\n\nWould it make sense to have a CI instance with DEBUG_ADDRMAN defined or is that overambitious? ðŸ¤” \n\n\n",https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-891149889,891149889,
jnewbery,2021-08-02 16:49:32,@theStack please see #20233 which removes the `DEBUG_ADDRMAN` build option and makes consistency checks a runtime option.,https://github.com/bitcoin/bitcoin/pull/21940#issuecomment-891175364,891175364,
jonatack,2021-05-14 10:28:02,"Here and line 383 above and 506 below, apparently using `auto` with `{}` can lead to surprising results and it's recommended to use `=` rather than `{}` for objects specified with `auto` when we don't mean a list (at least, for C++11 per my Stroustrup book, not sure if it changed since in 14 or 17, on first skim of https://en.cppreference.com/w/cpp/language/auto I didn't see a change).",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r632436365,632436365,src/addrman.cpp
MarcoFalke,2021-05-14 10:42:11,"Mind to share an example to illustrate the ""surprise""?",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r632443380,632443380,src/addrman.cpp
jonatack,2021-05-14 10:49:33,"![image](https://user-images.githubusercontent.com/2415484/118260513-f3ec0e00-b4a1-11eb-95e7-8c1423580760.jpeg)\n\n![image](https://user-images.githubusercontent.com/2415484/118260555-00706680-b4a2-11eb-8a95-6f8d85e52d9d.jpeg)\n\n(afk, sent from phone)",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r632446856,632446856,src/addrman.cpp
MarcoFalke,2021-05-14 11:02:53,"See https://en.cppreference.com/w/cpp/language/template_argument_deduction#auto_type_deduction\n\nAlso, if this was a list, the code wouldn't compile.",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r632453191,632453191,src/addrman.cpp
jonatack,2021-05-14 11:07:41,"Thanks for the link. Seems it changed from 2014: https://isocpp.org/blog/2014/03/n3922, IIUC.",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r632455415,632455415,src/addrman.cpp
jonatack,2021-05-14 11:09:46,"""For direct list-initialization:\n\n    For a braced-init-list with only a single element, auto deduction will deduce from that entry;\n    For a braced-init-list with more than one element, auto deduction will be ill-formed.""\n",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r632456446,632456446,src/addrman.cpp
jnewbery,2021-07-20 10:44:14,"Perhaps comment _why_ this can be mutable. `vRandom` is unobservable outside the addrman class, so any changes to it are also unobservable (and hence it can be mutated in const methods).",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r673010967,673010967,src/addrman.h
MarcoFalke,2021-07-21 14:03:46,"Thanks, done",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r674003219,674003219,src/addrman.h
jnewbery,2021-07-23 08:53:55,"An alternative to changing all of these `[]` operator calls to `find()` is to use the `at()` method, which is const. See https://en.cppreference.com/w/cpp/container/map/operator_at:\n\n> operator[] is non-const because it inserts the key if it doesn't exist. If this behavior is undesirable or if the container is const, at() may be used.",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675406548,675406548,src/addrman.cpp
jnewbery,2021-07-23 09:01:17,"I don't really like changing all of addrman's private members to be protected. Since this is just to allow the tests to modify `nKey` and `insecure_rand`, what do you think about instead adding a `bool deterministic` argument to `CAddrMan`'s ctor (similar to the `deterministic` argument in `TxRequestTracker::TxRequestTracker`).",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675410998,675410998,src/addrman.h
MarcoFalke,2021-07-23 09:05:20,I'll leave that behaviour change (Replacing `assert` with `throw`) for a follow-up,https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675413402,675413402,src/addrman.cpp
MarcoFalke,2021-07-23 09:08:15,Is there any risk allowing the unit tests access? Happy to add `private` back (after the Mutex) if you think it helps.,https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675415382,675415382,src/addrman.h
jnewbery,2021-07-23 09:10:34,"It's not a behavior change - the code is already asserting that `count(nId1)` and `count(nId2)` are non-zero, done under the `cs` lock so the map can't change from under us.",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675416828,675416828,src/addrman.cpp
jnewbery,2021-07-23 09:11:02,"Yeah, I'd prefer for `private` to be added after the mutex to minimize the change.",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675417111,675417111,src/addrman.h
MarcoFalke,2021-07-23 09:15:31,"Obviously it doesn't matter here, but one lookup might be faster than two lookups, which is why I changed to `find`.",https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675419854,675419854,src/addrman.cpp
jnewbery,2021-07-23 09:29:47,Sure. Just a suggestion to minimize the diff (+2/-2 instead of +6/-4 here and similar in other places).,https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675428054,675428054,src/addrman.cpp
MarcoFalke,2021-07-23 09:36:10,Force pushed to add `private`,https://github.com/bitcoin/bitcoin/pull/21940#discussion_r675431708,675431708,src/addrman.h
