[
  {
    "sha": "b59b4504abf96cec860badfed2ac793ae5d40ced",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTliNDUwNGFiZjk2Y2VjODYwYmFkZmVkMmFjNzkzYWU1ZDQwY2Vk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T19:51:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-01T22:46:00Z"
      },
      "message": "have GenerateNewKey and DeriveNewChildKey take a CHDChain as an argument",
      "tree": {
        "sha": "4d5d377b2cec515921f0bf263ba2f9edd9f1ad6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d5d377b2cec515921f0bf263ba2f9edd9f1ad6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b59b4504abf96cec860badfed2ac793ae5d40ced",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b59b4504abf96cec860badfed2ac793ae5d40ced",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b59b4504abf96cec860badfed2ac793ae5d40ced",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b59b4504abf96cec860badfed2ac793ae5d40ced/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/844d2070a2c0106bb7a54be5cad7d4da4d9cd55e"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "2b5522ece28dc3c0a27e3e69c7f53bf53147f071",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b59b4504abf96cec860badfed2ac793ae5d40ced/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b59b4504abf96cec860badfed2ac793ae5d40ced/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b59b4504abf96cec860badfed2ac793ae5d40ced",
        "patch": "@@ -357,7 +357,7 @@ bool LegacyScriptPubKeyMan::SetupGeneration(bool force)\n \n bool LegacyScriptPubKeyMan::IsHDEnabled() const\n {\n-    return !hdChain.seed_id.IsNull();\n+    return !m_hd_chain.seed_id.IsNull();\n }\n \n bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal) const\n@@ -842,7 +842,7 @@ void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n     if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n         throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n \n-    hdChain = chain;\n+    m_hd_chain = chain;\n }\n \n bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n@@ -921,7 +921,7 @@ bool LegacyScriptPubKeyMan::GetPubKey(const CKeyID &address, CPubKey& vchPubKeyO\n     return GetWatchPubKey(address, vchPubKeyOut);\n }\n \n-CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n+CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, CHDChain& hd_chain, bool internal)\n {\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n     assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET));\n@@ -936,7 +936,7 @@ CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n \n     // use HD key derivation if HD was enabled during wallet creation and a seed is present\n     if (IsHDEnabled()) {\n-        DeriveNewChildKey(batch, metadata, secret, (m_storage.CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n+        DeriveNewChildKey(batch, metadata, secret, hd_chain, (m_storage.CanSupportFeature(FEATURE_HD_SPLIT) ? internal : false));\n     } else {\n         secret.MakeNewKey(fCompressed);\n     }\n@@ -960,7 +960,7 @@ CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, bool internal)\n \n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n-void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal)\n+void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, CHDChain& hd_chain, bool internal)\n {\n     // for now we use a fixed keypath scheme of m/0'/0'/k\n     CKey seed;                     //seed (256bit)\n@@ -970,7 +970,7 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n     CExtKey childKey;              //key at m/0'/0'/<n>'\n \n     // try to get the seed\n-    if (!GetKey(hdChain.seed_id, seed))\n+    if (!GetKey(hd_chain.seed_id, seed))\n         throw std::runtime_error(std::string(__func__) + \": seed not found\");\n \n     masterKey.SetSeed(seed.begin(), seed.size());\n@@ -989,29 +989,29 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n         // childIndex | BIP32_HARDENED_KEY_LIMIT = derive childIndex in hardened child-index-range\n         // example: 1 | BIP32_HARDENED_KEY_LIMIT == 0x80000001 == 2147483649\n         if (internal) {\n-            chainChildKey.Derive(childKey, hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/1'/\" + ToString(hdChain.nInternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/1'/\" + ToString(hd_chain.nInternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(1 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nInternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nInternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nInternalChainCounter++;\n         }\n         else {\n-            chainChildKey.Derive(childKey, hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.hdKeypath = \"m/0'/0'/\" + ToString(hdChain.nExternalChainCounter) + \"'\";\n+            chainChildKey.Derive(childKey, hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            metadata.hdKeypath = \"m/0'/0'/\" + ToString(hd_chain.nExternalChainCounter) + \"'\";\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n             metadata.key_origin.path.push_back(0 | BIP32_HARDENED_KEY_LIMIT);\n-            metadata.key_origin.path.push_back(hdChain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n-            hdChain.nExternalChainCounter++;\n+            metadata.key_origin.path.push_back(hd_chain.nExternalChainCounter | BIP32_HARDENED_KEY_LIMIT);\n+            hd_chain.nExternalChainCounter++;\n         }\n     } while (HaveKey(childKey.key.GetPubKey().GetID()));\n     secret = childKey.key;\n-    metadata.hd_seed_id = hdChain.seed_id;\n+    metadata.hd_seed_id = hd_chain.seed_id;\n     CKeyID master_id = masterKey.key.GetPubKey().GetID();\n     std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n     metadata.has_key_origin = true;\n     // update the chain model in the database\n-    if (!batch.WriteHDChain(hdChain))\n+    if (!batch.WriteHDChain(hd_chain))\n         throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n }\n \n@@ -1167,7 +1167,7 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n                 internal = true;\n             }\n \n-            CPubKey pubkey(GenerateNewKey(batch, internal));\n+            CPubKey pubkey(GenerateNewKey(batch, m_hd_chain, internal));\n             AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n         }\n         if (missingInternal + missingExternal > 0) {\n@@ -1240,7 +1240,7 @@ bool LegacyScriptPubKeyMan::GetKeyFromPool(CPubKey& result, const OutputType typ\n         if (!ReserveKeyFromKeyPool(nIndex, keypool, internal) && !m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n             if (m_storage.IsLocked()) return false;\n             WalletBatch batch(m_storage.GetDatabase());\n-            result = GenerateNewKey(batch, internal);\n+            result = GenerateNewKey(batch, m_hd_chain, internal);\n             return true;\n         }\n         KeepDestination(nIndex, type);"
      },
      {
        "sha": "f7b0be4e978c17597434931d505670ce75b9c914",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b59b4504abf96cec860badfed2ac793ae5d40ced/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b59b4504abf96cec860badfed2ac793ae5d40ced/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b59b4504abf96cec860badfed2ac793ae5d40ced",
        "patch": "@@ -287,10 +287,10 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool AddKeyOriginWithDB(WalletBatch& batch, const CPubKey& pubkey, const KeyOriginInfo& info);\n \n     /* the HD chain data model (external chain counters) */\n-    CHDChain hdChain;\n+    CHDChain m_hd_chain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, CHDChain& hd_chain, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     std::set<int64_t> setInternalKeyPool GUARDED_BY(cs_KeyStore);\n     std::set<int64_t> setExternalKeyPool GUARDED_BY(cs_KeyStore);\n@@ -392,11 +392,11 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n     void LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n     //! Generate a new key\n-    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    CPubKey GenerateNewKey(WalletBatch& batch, CHDChain& hd_chain, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n     /* Set the HD chain model (chain child index counters) */\n     void SetHDChain(const CHDChain& chain, bool memonly);\n-    const CHDChain& GetHDChain() const { return hdChain; }\n+    const CHDChain& GetHDChain() const { return m_hd_chain; }\n \n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);"
      }
    ]
  },
  {
    "sha": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWYyZjZhMGU4NTE0YTA0MzhhODc1NTQ0MDBiZjczY2JiOTA3MDdm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T20:23:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:04Z"
      },
      "message": "Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan",
      "tree": {
        "sha": "979ce45063a88655f050cb2b0f2a31e56b6cca38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/979ce45063a88655f050cb2b0f2a31e56b6cca38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45f2f6a0e8514a0438a87554400bf73cbb90707f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f2f6a0e8514a0438a87554400bf73cbb90707f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45f2f6a0e8514a0438a87554400bf73cbb90707f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f2f6a0e8514a0438a87554400bf73cbb90707f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b59b4504abf96cec860badfed2ac793ae5d40ced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b59b4504abf96cec860badfed2ac793ae5d40ced",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b59b4504abf96cec860badfed2ac793ae5d40ced"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 116,
      "deletions": 4
    },
    "files": [
      {
        "sha": "883a8be94342062bcad5497996d16be8da2ee0ab",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=45f2f6a0e8514a0438a87554400bf73cbb90707f",
        "patch": "@@ -839,12 +839,29 @@ bool LegacyScriptPubKeyMan::AddWatchOnly(const CScript& dest, int64_t nCreateTim\n void LegacyScriptPubKeyMan::SetHDChain(const CHDChain& chain, bool memonly)\n {\n     LOCK(cs_KeyStore);\n-    if (!memonly && !WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain))\n-        throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+    // memonly == true means we are loading the wallet file\n+    // memonly == false means that the chain is actually being changed\n+    if (!memonly) {\n+        // Store the new chain\n+        if (!WalletBatch(m_storage.GetDatabase()).WriteHDChain(chain)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing chain failed\");\n+        }\n+        // When there's an old chain, add it as an inactive chain as we are now rotating hd chains\n+        if (!m_hd_chain.seed_id.IsNull()) {\n+            AddInactiveHDChain(m_hd_chain);\n+        }\n+    }\n \n     m_hd_chain = chain;\n }\n \n+void LegacyScriptPubKeyMan::AddInactiveHDChain(const CHDChain& chain)\n+{\n+    LOCK(cs_KeyStore);\n+    assert(!chain.seed_id.IsNull());\n+    m_inactive_hd_chains[chain.seed_id] = chain;\n+}\n+\n bool LegacyScriptPubKeyMan::HaveKey(const CKeyID &address) const\n {\n     LOCK(cs_KeyStore);\n@@ -1011,8 +1028,8 @@ void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata&\n     std::copy(master_id.begin(), master_id.begin() + 4, metadata.key_origin.fingerprint);\n     metadata.has_key_origin = true;\n     // update the chain model in the database\n-    if (!batch.WriteHDChain(hd_chain))\n-        throw std::runtime_error(std::string(__func__) + \": Writing HD chain model failed\");\n+    if (hd_chain.seed_id == m_hd_chain.seed_id && !batch.WriteHDChain(hd_chain))\n+        throw std::runtime_error(std::string(__func__) + \": writing HD chain model failed\");\n }\n \n void LegacyScriptPubKeyMan::LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)"
      },
      {
        "sha": "0f435647481a3fccd3900c6913bef8e6bfd26264",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=45f2f6a0e8514a0438a87554400bf73cbb90707f",
        "patch": "@@ -18,6 +18,8 @@\n \n #include <boost/signals2/signal.hpp>\n \n+#include <unordered_map>\n+\n enum class OutputType;\n \n // Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n@@ -143,6 +145,17 @@ class CKeyPool\n     }\n };\n \n+class KeyIDHasher\n+{\n+public:\n+    KeyIDHasher() {}\n+\n+    size_t operator()(const CKeyID& id) const\n+    {\n+        return id.GetUint64(0);\n+    }\n+};\n+\n /*\n  * A class implementing ScriptPubKeyMan manages some (or all) scriptPubKeys used in a wallet.\n  * It contains the scripts and keys related to the scriptPubKeys it manages.\n@@ -288,6 +301,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     /* the HD chain data model (external chain counters) */\n     CHDChain m_hd_chain;\n+    std::unordered_map<CKeyID, CHDChain, KeyIDHasher> m_inactive_hd_chains;\n \n     /* HD derive new child key (on internal or external chain) */\n     void DeriveNewChildKey(WalletBatch& batch, CKeyMetadata& metadata, CKey& secret, CHDChain& hd_chain, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n@@ -397,6 +411,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     /* Set the HD chain model (chain child index counters) */\n     void SetHDChain(const CHDChain& chain, bool memonly);\n     const CHDChain& GetHDChain() const { return m_hd_chain; }\n+    void AddInactiveHDChain(const CHDChain& chain);\n \n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);"
      },
      {
        "sha": "49db7914e4789b1cb0d20603ef6e00e7dc05b8c6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=45f2f6a0e8514a0438a87554400bf73cbb90707f",
        "patch": "@@ -10,6 +10,7 @@\n #include <protocol.h>\n #include <serialize.h>\n #include <sync.h>\n+#include <util/bip32.h>\n #include <util/system.h>\n #include <util/time.h>\n #include <wallet/wallet.h>\n@@ -245,6 +246,7 @@ class CWalletScanState {\n     std::map<uint256, DescriptorCache> m_descriptor_caches;\n     std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n     std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n+    std::map<uint160, CHDChain> m_hd_chains;\n \n     CWalletScanState() {\n     }\n@@ -405,6 +407,65 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n             pwallet->GetOrCreateLegacyScriptPubKeyMan()->LoadKeyMetadata(vchPubKey.GetID(), keyMeta);\n+\n+            // Extract some CHDChain info from this metadata if it has any\n+            if (keyMeta.nVersion >= CKeyMetadata::VERSION_WITH_HDDATA && !keyMeta.hd_seed_id.IsNull() && keyMeta.hdKeypath.size() > 0) {\n+                // Get the path from the key origin or from the path string\n+                // Not applicable when path is \"s\" as that indicates a seed\n+                bool internal = false;\n+                uint32_t index = 0;\n+                if (keyMeta.hdKeypath != \"s\") {\n+                    std::vector<uint32_t> path;\n+                    if (keyMeta.has_key_origin) {\n+                        // We have a key origin, so pull it from its path vector\n+                        path = keyMeta.key_origin.path;\n+                    } else {\n+                        // No key origin, have to parse the string\n+                        if (!ParseHDKeypath(keyMeta.hdKeypath, path)) {\n+                            strErr = \"Error reading wallet database: keymeta with invalid HD keypath\";\n+                            return false;\n+                        }\n+                    }\n+\n+                    // Extract the index and internal from the path\n+                    // Path string is m/0'/k'/i'\n+                    // Path vector is [0', k', i'] (but as ints OR'd with the hardened bit\n+                    // k == 0 for external, 1 for internal. i is the index\n+                    if (path.size() != 3) {\n+                        strErr = \"Error reading wallet database: keymeta found with unexpected path\";\n+                        return false;\n+                    }\n+                    if (path[0] != 0x80000000) {\n+                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000) for the element at index 0\", path[0]);\n+                        return false;\n+                    }\n+                    if (path[1] != 0x80000000 && path[1] != (1 | 0x80000000)) {\n+                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected 0x80000000 or 0x80000001) for the element at index 1\", path[1]);\n+                        return false;\n+                    }\n+                    if ((path[2] & 0x80000000) == 0) {\n+                        strErr = strprintf(\"Unexpected path index of 0x%08x (expected to be greater than or equal to 0x80000000)\", path[2]);\n+                        return false;\n+                    }\n+                    internal = path[1] == (1 | 0x80000000);\n+                    index = path[2] & ~0x80000000;\n+                }\n+\n+                // Insert a new CHDChain, or get the one that already exists\n+                auto ins = wss.m_hd_chains.emplace(keyMeta.hd_seed_id, CHDChain());\n+                CHDChain& chain = ins.first->second;\n+                if (ins.second) {\n+                    // For new chains, we want to default to VERSION_HD_BASE until we see an internal\n+                    chain.nVersion = CHDChain::VERSION_HD_BASE;\n+                    chain.seed_id = keyMeta.hd_seed_id;\n+                }\n+                if (internal) {\n+                    chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n+                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index);\n+                } else {\n+                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index);\n+                }\n+            }\n         } else if (strType == DBKeys::WATCHMETA) {\n             CScript script;\n             ssKey >> script;\n@@ -728,6 +789,20 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the inactive chain\n+    if (wss.m_hd_chains.size() > 0) {\n+        LegacyScriptPubKeyMan* legacy_spkm = pwallet->GetLegacyScriptPubKeyMan();\n+        if (!legacy_spkm) {\n+            pwallet->WalletLogPrintf(\"Inactive HD Chains found but no Legacy ScriptPubKeyMan\\n\");\n+            return DBErrors::CORRUPT;\n+        }\n+        for (const auto& chain_pair : wss.m_hd_chains) {\n+            if (chain_pair.first != pwallet->GetLegacyScriptPubKeyMan()->GetHDChain().seed_id) {\n+                pwallet->GetLegacyScriptPubKeyMan()->AddInactiveHDChain(chain_pair.second);\n+            }\n+        }\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "4374d61dfb73c78f82fd50e8023a386a7d481d33",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45f2f6a0e8514a0438a87554400bf73cbb90707f/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=45f2f6a0e8514a0438a87554400bf73cbb90707f",
        "patch": "@@ -116,6 +116,11 @@ class CHDChain\n         nInternalChainCounter = 0;\n         seed_id.SetNull();\n     }\n+\n+    bool operator==(const CHDChain& chain) const\n+    {\n+        return seed_id == chain.seed_id;\n+    }\n };\n \n class CKeyMetadata"
      }
    ]
  },
  {
    "sha": "c93082ece40b1c72f05b3e2085c022c09eaa4d65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTMwODJlY2U0MGIxYzcyZjA1YjNlMjA4NWMwMjJjMDllYWE0ZDY1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T20:55:49Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:10Z"
      },
      "message": "Generate new keys for inactive seeds after marking used\n\nWhen a key from an inactive seed is used, generate replacements\nto fill a keypool that would have been there.",
      "tree": {
        "sha": "2f0878258ebfa58bfbad40f3466c57ae6a34435b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f0878258ebfa58bfbad40f3466c57ae6a34435b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c93082ece40b1c72f05b3e2085c022c09eaa4d65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93082ece40b1c72f05b3e2085c022c09eaa4d65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c93082ece40b1c72f05b3e2085c022c09eaa4d65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93082ece40b1c72f05b3e2085c022c09eaa4d65/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45f2f6a0e8514a0438a87554400bf73cbb90707f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45f2f6a0e8514a0438a87554400bf73cbb90707f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45f2f6a0e8514a0438a87554400bf73cbb90707f"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 68,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1bd33449fc38a71c0c833e42a626906ea9374f68",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 3,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c93082ece40b1c72f05b3e2085c022c09eaa4d65/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c93082ece40b1c72f05b3e2085c022c09eaa4d65/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=c93082ece40b1c72f05b3e2085c022c09eaa4d65",
        "patch": "@@ -12,6 +12,9 @@\n #include <util/translation.h>\n #include <wallet/scriptpubkeyman.h>\n \n+//! Value for the first BIP 32 hardened derivation. Can be used as a bit mask and as a value. See BIP 32 for more details.\n+const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n+\n bool LegacyScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n     LOCK(cs_KeyStore);\n@@ -290,20 +293,72 @@ bool LegacyScriptPubKeyMan::GetReservedDestination(const OutputType type, bool i\n     return true;\n }\n \n+bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal)\n+{\n+    LOCK(cs_KeyStore);\n+\n+    if (m_storage.IsLocked()) return false;\n+\n+    auto it = m_inactive_hd_chains.find(seed_id);\n+    if (it == m_inactive_hd_chains.end()) {\n+        return false;\n+    }\n+\n+    CHDChain& chain = it->second;\n+\n+    // Top up key pool\n+    int64_t target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+\n+    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n+    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n+    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+\n+    // make sure the keypool fits the user-selected target (-keypool)\n+    int64_t missing = std::max(target_size - kp_size, (int64_t) 0);\n+\n+    if (missing > 0) {\n+        WalletBatch batch(m_storage.GetDatabase());\n+        for (int64_t i = missing; i > 0; --i) {\n+            GenerateNewKey(batch, chain, internal);\n+        }\n+        if (internal) {\n+            WalletLogPrintf(\"inactive seed with id %s added %d internal keys\\n\", HexStr(seed_id), missing);\n+        } else {\n+            WalletLogPrintf(\"inactive seed with id %s added %d keys\\n\", HexStr(seed_id), missing);\n+        }\n+    }\n+    return true;\n+}\n+\n void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n     LOCK(cs_KeyStore);\n     // extract addresses and check if they match with an unused keypool key\n     for (const auto& keyid : GetAffectedKeys(script, *this)) {\n         std::map<CKeyID, int64_t>::const_iterator mi = m_pool_key_to_index.find(keyid);\n         if (mi != m_pool_key_to_index.end()) {\n-            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool key up to this key as used\\n\", __func__);\n+            WalletLogPrintf(\"%s: Detected a used keypool key, mark all keypool keys up to this key as used\\n\", __func__);\n             MarkReserveKeysAsUsed(mi->second);\n \n             if (!TopUp()) {\n                 WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n             }\n         }\n+\n+        // Find the key's metadata and check if it's seed id (if it has one) is inactive, i.e. it is not the current m_hd_chain seed id.\n+        // If so, TopUp the inactive hd chain\n+        auto it = mapKeyMetadata.find(keyid);\n+        if (it != mapKeyMetadata.end()){\n+            CKeyMetadata meta = it->second;\n+            if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n+                bool internal = (meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT) != 0;\n+                int64_t index = meta.key_origin.path[2] & ~BIP32_HARDENED_KEY_LIMIT;\n+\n+                if (!TopUpInactiveHDChain(meta.hd_seed_id, index, internal)) {\n+                    WalletLogPrintf(\"%s: Adding inactive seed keys failed\\n\", __func__);\n+                }\n+            }\n+        }\n     }\n }\n \n@@ -975,8 +1030,6 @@ CPubKey LegacyScriptPubKeyMan::GenerateNewKey(WalletBatch &batch, CHDChain& hd_c\n     return pubkey;\n }\n \n-const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n-\n void LegacyScriptPubKeyMan::DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, CHDChain& hd_chain, bool internal)\n {\n     // for now we use a fixed keypath scheme of m/0'/0'/k"
      },
      {
        "sha": "5aaa17334c2511d5091b8e70659a1e90255a955c",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c93082ece40b1c72f05b3e2085c022c09eaa4d65/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c93082ece40b1c72f05b3e2085c022c09eaa4d65/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=c93082ece40b1c72f05b3e2085c022c09eaa4d65",
        "patch": "@@ -333,6 +333,18 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n \n+    /**\n+     * Like TopUp() but adds keys for inactive HD chains.\n+     * Ensures that there are at least -keypool number of keys derived after the given index.\n+     *\n+     * @param seed_id the CKeyID for the HD seed.\n+     * @param index the index to start generating keys from\n+     * @param internal whether the internal chain should be used. true for internal chain, false for external chain.\n+     *\n+     * @return true if seed was found and keys were derived. false if unable to derive seeds\n+     */\n+    bool TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal);\n+\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n "
      }
    ]
  },
  {
    "sha": "b1810a145a601a8064e4094350cfb6ddafbdb4d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTgxMGExNDVhNjAxYTgwNjRlNDA5NDM1MGNmYjZkZGFmYmRiNGQ4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T21:40:06Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:10Z"
      },
      "message": "Test that keys from inactive seeds are generated",
      "tree": {
        "sha": "3489c4b09987f16659ba2a011b37993c2fee7f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3489c4b09987f16659ba2a011b37993c2fee7f12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1810a145a601a8064e4094350cfb6ddafbdb4d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1810a145a601a8064e4094350cfb6ddafbdb4d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1810a145a601a8064e4094350cfb6ddafbdb4d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1810a145a601a8064e4094350cfb6ddafbdb4d8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c93082ece40b1c72f05b3e2085c022c09eaa4d65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c93082ece40b1c72f05b3e2085c022c09eaa4d65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c93082ece40b1c72f05b3e2085c022c09eaa4d65"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 96,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5b083a53981a6bfc797b355afee3691b7004a6c1",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1810a145a601a8064e4094350cfb6ddafbdb4d8/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1810a145a601a8064e4094350cfb6ddafbdb4d8/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=b1810a145a601a8064e4094350cfb6ddafbdb4d8",
        "patch": "@@ -170,5 +170,101 @@ def run_test(self):\n             assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n             assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n+            self.log.info('Test sethdseed restoring with keys outside of the initial keypool')\n+            self.nodes[0].generate(10)\n+            # Restart node 1 with keypool of 3 and a different wallet\n+            self.nodes[1].createwallet(wallet_name='origin', blank=True)\n+            self.stop_node(1)\n+            self.start_node(1, extra_args=['-keypool=3', '-wallet=origin'])\n+            connect_nodes(self.nodes[0], 1)\n+\n+            # sethdseed restoring and seeing txs to addresses out of the keypool\n+            origin_rpc = self.nodes[1].get_wallet_rpc('origin')\n+            seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+            origin_rpc.sethdseed(True, seed)\n+\n+            self.nodes[1].createwallet(wallet_name='restore', blank=True)\n+            restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+            restore_rpc.sethdseed(True, seed) # Set to be the same seed as origin_rpc\n+            restore_rpc.sethdseed(True) # Rotate to a new seed, making original `seed` inactive\n+\n+            self.nodes[1].createwallet(wallet_name='restore2', blank=True)\n+            restore2_rpc = self.nodes[1].get_wallet_rpc('restore2')\n+            restore2_rpc.sethdseed(True, seed) # Set to be the same seed as origin_rpc\n+            restore2_rpc.sethdseed(True) # Rotate to a new seed, making original `seed` inactive\n+\n+            # Check persistence of inactive seed by reloading restore. restore2 is still loaded to test the case where the wallet is not reloaded\n+            restore_rpc.unloadwallet()\n+            self.nodes[1].loadwallet('restore')\n+            restore_rpc = self.nodes[1].get_wallet_rpc('restore')\n+\n+            # Empty origin keypool and get an address that is beyond the initial keypool\n+            origin_rpc.getnewaddress()\n+            origin_rpc.getnewaddress()\n+            last_addr = origin_rpc.getnewaddress() # Last address of initial keypool\n+            addr = origin_rpc.getnewaddress() # First address beyond initial keypool\n+\n+            # Check that the restored seed has last_addr but does not have addr\n+            info = restore_rpc.getaddressinfo(last_addr)\n+            assert_equal(info['ismine'], True)\n+            info = restore_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], False)\n+            info = restore2_rpc.getaddressinfo(last_addr)\n+            assert_equal(info['ismine'], True)\n+            info = restore2_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], False)\n+            # Check that the origin seed has addr\n+            info = origin_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], True)\n+\n+            # Send a transaction to addr, which is out of the initial keypool.\n+            # The wallet that has set a new seed (restore_rpc) should not detect this transaction.\n+            txid = self.nodes[0].sendtoaddress(addr, 1)\n+            origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+            self.nodes[0].generate(1)\n+            origin_rpc.gettransaction(txid)\n+            assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, txid)\n+            out_of_kp_txid = txid\n+\n+            # Send a transaction to last_addr, which is in the initial keypool.\n+            # The wallet that has set a new seed (restore_rpc) should detect this transaction and generate 3 new keys from the initial seed.\n+            # The previous transaction (out_of_kp_txid) should still not be detected as a rescan is required.\n+            txid = self.nodes[0].sendtoaddress(last_addr, 1)\n+            origin_rpc.sendrawtransaction(self.nodes[0].gettransaction(txid)['hex'])\n+            self.nodes[0].generate(1)\n+            origin_rpc.gettransaction(txid)\n+            restore_rpc.gettransaction(txid)\n+            assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore_rpc.gettransaction, out_of_kp_txid)\n+            restore2_rpc.gettransaction(txid)\n+            assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', restore2_rpc.gettransaction, out_of_kp_txid)\n+\n+            # After rescanning, restore_rpc should now see out_of_kp_txid and generate an additional key.\n+            # addr should now be part of restore_rpc and be ismine\n+            restore_rpc.rescanblockchain()\n+            restore_rpc.gettransaction(out_of_kp_txid)\n+            info = restore_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], True)\n+            restore2_rpc.rescanblockchain()\n+            restore2_rpc.gettransaction(out_of_kp_txid)\n+            info = restore2_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], True)\n+\n+            # Check again that 3 keys were derived.\n+            # Empty keypool and get an address that is beyond the initial keypool\n+            origin_rpc.getnewaddress()\n+            origin_rpc.getnewaddress()\n+            last_addr = origin_rpc.getnewaddress()\n+            addr = origin_rpc.getnewaddress()\n+\n+            # Check that the restored seed has last_addr but does not have addr\n+            info = restore_rpc.getaddressinfo(last_addr)\n+            assert_equal(info['ismine'], True)\n+            info = restore_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], False)\n+            info = restore2_rpc.getaddressinfo(last_addr)\n+            assert_equal(info['ismine'], True)\n+            info = restore2_rpc.getaddressinfo(addr)\n+            assert_equal(info['ismine'], False)\n+\n if __name__ == '__main__':\n     WalletHDTest().main ()"
      }
    ]
  },
  {
    "sha": "1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWQ1MmZiYjRkODFmN2I3NjM0ZmQ0ZmI2ZDFkMDBlMTQ3ODEyOWRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-12-05T21:52:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:00:10Z"
      },
      "message": "Remove IBD check in sethdseed\n\nIt is no longer necessary to wait for IBD to be complete before setting\na HD seed. This check was originally to ensure that restoring an old\nseed on an out of sync node would scan the entire blockchain and thus\nnot miss transactions that involved keys that were not in the keypool.\nThis was necessary as once the seed was changed, no further keys would\nbe derived from the old seed(s).\n\nAs we are now topping up inactive seeds as we find those keys to be\nused, this check is no longer necessary. During IBD, each time we\nfind a used key belonging to an inactive hd seed, we will still generate\nmore keys from that inactive seed.",
      "tree": {
        "sha": "81c7714f9a7f2f0d6afacd089c748e7549718746",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/81c7714f9a7f2f0d6afacd089c748e7549718746"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1810a145a601a8064e4094350cfb6ddafbdb4d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1810a145a601a8064e4094350cfb6ddafbdb4d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1810a145a601a8064e4094350cfb6ddafbdb4d8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "913503ea2cb52c9886a2b97227ce5a5439a0eaf2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1ed52fbb4d81f7b7634fd4fb6d1d00e1478129dc",
        "patch": "@@ -3972,10 +3972,6 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n-    if (pwallet->chain().isInitialBlockDownload()) {\n-        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Cannot set a new HD seed while still in Initial Block Download\");\n-    }\n-\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot set a HD seed to a wallet with private keys disabled\");\n     }"
      }
    ]
  }
]