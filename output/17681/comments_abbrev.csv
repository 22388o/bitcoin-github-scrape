DrahtBot,2019-12-05 22:21:41,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18923 (wallet: Never schedule MaybeCompactWalletDB when -flushwallet is off by MarcoFalke)\n* #18354 (Protect wallet by u",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-562345098,562345098,
achow101,2019-12-08 18:02:07,Found a few bugs where the wrong CHDChain was being used/updated/written. Should be fixed now.,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-562975226,562975226,
ariard,2019-12-10 02:31:52,"@achow101 after thoughts, I was thinking of the case where we have initial keypool=1000, we create a wallet backup B1 at block N, then we exhaust keypool until reaching index 1100, none of the address in the range 0 to 1000 are confirmed on chain, address index 1100 get confirmed at block N+10000. We restore wallet backup B1 and rescan from N until N+10000, wallet is not going to see address index",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-563613452,563613452,
achow101,2019-12-10 02:49:44,"Yes, such a scenario is possible and is unavoidable. The only thing that you can do is to have a large enough keypool (or gap limit as other wallets call it) where this is unlikely to happen. This is why the default `-keypool` was raised to 1000 from 100.",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-563636980,563636980,
ariard,2019-12-10 23:24:58,"Okay thanks for answer, added a commit on top of your branch (https://github.com/ariard/bitcoin/commit/3c25ab7f36319cbe38d1fb65a321b1234635648e) to clarify the risk of losing funds by lowering the default keypool value. With the default value, this scenario is really unlikely, but we should inform as best user to avoid one of them removing the footgun protection by mistake.\n\nWe could also go f",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564305888,564305888,
achow101,2019-12-11 01:48:08,I think updating the docs about `-keypool` settings is out of scope for this PR.,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564340206,564340206,
ariard,2019-12-11 03:49:46,"No worries I'll take it on its own. But on the raw idea, do you think it's pertinent to update the doc to inform user ?",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564367899,564367899,
achow101,2019-12-11 03:54:30,"Yes, we should keep docs up to date with behavior.",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-564368726,564368726,
luke-jr,2020-01-03 18:54:01,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-570663830,570663830,
achow101,2020-01-06 17:03:06,Renamed it.,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-571221110,571221110,
jonasschnelli,2020-01-09 05:26:43,"Nice work!\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-572394058,572394058,
jnewbery,2020-01-30 15:54:51,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-580319326,580319326,
Sjors,2020-02-19 12:14:26,"Travis is tripping over some lock issue. As is macOS with `--enable-debug`:\n```\nwallet/walletdb.cpp:399:58: error: calling function 'AddInactiveHDChain' requires holding mutex 'pwallet->GetOrCreateLegacyScriptPubKeyMan().cs_KeyStore' exclusively [-Werror,-Wthread-safety-analysis]\n            pwallet->GetOrCreateLegacyScriptPubKeyMan()->AddInactiveHDChain(chain, true);\n```",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-588194193,588194193,
jonatack,2020-03-16 21:20:56,"Re-ACK 5fafe5e reviewed changes since last review with `git diff d435512..5fafe5e`, rebased on master @ 25424cf57, built/ran tests/bitcoind",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-599763723,599763723,
ryanofsky,2020-05-01 01:58:07,"Code review almost-ACK d27ced4eeaf59d093b4eedeed6c344f3f80082c1\n\nArrived here while reviewing #17484, and happy to see another really nicely implemented PR!  Clean changes and great code comments and tests. Only thing that I think is a problem (and easily addressed) is decision to read/write/rely on new ""inactivehdchain"" database rows. I guess there are two slightly different decisions I'm con",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-622211593,622211593,
achow101,2020-05-02 02:03:16,I've changed this to get rid of the `inactivehdseed` records and just interpret the `keymeta` records during loading.,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-622653118,622653118,
jnewbery,2020-05-11 18:44:29,We're covering this in review club on May 13: https://bitcoincore.reviews/17681.html,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-626885075,626885075,
theStack,2020-05-13 16:27:08,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-628101843,628101843,
rajarshimaitra,2020-05-15 14:56:35,"Code Review ACK. Verified test, verified test failing in master. Overall nice easy to understand PR. Agreed with the motivation. ",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-629280702,629280702,
achow101,2020-05-20 18:42:03,"With 3 ACKs now, I think the remaining comments can be done in follow up PRs.",https://github.com/bitcoin/bitcoin/pull/17681#issuecomment-631654435,631654435,
paymog,2019-12-07 09:22:41,should `index` and `internal` be made `const` too? ,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355111113,355111113,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-07 09:29:58,"Documentation for the function would be nice, whether here or in the header file. What does this function do? What does the return value mean?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355111471,355111471,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-07 09:31:26,`const`? Seems like this isn't be modified later in the function,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355111542,355111542,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-07 09:40:37,should the type on the left hand side be `int64_t`? It seems `GetArg` returns that type and you're casting `0` to that type too: https://github.com/bitcoin/bitcoin/blob/23cecd6cd56f952c757f469c46d7593c2ffaa419/src/util/system.h#L234,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355112025,355112025,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-07 09:42:06,"`(int64_t) 0` is used twice now, should it be made into a constant?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355112076,355112076,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-07 09:44:10,is this missing a termination condition?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355112156,355112156,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-08 09:03:09,sanity check: should this be `hdChain` or `chain`?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355170609,355170609,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-08 09:04:15,should we check if `chain.seed_id` is null here? ,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355170663,355170663,src/wallet/scriptpubkeyman.cpp
paymog,2019-12-08 09:12:33,I'm new to Bitcoin and I'm still learning the testing standards - should there be a test where this exception is expected to be thrown?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355171237,355171237,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 16:56:33,No. This is only expected to be thrown under corruption and/or hardware failure conditions.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355199686,355199686,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 16:59:21,I don't think it really matters. They are not references and are primitives.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355199870,355199870,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 17:04:27,`GenerateNewKey` modifies it.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355200192,355200192,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 17:05:01,I don't think it's worth it.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355200227,355200227,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 17:12:53,"It is supposed to be `hdChain`.\n\n`SetHDChain` happens when we change `hdChain`. We want to store what is currently `hdChain` as an inactive seed before we switch it out for the new one. So this is correct, we add it as an inactive chain before it is set to the new `chain`.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355200722,355200722,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 18:00:50,Added a comment.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203595,355203595,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 18:00:55,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203600,355203600,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 18:01:18,"I copied this out of TopUp and technically this is correct. But it's hard to read and reason about, so I've changed it to the standard way of doing for loops.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203638,355203638,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-08 18:01:35,It should never be null. I've added an assert to check that.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355203648,355203648,src/wallet/scriptpubkeyman.cpp
ariard,2019-12-09 22:17:38,Is needed to take lock again? Can't you `AssertLockHeld` and `EXCLUSIVE_LOCKREQUIRED` instead?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355716017,355716017,src/wallet/scriptpubkeyman.cpp
ariard,2019-12-09 22:22:02,Pass `memonly`? (even if value is always `false` for now),https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355717884,355717884,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-09 23:17:31,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355738392,355738392,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-09 23:17:36,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r355738422,355738422,src/wallet/scriptpubkeyman.cpp
promag,2019-12-29 23:21:00,"nit, above.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r361878437,361878437,src/wallet/scriptpubkeyman.cpp
achow101,2019-12-30 21:57:46,Fixed,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r362106027,362106027,src/wallet/scriptpubkeyman.cpp
jonatack,2020-03-15 17:34:20,nit: initial,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392695102,392695102,test/functional/wallet_hd.py
jonatack,2020-03-15 17:37:10,keypool of 3,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392695347,392695347,test/functional/wallet_hd.py
jonatack,2020-03-15 17:54:53,"suggestion\n```diff\n-        # Empty keypool and get an address that is beyond the initial keypool\n+        # Empty the origin keypool and get an address that is beyond the initial keypool of 3\n         origin_rpc.getnewaddress()\n         origin_rpc.getnewaddress()\n-        last_addr = origin_rpc.getnewaddress()\n-        addr = origin_rpc.getnewaddress()\n+        last_addr = origin_",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392696785,392696785,test/functional/wallet_hd.py
jonatack,2020-03-15 18:10:19,"suggest mentioning in order of checks\n```diff\n-        # Check that the restored seed does not have addr but does have last_addr\n+        # Check that the restored seed has last_addr but does not have addr\n         info = restore_rpc.getaddressinfo(last_addr)\n         assert_equal(info['ismine'], True)\n         info = restore_rpc.getaddressinfo(addr)\n         assert_equal(info['ismin",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392698112,392698112,test/functional/wallet_hd.py
jonatack,2020-03-15 18:15:31,This line seems redundant?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392698529,392698529,test/functional/wallet_hd.py
jonatack,2020-03-15 18:37:10,"suggest mentioning in order of checks\n```diff\n-        # Check that the restored seed does not have addr but does have last_addr\n+        # Check that the restored seed has last_addr but does not have addr\n```\n",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392700316,392700316,test/functional/wallet_hd.py
jonatack,2020-03-15 18:38:09,Could you add comments for the 3 sections above? ,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392700402,392700402,test/functional/wallet_hd.py
jonatack,2020-03-16 10:57:00,"nit suggestion here and line 1014 just above: git grepping indicates these are lowercased elsewhere, except when the message begins with a class name\n```diff\n- throw std::runtime_error(std::string(__func__) + "": Writing HD chain model failed"");\n+ throw std::runtime_error(std::string(__func__) + "": writing HD chain model failed"");\n```",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392936080,392936080,src/wallet/scriptpubkeyman.cpp
jonatack,2020-03-16 11:29:52,should also define `bool operator!=`...?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392951184,392951184,src/wallet/walletdb.h
jonatack,2020-03-16 11:34:57,-keypool (keypoolsize),https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392953786,392953786,src/wallet/scriptpubkeyman.h
jonatack,2020-03-16 11:37:06,nit: s/user selected/user-selected/,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392954955,392954955,src/wallet/scriptpubkeyman.cpp
jonatack,2020-03-16 11:38:23,"agree with @achow101, see https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#f16-for-in-parameters-pass-cheaply-copied-types-by-value-and-others-by-reference-to-const",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392955591,392955591,src/wallet/scriptpubkeyman.cpp
jonatack,2020-03-16 12:20:06,"naming/documentation: both here in `FillInactiveChain()` and in `TopUp()`, ""available"" and `missing` seem like opposites",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392976340,392976340,src/wallet/scriptpubkeyman.cpp
jonatack,2020-03-16 12:25:29,"musing on naming here: consider naming the function `FillUpInactiveHDChain` or `TopUpInactiveHDChain`:\n- to say it's an HD chain (which shows why no need to check `!CanGenerateKeys()` here IIUC)\n- naming similar to `AddInactiveHDChain` and `WriteInActiveHDChain`\n- best to avoid ""I"" next to ""ll""\n- and if desired, show similarity to `TopUp` as the functions are similar, unless you don't want",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r392980170,392980170,src/wallet/scriptpubkeyman.cpp
jonatack,2020-03-16 13:24:30,"for info I appended these checks after the rescan so that all checks before the rescan are also repeated after it, and all still pass\n```diff\n         assert_equal(info['ismine'], False)\n+        info = origin_rpc.getaddressinfo(addr)\n+        assert_equal(info['ismine'], True)\n+\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        origin_rpc.sendrawtransaction(self.nodes[0]",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393019229,393019229,test/functional/wallet_hd.py
jonatack,2020-03-16 13:41:15,"On current master d402c1e4d, the new test fails here after the rescan with `Invalid or non-wallet transaction id (-5)`, is this where it fails for you, and should it not fail on one of the assertions?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393029747,393029747,test/functional/wallet_hd.py
achow101,2020-03-16 16:27:39,"No, this is the correct place for it to fail. The asserts above should pass because on mater, we still have the keypool of 3 so all the things existing/not existing is the same. The difference is that the `out_of_kp_txid` is not seen by master because it uses a key that is out of the original keypool. Since master does not continue to extend the original keypool, it fails to detect `out_of_kp_txid",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393151113,393151113,test/functional/wallet_hd.py
achow101,2020-03-16 16:29:06,"It is not. We are first setting the original seed (we set it to make sure it is shared), then setting a new seed to simulate a seed rotation.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393152055,393152055,test/functional/wallet_hd.py
jonatack,2020-03-16 17:17:32,"Oh, right -- reading the cli help again, both calls are flushing; the first call sets the seed with the passed `seed` value and the second call sets a random seed. Maybe add a comment to explain the intention or simulation.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393187069,393187069,test/functional/wallet_hd.py
jonatack,2020-03-16 17:21:22,Ok thanks. Upgraded the Concept ACK to an ACK with non-blocking comments.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393189292,393189292,test/functional/wallet_hd.py
achow101,2020-03-16 17:44:20,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393202958,393202958,test/functional/wallet_hd.py
achow101,2020-03-16 17:44:25,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393202998,393202998,test/functional/wallet_hd.py
achow101,2020-03-16 17:44:30,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203066,393203066,test/functional/wallet_hd.py
achow101,2020-03-16 17:44:37,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203131,393203131,test/functional/wallet_hd.py
achow101,2020-03-16 17:44:44,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203207,393203207,test/functional/wallet_hd.py
achow101,2020-03-16 17:44:47,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203250,393203250,test/functional/wallet_hd.py
achow101,2020-03-16 17:44:52,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203317,393203317,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-16 17:45:11,It should be implicitly defined.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203508,393203508,src/wallet/walletdb.h
achow101,2020-03-16 17:45:14,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203548,393203548,src/wallet/scriptpubkeyman.h
achow101,2020-03-16 17:45:19,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203587,393203587,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-16 17:45:23,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203638,393203638,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-16 17:45:35,Renamed to `TopUpInactiveHDChain`,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393203756,393203756,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-16 17:47:10,Added a comment.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393204677,393204677,test/functional/wallet_hd.py
sipa,2020-03-16 18:05:36,"Default comparison operators are only being added in C++20. That said, if nothing needs !=, no need to define it.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393216391,393216391,src/wallet/walletdb.h
ariard,2020-03-16 19:09:35,"0715613\n\nIf you switch `-keypool` arg after switching seed to a smaller one, you may end up with less look-ahead protection for a seed which may be used for higher amounts or different funds policy. That's already an issue today without seed rotation, but I would be okay to make it a static parameter part of `m_inactive_hd_chains`.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393253681,393253681,src/wallet/scriptpubkeyman.cpp
ariard,2020-03-16 19:12:12,"0715613\n\nToo much work for parameterizing `TopUp` with `seed_id` or other reasons?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393255004,393255004,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-16 19:23:48,"I don't think that's necessary. Since `sethdseed`'s purpose is seed rotation, it doesn't really make sense that there would be different funds policies.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393260572,393260572,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-16 19:26:31,Needing `index` makes it harder to parameterize.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393261919,393261919,src/wallet/scriptpubkeyman.cpp
ryanofsky,2020-05-07 14:02:47,"In commit ""fixup! Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan"" (65dee3410cd9807bb4aa6b6677c2e0832e050ea2)\n\nShould fix: probably need to drop this performance optimization",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421528878,421528878,test/functional/wallet_hd.py
ryanofsky,2020-05-07 14:04:47,"In commit ""fixup! Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan"" (65dee3410cd9807bb4aa6b6677c2e0832e050ea2)\n\nNote: looks like unintended comment change here",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421530343,421530343,src/wallet/walletdb.cpp
ryanofsky,2020-05-07 14:16:51,"In commit ""Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan"" (22361d241b4d236b2b8f84b59094c296172db0ff)\n\nNote: I initially questioned this, but it does seems reasonable to treat unexpected paths as errors. Triggering an error instead of ignoring these keys means we may need to be a little more careful about backwards compatibility in the future, and store p",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421539430,421539430,src/wallet/walletdb.cpp
ryanofsky,2020-05-07 14:18:22,"In commit ""fixup! Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan"" (65dee3410cd9807bb4aa6b6677c2e0832e050ea2)\n\nNote: Could drop the comment about ""s"" here since it's now noted and handled above",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421540545,421540545,src/wallet/walletdb.cpp
ryanofsky,2020-05-07 14:30:19,"In commit ""Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan"" (22361d241b4d236b2b8f84b59094c296172db0ff)\n\nShould fix: It would probably be good to skip keys or error if path[1] is not `0` or `1` or path[0] is not `0`",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421550317,421550317,src/wallet/walletdb.cpp
ryanofsky,2020-05-07 14:35:14,"In commit ""Generate new keys for inactive seeds after marking used"" (8b8f982973a83ea77b5159235b282f20bd430677)\n\nNote: Maybe would be good to include seed id in log message",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421554491,421554491,src/wallet/scriptpubkeyman.cpp
ryanofsky,2020-05-07 14:51:35,"In commit ""Test that keys from inactive seeds are generated"" (5932c00fef5054207bd133daa1aea9857d9c3611)\n\nClever test! Nice way to ensure the inactive pool wasn't topped up while still active",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421567397,421567397,test/functional/wallet_hd.py
ryanofsky,2020-05-07 14:57:41,"In commit ""Test that keys from inactive seeds are generated"" (5932c00fef5054207bd133daa1aea9857d9c3611)\n\nre: https://github.com/bitcoin/bitcoin/pull/17681#discussion_r393019229\n\n> for info I appended these checks after the rescan so that all checks before the rescan are also repeated after it, and all still pass\n\nNot sure if this review comment was made based on an older version of the",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421571988,421571988,test/functional/wallet_hd.py
achow101,2020-05-07 15:59:43,Whoops. Fixed,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421616902,421616902,test/functional/wallet_hd.py
achow101,2020-05-07 15:59:50,Fixed,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421616981,421616981,src/wallet/walletdb.cpp
achow101,2020-05-07 15:59:58,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421617076,421617076,src/wallet/walletdb.cpp
achow101,2020-05-07 16:00:16,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421617266,421617266,src/wallet/walletdb.cpp
ryanofsky,2020-05-07 17:19:14,"In commit ""Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan"" (daa9e347deceedb354aa0c73e34e34d50fafb5d5)\n\nDoesn't & need to be | here (and above) (and below)? I'm actually not sure how the test seems to pass with this",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421666484,421666484,src/wallet/walletdb.cpp
ryanofsky,2020-05-07 17:25:44,"> I'm actually not sure how the test seems to pass with this\n\nOh, there actually are ""Unexpected path index"" errors in the wallet_hd.py debug logs. I guess these errors don't prevent the wallet from being loaded like I initially thought https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421539430, or these checks should be returning false",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421670272,421670272,src/wallet/walletdb.cpp
achow101,2020-05-07 17:28:21,"No, you are correct, they should be `|`. The lack of failure is because I forgot to `return false`.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421671889,421671889,src/wallet/walletdb.cpp
ryanofsky,2020-05-07 17:31:35,"In commit ""Determine inactive HD seeds from key metadata and track them in LegacyScriptPubKeyMan"" (01c65e3f3119108c904c19c18921efc2d934a3a3)\n\n& should be | here too",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421673924,421673924,src/wallet/walletdb.cpp
achow101,2020-05-07 19:05:35,Fixed,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r421729110,421729110,src/wallet/walletdb.cpp
jnewbery,2020-05-11 21:15:23,"nit: since you're moving this anyway, the normal convention is to declare constants at the top of the file. Perhaps also add a doxygen comment?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423324234,423324234,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-11 21:22:55,grammar nit: s/it's/its/,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423328009,423328009,src/wallet/walletdb.cpp
jnewbery,2020-05-11 21:35:23,"Personally, I think this would be clearer as `(path[0] != (0x80000000))` (remove the `0 |`), or even better, define a constant for BIP_32_HARDENED_BIT.\n\nSame for check below.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423333801,423333801,src/wallet/walletdb.cpp
jnewbery,2020-05-11 21:36:31,add a check that `path[2] & 0x80000000 == 0x80000000`?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423334301,423334301,src/wallet/walletdb.cpp
jnewbery,2020-05-11 21:46:58,"nit: Is this `if` statement required? Can't you just set `chain.nVersion` to `CHDChain::VERSION_HD_CHAIN_SPLIT` every time you're in the `internal` branch? If not, the following seems preferable:\n\n```\nchain.nVersion = std::max(chain.nVersion, CHDChain::VERSION_HD_CHAIN_SPLIT);\n```\n\nto match the formatting below.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423338993,423338993,src/wallet/walletdb.cpp
jnewbery,2020-05-11 22:01:18,"nit: it seems slightly inconsistent that we're sometimes using BIP32_HARDENED_KEY_LIMIT as a value for arithmetic operations and sometimes as a bit for bitwise operations. Functionally it's fine, but It seems slightly clearer to me to do:\n\n```\nbool internal = meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT != 0;\n```\n\nand the same below for `index`",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423345205,423345205,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-11 22:14:37,"Remove ""(locked wallet)"". `TopUpInactiveHDChain()` can return false for multiple reasons.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423350654,423350654,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-11 22:21:46,"You've copied this comment from `TopUp()`, but it doesn't make sense in this context, because you're not topping up both internal and external keypools here.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423353444,423353444,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-11 22:25:40,"This doesn't seem right. It adds the key to setInternalKeyPool or setExternalKeyPool, but I don't think we want to do that?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423355017,423355017,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-12 00:25:47,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423393936,423393936,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-12 00:25:50,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423393972,423393972,src/wallet/walletdb.cpp
achow101,2020-05-12 00:25:55,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394002,423394002,src/wallet/walletdb.cpp
achow101,2020-05-12 00:25:59,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394015,423394015,src/wallet/walletdb.cpp
achow101,2020-05-12 00:26:11,I suppose the `if` isn't required. Removed it.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394070,423394070,src/wallet/walletdb.cpp
achow101,2020-05-12 00:26:15,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394088,423394088,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-12 00:26:19,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394110,423394110,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-12 00:26:24,Removed,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394134,423394134,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-12 00:26:31,Removed.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423394171,423394171,src/wallet/scriptpubkeyman.cpp
jonatack,2020-05-12 15:11:08,This line is causing a -Wparentheses build warning `suggest parentheses around comparison in operand of ‘&’`,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423813368,423813368,src/wallet/scriptpubkeyman.cpp
jonatack,2020-05-12 15:12:48,"This line is making `test/lint/lint-logs.sh` unhappy, appeased with:\n```diff\n-            pwallet->WalletLogPrintf(""Inactive HD Chains found but no Legacy ScriptPubKeyMan"");\n+            pwallet->WalletLogPrintf(""Inactive HD Chains found but no Legacy ScriptPubKeyMan\n"");\n```",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423814573,423814573,src/wallet/walletdb.cpp
achow101,2020-05-12 16:28:37,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423870476,423870476,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-12 16:28:40,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423870527,423870527,src/wallet/walletdb.cpp
jonatack,2020-05-12 17:16:38,"f5eaa903 I think we can tuck this object and loop inside the conditional, to skip it if `missing` is zero.\n```diff\n-    WalletBatch batch(m_storage.GetDatabase());\n-    for (int64_t i = missing; i > 0; --i) {\n-        GenerateNewKey(batch, chain, internal);\n-    }\n     if (missing > 0) {\n+        WalletBatch batch(m_storage.GetDatabase());\n+        for (int64_t i = missing; i > 0; ",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423901460,423901460,src/wallet/scriptpubkeyman.cpp
jonatack,2020-05-12 19:10:11,f5eaa903 s/@@return/@return/,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423969969,423969969,src/wallet/scriptpubkeyman.h
jonatack,2020-05-12 19:33:59,"f5eaa90 suggestion:\n```diff\n@@ -307,14 +307,14 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n     CHDChain& chain = it->second;\n \n     // Top up key pool\n-    int64_t target_size = std::max(gArgs.GetArg(""-keypool"", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    int64_t target_size = std::max(gArgs.GetArg(""-keypool"", DEFAULT_KEYPOOL_SIZE), (int64_t) 1)",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423983309,423983309,src/wallet/scriptpubkeyman.cpp
jonatack,2020-05-12 19:38:00,"f5eaa90 nit line 341 if you feel like touching it up:\n```diff\n-            WalletLogPrintf(""%s: Detected a used keypool key, mark all keypool key up to this key as used\n"", __func__);\n+            WalletLogPrintf(""%s: Detected a used keypool key, mark all keypool keys up to this key as used\n"", __func__);\n```",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423986044,423986044,src/wallet/scriptpubkeyman.cpp
jonatack,2020-05-12 19:42:05,f5eaa90 nit: I reckon this new code section could use a comment.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423988278,423988278,src/wallet/scriptpubkeyman.cpp
jonatack,2020-05-12 19:46:02,"f5eaa90 now that `BIP32_HARDENED_KEY_LIMIT` has been added, perhaps replace the 6 instances of `0x80000000` here with it (can be done as a follow-up, as there may be others in the codebase that can use this constant)",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r423990239,423990239,src/wallet/walletdb.cpp
fjahr,2020-05-13 13:45:49,"I think `target_size` can fall back to 1 here so it doesn't have to be done below.\n```suggestion\n    int64_t target_size = std::max(gArgs.GetArg(""-keypool"", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n```",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424449934,424449934,src/wallet/scriptpubkeyman.cpp
fjahr,2020-05-13 13:47:00,Fallback to 1 can be done where `target_size` is defined initially so it can just be removed in this line.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424450844,424450844,src/wallet/scriptpubkeyman.cpp
ryanofsky,2020-05-13 16:19:16,"> This doesn't seem right. It adds the key to setInternalKeyPool or setExternalKeyPool, but I don't think we want to do that?\n\nTo clarify, this wasn't just wasteful, but also a potentially dangerous bug right? LIke it could have caused new wallet addresses to be generated with the previous hd seed, and possibly stolen funds if money was sent to those addresses and the previous seed was unencry",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424565904,424565904,src/wallet/scriptpubkeyman.cpp
jkczyz,2020-05-13 16:33:52,Would it be useful to include the unexpected path in `strErr`?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424575480,424575480,src/wallet/walletdb.cpp
jkczyz,2020-05-13 16:37:27,This comment doesn't seem to add any value. Remove?,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424577883,424577883,src/wallet/walletdb.cpp
jonatack,2020-05-13 16:50:44,Agreed; updated the suggestion.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424586338,424586338,src/wallet/scriptpubkeyman.cpp
jonatack,2020-05-13 18:18:44,"Per today's review club session, should `AddInactiveHDChain` be called not only from `LoadWallet` but also from sethdseed (or elsewhere), and tests updated to check for that case.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r424639586,424639586,src/wallet/scriptpubkeyman.cpp
rajarshimaitra,2020-05-15 15:07:49,"As per the review club discussion, the intended behavior is only effective when the wallet is reloaded. As `SetHdChain` is writing the chains to the disk, `CWalletScanState` can only observe the presence of the old chains if it reads back from the disk. This means after setting the seed user must reload the wallet to track inactive chains which might not be readily obvious. could `SetHdChain` dete",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r425866177,425866177,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-15 21:14:49,I tried but ran into far too many linker errors than I cared to try to fix. The logical places to define this constant aren't necessarily included by or linked with the places that actually use it.,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426050282,426050282,src/wallet/walletdb.cpp
achow101,2020-05-15 22:00:24,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065688,426065688,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-15 22:00:28,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065717,426065717,src/wallet/scriptpubkeyman.h
achow101,2020-05-15 22:00:33,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065738,426065738,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-15 22:00:38,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065764,426065764,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-15 22:00:43,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065789,426065789,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-15 22:00:52,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065841,426065841,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-15 22:01:00,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065877,426065877,src/wallet/walletdb.cpp
achow101,2020-05-15 22:01:06,Done,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426065902,426065902,src/wallet/walletdb.cpp
achow101,2020-05-15 22:01:33,"Added a call to `AddInactiveHDChain` to `SetHDCHain` which is where chain rotation occurs.\n\nAlso updated the tests with a third wallet (`restore2`) which is not reloaded. The things that are checked with `restore` are also checked in `restore2`. I've checked that this test fails without the fix.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426066015,426066015,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-15 22:01:56,See https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426066015,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r426066136,426066136,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-19 21:08:31,"This doesn't seem to be used (I can comment it out and the branch still compiles).\n\nYou're comparing equality of `seed_id`s directly here: https://github.com/bitcoin/bitcoin/pull/17681/files#diff-5462ceb8a760a507152ab8b76bd48774R1084. I suggest you either change that to compare equality of the `CHDChain` objects, or remove this operator overload.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427600966,427600966,src/wallet/walletdb.h
jnewbery,2020-05-19 22:10:54,"nit: this could be updated to say ""If this is the active HDChain, then update the chain model in the database""",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427629797,427629797,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-19 22:19:11,"This is really crying out to be cleaned up:\n\n- there's a bool flag that substantially changes the logic of this function\n- the function is called in two places only, once with `true` and once with `false`\n- the argument name is confusing enough that it requires an inline comment that explains where the function is being called from.\n\nIt seems to me that this function should be split in",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427633081,427633081,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-19 22:22:44,grammar nit: s/it's/its/ :slightly_smiling_face: ,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427634413,427634413,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-19 22:39:46,"This is only called from within `MarkUnusedAddresses()`, which has already taken this lock. Rather than taking the lock recursively, I think it makes more sense to add an `EXCLUSIVE_LOCKS_REQUIRED` annotation.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427640400,427640400,src/wallet/scriptpubkeyman.cpp
jnewbery,2020-05-19 22:56:51,"A few suggestions:\n\n- drop the default constructor. The implicitly-defined default ctor will do exactly the same (ie nothing since this struct has no data members).\n- make it a `struct` so you can drop the `public:` access specifier\n- put the `operator()` definition on one line:\n\n```suggestion\nstruct KeyIDHasher\n{\n    size_t operator()(const CKeyID& id) const { return id.GetUint6",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427646231,427646231,src/wallet/scriptpubkeyman.h
ariard,2020-05-19 23:10:38,"45f2f6a\n\nInstead of commenting parameters inside function it could be on its top comment and name changed to `loading` or `rotating`. IMO function is a bit blurred it sets a chain but also writes it down to DB, and now does also rotation.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427650867,427650867,src/wallet/scriptpubkeyman.cpp
ryanofsky,2020-05-19 23:35:38,"re: https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427633081\n\n> This is really crying out to be cleaned up:\n\nAgree with this, but my immediate reaction here (without looking too deeply) is that the changes suggested here are only tangentially related to this PR and should be made in a separate PR before or after this one. There's already a lot going on here and it seems like you",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427658889,427658889,src/wallet/scriptpubkeyman.cpp
ariard,2020-05-20 00:06:31,"45f2f6a\n\nWhy internal is OR'd with the hardened bit  ? Isn't the hardening implied by `0x80000000` ?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427668785,427668785,src/wallet/walletdb.cpp
jnewbery,2020-05-20 00:29:43,">  the changes suggested here are only tangentially related to this PR\n\nPrior to this PR, the `memonly` flag only controlled whether the new seed was written to the database. This PR changes things so the majority of the function is in an `if` block that depends on the flag, so I'd argue it's not tangential.\n\nI think it's fine to do this in a follow-up, but if this PR gets retouched, no pr",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427675389,427675389,src/wallet/scriptpubkeyman.cpp
ariard,2020-05-20 00:56:39,"c93082e\n\nI think this is right but code could be made more intuitive IMO with better naming.\n\nAFAICT `target_size` is the size of keypool we want to keep constant. To do so you need to add new keys it after detecting onchain a key to which `index` is passed. We compute the ""detected_diff"" or ""consumed_diff"" based on chain counter tip. And `missing` is a bit deluding, these keys doesn't ""mi",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427682625,427682625,src/wallet/scriptpubkeyman.cpp
ariard,2020-05-20 00:59:21,"c93082e\n\nI think a better param name for `internal` could be `layout` and comment `which layout chain should be used, either true for internal or false for external"".\n\nAlso `unable to derive _keys_` or `unable to find HD-chain` ?",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427683281,427683281,src/wallet/scriptpubkeyman.h
achow101,2020-05-20 18:26:54,"I agree that this should be cleaned up. There are a few other functions that follow this same pattern, so I think it would be better to change them all at the same time in a followup PR.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r428219655,428219655,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-20 18:27:19,see https://github.com/bitcoin/bitcoin/pull/17681#discussion_r427633081,https://github.com/bitcoin/bitcoin/pull/17681#discussion_r428219871,428219871,src/wallet/scriptpubkeyman.cpp
achow101,2020-05-20 18:29:10,"The meaning is supposed to be that the path vector contains ints that correspond to `0`, `k`, and `i` with those ints being OR'd with the hardened bitmask. I guess it's not very clear and that sentence could probably be dropped.",https://github.com/bitcoin/bitcoin/pull/17681#discussion_r428220934,428220934,src/wallet/walletdb.cpp
