[
  {
    "sha": "11529c6e4f7288d8a64c488a726ee3821c7adefe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTUyOWM2ZTRmNzI4OGQ4YTY0YzQ4OGE3MjZlZTM4MjFjN2FkZWZl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2011-11-21T01:46:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-09T14:18:19Z"
      },
      "message": "Compressed pubkeys\n\nThis patch enabled compressed pubkeys when -compressedpubkeys is passed.\nThese are 33 bytes instead of 65, and require only marginally more CPU\npower when verifying. Compressed pubkeys have a different corresponding\naddress, so it is determined at generation. When -compressedpubkeys is\ngiven, all newly generated addresses will use a compressed key, while\nolder/other addresses keep using normal keys. Unpatched clients will\nrelay and verify these transactions.",
      "tree": {
        "sha": "0f727a647b327687eb7894d824eb47d3578dfb92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f727a647b327687eb7894d824eb47d3578dfb92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11529c6e4f7288d8a64c488a726ee3821c7adefe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11529c6e4f7288d8a64c488a726ee3821c7adefe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11529c6e4f7288d8a64c488a726ee3821c7adefe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11529c6e4f7288d8a64c488a726ee3821c7adefe/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1684f98b27de9323d24ee4489af54dd84083956a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1684f98b27de9323d24ee4489af54dd84083956a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1684f98b27de9323d24ee4489af54dd84083956a"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 79,
      "deletions": 50
    },
    "files": [
      {
        "sha": "dce932b4a8d30c4487345e102ae9f87d7a45574e",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "patch": "@@ -359,22 +359,25 @@ class CBitcoinAddress : public CBase58Data\n class CBitcoinSecret : public CBase58Data\n {\n public:\n-    void SetSecret(const CSecret& vchSecret)\n-    {\n+    void SetSecret(const CSecret& vchSecret, bool fCompressed)\n+    { \n+        assert(vchSecret.size() == 32);\n         SetData(fTestNet ? 239 : 128, &vchSecret[0], vchSecret.size());\n+        if (fCompressed)\n+            vchData.push_back(1);\n     }\n \n-    CSecret GetSecret()\n+    CSecret GetSecret(bool &fCompressedOut)\n     {\n         CSecret vchSecret;\n-        vchSecret.resize(vchData.size());\n-        memcpy(&vchSecret[0], &vchData[0], vchData.size());\n+        vchSecret.resize(32);\n+        memcpy(&vchSecret[0], &vchData[0], 32);\n+        fCompressedOut = vchData.size() == 33;\n         return vchSecret;\n     }\n \n     bool IsValid() const\n     {\n-        int nExpectedSize = 32;\n         bool fExpectTestNet = false;\n         switch(nVersion)\n         {\n@@ -388,12 +391,12 @@ class CBitcoinSecret : public CBase58Data\n             default:\n                 return false;\n         }\n-        return fExpectTestNet == fTestNet && vchData.size() == nExpectedSize;\n+        return fExpectTestNet == fTestNet && (vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1));\n     }\n \n-    CBitcoinSecret(const CSecret& vchSecret)\n+    CBitcoinSecret(const CSecret& vchSecret, bool fCompressed)\n     {\n-        SetSecret(vchSecret);\n+        SetSecret(vchSecret, fCompressed);\n     }\n \n     CBitcoinSecret()"
      },
      {
        "sha": "ce298401946fc079d29755a5240b9ac0ae69a636",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "patch": "@@ -1701,6 +1701,9 @@ Value validateaddress(const Array& params, bool fHelp)\n             ret.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             std::string strPubKey(vchPubKey.begin(), vchPubKey.end());\n             ret.push_back(Pair(\"pubkey58\", EncodeBase58(vchPubKey)));\n+            CKey key;\n+            key.SetPubKey(vchPubKey);\n+            ret.push_back(Pair(\"iscompressed\", key.IsCompressed()));\n         }\n         else if (pwalletMain->HaveCScript(address.GetHash160()))\n         {"
      },
      {
        "sha": "b3bbaca19fd450dd38f96aec9035bbca4ad6d8d9",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "patch": "@@ -860,12 +860,14 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n                 {\n                     CPrivKey pkey;\n                     ssValue >> pkey;\n+                    key.SetPubKey(vchPubKey);\n                     key.SetPrivKey(pkey);\n                 }\n                 else\n                 {\n                     CWalletKey wkey;\n                     ssValue >> wkey;\n+                    key.SetPubKey(vchPubKey);\n                     key.SetPrivKey(wkey.vchPrivKey);\n                 }\n                 if (!pwallet->LoadKey(key))"
      },
      {
        "sha": "b6d805c0c1b339f1a8f1fbc61c982864f756e400",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 30,
        "deletions": 4,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "patch": "@@ -59,16 +59,30 @@ class CKey\n protected:\n     EC_KEY* pkey;\n     bool fSet;\n+    bool fCompressedPubKey;\n+\n+    void SetCompressedPubKey()\n+    {\n+        EC_KEY_set_conv_form(pkey, POINT_CONVERSION_COMPRESSED);\n+        fCompressedPubKey = true;\n+    }\n \n public:\n-    CKey()\n+\n+    void Reset()\n     {\n+        fCompressedPubKey = false;\n         pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n         if (pkey == NULL)\n             throw key_error(\"CKey::CKey() : EC_KEY_new_by_curve_name failed\");\n         fSet = false;\n     }\n \n+    CKey()\n+    {\n+        Reset();\n+    }\n+\n     CKey(const CKey& b)\n     {\n         pkey = EC_KEY_dup(b.pkey);\n@@ -95,10 +109,17 @@ class CKey\n         return !fSet;\n     }\n \n-    void MakeNewKey()\n+    bool IsCompressed() const\n+    {\n+        return fCompressedPubKey;\n+    }\n+\n+    void MakeNewKey(bool fCompressed = true)\n     {\n         if (!EC_KEY_generate_key(pkey))\n             throw key_error(\"CKey::MakeNewKey() : EC_KEY_generate_key failed\");\n+        if (fCompressed)\n+            SetCompressedPubKey();\n         fSet = true;\n     }\n \n@@ -111,7 +132,7 @@ class CKey\n         return true;\n     }\n \n-    bool SetSecret(const CSecret& vchSecret)\n+    bool SetSecret(const CSecret& vchSecret, bool fCompressed = false)\n     {\n         EC_KEY_free(pkey);\n         pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n@@ -126,10 +147,12 @@ class CKey\n             throw key_error(\"CKey::SetSecret() : EC_KEY_regenerate_key failed\");\n         BN_clear_free(bn);\n         fSet = true;\n+        if (fCompressed || fCompressedPubKey)\n+            SetCompressedPubKey();\n         return true;\n     }\n \n-    CSecret GetSecret() const\n+    CSecret GetSecret(bool &fCompressed) const\n     {\n         CSecret vchRet;\n         vchRet.resize(32);\n@@ -140,6 +163,7 @@ class CKey\n         int n=BN_bn2bin(bn,&vchRet[32 - nBytes]);\n         if (n != nBytes) \n             throw key_error(\"CKey::GetSecret(): BN_bn2bin failed\");\n+        fCompressed = fCompressedPubKey;\n         return vchRet;\n     }\n \n@@ -161,6 +185,8 @@ class CKey\n         if (!o2i_ECPublicKey(&pkey, &pbegin, vchPubKey.size()))\n             return false;\n         fSet = true;\n+        if (vchPubKey.size() == 33)\n+            SetCompressedPubKey();\n         return true;\n     }\n "
      },
      {
        "sha": "6c3ed34923e80e0fd74044013917c3b35b2f86b9",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "patch": "@@ -29,8 +29,10 @@ bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned c\n \n bool CBasicKeyStore::AddKey(const CKey& key)\n {\n+    bool fCompressed = false;\n+    CSecret secret = key.GetSecret(fCompressed);\n     CRITICAL_BLOCK(cs_KeyStore)\n-        mapKeys[CBitcoinAddress(key.GetPubKey())] = key.GetSecret();\n+        mapKeys[CBitcoinAddress(key.GetPubKey())] = make_pair(secret, fCompressed);\n     return true;\n }\n \n@@ -77,16 +79,6 @@ bool CCryptoKeyStore::SetCrypted()\n     return true;\n }\n \n-std::vector<unsigned char> CCryptoKeyStore::GenerateNewKey()\n-{\n-    RandAddSeedPerfmon();\n-    CKey key;\n-    key.MakeNewKey();\n-    if (!AddKey(key))\n-        throw std::runtime_error(\"CCryptoKeyStore::GenerateNewKey() : AddKey failed\");\n-    return key.GetPubKey();\n-}\n-\n bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n@@ -103,6 +95,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n             if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n                 return false;\n             CKey key;\n+            key.SetPubKey(vchPubKey);\n             key.SetSecret(vchSecret);\n             if (key.GetPubKey() == vchPubKey)\n                 break;\n@@ -125,7 +118,8 @@ bool CCryptoKeyStore::AddKey(const CKey& key)\n \n         std::vector<unsigned char> vchCryptedSecret;\n         std::vector<unsigned char> vchPubKey = key.GetPubKey();\n-        if (!EncryptSecret(vMasterKey, key.GetSecret(), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n+        bool fCompressed;\n+        if (!EncryptSecret(vMasterKey, key.GetSecret(fCompressed), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n             return false;\n \n         if (!AddCryptedKey(key.GetPubKey(), vchCryptedSecret))\n@@ -147,19 +141,24 @@ bool CCryptoKeyStore::AddCryptedKey(const std::vector<unsigned char> &vchPubKey,\n     return true;\n }\n \n-bool CCryptoKeyStore::GetSecret(const CBitcoinAddress &address, CSecret& vchSecretOut) const\n+bool CCryptoKeyStore::GetKey(const CBitcoinAddress &address, CKey& keyOut) const\n {\n     CRITICAL_BLOCK(cs_KeyStore)\n     {\n         if (!IsCrypted())\n-            return CBasicKeyStore::GetSecret(address, vchSecretOut);\n+            return CBasicKeyStore::GetKey(address, keyOut);\n \n         CryptedKeyMap::const_iterator mi = mapCryptedKeys.find(address);\n         if (mi != mapCryptedKeys.end())\n         {\n             const std::vector<unsigned char> &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            return DecryptSecret(vMasterKey, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecretOut);\n+            CSecret vchSecret;\n+            if (!DecryptSecret(vMasterKey, vchCryptedSecret, Hash(vchPubKey.begin(), vchPubKey.end()), vchSecret))\n+                return false;\n+            keyOut.SetPubKey(vchPubKey);\n+            keyOut.SetSecret(vchSecret);\n+            return true;\n         }\n     }\n     return false;\n@@ -190,14 +189,15 @@ bool CCryptoKeyStore::EncryptKeys(CKeyingMaterial& vMasterKeyIn)\n             return false;\n \n         fUseCrypto = true;\n-        CKey key;\n         BOOST_FOREACH(KeyMap::value_type& mKey, mapKeys)\n         {\n-            if (!key.SetSecret(mKey.second))\n+            CKey key;\n+            if (!key.SetSecret(mKey.second.first, false))\n                 return false;\n             const std::vector<unsigned char> vchPubKey = key.GetPubKey();\n             std::vector<unsigned char> vchCryptedSecret;\n-            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n+            bool fCompressed;\n+            if (!EncryptSecret(vMasterKeyIn, key.GetSecret(fCompressed), Hash(vchPubKey.begin(), vchPubKey.end()), vchCryptedSecret))\n                 return false;\n             if (!AddCryptedKey(vchPubKey, vchCryptedSecret))\n                 return false;"
      },
      {
        "sha": "801afbf91718cb6b4d05de067314c821b8c6a90c",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "patch": "@@ -20,15 +20,7 @@ class CKeyStore\n \n     // Check whether a key corresponding to a given address is present in the store.\n     virtual bool HaveKey(const CBitcoinAddress &address) const =0;\n-    virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const \n-    {\n-        CSecret vchSecret;\n-        if (!GetSecret(address, vchSecret))\n-            return false;\n-        if (!keyOut.SetSecret(vchSecret))\n-            return false;\n-        return true;\n-    }\n+    virtual bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const =0;\n     virtual void GetKeys(std::set<CBitcoinAddress> &setAddress) const =0;\n     virtual bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n \n@@ -39,17 +31,17 @@ class CKeyStore\n \n     // Generate a new key, and add it to the store\n     virtual std::vector<unsigned char> GenerateNewKey();\n-    virtual bool GetSecret(const CBitcoinAddress &address, CSecret& vchSecret) const\n+    virtual bool GetSecret(const CBitcoinAddress &address, CSecret& vchSecret, bool &fCompressed) const\n     {\n         CKey key;\n         if (!GetKey(address, key))\n             return false;\n-        vchSecret = key.GetSecret();\n+        vchSecret = key.GetSecret(fCompressed);\n         return true;\n     }\n };\n \n-typedef std::map<CBitcoinAddress, CSecret> KeyMap;\n+typedef std::map<CBitcoinAddress, std::pair<CSecret, bool> > KeyMap;\n typedef std::map<uint160, CScript > ScriptMap;\n \n // Basic key store, that keeps keys in an address->secret map\n@@ -81,14 +73,15 @@ class CBasicKeyStore : public CKeyStore\n             }\n         }\n     }\n-    bool GetSecret(const CBitcoinAddress &address, CSecret &vchSecret) const\n+    bool GetKey(const CBitcoinAddress &address, CKey &keyOut) const\n     {\n         CRITICAL_BLOCK(cs_KeyStore)\n         {\n             KeyMap::const_iterator mi = mapKeys.find(address);\n             if (mi != mapKeys.end())\n             {\n-                vchSecret = (*mi).second;\n+                keyOut.Reset();\n+                keyOut.SetSecret((*mi).second.first, (*mi).second.second);\n                 return true;\n             }\n         }\n@@ -154,7 +147,6 @@ class CCryptoKeyStore : public CBasicKeyStore\n     }\n \n     virtual bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    std::vector<unsigned char> GenerateNewKey();\n     bool AddKey(const CKey& key);\n     bool HaveKey(const CBitcoinAddress &address) const\n     {\n@@ -166,7 +158,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n         }\n         return false;\n     }\n-    bool GetSecret(const CBitcoinAddress &address, CSecret& vchSecret) const;\n+    bool GetKey(const CBitcoinAddress &address, CKey& keyOut) const;\n     bool GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char>& vchPubKeyOut) const;\n     void GetKeys(std::set<CBitcoinAddress> &setAddress) const\n     {"
      },
      {
        "sha": "471421e75ce990fc696d8247d2b0afe88bff5e50",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11529c6e4f7288d8a64c488a726ee3821c7adefe/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "patch": "@@ -62,7 +62,9 @@ Value importprivkey(const Array& params, bool fHelp)\n     if (!fGood) throw JSONRPCError(-5,\"Invalid private key\");\n \n     CKey key;\n-    key.SetSecret(vchSecret.GetSecret());\n+    bool fCompressed;\n+    CSecret secret = vchSecret.GetSecret(fCompressed);\n+    key.SetSecret(secret, fCompressed);\n     CBitcoinAddress vchAddress = CBitcoinAddress(key.GetPubKey());\n \n     CRITICAL_BLOCK(cs_main)\n@@ -95,7 +97,8 @@ Value dumpprivkey(const Array& params, bool fHelp)\n     if (!address.SetString(strAddress))\n         throw JSONRPCError(-5, \"Invalid bitcoin address\");\n     CSecret vchSecret;\n-    if (!pwalletMain->GetSecret(address, vchSecret))\n+    bool fCompressed;\n+    if (!pwalletMain->GetSecret(address, vchSecret, fCompressed))\n         throw JSONRPCError(-4,\"Private key for address \" + strAddress + \" is not known\");\n-    return CBitcoinSecret(vchSecret).ToString();\n+    return CBitcoinSecret(vchSecret, fCompressed).ToString();\n }"
      }
    ]
  },
  {
    "sha": "d4d9c734c315e99136fe245c5733ca75cab9f8bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGQ5YzczNGMzMTVlOTkxMzZmZTI0NWM1NzMzY2E3NWNhYjlmOGJm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2011-12-25T14:02:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-09T14:18:19Z"
      },
      "message": "Compact signatures with compressed pubkeys",
      "tree": {
        "sha": "bcbe825e800b516a9c93ca5aea1bb5fbb7327b03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcbe825e800b516a9c93ca5aea1bb5fbb7327b03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4d9c734c315e99136fe245c5733ca75cab9f8bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4d9c734c315e99136fe245c5733ca75cab9f8bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4d9c734c315e99136fe245c5733ca75cab9f8bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4d9c734c315e99136fe245c5733ca75cab9f8bf/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11529c6e4f7288d8a64c488a726ee3821c7adefe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11529c6e4f7288d8a64c488a726ee3821c7adefe"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c28222a9a16c4aeda4a7d085b9da900f56739112",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4d9c734c315e99136fe245c5733ca75cab9f8bf/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4d9c734c315e99136fe245c5733ca75cab9f8bf/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=d4d9c734c315e99136fe245c5733ca75cab9f8bf",
        "patch": "@@ -236,6 +236,8 @@ class CKey\n             {\n                 CKey keyRec;\n                 keyRec.fSet = true;\n+                if (fCompressedPubKey)\n+                    keyRec.SetCompressedPubKey();\n                 if (ECDSA_SIG_recover_key_GFp(keyRec.pkey, sig, (unsigned char*)&hash, sizeof(hash), i, 1) == 1)\n                     if (keyRec.GetPubKey() == this->GetPubKey())\n                     {\n@@ -247,7 +249,7 @@ class CKey\n             if (nRecId == -1)\n                 throw key_error(\"CKey::SignCompact() : unable to construct recoverable key\");\n \n-            vchSig[0] = nRecId+27;\n+            vchSig[0] = nRecId+27+(fCompressedPubKey ? 4 : 0);\n             BN_bn2bin(sig->r,&vchSig[33-(nBitsR+7)/8]);\n             BN_bn2bin(sig->s,&vchSig[65-(nBitsS+7)/8]);\n             fOk = true;\n@@ -264,15 +266,21 @@ class CKey\n     {\n         if (vchSig.size() != 65)\n             return false;\n-        if (vchSig[0]<27 || vchSig[0]>=31)\n+        int nV = vchSig[0];\n+        if (nV<27 || nV>=35)\n             return false;\n         ECDSA_SIG *sig = ECDSA_SIG_new();\n         BN_bin2bn(&vchSig[1],32,sig->r);\n         BN_bin2bn(&vchSig[33],32,sig->s);\n \n         EC_KEY_free(pkey);\n         pkey = EC_KEY_new_by_curve_name(NID_secp256k1);\n-        if (ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), vchSig[0] - 27, 0) == 1)\n+        if (nV >= 31)\n+        {\n+            SetCompressedPubKey();\n+            nV -= 4;\n+        }\n+        if (ECDSA_SIG_recover_key_GFp(pkey, sig, (unsigned char*)&hash, sizeof(hash), nV - 27, 0) == 1)\n         {\n             fSet = true;\n             ECDSA_SIG_free(sig);"
      }
    ]
  },
  {
    "sha": "b3974ec9d49e20e72e502e901b6c5aab5ac33b03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzk3NGVjOWQ0OWUyMGU3MmU1MDJlOTAxYjZjNWFhYjVhYzMzYjAz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-08T15:59:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-01-09T14:18:19Z"
      },
      "message": "Unit tests for EC key routines\n\nThis tests:\n* creation of keys from base58-encoded strings\n* extracting public keys and addresses\n* compressed public keys\n* compact signatures and key recovery",
      "tree": {
        "sha": "af530c8b64c107bbe34cd45474d8fc336434de4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af530c8b64c107bbe34cd45474d8fc336434de4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3974ec9d49e20e72e502e901b6c5aab5ac33b03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3974ec9d49e20e72e502e901b6c5aab5ac33b03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3974ec9d49e20e72e502e901b6c5aab5ac33b03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3974ec9d49e20e72e502e901b6c5aab5ac33b03/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4d9c734c315e99136fe245c5733ca75cab9f8bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4d9c734c315e99136fe245c5733ca75cab9f8bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4d9c734c315e99136fe245c5733ca75cab9f8bf"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 138,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bc8759b6fac441d5c689ba99bca7337343bfaf1c",
        "filename": "src/test/key_tests.cpp",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3974ec9d49e20e72e502e901b6c5aab5ac33b03/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3974ec9d49e20e72e502e901b6c5aab5ac33b03/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=b3974ec9d49e20e72e502e901b6c5aab5ac33b03",
        "patch": "@@ -0,0 +1,138 @@\n+#include <boost/test/unit_test.hpp>\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"key.h\"\n+#include \"base58.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+using namespace std;\n+\n+static const string strSecret1 (\"5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj\");\n+static const string strSecret2 (\"5KC4ejrDjv152FGwP386VD1i2NYc5KkfSMyv1nGy1VGDxGHqVY3\");\n+static const string strSecret1C(\"Kwr371tjA9u2rFSMZjTNun2PXXP3WPZu2afRHTcta6KxEUdm1vEw\");\n+static const string strSecret2C(\"L3Hq7a8FEQwJkW1M2GNKDW28546Vp5miewcCzSqUD9kCAXrJdS3g\");\n+\n+#ifdef KEY_TESTS_DUMPINFO\n+void dumpKeyInfo(uint256 privkey)\n+{\n+    CSecret secret;\n+    secret.resize(32);\n+    memcpy(&secret[0], &privkey, 32);\n+    vector<unsigned char> sec;\n+    sec.resize(32);\n+    memcpy(&sec[0], &secret[0], 32);\n+    printf(\"  * secret (hex): %s\\n\", HexStr(sec).c_str());\n+\n+    for (int nCompressed=0; nCompressed<2; nCompressed++)\n+    {\n+        bool fCompressed = nCompressed == 1;\n+        printf(\"  * %s:\\n\", fCompressed ? \"compressed\" : \"uncompressed\");\n+        CBitcoinSecret bsecret;\n+        bsecret.SetSecret(secret, fCompressed);\n+        printf(\"    * secret (base58): %s\\n\", bsecret.ToString().c_str());\n+        CKey key;\n+        key.SetSecret(secret, fCompressed);\n+        vector<unsigned char> vchPubKey = key.GetPubKey();\n+        printf(\"    * pubkey (hex): %s\\n\", HexStr(vchPubKey).c_str());\n+        printf(\"    * address (base58): %s\\n\", CBitcoinAddress(vchPubKey).ToString().c_str());\n+    }\n+}\n+#endif\n+\n+\n+BOOST_AUTO_TEST_SUITE(key_tests)\n+\n+BOOST_AUTO_TEST_CASE(key_test1)\n+{\n+    CBitcoinSecret bsecret1, bsecret2, bsecret1C, bsecret2C;\n+    bsecret1.SetString (strSecret1);\n+    bsecret2.SetString (strSecret2);\n+    bsecret1C.SetString(strSecret1C);\n+    bsecret2C.SetString(strSecret2C);\n+\n+    bool fCompressed;\n+    CSecret secret1  = bsecret1.GetSecret (fCompressed);\n+    BOOST_CHECK(fCompressed == false);\n+    CSecret secret2  = bsecret2.GetSecret (fCompressed);\n+    BOOST_CHECK(fCompressed == false);\n+    CSecret secret1C = bsecret1C.GetSecret(fCompressed);\n+    BOOST_CHECK(fCompressed == true);\n+    CSecret secret2C = bsecret2C.GetSecret(fCompressed);\n+    BOOST_CHECK(fCompressed == true);\n+\n+    BOOST_CHECK(secret1 == secret1C);\n+    BOOST_CHECK(secret2 == secret2C);\n+\n+    CKey key1, key2, key1C, key2C;\n+    key1.SetSecret(secret1, false);\n+    key2.SetSecret(secret2, false);\n+    key1C.SetSecret(secret1, true);\n+    key2C.SetSecret(secret2, true);\n+\n+    BOOST_CHECK(CBitcoinAddress(key1.GetPubKey ()).ToString() == \"1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ\");\n+    BOOST_CHECK(CBitcoinAddress(key2.GetPubKey ()).ToString() == \"1F5y5E5FMc5YzdJtB9hLaUe43GDxEKXENJ\");\n+    BOOST_CHECK(CBitcoinAddress(key1C.GetPubKey()).ToString() == \"1NoJrossxPBKfCHuJXT4HadJrXRE9Fxiqs\");\n+    BOOST_CHECK(CBitcoinAddress(key2C.GetPubKey()).ToString() == \"1CRj2HyM1CXWzHAXLQtiGLyggNT9WQqsDs\");\n+\n+    for (int n=0; n<16; n++)\n+    {\n+        string strMsg = strprintf(\"Very secret message %i: 11\", n);\n+        uint256 hashMsg = Hash(strMsg.begin(), strMsg.end());\n+\n+        // normal signatures\n+\n+        vector<unsigned char> sign1, sign2, sign1C, sign2C;\n+\n+        BOOST_CHECK(key1.Sign (hashMsg, sign1));\n+        BOOST_CHECK(key2.Sign (hashMsg, sign2));\n+        BOOST_CHECK(key1C.Sign(hashMsg, sign1C));\n+        BOOST_CHECK(key2C.Sign(hashMsg, sign2C));\n+\n+        BOOST_CHECK( key1.Verify(hashMsg, sign1));\n+        BOOST_CHECK(!key1.Verify(hashMsg, sign2));\n+        BOOST_CHECK( key1.Verify(hashMsg, sign1C));\n+        BOOST_CHECK(!key1.Verify(hashMsg, sign2C));\n+\n+        BOOST_CHECK(!key2.Verify(hashMsg, sign1));\n+        BOOST_CHECK( key2.Verify(hashMsg, sign2));\n+        BOOST_CHECK(!key2.Verify(hashMsg, sign1C));\n+        BOOST_CHECK( key2.Verify(hashMsg, sign2C));\n+\n+        BOOST_CHECK( key1C.Verify(hashMsg, sign1));\n+        BOOST_CHECK(!key1C.Verify(hashMsg, sign2));\n+        BOOST_CHECK( key1C.Verify(hashMsg, sign1C));\n+        BOOST_CHECK(!key1C.Verify(hashMsg, sign2C));\n+\n+        BOOST_CHECK(!key2C.Verify(hashMsg, sign1));\n+        BOOST_CHECK( key2C.Verify(hashMsg, sign2));\n+        BOOST_CHECK(!key2C.Verify(hashMsg, sign1C));\n+        BOOST_CHECK( key2C.Verify(hashMsg, sign2C));\n+\n+        // compact signatures (with key recovery)\n+\n+        vector<unsigned char> csign1, csign2, csign1C, csign2C;\n+\n+        BOOST_CHECK(key1.SignCompact (hashMsg, csign1));\n+        BOOST_CHECK(key2.SignCompact (hashMsg, csign2));\n+        BOOST_CHECK(key1C.SignCompact(hashMsg, csign1C));\n+        BOOST_CHECK(key2C.SignCompact(hashMsg, csign2C));\n+\n+        CKey rkey1, rkey2, rkey1C, rkey2C;\n+\n+        BOOST_CHECK(rkey1.SetCompactSignature (hashMsg, csign1));\n+        BOOST_CHECK(rkey2.SetCompactSignature (hashMsg, csign2));\n+        BOOST_CHECK(rkey1C.SetCompactSignature(hashMsg, csign1C));\n+        BOOST_CHECK(rkey2C.SetCompactSignature(hashMsg, csign2C));\n+\n+\n+        BOOST_CHECK(rkey1.GetPubKey()  == key1.GetPubKey());\n+        BOOST_CHECK(rkey2.GetPubKey()  == key2.GetPubKey());\n+        BOOST_CHECK(rkey1C.GetPubKey() == key1C.GetPubKey());\n+        BOOST_CHECK(rkey2C.GetPubKey() == key2C.GetPubKey());\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]