[
  {
    "sha": "d2c4904ef707e2023ceb8dfbfe61a92c4060e100",
    "node_id": "C_kwDOABII59oAKGQyYzQ5MDRlZjcwN2UyMDIzY2ViOGRmYmZlNjFhOTJjNDA2MGUxMDA",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-27T15:34:54Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-10-27T15:49:53Z"
      },
      "message": "test: MiniWallet: more deterministic coin selection for coinbase UTXOs (oldest first)\n\nThe coin selection strategy for MiniWallet is quite straight-forward: simply\npick a single UTXO with the largest value:\n\nself._utxos = sorted(self._utxos, key=lambda k: k['value'])\nutxo_to_spend = utxo_to_spend or self._utxos.pop()\n\nIf there are several candidates with the same value, however, it is not clear\nwhich one is taken.  This can be particularly problematic for coinbase outputs\nwith fixed block subsidy, since spending could lead to a\n'bad-txns-premature-spend-of-coinbase' reject if an UTXO from a too-recent\nblock is picked.  Introduce block height as second criteria (saved in\nself._utxos in the methods generate(...) and rescan_utxos(...)), in order to\navoid potential issues with coinbases that are not matured yet.",
      "tree": {
        "sha": "58e73d18758bfe9bb93c34dd207cff2db163f065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58e73d18758bfe9bb93c34dd207cff2db163f065"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2c4904ef707e2023ceb8dfbfe61a92c4060e100",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c4904ef707e2023ceb8dfbfe61a92c4060e100",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2c4904ef707e2023ceb8dfbfe61a92c4060e100",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2c4904ef707e2023ceb8dfbfe61a92c4060e100/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab25ef8c7f767258d5fe44f53b35ad8bd51ed5cd"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d2c21f35258ef599c04585124fa63e4d1cf6b33f",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2c4904ef707e2023ceb8dfbfe61a92c4060e100/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2c4904ef707e2023ceb8dfbfe61a92c4060e100/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=d2c4904ef707e2023ceb8dfbfe61a92c4060e100",
        "patch": "@@ -88,13 +88,13 @@ def rescan_utxos(self):\n         res = self._test_node.scantxoutset(action=\"start\", scanobjects=[self.get_descriptor()])\n         assert_equal(True, res['success'])\n         for utxo in res['unspents']:\n-            self._utxos.append({'txid': utxo['txid'], 'vout': utxo['vout'], 'value': utxo['amount']})\n+            self._utxos.append({'txid': utxo['txid'], 'vout': utxo['vout'], 'value': utxo['amount'], 'height': utxo['height']})\n \n     def scan_tx(self, tx):\n         \"\"\"Scan the tx for self._scriptPubKey outputs and add them to self._utxos\"\"\"\n         for out in tx['vout']:\n             if out['scriptPubKey']['hex'] == self._scriptPubKey.hex():\n-                self._utxos.append({'txid': tx['txid'], 'vout': out['n'], 'value': out['value']})\n+                self._utxos.append({'txid': tx['txid'], 'vout': out['n'], 'value': out['value'], 'height': 0})\n \n     def sign_tx(self, tx, fixed_length=True):\n         \"\"\"Sign tx that has been created by MiniWallet in P2PK mode\"\"\"\n@@ -115,8 +115,9 @@ def generate(self, num_blocks, **kwargs):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n         blocks = self._test_node.generatetodescriptor(num_blocks, self.get_descriptor(), **kwargs)\n         for b in blocks:\n-            cb_tx = self._test_node.getblock(blockhash=b, verbosity=2)['tx'][0]\n-            self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})\n+            block_info = self._test_node.getblock(blockhash=b, verbosity=2)\n+            cb_tx = block_info['tx'][0]\n+            self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value'], 'height': block_info['height']})\n         return blocks\n \n     def get_descriptor(self):\n@@ -170,7 +171,7 @@ def send_to(self, *, from_node, scriptPubKey, amount, fee=1000):\n \n     def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None, mempool_valid=True, locktime=0, sequence=0):\n         \"\"\"Create and return a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n-        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        self._utxos = sorted(self._utxos, key=lambda k: (k['value'], -k['height']))\n         utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n         if self._priv_key is None:\n             vsize = Decimal(96)  # anyone-can-spend"
      }
    ]
  }
]