DrahtBot,2019-07-23 06:38:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18267 (BIP-325: Signet [consensus] by kallewoof)\n* #18115 (wallet: Pass in transactions and messages for signing instead",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-514074976,514074976,
laanwj,2019-07-23 13:32:35,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-514211484,514211484,
kallewoof,2019-07-29 03:30:17,"@harding \n\n> I really like the idea of BIP322, but I don't like that this changes existing RPCs in way that's not backwards compatible (e.g. a signmessage created and verified on 0.18 produces a ""CDataStream::read(): end of data: iostream error"" here). Similarly, a P2PKH signmessage created on this branch results in false when checked with 0.18. Either P2PKH signing/verifying should be special",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515831681,515831681,
harding,2019-07-29 04:12:19,"@kallewoof \n\n> >  I don't like that this changes existing RPCs in way that's not backwards compatible [...]\n\n> I don't really agree. Proving that you own an address is something that you do ""now"", not something you do and keep the proof around indefinitely. [...]\n\nI think there are several points here:\n\n1. This change breaks backwards compatibility between different versions of Bit",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515837523,515837523,
kallewoof,2019-07-29 04:55:26,"I see what you're saying.\n\nI think adding an optional 'format' which defaults to 'bip322' but can be set to 'legacy' for 'sign', and autodetection in 'verify' should be sufficient. What do you think?",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515844196,515844196,
harding,2019-07-29 05:40:13,"@kallewoof \n\n> I think adding an optional 'format' which defaults to 'bip322' but can be set to 'legacy' for 'sign', and autodetection in 'verify' should be sufficient. What do you think?\n\nSounds reasonable to me.  I'd slightly prefer the default be legacy if the user provides a P2PKH address---but not enough to argue about it.  Thanks! ",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515851920,515851920,
sipa,2019-07-29 05:44:03,"Thanks for picking this up again.\n\nI don't think we should gratuitously break compatibility with the existing signature scheme; that's generally not the approach we take with RPCs, and given that the scheme is implemented in other software too probably even more disruptive.\n\nI wouldn't be opposed to adding an exception in BIP322 that for P2PKH address the existing key recovery based scheme is ",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515852677,515852677,
kallewoof,2019-07-29 05:54:55,"@harding @sipa Defaulting to legacy for P2PKH means we can basically never get rid of the legacy code. That's okay, but unfortunate, IMO.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515854860,515854860,
sipa,2019-07-29 06:07:30,"I didn't expect we'd ever be able to get rid of the old format, even if the default would be a new format now. That'd indeed unfortunate, but that's life when you want compatibility. I don't think it's a big problem; it's not that much code.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515857539,515857539,
kallewoof,2019-07-29 06:29:59,"@harding @sipa I have updated the specification to include the special case, and I also added a description of the legacy format: https://github.com/bitcoin/bips/blob/e24e86b482e394e18803f14c7e2338aab9b7e1e2/bip-0322.mediawiki (from https://github.com/bitcoin/bips/pull/808)\n\nLet me know if I got something wrong there. I wrote the legacy format spec based on the code.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515862737,515862737,
kallewoof,2019-07-29 08:51:53,"I updated the code in this PR to do what was suggested (use legacy if p2pkh, otherwise use bip322), and I also updated bip322 to require this.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-515905247,515905247,
harding,2019-07-29 14:40:14,"Tested `signmessage` and `verifymessage` both ways between 0.18 and this branch, looks good, thanks!  You may want to consider making `signmessagewithprivkey` default to using P2PKH for backwards compatibility and add a third argument to that RPC that allows selecting P2WPKH (I'd suggest the argument select between P2PKH and P2WPKH (rather than legacy vs bip322) so that it can be extended to take ",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516020208,516020208,
kallewoof,2019-07-29 15:00:54,"@harding\n\nFYI the bitcoin/bips PR was merged as you were reviewing it; I opened a fix-up here: https://github.com/bitcoin/bips/pull/814\n\nThanks for testing!\n\n> You may want to consider making `signmessagewithprivkey` default to using P2PKH for backwards compatibility and add a third argument to that RPC that allows selecting P2WPKH (I'd suggest the argument select between P2PKH and P2W",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516028954,516028954,
harding,2019-07-29 17:11:45,"Concept ACK based on light testing.  The API changes default to backwards compatibility with legacy signmessage and BIP322 is an excellent extension of the signmessage mechanism.\n\nNeeds fix and testing for this case:\n\n```text\n$ _gna() { src/bitcoin-cli getnewaddress '' bech32 ; } ; export -f _gna\n$ bitcoin-cli addmultisigaddress 2 '[""'$(_gna)'"", ""'$(_gna)'"", ""'$(_gna)'""]' '' bech32\n{",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516079185,516079185,
kallewoof,2019-07-30 05:39:33,"@harding I looked closer and it looks like a bunch of juggling is required to do multisig proving. I could sort of make an attempt to make it prove for the case where you have all the keys, but that doesn't seem overly interesting. For now, I have updated the error message to note that multisig is not yet supported, though this is not a limitation in the BIP322 spec, only in the code.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516270489,516270489,
sipa,2019-07-30 05:53:46,"For generic multisig signing you basically want something like PSBT, but then for messages instead of transactions... certainly not for inclusion in the first PR though.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516273707,516273707,
kallewoof,2019-07-30 06:00:11,@sipa That is the conclusion I made as well (PSBT).,https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516275197,516275197,
practicalswift,2019-07-30 09:21:29,"Concept ACK now that we are backwards compatible by defaulting to legacy for P2PKH\n\n",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516339126,516339126,
NicolasDorier,2019-07-31 07:37:32,"Concept ACK.\nWill try to implement it in NBitcoin.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516734883,516734883,
kallewoof,2019-07-31 08:09:02,"@fanquake I think the ""Needs Conceptual Review"" flag can be removed. Got Conceptual ACKs from @laanwj, @harding, @practicalswift, and @NicolasDorier (and no Concept NACKs from anyone).",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-516744856,516744856,
kallewoof,2019-08-01 07:22:16,"FTR, I updated the BIP to fix verification which was a bit broken. I have also updated the code here. New BIP can be seen here: https://github.com/bitcoin/bips/blob/499a2eaf8943c1fbfef2dd9a0ef2201d70352fbb/bip-0322.mediawiki",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-517155975,517155975,
luke-jr,2019-08-20 00:36:58,"Abstract, tentative concept NACK:\n\nI'm not convinced BIP322 is itself a good idea as-is. Its multiple-proofs concept seems ripe to encourage misuse of signatures as a false ""proof"" of spend-ability rather than simply proving a receiver (as current signatures do).\n\nIf BIP322 is intended for proving spend-ability, then it confuses the matter of addresses (which don't spend), and also conflic",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-522805617,522805617,
kallewoof,2019-08-20 06:20:45,"@luke-jr\n\n> I'm not convinced BIP322 is itself a good idea as-is. Its multiple-proofs concept seems ripe to encourage misuse of signatures as a false ""proof"" of spend-ability rather than simply proving a receiver (as current signatures do).\n\nThe argument for multiple proofs is that it's not trivial to verify that many independent proofs are not overlapping. This becomes more serious if/whe",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-522871224,522871224,
luke-jr,2019-08-20 12:43:12,"@kallewoof Existing signatures do not prove you have access to any private keys nor funds, only that you are the recipient to future transactions paying an address (and therefore the right person to be signing contractual terms for such payments). Because it proves nothing about existing funds or keys, there is no such thing as ""overlapping"" proofs to worry about.\n\nIf you intend to cover more ",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-522996437,522996437,
kallewoof,2019-08-21 02:38:06,"@luke-jr Yes I agree that prove funds may need a separate RPC. I chose to exclude that from the BIP because there are things that should be resolved before including it, but it should be easy to add as an extension to BIP-322. This is why it inherently supports multiple proofs, even if as you mention this is not an issue with address proving.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-523270985,523270985,
real-or-random,2019-08-28 10:20:27,"I know I'm late to the party but I would like to give some conceptual feedback.  But I have some more serious issues understanding the BIP.\n\nOn a high level, it seems to me that the purpose of the BIP is not entirely clear. At the moment, it is only for signing messages but includes the entire scripting system. As I understand it, the reason is future extensions to proving ownership of funds. ",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-525680906,525680906,
kallewoof,2019-08-29 06:32:33,"> On a high level, it seems to me that the purpose of the BIP is not entirely clear. At the moment, it is only for signing messages but includes the entire scripting system. As I understand it, the reason is future extensions to proving ownership of funds. If this is right, I'm not convinced by this approach: If we want a BIP for signing and verifying messages, this can much simpler (if restricted",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-526045151,526045151,
real-or-random,2019-08-29 09:05:13,"> No, this is not the reason. The reason why the script system is used is unrelated to a potential future funds proving tool, and is purely done this way to make future upgrades (e.g. taproot, schnorr, ...) seamless. New address formats and such will work out of the box assuming the underlying node(s) actually understand them.\n\nOkay, I see. This was not clear at all the me from reading the BIP",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-526096522,526096522,
kallewoof,2019-09-02 04:59:21,"@real-or-random Thanks a lot for all your feedback. Sorry it took some days to get back to you.\n\nWould you mind opening a PR to https://github.com/bitcoin/bips to make the BIP clearer?\n\nEdit: to answer your question, if you get an inconclusive proof from someone, it means your node is probably old. If it isn't old, the prover is probably using broken software to generate said proof. This f",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-527001787,527001787,
luke-jr,2019-09-04 03:11:01,"A good idea someone had: refuse to validate a signed message if the key backing it has any outstanding UTXOs. This does need some care to ensure people can validate old signed messages, but hopefully that's not a fatal issue.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-527720750,527720750,
real-or-random,2019-09-09 07:38:15,"\n> Would you mind opening a PR to https://github.com/bitcoin/bips to make the BIP clearer?\n\nI'll be gone for two weeks but I'll be able to open a PR afterwards. I think the main points are\n * ""signed message"" vs ""signature"" vs ""proof""\n * explaining that the verification is always done with respect to an address\n * and mentioning this:\n\n> If I read the code correctly, the basic idea",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-529338353,529338353,
kallewoof,2019-09-24 06:48:29,@practicalswift Thanks for the feedback. I believe I addressed everything you pointed out.,https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-534416775,534416775,
kallewoof,2019-09-24 07:26:03,@real-or-random I am working through your comments and will try to make a new pull request to reflect your ideas shortly. Sorry for the delay.,https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-534428502,534428502,
gmaxwell,2019-12-21 16:20:10,"> I wouldn't be opposed to adding an exception in BIP322 that for P2PKH address the existing key recovery based scheme is used;\n\nI think it would be nicer if it were just a separate RPC so that the old format (esp verifying) could be eventually sunset.",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-568193047,568193047,
gmaxwell,2019-12-21 16:36:48,"> On a high level, it seems to me that the purpose of the BIP is not entirely clear. At the moment, it is only for signing messages but includes the entire scripting system. [...] Does the BIP implicitly assume that a scriptPubKey contains exactly one pubkey?\n\nI think this isn't the best way to think about this facility.   Bitcoin transactions are not signed with ECDSA.  They are signed with a",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-568194168,568194168,
kallewoof,2019-12-23 07:46:30,"Apologies about lack of activity. My work pulled me away for a couple of months. I'm getting back to things now, though. ><",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-568390178,568390178,
real-or-random,2019-12-23 13:43:58,"> > On a high level, it seems to me that the purpose of the BIP is not entirely clear. At the moment, it is only for signing messages but includes the entire scripting system. [...] Does the BIP implicitly assume that a scriptPubKey contains exactly one pubkey?\n> \n> I think this isn't the best way to think about this facility. Bitcoin transactions are not signed with ECDSA. They are signed wit",https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-568479290,568479290,
DrahtBot,2020-03-09 21:20:51,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/fa733bbd78add587e19f0175ab9c127a8c27e024/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-596785832,596785832,
kallewoof,2020-03-25 06:37:12,Will reopen (or re-create) after adapting simplifications in https://github.com/bitcoin/bips/pull/903,https://github.com/bitcoin/bitcoin/pull/16440#issuecomment-603667589,603667589,
harding,2019-07-28 22:18:06,"I think ""the derived BECH32 address"" will become ambiguous if subsequent versions of segwit are adopted.  E.g. if taproot is adopted, there would be two possible bech32 addresses for the same public key.  Perhaps this should say, ""the derived P2WPKH bech32 address"".\n\nNit: BECH is not an acronym AFAIK and so should not be all caps.  A quick git grep shows that the convention in the repository i",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r308020901,308020901,src/rpc/misc.cpp
sipa,2019-07-29 16:53:47,You may want to check with @achow101 that this doesn't conflict with the descriptor wallet changes.,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r308332901,308332901,src/interfaces/wallet.h
achow101,2019-07-30 03:40:31,This doesn't interfere with the descriptor wallet changes since a `SigningProvider` was never actually needed in the GUI.,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r308521465,308521465,src/interfaces/wallet.h
sipa,2019-07-30 03:48:18,"But there won't be a singular signing provider for the whole wallet anymore, right?",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r308522630,308522630,src/interfaces/wallet.h
ryanofsky,2019-07-30 15:56:31,"FWIW, I think it would be better to add an `interfaces::Wallet::signMessage()` method instead of adding an `interfaces::Wallet::getSigningProvider()` method. Few reasons:\n\n1) It would allow deduplicating more code for signing messages instead of having it written twice in qt and rpcwallet.\n\n2) It would create a little less work for me with #10102, so I don't have to an add IPC wrapper arou",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r308805714,308805714,src/interfaces/wallet.h
kallewoof,2019-07-31 00:37:09,"@ryanofsky That sounds good to me! I am not sure how to access the `interfaces::Wallet` instance from `rpcwallet.cpp` though. It seems like it only has access to `CWallet` (while the QT side only has access to `interfaces::Wallet`).\n\nIs the idea to add two signmessage functions, where the interface one simply calls down into `m_wallet->SignMessage(..)`?",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r308998638,308998638,src/interfaces/wallet.h
ryanofsky,2019-07-31 01:16:48,"> @ryanofsky That sounds good to me! I am not sure how to access the `interfaces::Wallet` instance from `rpcwallet.cpp` though. It seems like it only has access to `CWallet` (while the QT side only has access to `interfaces::Wallet`).\n\nrpcwallet.cpp shouldn't need to access `interfaces::Wallet` here (and in general) because `interfaces::Wallet` doesn't contain any real functionality, it's just",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r309005098,309005098,src/interfaces/wallet.h
kallewoof,2019-07-31 02:58:45,"@ryanofsky I ended up adding a couple of helper functions to `proof.h` and adding a `proof.cpp` file. The P2PKH-vs-others logic is now all contained inside the proof code, and is called from `rpcwallet`/`misc`/`interfaces/wallet`:\n\nhttps://github.com/bitcoin/bitcoin/blob/6e9947e2ee6a9f9cef173a47ff56e11fc4d32efd/src/script/proof.h#L237-L250\n\nThe interface side ends up like\n\nhttps://gith",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r309021522,309021522,src/interfaces/wallet.h
kallewoof,2019-07-31 03:19:22,"As a side result of this, `strMessageMagic` was moved out of validation.h/cpp into proof.cpp, and is no longer public, which is nice.",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r309024560,309024560,src/interfaces/wallet.h
ryanofsky,2019-07-31 16:38:14,"Looks good. The new SignMessageWithSigningProvider makes for fewer wallet changes than what I suggested, which is great!",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r309320697,309320697,src/interfaces/wallet.h
real-or-random,2019-08-29 08:20:46,"Won't this make signatures trivially malleable? Also, maybe SIGHASH_ALL is somewhat abused here. Do we need a flag at all?",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r318941957,318941957,src/script/interpreter.cpp
real-or-random,2019-08-29 08:29:29,Is this intended to limit the string? I think it won't.,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r318945748,318945748,src/script/proof.cpp
real-or-random,2019-08-29 08:48:35,"I think if the (attacker-provided) input is indeed invalid, this should `INVALID` instead of `ERROR`. I think it's cleaner to use `ERROR` only for real processing errors when we can't reach a result, e.g., out-of-memory (okay, maybe a bad example here). Here, we have a result: The proof is invalid because a legacy proof for P2PKH is not allowed.\n\nThe background is that crypto APIs typically wo",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r318954925,318954925,test/functional/rpc_signmessage.py
kallewoof,2019-09-02 04:53:39,"I don't think it's a problem to have malleable signature in this case, but perhaps this should be bolted down to always say `SIGHASH_ALL`.\n\nWe do not need the flag, in all honesty, but removing it means special-casing stuff in various places, so it felt simpler to just keep it in there.",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r319806069,319806069,src/script/interpreter.cpp
kallewoof,2019-09-02 04:55:11,"Limiting was not the intention, really, and I'm not sure there is an attack vector for very large messages since these are passed between users outside of the proofs.",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r319806242,319806242,src/script/proof.cpp
kallewoof,2019-09-02 04:57:58,"I think it's useful to distinguish between what is considered a proper but invalid BIP-322 proof vs something that is not a proper BIP-322 proof. An error in this case means the proof could not be deserialized. Saying it's invalid means the user will not even know that the proof wasn't checked at all, which would be useful for debugging the reason. (For example, if someone provides a proof from El",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r319806528,319806528,test/functional/rpc_signmessage.py
practicalswift,2019-09-07 09:36:54,Nit: Could use `enum class`?,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r321962813,321962813,src/script/proof.h
practicalswift,2019-09-07 09:59:58,"Nit: `r < -4 || r > 0` is known to be `false` at compile-time and the `""???""` path is thus unreachable. Perhaps use `switch` instead?",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r321963433,321963433,src/script/proof.h
practicalswift,2019-09-07 10:01:50,`challenge` and `message` not used?,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r321963486,321963486,src/script/proof.h
practicalswift,2019-09-07 10:02:09,`challenge` and `message` not used?,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r321963492,321963492,src/script/proof.h
practicalswift,2019-09-07 10:03:18,`entries` not used?,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r321963518,321963518,src/script/proof.cpp
practicalswift,2019-09-07 10:06:08,"Is `m_challenge.size() <= 255` guaranteed here (`m_entries` is `uint8_t`)? If so, perhaps `assert(...)` that to make the tacit assumption explicit? :-)",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r321963578,321963578,src/script/proof.h
practicalswift,2019-09-07 10:07:58,Nit: Don't forget to terminate namespace using `// namespace proof` :-),https://github.com/bitcoin/bitcoin/pull/16440#discussion_r321963617,321963617,src/script/proof.cpp
real-or-random,2019-09-09 07:20:32,"What I wanted to say is that this constructor does not take into account the limit of 65536. The limit is only relevant in the `Unserialize` method, see https://github.com/bitcoin/bitcoin/blob/master/src/serialize.h#L503",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r322094704,322094704,src/script/proof.cpp
real-or-random,2019-09-09 07:28:40,"Hm, this has two layers: What other code (ours or not ours) is doing with the return value and what the user is doing with the return value. \n * For other code: if the proof is invalid, you should treat it as such, no matter what the reason is. (Note that the proof is attacker-provided. It's not an ""uncommon"" event to get a totally malformed proof.) Having different codes that are all invalid op",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r322097196,322097196,test/functional/rpc_signmessage.py
kallewoof,2019-09-24 05:51:19,"I'm not sure what you mean. No guarantees that r is actually a valid Result enum value.\n```C++\n#include <cstdio>\n\nenum class X {\n	one = 1,\n	two = 2,\n};\n\nint main(int argc, char** argv)\n{\n	X z = (X)3;\n	printf(""z = %d\n"", z); // outputs 3\n}\n```\n",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r327436491,327436491,src/script/proof.h
kallewoof,2019-09-24 05:57:27,Good point. Adding assert.,https://github.com/bitcoin/bitcoin/pull/16440#discussion_r327437733,327437733,src/script/proof.h
kallewoof,2019-12-24 03:56:46,"I'm not sure I agree that users should not be concerned with debugging information. Oftentimes people are teaching each other how to do these things. If the other person says ""it tells me 'invalid'"" because they missed one character when copy-pasting the proof (or something), that just adds unnecessary ambiguity to the situation.\n\nPerhaps 'ERROR' is the wrong word, though. 'MALFORMED' might be",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r361058195,361058195,test/functional/rpc_signmessage.py
kallewoof,2019-12-24 04:29:52,"Oh, I see what you're saying. I can just change it to `s`. I used the limited string thing simply because I didn't realize strings were allowed as is.",https://github.com/bitcoin/bitcoin/pull/16440#discussion_r361061682,361061682,src/script/proof.cpp
