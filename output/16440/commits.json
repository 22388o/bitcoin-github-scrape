[
  {
    "sha": "d496977165b9769484082680f4afb4fa283a4abd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDk2OTc3MTY1Yjk3Njk0ODQwODI2ODBmNGFmYjRmYTI4M2E0YWJk",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-17T08:38:43Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-07T02:27:23Z"
      },
      "message": "script: add simple signature support (checker/creator)\n\nThe simple signature takes a sighash as argument and verifies a signature and pubkey against it. It is used in signet for verifying blocks and in BIP-322 implementation for verifying messages.",
      "tree": {
        "sha": "95843b4be966e256835afbf767d68b88462a009e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95843b4be966e256835afbf767d68b88462a009e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d496977165b9769484082680f4afb4fa283a4abd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5jBosACgkQV692LbM1\nMyIP6g/9E0sLwfLf7vn5dtMS35nROtmX4iMgYQxNbiaDcbqDlB1mKqHaD/rBhFoX\ntRqvs/1b5vjcw9TTcfLON+6a3WycqB8i1GUSh9zK1B3VcoLgymttuvPKVrkwVysn\nVdLpYONy4zz+B1oaMurZCXH1p3bjVkw4MI/tNP/ICRMncq3RVw6ldYRGAsvAmUMr\nLucvQ8Ckqz7Nb0nH+DIney+6Y0gaJM1dnzpRB3TjawuSXl2PPe8zVYVUeeyWaT5U\nxYjpmt+jdFOxB5kdkujVUOL8DuxjVgmYPNLiDV4GYz0JfaXXhdKUChJRGIwdeqEN\nkVGrv9Uob3INVL/22f2A/zdXQWau6z3iP00mRUwmOBPJecFwMY07c58UILD2/ABe\nU6isAgNYSUb0Gox1x1OZstcoLlIm9m+QXUII3XVYHmxH1eP4QCxfiGwFI6it9ycZ\nGwgO68BtOSPRJdF5S8nmcXxvsLphB4N7K2v4eZQaHCD/mqSyLv/Gm+zrx1pjWiFg\nKBL9USAnXvZ6VJdQTuiwSTuFBANFuhVdiQrdFlFOTOeECtPXzVVTMPyeS7zeLALQ\nSYMgmt4o6w3MKVbairLAklk4quW2/wkYwrV+Dqi0FFIMfsCyj1USwktgvAHoPt9k\nlmrzNVOOgSA/hnTOQVQHeiXPRUHYoji0Rrei62pguQeLzpkzgDU=\n=2v4V\n-----END PGP SIGNATURE-----",
        "payload": "tree 95843b4be966e256835afbf767d68b88462a009e\nparent 3d28c886f077ce22fb7755fe9ec1f4e08d3d4a62\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1563352723 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583548043 +0900\n\nscript: add simple signature support (checker/creator)\n\nThe simple signature takes a sighash as argument and verifies a signature and pubkey against it. It is used in signet for verifying blocks and in BIP-322 implementation for verifying messages.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d496977165b9769484082680f4afb4fa283a4abd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d496977165b9769484082680f4afb4fa283a4abd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d496977165b9769484082680f4afb4fa283a4abd/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d28c886f077ce22fb7755fe9ec1f4e08d3d4a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d28c886f077ce22fb7755fe9ec1f4e08d3d4a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d28c886f077ce22fb7755fe9ec1f4e08d3d4a62"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a19996bd1080890116e518675f83a1b2cbd5cb8f",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d496977165b9769484082680f4afb4fa283a4abd/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d496977165b9769484082680f4afb4fa283a4abd/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=d496977165b9769484082680f4afb4fa283a4abd",
        "patch": "@@ -1414,6 +1414,20 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+bool SimpleSignatureChecker::CheckSig(const std::vector<unsigned char>& vchSigIn, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+{\n+    CPubKey pubkey(vchPubKey);\n+    if (!pubkey.IsValid()) return false;\n+\n+    // Hash type is one byte tacked on to the end of the signature\n+    std::vector<unsigned char> vchSig(vchSigIn);\n+    if (vchSig.empty()) return false;\n+    // int nHashType = vchSig.back();\n+    vchSig.pop_back();\n+\n+    return pubkey.Verify(hash, vchSig);\n+}\n+\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     std::vector<std::vector<unsigned char> > stack;"
      },
      {
        "sha": "18c70f1332006c996a0fb799f3672be7faccf69f",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d496977165b9769484082680f4afb4fa283a4abd/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d496977165b9769484082680f4afb4fa283a4abd/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=d496977165b9769484082680f4afb4fa283a4abd",
        "patch": "@@ -161,6 +161,18 @@ class BaseSignatureChecker\n     virtual ~BaseSignatureChecker() {}\n };\n \n+/** A general purpose signature checker. */\n+class SimpleSignatureChecker : public BaseSignatureChecker\n+{\n+private:\n+    uint256 hash;\n+\n+public:\n+    const uint256& GetHash() const { return hash; }\n+    explicit SimpleSignatureChecker(const uint256& hash_in) : hash(hash_in) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+};\n+\n template <class T>\n class GenericTransactionSignatureChecker : public BaseSignatureChecker\n {"
      },
      {
        "sha": "0fedc62fc62c055902de9326aa7858a94de3e4f1",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d496977165b9769484082680f4afb4fa283a4abd/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d496977165b9769484082680f4afb4fa283a4abd/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d496977165b9769484082680f4afb4fa283a4abd",
        "patch": "@@ -33,6 +33,15 @@ bool MutableTransactionSignatureCreator::CreateSig(const SigningProvider& provid\n     return true;\n }\n \n+bool SimpleSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n+{\n+    CKey key;\n+    if (!provider.GetKey(keyid, key)) return false;\n+    if (!key.Sign(checker.GetHash(), vchSig)) return false;\n+    vchSig.push_back((unsigned char)SIGHASH_ALL);\n+    return true;\n+}\n+\n static bool GetCScript(const SigningProvider& provider, const SignatureData& sigdata, const CScriptID& scriptid, CScript& script)\n {\n     if (provider.GetCScript(scriptid, script)) {"
      },
      {
        "sha": "5e164475666631cb0fdc705f8a1be7faceb2659b",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d496977165b9769484082680f4afb4fa283a4abd/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d496977165b9769484082680f4afb4fa283a4abd/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=d496977165b9769484082680f4afb4fa283a4abd",
        "patch": "@@ -31,6 +31,17 @@ class BaseSignatureCreator {\n     virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n };\n \n+/** A general purpose signature creator. */\n+class SimpleSignatureCreator : public BaseSignatureCreator\n+{\n+    SimpleSignatureChecker checker;\n+\n+public:\n+    explicit SimpleSignatureCreator(const uint256& hashIn) : BaseSignatureCreator(), checker(hashIn) {};\n+    const BaseSignatureChecker& Checker() const override { return checker; }\n+    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n+};\n+\n /** A signature creator for transactions. */\n class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     const CMutableTransaction* txTo;"
      }
    ]
  },
  {
    "sha": "f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGVjYmMxNGE5M2NiN2Q0OTNlYjYyYjIyNDZjODc4NzZhMGM3M2Qz",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-07-31T02:52:59Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-07T02:27:23Z"
      },
      "message": "script: add BIP-322 helpers and wallet interface",
      "tree": {
        "sha": "8d314d50de853f891a4ce77658cf2f0d4500548a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d314d50de853f891a4ce77658cf2f0d4500548a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5jBosACgkQV692LbM1\nMyI2Xg//UEjLjf4I+i3siQrjKyEmjFryD5gk+2gTi5TErMMZ7PlnXtd/1vy6IyyT\n9rQBY2P4XNlixHozX8LXM2ZZ6oIqSOkTReLmnfMZ11omlnAMYMtfdqLBWI4SfvLo\nt5gTHJCLVrXPedBAFZK+8n+Y6N110UNFW6UwP4RbSEw50FZxp3UztaEGOlFTWTCJ\nFrKe8d/3ID2qWaN8AyL5mOCE9O9eratxcrWxJ4U2JFY9+XQj2oXKSIG/7069lqwY\noDJPzCl4KfTJDg2sPx83LxrUvA2JyVXc+aLPQgFnHUFLRXpRJ7lEkihktl49hJx4\ngKKMDq3q5+M/KO+gvFCiL9q7S0VuauXoNZcsw0aBl3BMCJy+v97rfTCzHeCi11GI\nOhubB3sdSNQYvXKOOPt8oIZjDpmV6FTWRaJGUTfP2qiAlcxSrE7NsF29KnWex3W7\nFN5ccfLEAwbtz+B7Xu4z0sccd/Xi04nQ+VFfhm6JD1PLH+fZpHFEWm79RwIVM+Xl\nM43yyqbOHnk4Ukoi9kj1lf3cHaWtSwqRx/5MZ6j5o9qXgC2F9GYGUXewDloUxVzO\nxS0ru93Jo54CkMqzxHC1dnyWyvQhUbWuvKsmcQfEYxllw2Dns7DUk3IzbT+h6lsI\neevfZ9rsXPy8tGslESI/gvLO+t6VoqC25WR9bhfsbQU2EaV6g9I=\n=wQjs\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d314d50de853f891a4ce77658cf2f0d4500548a\nparent d496977165b9769484082680f4afb4fa283a4abd\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1564541579 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583548043 +0900\n\nscript: add BIP-322 helpers and wallet interface\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d496977165b9769484082680f4afb4fa283a4abd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d496977165b9769484082680f4afb4fa283a4abd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d496977165b9769484082680f4afb4fa283a4abd"
      }
    ],
    "stats": {
      "total": 393,
      "additions": 386,
      "deletions": 7
    },
    "files": [
      {
        "sha": "95e6f3ca94e529f79aad010e7c3cf2cd3a3bc641",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "patch": "@@ -189,6 +189,7 @@ BITCOIN_CORE_H = \\\n   scheduler.h \\\n   script/descriptor.h \\\n   script/keyorigin.h \\\n+  script/proof.h \\\n   script/sigcache.h \\\n   script/sign.h \\\n   script/signingprovider.h \\\n@@ -507,6 +508,7 @@ libbitcoin_util_a_SOURCES = \\\n   random.cpp \\\n   randomenv.cpp \\\n   rpc/request.cpp \\\n+  script/proof.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\\n   threadinterrupt.cpp \\"
      },
      {
        "sha": "96bb5bf466338393929dd378c0cda2ba64dd7244",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "patch": "@@ -10,6 +10,7 @@\n #include <policy/fees.h>\n #include <primitives/transaction.h>\n #include <script/standard.h>\n+#include <script/proof.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n #include <ui_interface.h>\n@@ -477,6 +478,11 @@ class WalletImpl : public Wallet\n     {\n         RemoveWallet(m_wallet);\n     }\n+    void signMessage(const std::string& message, const CTxDestination& destination, std::vector<uint8_t>& signature_out) override\n+    {\n+        auto provider = m_wallet->GetSigningProvider(GetScriptForDestination(destination));\n+        proof::SignMessageWithSigningProvider(std::move(provider), message, destination, signature_out);\n+    }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyUnload.connect(fn));"
      },
      {
        "sha": "2c5f77d1b995c0d7060c517f06f44ccd03bf35a9",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "patch": "@@ -263,6 +263,11 @@ class Wallet\n     // Remove wallet.\n     virtual void remove() = 0;\n \n+    /**\n+     * Attempt to sign a message with the given destination.\n+     */\n+    virtual void signMessage(const std::string& message, const CTxDestination& destination, std::vector<uint8_t>& signature_out) = 0;\n+\n     //! Register handler for unload message.\n     using UnloadFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;"
      },
      {
        "sha": "2fe1d7c0ce8a9f76badee5d264d9476c1c0d0346",
        "filename": "src/script/proof.cpp",
        "status": "added",
        "additions": 102,
        "deletions": 0,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/script/proof.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/script/proof.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/proof.cpp?ref=f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "patch": "@@ -0,0 +1,102 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/proof.h>\n+\n+/**\n+ * Text used to signify that a signed message follows and to prevent\n+ * inadvertently signing a transaction.\n+ */\n+const std::string MESSAGE_MAGIC = \"Bitcoin Signed Message:\\n\";\n+\n+namespace proof\n+{\n+\n+Result SignMessage::Prepare(const std::string& message, std::set<CScript>& inputs_out, uint256& sighash_out, CScript& spk_out) const {\n+    Result rv = Purpose::Prepare(m_scriptpubkey, inputs_out);\n+    if (rv != Result::Valid) return rv;\n+    CHashWriter hw(SER_DISK, 0);\n+    std::string s = MESSAGE_MAGIC + message;\n+    hw << m_scriptpubkey << s;\n+    sighash_out = hw.GetHash();\n+    spk_out = m_scriptpubkey;\n+    return Result::Valid;\n+}\n+\n+void SignMessageWithSigningProvider(std::unique_ptr<SigningProvider> sp, const std::string& message, const CTxDestination& destination, std::vector<uint8_t>& signature_out)\n+{\n+    signature_out.clear();\n+\n+    // if this is a P2PKH, use the legacy approach\n+    const PKHash *pkhash = boost::get<PKHash>(&destination);\n+    if (pkhash) {\n+        CKey key;\n+        if (!sp->GetKey(CKeyID(*pkhash), key)) {\n+            throw privkey_unavailable_error();\n+        }\n+\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << MESSAGE_MAGIC << message;\n+\n+        if (!key.SignCompact(ss.GetHash(), signature_out)) {\n+            throw signing_error();\n+        }\n+    } else {\n+        SignMessageWorkspace p;\n+\n+        p.AppendDestinationChallenge(destination);\n+\n+        p.Prove(message, std::move(sp));\n+\n+        CVectorWriter w(SER_DISK, PROTOCOL_VERSION, signature_out, 0);\n+        w << p.m_proof;\n+    }\n+}\n+\n+void SignMessageWithPrivateKey(CKey& key, OutputType address_type, const std::string& message, std::vector<uint8_t>& signature_out)\n+{\n+    if (address_type == OutputType::LEGACY) {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << MESSAGE_MAGIC << message;\n+\n+        if (!key.SignCompact(ss.GetHash(), signature_out)) {\n+            throw signing_error();\n+        }\n+    } else {\n+        SignMessageWorkspace p;\n+\n+        p.AppendPrivKeyChallenge(key, address_type);\n+\n+        p.Prove(message);\n+\n+        CVectorWriter w(SER_DISK, PROTOCOL_VERSION, signature_out, 0);\n+        w << p.m_proof;\n+    }\n+}\n+\n+Result VerifySignature(const std::string& message, const CTxDestination& destination, const std::vector<uint8_t>& signature)\n+{\n+    // if this is a P2PKH, use the legacy approach\n+    const PKHash* pkhash = boost::get<PKHash>(&destination);\n+    if (pkhash) {\n+        CHashWriter ss(SER_GETHASH, 0);\n+        ss << MESSAGE_MAGIC << message;\n+        CPubKey pubkey;\n+        return ResultFromBool(pubkey.RecoverCompact(ss.GetHash(), signature) && pubkey.GetID() == *pkhash);\n+    }\n+\n+    SignMessageWorkspace p;\n+\n+    p.AppendDestinationChallenge(destination);\n+\n+    CDataStream stream(signature, SER_DISK, PROTOCOL_VERSION);\n+    try {\n+        stream >> p.m_proof;\n+        return p.Verify(message);\n+    } catch (const std::runtime_error&) {\n+        return Result::Error;\n+    }\n+}\n+\n+} // namespace proof"
      },
      {
        "sha": "ed9393da4a84d73fd07708c828b15d54e56e933c",
        "filename": "src/script/proof.h",
        "status": "added",
        "additions": 270,
        "deletions": 0,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/script/proof.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/script/proof.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/proof.h?ref=f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "patch": "@@ -0,0 +1,270 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SCRIPT_PROOF_H\n+#define BITCOIN_SCRIPT_PROOF_H\n+\n+#include <script/bitcoinconsensus.h> // Block script flags\n+#include <script/interpreter.h>      // SimpleSignatureChecker\n+#include <script/standard.h>         // CTxDestination\n+#include <script/sign.h>             // ProduceSignature, SimpleSignatureCreator\n+#include <serialize.h>\n+#include <outputtype.h>              // GetDestinationForKey\n+#include <policy/policy.h>           // for STANDARD_SCRIPT_VERIFY_FLAGS\n+#include <hash.h>                    // CHashWriter\n+#include <util/memory.h>             // MakeUnique\n+\n+extern const std::string MESSAGE_MAGIC;\n+\n+namespace proof {\n+\n+class dest_unavailable_error : public std::runtime_error { public: explicit dest_unavailable_error(const std::string& str = \"Destination is not available\") : std::runtime_error(str) {} };\n+class privkey_unavailable_error : public std::runtime_error { public: explicit privkey_unavailable_error(const std::string& str = \"Private key is not available\") : std::runtime_error(str) {} };\n+class signing_error : public std::runtime_error { public: explicit signing_error(const std::string& str = \"Sign failed\") : std::runtime_error(str) {} };\n+class serialization_error : public std::runtime_error { public: explicit serialization_error(const std::string& str = \"Serialization error\") : std::runtime_error(str) {} };\n+\n+/**\n+ * Result codes ordered numerically by severity, so that A is reported, if A <= B and A and B are\n+ * two results for a verification attempt.\n+ */\n+enum class Result : int8_t {\n+    Valid = 0,           //!< All proofs were deemed valid.\n+    Inconclusive = -1,   //!< One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+    Incomplete = -2,     //!< One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+    Invalid = -3,        //!< One or more of the given proofs were invalid\n+    Error = -4,          //!< An error was encountered\n+};\n+\n+inline std::string ResultString(const Result r) {\n+    static const char *strings[] = {\"ERROR\", \"INVALID\", \"INCOMPLETE\", \"INCONCLUSIVE\", \"VALID\"};\n+    return r < Result::Error || r > Result::Valid ? \"???\" : strings[(int)r + 4];\n+}\n+\n+inline Result ResultFromBool(bool success) {\n+    return success ? Result::Valid : Result::Invalid;\n+}\n+\n+static constexpr uint32_t BIP322_FORMAT_VERSION = 1;\n+\n+struct Header {\n+    uint32_t m_version;     //!< Format version\n+    uint8_t m_entries;      //!< Number of proof entries\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        m_version = BIP322_FORMAT_VERSION;\n+        READWRITE(m_version);\n+        if (m_version > BIP322_FORMAT_VERSION) throw serialization_error(\"Unknown BIP322 proof format; you may need to update your node\");\n+        if (m_version < BIP322_FORMAT_VERSION) throw serialization_error(\"Outdated BIP322 proof format; ask prover to re-sign using newer software\");\n+        READWRITE(m_entries);\n+    }\n+};\n+\n+struct SignatureProof {\n+    CScript m_scriptsig; //!< ScriptSig data\n+    CScriptWitness m_witness;   //!< Witness\n+\n+    explicit SignatureProof(const SignatureData& sigdata = SignatureData()) {\n+        m_scriptsig = sigdata.scriptSig;\n+        m_witness = sigdata.scriptWitness;\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(m_scriptsig);\n+        READWRITE(m_witness.stack);\n+    }\n+};\n+\n+struct Purpose {\n+    template<typename T>\n+    Result Prepare(const T& input, std::set<T>& inputs_out) const {\n+        if (inputs_out.count(input)) return Result::Error;\n+        inputs_out.insert(input);\n+        return Result::Valid;\n+    }\n+};\n+\n+/**\n+ * Purpose: SignMessage\n+ *\n+ * Generate a sighash based on a scriptPubKey and a message. Emits VALID on success.\n+ */\n+struct SignMessage: Purpose {\n+    CScript m_scriptpubkey;\n+\n+    explicit SignMessage(const CScript& scriptpubkey = CScript()) : m_scriptpubkey(scriptpubkey) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(m_scriptpubkey);\n+    }\n+\n+    Result Prepare(const std::string& message, std::set<CScript>& inputs_out, uint256& sighash_out, CScript& spk_out) const;\n+\n+    inline std::set<CScript> InputsSet() { return std::set<CScript>(); }\n+};\n+\n+struct Proof: public Header {\n+    std::vector<SignatureProof> m_items;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        Header::SerializationOp(s, ser_action);\n+        m_items.resize(m_entries);\n+        for (auto& e : m_items) {\n+            READWRITE(e);\n+        }\n+    }\n+};\n+\n+template<typename T>\n+struct BaseWorkSpace {\n+    std::map<CTxDestination, CKey> privkeys;\n+    std::vector<T> m_challenge;\n+    Proof m_proof;\n+\n+    virtual void GenerateSingleProof(std::unique_ptr<SigningProvider> sp, const uint256& sighash, const CScript& scriptPubKey) = 0;\n+    virtual Result VerifySingleProof(unsigned int flags, const SignatureProof& proof, const uint256& sighash, const CScript& scriptPubKey) = 0;\n+\n+    void Prove(const std::string& message, std::unique_ptr<SigningProvider> signingProvider = nullptr) {\n+        assert(m_challenge.size() <= 255);\n+        m_proof.m_items.clear();\n+        m_proof.m_version = BIP322_FORMAT_VERSION;\n+        m_proof.m_entries = m_challenge.size();\n+        if (m_challenge.size() == 0) return;\n+        auto inputs = m_challenge.back().InputsSet();\n+        uint256 sighash;\n+        CScript scriptPubKey;\n+        for (auto& c : m_challenge) {\n+            auto r = c.Prepare(message, inputs, sighash, scriptPubKey);\n+            if (r != Result::Valid) {\n+                throw std::runtime_error(\"Prepare call failed (error: \" + ResultString(r) + \")\");\n+            }\n+            CTxDestination destination;\n+            if (!ExtractDestination(scriptPubKey, destination)) {\n+                throw dest_unavailable_error();\n+            }\n+            CKey secret;\n+            if (privkeys.count(destination)) {\n+                secret = privkeys.at(destination);\n+            } else if (signingProvider) {\n+                auto keyid = GetKeyForDestination(*signingProvider, destination);\n+                if (keyid.IsNull()) {\n+                    throw privkey_unavailable_error(\"ScriptPubKey does not refer to a key (note: multisig is not yet supported)\");\n+                }\n+                if (!signingProvider->GetKey(keyid, secret)) {\n+                    throw privkey_unavailable_error(\"Private key for scriptPubKey is not known\");\n+                }\n+            } else {\n+                throw privkey_unavailable_error(\"Failed to obtain private key for destination\");\n+            }\n+            std::unique_ptr<FillableSigningProvider> sp = MakeUnique<FillableSigningProvider>();\n+            sp->AddKey(secret);\n+            GenerateSingleProof(std::move(sp), sighash, scriptPubKey);\n+        }\n+    }\n+\n+    Result Verify(const std::string& message) {\n+        size_t proofs = m_proof.m_items.size();\n+        size_t challenges = m_challenge.size();\n+        if (challenges == 0) {\n+            throw std::runtime_error(\"Nothing to verify\");\n+        }\n+        if (proofs != challenges) {\n+            // TODO: fill out vector with empty proofs if too few and get incomplete result? What to do about too many?\n+            throw std::runtime_error(proofs < challenges ? \"Proofs missing\" : \"Too many proofs\");\n+        }\n+\n+        auto inputs = m_challenge.back().InputsSet();\n+        Result aggres = Result::Valid;\n+        for (size_t i = 0; i < proofs; ++i) {\n+            auto& proof = m_proof.m_items.at(i);\n+            if (proof.m_scriptsig.size() == 0 && proof.m_witness.stack.size() == 0) {\n+                if (aggres == Result::Valid) aggres = Result::Incomplete;\n+                continue;\n+            }\n+            auto& challenge = m_challenge.at(i);\n+            uint256 sighash;\n+            CScript scriptPubKey;\n+            Result res = challenge.Prepare(message, inputs, sighash, scriptPubKey);\n+            if (res != Result::Valid) return res;\n+            // verify using consensus rules first\n+            res = VerifySingleProof(bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, proof, sighash, scriptPubKey);\n+            if (res == Result::Error || res == Result::Invalid) return res;\n+            if (res == Result::Valid) {\n+                res = VerifySingleProof(STANDARD_SCRIPT_VERIFY_FLAGS, proof, sighash, scriptPubKey);\n+                if (res == Result::Invalid) res = Result::Inconclusive;\n+            }\n+            if (res < aggres) {\n+                aggres = res;\n+            }\n+        }\n+        return aggres;\n+    }\n+};\n+\n+template<typename T> struct Workspace: public BaseWorkSpace<T> {};\n+\n+template<>\n+struct Workspace<SignMessage>: public BaseWorkSpace<SignMessage> {\n+    void AppendDestinationChallenge(const CTxDestination& destination) {\n+        auto a = GetScriptForDestination(destination);\n+        m_challenge.emplace_back(a);\n+    }\n+    void AppendPrivKeyChallenge(const CKey& key, OutputType address_type = OutputType::BECH32) {\n+        auto d = GetDestinationForKey(key.GetPubKey(), address_type);\n+        auto a = GetScriptForDestination(d);\n+        privkeys[d] = key;\n+        m_challenge.emplace_back(a);\n+    }\n+    void GenerateSingleProof(std::unique_ptr<SigningProvider> sp, const uint256& sighash, const CScript& scriptPubKey) override {\n+        SimpleSignatureCreator sc(sighash);\n+        SignatureData sigdata;\n+        if (!ProduceSignature(*sp, sc, scriptPubKey, sigdata)) {\n+            throw signing_error(\"Failed to produce a signature\");\n+        }\n+        m_proof.m_items.emplace_back(sigdata);\n+    }\n+    Result VerifySingleProof(unsigned int flags, const SignatureProof& proof, const uint256& sighash, const CScript& scriptPubKey) override {\n+        auto& scriptSig = proof.m_scriptsig;\n+        auto& witness = proof.m_witness;\n+        SimpleSignatureChecker sc(sighash);\n+        ScriptError serror;\n+        if (!VerifyScript(scriptSig, scriptPubKey, witness.stack.size() ? &witness : nullptr, flags, sc, &serror)) {\n+            // TODO: inconclusive check\n+            return Result::Invalid;\n+        }\n+        return Result::Valid;\n+    }\n+};\n+\n+typedef Workspace<SignMessage> SignMessageWorkspace;\n+\n+/**\n+ * Attempt to sign a message with the given destination.\n+ */\n+void SignMessageWithSigningProvider(std::unique_ptr<SigningProvider> sp, const std::string& message, const CTxDestination& destination, std::vector<uint8_t>& signature_out);\n+\n+/**\n+ * Attempt to sign a message with the given private key and address format.\n+ */\n+void SignMessageWithPrivateKey(CKey& key, OutputType address_type, const std::string& message, std::vector<uint8_t>& signature_out);\n+\n+/**\n+ * Determine if a signature is valid for the given message.\n+ */\n+Result VerifySignature(const std::string& message, const CTxDestination& destination, const std::vector<uint8_t>& signature);\n+\n+} // namespace proof\n+\n+#endif // BITCOIN_SCRIPT_PROOF_H"
      },
      {
        "sha": "fa9e5727574551f268a47bd34500a512c679a592",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "patch": "@@ -15,12 +15,6 @@\n #include <string>\n #include <vector>\n \n-/**\n- * Text used to signify that a signed message follows and to prevent\n- * inadvertently signing a transaction.\n- */\n-const std::string MESSAGE_MAGIC = \"Bitcoin Signed Message:\\n\";\n-\n MessageVerificationResult MessageVerify(\n     const std::string& address,\n     const std::string& signature,"
      },
      {
        "sha": "56255831ee9781a619877d567272d058b9cf9a1b",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "patch": "@@ -11,7 +11,7 @@\n \n #include <string>\n \n-extern const std::string MESSAGE_MAGIC;\n+enum class OutputType;\n \n /** The result of a signed message verification.\n  * Message verification takes as an input:"
      }
    ]
  },
  {
    "sha": "39ee690bc6a79c432eda8502ee793bf64ceac2a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWVlNjkwYmM2YTc5YzQzMmVkYTg1MDJlZTc5M2JmNjRjZWFjMmEx",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-04T04:40:35Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-07T02:31:04Z"
      },
      "message": "    rpc: update RPC commands to BIP-322\n\n    - signmessagewithprivkey\n    - verifymessage\n    - signmessage",
      "tree": {
        "sha": "460bbcd3896662aa956aab2fdb98713c47e03694",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/460bbcd3896662aa956aab2fdb98713c47e03694"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39ee690bc6a79c432eda8502ee793bf64ceac2a1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5jB2gACgkQV692LbM1\nMyK+zQ//XKjGGPv2dSkzH9IUiG7nA8e+xcwVILFXRu2A5xuTNy+kzvegPfuiMqQp\nYimnjHPaLCwqK0XYvExUxMeaSTbs1c+F/jgrhFP5uiaSNaFJaUDc+xuxoa1TYW3z\n+4Y3odr/J3nO3eW9znv5EhooQEzwuet55oJSY9FQDdNuh2RQtYtsbs5tkWTu+JVd\nBs4uEcMf4i77H59+CsCz/7rLC0hsGb2kXSVp6/d6XSQdGSteGaRKt74353J8gCcy\nV68ExlaQeYsURgv+kd9LHnklQ2h+UuQNMJBcAA2LvzLVoEtzsv3hy1GkroevTczj\nPn9z13x27HoT0A5skLvdfN1RLLehwHQywSI/RhmHDhS2qGkfI665h+YWnLDeVdzu\nCKkCAvUftD0Hqjed4fVedpCwu6OUiFiy71EU+b5BCiYzIQR142hN63La8azoIGGU\nY+wnYGyBze6Fk6PgJwcjD+31TZfA2ZfN1vVMJvxWUD/qq6ijBGJyeSvNHh6CJQQd\nuJJ/yp8rBr47L6snMyLiaVj1zINijuf/0+hLppMffAaZFKTSTB1rp10LPargGHjr\nQjzwwPYQn5XYv/PAtF31vgr19fiVVftDl8ZewnQfIkSX9S2Y1zYaVIK/H2RyMYry\nB1JksuL2Rdez9GJ6LrbMk7dm5RWsJNR5G8Tk6Yr4zLeqFqwF5T0=\n=5xP0\n-----END PGP SIGNATURE-----",
        "payload": "tree 460bbcd3896662aa956aab2fdb98713c47e03694\nparent f8ecbc14a93cb7d493eb62b2246c87876a0c73d3\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583296835 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583548264 +0900\n\n    rpc: update RPC commands to BIP-322\n\n    - signmessagewithprivkey\n    - verifymessage\n    - signmessage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ee690bc6a79c432eda8502ee793bf64ceac2a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39ee690bc6a79c432eda8502ee793bf64ceac2a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ee690bc6a79c432eda8502ee793bf64ceac2a1/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8ecbc14a93cb7d493eb62b2246c87876a0c73d3"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 105,
      "deletions": 62
    },
    "files": [
      {
        "sha": "781963ebdf08a61d0823d8001bee5a601b3ed7ba",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -134,6 +134,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importmulti\", 1, \"options\" },\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n+    { \"verifymessage\", 3, \"verbosity\" },\n     { \"getblockstats\", 0, \"hash_or_height\" },\n     { \"getblockstats\", 1, \"stats\" },\n     { \"pruneblockchain\", 0, \"height\" },"
      },
      {
        "sha": "9137e33089e0549606ab2bb2151a6fb3fe39c915",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -262,9 +262,15 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to use for the signature.\"},\n                     {\"signature\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The signature provided by the signer in base 64 encoding (see signmessage).\"},\n                     {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message that was signed.\"},\n+                    {\"verbosity\", RPCArg::Type::NUM, \"0\", \"0 to return boolean true/false, 1 to return BIP-322 result strings.\"}\n                 },\n-                RPCResult{\n-                    RPCResult::Type::BOOL, \"\", \"If the signature is verified or not.\"\n+                {\n+                    RPCResult{\"if verbosity is set to 0\",\n+                        RPCResult::Type::BOOL, \"\", \"If the proof is valid or not.\"\n+                    },\n+                    RPCResult{\"if verbosity is set to 1\",\n+                        RPCResult::Type::STR, \"\", \"Error string\",\n+                    },\n                 },\n                 RPCExamples{\n             \"\\nUnlock the wallet for 30 seconds\\n\"\n@@ -283,22 +289,11 @@ static UniValue verifymessage(const JSONRPCRequest& request)\n     std::string strAddress  = request.params[0].get_str();\n     std::string strSign     = request.params[1].get_str();\n     std::string strMessage  = request.params[2].get_str();\n+    int verbosity           = request.params[3].isNull() ? 0 : request.params[3].get_int();\n \n-    switch (MessageVerify(strAddress, strSign, strMessage)) {\n-    case MessageVerificationResult::ERR_INVALID_ADDRESS:\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid address\");\n-    case MessageVerificationResult::ERR_ADDRESS_NO_KEY:\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n-    case MessageVerificationResult::ERR_MALFORMED_SIGNATURE:\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Malformed base64 encoding\");\n-    case MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED:\n-    case MessageVerificationResult::ERR_NOT_SIGNED:\n-        return false;\n-    case MessageVerificationResult::OK:\n-        return true;\n-    }\n-\n-    return false;\n+    auto rv = MessageVerify(strAddress, strSign, strMessage);\n+    if (verbosity > 0) return MessageVerificationResultString(rv);\n+    return rv == MessageVerificationResult::OK;\n }\n \n static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n@@ -308,6 +303,7 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n                 {\n                     {\"privkey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The private key to sign the message with.\"},\n                     {\"message\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The message to create a signature of.\"},\n+                    {\"address_type\", RPCArg::Type::STR, \"legacy\", \"The address type to use. Options are \\\"legacy\\\", \\\"p2sh-segwit\\\", and \\\"bech32\\\".\"},\n                 },\n                 RPCResult{\n                     RPCResult::Type::STR, \"signature\", \"The signature of the message encoded in base 64\"\n@@ -325,14 +321,19 @@ static UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n     std::string strPrivkey = request.params[0].get_str();\n     std::string strMessage = request.params[1].get_str();\n \n+    OutputType address_type = OutputType::LEGACY;\n+    if (!request.params[2].isNull() && !ParseOutputType(request.params[2].get_str(), address_type)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[2].get_str()));\n+    }\n+\n     CKey key = DecodeSecret(strPrivkey);\n     if (!key.IsValid()) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n     }\n \n     std::string signature;\n \n-    if (!MessageSign(key, strMessage, signature)) {\n+    if (!MessageSign(key, strMessage, address_type, signature)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n     }\n \n@@ -599,8 +600,8 @@ static const CRPCCommand commands[] =\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\",\"address_type\"} },\n     { \"util\",               \"deriveaddresses\",        &deriveaddresses,        {\"descriptor\", \"range\"} },\n     { \"util\",               \"getdescriptorinfo\",      &getdescriptorinfo,      {\"descriptor\"} },\n-    { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\"} },\n-    { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\"} },\n+    { \"util\",               \"verifymessage\",          &verifymessage,          {\"address\",\"signature\",\"message\",\"verbosity\"} },\n+    { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, {\"privkey\",\"message\",\"address_type\"} },\n \n     /* Not shown in help */\n     { \"hidden\",             \"setmocktime\",            &setmocktime,            {\"timestamp\"}},"
      },
      {
        "sha": "c3c8f5f7da5a127b1c9369776df87b8107af7084",
        "filename": "src/script/proof.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/script/proof.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/script/proof.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/proof.cpp?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -54,7 +54,7 @@ void SignMessageWithSigningProvider(std::unique_ptr<SigningProvider> sp, const s\n     }\n }\n \n-void SignMessageWithPrivateKey(CKey& key, OutputType address_type, const std::string& message, std::vector<uint8_t>& signature_out)\n+void SignMessageWithPrivateKey(const CKey& key, OutputType address_type, const std::string& message, std::vector<uint8_t>& signature_out)\n {\n     if (address_type == OutputType::LEGACY) {\n         CHashWriter ss(SER_GETHASH, 0);"
      },
      {
        "sha": "f5624f9113810437737c22e62b206ddfdae19f61",
        "filename": "src/script/proof.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/script/proof.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/script/proof.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/proof.h?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -258,7 +258,7 @@ void SignMessageWithSigningProvider(std::unique_ptr<SigningProvider> sp, const s\n /**\n  * Attempt to sign a message with the given private key and address format.\n  */\n-void SignMessageWithPrivateKey(CKey& key, OutputType address_type, const std::string& message, std::vector<uint8_t>& signature_out);\n+void SignMessageWithPrivateKey(const CKey& key, OutputType address_type, const std::string& message, std::vector<uint8_t>& signature_out);\n \n /**\n  * Determine if a signature is valid for the given message."
      },
      {
        "sha": "be303475d3ad3d57d53018c1834e000d8df4061d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -19,6 +19,7 @@\n #include <util/time.h>\n #include <util/spanparsing.h>\n #include <util/vector.h>\n+#include <outputtype.h>\n \n #include <array>\n #include <stdint.h>\n@@ -2058,15 +2059,15 @@ BOOST_AUTO_TEST_CASE(message_sign)\n     BOOST_REQUIRE_MESSAGE(!privkey.IsValid(),\n         \"Confirm the private key is invalid\");\n \n-    BOOST_CHECK_MESSAGE(!MessageSign(privkey, message, generated_signature),\n+    BOOST_CHECK_MESSAGE(!MessageSign(privkey, message, OutputType::LEGACY, generated_signature),\n         \"Sign with an invalid private key\");\n \n     privkey.Set(privkey_bytes.begin(), privkey_bytes.end(), true);\n \n     BOOST_REQUIRE_MESSAGE(privkey.IsValid(),\n         \"Confirm the private key is valid\");\n \n-    BOOST_CHECK_MESSAGE(MessageSign(privkey, message, generated_signature),\n+    BOOST_CHECK_MESSAGE(MessageSign(privkey, message, OutputType::LEGACY, generated_signature),\n         \"Sign with a valid private key\");\n \n     BOOST_CHECK_EQUAL(expected_signature, generated_signature);"
      },
      {
        "sha": "dd6d6e463476497fdef53ede596cbddf322548a5",
        "filename": "src/util/message.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/util/message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/util/message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.cpp?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -11,6 +11,8 @@\n #include <serialize.h>       // For SER_GETHASH\n #include <util/message.h>\n #include <util/strencodings.h> // For DecodeBase64()\n+#include <outputtype.h>      // for OutputType\n+#include <script/proof.h>    // BIP-322\n \n #include <string>\n #include <vector>\n@@ -25,36 +27,34 @@ MessageVerificationResult MessageVerify(\n         return MessageVerificationResult::ERR_INVALID_ADDRESS;\n     }\n \n-    if (boost::get<PKHash>(&destination) == nullptr) {\n-        return MessageVerificationResult::ERR_ADDRESS_NO_KEY;\n-    }\n-\n     bool invalid = false;\n     std::vector<unsigned char> signature_bytes = DecodeBase64(signature.c_str(), &invalid);\n     if (invalid) {\n         return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n     }\n \n-    CPubKey pubkey;\n-    if (!pubkey.RecoverCompact(MessageHash(message), signature_bytes)) {\n-        return MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED;\n+    using proof::Result;\n+    Result r = proof::VerifySignature(message, destination, signature_bytes);\n+    switch (r) {\n+    case Result::Inconclusive:\n+    case Result::Incomplete: return MessageVerificationResult::ERR_NOT_SIGNED;\n+    case Result::Invalid: return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n+    case Result::Error: return MessageVerificationResult::ERR_MALFORMED_SIGNATURE;\n+    default: return MessageVerificationResult::OK;\n     }\n-\n-    if (!(CTxDestination(PKHash(pubkey)) == destination)) {\n-        return MessageVerificationResult::ERR_NOT_SIGNED;\n-    }\n-\n-    return MessageVerificationResult::OK;\n }\n \n bool MessageSign(\n     const CKey& privkey,\n     const std::string& message,\n+    const OutputType& address_type,\n     std::string& signature)\n {\n     std::vector<unsigned char> signature_bytes;\n \n-    if (!privkey.SignCompact(MessageHash(message), signature_bytes)) {\n+    try {\n+        proof::SignMessageWithPrivateKey(privkey, address_type, message, signature_bytes);\n+    } catch (const proof::signing_error&) {\n         return false;\n     }\n "
      },
      {
        "sha": "8f5d726426f68ca5768f2758ae94f5ff77760303",
        "filename": "src/util/message.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/util/message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/util/message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/message.h?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -13,6 +13,8 @@\n \n enum class OutputType;\n \n+enum class OutputType;\n+\n /** The result of a signed message verification.\n  * Message verification takes as an input:\n  * - address (with whose private key the message is supposed to have been signed)\n@@ -39,6 +41,11 @@ enum class MessageVerificationResult {\n     OK\n };\n \n+inline std::string MessageVerificationResultString(const MessageVerificationResult r) {\n+    static const char *strings[] = {\"ERR_INVALID_ADDRESS\", \"ERR_ADDRESS_NO_KEY\", \"ERR_MALFORMED_SIGNATURE\", \"ERR_PUBKEY_NOT_RECOVERED\", \"ERR_NOT_SIGNED\", \"OK\"};\n+    return strings[(int)r];\n+}\n+\n /** Verify a signed message.\n  * @param[in] address Signer's bitcoin address, it must refer to a public key.\n  * @param[in] signature The signature in base64 format.\n@@ -50,13 +57,15 @@ MessageVerificationResult MessageVerify(\n     const std::string& message);\n \n /** Sign a message.\n- * @param[in] privkey Private key to sign with.\n- * @param[in] message The message to sign.\n+ * @param[in] privkey      Private key to sign with.\n+ * @param[in] message      The message to sign.\n+ * @param[in] address_type The address type to use for signing\n  * @param[out] signature Signature, base64 encoded, only set if true is returned.\n  * @return true if signing was successful. */\n bool MessageSign(\n     const CKey& privkey,\n     const std::string& message,\n+    const OutputType& address_type,\n     std::string& signature);\n \n /**"
      },
      {
        "sha": "725c5d0cc3aa856145ade0d0ef7cd8cab1db1681",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 21,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -16,10 +16,10 @@\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n+#include <script/proof.h>\n #include <script/sign.h>\n #include <util/bip32.h>\n #include <util/fees.h>\n-#include <util/message.h> // For MessageSign()\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n@@ -562,29 +562,18 @@ static UniValue signmessage(const JSONRPCRequest& request)\n     }\n \n     const PKHash *pkhash = boost::get<PKHash>(&dest);\n-    if (!pkhash) {\n-        throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n-    }\n-\n-    CScript script_pub_key = GetScriptForDestination(*pkhash);\n-    std::unique_ptr<SigningProvider> provider = pwallet->GetSigningProvider(script_pub_key);\n-    if (!provider) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n-    }\n-\n-    CKey key;\n-    CKeyID keyID(*pkhash);\n-    if (!provider->GetKey(keyID, key)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n+    std::unique_ptr<SigningProvider> provider;\n+    if (pkhash) {\n+        CScript script_pub_key = GetScriptForDestination(*pkhash);\n+        provider = pwallet->GetSigningProvider(script_pub_key);\n+    } else {\n+        provider = pwallet->GetSigningProvider(GetScriptForDestination(dest));\n     }\n \n-    std::string signature;\n-\n-    if (!MessageSign(key, strMessage, signature)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Sign failed\");\n-    }\n+    std::vector<uint8_t> vchSig;\n+    proof::SignMessageWithSigningProvider(std::move(provider), strMessage, dest, vchSig);\n \n-    return signature;\n+    return EncodeBase64(vchSig.data(), vchSig.size());\n }\n \n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "2e4588eee595401c604168748d2daa42c5573723",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 43,
        "deletions": 1,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39ee690bc6a79c432eda8502ee793bf64ceac2a1/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39ee690bc6a79c432eda8502ee793bf64ceac2a1/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "patch": "@@ -11,7 +11,7 @@ class SignMessagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.extra_args = [[\"-addresstype=legacy\"]]\n+        self.extra_args = [[\"-addresstype=bech32\"]]\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n@@ -20,23 +20,65 @@ def run_test(self):\n         message = 'This is just a test message'\n \n         self.log.info('test signing with priv_key')\n+        self.log.info('test signing with priv_key with bech32')\n+        priv_key = 'cVbpmtsSXkBJhSZakwBSUY7jxhUgXZeT4hCAGyKixccRZwMG4jrf'\n+        address = 'bcrt1qf2yvxk355rc6pqgprrn7q4d3lctr22ta3ne08w'\n+        signature = self.nodes[0].signmessagewithprivkey(priv_key, message, 'bech32')\n+        assert self.nodes[0].verifymessage(address, signature, message)\n+        assert_equal(\"OK\", self.nodes[0].verifymessage(address, signature, message, 1))\n+\n+        self.log.info('test legacy key signing')\n         priv_key = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n         address = 'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB'\n         expected_signature = 'INbVnW4e6PeRmsv2Qgu8NuopvrVjkcxob+sX8OcZG0SALhWybUjzMLPdAsXI46YZGb0KQTRii+wWIQzRpG/U+S0='\n         signature = self.nodes[0].signmessagewithprivkey(priv_key, message)\n         assert_equal(expected_signature, signature)\n         assert self.nodes[0].verifymessage(address, signature, message)\n+        assert_equal(\"OK\", self.nodes[0].verifymessage(address, signature, message, 1))\n \n         self.log.info('test signing with an address with wallet')\n         address = self.nodes[0].getnewaddress()\n         signature = self.nodes[0].signmessage(address, message)\n         assert self.nodes[0].verifymessage(address, signature, message)\n+        assert_equal(\"OK\", self.nodes[0].verifymessage(address, signature, message, 1))\n \n         self.log.info('test verifying with another address should not work')\n         other_address = self.nodes[0].getnewaddress()\n+        legacy_address = self.nodes[0].getnewaddress(address_type='legacy')\n+        other_signature = self.nodes[0].signmessage(other_address, message)\n+        legacy_signature = self.nodes[0].signmessage(legacy_address, message)\n+        assert not self.nodes[0].verifymessage(other_address, signature, message)\n+        assert not self.nodes[0].verifymessage(address, other_signature, message)\n+        assert not self.nodes[0].verifymessage(legacy_address, signature, message)\n+        assert not self.nodes[0].verifymessage(address, legacy_signature, message)\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(other_address, signature, message, 1))\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(address, other_signature, message, 1))\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(legacy_address, signature, message, 1))\n+        # We get an error here, because the verifier believes the proof should be a BIP-322 proof, due to\n+        # the address not being P2PKH, but the proof is a legacy proof\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(address, legacy_signature, message, 1))\n+\n+        self.log.info('test signing with a legacy address with wallet')\n+        address = self.nodes[0].getnewaddress(address_type='legacy')\n+        signature = self.nodes[0].signmessage(address, message)\n+        assert self.nodes[0].verifymessage(address, signature, message)\n+        assert_equal(\"OK\", self.nodes[0].verifymessage(address, signature, message, 1))\n+\n+        self.log.info('test verifying legacy proof with another address should not work')\n+        other_address = self.nodes[0].getnewaddress()\n+        legacy_address = self.nodes[0].getnewaddress(address_type='legacy')\n         other_signature = self.nodes[0].signmessage(other_address, message)\n+        legacy_signature = self.nodes[0].signmessage(legacy_address, message)\n         assert not self.nodes[0].verifymessage(other_address, signature, message)\n         assert not self.nodes[0].verifymessage(address, other_signature, message)\n+        assert not self.nodes[0].verifymessage(legacy_address, signature, message)\n+        assert not self.nodes[0].verifymessage(address, legacy_signature, message)\n+        # We get an error here, because the verifier believes the proof should be a BIP-322 proof, due to\n+        # the address not being P2PKH, but the proof is a legacy proof\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(other_address, signature, message, 1))\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(address, other_signature, message, 1))\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(legacy_address, signature, message, 1))\n+        assert_equal(\"ERR_MALFORMED_SIGNATURE\", self.nodes[0].verifymessage(address, legacy_signature, message, 1))\n \n if __name__ == '__main__':\n     SignMessagesTest().main()"
      }
    ]
  },
  {
    "sha": "789bb98eb57d9674ed359961e2aa6b4548a4533c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODliYjk4ZWI1N2Q5Njc0ZWQzNTk5NjFlMmFhNmI0NTQ4YTQ1MzNj",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-04T05:11:44Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-07T02:31:04Z"
      },
      "message": "qt/gui: update message signing/verification to BIP-322",
      "tree": {
        "sha": "9de2a4fab83f06a90ea0100687867592b3b10e32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9de2a4fab83f06a90ea0100687867592b3b10e32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/789bb98eb57d9674ed359961e2aa6b4548a4533c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5jB2gACgkQV692LbM1\nMyLyBBAAht1BL+JTgxK434ZVns6BFHB0GnGzEU25gcDEVO+h9ivMjW0vkRW8HbaO\nDFtAjTUAFmqKINxGyUZroWJJxyxNVJig5iYxp1oDblFoqPteX0tK3MICHR+GOUA6\nP6ZDH58tyVwh5/UTO8QEts2IQkP9LHUk/6s4/Lf10GRIOq6ziY4JSQU6agGoce9F\nqU3JU81EDL7J6Ucs7n2taRckMeZ7YU6EWx1z+FdhTuTN7z/DsgmwYAXC1g36FZT1\n1F94cCN/CWD6Hdn4KssxoN6UEmJeNROIQTAl7BJsyhKHel3tkk7zazK5mjDlyEq2\nlZvIDZYoxy2jWvxx8dI8FlAfrcA0ZKZfNIoGvq/m7svotKL7oTrwdRuy9iM5Rr1i\n7E6Dgq9KVDpQ6rAje8yTYxF7YX56/xFwPYkmjYEaOSRPdVwo/9Riq3db/pHd7hlj\nnHkhnU5a2qo6mfaHx6HJPlWdH/qT1ZO+24/UVq+oKY3JOGLpBjjUhdxmcEDHWDKq\nNvnuDY91eirMpmOKmmTvEW2UA1sTSPIyaBh7FiASFbEc9YWTNXvFW/7JY2NgnmQW\ngTY2USEHqmzsyY6mREEyTJPtpWTI2iSbVDDL3mpBLkTOyd20QX8ac3msOIqteuN4\nBzrKYtjXv6hXjvMcChXDDO9OjnAFRMMHUFV9WxnJFWLYWYmlZX0=\n=WoDI\n-----END PGP SIGNATURE-----",
        "payload": "tree 9de2a4fab83f06a90ea0100687867592b3b10e32\nparent 39ee690bc6a79c432eda8502ee793bf64ceac2a1\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583298704 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583548264 +0900\n\nqt/gui: update message signing/verification to BIP-322\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789bb98eb57d9674ed359961e2aa6b4548a4533c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/789bb98eb57d9674ed359961e2aa6b4548a4533c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789bb98eb57d9674ed359961e2aa6b4548a4533c/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39ee690bc6a79c432eda8502ee793bf64ceac2a1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39ee690bc6a79c432eda8502ee793bf64ceac2a1"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 12,
      "deletions": 19
    },
    "files": [
      {
        "sha": "bb501f7421046f3fa0f3caf8d85394fe12215111",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 19,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/789bb98eb57d9674ed359961e2aa6b4548a4533c/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/789bb98eb57d9674ed359961e2aa6b4548a4533c/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=789bb98eb57d9674ed359961e2aa6b4548a4533c",
        "patch": "@@ -117,13 +117,6 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         ui->statusLabel_SM->setText(tr(\"The entered address is invalid.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n         return;\n     }\n-    const PKHash* pkhash = boost::get<PKHash>(&destination);\n-    if (!pkhash) {\n-        ui->addressIn_SM->setValid(false);\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"The entered address does not refer to a key.\") + QString(\" \") + tr(\"Please check the address and try again.\"));\n-        return;\n-    }\n \n     WalletModel::UnlockContext ctx(model->requestUnlock());\n     if (!ctx.isValid())\n@@ -133,27 +126,27 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n         return;\n     }\n \n-    CKey key;\n-    if (!model->wallet().getPrivKey(GetScriptForDestination(destination), CKeyID(*pkhash), key))\n-    {\n-        ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));\n-        return;\n-    }\n+    auto message = ui->messageIn_SM->document()->toPlainText().toStdString();\n+    std::vector<uint8_t> vchSig;\n \n-    const std::string& message = ui->messageIn_SM->document()->toPlainText().toStdString();\n-    std::string signature;\n+    std::string failure = \"\";\n+\n+    try {\n+        model->wallet().signMessage(message, destination, vchSig);\n+    } catch (const std::runtime_error& err) {\n+        failure = err.what();\n+    }\n \n-    if (!MessageSign(key, message, signature)) {\n+    if (failure != \"\") {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signing failed.\") + QString(\"</nobr>\"));\n+        ui->statusLabel_SM->setText(tr(failure.c_str()));\n         return;\n     }\n \n     ui->statusLabel_SM->setStyleSheet(\"QLabel { color: green; }\");\n     ui->statusLabel_SM->setText(QString(\"<nobr>\") + tr(\"Message signed.\") + QString(\"</nobr>\"));\n \n-    ui->signatureOut_SM->setText(QString::fromStdString(signature));\n+    ui->signatureOut_SM->setText(QString::fromStdString(EncodeBase64(vchSig.data(), vchSig.size())));\n }\n \n void SignVerifyMessageDialog::on_copySignatureButton_SM_clicked()"
      }
    ]
  },
  {
    "sha": "ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmY0ZDIzZmRiZDJhYWMzYTcxNWQwZDFmZjA4NzVjYTExZTE3NmZm",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-04T08:14:38Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2020-03-07T02:31:04Z"
      },
      "message": "test: update signmessage related tests",
      "tree": {
        "sha": "3ab1548c8c7a70ada07e066b389d774b3b0466e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ab1548c8c7a70ada07e066b389d774b3b0466e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAl5jB2gACgkQV692LbM1\nMyJkwRAAnj1Lfy7oUGu3VPyagMqVWAZAdNpQdWXhObnq0hBSV5dU4+6ySdahV+cQ\ndkHO6IMKGJ5J+ZmG5jvQ2NWXLx6qDKFgqCJMr83n5mQWHLWgNNODS6mpAF+Rwy38\naWoJ3q5FQKErYyPYtAj1eDYhDK7FVkrpixWaPpM9VOttEpSGYjpPbl2Fysaa2mtm\n3AgUl8aPDdpgj5GH7AbIVzNroLPvNSuGn/K67QRcm4s4tKKmGtwsc3ziSBl5MUHp\nyPnW+/jZpqu1twkz+cl00/QwUIVk+RNK+SPIDEyWaSUC+rBE1hdb0w/soH8cs1o+\nsXQsMN1Z2tS9bj3gtyONmzaGy5KZH6AzF+6CBxba1ZSz+R9Cde+huSKRnT6T5yXz\nhOrOx/XSqv7Stk+Djm62/bdz7v8wZ8wT35PXjuF+rYmx5rwugOTfojvrmZBGNlPk\nDvIKrwzHAXM7s751JsvDmSpBGJ3KRIvUgYuIYaWv3JSZ7qn/CWTXUgFWsg/D+VcO\nI5CQ5ZbMPqCEErqA9F5c3DEkbFk4XP9YoKoDP75QCONUFbs+uQMODMmi+AkqklYp\n/XAYHCHh5UK4dD2ulCIejCsgtZyaN6S7C8hTIdGdcceP73fdJBSsMg7nIfsRK1zg\nndBgCP9UmhvJ/tgPTbgBCc9D5Hv/G4Keogdlxnw+X19uZpIPI+g=\n=Pchm\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ab1548c8c7a70ada07e066b389d774b3b0466e8\nparent 789bb98eb57d9674ed359961e2aa6b4548a4533c\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583309678 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1583548264 +0900\n\ntest: update signmessage related tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "789bb98eb57d9674ed359961e2aa6b4548a4533c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/789bb98eb57d9674ed359961e2aa6b4548a4533c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/789bb98eb57d9674ed359961e2aa6b4548a4533c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 3,
      "deletions": 16
    },
    "files": [
      {
        "sha": "201a6d901f8062002466f6c15738221d069b77f2",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 16,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=ebf4d23fdbd2aac3a715d0d1ff0875ca11e176ff",
        "patch": "@@ -12,7 +12,8 @@\n #include <test/util/setup_common.h>\n #include <test/util/str.h>\n #include <uint256.h>\n-#include <util/message.h> // For MessageSign(), MessageVerify(), MESSAGE_MAGIC\n+#include <util/message.h> // For MessageSign(), MessageVerify()\n+#include <script/proof.h> // For MESSAGE_MAGIC\n #include <util/moneystr.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n@@ -2082,13 +2083,6 @@ BOOST_AUTO_TEST_CASE(message_verify)\n             \"message too\"),\n         MessageVerificationResult::ERR_INVALID_ADDRESS);\n \n-    BOOST_CHECK_EQUAL(\n-        MessageVerify(\n-            \"3B5fQsEXEaV8v6U3ejYc8XaKXAkyQj2MjV\",\n-            \"signature should be irrelevant\",\n-            \"message too\"),\n-        MessageVerificationResult::ERR_ADDRESS_NO_KEY);\n-\n     BOOST_CHECK_EQUAL(\n         MessageVerify(\n             \"1KqbBpLy5FARmTPD4VZnDDpYjkUvkr82Pm\",\n@@ -2101,14 +2095,7 @@ BOOST_AUTO_TEST_CASE(message_verify)\n             \"1KqbBpLy5FARmTPD4VZnDDpYjkUvkr82Pm\",\n             \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\",\n             \"message should be irrelevant\"),\n-        MessageVerificationResult::ERR_PUBKEY_NOT_RECOVERED);\n-\n-    BOOST_CHECK_EQUAL(\n-        MessageVerify(\n-            \"15CRxFdyRpGZLW9w8HnHvVduizdL5jKNbs\",\n-            \"IPojfrX2dfPnH26UegfbGQQLrdK844DlHq5157/P6h57WyuS/Qsl+h/WSVGDF4MUi4rWSswW38oimDYfNNUBUOk=\",\n-            \"I never signed this\"),\n-        MessageVerificationResult::ERR_NOT_SIGNED);\n+        MessageVerificationResult::ERR_MALFORMED_SIGNATURE);\n \n     BOOST_CHECK_EQUAL(\n         MessageVerify("
      }
    ]
  }
]