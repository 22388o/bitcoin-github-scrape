[
  {
    "sha": "2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWQyMGE5NmRmMGZkMmQ4YjRkOTMwZjIwMDRjNzY2YzBlMGNmNjVi",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T12:13:47Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T12:13:47Z"
      },
      "message": "[Wallet] Pass CCoinControl as parameter of CWallet::FundTransaction",
      "tree": {
        "sha": "29da171da10f29ea4da47c4219093326b7316da2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29da171da10f29ea4da47c4219093326b7316da2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70f6f56e9dde0d0eb1a51e70c051b8fa3ba9535f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70f6f56e9dde0d0eb1a51e70c051b8fa3ba9535f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70f6f56e9dde0d0eb1a51e70c051b8fa3ba9535f"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "ff54cd6280d7eef5d2c23fa169e1fa216bdd8e00",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
        "patch": "@@ -21,6 +21,7 @@\n #include \"wallet/feebumper.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n+#include \"wallet/coincontrol.h\"\n \n #include <stdint.h>\n \n@@ -2767,7 +2768,17 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     std::string strFailReason;\n \n-    if (!pwallet->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress)) {\n+    CCoinControl coinControl;\r\n+    coinControl.destChange = changeAddress;\r\n+    coinControl.fAllowOtherInputs = true;\r\n+    coinControl.fAllowWatchOnly = includeWatching;\r\n+    coinControl.fOverrideFeeRate = overrideEstimatedFeerate;\r\n+    coinControl.nFeeRate = feeRate;\n+\n+    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+        coinControl.Select(txin.prevout);\n+\n+    if (!pwallet->FundTransaction(tx, nFeeOut, coinControl, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n "
      },
      {
        "sha": "6948a704a5ec2f2a134ff0907c37d72a57d377cb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
        "patch": "@@ -2304,7 +2304,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     return true;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey, const CTxDestination& destChange)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, const CCoinControl& coinControl, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey)\n {\n     std::vector<CRecipient> vecSend;\n \n@@ -2316,16 +2316,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n         vecSend.push_back(recipient);\n     }\n \n-    CCoinControl coinControl;\n-    coinControl.destChange = destChange;\n-    coinControl.fAllowOtherInputs = true;\n-    coinControl.fAllowWatchOnly = includeWatching;\n-    coinControl.fOverrideFeeRate = overrideEstimatedFeeRate;\n-    coinControl.nFeeRate = specificFeeRate;\n-\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n-        coinControl.Select(txin.prevout);\n-\n     CReserveKey reservekey(this);\n     CWalletTx wtx;\n     if (!CreateTransaction(vecSend, wtx, reservekey, nFeeRet, nChangePosInOut, strFailReason, &coinControl, false))"
      },
      {
        "sha": "35525ccbb3b0bc05de3829188eee16eff6788995",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
        "patch": "@@ -897,7 +897,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool overrideEstimatedFeeRate, const CFeeRate& specificFeeRate, int& nChangePosInOut, std::string& strFailReason, bool includeWatching, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true, const CTxDestination& destChange = CNoDestination());\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, const CCoinControl& coinControl, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, bool keepReserveKey = true);\n     bool SignTransaction(CMutableTransaction& tx);\n \n     /**"
      }
    ]
  },
  {
    "sha": "2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjJlMjVkZGMwYjMwY2JlNWI3YTZmYTVkZWYwM2YzN2ViY2ZiOTVh",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:11:57Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:11:57Z"
      },
      "message": "[Wallet] Fetch CInputCoins from CWallet before calling FundTransaction",
      "tree": {
        "sha": "2418016d06047f7ace94b881c01dfa327ce2c9bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2418016d06047f7ace94b881c01dfa327ce2c9bc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad20a96df0fd2d8b4d930f2004c766c0e0cf65b"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 41,
      "deletions": 11
    },
    "files": [
      {
        "sha": "aae876301ae032899c466a8683b2215fdb995acd",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"wallet/wallet.h\"\n+#include <map>\n \n /** Coin Control Features. */\n class CCoinControl\n@@ -76,8 +77,24 @@ class CCoinControl\n         vOutpoints.assign(setSelected.begin(), setSelected.end());\n     }\n \n+    void AddKnownCoins(const CInputCoin& coin)\r\n+    {\r\n+        knownCoins.insert(std::make_pair(coin.outpoint, coin));\r\n+    }\r\n+\r\n+    boost::optional<CInputCoin> FindKnownCoin(const COutPoint& outpoint) const\r\n+    {\r\n+        boost::optional<CInputCoin> foundCoin;\r\n+        auto it = knownCoins.find(outpoint);\r\n+        if (it != knownCoins.end())\r\n+            foundCoin = it->second;\r\n+        return foundCoin;\r\n+    }\n+\n private:\n     std::set<COutPoint> setSelected;\n+    //! A map of known UTXO\r\n+    std::map<COutPoint, CInputCoin> knownCoins;\n };\n \n #endif // BITCOIN_WALLET_COINCONTROL_H"
      },
      {
        "sha": "4c4a82797885a992a5d549bec5293c8c4bae1e46",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
        "patch": "@@ -2776,7 +2776,14 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     coinControl.nFeeRate = feeRate;\n \n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    {\n         coinControl.Select(txin.prevout);\n+        boost::optional<CInputCoin> foundCoin;\n+        foundCoin = pwallet->FindCoin(txin.prevout);\n+        if(!foundCoin)\n+            throw JSONRPCError(RPC_WALLET_ERROR, _(\"Insufficient funds\"));\n+        coinControl.AddKnownCoins(*foundCoin);\n+    }\n \n     if (!pwallet->FundTransaction(tx, nFeeOut, coinControl, changePosition, strFailReason, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);"
      },
      {
        "sha": "18d92c3b37b74548747b0c4ca0925e5143f30385",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
        "patch": "@@ -2239,17 +2239,11 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         coinControl->ListSelected(vPresetInputs);\n     BOOST_FOREACH(const COutPoint& outpoint, vPresetInputs)\n     {\n-        std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n-        if (it != mapWallet.end())\n-        {\n-            const CWalletTx* pcoin = &it->second;\n-            // Clearly invalid input, fail\n-            if (pcoin->tx->vout.size() <= outpoint.n)\n-                return false;\n-            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(CInputCoin(pcoin, outpoint.n));\n-        } else\n-            return false; // TODO: Allow non-wallet inputs\n+        auto foundCoin = coinControl->FindKnownCoin(outpoint);\r\n+        if (!foundCoin)\r\n+            return false;\r\n+        nValueFromPresetInputs += foundCoin->txout.nValue;\r\n+        setPresetCoins.insert(*foundCoin);\n     }\n \n     // remove preset inputs from vCoins\n@@ -2350,6 +2344,16 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, const C\n     return true;\n }\n \n+boost::optional<CInputCoin> CWallet::FindCoin(const COutPoint& outpoint)\r\n+{\r\n+    LOCK(cs_wallet);\r\n+    boost::optional<CInputCoin> foundCoin;\r\n+    std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\r\n+    if (it != mapWallet.end())\r\n+        foundCoin = CInputCoin(&it->second, outpoint.n);\r\n+    return foundCoin;\r\n+}\n+\n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {"
      },
      {
        "sha": "72b6a419187e984b9288491fc7e591969f443c46",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
        "patch": "@@ -893,6 +893,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n \n+    boost::optional<CInputCoin> FindCoin(const COutPoint& outpoint);\n+\n     /**\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();"
      }
    ]
  },
  {
    "sha": "0855c46e58b946eee8d8021eefa4c72c715b1add",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODU1YzQ2ZTU4Yjk0NmVlZThkODAyMWVlZmE0YzcyYzcxNWIxYWRk",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:27:55Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:40:01Z"
      },
      "message": "[Wallet] Fetch CInputCoins from CCoinView before calling FundTransaction",
      "tree": {
        "sha": "43c50b3488333eafc76d5241a2c0bbba24e0bf5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43c50b3488333eafc76d5241a2c0bbba24e0bf5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0855c46e58b946eee8d8021eefa4c72c715b1add",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0855c46e58b946eee8d8021eefa4c72c715b1add",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0855c46e58b946eee8d8021eefa4c72c715b1add",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0855c46e58b946eee8d8021eefa4c72c715b1add/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f2e25ddc0b30cbe5b7a6fa5def03f37ebcfb95a"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8810837857f44bcd7f2202a69f32bffe3bd80b8c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0855c46e58b946eee8d8021eefa4c72c715b1add/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0855c46e58b946eee8d8021eefa4c72c715b1add/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0855c46e58b946eee8d8021eefa4c72c715b1add",
        "patch": "@@ -2622,6 +2622,21 @@ UniValue listunspent(const JSONRPCRequest& request)\n     return results;\n }\n \n+boost::optional<CInputCoin> FindInCoinView(const COutPoint& outpoint)\r\n+{\r\n+    LOCK2(cs_main, mempool.cs);\r\n+    boost::optional<CInputCoin> foundCoin;\r\n+    CCoinsViewMemPool coinsTipMempool(pcoinsTip, mempool);\r\n+    CCoinsViewCache view(&coinsTipMempool);\r\n+    CCoins coins;\r\n+    if (!view.GetCoins(outpoint.hash, coins))\r\n+        return foundCoin;\r\n+    if (!coins.IsAvailable(outpoint.n))\r\n+        return foundCoin;\r\n+    foundCoin = CInputCoin(coins.vout[outpoint.n], outpoint);\r\n+    return foundCoin;\r\n+}\n+\n UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -2780,6 +2795,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         coinControl.Select(txin.prevout);\n         boost::optional<CInputCoin> foundCoin;\n         foundCoin = pwallet->FindCoin(txin.prevout);\n+        if(!foundCoin)\n+            foundCoin = FindInCoinView(txin.prevout);\n         if(!foundCoin)\n             throw JSONRPCError(RPC_WALLET_ERROR, _(\"Insufficient funds\"));\n         coinControl.AddKnownCoins(*foundCoin);"
      },
      {
        "sha": "f7eaf5eb36d3703710e6299840aa5be57b9f4e94",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 18,
        "deletions": 4,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0855c46e58b946eee8d8021eefa4c72c715b1add/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0855c46e58b946eee8d8021eefa4c72c715b1add/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0855c46e58b946eee8d8021eefa4c72c715b1add",
        "patch": "@@ -475,6 +475,16 @@ class CWalletTx : public CMerkleTx\n \n class CInputCoin {\n public:\n+\n+    CInputCoin(const CTxOut& txoutIn, const COutPoint& outpointIn)\n+    {\n+        if(txoutIn.IsNull())\n+            throw std::invalid_argument(\"txoutIn should not be null\");\n+        if (outpointIn.IsNull())\n+            throw std::invalid_argument(\"outpointIn should not be null\");\n+        outpoint = outpointIn;\n+        txout = txoutIn;\n+    }\n     CInputCoin(const CWalletTx* walletTx, unsigned int i)\n     {\n         if (!walletTx)\n@@ -1163,11 +1173,15 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const ContainerType &coins\n         const CScript& scriptPubKey = coin.txout.scriptPubKey;\n         SignatureData sigdata;\n \n-        if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+        auto ismine = IsMine(coin.txout);\n+        if (ismine == ISMINE_SPENDABLE || ismine == ISMINE_WATCH_SOLVABLE)\n         {\n-            return false;\n-        } else {\n-            UpdateTransaction(txNew, nIn, sigdata);\n+            if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+            {\n+                return false;\n+            } else {\n+                UpdateTransaction(txNew, nIn, sigdata);\n+            }\n         }\n \n         nIn++;"
      }
    ]
  },
  {
    "sha": "8fd0b6a0c95393e32932a4446235860b72481733",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmQwYjZhMGM5NTM5M2UzMjkzMmE0NDQ2MjM1ODYwYjcyNDgxNzMz",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:32:13Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:40:11Z"
      },
      "message": "[Wallet] FundRawTransaction returns unknown-input error on invalid input",
      "tree": {
        "sha": "bdcc86bc4e866bca46e8869a0c8a801104d4f67e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdcc86bc4e866bca46e8869a0c8a801104d4f67e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fd0b6a0c95393e32932a4446235860b72481733",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd0b6a0c95393e32932a4446235860b72481733",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd0b6a0c95393e32932a4446235860b72481733",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd0b6a0c95393e32932a4446235860b72481733/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0855c46e58b946eee8d8021eefa4c72c715b1add",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0855c46e58b946eee8d8021eefa4c72c715b1add",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0855c46e58b946eee8d8021eefa4c72c715b1add"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d9347489cd11f27a29345eee4d3934e71cd3f93d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd0b6a0c95393e32932a4446235860b72481733/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd0b6a0c95393e32932a4446235860b72481733/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8fd0b6a0c95393e32932a4446235860b72481733",
        "patch": "@@ -2798,7 +2798,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         if(!foundCoin)\n             foundCoin = FindInCoinView(txin.prevout);\n         if(!foundCoin)\n-            throw JSONRPCError(RPC_WALLET_ERROR, _(\"Insufficient funds\"));\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"unknown-input\");\n         coinControl.AddKnownCoins(*foundCoin);\n     }\n "
      },
      {
        "sha": "6055f1cb0a5eb6fb2703a0e177d320a3d394a655",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fd0b6a0c95393e32932a4446235860b72481733/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fd0b6a0c95393e32932a4446235860b72481733/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=8fd0b6a0c95393e32932a4446235860b72481733",
        "patch": "@@ -316,7 +316,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_jsonrpc(-4, \"unknown-input\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction"
      }
    ]
  },
  {
    "sha": "8950e8afd6d969e1c5055cce00957d2fa26279b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTUwZThhZmQ2ZDk2OWUxYzUwNTVjY2UwMDk1N2QyZmEyNjI3OWIy",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:37:21Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-13T13:40:12Z"
      },
      "message": "[Wallet] Test FundRawTransaction with inputs from the CoinView",
      "tree": {
        "sha": "e461a019f268508e5802224ac7e0ff426111f035",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e461a019f268508e5802224ac7e0ff426111f035"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8950e8afd6d969e1c5055cce00957d2fa26279b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8950e8afd6d969e1c5055cce00957d2fa26279b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8950e8afd6d969e1c5055cce00957d2fa26279b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8950e8afd6d969e1c5055cce00957d2fa26279b2/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fd0b6a0c95393e32932a4446235860b72481733",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fd0b6a0c95393e32932a4446235860b72481733",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fd0b6a0c95393e32932a4446235860b72481733"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0eda7ab2eab19bfabb6566ae1e0ff168cb0f0b8a",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8950e8afd6d969e1c5055cce00957d2fa26279b2/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8950e8afd6d969e1c5055cce00957d2fa26279b2/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=8950e8afd6d969e1c5055cce00957d2fa26279b2",
        "patch": "@@ -63,6 +63,7 @@ def run_test(self):\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.5)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 1.0)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 5.0)\n+        self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 3.0)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -307,6 +308,30 @@ def run_test(self):\n         assert_equal(matchingOuts, 2)\n         assert_equal(len(dec_tx['vout']), 3)\n \n+        ##############################################################################################\n+        # test a fundrawtransaction with one vin from wallet and one from mempool, one from CoinView #\n+        ##############################################################################################\n+        utx = get_unspent(self.nodes[0].listunspent(), 50)\n+        recei = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 4)\n+        self.sync_all()\n+        # utx2 is unconfirmed, utx3 is confirmed (sent at the beginning of this test)\n+        utx2 = get_unspent(self.nodes[2].listunspent(minconf=0, maxconf=0, addresses=None, include_unsafe=True), 4)\n+        utx3 = get_unspent(self.nodes[2].listunspent(), 3)\n+        inputs  = [ {'txid' : utx['txid'], 'vout' : utx['vout']},{'txid' : utx2['txid'], 'vout' : utx2['vout']},{'txid' : utx3['txid'], 'vout' : utx3['vout']} ]\n+        outputs = { self.nodes[0].getnewaddress() : 50 + 4 + 3 + 2 }\n+        rawtx   = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawtxfund = self.nodes[0].fundrawtransaction(rawtx)\n+        dec_tx  = self.nodes[0].decoderawtransaction(rawtxfund['hex'])\n+        # Should contains the 3 previous vin + a new one added by the wallet\n+        assert_equal(len(dec_tx['vin']), 4)\n+        # Should contains the change, nodes[0] having only 50 BTC coins, it should returns around 43 BTC\n+        assert_equal(len(dec_tx['vout']), 2)\n+        totalOut = 0\n+        for out in dec_tx['vout']:\n+            totalOut += out['value']\n+        assert_greater_than(totalOut, 50 + 4 + 3 + 2 + 42.9)\n+        assert_greater_than(50 + 4 + 3 + 2 + 43, totalOut)\n+\n         ##############################################\n         # test a fundrawtransaction with invalid vin #\n         ##############################################"
      }
    ]
  },
  {
    "sha": "caea518e44b56caf2942063a86d3ee28ccacf63a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWVhNTE4ZTQ0YjU2Y2FmMjk0MjA2M2E4NmQzZWUyOGNjYWNmNjNh",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-15T04:37:12Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-15T04:37:12Z"
      },
      "message": "[Wallet] FundRawTransaction can accept pre-set inputs whose parent is not yet broadcasted",
      "tree": {
        "sha": "c8b413b262ad08aa7529c5bc762aa481714ad12a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b413b262ad08aa7529c5bc762aa481714ad12a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caea518e44b56caf2942063a86d3ee28ccacf63a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caea518e44b56caf2942063a86d3ee28ccacf63a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caea518e44b56caf2942063a86d3ee28ccacf63a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caea518e44b56caf2942063a86d3ee28ccacf63a/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8950e8afd6d969e1c5055cce00957d2fa26279b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8950e8afd6d969e1c5055cce00957d2fa26279b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8950e8afd6d969e1c5055cce00957d2fa26279b2"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 115,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a4c8cadca51b9cf0af576beda4f55384d3893cfb",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caea518e44b56caf2942063a86d3ee28ccacf63a/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caea518e44b56caf2942063a86d3ee28ccacf63a/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=caea518e44b56caf2942063a86d3ee28ccacf63a",
        "patch": "@@ -88,6 +88,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"signrawtransaction\", 2, \"privkeys\" },\n     { \"sendrawtransaction\", 1, \"allowhighfees\" },\n     { \"fundrawtransaction\", 1, \"options\" },\n+    { \"fundrawtransaction\", 2, \"previousOutputs\" },\n     { \"gettxout\", 1, \"n\" },\n     { \"gettxout\", 2, \"include_mempool\" },\n     { \"gettxoutproof\", 0, \"txids\" },"
      },
      {
        "sha": "4348bc6462eeeb612ea855d18adc88823698df99",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 2,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caea518e44b56caf2942063a86d3ee28ccacf63a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caea518e44b56caf2942063a86d3ee28ccacf63a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=caea518e44b56caf2942063a86d3ee28ccacf63a",
        "patch": "@@ -2644,7 +2644,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n@@ -2675,6 +2675,19 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"                                  [vout_index,...]\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n+                            \"3. previousOutputs              (object, optional)\\n\"\n+                            \"   {\\n\"\n+                            \"     \\\"parentTransactions\\\"     (array, optional) An array or the parent transactions used to verify the nValue of non segwit previousOutputs in hex\\n\"\n+                            \"     \\\"previousOutputs\\\"        (array required) An array of previous outputs\\n\"\n+                            \"       [\\n\"\n+                            \"         {\\n\"\n+                            \"           \\\"txid\\\"             (string) The transaction Id\\n\"\n+                            \"           \\\"n\\\"                (numeric) The output index\\n\"\n+                            \"           \\\"amount\\\"           (decimal) The output amount in BTC\\n\"\n+                            \"           \\\"scriptPubKey\\\"     (string) The scriptPubKey\\n\"\n+                            \"         }\\n\"\n+                            \"       ]\\n\"\n+                            \"   }\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2703,14 +2716,19 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     bool overrideEstimatedFeerate = false;\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n+    std::map<COutPoint, CInputCoin> inputCoins;\n \n     if (request.params.size() > 1) {\n       if (request.params[1].type() == UniValue::VBOOL) {\n         // backward compatibility bool only fallback\n         includeWatching = request.params[1].get_bool();\n       }\n       else {\n-        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        if (request.params.size() == 2)\n+            RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        if (request.params.size() > 2)\n+            RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ)(UniValue::VOBJ));\n+\n \n         UniValue options = request.params[1];\n \n@@ -2755,6 +2773,98 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n         if (options.exists(\"subtractFeeFromOutputs\"))\n             subtractFeeFromOutputs = options[\"subtractFeeFromOutputs\"].get_array();\n+\n+        if (request.params.size() > 2)\n+        {\n+            UniValue previousOutputs = request.params[2];\n+            RPCTypeCheckObj(previousOutputs,\n+            {\n+                { \"parentTransactions\", UniValueType(UniValue::VARR) },\n+                { \"previousOutputs\", UniValueType(UniValue::VARR) }\n+            },\n+            true, true);\n+\n+            bool segwitEnabled;\n+            {\n+                LOCK(cs_main);\n+                segwitEnabled = IsWitnessEnabled(chainActive.Tip(), Params().GetConsensus());\n+            }\n+            std::map<uint256, CTransaction> knownTransactions;\n+            if (previousOutputs.exists(\"parentTransactions\"))\n+            {\n+                CMutableTransaction tx;\n+                auto& parentTransactionsArray = previousOutputs[\"parentTransactions\"].get_array();\n+                for (unsigned int idx = 0; idx < parentTransactionsArray.size(); idx++) {\n+                    auto& strHexTx = parentTransactionsArray[idx].get_str();\n+                    if (!IsHex(strHexTx))\n+                        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+                    std::vector<unsigned char> txData(ParseHex(strHexTx));\n+                    CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n+                    try {\n+                        ssData >> tx;\n+                        if (!ssData.empty())\n+                            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+                    }\n+                    catch (const std::exception&) {\n+                        throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n+                    }\n+                    uint256 txHash = tx.GetHash();\n+                    if (!knownTransactions.count(txHash))\n+                        knownTransactions.insert(std::make_pair(txHash, tx));\n+                }\n+            }\n+            if (!previousOutputs.exists(\"previousOutputs\"))\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"previousOutputs is required\");\n+\n+            auto& previousOutputsArray = previousOutputs[\"previousOutputs\"].get_array();\n+            for (unsigned int idx = 0; idx < previousOutputsArray.size(); idx++) {\n+                const auto& previousOutputsObj = previousOutputsArray[idx];\n+                RPCTypeCheckObj(previousOutputsObj,\n+                {\n+                    { \"txid\", UniValueType(UniValue::VSTR) },\n+                    { \"n\", UniValueType(UniValue::VNUM) },\n+                    { \"scriptPubKey\", UniValueType(UniValue::VSTR) },\n+                },\n+                false, false);\n+                if (!previousOutputsObj.exists(\"amount\"))\n+                    throw JSONRPCError(RPC_INVALID_PARAMS, \"amount is required if previousOutputs\");\n+                CAmount nAmount = AmountFromValue(previousOutputsObj[\"amount\"]);\n+                if (nAmount <= 0)\n+                    throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n+                int64_t n = previousOutputsObj[\"n\"].get_int64();\n+                if (n < 0 || n > std::numeric_limits<uint32_t>::max())\n+                    throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid output index\");\n+                auto& txIdStr = previousOutputsObj[\"txid\"].get_str();\n+                if (!IsHex(txIdStr) || txIdStr.size() != 64)\n+                    throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid txid\");\n+                uint256 txId;\n+                txId.SetHex(txIdStr);\n+                const auto& scriptPubKeyStr = previousOutputsObj[\"scriptPubKey\"].get_str();\n+                if (!IsHex(txIdStr))\n+                    throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid scriptPubKey\");\n+                auto scriptPubKeyHex = ParseHex(scriptPubKeyStr);\n+                CScript scriptPubKey(scriptPubKeyHex);\n+                COutPoint outpoint(txId, n);\n+                CTxOut txOut(nAmount, scriptPubKey);\n+\n+                int witVersion;\n+                std::vector<unsigned char> witProgram;\n+                if (!segwitEnabled || !scriptPubKey.IsWitnessProgram(witVersion, witProgram))\n+                {\n+                    if (!knownTransactions.count(txId))\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Missing parent transaction\");\n+                    auto& parentTx = knownTransactions.at(txId);\n+                    if (n < 0)\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, negative position: %d\", n));\n+                    if (n >= int(parentTx.vout.size()))\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, position too large: %d\", n));\n+                    if (parentTx.vout[n].nValue != nAmount)\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid amount for output\");\n+                }\n+                if (!inputCoins.count(outpoint))\n+                    inputCoins.insert(std::make_pair(outpoint, CInputCoin(txOut, outpoint)));\n+            }\n+        }\n       }\n     }\n \n@@ -2797,6 +2907,8 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         foundCoin = pwallet->FindCoin(txin.prevout);\n         if(!foundCoin)\n             foundCoin = FindInCoinView(txin.prevout);\n+        if (inputCoins.count(txin.prevout))\n+            foundCoin = inputCoins.at(txin.prevout);\n         if(!foundCoin)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"unknown-input\");\n         coinControl.AddKnownCoins(*foundCoin);"
      }
    ]
  },
  {
    "sha": "8b1c4a3ae145cbb4fa492313dd08f8db7555aed9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjFjNGEzYWUxNDVjYmI0ZmE0OTIzMTNkZDA4ZjhkYjc1NTVhZWQ5",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-15T04:37:58Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2017-04-15T04:37:58Z"
      },
      "message": "[Wallet] Test FundRawTransaction with input from a non existing transaction",
      "tree": {
        "sha": "f078361476affac977bede585db2f953d7cf55d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f078361476affac977bede585db2f953d7cf55d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b1c4a3ae145cbb4fa492313dd08f8db7555aed9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1c4a3ae145cbb4fa492313dd08f8db7555aed9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b1c4a3ae145cbb4fa492313dd08f8db7555aed9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b1c4a3ae145cbb4fa492313dd08f8db7555aed9/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caea518e44b56caf2942063a86d3ee28ccacf63a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caea518e44b56caf2942063a86d3ee28ccacf63a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caea518e44b56caf2942063a86d3ee28ccacf63a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "bcf37f0fd6816e17ea27e2385e72958032c27e9d",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b1c4a3ae145cbb4fa492313dd08f8db7555aed9/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b1c4a3ae145cbb4fa492313dd08f8db7555aed9/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=8b1c4a3ae145cbb4fa492313dd08f8db7555aed9",
        "patch": "@@ -336,12 +336,15 @@ def run_test(self):\n         # test a fundrawtransaction with invalid vin #\n         ##############################################\n         listunspent = self.nodes[2].listunspent()\n-        inputs  = [ {'txid' : \"1c7f966dab21119bac53213a2bc7532bff1fa844c124fd750a7d0b1332440bd1\", 'vout' : 0} ] #invalid vin!\n+        fakeTx = \"0100000001aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000000ffffffff0100e1f505000000001600149e74df90b0544a8c8e9337896bb5578f8dd5a70900000000\"\n+        fakeTxId = \"fc5a4367363cf10dc6f2badf709d3691b88acd853dee3b50c4bef080c2760273\"\n+        inputs  = [ {'txid' : \"fc5a4367363cf10dc6f2badf709d3691b88acd853dee3b50c4bef080c2760273\", 'vout' : 0} ] #invalid vin!\n         outputs = { self.nodes[0].getnewaddress() : 1.0}\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n-\n         assert_raises_jsonrpc(-4, \"unknown-input\", self.nodes[2].fundrawtransaction, rawtx)\n+        rawtxfund = self.nodes[0].fundrawtransaction(rawtx, {}, { 'parentTransactions' : [ fakeTx ], 'previousOutputs' : [ { \"txid\" : fakeTxId, \"n\" : 0, \"amount\" : \"1.0\", \"scriptPubKey\" : \"00149e74df90b0544a8c8e9337896bb5578f8dd5a709\"  } ] })\n+        assert_raises_jsonrpc(-8, \"Invalid amount for output\", self.nodes[2].fundrawtransaction, rawtx, {}, { 'parentTransactions' : [ fakeTx ], 'previousOutputs' : [ { \"txid\" : fakeTxId, \"n\" : 0, \"amount\" : \"1.1\", \"scriptPubKey\" : \"00149e74df90b0544a8c8e9337896bb5578f8dd5a709\"  } ] })\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction"
      }
    ]
  }
]