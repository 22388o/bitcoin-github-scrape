[
  {
    "sha": "85519ff6875296dc929c179eff1b2ce95b34787a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTUxOWZmNjg3NTI5NmRjOTI5YzE3OWVmZjFiMmNlOTViMzQ3ODdh",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2013-12-12T18:54:16Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-05-20T20:42:49Z"
      },
      "message": "Add network node whitelisting (cannot be banned)\n\nIncludes 'addwhite' and 'listwhite' RPCs.",
      "tree": {
        "sha": "1579dd0b03597cc4efa99aeaeefc57c0d751f485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1579dd0b03597cc4efa99aeaeefc57c0d751f485"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85519ff6875296dc929c179eff1b2ce95b34787a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85519ff6875296dc929c179eff1b2ce95b34787a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85519ff6875296dc929c179eff1b2ce95b34787a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85519ff6875296dc929c179eff1b2ce95b34787a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9d97e83bf677ce595c6b2dc5d6805c2fcb1bc05b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d97e83bf677ce595c6b2dc5d6805c2fcb1bc05b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d97e83bf677ce595c6b2dc5d6805c2fcb1bc05b"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 108,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1f8b33cc3fd32c8233317fa604729d00af7eeb15",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85519ff6875296dc929c179eff1b2ce95b34787a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85519ff6875296dc929c179eff1b2ce95b34787a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=85519ff6875296dc929c179eff1b2ce95b34787a",
        "patch": "@@ -585,6 +585,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n     strWalletFile = GetArg(\"-wallet\", \"wallet.dat\");\n #endif\n+\n+    LoadWhitelist();\n+\n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n \n     std::string strDataDir = GetDataDir().string();"
      },
      {
        "sha": "28e9cbf48e9eeb380fde64babd674c7793f3ed23",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85519ff6875296dc929c179eff1b2ce95b34787a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85519ff6875296dc929c179eff1b2ce95b34787a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=85519ff6875296dc929c179eff1b2ce95b34787a",
        "patch": "@@ -4369,6 +4369,8 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (state.fShouldBan) {\n             if (pto->addr.IsLocal())\n                 LogPrintf(\"Warning: not banning local node %s!\\n\", pto->addr.ToString());\n+            else if (IsWhitelisted(pto->addr))\n+                LogPrintf(\"Warning: not banning whitelisted node %s!\\n\", pto->addr.ToString());\n             else {\n                 pto->fDisconnect = true;\n                 CNode::Ban(pto->addr);"
      },
      {
        "sha": "f62358bc9c6b1fd7ca46a31a43731bbfb58bed87",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85519ff6875296dc929c179eff1b2ce95b34787a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85519ff6875296dc929c179eff1b2ce95b34787a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=85519ff6875296dc929c179eff1b2ce95b34787a",
        "patch": "@@ -51,6 +51,8 @@ bool fDiscover = true;\n uint64_t nLocalServices = NODE_NETWORK;\n CCriticalSection cs_mapLocalHost;\n map<CNetAddr, LocalServiceInfo> mapLocalHost;\n+static CCriticalSection cs_mapWhitelist;\n+static map<CNetAddr, LocalServiceInfo> mapWhitelist;\n static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n@@ -297,6 +299,57 @@ bool IsReachable(const CNetAddr& addr)\n     return vfReachable[net] && !vfLimited[net];\n }\n \n+/** learn a new whitelisted address */\n+bool AddWhitelist(const CService& addr, int nScore)\n+{\n+    LogPrintf(\"AddWhitelist(%s,%i)\\n\", addr.ToString().c_str(), nScore);\n+\n+    {\n+        LOCK(cs_mapWhitelist);\n+        bool fAlready = mapWhitelist.count(addr) > 0;\n+        LocalServiceInfo &info = mapWhitelist[addr];\n+        if (!fAlready || nScore >= info.nScore) {\n+            info.nScore = nScore + (fAlready ? 1 : 0);\n+            info.nPort = addr.GetPort();\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+/** check if node is whitelisted */\n+bool IsWhitelisted(const CService& addr)\n+{\n+    LOCK(cs_mapWhitelist);\n+    return mapWhitelist.count(addr) > 0;\n+}\n+\n+/** load configuration into whitelist */\n+void LoadWhitelist()\n+{\n+    // Connect to specific addresses\n+    if (mapArgs.count(\"-whitelist\") && mapMultiArgs[\"-whitelist\"].size() > 0)\n+    {\n+        BOOST_FOREACH(string strAddr, mapMultiArgs[\"-whitelist\"])\n+        {\n+            CService serv(strAddr.c_str(), Params().GetDefaultPort(), true);\n+            if (serv.IsValid())\n+                AddWhitelist(serv, 0);\n+        }\n+    }\n+}\n+\n+/** return all whitelisted nodes */\n+void GetWhitelist(std::vector<CService>& wl)\n+{\n+    LOCK(cs_mapWhitelist);\n+    for (map<CNetAddr, LocalServiceInfo>::iterator it = mapWhitelist.begin();\n+         it != mapWhitelist.end(); ++it) {\n+        CService serv((*it).first, (*it).second.nPort);\n+        wl.push_back(serv);\n+    }\n+}\n+\n bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n {\n     SOCKET hSocket;"
      },
      {
        "sha": "bfc2d632f4342b6c91493abd75f7e2b07a0fac0a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85519ff6875296dc929c179eff1b2ce95b34787a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85519ff6875296dc929c179eff1b2ce95b34787a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=85519ff6875296dc929c179eff1b2ce95b34787a",
        "patch": "@@ -91,6 +91,10 @@ bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n+bool AddWhitelist(const CService& addr, int nScore);\n+bool IsWhitelisted(const CService& addr);\n+void LoadWhitelist();\n+void GetWhitelist(std::vector<CService>& wl);\n bool GetLocal(CService &addr, const CNetAddr *paddrPeer = NULL);\n bool IsReachable(const CNetAddr &addr);\n void SetReachable(enum Network net, bool fFlag = true);"
      },
      {
        "sha": "37ba398b18114600d664576d8b5d26e2822e40b5",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85519ff6875296dc929c179eff1b2ce95b34787a/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85519ff6875296dc929c179eff1b2ce95b34787a/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=85519ff6875296dc929c179eff1b2ce95b34787a",
        "patch": "@@ -142,6 +142,48 @@ Value getpeerinfo(const Array& params, bool fHelp)\n     return ret;\n }\n \n+Value addwhite(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"addwhite \\\"node\\\"\\n\"\n+            \"\\nAttempts add a node to the whitelist.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"node\\\"     (string, required) The node (see getpeerinfo for nodes)\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"addwhite\", \"\\\"192.168.0.6:8333\\\" \")\n+            + HelpExampleRpc(\"addwhite\", \"\\\"192.168.0.6:8333\\\" \")\n+        );\n+\n+    string strNode = params[0].get_str();\n+\n+    CService serv(strNode.c_str(), Params().GetDefaultPort(), true);\n+\n+    return AddWhitelist(serv, 0);\n+}\n+\n+Value listwhite(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"listwhite\\n\"\n+            \"\\nList whitelisted nodes\\n\"\n+        );\n+\n+    std::vector<CService> wl;\n+    GetWhitelist(wl);\n+\n+    Array res;\n+\n+    for (unsigned int i = 0; i < wl.size(); i++) {\n+        Object obj;\n+        obj.push_back(Pair(\"address\", wl[i].ToStringIPPort()));\n+        res.push_back(obj);\n+    }\n+\n+    return res;\n+}\n+\n Value addnode(const Array& params, bool fHelp)\n {\n     string strCommand;"
      },
      {
        "sha": "68939f6024a8544997d3e754becbf4dc353598ad",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85519ff6875296dc929c179eff1b2ce95b34787a/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85519ff6875296dc929c179eff1b2ce95b34787a/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=85519ff6875296dc929c179eff1b2ce95b34787a",
        "patch": "@@ -232,6 +232,8 @@ static const CRPCCommand vRPCCommands[] =\n     /* P2P networking */\n     { \"getnetworkinfo\",         &getnetworkinfo,         true,      false,      false },\n     { \"addnode\",                &addnode,                true,      true,       false },\n+    { \"addwhite\",               &addwhite,               true,      true,       false },\n+    { \"listwhite\",              &listwhite,              true,      true,       false },\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n     { \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n     { \"getnettotals\",           &getnettotals,           true,      true,       false },"
      },
      {
        "sha": "c71d62ea9695247fc053f2bbf68cfe64baf14929",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85519ff6875296dc929c179eff1b2ce95b34787a/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85519ff6875296dc929c179eff1b2ce95b34787a/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=85519ff6875296dc929c179eff1b2ce95b34787a",
        "patch": "@@ -117,6 +117,8 @@ extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, b\n extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value ping(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value addwhite(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value listwhite(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fHelp);\n "
      }
    ]
  }
]