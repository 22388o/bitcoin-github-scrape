[
  {
    "sha": "fe4a655042f7de31dce120aeed72345579f1b59f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTRhNjU1MDQyZjdkZTMxZGNlMTIwYWVlZDcyMzQ1NTc5ZjFiNTlm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-05T14:07:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-20T08:41:54Z"
      },
      "message": "Fine-grained UI updates\n\nGets rid of `MainFrameRepaint` in favor of specific update functions that tell the UI exactly what changed.\n\nThis improves the efficiency of various handlers. Also fixes problems with mined transactions not showing up until restart.\n\nThe following notifications were added:\n\n- `NotifyBlocksChanged`: Block chain changed\n- `NotifyKeyStoreStatusChanged`: Wallet status (encrypted, locked) changed.\n- `NotifyAddressBookChanged`: Address book entry changed.\n- `NotifyTransactionChanged`: Wallet transaction added, removed or updated.\n- `NotifyNumConnectionsChanged`: Number of connections changed.\n- `NotifyAlertChanged`: New, updated or cancelled alert. As this finally makes it possible for the UI to know when a new alert arrived, it can be shown as OS notification.\n\nThese notifications could also be useful for RPC clients. However, currently, they are ignored in bitcoind (in noui.cpp).\n\nAlso brings back polling with timer for numBlocks in ClientModel. This value updates so frequently during initial download that the number of signals clogs the UI thread and causes heavy CPU usage. And after initial block download, the value changes so rarely that a delay of half a second until the UI updates is unnoticable.",
      "tree": {
        "sha": "847f725c2cc3ba00f4a314382d334a7148d78ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/847f725c2cc3ba00f4a314382d334a7148d78ecd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe4a655042f7de31dce120aeed72345579f1b59f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe4a655042f7de31dce120aeed72345579f1b59f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe4a655042f7de31dce120aeed72345579f1b59f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe4a655042f7de31dce120aeed72345579f1b59f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "563f3efda3d3230bc512b35f15598d5e4e3a5071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/563f3efda3d3230bc512b35f15598d5e4e3a5071",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/563f3efda3d3230bc512b35f15598d5e4e3a5071"
      }
    ],
    "stats": {
      "total": 705,
      "additions": 432,
      "deletions": 273
    },
    "files": [
      {
        "sha": "55fba4c37225fe8ccb5eece548e3f28b5713bcff",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"keystore.h\"\n #include \"script.h\"\n+#include \"ui_interface.h\"\n \n bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const\n {\n@@ -73,6 +74,20 @@ bool CCryptoKeyStore::SetCrypted()\n     return true;\n }\n \n+bool CCryptoKeyStore::Lock()\n+{\n+    if (!SetCrypted())\n+        return false;\n+\n+    {\n+        LOCK(cs_KeyStore);\n+        vMasterKey.clear();\n+    }\n+\n+    NotifyKeyStoreStatusChanged(this);\n+    return true;\n+}\n+\n bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n {\n     {\n@@ -99,6 +114,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         }\n         vMasterKey = vMasterKeyIn;\n     }\n+    NotifyKeyStoreStatusChanged(this);\n     return true;\n }\n "
      },
      {
        "sha": "dd7110db58c20635ad9dfe7573c473fae4027714",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -143,18 +143,7 @@ class CCryptoKeyStore : public CBasicKeyStore\n         return result;\n     }\n \n-    bool Lock()\n-    {\n-        if (!SetCrypted())\n-            return false;\n-\n-        {\n-            LOCK(cs_KeyStore);\n-            vMasterKey.clear();\n-        }\n-\n-        return true;\n-    }\n+    bool Lock();\n \n     virtual bool AddCryptedKey(const std::vector<unsigned char> &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddKey(const CKey& key);"
      },
      {
        "sha": "7e7a0badfde824dcf9efaba3fc35d669d6c621c3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 3,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -946,7 +946,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     {\n         bnBestInvalidWork = pindexNew->bnChainWork;\n         CTxDB().WriteBestInvalidWork(bnBestInvalidWork);\n-        MainFrameRepaint();\n+        NotifyBlocksChanged();\n     }\n     printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s\\n\", pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight, pindexNew->bnChainWork.ToString().c_str());\n     printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n@@ -1647,7 +1647,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n         hashPrevBestCoinBase = vtx[0].GetHash();\n     }\n \n-    MainFrameRepaint();\n+    NotifyBlocksChanged();\n     return true;\n }\n \n@@ -2176,6 +2176,18 @@ string GetWarnings(string strFor)\n     return \"error\";\n }\n \n+CAlert CAlert::getAlertByHash(const uint256 &hash)\n+{\n+    CAlert retval;\n+    {\n+        LOCK(cs_mapAlerts);\n+        map<uint256, CAlert>::iterator mi = mapAlerts.find(hash);\n+        if(mi != mapAlerts.end())\n+            retval = mi->second;\n+    }\n+    return retval;\n+}\n+\n bool CAlert::ProcessAlert()\n {\n     if (!CheckSignature())\n@@ -2192,11 +2204,13 @@ bool CAlert::ProcessAlert()\n             if (Cancels(alert))\n             {\n                 printf(\"cancelling alert %d\\n\", alert.nID);\n+                NotifyAlertChanged((*mi).first, CT_DELETED);\n                 mapAlerts.erase(mi++);\n             }\n             else if (!alert.IsInEffect())\n             {\n                 printf(\"expiring alert %d\\n\", alert.nID);\n+                NotifyAlertChanged((*mi).first, CT_DELETED);\n                 mapAlerts.erase(mi++);\n             }\n             else\n@@ -2216,10 +2230,12 @@ bool CAlert::ProcessAlert()\n \n         // Add to mapAlerts\n         mapAlerts.insert(make_pair(GetHash(), *this));\n+        // Notify UI if it applies to me\n+        if(AppliesToMe())\n+            NotifyAlertChanged(GetHash(), CT_NEW);\n     }\n \n     printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n-    MainFrameRepaint();\n     return true;\n }\n "
      },
      {
        "sha": "f4a9759d7676f0ef01e21c645556c2b6d5ee3eb8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -1574,6 +1574,11 @@ class CAlert : public CUnsignedAlert\n     }\n \n     bool ProcessAlert();\n+\n+    /*\n+     * Get copy of (active) alert object by hash. Returns a null alert if it is not found.\n+     */\n+    static CAlert getAlertByHash(const uint256 &hash);\n };\n \n class CTxMemPool"
      },
      {
        "sha": "32875b0f06682978da2941fc33383c346dfd193f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -705,7 +705,7 @@ void ThreadSocketHandler2(void* parg)\n         if (vNodes.size() != nPrevNodeCount)\n         {\n             nPrevNodeCount = vNodes.size();\n-            MainFrameRepaint();\n+            NotifyNumConnectionsChanged(vNodes.size());\n         }\n \n "
      },
      {
        "sha": "c7b74bea73797d818a838a2af5ec870ca8b12b70",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 8,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -19,14 +19,6 @@ bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n     return true;\n }\n \n-void MainFrameRepaint()\n-{\n-}\n-\n-void AddressBookRepaint()\n-{\n-}\n-\n void InitMessage(const std::string &message)\n {\n }\n@@ -42,3 +34,26 @@ void QueueShutdown()\n     CreateThread(Shutdown, NULL);\n }\n \n+void NotifyBlocksChanged()\n+{\n+}\n+\n+void NotifyKeyStoreStatusChanged(CBasicKeyStore *wallet)\n+{\n+}\n+\n+void NotifyAddressBookChanged(CWallet *wallet, const std::string &address, const std::string &label, EntryStatus status)\n+{\n+}\n+\n+void NotifyTransactionChanged(CWallet *wallet, const uint256 &hashTx, EntryStatus status)\n+{\n+}\n+\n+void NotifyNumConnectionsChanged(int newNumConnections)\n+{\n+}\n+\n+void NotifyAlertChanged(const uint256 &hash, EntryStatus status)\n+{\n+}"
      },
      {
        "sha": "4af4c3ac13a8749b697a8e7ba70ea860f97b5285",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -232,9 +232,10 @@ QModelIndex AddressTableModel::index(int row, int column, const QModelIndex & pa\n     }\n }\n \n-void AddressTableModel::update()\n+void AddressTableModel::updateEntry(const QString &address, const QString &label, int status)\n {\n     // Update address book model from Bitcoin core\n+    // TODO: use address, label, status to update only the specified entry (like in WalletModel)\n     beginResetModel();\n     priv->refreshAddressTable();\n     endResetModel();"
      },
      {
        "sha": "bd73c6d14780ea619e97eb0e9b075239cefdcbff",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -78,9 +78,9 @@ class AddressTableModel : public QAbstractTableModel\n     void defaultAddressChanged(const QString &address);\n \n public slots:\n-    /* Update address list from core. Invalidates any indices.\n+    /* Update address list from core.\n      */\n-    void update();\n+    void updateEntry(const QString &address, const QString &label, int status);\n };\n \n #endif // ADDRESSTABLEMODEL_H"
      },
      {
        "sha": "a50443021f48f2f3bee9cc0a4ee61f51be19ea0b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 14,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -84,20 +84,6 @@ void ThreadSafeHandleURI(const std::string& strURI)\n                                Q_ARG(QString, QString::fromStdString(strURI)));\n }\n \n-void MainFrameRepaint()\n-{\n-    if(clientmodel)\n-        QMetaObject::invokeMethod(clientmodel, \"update\", Qt::QueuedConnection);\n-    if(walletmodel)\n-        QMetaObject::invokeMethod(walletmodel, \"update\", Qt::QueuedConnection);\n-}\n-\n-void AddressBookRepaint()\n-{\n-    if(walletmodel)\n-        QMetaObject::invokeMethod(walletmodel, \"updateAddressList\", Qt::QueuedConnection);\n-}\n-\n void InitMessage(const std::string &message)\n {\n     if(splashref)\n@@ -120,6 +106,61 @@ std::string _(const char* psz)\n     return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n }\n \n+void NotifyBlocksChanged()\n+{\n+    // This notification is too frequent. Don't trigger a signal.\n+    // Don't remove it, though, as it might be useful later.\n+}\n+\n+void NotifyKeyStoreStatusChanged(CBasicKeyStore *wallet)\n+{\n+    // This currently ignores the wallet argument. When multiple wallet support is implemented, this\n+    // parameter should be mapped to a specific WalletModel for that wallet.\n+    OutputDebugStringF(\"NotifyKeyStoreStatusChanged\\n\");\n+    if(walletmodel)\n+        QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n+}\n+\n+void NotifyAddressBookChanged(CWallet *wallet, const std::string &address, const std::string &label, ChangeType status)\n+{\n+    // This currently ignores the wallet argument. When multiple wallet support is implemented, this\n+    // parameter should be mapped to a specific WalletModel for that wallet.\n+    OutputDebugStringF(\"NotifyAddressBookChanged %s %s status=%i\\n\", address.c_str(), label.c_str(), status);\n+    if(walletmodel)\n+        QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n+                                  Q_ARG(QString, QString::fromStdString(address)),\n+                                  Q_ARG(QString, QString::fromStdString(label)),\n+                                  Q_ARG(int, status));\n+}\n+\n+void NotifyTransactionChanged(CWallet *wallet, const uint256 &hash, ChangeType status)\n+{\n+    // This currently ignores the wallet argument. When multiple wallet support is implemented, this\n+    // parameter should be mapped to a specific WalletModel for that wallet.\n+    OutputDebugStringF(\"NotifyTransactionChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n+    if(walletmodel)\n+        QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection,\n+                                  Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n+                                  Q_ARG(int, status));\n+}\n+\n+void NotifyNumConnectionsChanged(int newNumConnections)\n+{\n+    // Too noisy: OutputDebugStringF(\"NotifyNumConnectionsChanged %i\\n\", newNumConnections);\n+    if(clientmodel)\n+        QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n+                                  Q_ARG(int, newNumConnections));\n+}\n+\n+void NotifyAlertChanged(const uint256 &hash, ChangeType status)\n+{\n+    OutputDebugStringF(\"NotifyAlertChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n+    if(clientmodel)\n+        QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n+                                  Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n+                                  Q_ARG(int, status));\n+}\n+\n /* Handle runaway exceptions. Shows a message box with the problem and quits the program.\n  */\n static void handleRunawayException(std::exception *e)"
      },
      {
        "sha": "9deaa4b6d395415c9de510090cbcaf28ad88eaf7",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -350,11 +350,11 @@ void BitcoinGUI::setClientModel(ClientModel *clientModel)\n         setNumConnections(clientModel->getNumConnections());\n         connect(clientModel, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n \n-        setNumBlocks(clientModel->getNumBlocks());\n-        connect(clientModel, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        setNumBlocks(clientModel->getNumBlocks(), clientModel->getNumBlocksOfPeers());\n+        connect(clientModel, SIGNAL(numBlocksChanged(int,int)), this, SLOT(setNumBlocks(int,int)));\n \n         // Report errors from network/worker thread\n-        connect(clientModel, SIGNAL(error(QString,QString, bool)), this, SLOT(error(QString,QString,bool)));\n+        connect(clientModel, SIGNAL(error(QString,QString,bool)), this, SLOT(error(QString,QString,bool)));\n \n         rpcConsole->setClientModel(clientModel);\n     }\n@@ -493,7 +493,7 @@ void BitcoinGUI::setNumConnections(int count)\n     labelConnectionsIcon->setToolTip(tr(\"%n active connection(s) to Bitcoin network\", \"\", count));\n }\n \n-void BitcoinGUI::setNumBlocks(int count)\n+void BitcoinGUI::setNumBlocks(int count, int nTotalBlocks)\n {\n     // don't show / hide progressBar and it's label if we have no connection(s) to the network\n     if (!clientModel || clientModel->getNumConnections() == 0)\n@@ -504,7 +504,6 @@ void BitcoinGUI::setNumBlocks(int count)\n         return;\n     }\n \n-    int nTotalBlocks = clientModel->getNumBlocksOfPeers();\n     QString tooltip;\n \n     if(count < nTotalBlocks)"
      },
      {
        "sha": "8a7f6e541b83f412733ecaededea05b8a3b14c48",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -111,7 +111,7 @@ public slots:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    void setNumBlocks(int count, int countOfPeers);\n     /** Set the encryption status as shown in the UI.\n        @param[in] status            current encryption status\n        @see WalletModel::EncryptionStatus"
      },
      {
        "sha": "1914ef90b5836a41e8daf654b21c264c8565c444",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 17,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -5,15 +5,23 @@\n #include \"transactiontablemodel.h\"\n \n #include \"main.h\"\n-static const int64 nClientStartupTime = GetTime();\n+#include \"ui_interface.h\"\n \n #include <QDateTime>\n+#include <QTimer>\n+\n+static const int64 nClientStartupTime = GetTime();\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), optionsModel(optionsModel),\n-    cachedNumConnections(0), cachedNumBlocks(0)\n+    cachedNumBlocks(0), cachedNumBlocksOfPeers(0), pollTimer(0)\n {\n     numBlocksAtStartup = -1;\n+\n+    pollTimer = new QTimer();\n+    pollTimer->setInterval(MODEL_UPDATE_DELAY);\n+    pollTimer->start();\n+    connect(pollTimer, SIGNAL(timeout()), this, SLOT(updateTimer()));\n }\n \n int ClientModel::getNumConnections() const\n@@ -37,27 +45,42 @@ QDateTime ClientModel::getLastBlockDate() const\n     return QDateTime::fromTime_t(pindexBest->GetBlockTime());\n }\n \n-void ClientModel::update()\n+void ClientModel::updateTimer()\n {\n-    int newNumConnections = getNumConnections();\n+    // Some quantities (such as number of blocks) change so fast that we don't want to be notified for each change.\n+    // Periodically check and update with a timer.\n     int newNumBlocks = getNumBlocks();\n-    QString newStatusBar = getStatusBarWarnings();\n+    int newNumBlocksOfPeers = getNumBlocksOfPeers();\n \n-    if(cachedNumConnections != newNumConnections)\n-        emit numConnectionsChanged(newNumConnections);\n-    if(cachedNumBlocks != newNumBlocks || cachedStatusBar != newStatusBar)\n+    if(cachedNumBlocks != newNumBlocks || cachedNumBlocksOfPeers != newNumBlocksOfPeers)\n+        emit numBlocksChanged(newNumBlocks, newNumBlocksOfPeers);\n+\n+    cachedNumBlocks = newNumBlocks;\n+    cachedNumBlocksOfPeers = newNumBlocksOfPeers;\n+}\n+\n+void ClientModel::updateNumConnections(int numConnections)\n+{\n+    emit numConnectionsChanged(numConnections);\n+}\n+\n+void ClientModel::updateAlert(const QString &hash, int status)\n+{\n+    // Show error message notification for new alert\n+    if(status == CT_NEW)\n     {\n-        // Simply emit a numBlocksChanged for now in case the status message changes,\n-        // so that the view updates the status bar.\n-        // TODO: It should send a notification.\n-        //    (However, this might generate looped notifications and needs to be thought through and tested carefully)\n-        //    error(tr(\"Network Alert\"), newStatusBar);\n-        emit numBlocksChanged(newNumBlocks);\n+        uint256 hash_256;\n+        hash_256.SetHex(hash.toStdString());\n+        CAlert alert = CAlert::getAlertByHash(hash_256);\n+        if(!alert.IsNull())\n+        {\n+            emit error(tr(\"Network Alert\"), QString::fromStdString(alert.strStatusBar), false);\n+        }\n     }\n \n-    cachedNumConnections = newNumConnections;\n-    cachedNumBlocks = newNumBlocks;\n-    cachedStatusBar = newStatusBar;\n+    // Emit a numBlocksChanged when the status message changes,\n+    // so that the view recomputes and updates the status bar.\n+    emit numBlocksChanged(getNumBlocks(), getNumBlocksOfPeers());\n }\n \n bool ClientModel::isTestNet() const"
      },
      {
        "sha": "bf2cd84a1cf89a476ca7dccb9e361c7176587942",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -10,6 +10,7 @@ class CWallet;\n \n QT_BEGIN_NAMESPACE\n class QDateTime;\n+class QTimer;\n QT_END_NAMESPACE\n \n /** Model for Bitcoin network client. */\n@@ -44,23 +45,24 @@ class ClientModel : public QObject\n private:\n     OptionsModel *optionsModel;\n \n-    int cachedNumConnections;\n     int cachedNumBlocks;\n-    QString cachedStatusBar;\n+    int cachedNumBlocksOfPeers;\n \n     int numBlocksAtStartup;\n \n+    QTimer *pollTimer;\n+\n signals:\n     void numConnectionsChanged(int count);\n-    void numBlocksChanged(int count);\n+    void numBlocksChanged(int count, int countOfPeers);\n \n     //! Asynchronous error notification\n     void error(const QString &title, const QString &message, bool modal);\n \n public slots:\n-\n-private slots:\n-    void update();\n+    void updateTimer();\n+    void updateNumConnections(int numConnections);\n+    void updateAlert(const QString &hash, int status);\n };\n \n #endif // CLIENTMODEL_H"
      },
      {
        "sha": "7029ee33bcffcdb499b12e4739e15a8910bd584b",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -157,7 +157,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n     {\n         // Subscribe to information, replies, messages, errors\n         connect(model, SIGNAL(numConnectionsChanged(int)), this, SLOT(setNumConnections(int)));\n-        connect(model, SIGNAL(numBlocksChanged(int)), this, SLOT(setNumBlocks(int)));\n+        connect(model, SIGNAL(numBlocksChanged(int,int)), this, SLOT(setNumBlocks(int,int)));\n \n         // Provide initial values\n         ui->clientVersion->setText(model->formatFullVersion());\n@@ -168,7 +168,7 @@ void RPCConsole::setClientModel(ClientModel *model)\n         setNumConnections(model->getNumConnections());\n         ui->isTestNet->setChecked(model->isTestNet());\n \n-        setNumBlocks(model->getNumBlocks());\n+        setNumBlocks(model->getNumBlocks(), model->getNumBlocksOfPeers());\n     }\n }\n \n@@ -235,9 +235,10 @@ void RPCConsole::setNumConnections(int count)\n     ui->numberOfConnections->setText(QString::number(count));\n }\n \n-void RPCConsole::setNumBlocks(int count)\n+void RPCConsole::setNumBlocks(int count, int countOfPeers)\n {\n     ui->numberOfBlocks->setText(QString::number(count));\n+    ui->totalBlocks->setText(QString::number(countOfPeers));\n     if(clientModel)\n     {\n         // If there is no current number available display N/A instead of 0, which can't ever be true"
      },
      {
        "sha": "4b71cdb9883becb5b690b0607240e0f6bc716dd5",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -42,7 +42,7 @@ public slots:\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);\n     /** Set number of blocks shown in the UI */\n-    void setNumBlocks(int count);\n+    void setNumBlocks(int count, int countOfPeers);\n     /** Go forward or back in history */\n     void browseHistory(int offset);\n     /** Scroll console view to end */"
      },
      {
        "sha": "017244ffd0c5325b976fb0e01e535ce3fe704e33",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 92,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -40,114 +40,111 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n-    if (showTransaction(wtx))\n+    if (nNet > 0 || wtx.IsCoinBase())\n     {\n-        if (nNet > 0 || wtx.IsCoinBase())\n+        //\n+        // Credit\n+        //\n+        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n-            //\n-            // Credit\n-            //\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            if(wallet->IsMine(txout))\n             {\n-                if(wallet->IsMine(txout))\n+                TransactionRecord sub(hash, nTime);\n+                CBitcoinAddress address;\n+                sub.idx = parts.size(); // sequence number\n+                sub.credit = txout.nValue;\n+                if (wtx.IsCoinBase())\n                 {\n-                    TransactionRecord sub(hash, nTime);\n-                    CBitcoinAddress address;\n-                    sub.idx = parts.size(); // sequence number\n-                    sub.credit = txout.nValue;\n-                    if (wtx.IsCoinBase())\n-                    {\n-                        // Generated\n-                        sub.type = TransactionRecord::Generated;\n-                    }\n-                    else if (ExtractAddress(txout.scriptPubKey, address) && wallet->HaveKey(address))\n-                    {\n-                        // Received by Bitcoin Address\n-                        sub.type = TransactionRecord::RecvWithAddress;\n-                        sub.address = address.ToString();\n-                    }\n-                    else\n-                    {\n-                        // Received by IP connection (deprecated features), or a multisignature or other non-simple transaction\n-                        sub.type = TransactionRecord::RecvFromOther;\n-                        sub.address = mapValue[\"from\"];\n-                    }\n-\n-                    parts.append(sub);\n+                    // Generated\n+                    sub.type = TransactionRecord::Generated;\n                 }\n+                else if (ExtractAddress(txout.scriptPubKey, address) && wallet->HaveKey(address))\n+                {\n+                    // Received by Bitcoin Address\n+                    sub.type = TransactionRecord::RecvWithAddress;\n+                    sub.address = address.ToString();\n+                }\n+                else\n+                {\n+                    // Received by IP connection (deprecated features), or a multisignature or other non-simple transaction\n+                    sub.type = TransactionRecord::RecvFromOther;\n+                    sub.address = mapValue[\"from\"];\n+                }\n+\n+                parts.append(sub);\n             }\n         }\n-        else\n+    }\n+    else\n+    {\n+        bool fAllFromMe = true;\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            fAllFromMe = fAllFromMe && wallet->IsMine(txin);\n+\n+        bool fAllToMe = true;\n+        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            fAllToMe = fAllToMe && wallet->IsMine(txout);\n+\n+        if (fAllFromMe && fAllToMe)\n         {\n-            bool fAllFromMe = true;\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n-                fAllFromMe = fAllFromMe && wallet->IsMine(txin);\n+            // Payment to self\n+            int64 nChange = wtx.GetChange();\n \n-            bool fAllToMe = true;\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-                fAllToMe = fAllToMe && wallet->IsMine(txout);\n+            parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n+                            -(nDebit - nChange), nCredit - nChange));\n+        }\n+        else if (fAllFromMe)\n+        {\n+            //\n+            // Debit\n+            //\n+            int64 nTxFee = nDebit - wtx.GetValueOut();\n \n-            if (fAllFromMe && fAllToMe)\n+            for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {\n-                // Payment to self\n-                int64 nChange = wtx.GetChange();\n+                const CTxOut& txout = wtx.vout[nOut];\n+                TransactionRecord sub(hash, nTime);\n+                sub.idx = parts.size();\n \n-                parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n-                                -(nDebit - nChange), nCredit - nChange));\n-            }\n-            else if (fAllFromMe)\n-            {\n-                //\n-                // Debit\n-                //\n-                int64 nTxFee = nDebit - wtx.GetValueOut();\n+                if(wallet->IsMine(txout))\n+                {\n+                    // Ignore parts sent to self, as this is usually the change\n+                    // from a transaction sent back to our own address.\n+                    continue;\n+                }\n \n-                for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n+                CBitcoinAddress address;\n+                if (ExtractAddress(txout.scriptPubKey, address))\n                 {\n-                    const CTxOut& txout = wtx.vout[nOut];\n-                    TransactionRecord sub(hash, nTime);\n-                    sub.idx = parts.size();\n-\n-                    if(wallet->IsMine(txout))\n-                    {\n-                        // Ignore parts sent to self, as this is usually the change\n-                        // from a transaction sent back to our own address.\n-                        continue;\n-                    }\n-\n-                    CBitcoinAddress address;\n-                    if (ExtractAddress(txout.scriptPubKey, address))\n-                    {\n-                        // Sent to Bitcoin Address\n-                        sub.type = TransactionRecord::SendToAddress;\n-                        sub.address = address.ToString();\n-                    }\n-                    else\n-                    {\n-                        // Sent to IP, or other non-address transaction like OP_EVAL\n-                        sub.type = TransactionRecord::SendToOther;\n-                        sub.address = mapValue[\"to\"];\n-                    }\n-\n-                    int64 nValue = txout.nValue;\n-                    /* Add fee to first output */\n-                    if (nTxFee > 0)\n-                    {\n-                        nValue += nTxFee;\n-                        nTxFee = 0;\n-                    }\n-                    sub.debit = -nValue;\n-\n-                    parts.append(sub);\n+                    // Sent to Bitcoin Address\n+                    sub.type = TransactionRecord::SendToAddress;\n+                    sub.address = address.ToString();\n                 }\n+                else\n+                {\n+                    // Sent to IP, or other non-address transaction like OP_EVAL\n+                    sub.type = TransactionRecord::SendToOther;\n+                    sub.address = mapValue[\"to\"];\n+                }\n+\n+                int64 nValue = txout.nValue;\n+                /* Add fee to first output */\n+                if (nTxFee > 0)\n+                {\n+                    nValue += nTxFee;\n+                    nTxFee = 0;\n+                }\n+                sub.debit = -nValue;\n+\n+                parts.append(sub);\n             }\n-            else\n-            {\n-                //\n-                // Mixed debit transaction, can't break down payees\n-                //\n-                parts.append(TransactionRecord(hash, nTime, TransactionRecord::Other, \"\", nNet, 0));\n-            }\n+        }\n+        else\n+        {\n+            //\n+            // Mixed debit transaction, can't break down payees\n+            //\n+            parts.append(TransactionRecord(hash, nTime, TransactionRecord::Other, \"\", nNet, 0));\n         }\n     }\n "
      },
      {
        "sha": "d36bb495a0fe59db02f13f5992c5d9e9b733da67",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 70,
        "changes": 146,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -9,6 +9,7 @@\n #include \"bitcoinunits.h\"\n \n #include \"wallet.h\"\n+#include \"ui_interface.h\"\n \n #include <QLocale>\n #include <QList>\n@@ -66,65 +67,70 @@ class TransactionTablePriv\n      */\n     void refreshWallet()\n     {\n-#ifdef WALLET_UPDATE_DEBUG\n-        qDebug() << \"refreshWallet\";\n-#endif\n+        OutputDebugStringF(\"refreshWallet\\n\");\n         cachedWallet.clear();\n         {\n             LOCK(wallet->cs_wallet);\n             for(std::map<uint256, CWalletTx>::iterator it = wallet->mapWallet.begin(); it != wallet->mapWallet.end(); ++it)\n             {\n-                cachedWallet.append(TransactionRecord::decomposeTransaction(wallet, it->second));\n+                if(TransactionRecord::showTransaction(it->second))\n+                    cachedWallet.append(TransactionRecord::decomposeTransaction(wallet, it->second));\n             }\n         }\n     }\n \n     /* Update our model of the wallet incrementally, to synchronize our model of the wallet\n        with that of the core.\n \n-       Call with list of hashes of transactions that were added, removed or changed.\n+       Call with transaction that was added, removed or changed.\n      */\n-    void updateWallet(const QList<uint256> &updated)\n+    void updateWallet(const uint256 &hash, int status)\n     {\n-        // Walk through updated transactions, update model as needed.\n-#ifdef WALLET_UPDATE_DEBUG\n-        qDebug() << \"updateWallet\";\n-#endif\n-        // Sort update list, and iterate through it in reverse, so that model updates\n-        //  can be emitted from end to beginning (so that earlier updates will not influence\n-        // the indices of latter ones).\n-        QList<uint256> updated_sorted = updated;\n-        qSort(updated_sorted);\n-\n+        OutputDebugStringF(\"updateWallet %s %i\\n\", hash.ToString().c_str(), status);\n         {\n             LOCK(wallet->cs_wallet);\n-            for(int update_idx = updated_sorted.size()-1; update_idx >= 0; --update_idx)\n+\n+            // Find transaction in wallet\n+            std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n+            bool inWallet = mi != wallet->mapWallet.end();\n+\n+            // Find bounds of this transaction in model\n+            QList<TransactionRecord>::iterator lower = qLowerBound(\n+                cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n+            QList<TransactionRecord>::iterator upper = qUpperBound(\n+                cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n+            int lowerIndex = (lower - cachedWallet.begin());\n+            int upperIndex = (upper - cachedWallet.begin());\n+            bool inModel = (lower != upper);\n+\n+            // Determine whether to show transaction or not\n+            bool showTransaction = (inWallet && TransactionRecord::showTransaction(mi->second));\n+\n+            if(status == CT_UPDATED)\n             {\n-                const uint256 &hash = updated_sorted.at(update_idx);\n-                // Find transaction in wallet\n-                std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n-                bool inWallet = mi != wallet->mapWallet.end();\n-                // Find bounds of this transaction in model\n-                QList<TransactionRecord>::iterator lower = qLowerBound(\n-                    cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n-                QList<TransactionRecord>::iterator upper = qUpperBound(\n-                    cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n-                int lowerIndex = (lower - cachedWallet.begin());\n-                int upperIndex = (upper - cachedWallet.begin());\n-\n-                // Determine if transaction is in model already\n-                bool inModel = false;\n-                if(lower != upper)\n-                {\n-                    inModel = true;\n-                }\n+                if(showTransaction && !inModel)\n+                    status = CT_NEW; /* Not in model, but want to show, treat as new */\n+                if(!showTransaction && inModel)\n+                    status = CT_DELETED; /* In model, but want to hide, treat as deleted */\n+            }\n \n-#ifdef WALLET_UPDATE_DEBUG\n-                qDebug() << \"  \" << QString::fromStdString(hash.ToString()) << inWallet << \" \" << inModel\n-                        << lowerIndex << \"-\" << upperIndex;\n-#endif\n+            OutputDebugStringF(\"   inWallet=%i inModel=%i Index=%i-%i showTransaction=%i derivedStatus=%i\\n\",\n+                     inWallet, inModel, lowerIndex, upperIndex, showTransaction, status);\n \n-                if(inWallet && !inModel)\n+            switch(status)\n+            {\n+            case CT_NEW:\n+                if(inModel)\n+                {\n+                    OutputDebugStringF(\"Warning: updateWallet: Got CT_NEW, but transaction is already in model\\n\");\n+                    break;\n+                }\n+                if(!inWallet)\n+                {\n+                    OutputDebugStringF(\"Warning: updateWallet: Got CT_NEW, but transaction is not in wallet\\n\");\n+                    break;\n+                }\n+                if(showTransaction)\n                 {\n                     // Added -- insert at the right position\n                     QList<TransactionRecord> toInsert =\n@@ -141,17 +147,22 @@ class TransactionTablePriv\n                         parent->endInsertRows();\n                     }\n                 }\n-                else if(!inWallet && inModel)\n-                {\n-                    // Removed -- remove entire transaction from table\n-                    parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);\n-                    cachedWallet.erase(lower, upper);\n-                    parent->endRemoveRows();\n-                }\n-                else if(inWallet && inModel)\n+                break;\n+            case CT_DELETED:\n+                if(!inModel)\n                 {\n-                    // Updated -- nothing to do, status update will take care of this\n+                    OutputDebugStringF(\"Warning: updateWallet: Got CT_DELETED, but transaction is not in model\\n\");\n+                    break;\n                 }\n+                // Removed -- remove entire transaction from table\n+                parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);\n+                cachedWallet.erase(lower, upper);\n+                parent->endRemoveRows();\n+                break;\n+            case CT_UPDATED:\n+                // Miscellaneous updates -- nothing to do, status update will take care of this, and is only computed for\n+                // visible transactions.\n+                break;\n             }\n         }\n     }\n@@ -209,14 +220,15 @@ TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *paren\n         QAbstractTableModel(parent),\n         wallet(wallet),\n         walletModel(parent),\n-        priv(new TransactionTablePriv(wallet, this))\n+        priv(new TransactionTablePriv(wallet, this)),\n+        cachedNumBlocks(0)\n {\n     columns << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Address\") << tr(\"Amount\");\n \n     priv->refreshWallet();\n \n     QTimer *timer = new QTimer(this);\n-    connect(timer, SIGNAL(timeout()), this, SLOT(update()));\n+    connect(timer, SIGNAL(timeout()), this, SLOT(updateConfirmations()));\n     timer->start(MODEL_UPDATE_DELAY);\n }\n \n@@ -225,29 +237,23 @@ TransactionTableModel::~TransactionTableModel()\n     delete priv;\n }\n \n-void TransactionTableModel::update()\n+void TransactionTableModel::updateTransaction(const QString &hash, int status)\n {\n-    QList<uint256> updated;\n+    uint256 updated;\n+    updated.SetHex(hash.toStdString());\n \n-    // Check if there are changes to wallet map\n-    {\n-        TRY_LOCK(wallet->cs_wallet, lockWallet);\n-        if (lockWallet && !wallet->vWalletUpdated.empty())\n-        {\n-            BOOST_FOREACH(uint256 hash, wallet->vWalletUpdated)\n-            {\n-                updated.append(hash);\n-            }\n-            wallet->vWalletUpdated.clear();\n-        }\n-    }\n+    priv->updateWallet(updated, status);\n+}\n \n-    if(!updated.empty())\n+void TransactionTableModel::updateConfirmations()\n+{\n+    if(nBestHeight != cachedNumBlocks)\n     {\n-        priv->updateWallet(updated);\n-\n-        // Status (number of confirmations) and (possibly) description\n-        //  columns changed for all rows.\n+        cachedNumBlocks = nBestHeight;\n+        // Blocks came in since last poll.\n+        // Invalidate status (number of confirmations) and (possibly) description\n+        //  for all rows. Qt is smart enough to only actually request the data for the\n+        //  visible rows.\n         emit dataChanged(index(0, Status), index(priv->size()-1, Status));\n         emit dataChanged(index(0, ToAddress), index(priv->size()-1, ToAddress));\n     }"
      },
      {
        "sha": "0aafa70915ddb622201a2beb6163be7b24591dc4",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -60,6 +60,7 @@ class TransactionTableModel : public QAbstractTableModel\n     WalletModel *walletModel;\n     QStringList columns;\n     TransactionTablePriv *priv;\n+    int cachedNumBlocks;\n \n     QString lookupAddress(const std::string &address, bool tooltip) const;\n     QVariant addressColor(const TransactionRecord *wtx) const;\n@@ -72,8 +73,9 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txStatusDecoration(const TransactionRecord *wtx) const;\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n \n-private slots:\n-    void update();\n+public slots:\n+    void updateTransaction(const QString &hash, int status);\n+    void updateConfirmations();\n \n     friend class TransactionTablePriv;\n };"
      },
      {
        "sha": "4e082a8abcd16b9b0d435cb5bbdd924b72ef577f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -40,30 +40,38 @@ int WalletModel::getNumTransactions() const\n     return numTransactions;\n }\n \n-void WalletModel::update()\n+void WalletModel::updateStatus()\n {\n+    EncryptionStatus newEncryptionStatus = getEncryptionStatus();\n+\n+    if(cachedEncryptionStatus != newEncryptionStatus)\n+        emit encryptionStatusChanged(newEncryptionStatus);\n+}\n+\n+void WalletModel::updateTransaction(const QString &hash, int status)\n+{\n+    if(transactionTableModel)\n+        transactionTableModel->updateTransaction(hash, status);\n+\n+    // Balance and number of transactions might have changed\n     qint64 newBalance = getBalance();\n     qint64 newUnconfirmedBalance = getUnconfirmedBalance();\n     int newNumTransactions = getNumTransactions();\n-    EncryptionStatus newEncryptionStatus = getEncryptionStatus();\n \n     if(cachedBalance != newBalance || cachedUnconfirmedBalance != newUnconfirmedBalance)\n         emit balanceChanged(newBalance, newUnconfirmedBalance);\n-\n     if(cachedNumTransactions != newNumTransactions)\n         emit numTransactionsChanged(newNumTransactions);\n \n-    if(cachedEncryptionStatus != newEncryptionStatus)\n-        emit encryptionStatusChanged(newEncryptionStatus);\n-\n     cachedBalance = newBalance;\n     cachedUnconfirmedBalance = newUnconfirmedBalance;\n     cachedNumTransactions = newNumTransactions;\n }\n \n-void WalletModel::updateAddressList()\n+void WalletModel::updateAddressBook(const QString &address, const QString &label, int status)\n {\n-    addressTableModel->update();\n+    if(addressTableModel)\n+        addressTableModel->updateEntry(address, label, status);\n }\n \n bool WalletModel::validateAddress(const QString &address)"
      },
      {
        "sha": "8250794f2124044c9d8f12f0cd8eed50d15a6e05",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -137,8 +137,12 @@ class WalletModel : public QObject\n     void error(const QString &title, const QString &message, bool modal);\n \n public slots:\n-    void update();\n-    void updateAddressList();\n+    /* Wallet status might have changed */\n+    void updateStatus();\n+    /* New transaction, or transaction changed status */\n+    void updateTransaction(const QString &hash, int status);\n+    /* New, updated or removed address book entry */\n+    void updateAddressBook(const QString &address, const QString &label, int status);\n };\n \n "
      },
      {
        "sha": "9f5693a8bd98494edafe7077eafbcd59c34c2c47",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -73,8 +73,6 @@ Value importprivkey(const Array& params, bool fHelp)\n         pwalletMain->ReacceptWalletTransactions();\n     }\n \n-    MainFrameRepaint();\n-\n     return Value::null;\n }\n "
      },
      {
        "sha": "c1ed265a01281ec1ef9f1d0d06f939c06681d132",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 37,
        "deletions": 2,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -7,6 +7,10 @@\n #include <string>\n #include \"util.h\" // for int64\n \n+class CBasicKeyStore;\n+class CWallet;\n+class uint256;\n+\n #define wxYES                   0x00000002\n #define wxOK                    0x00000004\n #define wxNO                    0x00000008\n@@ -36,15 +40,46 @@\n // Force blocking, modal message box dialog (not just notification)\n #define wxMODAL                 0x00040000\n \n+enum ChangeType\n+{\n+    CT_NEW,\n+    CT_UPDATED,\n+    CT_DELETED\n+};\n+\n /* These UI communication functions are implemented in bitcoin.cpp (for ui) and noui.cpp (no ui) */\n \n extern int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK);\n extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption);\n extern void ThreadSafeHandleURI(const std::string& strURI);\n-extern void MainFrameRepaint();\n-extern void AddressBookRepaint();\n extern void QueueShutdown();\n extern void InitMessage(const std::string &message);\n extern std::string _(const char* psz);\n \n+/* Block chain changed. */\n+extern void NotifyBlocksChanged();\n+\n+/* Wallet status (encrypted, locked) changed.\n+ * Note: Called without locks held.\n+ */\n+extern void NotifyKeyStoreStatusChanged(CBasicKeyStore *wallet);\n+\n+/* Address book entry changed.\n+ * Note: called with lock cs_wallet held.\n+ */\n+extern void NotifyAddressBookChanged(CWallet *wallet, const std::string &address, const std::string &label, ChangeType status);\n+\n+/* Wallet transaction added, removed or updated.\n+ * Note: called with lock cs_wallet held.\n+ */\n+extern void NotifyTransactionChanged(CWallet *wallet, const uint256 &hashTx, ChangeType status);\n+\n+/* Number of connections changed. */\n+extern void NotifyNumConnectionsChanged(int newNumConnections);\n+\n+/* New, updated or cancelled alert.\n+ * Note: called with lock cs_mapAlerts held.\n+ */\n+extern void NotifyAlertChanged(const uint256 &hash, ChangeType status);\n+\n #endif"
      },
      {
        "sha": "132f68bee6293b3b8b12f7135ee0db1577ba857a",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 12,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -274,7 +274,9 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         // Need to completely rewrite the wallet file; if we don't, bdb might keep\n         // bits of the unencrypted private key in slack space in the database file.\n         CDB::Rewrite(strWalletFile);\n+\n     }\n+    NotifyKeyStoreStatusChanged(this);\n \n     return true;\n }\n@@ -297,7 +299,7 @@ void CWallet::WalletUpdateSpent(const CTransaction &tx)\n                     printf(\"WalletUpdateSpent found spent coin %sbc %s\\n\", FormatMoney(wtx.GetCredit()).c_str(), wtx.GetHash().ToString().c_str());\n                     wtx.MarkSpent(txin.prevout.n);\n                     wtx.WriteToDisk();\n-                    vWalletUpdated.push_back(txin.prevout.hash);\n+                    NotifyTransactionChanged(this, txin.prevout.hash, CT_UPDATED);\n                 }\n             }\n         }\n@@ -373,15 +375,12 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n             }\n         }\n #endif\n-        // Notify UI\n-        vWalletUpdated.push_back(hash);\n-\n         // since AddToWallet is called directly for self-originating transactions, check for consumption of own coins\n         WalletUpdateSpent(wtx);\n-    }\n \n-    // Refresh UI\n-    MainFrameRepaint();\n+        // Notify UI of new or updated transaction\n+        NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n+    }\n     return true;\n }\n \n@@ -1183,7 +1182,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n                 coin.BindWallet(this);\n                 coin.MarkSpent(txin.prevout.n);\n                 coin.WriteToDisk();\n-                vWalletUpdated.push_back(coin.GetHash());\n+                NotifyTransactionChanged(this, coin.GetHash(), CT_UPDATED);\n             }\n \n             if (fFileBacked)\n@@ -1202,7 +1201,6 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         }\n         wtxNew.RelayWalletTransaction();\n     }\n-    MainFrameRepaint();\n     return true;\n }\n \n@@ -1237,7 +1235,6 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n     if (!CommitTransaction(wtxNew, reservekey))\n         return _(\"Error: The transaction was rejected.  This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n \n-    MainFrameRepaint();\n     return \"\";\n }\n \n@@ -1290,8 +1287,9 @@ int CWallet::LoadWallet(bool& fFirstRunRet)\n \n bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& strName)\n {\n+    std::map<CBitcoinAddress, std::string>::iterator mi = mapAddressBook.find(address);\n     mapAddressBook[address] = strName;\n-    AddressBookRepaint();\n+    NotifyAddressBookChanged(this, address.ToString(), strName, (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n     if (!fFileBacked)\n         return false;\n     return CWalletDB(strWalletFile).WriteName(address.ToString(), strName);\n@@ -1300,7 +1298,7 @@ bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& s\n bool CWallet::DelAddressBookName(const CBitcoinAddress& address)\n {\n     mapAddressBook.erase(address);\n-    AddressBookRepaint();\n+    NotifyAddressBookChanged(this, address.ToString(), \"\", CT_DELETED);\n     if (!fFileBacked)\n         return false;\n     return CWalletDB(strWalletFile).EraseName(address.ToString());\n@@ -1558,3 +1556,14 @@ void CWallet::GetAllReserveAddresses(set<CBitcoinAddress>& setAddress)\n         setAddress.insert(address);\n     }\n }\n+\n+void CWallet::UpdatedTransaction(const uint256 &hashTx)\n+{\n+    {\n+        LOCK(cs_wallet);\n+        // Only notify UI if this transaction is in this wallet\n+        map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(hashTx);\n+        if (mi != mapWallet.end())\n+            NotifyTransactionChanged(this, hashTx, CT_UPDATED);\n+    }\n+}"
      },
      {
        "sha": "f84e6a3292ef996316d4e2b9e402675892dec416",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -102,8 +102,6 @@ class CWallet : public CCryptoKeyStore\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n-    std::vector<uint256> vWalletUpdated;\n-\n     std::map<uint256, int> mapRequestCount;\n \n     std::map<CBitcoinAddress, std::string> mapAddressBook;\n@@ -232,13 +230,7 @@ class CWallet : public CCryptoKeyStore\n \n     bool DelAddressBookName(const CBitcoinAddress& address);\n \n-    void UpdatedTransaction(const uint256 &hashTx)\n-    {\n-        {\n-            LOCK(cs_wallet);\n-            vWalletUpdated.push_back(hashTx);\n-        }\n-    }\n+    void UpdatedTransaction(const uint256 &hashTx);\n \n     void PrintWallet(const CBlock& block);\n "
      }
    ]
  },
  {
    "sha": "ab1b288fa7994db5f036e93d5f8ba73372017c40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjFiMjg4ZmE3OTk0ZGI1ZjAzNmU5M2Q1ZjhiYTczMzcyMDE3YzQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-06T17:40:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-20T08:44:50Z"
      },
      "message": "Convert UI interface to boost::signals2.\n\n- Signals now go directly from the core to WalletModel/ClientModel.\n  - WalletModel subscribes to signals on CWallet: Prepares for multi-wallet support, by no longer assuming an implicit global wallet.\n- Gets rid of noui.cpp, the few lines that were left are merged into init.cpp\n- Rename wxXXX message flags to MF_XXX, to make them UI indifferent.\n- ThreadSafeMessageBox no longer returns the value `4` which was never used, converted to void.",
      "tree": {
        "sha": "6454168811d3f2c011e907770b3ac7cfe8c49495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6454168811d3f2c011e907770b3ac7cfe8c49495"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab1b288fa7994db5f036e93d5f8ba73372017c40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1b288fa7994db5f036e93d5f8ba73372017c40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1b288fa7994db5f036e93d5f8ba73372017c40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1b288fa7994db5f036e93d5f8ba73372017c40/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe4a655042f7de31dce120aeed72345579f1b59f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe4a655042f7de31dce120aeed72345579f1b59f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe4a655042f7de31dce120aeed72345579f1b59f"
      }
    ],
    "stats": {
      "total": 485,
      "additions": 263,
      "deletions": 222
    },
    "files": [
      {
        "sha": "cc4d85cbbe5327b8d3cab121e4b9daec4c94a79e",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -435,7 +435,7 @@ Value stop(const Array& params, bool fHelp)\n             \"stop\\n\"\n             \"Stop Bitcoin server.\");\n     // Shutdown will take long enough that the response should get back\n-    QueueShutdown();\n+    uiInterface.QueueShutdown();\n     return \"Bitcoin server stopping\";\n }\n \n@@ -1928,7 +1928,7 @@ Value encryptwallet(const Array& params, bool fHelp)\n     // BDB seems to have a bad habit of writing old data into\n     // slack space in .dat files; that is bad if the old data is\n     // unencrypted private keys.  So:\n-    QueueShutdown();\n+    uiInterface.QueueShutdown();\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet\";\n }\n \n@@ -2620,7 +2620,7 @@ void ThreadRPCServer2(void* parg)\n             strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-server\\\"\");\n         else if (mapArgs.count(\"-daemon\"))\n             strWhatAmI = strprintf(_(\"To use the %s option\"), \"\\\"-daemon\\\"\");\n-        ThreadSafeMessageBox(strprintf(\n+        uiInterface.ThreadSafeMessageBox(strprintf(\n             _(\"%s, you must set a rpcpassword in the configuration file:\\n %s\\n\"\n               \"It is recommended you use the following random password:\\n\"\n               \"rpcuser=bitcoinrpc\\n\"\n@@ -2630,8 +2630,8 @@ void ThreadRPCServer2(void* parg)\n                 strWhatAmI.c_str(),\n                 GetConfigFile().string().c_str(),\n                 EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str()),\n-            _(\"Error\"), wxOK | wxMODAL);\n-        QueueShutdown();\n+            _(\"Error\"), MF_OK | MF_MODAL);\n+        uiInterface.QueueShutdown();\n         return;\n     }\n \n@@ -2650,9 +2650,9 @@ void ThreadRPCServer2(void* parg)\n     }\n     catch(boost::system::system_error &e)\n     {\n-        ThreadSafeMessageBox(strprintf(_(\"An error occured while setting up the RPC port %i for listening: %s\"), endpoint.port(), e.what()),\n-                             _(\"Error\"), wxOK | wxMODAL);\n-        QueueShutdown();\n+        uiInterface.ThreadSafeMessageBox(strprintf(_(\"An error occured while setting up the RPC port %i for listening: %s\"), endpoint.port(), e.what()),\n+                             _(\"Error\"), MF_OK | MF_MODAL);\n+        uiInterface.QueueShutdown();\n         return;\n     }\n "
      },
      {
        "sha": "096f289640a2c8a09b0506cd4cdfb44508090fe5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 7,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -22,6 +22,7 @@ using namespace std;\n using namespace boost;\n \n CWallet* pwalletMain;\n+CClientUIInterface uiInterface;\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -90,9 +91,33 @@ void HandleSIGTERM(int)\n // Start\n //\n #if !defined(QT_GUI)\n+static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+{\n+    printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n+    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n+    return 4;\n+}\n+\n+static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n+{\n+    return true;\n+}\n+\n+static void noui_QueueShutdown()\n+{\n+    // Without UI, Shutdown can simply be started in a new thread\n+    CreateThread(Shutdown, NULL);\n+}\n+\n int main(int argc, char* argv[])\n {\n     bool fRet = false;\n+\n+    // Connect bitcoind signal handlers\n+    uiInterface.ThreadSafeMessageBox.connect(noui_ThreadSafeMessageBox);\n+    uiInterface.ThreadSafeAskFee.connect(noui_ThreadSafeAskFee);\n+    uiInterface.QueueShutdown.connect(noui_QueueShutdown);\n+\n     fRet = AppInit(argc, argv);\n \n     if (fRet && fDaemon)\n@@ -160,13 +185,13 @@ bool AppInit(int argc, char* argv[])\n \n bool static InitError(const std::string &str)\n {\n-    ThreadSafeMessageBox(str, _(\"Bitcoin\"), wxOK | wxMODAL);\n+    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), MF_OK|MF_MODAL);\n     return false;\n }\n \n bool static InitWarning(const std::string &str)\n {\n-    ThreadSafeMessageBox(str, _(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION | wxMODAL);\n+    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), MF_OK | MF_ICON_EXCLAMATION | MF_MODAL);\n     return true;\n }\n \n@@ -367,7 +392,7 @@ bool AppInit2()\n         fprintf(stdout, \"Bitcoin server starting\\n\");\n     int64 nStart;\n \n-    InitMessage(_(\"Loading addresses...\"));\n+    uiInterface.InitMessage(_(\"Loading addresses...\"));\n     printf(\"Loading addresses...\\n\");\n     nStart = GetTimeMillis();\n \n@@ -380,7 +405,7 @@ bool AppInit2()\n     printf(\"Loaded %i addresses from peers.dat  %\"PRI64d\"ms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n \n-    InitMessage(_(\"Loading block index...\"));\n+    uiInterface.InitMessage(_(\"Loading block index...\"));\n     printf(\"Loading block index...\\n\");\n     nStart = GetTimeMillis();\n     if (!LoadBlockIndex())\n@@ -406,7 +431,7 @@ bool AppInit2()\n         }\n     }\n \n-    InitMessage(_(\"Loading wallet...\"));\n+    uiInterface.InitMessage(_(\"Loading wallet...\"));\n     printf(\"Loading wallet...\\n\");\n     nStart = GetTimeMillis();\n     bool fFirstRun;\n@@ -474,14 +499,14 @@ bool AppInit2()\n     }\n     if (pindexBest != pindexRescan)\n     {\n-        InitMessage(_(\"Rescanning...\"));\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n         printf(\"Rescanning last %i blocks (from block %i)...\\n\", pindexBest->nHeight - pindexRescan->nHeight, pindexRescan->nHeight);\n         nStart = GetTimeMillis();\n         pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n         printf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n     }\n \n-    InitMessage(_(\"Done loading\"));\n+    uiInterface.InitMessage(_(\"Done loading\"));\n     printf(\"Done loading\\n\");\n \n     //// debug print"
      },
      {
        "sha": "bdeae301356f6e60f39f9e179a07f3ae51a12cf0",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"keystore.h\"\n #include \"script.h\"\n-#include \"ui_interface.h\"\n \n bool CKeyStore::GetPubKey(const CBitcoinAddress &address, std::vector<unsigned char> &vchPubKeyOut) const\n {\n@@ -84,7 +83,7 @@ bool CCryptoKeyStore::Lock()\n         vMasterKey.clear();\n     }\n \n-    NotifyKeyStoreStatusChanged(this);\n+    NotifyStatusChanged(this);\n     return true;\n }\n \n@@ -114,7 +113,7 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         }\n         vMasterKey = vMasterKeyIn;\n     }\n-    NotifyKeyStoreStatusChanged(this);\n+    NotifyStatusChanged(this);\n     return true;\n }\n "
      },
      {
        "sha": "6b5d01cfa53594104133755e60444d7a32fedbb6",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -8,6 +8,7 @@\n #include \"crypter.h\"\n #include \"sync.h\"\n #include \"base58.h\"\n+#include <boost/signals2/signal.hpp>\n \n class CScript;\n \n@@ -174,6 +175,11 @@ class CCryptoKeyStore : public CBasicKeyStore\n             mi++;\n         }\n     }\n+\n+    /* Wallet status (encrypted, locked) changed.\n+     * Note: Called without locks held.\n+     */\n+    boost::signals2::signal<void (CCryptoKeyStore* wallet)> NotifyStatusChanged;\n };\n \n #endif"
      },
      {
        "sha": "8410b9af4a25520407a8f4e1716db51d816b99c3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -946,7 +946,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     {\n         bnBestInvalidWork = pindexNew->bnChainWork;\n         CTxDB().WriteBestInvalidWork(bnBestInvalidWork);\n-        NotifyBlocksChanged();\n+        uiInterface.NotifyBlocksChanged();\n     }\n     printf(\"InvalidChainFound: invalid block=%s  height=%d  work=%s\\n\", pindexNew->GetBlockHash().ToString().substr(0,20).c_str(), pindexNew->nHeight, pindexNew->bnChainWork.ToString().c_str());\n     printf(\"InvalidChainFound:  current best=%s  height=%d  work=%s\\n\", hashBestChain.ToString().substr(0,20).c_str(), nBestHeight, bnBestChainWork.ToString().c_str());\n@@ -1647,7 +1647,7 @@ bool CBlock::AddToBlockIndex(unsigned int nFile, unsigned int nBlockPos)\n         hashPrevBestCoinBase = vtx[0].GetHash();\n     }\n \n-    NotifyBlocksChanged();\n+    uiInterface.NotifyBlocksChanged();\n     return true;\n }\n \n@@ -1858,8 +1858,8 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n         string strMessage = _(\"Warning: Disk space is low\");\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n-        ThreadSafeMessageBox(strMessage, \"Bitcoin\", wxOK | wxICON_EXCLAMATION | wxMODAL);\n-        QueueShutdown();\n+        uiInterface.ThreadSafeMessageBox(strMessage, \"Bitcoin\", MF_OK | MF_ICON_EXCLAMATION | MF_MODAL);\n+        uiInterface.QueueShutdown();\n         return false;\n     }\n     return true;\n@@ -2204,13 +2204,13 @@ bool CAlert::ProcessAlert()\n             if (Cancels(alert))\n             {\n                 printf(\"cancelling alert %d\\n\", alert.nID);\n-                NotifyAlertChanged((*mi).first, CT_DELETED);\n+                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n                 mapAlerts.erase(mi++);\n             }\n             else if (!alert.IsInEffect())\n             {\n                 printf(\"expiring alert %d\\n\", alert.nID);\n-                NotifyAlertChanged((*mi).first, CT_DELETED);\n+                uiInterface.NotifyAlertChanged((*mi).first, CT_DELETED);\n                 mapAlerts.erase(mi++);\n             }\n             else\n@@ -2232,7 +2232,7 @@ bool CAlert::ProcessAlert()\n         mapAlerts.insert(make_pair(GetHash(), *this));\n         // Notify UI if it applies to me\n         if(AppliesToMe())\n-            NotifyAlertChanged(GetHash(), CT_NEW);\n+            uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n     }\n \n     printf(\"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());"
      },
      {
        "sha": "1e9dd687f38f9677bfff9b71d374f084804268ee",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -64,8 +64,7 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/noui.o\n+    obj/walletdb.o\n \n all: bitcoind.exe\n "
      },
      {
        "sha": "fdd4f4635d96079721995d0245e47f75bd06e311",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -61,8 +61,7 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/noui.o\n+    obj/walletdb.o\n \n \n all: bitcoind.exe"
      },
      {
        "sha": "d6433a69831f5ec8a0cc56eccbea30c03be370ec",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -88,8 +88,7 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/noui.o\n+    obj/walletdb.o\n \n ifdef USE_UPNP\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)"
      },
      {
        "sha": "ec6609f9911abaaf70c6b2fc171b1270beac1204",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -108,8 +108,7 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o \\\n-    obj/noui.o\n+    obj/walletdb.o\n \n \n all: bitcoind"
      },
      {
        "sha": "8eff9cbe789d4513d3bedf7d5b7df8ebd26d059e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -705,7 +705,7 @@ void ThreadSocketHandler2(void* parg)\n         if (vNodes.size() != nPrevNodeCount)\n         {\n             nPrevNodeCount = vNodes.size();\n-            NotifyNumConnectionsChanged(vNodes.size());\n+            uiInterface.NotifyNumConnectionsChanged(vNodes.size());\n         }\n \n "
      },
      {
        "sha": "c7b74bea73797d818a838a2af5ec870ca8b12b70",
        "filename": "src/noui.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 59,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe4a655042f7de31dce120aeed72345579f1b59f/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe4a655042f7de31dce120aeed72345579f1b59f/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=fe4a655042f7de31dce120aeed72345579f1b59f",
        "patch": "@@ -1,59 +0,0 @@\n-// Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n-#include \"ui_interface.h\"\n-\n-#include <string>\n-#include \"init.h\"\n-\n-int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n-{\n-    printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n-    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n-    return 4;\n-}\n-\n-bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n-{\n-    return true;\n-}\n-\n-void InitMessage(const std::string &message)\n-{\n-}\n-\n-std::string _(const char* psz)\n-{\n-    return psz;\n-}\n-\n-void QueueShutdown()\n-{\n-    // Without UI, Shutdown can simply be started in a new thread\n-    CreateThread(Shutdown, NULL);\n-}\n-\n-void NotifyBlocksChanged()\n-{\n-}\n-\n-void NotifyKeyStoreStatusChanged(CBasicKeyStore *wallet)\n-{\n-}\n-\n-void NotifyAddressBookChanged(CWallet *wallet, const std::string &address, const std::string &label, EntryStatus status)\n-{\n-}\n-\n-void NotifyTransactionChanged(CWallet *wallet, const uint256 &hashTx, EntryStatus status)\n-{\n-}\n-\n-void NotifyNumConnectionsChanged(int newNumConnections)\n-{\n-}\n-\n-void NotifyAlertChanged(const uint256 &hash, EntryStatus status)\n-{\n-}"
      },
      {
        "sha": "c5592b28dfd0562efead62749f0426bfc7238b3b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 69,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -36,15 +36,13 @@ Q_IMPORT_PLUGIN(qtaccessiblewidgets)\n // Need a global reference for the notifications to find the GUI\n static BitcoinGUI *guiref;\n static QSplashScreen *splashref;\n-static WalletModel *walletmodel;\n-static ClientModel *clientmodel;\n \n-int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+static void ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n {\n     // Message from network thread\n     if(guiref)\n     {\n-        bool modal = (style & wxMODAL);\n+        bool modal = (style & MF_MODAL);\n         // in case of modal message, use blocking connection to wait for user to click OK\n         QMetaObject::invokeMethod(guiref, \"error\",\n                                    modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,\n@@ -57,10 +55,9 @@ int ThreadSafeMessageBox(const std::string& message, const std::string& caption,\n         printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n         fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n     }\n-    return 4;\n }\n \n-bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n+static bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n {\n     if(!guiref)\n         return false;\n@@ -75,7 +72,7 @@ bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n     return payFee;\n }\n \n-void ThreadSafeHandleURI(const std::string& strURI)\n+static void ThreadSafeHandleURI(const std::string& strURI)\n {\n     if(!guiref)\n         return;\n@@ -84,7 +81,7 @@ void ThreadSafeHandleURI(const std::string& strURI)\n                                Q_ARG(QString, QString::fromStdString(strURI)));\n }\n \n-void InitMessage(const std::string &message)\n+static void InitMessage(const std::string &message)\n {\n     if(splashref)\n     {\n@@ -93,74 +90,19 @@ void InitMessage(const std::string &message)\n     }\n }\n \n-void QueueShutdown()\n+static void QueueShutdown()\n {\n     QMetaObject::invokeMethod(QCoreApplication::instance(), \"quit\", Qt::QueuedConnection);\n }\n \n /*\n    Translate string to current locale using Qt.\n  */\n-std::string _(const char* psz)\n+static std::string Translate(const char* psz)\n {\n     return QCoreApplication::translate(\"bitcoin-core\", psz).toStdString();\n }\n \n-void NotifyBlocksChanged()\n-{\n-    // This notification is too frequent. Don't trigger a signal.\n-    // Don't remove it, though, as it might be useful later.\n-}\n-\n-void NotifyKeyStoreStatusChanged(CBasicKeyStore *wallet)\n-{\n-    // This currently ignores the wallet argument. When multiple wallet support is implemented, this\n-    // parameter should be mapped to a specific WalletModel for that wallet.\n-    OutputDebugStringF(\"NotifyKeyStoreStatusChanged\\n\");\n-    if(walletmodel)\n-        QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n-}\n-\n-void NotifyAddressBookChanged(CWallet *wallet, const std::string &address, const std::string &label, ChangeType status)\n-{\n-    // This currently ignores the wallet argument. When multiple wallet support is implemented, this\n-    // parameter should be mapped to a specific WalletModel for that wallet.\n-    OutputDebugStringF(\"NotifyAddressBookChanged %s %s status=%i\\n\", address.c_str(), label.c_str(), status);\n-    if(walletmodel)\n-        QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n-                                  Q_ARG(QString, QString::fromStdString(address)),\n-                                  Q_ARG(QString, QString::fromStdString(label)),\n-                                  Q_ARG(int, status));\n-}\n-\n-void NotifyTransactionChanged(CWallet *wallet, const uint256 &hash, ChangeType status)\n-{\n-    // This currently ignores the wallet argument. When multiple wallet support is implemented, this\n-    // parameter should be mapped to a specific WalletModel for that wallet.\n-    OutputDebugStringF(\"NotifyTransactionChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n-    if(walletmodel)\n-        QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection,\n-                                  Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n-                                  Q_ARG(int, status));\n-}\n-\n-void NotifyNumConnectionsChanged(int newNumConnections)\n-{\n-    // Too noisy: OutputDebugStringF(\"NotifyNumConnectionsChanged %i\\n\", newNumConnections);\n-    if(clientmodel)\n-        QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n-                                  Q_ARG(int, newNumConnections));\n-}\n-\n-void NotifyAlertChanged(const uint256 &hash, ChangeType status)\n-{\n-    OutputDebugStringF(\"NotifyAlertChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n-    if(clientmodel)\n-        QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n-                                  Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n-                                  Q_ARG(int, status));\n-}\n-\n /* Handle runaway exceptions. Shows a message box with the problem and quits the program.\n  */\n static void handleRunawayException(std::exception *e)\n@@ -307,6 +249,14 @@ int main(int argc, char *argv[])\n     if (translator.load(lang_territory, \":/translations/\"))\n         app.installTranslator(&translator);\n \n+    // Subscribe to global signals from core\n+    uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n+    uiInterface.ThreadSafeAskFee.connect(ThreadSafeAskFee);\n+    uiInterface.ThreadSafeHandleURI.connect(ThreadSafeHandleURI);\n+    uiInterface.InitMessage.connect(InitMessage);\n+    uiInterface.QueueShutdown.connect(QueueShutdown);\n+    uiInterface.Translate.connect(Translate);\n+\n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n     if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n@@ -348,9 +298,7 @@ int main(int argc, char *argv[])\n                     splash.finish(&window);\n \n                 ClientModel clientModel(&optionsModel);\n-                clientmodel = &clientModel;\n                 WalletModel walletModel(pwalletMain, &optionsModel);\n-                walletmodel = &walletModel;\n \n                 window.setClientModel(&clientModel);\n                 window.setWalletModel(&walletModel);\n@@ -392,8 +340,6 @@ int main(int argc, char *argv[])\n                 window.setClientModel(0);\n                 window.setWalletModel(0);\n                 guiref = 0;\n-                clientmodel = 0;\n-                walletmodel = 0;\n             }\n             Shutdown(NULL);\n         }"
      },
      {
        "sha": "64fd2a9450fafc02973c0eb316986454bb9806f9",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -22,6 +22,13 @@ ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     pollTimer->setInterval(MODEL_UPDATE_DELAY);\n     pollTimer->start();\n     connect(pollTimer, SIGNAL(timeout()), this, SLOT(updateTimer()));\n+\n+    subscribeToCoreSignals();\n+}\n+\n+ClientModel::~ClientModel()\n+{\n+    unsubscribeFromCoreSignals();\n }\n \n int ClientModel::getNumConnections() const\n@@ -127,3 +134,41 @@ QDateTime ClientModel::formatClientStartupTime() const\n {\n     return QDateTime::fromTime_t(nClientStartupTime);\n }\n+\n+// Handlers for core signals\n+static void NotifyBlocksChanged(ClientModel *clientmodel)\n+{\n+    // This notification is too frequent. Don't trigger a signal.\n+    // Don't remove it, though, as it might be useful later.\n+}\n+\n+static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n+{\n+    // Too noisy: OutputDebugStringF(\"NotifyNumConnectionsChanged %i\\n\", newNumConnections);\n+    QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n+                              Q_ARG(int, newNumConnections));\n+}\n+\n+static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n+{\n+    OutputDebugStringF(\"NotifyAlertChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n+    QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n+                              Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n+                              Q_ARG(int, status));\n+}\n+\n+void ClientModel::subscribeToCoreSignals()\n+{\n+    // Connect signals to client\n+    uiInterface.NotifyBlocksChanged.connect(boost::bind(NotifyBlocksChanged, this));\n+    uiInterface.NotifyNumConnectionsChanged.connect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n+    uiInterface.NotifyAlertChanged.connect(boost::bind(NotifyAlertChanged, this, _1, _2));\n+}\n+\n+void ClientModel::unsubscribeFromCoreSignals()\n+{\n+    // Disconnect signals from client\n+    uiInterface.NotifyBlocksChanged.disconnect(boost::bind(NotifyBlocksChanged, this));\n+    uiInterface.NotifyNumConnectionsChanged.disconnect(boost::bind(NotifyNumConnectionsChanged, this, _1));\n+    uiInterface.NotifyAlertChanged.disconnect(boost::bind(NotifyAlertChanged, this, _1, _2));\n+}"
      },
      {
        "sha": "0349c389c5ef447421bff8d1b573a3d5ecd328f1",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -19,6 +19,7 @@ class ClientModel : public QObject\n     Q_OBJECT\n public:\n     explicit ClientModel(OptionsModel *optionsModel, QObject *parent = 0);\n+    ~ClientModel();\n \n     OptionsModel *getOptionsModel();\n \n@@ -52,6 +53,8 @@ class ClientModel : public QObject\n \n     QTimer *pollTimer;\n \n+    void subscribeToCoreSignals();\n+    void unsubscribeFromCoreSignals();\n signals:\n     void numConnectionsChanged(int count);\n     void numBlocksChanged(int count, int countOfPeers);"
      },
      {
        "sha": "3d7d90e902b50c8e45ef1d8832fced08dc6b59f9",
        "filename": "src/qt/qtipcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/qtipcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/qtipcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qtipcserver.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -31,7 +31,7 @@ void ipcThread(void* parg)\n         ptime d = boost::posix_time::microsec_clock::universal_time() + millisec(100);\n         if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))\n         {\n-            ThreadSafeHandleURI(std::string(strBuf, nSize));\n+            uiInterface.ThreadSafeHandleURI(std::string(strBuf, nSize));\n             Sleep(1000);\n         }\n         if (fShutdown)\n@@ -69,7 +69,7 @@ void ipcInit()\n             ptime d = boost::posix_time::microsec_clock::universal_time() + millisec(1);\n             if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))\n             {\n-                ThreadSafeHandleURI(std::string(strBuf, nSize));\n+                uiInterface.ThreadSafeHandleURI(std::string(strBuf, nSize));\n             }\n             else\n                 break;"
      },
      {
        "sha": "1a9700ef094eb6687f84bab5917f7112e3c4ca09",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 1,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -18,6 +18,13 @@ WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *p\n {\n     addressTableModel = new AddressTableModel(wallet, this);\n     transactionTableModel = new TransactionTableModel(wallet, this);\n+\n+    subscribeToCoreSignals();\n+}\n+\n+WalletModel::~WalletModel()\n+{\n+    unsubscribeFromCoreSignals();\n }\n \n qint64 WalletModel::getBalance() const\n@@ -147,7 +154,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(const QList<SendCoinsRecipie\n             }\n             return TransactionCreationFailed;\n         }\n-        if(!ThreadSafeAskFee(nFeeRequired, tr(\"Sending...\").toStdString()))\n+        if(!uiInterface.ThreadSafeAskFee(nFeeRequired, tr(\"Sending...\").toStdString()))\n         {\n             return Aborted;\n         }\n@@ -254,6 +261,46 @@ bool WalletModel::backupWallet(const QString &filename)\n     return BackupWallet(*wallet, filename.toLocal8Bit().data());\n }\n \n+// Handlers for core signals\n+static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStore *wallet)\n+{\n+    OutputDebugStringF(\"NotifyKeyStoreStatusChanged\\n\");\n+    QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n+}\n+\n+static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet, const std::string &address, const std::string &label, ChangeType status)\n+{\n+    OutputDebugStringF(\"NotifyAddressBookChanged %s %s status=%i\\n\", address.c_str(), label.c_str(), status);\n+    QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n+                              Q_ARG(QString, QString::fromStdString(address)),\n+                              Q_ARG(QString, QString::fromStdString(label)),\n+                              Q_ARG(int, status));\n+}\n+\n+static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const uint256 &hash, ChangeType status)\n+{\n+    OutputDebugStringF(\"NotifyTransactionChanged %s status=%i\\n\", hash.GetHex().c_str(), status);\n+    QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection,\n+                              Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n+                              Q_ARG(int, status));\n+}\n+\n+void WalletModel::subscribeToCoreSignals()\n+{\n+    // Connect signals to wallet\n+    wallet->NotifyStatusChanged.connect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n+    wallet->NotifyAddressBookChanged.connect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4));\n+    wallet->NotifyTransactionChanged.connect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n+}\n+\n+void WalletModel::unsubscribeFromCoreSignals()\n+{\n+    // Disconnect signals from wallet\n+    wallet->NotifyStatusChanged.disconnect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n+    wallet->NotifyAddressBookChanged.disconnect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4));\n+    wallet->NotifyTransactionChanged.disconnect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n+}\n+\n // WalletModel::UnlockContext implementation\n WalletModel::UnlockContext WalletModel::requestUnlock()\n {"
      },
      {
        "sha": "c413ed2436e65fd331d69b14a3c9ed7a7da21d8a",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -24,6 +24,7 @@ class WalletModel : public QObject\n     Q_OBJECT\n public:\n     explicit WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent = 0);\n+    ~WalletModel();\n \n     enum StatusCode // Returned by sendCoins\n     {\n@@ -118,6 +119,8 @@ class WalletModel : public QObject\n     qint64 cachedNumTransactions;\n     EncryptionStatus cachedEncryptionStatus;\n \n+    void subscribeToCoreSignals();\n+    void unsubscribeFromCoreSignals();\n signals:\n     // Signal that balance in wallet changed\n     void balanceChanged(qint64 balance, qint64 unconfirmedBalance);"
      },
      {
        "sha": "954a781005ea1ac8f9d62964bd92e8807ac12f24",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 73,
        "deletions": 54,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -6,80 +6,99 @@\n \n #include <string>\n #include \"util.h\" // for int64\n+#include <boost/signals2/signal.hpp>\n+#include <boost/signals2/last_value.hpp>\n \n class CBasicKeyStore;\n class CWallet;\n class uint256;\n \n-#define wxYES                   0x00000002\n-#define wxOK                    0x00000004\n-#define wxNO                    0x00000008\n-#define wxYES_NO                (wxYES|wxNO)\n-#define wxCANCEL                0x00000010\n-#define wxAPPLY                 0x00000020\n-#define wxCLOSE                 0x00000040\n-#define wxOK_DEFAULT            0x00000000\n-#define wxYES_DEFAULT           0x00000000\n-#define wxNO_DEFAULT            0x00000080\n-#define wxCANCEL_DEFAULT        0x80000000\n-#define wxICON_EXCLAMATION      0x00000100\n-#define wxICON_HAND             0x00000200\n-#define wxICON_WARNING          wxICON_EXCLAMATION\n-#define wxICON_ERROR            wxICON_HAND\n-#define wxICON_QUESTION         0x00000400\n-#define wxICON_INFORMATION      0x00000800\n-#define wxICON_STOP             wxICON_HAND\n-#define wxICON_ASTERISK         wxICON_INFORMATION\n-#define wxICON_MASK             (0x00000100|0x00000200|0x00000400|0x00000800)\n-#define wxFORWARD               0x00001000\n-#define wxBACKWARD              0x00002000\n-#define wxRESET                 0x00004000\n-#define wxHELP                  0x00008000\n-#define wxMORE                  0x00010000\n-#define wxSETUP                 0x00020000\n-// Force blocking, modal message box dialog (not just notification)\n-#define wxMODAL                 0x00040000\n+/** Flags for CClientUIInterface::ThreadSafeMessageBox */\n+enum MessageBoxFlags\n+{\n+    MF_YES                   = 0x00000002,\n+    MF_OK                    = 0x00000004,\n+    MF_NO                    = 0x00000008,\n+    MF_YES_NO                = (MF_YES|MF_NO),\n+    MF_CANCEL                = 0x00000010,\n+    MF_APPLY                 = 0x00000020,\n+    MF_CLOSE                 = 0x00000040,\n+    MF_OK_DEFAULT            = 0x00000000,\n+    MF_YES_DEFAULT           = 0x00000000,\n+    MF_NO_DEFAULT            = 0x00000080,\n+    MF_CANCEL_DEFAULT        = 0x80000000,\n+    MF_ICON_EXCLAMATION      = 0x00000100,\n+    MF_ICON_HAND             = 0x00000200,\n+    MF_ICON_WARNING          = MF_ICON_EXCLAMATION,\n+    MF_ICON_ERROR            = MF_ICON_HAND,\n+    MF_ICON_QUESTION         = 0x00000400,\n+    MF_ICON_INFORMATION      = 0x00000800,\n+    MF_ICON_STOP             = MF_ICON_HAND,\n+    MF_ICON_ASTERISK         = MF_ICON_INFORMATION,\n+    MF_ICON_MASK             = (0x00000100|0x00000200|0x00000400|0x00000800),\n+    MF_FORWARD               = 0x00001000,\n+    MF_BACKWARD              = 0x00002000,\n+    MF_RESET                 = 0x00004000,\n+    MF_HELP                  = 0x00008000,\n+    MF_MORE                  = 0x00010000,\n+    MF_SETUP                 = 0x00020000,\n+// Force blocking, modal message box dialog (not just OS notification)\n+    MF_MODAL                 = 0x00040000\n+};\n \n+/** General change type (added, updated, removed). */\n enum ChangeType\n {\n     CT_NEW,\n     CT_UPDATED,\n     CT_DELETED\n };\n \n-/* These UI communication functions are implemented in bitcoin.cpp (for ui) and noui.cpp (no ui) */\n+/** Signals for UI communication. */\n+class CClientUIInterface\n+{\n+public:\n+    /** Show message box. */\n+    boost::signals2::signal<void (const std::string& message, const std::string& caption, int style)> ThreadSafeMessageBox;\n \n-extern int ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style=wxOK);\n-extern bool ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption);\n-extern void ThreadSafeHandleURI(const std::string& strURI);\n-extern void QueueShutdown();\n-extern void InitMessage(const std::string &message);\n-extern std::string _(const char* psz);\n+    /** Ask the user whether he want to pay a fee or not. */\n+    boost::signals2::signal<bool (int64 nFeeRequired, const std::string& strCaption), boost::signals2::last_value<bool> > ThreadSafeAskFee;\n \n-/* Block chain changed. */\n-extern void NotifyBlocksChanged();\n+    /** Handle an URL passed on the command line. */\n+    boost::signals2::signal<void (const std::string& strURI)> ThreadSafeHandleURI;\n \n-/* Wallet status (encrypted, locked) changed.\n- * Note: Called without locks held.\n- */\n-extern void NotifyKeyStoreStatusChanged(CBasicKeyStore *wallet);\n+    /** Progress message during initialization. */\n+    boost::signals2::signal<void (const std::string &message)> InitMessage;\n \n-/* Address book entry changed.\n- * Note: called with lock cs_wallet held.\n- */\n-extern void NotifyAddressBookChanged(CWallet *wallet, const std::string &address, const std::string &label, ChangeType status);\n+    /** Initiate client shutdown. */\n+    boost::signals2::signal<void ()> QueueShutdown;\n \n-/* Wallet transaction added, removed or updated.\n- * Note: called with lock cs_wallet held.\n- */\n-extern void NotifyTransactionChanged(CWallet *wallet, const uint256 &hashTx, ChangeType status);\n+    /** Translate a message to the native language of the user. */\n+    boost::signals2::signal<std::string (const char* psz)> Translate;\n \n-/* Number of connections changed. */\n-extern void NotifyNumConnectionsChanged(int newNumConnections);\n+    /** Block chain changed. */\n+    boost::signals2::signal<void ()> NotifyBlocksChanged;\n \n-/* New, updated or cancelled alert.\n- * Note: called with lock cs_mapAlerts held.\n+    /** Number of network connections changed. */\n+    boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;\n+\n+    /**\n+     * New, updated or cancelled alert.\n+     * @note called with lock cs_mapAlerts held.\n+     */\n+    boost::signals2::signal<void (const uint256 &hash, ChangeType status)> NotifyAlertChanged;\n+};\n+\n+extern CClientUIInterface uiInterface;\n+\n+/**\n+ * Translation function: Call Translate signal on UI interface, which returns a boost::optional result.\n+ * If no translation slot is registered, nothing is returned, and simply return the input.\n  */\n-extern void NotifyAlertChanged(const uint256 &hash, ChangeType status);\n+inline std::string _(const char* psz)\n+{\n+    boost::optional<std::string> rv = uiInterface.Translate(psz);\n+    return rv ? (*rv) : psz;\n+}\n \n #endif"
      },
      {
        "sha": "a9b65ed9413e14757a3496b645f0f09b8ed8ff31",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -1000,7 +1000,7 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n                     string strMessage = _(\"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\");\n                     strMiscWarning = strMessage;\n                     printf(\"*** %s\\n\", strMessage.c_str());\n-                    ThreadSafeMessageBox(strMessage+\" \", string(\"Bitcoin\"), wxOK | wxICON_EXCLAMATION);\n+                    uiInterface.ThreadSafeMessageBox(strMessage+\" \", string(\"Bitcoin\"), MF_OK | MF_ICON_EXCLAMATION);\n                 }\n             }\n         }"
      },
      {
        "sha": "92ad8c0f103a1228a302ea9490a099ca5ee94b5e",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -276,7 +276,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         CDB::Rewrite(strWalletFile);\n \n     }\n-    NotifyKeyStoreStatusChanged(this);\n+    NotifyStatusChanged(this);\n \n     return true;\n }\n@@ -1229,7 +1229,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n         return strError;\n     }\n \n-    if (fAskFee && !ThreadSafeAskFee(nFeeRequired, _(\"Sending...\")))\n+    if (fAskFee && !uiInterface.ThreadSafeAskFee(nFeeRequired, _(\"Sending...\")))\n         return \"ABORTED\";\n \n     if (!CommitTransaction(wtxNew, reservekey))"
      },
      {
        "sha": "b3b2e4f468f2cb510b68cbf44a1a0cf2b10d2a16",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1b288fa7994db5f036e93d5f8ba73372017c40/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "patch": "@@ -9,6 +9,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"script.h\"\n+#include \"ui_interface.h\"\n \n class CWalletTx;\n class CReserveKey;\n@@ -261,6 +262,16 @@ class CWallet : public CCryptoKeyStore\n \n     // get the current wallet format (the oldest client version guaranteed to understand this wallet)\n     int GetVersion() { return nWalletVersion; }\n+\n+    /** Address book entry changed.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const std::string &address, const std::string &label, ChangeType status)> NotifyAddressBookChanged;\n+\n+    /** Wallet transaction added, removed or updated.\n+     * @note called with lock cs_wallet held.\n+     */\n+    boost::signals2::signal<void (CWallet *wallet, const uint256 &hashTx, ChangeType status)> NotifyTransactionChanged;\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "0832c0d1669a3504b7ec21d583aecc79f84e8506",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODMyYzBkMTY2OWEzNTA0YjdlYzIxZDU4M2FlY2M3OWY4NGU4NTA2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-06T20:41:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-20T08:44:50Z"
      },
      "message": "Process address book updates incrementally\n\n- No longer invalidates selection model, thus retains selection on address book changes\n- Fixes selection of new address when added",
      "tree": {
        "sha": "347838e641b27a89db7a8d065e18eab76b06a0c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/347838e641b27a89db7a8d065e18eab76b06a0c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0832c0d1669a3504b7ec21d583aecc79f84e8506",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0832c0d1669a3504b7ec21d583aecc79f84e8506",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0832c0d1669a3504b7ec21d583aecc79f84e8506",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0832c0d1669a3504b7ec21d583aecc79f84e8506/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1b288fa7994db5f036e93d5f8ba73372017c40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1b288fa7994db5f036e93d5f8ba73372017c40"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 113,
      "deletions": 35
    },
    "files": [
      {
        "sha": "c207987561697063873806e43b9deda55f764c16",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 11,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -132,6 +132,10 @@ void AddressBookPage::setModel(AddressTableModel *model)\n     connect(ui->tableView->selectionModel(), SIGNAL(selectionChanged(QItemSelection,QItemSelection)),\n             this, SLOT(selectionChanged()));\n \n+    // Select row for newly created address\n+    connect(model, SIGNAL(rowsInserted(QModelIndex,int,int)),\n+            this, SLOT(selectNewAddress(QModelIndex,int,int)));\n+\n     if(mode == ForSending)\n     {\n         // Auto-select first row when in sending mode\n@@ -193,20 +197,11 @@ void AddressBookPage::on_newAddressButton_clicked()\n     EditAddressDialog dlg(\n             tab == SendingTab ?\n             EditAddressDialog::NewSendingAddress :\n-            EditAddressDialog::NewReceivingAddress);\n+            EditAddressDialog::NewReceivingAddress, this);\n     dlg.setModel(model);\n     if(dlg.exec())\n     {\n-        // Select row for newly created address\n-        QString address = dlg.getAddress();\n-        QModelIndexList lst = proxyModel->match(proxyModel->index(0,\n-                          AddressTableModel::Address, QModelIndex()),\n-                          Qt::EditRole, address, 1, Qt::MatchExactly);\n-        if(!lst.isEmpty())\n-        {\n-            ui->tableView->setFocus();\n-            ui->tableView->selectRow(lst.at(0).row());\n-        }\n+        newAddressToSelect = dlg.getAddress();\n     }\n }\n \n@@ -338,3 +333,15 @@ void AddressBookPage::contextualMenu(const QPoint &point)\n         contextMenu->exec(QCursor::pos());\n     }\n }\n+\n+void AddressBookPage::selectNewAddress(const QModelIndex &parent, int begin, int end)\n+{\n+    QModelIndex idx = proxyModel->mapFromSource(model->index(begin, AddressTableModel::Address, parent));\n+    if(idx.isValid() && (idx.data(Qt::EditRole).toString() == newAddressToSelect))\n+    {\n+        // Select row of newly created address, once\n+        ui->tableView->setFocus();\n+        ui->tableView->selectRow(idx.row());\n+        newAddressToSelect.clear();\n+    }\n+}"
      },
      {
        "sha": "b2e91c7cb28d84190f56bcbf6f0fa431745fe372",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -13,6 +13,7 @@ class QTableView;\n class QItemSelection;\n class QSortFilterProxyModel;\n class QMenu;\n+class QModelIndex;\n QT_END_NAMESPACE\n \n /** Widget that shows a list of sending or receiving addresses.\n@@ -51,6 +52,7 @@ public slots:\n     QSortFilterProxyModel *proxyModel;\n     QMenu *contextMenu;\n     QAction *deleteAction;\n+    QString newAddressToSelect;\n \n private slots:\n     void on_deleteButton_clicked();\n@@ -67,6 +69,9 @@ private slots:\n     void onCopyLabelAction();\n     /** Edit currently selected address entry */\n     void onEditAction();\n+\n+    /** New entry/entries were added to address table */\n+    void selectNewAddress(const QModelIndex &parent, int begin, int end);\n };\n \n #endif // ADDRESSBOOKDIALOG_H"
      },
      {
        "sha": "75ea2c12c527d9408cc723874ec47674aad4acfc",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 13,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -26,20 +26,36 @@ struct AddressTableEntry\n         type(type), label(label), address(address) {}\n };\n \n+struct AddressTableEntryLessThan\n+{\n+    bool operator()(const AddressTableEntry &a, const AddressTableEntry &b) const\n+    {\n+        return a.address < b.address;\n+    }\n+    bool operator()(const AddressTableEntry &a, const QString &b) const\n+    {\n+        return a.address < b;\n+    }\n+    bool operator()(const QString &a, const AddressTableEntry &b) const\n+    {\n+        return a < b.address;\n+    }\n+};\n+\n // Private implementation\n class AddressTablePriv\n {\n public:\n     CWallet *wallet;\n     QList<AddressTableEntry> cachedAddressTable;\n+    AddressTableModel *parent;\n \n-    AddressTablePriv(CWallet *wallet):\n-            wallet(wallet) {}\n+    AddressTablePriv(CWallet *wallet, AddressTableModel *parent):\n+        wallet(wallet), parent(parent) {}\n \n     void refreshAddressTable()\n     {\n         cachedAddressTable.clear();\n-\n         {\n             LOCK(wallet->cs_wallet);\n             BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, std::string)& item, wallet->mapAddressBook)\n@@ -54,6 +70,53 @@ class AddressTablePriv\n         }\n     }\n \n+    void updateEntry(const QString &address, const QString &label, bool isMine, int status)\n+    {\n+        // Find address / label in model\n+        QList<AddressTableEntry>::iterator lower = qLowerBound(\n+            cachedAddressTable.begin(), cachedAddressTable.end(), address, AddressTableEntryLessThan());\n+        QList<AddressTableEntry>::iterator upper = qUpperBound(\n+            cachedAddressTable.begin(), cachedAddressTable.end(), address, AddressTableEntryLessThan());\n+        int lowerIndex = (lower - cachedAddressTable.begin());\n+        int upperIndex = (upper - cachedAddressTable.begin());\n+        bool inModel = (lower != upper);\n+        AddressTableEntry::Type newEntryType = isMine ? AddressTableEntry::Receiving : AddressTableEntry::Sending;\n+\n+        switch(status)\n+        {\n+        case CT_NEW:\n+            if(inModel)\n+            {\n+                OutputDebugStringF(\"Warning: AddressTablePriv::updateEntry: Got CT_NOW, but entry is already in model\\n\");\n+                break;\n+            }\n+            parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n+            cachedAddressTable.insert(lowerIndex, AddressTableEntry(newEntryType, label, address));\n+            parent->endInsertRows();\n+            break;\n+        case CT_UPDATED:\n+            if(!inModel)\n+            {\n+                OutputDebugStringF(\"Warning: AddressTablePriv::updateEntry: Got CT_UPDATED, but entry is not in model\\n\");\n+                break;\n+            }\n+            lower->type = newEntryType;\n+            lower->label = label;\n+            parent->emitDataChanged(lowerIndex);\n+            break;\n+        case CT_DELETED:\n+            if(!inModel)\n+            {\n+                OutputDebugStringF(\"Warning: AddressTablePriv::updateEntry: Got CT_DELETED, but entry is not in model\\n\");\n+                break;\n+            }\n+            parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);\n+            cachedAddressTable.erase(lower, upper);\n+            parent->endRemoveRows();\n+            break;\n+        }\n+    }\n+\n     int size()\n     {\n         return cachedAddressTable.size();\n@@ -76,7 +139,7 @@ AddressTableModel::AddressTableModel(CWallet *wallet, WalletModel *parent) :\n     QAbstractTableModel(parent),walletModel(parent),wallet(wallet),priv(0)\n {\n     columns << tr(\"Label\") << tr(\"Address\");\n-    priv = new AddressTablePriv(wallet);\n+    priv = new AddressTablePriv(wallet, this);\n     priv->refreshAddressTable();\n }\n \n@@ -158,7 +221,6 @@ bool AddressTableModel::setData(const QModelIndex & index, const QVariant & valu\n         {\n         case Label:\n             wallet->SetAddressBookName(rec->address.toStdString(), value.toString().toStdString());\n-            rec->label = value.toString();\n             break;\n         case Address:\n             // Refuse to set invalid address, set error status and return false\n@@ -177,12 +239,9 @@ bool AddressTableModel::setData(const QModelIndex & index, const QVariant & valu\n                     // Add new entry with new address\n                     wallet->SetAddressBookName(value.toString().toStdString(), rec->label.toStdString());\n                 }\n-\n-                rec->address = value.toString();\n             }\n             break;\n         }\n-        emit dataChanged(index, index);\n \n         return true;\n     }\n@@ -232,13 +291,10 @@ QModelIndex AddressTableModel::index(int row, int column, const QModelIndex & pa\n     }\n }\n \n-void AddressTableModel::updateEntry(const QString &address, const QString &label, int status)\n+void AddressTableModel::updateEntry(const QString &address, const QString &label, bool isMine, int status)\n {\n     // Update address book model from Bitcoin core\n-    // TODO: use address, label, status to update only the specified entry (like in WalletModel)\n-    beginResetModel();\n-    priv->refreshAddressTable();\n-    endResetModel();\n+    priv->updateEntry(address, label, isMine, status);\n }\n \n QString AddressTableModel::addRow(const QString &type, const QString &label, const QString &address)\n@@ -342,3 +398,7 @@ int AddressTableModel::lookupAddress(const QString &address) const\n     }\n }\n \n+void AddressTableModel::emitDataChanged(int idx)\n+{\n+    emit dataChanged(index(idx, 0, QModelIndex()), index(idx, columns.length()-1, QModelIndex()));\n+}"
      },
      {
        "sha": "42974e3e1f9ba17511b35ca6562d46fc6f9c3e6d",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -74,13 +74,18 @@ class AddressTableModel : public QAbstractTableModel\n     QStringList columns;\n     EditStatus editStatus;\n \n+    /** Notify listeners that data changed. */\n+    void emitDataChanged(int index);\n+\n signals:\n     void defaultAddressChanged(const QString &address);\n \n public slots:\n     /* Update address list from core.\n      */\n-    void updateEntry(const QString &address, const QString &label, int status);\n+    void updateEntry(const QString &address, const QString &label, bool isMine, int status);\n+\n+    friend class AddressTablePriv;\n };\n \n #endif // ADDRESSTABLEMODEL_H"
      },
      {
        "sha": "b89c3dba33ecd171642a2155ad916359060459d2",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -75,10 +75,10 @@ void WalletModel::updateTransaction(const QString &hash, int status)\n     cachedNumTransactions = newNumTransactions;\n }\n \n-void WalletModel::updateAddressBook(const QString &address, const QString &label, int status)\n+void WalletModel::updateAddressBook(const QString &address, const QString &label, bool isMine, int status)\n {\n     if(addressTableModel)\n-        addressTableModel->updateEntry(address, label, status);\n+        addressTableModel->updateEntry(address, label, isMine, status);\n }\n \n bool WalletModel::validateAddress(const QString &address)\n@@ -268,12 +268,13 @@ static void NotifyKeyStoreStatusChanged(WalletModel *walletmodel, CCryptoKeyStor\n     QMetaObject::invokeMethod(walletmodel, \"updateStatus\", Qt::QueuedConnection);\n }\n \n-static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet, const std::string &address, const std::string &label, ChangeType status)\n+static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet, const std::string &address, const std::string &label, bool isMine, ChangeType status)\n {\n-    OutputDebugStringF(\"NotifyAddressBookChanged %s %s status=%i\\n\", address.c_str(), label.c_str(), status);\n+    OutputDebugStringF(\"NotifyAddressBookChanged %s %s isMine=%i status=%i\\n\", address.c_str(), label.c_str(), isMine, status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(address)),\n                               Q_ARG(QString, QString::fromStdString(label)),\n+                              Q_ARG(bool, isMine),\n                               Q_ARG(int, status));\n }\n \n@@ -289,15 +290,15 @@ void WalletModel::subscribeToCoreSignals()\n {\n     // Connect signals to wallet\n     wallet->NotifyStatusChanged.connect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n-    wallet->NotifyAddressBookChanged.connect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4));\n+    wallet->NotifyAddressBookChanged.connect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5));\n     wallet->NotifyTransactionChanged.connect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n }\n \n void WalletModel::unsubscribeFromCoreSignals()\n {\n     // Disconnect signals from wallet\n     wallet->NotifyStatusChanged.disconnect(boost::bind(&NotifyKeyStoreStatusChanged, this, _1));\n-    wallet->NotifyAddressBookChanged.disconnect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4));\n+    wallet->NotifyAddressBookChanged.disconnect(boost::bind(NotifyAddressBookChanged, this, _1, _2, _3, _4, _5));\n     wallet->NotifyTransactionChanged.disconnect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n }\n "
      },
      {
        "sha": "8b615ffe8e0b0886bf119124042e0c8f82fde08d",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -145,7 +145,7 @@ public slots:\n     /* New transaction, or transaction changed status */\n     void updateTransaction(const QString &hash, int status);\n     /* New, updated or removed address book entry */\n-    void updateAddressBook(const QString &address, const QString &label, int status);\n+    void updateAddressBook(const QString &address, const QString &label, bool isMine, int status);\n };\n \n "
      },
      {
        "sha": "d67cdf4b712e662cc86c726dd6c9efe660b51fa9",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -1289,7 +1289,7 @@ bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& s\n {\n     std::map<CBitcoinAddress, std::string>::iterator mi = mapAddressBook.find(address);\n     mapAddressBook[address] = strName;\n-    NotifyAddressBookChanged(this, address.ToString(), strName, (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n+    NotifyAddressBookChanged(this, address.ToString(), strName, HaveKey(address), (mi == mapAddressBook.end()) ? CT_NEW : CT_UPDATED);\n     if (!fFileBacked)\n         return false;\n     return CWalletDB(strWalletFile).WriteName(address.ToString(), strName);\n@@ -1298,7 +1298,7 @@ bool CWallet::SetAddressBookName(const CBitcoinAddress& address, const string& s\n bool CWallet::DelAddressBookName(const CBitcoinAddress& address)\n {\n     mapAddressBook.erase(address);\n-    NotifyAddressBookChanged(this, address.ToString(), \"\", CT_DELETED);\n+    NotifyAddressBookChanged(this, address.ToString(), \"\", HaveKey(address), CT_DELETED);\n     if (!fFileBacked)\n         return false;\n     return CWalletDB(strWalletFile).EraseName(address.ToString());"
      },
      {
        "sha": "55deffdde2737217918038bdd9437c4358201fee",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0832c0d1669a3504b7ec21d583aecc79f84e8506/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "patch": "@@ -266,7 +266,7 @@ class CWallet : public CCryptoKeyStore\n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n      */\n-    boost::signals2::signal<void (CWallet *wallet, const std::string &address, const std::string &label, ChangeType status)> NotifyAddressBookChanged;\n+    boost::signals2::signal<void (CWallet *wallet, const std::string &address, const std::string &label, bool isMine, ChangeType status)> NotifyAddressBookChanged;\n \n     /** Wallet transaction added, removed or updated.\n      * @note called with lock cs_wallet held."
      }
    ]
  },
  {
    "sha": "239c11d0dd4287e74286c40fb338aea85f4b1996",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzljMTFkMGRkNDI4N2U3NDI4NmM0MGZiMzM4YWVhODVmNGIxOTk2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-19T07:35:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2012-05-20T08:44:50Z"
      },
      "message": "Make testcases build, prevent windows symbol collision",
      "tree": {
        "sha": "4ad01e70d94768977f25a0129255ec3c84635f2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4ad01e70d94768977f25a0129255ec3c84635f2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/239c11d0dd4287e74286c40fb338aea85f4b1996",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239c11d0dd4287e74286c40fb338aea85f4b1996",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/239c11d0dd4287e74286c40fb338aea85f4b1996",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/239c11d0dd4287e74286c40fb338aea85f4b1996/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0832c0d1669a3504b7ec21d583aecc79f84e8506",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0832c0d1669a3504b7ec21d583aecc79f84e8506"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 103,
      "deletions": 80
    },
    "files": [
      {
        "sha": "6c51bad6dbbccbe2bddaafbca3d8ded78536f4a9",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -2630,7 +2630,7 @@ void ThreadRPCServer2(void* parg)\n                 strWhatAmI.c_str(),\n                 GetConfigFile().string().c_str(),\n                 EncodeBase58(&rand_pwd[0],&rand_pwd[0]+32).c_str()),\n-            _(\"Error\"), MF_OK | MF_MODAL);\n+            _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n         uiInterface.QueueShutdown();\n         return;\n     }\n@@ -2651,7 +2651,7 @@ void ThreadRPCServer2(void* parg)\n     catch(boost::system::system_error &e)\n     {\n         uiInterface.ThreadSafeMessageBox(strprintf(_(\"An error occured while setting up the RPC port %i for listening: %s\"), endpoint.port(), e.what()),\n-                             _(\"Error\"), MF_OK | MF_MODAL);\n+                             _(\"Error\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n         uiInterface.QueueShutdown();\n         return;\n     }"
      },
      {
        "sha": "e0c0c893aa283a5b42400a1244fc986a8ab1eb8e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 37,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -91,41 +91,6 @@ void HandleSIGTERM(int)\n // Start\n //\n #if !defined(QT_GUI)\n-static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n-{\n-    printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n-    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n-    return 4;\n-}\n-\n-static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n-{\n-    return true;\n-}\n-\n-static void noui_QueueShutdown()\n-{\n-    // Without UI, Shutdown can simply be started in a new thread\n-    CreateThread(Shutdown, NULL);\n-}\n-\n-int main(int argc, char* argv[])\n-{\n-    bool fRet = false;\n-\n-    // Connect bitcoind signal handlers\n-    uiInterface.ThreadSafeMessageBox.connect(noui_ThreadSafeMessageBox);\n-    uiInterface.ThreadSafeAskFee.connect(noui_ThreadSafeAskFee);\n-    uiInterface.QueueShutdown.connect(noui_QueueShutdown);\n-\n-    fRet = AppInit(argc, argv);\n-\n-    if (fRet && fDaemon)\n-        return 0;\n-\n-    return 1;\n-}\n-\n bool AppInit(int argc, char* argv[])\n {\n     bool fRet = false;\n@@ -181,17 +146,33 @@ bool AppInit(int argc, char* argv[])\n         Shutdown(NULL);\n     return fRet;\n }\n+\n+extern void noui_connect();\n+int main(int argc, char* argv[])\n+{\n+    bool fRet = false;\n+\n+    // Connect bitcoind signal handlers\n+    noui_connect();\n+\n+    fRet = AppInit(argc, argv);\n+\n+    if (fRet && fDaemon)\n+        return 0;\n+\n+    return 1;\n+}\n #endif\n \n bool static InitError(const std::string &str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), MF_OK|MF_MODAL);\n+    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::MODAL);\n     return false;\n }\n \n bool static InitWarning(const std::string &str)\n {\n-    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), MF_OK | MF_ICON_EXCLAMATION | MF_MODAL);\n+    uiInterface.ThreadSafeMessageBox(str, _(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n     return true;\n }\n "
      },
      {
        "sha": "970527c7ce5296df9182b43e973a7fbc792d6150",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -10,7 +10,6 @@\n extern CWallet* pwalletMain;\n \n void Shutdown(void* parg);\n-bool AppInit(int argc, char* argv[]);\n bool AppInit2();\n std::string HelpMessage();\n "
      },
      {
        "sha": "e62331debfc79ab52acc7c590fba093b9ba52937",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -1858,7 +1858,7 @@ bool CheckDiskSpace(uint64 nAdditionalBytes)\n         string strMessage = _(\"Warning: Disk space is low\");\n         strMiscWarning = strMessage;\n         printf(\"*** %s\\n\", strMessage.c_str());\n-        uiInterface.ThreadSafeMessageBox(strMessage, \"Bitcoin\", MF_OK | MF_ICON_EXCLAMATION | MF_MODAL);\n+        uiInterface.ThreadSafeMessageBox(strMessage, \"Bitcoin\", CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION | CClientUIInterface::MODAL);\n         uiInterface.QueueShutdown();\n         return false;\n     }"
      },
      {
        "sha": "61b38a663eec16885c22e7272064c34b5d019de4",
        "filename": "src/makefile.linux-mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.linux-mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.linux-mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.linux-mingw?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -64,7 +64,8 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o\n+    obj/walletdb.o \\\n+    obj/noui.o\n \n all: bitcoind.exe\n "
      },
      {
        "sha": "47bf8d5304bf8bc46ea20c612a746d9d0f4b668d",
        "filename": "src/makefile.mingw",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.mingw",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.mingw",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.mingw?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -61,7 +61,8 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o\n+    obj/walletdb.o \\\n+    obj/noui.o\n \n \n all: bitcoind.exe"
      },
      {
        "sha": "227756f27410c2d69a5d317d904e41a992c1112f",
        "filename": "src/makefile.osx",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.osx",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.osx",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.osx?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -88,7 +88,8 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o\n+    obj/walletdb.o \\\n+    obj/noui.o\n \n ifdef USE_UPNP\n \tDEFS += -DUSE_UPNP=$(USE_UPNP)"
      },
      {
        "sha": "04e17866e506ed450babc46d0c3d83f9ddadefa8",
        "filename": "src/makefile.unix",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.unix",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/makefile.unix",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/makefile.unix?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -108,7 +108,8 @@ OBJS= \\\n     obj/sync.o \\\n     obj/util.o \\\n     obj/wallet.o \\\n-    obj/walletdb.o\n+    obj/walletdb.o \\\n+    obj/noui.o\n \n \n all: bitcoind"
      },
      {
        "sha": "57f53b1c0d1958385f90d43140c4ba55754837b3",
        "filename": "src/noui.cpp",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2012 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file license.txt or http://www.opensource.org/licenses/mit-license.php.\n+#include \"ui_interface.h\"\n+#include \"init.h\"\n+#include \"bitcoinrpc.h\"\n+\n+#include <string>\n+\n+static int noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, int style)\n+{\n+    printf(\"%s: %s\\n\", caption.c_str(), message.c_str());\n+    fprintf(stderr, \"%s: %s\\n\", caption.c_str(), message.c_str());\n+    return 4;\n+}\n+\n+static bool noui_ThreadSafeAskFee(int64 nFeeRequired, const std::string& strCaption)\n+{\n+    return true;\n+}\n+\n+static void noui_QueueShutdown()\n+{\n+    // Without UI, Shutdown can simply be started in a new thread\n+    CreateThread(Shutdown, NULL);\n+}\n+\n+void noui_connect()\n+{\n+    // Connect bitcoind signal handlers\n+    uiInterface.ThreadSafeMessageBox.connect(noui_ThreadSafeMessageBox);\n+    uiInterface.ThreadSafeAskFee.connect(noui_ThreadSafeAskFee);\n+    uiInterface.QueueShutdown.connect(noui_QueueShutdown);\n+}"
      },
      {
        "sha": "07bdee088636fb746ba7472e75b23d31a70b8582",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -42,7 +42,7 @@ static void ThreadSafeMessageBox(const std::string& message, const std::string&\n     // Message from network thread\n     if(guiref)\n     {\n-        bool modal = (style & MF_MODAL);\n+        bool modal = (style & CClientUIInterface::MODAL);\n         // in case of modal message, use blocking connection to wait for user to click OK\n         QMetaObject::invokeMethod(guiref, \"error\",\n                                    modal ? GUIUtil::blockingGUIThreadConnection() : Qt::QueuedConnection,"
      },
      {
        "sha": "bf597c9b734f5c369e87704f2388c9267b52c791",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -5,11 +5,15 @@\n #include \"wallet.h\"\n \n CWallet* pwalletMain;\n+CClientUIInterface uiInterface;\n \n extern bool fPrintToConsole;\n+extern void noui_connect();\n+\n struct TestingSetup {\n     TestingSetup() {\n         fPrintToConsole = true; // don't want to write to debug.log file\n+        noui_connect();\n         pwalletMain = new CWallet();\n         RegisterWallet(pwalletMain);\n     }"
      },
      {
        "sha": "711a56d5ecaf235962cdc4458106d8b1140e1cdf",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -13,39 +13,6 @@ class CBasicKeyStore;\n class CWallet;\n class uint256;\n \n-/** Flags for CClientUIInterface::ThreadSafeMessageBox */\n-enum MessageBoxFlags\n-{\n-    MF_YES                   = 0x00000002,\n-    MF_OK                    = 0x00000004,\n-    MF_NO                    = 0x00000008,\n-    MF_YES_NO                = (MF_YES|MF_NO),\n-    MF_CANCEL                = 0x00000010,\n-    MF_APPLY                 = 0x00000020,\n-    MF_CLOSE                 = 0x00000040,\n-    MF_OK_DEFAULT            = 0x00000000,\n-    MF_YES_DEFAULT           = 0x00000000,\n-    MF_NO_DEFAULT            = 0x00000080,\n-    MF_CANCEL_DEFAULT        = 0x80000000,\n-    MF_ICON_EXCLAMATION      = 0x00000100,\n-    MF_ICON_HAND             = 0x00000200,\n-    MF_ICON_WARNING          = MF_ICON_EXCLAMATION,\n-    MF_ICON_ERROR            = MF_ICON_HAND,\n-    MF_ICON_QUESTION         = 0x00000400,\n-    MF_ICON_INFORMATION      = 0x00000800,\n-    MF_ICON_STOP             = MF_ICON_HAND,\n-    MF_ICON_ASTERISK         = MF_ICON_INFORMATION,\n-    MF_ICON_MASK             = (0x00000100|0x00000200|0x00000400|0x00000800),\n-    MF_FORWARD               = 0x00001000,\n-    MF_BACKWARD              = 0x00002000,\n-    MF_RESET                 = 0x00004000,\n-    MF_HELP                  = 0x00008000,\n-    MF_MORE                  = 0x00010000,\n-    MF_SETUP                 = 0x00020000,\n-// Force blocking, modal message box dialog (not just OS notification)\n-    MF_MODAL                 = 0x00040000\n-};\n-\n /** General change type (added, updated, removed). */\n enum ChangeType\n {\n@@ -58,6 +25,39 @@ enum ChangeType\n class CClientUIInterface\n {\n public:\n+    /** Flags for CClientUIInterface::ThreadSafeMessageBox */\n+    enum MessageBoxFlags\n+    {\n+        YES                   = 0x00000002,\n+        OK                    = 0x00000004,\n+        NO                    = 0x00000008,\n+        YES_NO                = (YES|NO),\n+        CANCEL                = 0x00000010,\n+        APPLY                 = 0x00000020,\n+        CLOSE                 = 0x00000040,\n+        OK_DEFAULT            = 0x00000000,\n+        YES_DEFAULT           = 0x00000000,\n+        NO_DEFAULT            = 0x00000080,\n+        CANCEL_DEFAULT        = 0x80000000,\n+        ICON_EXCLAMATION      = 0x00000100,\n+        ICON_HAND             = 0x00000200,\n+        ICON_WARNING          = ICON_EXCLAMATION,\n+        ICON_ERROR            = ICON_HAND,\n+        ICON_QUESTION         = 0x00000400,\n+        ICON_INFORMATION      = 0x00000800,\n+        ICON_STOP             = ICON_HAND,\n+        ICON_ASTERISK         = ICON_INFORMATION,\n+        ICON_MASK             = (0x00000100|0x00000200|0x00000400|0x00000800),\n+        FORWARD               = 0x00001000,\n+        BACKWARD              = 0x00002000,\n+        RESET                 = 0x00004000,\n+        HELP                  = 0x00008000,\n+        MORE                  = 0x00010000,\n+        SETUP                 = 0x00020000,\n+        // Force blocking, modal message box dialog (not just OS notification)\n+        MODAL                 = 0x00040000\n+    };\n+\n     /** Show message box. */\n     boost::signals2::signal<void (const std::string& message, const std::string& caption, int style)> ThreadSafeMessageBox;\n "
      },
      {
        "sha": "108f33b78e84e0831184246661f815f884cb76fe",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/239c11d0dd4287e74286c40fb338aea85f4b1996/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/239c11d0dd4287e74286c40fb338aea85f4b1996/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=239c11d0dd4287e74286c40fb338aea85f4b1996",
        "patch": "@@ -1000,7 +1000,7 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n                     string strMessage = _(\"Warning: Please check that your computer's date and time are correct.  If your clock is wrong Bitcoin will not work properly.\");\n                     strMiscWarning = strMessage;\n                     printf(\"*** %s\\n\", strMessage.c_str());\n-                    uiInterface.ThreadSafeMessageBox(strMessage+\" \", string(\"Bitcoin\"), MF_OK | MF_ICON_EXCLAMATION);\n+                    uiInterface.ThreadSafeMessageBox(strMessage+\" \", string(\"Bitcoin\"), CClientUIInterface::OK | CClientUIInterface::ICON_EXCLAMATION);\n                 }\n             }\n         }"
      }
    ]
  }
]