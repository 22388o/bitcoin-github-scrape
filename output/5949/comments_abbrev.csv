luke-jr,2015-03-27T01:13:51Z,Is there any reason to be embedding a copy of this code rather than using _some_ library? This isn't even consensus-critical...\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-86781942,86781942,
laanwj,2015-03-27T07:14:40Z,"@luke-jr Well we're ending up with our own implementation of AES either way, either through #5885 or this. \n\nYou do have a point that we should not start importing all non-consensus critical dependencies as well. NIH syndrome is an enduring source of irritation to me. But using an external crypto library just for AES is also undesirable. Low-level crypto code is very stable, it is unlikely to re",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-86851812,86851812,
jonasschnelli,2015-04-01T18:52:44Z,Tests are broken on mac osx. Could be mac only because travis did not report any issues. Wondering how this behaves on windows.\n\nmake check log: https://gist.github.com/jonasschnelli/a8aaf63a219f010dbc1f\nCompile log: https://gist.github.com/jonasschnelli/8f947da1148b79950ead\n\nI think further test does not make sense unless the unit-tests are running through.\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-88593530,88593530,
theuni,2015-04-02T15:58:32Z,"@jonasschnelli That should fix your issue. It wasn't actually related to osx.\n\nThe tests turned up an unintended change in openssl behavior for version 1.0.1j, which was later reverted for 1.0.1k. It should be harmless since it only affects the output of failed decrypts which shouldn't be used anyway, but the tests here go to extra lengths to ensure that our output always matches openssl's.\n\nT",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-88958209,88958209,
jonasschnelli,2015-04-02T20:03:52Z,"@theuni Tests running through now.\nSlightly testes ACK (create encrypted wallets, exchanged between master-built-bitcoind and this PR bitcoind, dumped wallet, compared keys [tested wallet.dat exchanging in both directions]).\n",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-89027637,89027637,
jgarzik,2015-04-03T02:01:14Z,"lightly tested (at branch point) ACK\n\nMeta:  Should probably run all new files through the clang formatter, catch all nits ahead of time.\n",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-89119214,89119214,
sipa,2015-04-03T02:39:50Z,Concept ACK. Code review ACK. I didn't test or review the tests.\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-89130225,89130225,
Diapolo,2015-04-03T14:41:45Z,@jgarzik Reminds me that we wanted to clang-format-all-sources... when will this be done finally?\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-89307061,89307061,
theuni,2015-04-04T00:35:13Z,"@jgarzik Thanks for the good suggestion. I formatted the new aes files with clang-format-3.5, ignoring the wonky array init change for now as discussed on IRC.\n\nSeparate commits to avoid the need to re-ACK the original changes.\n",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-89473035,89473035,
jtimon,2015-06-21T13:31:32Z,Concept ACK. Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-113902371,113902371,
theuni,2015-06-25T21:17:38Z,"Rebased. I'm not sure if this is going to end up being useful though, with @jonasschnelli's work towards a new wallet.\n",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-115400552,115400552,
jonasschnelli,2015-06-26T06:52:46Z,"@theuni: i really like this. Using this would allow encryption of users wallets without adding openssl (or similar) as dependency. I don't have the experience to judge the risks, but if im right, the AES part is very stable and foreseeable. The critical part (PRNG) is untouched.\n\nMy plans is to use this for the `corewallet/crypter.cpp` stuff. If someone decides to not compile the ""traditional"" w",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-115549081,115549081,
jtimon,2015-11-10T16:23:53Z,Needs rebase. Maybe on top of #6954 ?\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-155472254,155472254,
sipa,2015-11-28T13:18:31Z,"Needs rebase, indeed.\n",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-160295667,160295667,
laanwj,2015-12-03T11:50:18Z,Tagged for 0.13\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-161608404,161608404,
laanwj,2016-02-01T12:55:04Z,"Time to start merging these.\nNeeds rebase, though.\n",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-177958973,177958973,
theuni,2016-03-01T18:08:42Z,rebased\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-190837027,190837027,
laanwj,2016-03-02T14:00:56Z,"Awesome, thanks @theuni\n",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-191248310,191248310,
jonasschnelli,2016-03-02T15:37:31Z,Nice! Going to re-test soon.\nWhat about adding the NIST test vectors to the test code? I have create a C test script recently with most NIST AES test vectors. https://github.com/libbtc/libbtc/blob/master/test/aes_tests.c?\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-191290590,191290590,
theuni,2016-03-02T17:59:25Z,@jonasschnelli Some of the cbc test vectors are included here: https://github.com/bitcoin/bitcoin/pull/5949/files#diff-e425713e54c6cfd3f6056f549af0c5e4R368\n\nThose come from http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n\nHappy to add the others.\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-191350807,191350807,
sipa,2016-03-05T04:52:08Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-192569312,192569312,
sipa,2016-03-13T19:30:20Z,"In https://github.com/sipa/bitcoin/commits/const_aes you can find a rebased version of this PR on top of https://github.com/sipa/bitcoin/commit/27d0d49e317bd366bdbf5f922fc11d933af06fef which implements AES in constant-time:\n- It uses the bit-slicing approach from http://www.iacr.org/archive/ches2009/57470001/57470001.pdf\n- Not super-optimized, and 15-25 times slower than the older variable-time ",https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-196028595,196028595,
laanwj,2016-03-15T08:21:35Z,Closing in favor of #7689\n,https://github.com/bitcoin/bitcoin/pull/5949#issuecomment-196712670,196712670,
jonasschnelli,2015-04-01T18:32:10Z,'int' and 'size_type' comparison.\nGives a clang warning.\n,https://github.com/bitcoin/bitcoin/pull/5949#discussion_r27597011,27597011,src/wallet/crypter.cpp
sipa,2015-04-03T01:35:50Z,Coding style nit: braces on the same line\n,https://github.com/bitcoin/bitcoin/pull/5949#discussion_r27711410,27711410,src/crypto/aes.cpp
sipa,2015-04-03T02:39:03Z,Nice tricks for constant-time behavior.\n,https://github.com/bitcoin/bitcoin/pull/5949#discussion_r27712950,27712950,src/crypto/aes.cpp
paveljanik,2016-03-05T08:28:27Z,Do we need these openssl includes here?\n,https://github.com/bitcoin/bitcoin/pull/5949#discussion_r55117923,55117923,src/test/crypto_tests.cpp
