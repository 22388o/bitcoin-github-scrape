[
  {
    "sha": "86707bfe098c9297edd96480c94433624567c32b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjcwN2JmZTA5OGM5Mjk3ZWRkOTY0ODBjOTQ0MzM2MjQ1NjdjMzJi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-02-20T10:06:17Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:30:45Z"
      },
      "message": "Add AES implementation",
      "tree": {
        "sha": "6a93e4829dffd7a67b60d7e2ae33379516feb489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a93e4829dffd7a67b60d7e2ae33379516feb489"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86707bfe098c9297edd96480c94433624567c32b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86707bfe098c9297edd96480c94433624567c32b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86707bfe098c9297edd96480c94433624567c32b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86707bfe098c9297edd96480c94433624567c32b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "639ec582d0f31e4a15946ffff2e95b9ff7758bd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/639ec582d0f31e4a15946ffff2e95b9ff7758bd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/639ec582d0f31e4a15946ffff2e95b9ff7758bd2"
      }
    ],
    "stats": {
      "total": 1214,
      "additions": 1214,
      "deletions": 0
    },
    "files": [
      {
        "sha": "50d6940a9dbfa552e62d7a5f14f3da6ea04da225",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86707bfe098c9297edd96480c94433624567c32b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86707bfe098c9297edd96480c94433624567c32b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=86707bfe098c9297edd96480c94433624567c32b",
        "patch": "@@ -237,6 +237,8 @@ libbitcoin_wallet_a_SOURCES = \\\n crypto_libbitcoin_crypto_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_CONFIG_INCLUDES)\n crypto_libbitcoin_crypto_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_a_SOURCES = \\\n+  crypto/aes.cpp \\\n+  crypto/aes.h \\\n   crypto/common.h \\\n   crypto/hmac_sha256.cpp \\\n   crypto/hmac_sha256.h \\"
      },
      {
        "sha": "78e8e9fa10bc8227063b2df4b8b5df28876d43f6",
        "filename": "src/crypto/aes.cpp",
        "status": "added",
        "additions": 1123,
        "deletions": 0,
        "changes": 1123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86707bfe098c9297edd96480c94433624567c32b/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86707bfe098c9297edd96480c94433624567c32b/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=86707bfe098c9297edd96480c94433624567c32b",
        "patch": "@@ -0,0 +1,1123 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+// Code adapted from Philip J. Erdelsky's public domain implementation, which\n+// was based on code by Vincent Rijmen, Antoon Bosselaers, and Paulo Barreto.\n+\n+#include \"crypto/aes.h\"\n+\n+#include \"crypto/common.h\"\n+\n+#include <string.h>\n+\n+namespace\n+{\n+\n+const uint32_t Te0[256] = {\n+    0xc66363a5U, 0xf87c7c84U, 0xee777799U, 0xf67b7b8dU,\n+    0xfff2f20dU, 0xd66b6bbdU, 0xde6f6fb1U, 0x91c5c554U,\n+    0x60303050U, 0x02010103U, 0xce6767a9U, 0x562b2b7dU,\n+    0xe7fefe19U, 0xb5d7d762U, 0x4dababe6U, 0xec76769aU,\n+    0x8fcaca45U, 0x1f82829dU, 0x89c9c940U, 0xfa7d7d87U,\n+    0xeffafa15U, 0xb25959ebU, 0x8e4747c9U, 0xfbf0f00bU,\n+    0x41adadecU, 0xb3d4d467U, 0x5fa2a2fdU, 0x45afafeaU,\n+    0x239c9cbfU, 0x53a4a4f7U, 0xe4727296U, 0x9bc0c05bU,\n+    0x75b7b7c2U, 0xe1fdfd1cU, 0x3d9393aeU, 0x4c26266aU,\n+    0x6c36365aU, 0x7e3f3f41U, 0xf5f7f702U, 0x83cccc4fU,\n+    0x6834345cU, 0x51a5a5f4U, 0xd1e5e534U, 0xf9f1f108U,\n+    0xe2717193U, 0xabd8d873U, 0x62313153U, 0x2a15153fU,\n+    0x0804040cU, 0x95c7c752U, 0x46232365U, 0x9dc3c35eU,\n+    0x30181828U, 0x379696a1U, 0x0a05050fU, 0x2f9a9ab5U,\n+    0x0e070709U, 0x24121236U, 0x1b80809bU, 0xdfe2e23dU,\n+    0xcdebeb26U, 0x4e272769U, 0x7fb2b2cdU, 0xea75759fU,\n+    0x1209091bU, 0x1d83839eU, 0x582c2c74U, 0x341a1a2eU,\n+    0x361b1b2dU, 0xdc6e6eb2U, 0xb45a5aeeU, 0x5ba0a0fbU,\n+    0xa45252f6U, 0x763b3b4dU, 0xb7d6d661U, 0x7db3b3ceU,\n+    0x5229297bU, 0xdde3e33eU, 0x5e2f2f71U, 0x13848497U,\n+    0xa65353f5U, 0xb9d1d168U, 0x00000000U, 0xc1eded2cU,\n+    0x40202060U, 0xe3fcfc1fU, 0x79b1b1c8U, 0xb65b5bedU,\n+    0xd46a6abeU, 0x8dcbcb46U, 0x67bebed9U, 0x7239394bU,\n+    0x944a4adeU, 0x984c4cd4U, 0xb05858e8U, 0x85cfcf4aU,\n+    0xbbd0d06bU, 0xc5efef2aU, 0x4faaaae5U, 0xedfbfb16U,\n+    0x864343c5U, 0x9a4d4dd7U, 0x66333355U, 0x11858594U,\n+    0x8a4545cfU, 0xe9f9f910U, 0x04020206U, 0xfe7f7f81U,\n+    0xa05050f0U, 0x783c3c44U, 0x259f9fbaU, 0x4ba8a8e3U,\n+    0xa25151f3U, 0x5da3a3feU, 0x804040c0U, 0x058f8f8aU,\n+    0x3f9292adU, 0x219d9dbcU, 0x70383848U, 0xf1f5f504U,\n+    0x63bcbcdfU, 0x77b6b6c1U, 0xafdada75U, 0x42212163U,\n+    0x20101030U, 0xe5ffff1aU, 0xfdf3f30eU, 0xbfd2d26dU,\n+    0x81cdcd4cU, 0x180c0c14U, 0x26131335U, 0xc3ecec2fU,\n+    0xbe5f5fe1U, 0x359797a2U, 0x884444ccU, 0x2e171739U,\n+    0x93c4c457U, 0x55a7a7f2U, 0xfc7e7e82U, 0x7a3d3d47U,\n+    0xc86464acU, 0xba5d5de7U, 0x3219192bU, 0xe6737395U,\n+    0xc06060a0U, 0x19818198U, 0x9e4f4fd1U, 0xa3dcdc7fU,\n+    0x44222266U, 0x542a2a7eU, 0x3b9090abU, 0x0b888883U,\n+    0x8c4646caU, 0xc7eeee29U, 0x6bb8b8d3U, 0x2814143cU,\n+    0xa7dede79U, 0xbc5e5ee2U, 0x160b0b1dU, 0xaddbdb76U,\n+    0xdbe0e03bU, 0x64323256U, 0x743a3a4eU, 0x140a0a1eU,\n+    0x924949dbU, 0x0c06060aU, 0x4824246cU, 0xb85c5ce4U,\n+    0x9fc2c25dU, 0xbdd3d36eU, 0x43acacefU, 0xc46262a6U,\n+    0x399191a8U, 0x319595a4U, 0xd3e4e437U, 0xf279798bU,\n+    0xd5e7e732U, 0x8bc8c843U, 0x6e373759U, 0xda6d6db7U,\n+    0x018d8d8cU, 0xb1d5d564U, 0x9c4e4ed2U, 0x49a9a9e0U,\n+    0xd86c6cb4U, 0xac5656faU, 0xf3f4f407U, 0xcfeaea25U,\n+    0xca6565afU, 0xf47a7a8eU, 0x47aeaee9U, 0x10080818U,\n+    0x6fbabad5U, 0xf0787888U, 0x4a25256fU, 0x5c2e2e72U,\n+    0x381c1c24U, 0x57a6a6f1U, 0x73b4b4c7U, 0x97c6c651U,\n+    0xcbe8e823U, 0xa1dddd7cU, 0xe874749cU, 0x3e1f1f21U,\n+    0x964b4bddU, 0x61bdbddcU, 0x0d8b8b86U, 0x0f8a8a85U,\n+    0xe0707090U, 0x7c3e3e42U, 0x71b5b5c4U, 0xcc6666aaU,\n+    0x904848d8U, 0x06030305U, 0xf7f6f601U, 0x1c0e0e12U,\n+    0xc26161a3U, 0x6a35355fU, 0xae5757f9U, 0x69b9b9d0U,\n+    0x17868691U, 0x99c1c158U, 0x3a1d1d27U, 0x279e9eb9U,\n+    0xd9e1e138U, 0xebf8f813U, 0x2b9898b3U, 0x22111133U,\n+    0xd26969bbU, 0xa9d9d970U, 0x078e8e89U, 0x339494a7U,\n+    0x2d9b9bb6U, 0x3c1e1e22U, 0x15878792U, 0xc9e9e920U,\n+    0x87cece49U, 0xaa5555ffU, 0x50282878U, 0xa5dfdf7aU,\n+    0x038c8c8fU, 0x59a1a1f8U, 0x09898980U, 0x1a0d0d17U,\n+    0x65bfbfdaU, 0xd7e6e631U, 0x844242c6U, 0xd06868b8U,\n+    0x824141c3U, 0x299999b0U, 0x5a2d2d77U, 0x1e0f0f11U,\n+    0x7bb0b0cbU, 0xa85454fcU, 0x6dbbbbd6U, 0x2c16163aU,\n+};\n+\n+const uint32_t Te1[256] = {\n+    0xa5c66363U, 0x84f87c7cU, 0x99ee7777U, 0x8df67b7bU,\n+    0x0dfff2f2U, 0xbdd66b6bU, 0xb1de6f6fU, 0x5491c5c5U,\n+    0x50603030U, 0x03020101U, 0xa9ce6767U, 0x7d562b2bU,\n+    0x19e7fefeU, 0x62b5d7d7U, 0xe64dababU, 0x9aec7676U,\n+    0x458fcacaU, 0x9d1f8282U, 0x4089c9c9U, 0x87fa7d7dU,\n+    0x15effafaU, 0xebb25959U, 0xc98e4747U, 0x0bfbf0f0U,\n+    0xec41adadU, 0x67b3d4d4U, 0xfd5fa2a2U, 0xea45afafU,\n+    0xbf239c9cU, 0xf753a4a4U, 0x96e47272U, 0x5b9bc0c0U,\n+    0xc275b7b7U, 0x1ce1fdfdU, 0xae3d9393U, 0x6a4c2626U,\n+    0x5a6c3636U, 0x417e3f3fU, 0x02f5f7f7U, 0x4f83ccccU,\n+    0x5c683434U, 0xf451a5a5U, 0x34d1e5e5U, 0x08f9f1f1U,\n+    0x93e27171U, 0x73abd8d8U, 0x53623131U, 0x3f2a1515U,\n+    0x0c080404U, 0x5295c7c7U, 0x65462323U, 0x5e9dc3c3U,\n+    0x28301818U, 0xa1379696U, 0x0f0a0505U, 0xb52f9a9aU,\n+    0x090e0707U, 0x36241212U, 0x9b1b8080U, 0x3ddfe2e2U,\n+    0x26cdebebU, 0x694e2727U, 0xcd7fb2b2U, 0x9fea7575U,\n+    0x1b120909U, 0x9e1d8383U, 0x74582c2cU, 0x2e341a1aU,\n+    0x2d361b1bU, 0xb2dc6e6eU, 0xeeb45a5aU, 0xfb5ba0a0U,\n+    0xf6a45252U, 0x4d763b3bU, 0x61b7d6d6U, 0xce7db3b3U,\n+    0x7b522929U, 0x3edde3e3U, 0x715e2f2fU, 0x97138484U,\n+    0xf5a65353U, 0x68b9d1d1U, 0x00000000U, 0x2cc1ededU,\n+    0x60402020U, 0x1fe3fcfcU, 0xc879b1b1U, 0xedb65b5bU,\n+    0xbed46a6aU, 0x468dcbcbU, 0xd967bebeU, 0x4b723939U,\n+    0xde944a4aU, 0xd4984c4cU, 0xe8b05858U, 0x4a85cfcfU,\n+    0x6bbbd0d0U, 0x2ac5efefU, 0xe54faaaaU, 0x16edfbfbU,\n+    0xc5864343U, 0xd79a4d4dU, 0x55663333U, 0x94118585U,\n+    0xcf8a4545U, 0x10e9f9f9U, 0x06040202U, 0x81fe7f7fU,\n+    0xf0a05050U, 0x44783c3cU, 0xba259f9fU, 0xe34ba8a8U,\n+    0xf3a25151U, 0xfe5da3a3U, 0xc0804040U, 0x8a058f8fU,\n+    0xad3f9292U, 0xbc219d9dU, 0x48703838U, 0x04f1f5f5U,\n+    0xdf63bcbcU, 0xc177b6b6U, 0x75afdadaU, 0x63422121U,\n+    0x30201010U, 0x1ae5ffffU, 0x0efdf3f3U, 0x6dbfd2d2U,\n+    0x4c81cdcdU, 0x14180c0cU, 0x35261313U, 0x2fc3ececU,\n+    0xe1be5f5fU, 0xa2359797U, 0xcc884444U, 0x392e1717U,\n+    0x5793c4c4U, 0xf255a7a7U, 0x82fc7e7eU, 0x477a3d3dU,\n+    0xacc86464U, 0xe7ba5d5dU, 0x2b321919U, 0x95e67373U,\n+    0xa0c06060U, 0x98198181U, 0xd19e4f4fU, 0x7fa3dcdcU,\n+    0x66442222U, 0x7e542a2aU, 0xab3b9090U, 0x830b8888U,\n+    0xca8c4646U, 0x29c7eeeeU, 0xd36bb8b8U, 0x3c281414U,\n+    0x79a7dedeU, 0xe2bc5e5eU, 0x1d160b0bU, 0x76addbdbU,\n+    0x3bdbe0e0U, 0x56643232U, 0x4e743a3aU, 0x1e140a0aU,\n+    0xdb924949U, 0x0a0c0606U, 0x6c482424U, 0xe4b85c5cU,\n+    0x5d9fc2c2U, 0x6ebdd3d3U, 0xef43acacU, 0xa6c46262U,\n+    0xa8399191U, 0xa4319595U, 0x37d3e4e4U, 0x8bf27979U,\n+    0x32d5e7e7U, 0x438bc8c8U, 0x596e3737U, 0xb7da6d6dU,\n+    0x8c018d8dU, 0x64b1d5d5U, 0xd29c4e4eU, 0xe049a9a9U,\n+    0xb4d86c6cU, 0xfaac5656U, 0x07f3f4f4U, 0x25cfeaeaU,\n+    0xafca6565U, 0x8ef47a7aU, 0xe947aeaeU, 0x18100808U,\n+    0xd56fbabaU, 0x88f07878U, 0x6f4a2525U, 0x725c2e2eU,\n+    0x24381c1cU, 0xf157a6a6U, 0xc773b4b4U, 0x5197c6c6U,\n+    0x23cbe8e8U, 0x7ca1ddddU, 0x9ce87474U, 0x213e1f1fU,\n+    0xdd964b4bU, 0xdc61bdbdU, 0x860d8b8bU, 0x850f8a8aU,\n+    0x90e07070U, 0x427c3e3eU, 0xc471b5b5U, 0xaacc6666U,\n+    0xd8904848U, 0x05060303U, 0x01f7f6f6U, 0x121c0e0eU,\n+    0xa3c26161U, 0x5f6a3535U, 0xf9ae5757U, 0xd069b9b9U,\n+    0x91178686U, 0x5899c1c1U, 0x273a1d1dU, 0xb9279e9eU,\n+    0x38d9e1e1U, 0x13ebf8f8U, 0xb32b9898U, 0x33221111U,\n+    0xbbd26969U, 0x70a9d9d9U, 0x89078e8eU, 0xa7339494U,\n+    0xb62d9b9bU, 0x223c1e1eU, 0x92158787U, 0x20c9e9e9U,\n+    0x4987ceceU, 0xffaa5555U, 0x78502828U, 0x7aa5dfdfU,\n+    0x8f038c8cU, 0xf859a1a1U, 0x80098989U, 0x171a0d0dU,\n+    0xda65bfbfU, 0x31d7e6e6U, 0xc6844242U, 0xb8d06868U,\n+    0xc3824141U, 0xb0299999U, 0x775a2d2dU, 0x111e0f0fU,\n+    0xcb7bb0b0U, 0xfca85454U, 0xd66dbbbbU, 0x3a2c1616U,\n+};\n+\n+const uint32_t Te2[256] = {\n+    0x63a5c663U, 0x7c84f87cU, 0x7799ee77U, 0x7b8df67bU,\n+    0xf20dfff2U, 0x6bbdd66bU, 0x6fb1de6fU, 0xc55491c5U,\n+    0x30506030U, 0x01030201U, 0x67a9ce67U, 0x2b7d562bU,\n+    0xfe19e7feU, 0xd762b5d7U, 0xabe64dabU, 0x769aec76U,\n+    0xca458fcaU, 0x829d1f82U, 0xc94089c9U, 0x7d87fa7dU,\n+    0xfa15effaU, 0x59ebb259U, 0x47c98e47U, 0xf00bfbf0U,\n+    0xadec41adU, 0xd467b3d4U, 0xa2fd5fa2U, 0xafea45afU,\n+    0x9cbf239cU, 0xa4f753a4U, 0x7296e472U, 0xc05b9bc0U,\n+    0xb7c275b7U, 0xfd1ce1fdU, 0x93ae3d93U, 0x266a4c26U,\n+    0x365a6c36U, 0x3f417e3fU, 0xf702f5f7U, 0xcc4f83ccU,\n+    0x345c6834U, 0xa5f451a5U, 0xe534d1e5U, 0xf108f9f1U,\n+    0x7193e271U, 0xd873abd8U, 0x31536231U, 0x153f2a15U,\n+    0x040c0804U, 0xc75295c7U, 0x23654623U, 0xc35e9dc3U,\n+    0x18283018U, 0x96a13796U, 0x050f0a05U, 0x9ab52f9aU,\n+    0x07090e07U, 0x12362412U, 0x809b1b80U, 0xe23ddfe2U,\n+    0xeb26cdebU, 0x27694e27U, 0xb2cd7fb2U, 0x759fea75U,\n+    0x091b1209U, 0x839e1d83U, 0x2c74582cU, 0x1a2e341aU,\n+    0x1b2d361bU, 0x6eb2dc6eU, 0x5aeeb45aU, 0xa0fb5ba0U,\n+    0x52f6a452U, 0x3b4d763bU, 0xd661b7d6U, 0xb3ce7db3U,\n+    0x297b5229U, 0xe33edde3U, 0x2f715e2fU, 0x84971384U,\n+    0x53f5a653U, 0xd168b9d1U, 0x00000000U, 0xed2cc1edU,\n+    0x20604020U, 0xfc1fe3fcU, 0xb1c879b1U, 0x5bedb65bU,\n+    0x6abed46aU, 0xcb468dcbU, 0xbed967beU, 0x394b7239U,\n+    0x4ade944aU, 0x4cd4984cU, 0x58e8b058U, 0xcf4a85cfU,\n+    0xd06bbbd0U, 0xef2ac5efU, 0xaae54faaU, 0xfb16edfbU,\n+    0x43c58643U, 0x4dd79a4dU, 0x33556633U, 0x85941185U,\n+    0x45cf8a45U, 0xf910e9f9U, 0x02060402U, 0x7f81fe7fU,\n+    0x50f0a050U, 0x3c44783cU, 0x9fba259fU, 0xa8e34ba8U,\n+    0x51f3a251U, 0xa3fe5da3U, 0x40c08040U, 0x8f8a058fU,\n+    0x92ad3f92U, 0x9dbc219dU, 0x38487038U, 0xf504f1f5U,\n+    0xbcdf63bcU, 0xb6c177b6U, 0xda75afdaU, 0x21634221U,\n+    0x10302010U, 0xff1ae5ffU, 0xf30efdf3U, 0xd26dbfd2U,\n+    0xcd4c81cdU, 0x0c14180cU, 0x13352613U, 0xec2fc3ecU,\n+    0x5fe1be5fU, 0x97a23597U, 0x44cc8844U, 0x17392e17U,\n+    0xc45793c4U, 0xa7f255a7U, 0x7e82fc7eU, 0x3d477a3dU,\n+    0x64acc864U, 0x5de7ba5dU, 0x192b3219U, 0x7395e673U,\n+    0x60a0c060U, 0x81981981U, 0x4fd19e4fU, 0xdc7fa3dcU,\n+    0x22664422U, 0x2a7e542aU, 0x90ab3b90U, 0x88830b88U,\n+    0x46ca8c46U, 0xee29c7eeU, 0xb8d36bb8U, 0x143c2814U,\n+    0xde79a7deU, 0x5ee2bc5eU, 0x0b1d160bU, 0xdb76addbU,\n+    0xe03bdbe0U, 0x32566432U, 0x3a4e743aU, 0x0a1e140aU,\n+    0x49db9249U, 0x060a0c06U, 0x246c4824U, 0x5ce4b85cU,\n+    0xc25d9fc2U, 0xd36ebdd3U, 0xacef43acU, 0x62a6c462U,\n+    0x91a83991U, 0x95a43195U, 0xe437d3e4U, 0x798bf279U,\n+    0xe732d5e7U, 0xc8438bc8U, 0x37596e37U, 0x6db7da6dU,\n+    0x8d8c018dU, 0xd564b1d5U, 0x4ed29c4eU, 0xa9e049a9U,\n+    0x6cb4d86cU, 0x56faac56U, 0xf407f3f4U, 0xea25cfeaU,\n+    0x65afca65U, 0x7a8ef47aU, 0xaee947aeU, 0x08181008U,\n+    0xbad56fbaU, 0x7888f078U, 0x256f4a25U, 0x2e725c2eU,\n+    0x1c24381cU, 0xa6f157a6U, 0xb4c773b4U, 0xc65197c6U,\n+    0xe823cbe8U, 0xdd7ca1ddU, 0x749ce874U, 0x1f213e1fU,\n+    0x4bdd964bU, 0xbddc61bdU, 0x8b860d8bU, 0x8a850f8aU,\n+    0x7090e070U, 0x3e427c3eU, 0xb5c471b5U, 0x66aacc66U,\n+    0x48d89048U, 0x03050603U, 0xf601f7f6U, 0x0e121c0eU,\n+    0x61a3c261U, 0x355f6a35U, 0x57f9ae57U, 0xb9d069b9U,\n+    0x86911786U, 0xc15899c1U, 0x1d273a1dU, 0x9eb9279eU,\n+    0xe138d9e1U, 0xf813ebf8U, 0x98b32b98U, 0x11332211U,\n+    0x69bbd269U, 0xd970a9d9U, 0x8e89078eU, 0x94a73394U,\n+    0x9bb62d9bU, 0x1e223c1eU, 0x87921587U, 0xe920c9e9U,\n+    0xce4987ceU, 0x55ffaa55U, 0x28785028U, 0xdf7aa5dfU,\n+    0x8c8f038cU, 0xa1f859a1U, 0x89800989U, 0x0d171a0dU,\n+    0xbfda65bfU, 0xe631d7e6U, 0x42c68442U, 0x68b8d068U,\n+    0x41c38241U, 0x99b02999U, 0x2d775a2dU, 0x0f111e0fU,\n+    0xb0cb7bb0U, 0x54fca854U, 0xbbd66dbbU, 0x163a2c16U,\n+};\n+\n+const uint32_t Te3[256] = {\n+    0x6363a5c6U, 0x7c7c84f8U, 0x777799eeU, 0x7b7b8df6U,\n+    0xf2f20dffU, 0x6b6bbdd6U, 0x6f6fb1deU, 0xc5c55491U,\n+    0x30305060U, 0x01010302U, 0x6767a9ceU, 0x2b2b7d56U,\n+    0xfefe19e7U, 0xd7d762b5U, 0xababe64dU, 0x76769aecU,\n+    0xcaca458fU, 0x82829d1fU, 0xc9c94089U, 0x7d7d87faU,\n+    0xfafa15efU, 0x5959ebb2U, 0x4747c98eU, 0xf0f00bfbU,\n+    0xadadec41U, 0xd4d467b3U, 0xa2a2fd5fU, 0xafafea45U,\n+    0x9c9cbf23U, 0xa4a4f753U, 0x727296e4U, 0xc0c05b9bU,\n+    0xb7b7c275U, 0xfdfd1ce1U, 0x9393ae3dU, 0x26266a4cU,\n+    0x36365a6cU, 0x3f3f417eU, 0xf7f702f5U, 0xcccc4f83U,\n+    0x34345c68U, 0xa5a5f451U, 0xe5e534d1U, 0xf1f108f9U,\n+    0x717193e2U, 0xd8d873abU, 0x31315362U, 0x15153f2aU,\n+    0x04040c08U, 0xc7c75295U, 0x23236546U, 0xc3c35e9dU,\n+    0x18182830U, 0x9696a137U, 0x05050f0aU, 0x9a9ab52fU,\n+    0x0707090eU, 0x12123624U, 0x80809b1bU, 0xe2e23ddfU,\n+    0xebeb26cdU, 0x2727694eU, 0xb2b2cd7fU, 0x75759feaU,\n+    0x09091b12U, 0x83839e1dU, 0x2c2c7458U, 0x1a1a2e34U,\n+    0x1b1b2d36U, 0x6e6eb2dcU, 0x5a5aeeb4U, 0xa0a0fb5bU,\n+    0x5252f6a4U, 0x3b3b4d76U, 0xd6d661b7U, 0xb3b3ce7dU,\n+    0x29297b52U, 0xe3e33eddU, 0x2f2f715eU, 0x84849713U,\n+    0x5353f5a6U, 0xd1d168b9U, 0x00000000U, 0xeded2cc1U,\n+    0x20206040U, 0xfcfc1fe3U, 0xb1b1c879U, 0x5b5bedb6U,\n+    0x6a6abed4U, 0xcbcb468dU, 0xbebed967U, 0x39394b72U,\n+    0x4a4ade94U, 0x4c4cd498U, 0x5858e8b0U, 0xcfcf4a85U,\n+    0xd0d06bbbU, 0xefef2ac5U, 0xaaaae54fU, 0xfbfb16edU,\n+    0x4343c586U, 0x4d4dd79aU, 0x33335566U, 0x85859411U,\n+    0x4545cf8aU, 0xf9f910e9U, 0x02020604U, 0x7f7f81feU,\n+    0x5050f0a0U, 0x3c3c4478U, 0x9f9fba25U, 0xa8a8e34bU,\n+    0x5151f3a2U, 0xa3a3fe5dU, 0x4040c080U, 0x8f8f8a05U,\n+    0x9292ad3fU, 0x9d9dbc21U, 0x38384870U, 0xf5f504f1U,\n+    0xbcbcdf63U, 0xb6b6c177U, 0xdada75afU, 0x21216342U,\n+    0x10103020U, 0xffff1ae5U, 0xf3f30efdU, 0xd2d26dbfU,\n+    0xcdcd4c81U, 0x0c0c1418U, 0x13133526U, 0xecec2fc3U,\n+    0x5f5fe1beU, 0x9797a235U, 0x4444cc88U, 0x1717392eU,\n+    0xc4c45793U, 0xa7a7f255U, 0x7e7e82fcU, 0x3d3d477aU,\n+    0x6464acc8U, 0x5d5de7baU, 0x19192b32U, 0x737395e6U,\n+    0x6060a0c0U, 0x81819819U, 0x4f4fd19eU, 0xdcdc7fa3U,\n+    0x22226644U, 0x2a2a7e54U, 0x9090ab3bU, 0x8888830bU,\n+    0x4646ca8cU, 0xeeee29c7U, 0xb8b8d36bU, 0x14143c28U,\n+    0xdede79a7U, 0x5e5ee2bcU, 0x0b0b1d16U, 0xdbdb76adU,\n+    0xe0e03bdbU, 0x32325664U, 0x3a3a4e74U, 0x0a0a1e14U,\n+    0x4949db92U, 0x06060a0cU, 0x24246c48U, 0x5c5ce4b8U,\n+    0xc2c25d9fU, 0xd3d36ebdU, 0xacacef43U, 0x6262a6c4U,\n+    0x9191a839U, 0x9595a431U, 0xe4e437d3U, 0x79798bf2U,\n+    0xe7e732d5U, 0xc8c8438bU, 0x3737596eU, 0x6d6db7daU,\n+    0x8d8d8c01U, 0xd5d564b1U, 0x4e4ed29cU, 0xa9a9e049U,\n+    0x6c6cb4d8U, 0x5656faacU, 0xf4f407f3U, 0xeaea25cfU,\n+    0x6565afcaU, 0x7a7a8ef4U, 0xaeaee947U, 0x08081810U,\n+    0xbabad56fU, 0x787888f0U, 0x25256f4aU, 0x2e2e725cU,\n+    0x1c1c2438U, 0xa6a6f157U, 0xb4b4c773U, 0xc6c65197U,\n+    0xe8e823cbU, 0xdddd7ca1U, 0x74749ce8U, 0x1f1f213eU,\n+    0x4b4bdd96U, 0xbdbddc61U, 0x8b8b860dU, 0x8a8a850fU,\n+    0x707090e0U, 0x3e3e427cU, 0xb5b5c471U, 0x6666aaccU,\n+    0x4848d890U, 0x03030506U, 0xf6f601f7U, 0x0e0e121cU,\n+    0x6161a3c2U, 0x35355f6aU, 0x5757f9aeU, 0xb9b9d069U,\n+    0x86869117U, 0xc1c15899U, 0x1d1d273aU, 0x9e9eb927U,\n+    0xe1e138d9U, 0xf8f813ebU, 0x9898b32bU, 0x11113322U,\n+    0x6969bbd2U, 0xd9d970a9U, 0x8e8e8907U, 0x9494a733U,\n+    0x9b9bb62dU, 0x1e1e223cU, 0x87879215U, 0xe9e920c9U,\n+    0xcece4987U, 0x5555ffaaU, 0x28287850U, 0xdfdf7aa5U,\n+    0x8c8c8f03U, 0xa1a1f859U, 0x89898009U, 0x0d0d171aU,\n+    0xbfbfda65U, 0xe6e631d7U, 0x4242c684U, 0x6868b8d0U,\n+    0x4141c382U, 0x9999b029U, 0x2d2d775aU, 0x0f0f111eU,\n+    0xb0b0cb7bU, 0x5454fca8U, 0xbbbbd66dU, 0x16163a2cU,\n+};\n+\n+const uint32_t Te4[256] = {\n+    0x63636363U, 0x7c7c7c7cU, 0x77777777U, 0x7b7b7b7bU,\n+    0xf2f2f2f2U, 0x6b6b6b6bU, 0x6f6f6f6fU, 0xc5c5c5c5U,\n+    0x30303030U, 0x01010101U, 0x67676767U, 0x2b2b2b2bU,\n+    0xfefefefeU, 0xd7d7d7d7U, 0xababababU, 0x76767676U,\n+    0xcacacacaU, 0x82828282U, 0xc9c9c9c9U, 0x7d7d7d7dU,\n+    0xfafafafaU, 0x59595959U, 0x47474747U, 0xf0f0f0f0U,\n+    0xadadadadU, 0xd4d4d4d4U, 0xa2a2a2a2U, 0xafafafafU,\n+    0x9c9c9c9cU, 0xa4a4a4a4U, 0x72727272U, 0xc0c0c0c0U,\n+    0xb7b7b7b7U, 0xfdfdfdfdU, 0x93939393U, 0x26262626U,\n+    0x36363636U, 0x3f3f3f3fU, 0xf7f7f7f7U, 0xccccccccU,\n+    0x34343434U, 0xa5a5a5a5U, 0xe5e5e5e5U, 0xf1f1f1f1U,\n+    0x71717171U, 0xd8d8d8d8U, 0x31313131U, 0x15151515U,\n+    0x04040404U, 0xc7c7c7c7U, 0x23232323U, 0xc3c3c3c3U,\n+    0x18181818U, 0x96969696U, 0x05050505U, 0x9a9a9a9aU,\n+    0x07070707U, 0x12121212U, 0x80808080U, 0xe2e2e2e2U,\n+    0xebebebebU, 0x27272727U, 0xb2b2b2b2U, 0x75757575U,\n+    0x09090909U, 0x83838383U, 0x2c2c2c2cU, 0x1a1a1a1aU,\n+    0x1b1b1b1bU, 0x6e6e6e6eU, 0x5a5a5a5aU, 0xa0a0a0a0U,\n+    0x52525252U, 0x3b3b3b3bU, 0xd6d6d6d6U, 0xb3b3b3b3U,\n+    0x29292929U, 0xe3e3e3e3U, 0x2f2f2f2fU, 0x84848484U,\n+    0x53535353U, 0xd1d1d1d1U, 0x00000000U, 0xededededU,\n+    0x20202020U, 0xfcfcfcfcU, 0xb1b1b1b1U, 0x5b5b5b5bU,\n+    0x6a6a6a6aU, 0xcbcbcbcbU, 0xbebebebeU, 0x39393939U,\n+    0x4a4a4a4aU, 0x4c4c4c4cU, 0x58585858U, 0xcfcfcfcfU,\n+    0xd0d0d0d0U, 0xefefefefU, 0xaaaaaaaaU, 0xfbfbfbfbU,\n+    0x43434343U, 0x4d4d4d4dU, 0x33333333U, 0x85858585U,\n+    0x45454545U, 0xf9f9f9f9U, 0x02020202U, 0x7f7f7f7fU,\n+    0x50505050U, 0x3c3c3c3cU, 0x9f9f9f9fU, 0xa8a8a8a8U,\n+    0x51515151U, 0xa3a3a3a3U, 0x40404040U, 0x8f8f8f8fU,\n+    0x92929292U, 0x9d9d9d9dU, 0x38383838U, 0xf5f5f5f5U,\n+    0xbcbcbcbcU, 0xb6b6b6b6U, 0xdadadadaU, 0x21212121U,\n+    0x10101010U, 0xffffffffU, 0xf3f3f3f3U, 0xd2d2d2d2U,\n+    0xcdcdcdcdU, 0x0c0c0c0cU, 0x13131313U, 0xececececU,\n+    0x5f5f5f5fU, 0x97979797U, 0x44444444U, 0x17171717U,\n+    0xc4c4c4c4U, 0xa7a7a7a7U, 0x7e7e7e7eU, 0x3d3d3d3dU,\n+    0x64646464U, 0x5d5d5d5dU, 0x19191919U, 0x73737373U,\n+    0x60606060U, 0x81818181U, 0x4f4f4f4fU, 0xdcdcdcdcU,\n+    0x22222222U, 0x2a2a2a2aU, 0x90909090U, 0x88888888U,\n+    0x46464646U, 0xeeeeeeeeU, 0xb8b8b8b8U, 0x14141414U,\n+    0xdedededeU, 0x5e5e5e5eU, 0x0b0b0b0bU, 0xdbdbdbdbU,\n+    0xe0e0e0e0U, 0x32323232U, 0x3a3a3a3aU, 0x0a0a0a0aU,\n+    0x49494949U, 0x06060606U, 0x24242424U, 0x5c5c5c5cU,\n+    0xc2c2c2c2U, 0xd3d3d3d3U, 0xacacacacU, 0x62626262U,\n+    0x91919191U, 0x95959595U, 0xe4e4e4e4U, 0x79797979U,\n+    0xe7e7e7e7U, 0xc8c8c8c8U, 0x37373737U, 0x6d6d6d6dU,\n+    0x8d8d8d8dU, 0xd5d5d5d5U, 0x4e4e4e4eU, 0xa9a9a9a9U,\n+    0x6c6c6c6cU, 0x56565656U, 0xf4f4f4f4U, 0xeaeaeaeaU,\n+    0x65656565U, 0x7a7a7a7aU, 0xaeaeaeaeU, 0x08080808U,\n+    0xbabababaU, 0x78787878U, 0x25252525U, 0x2e2e2e2eU,\n+    0x1c1c1c1cU, 0xa6a6a6a6U, 0xb4b4b4b4U, 0xc6c6c6c6U,\n+    0xe8e8e8e8U, 0xddddddddU, 0x74747474U, 0x1f1f1f1fU,\n+    0x4b4b4b4bU, 0xbdbdbdbdU, 0x8b8b8b8bU, 0x8a8a8a8aU,\n+    0x70707070U, 0x3e3e3e3eU, 0xb5b5b5b5U, 0x66666666U,\n+    0x48484848U, 0x03030303U, 0xf6f6f6f6U, 0x0e0e0e0eU,\n+    0x61616161U, 0x35353535U, 0x57575757U, 0xb9b9b9b9U,\n+    0x86868686U, 0xc1c1c1c1U, 0x1d1d1d1dU, 0x9e9e9e9eU,\n+    0xe1e1e1e1U, 0xf8f8f8f8U, 0x98989898U, 0x11111111U,\n+    0x69696969U, 0xd9d9d9d9U, 0x8e8e8e8eU, 0x94949494U,\n+    0x9b9b9b9bU, 0x1e1e1e1eU, 0x87878787U, 0xe9e9e9e9U,\n+    0xcecececeU, 0x55555555U, 0x28282828U, 0xdfdfdfdfU,\n+    0x8c8c8c8cU, 0xa1a1a1a1U, 0x89898989U, 0x0d0d0d0dU,\n+    0xbfbfbfbfU, 0xe6e6e6e6U, 0x42424242U, 0x68686868U,\n+    0x41414141U, 0x99999999U, 0x2d2d2d2dU, 0x0f0f0f0fU,\n+    0xb0b0b0b0U, 0x54545454U, 0xbbbbbbbbU, 0x16161616U,\n+};\n+\n+const uint32_t Td0[256] = {\n+    0x51f4a750U, 0x7e416553U, 0x1a17a4c3U, 0x3a275e96U,\n+    0x3bab6bcbU, 0x1f9d45f1U, 0xacfa58abU, 0x4be30393U,\n+    0x2030fa55U, 0xad766df6U, 0x88cc7691U, 0xf5024c25U,\n+    0x4fe5d7fcU, 0xc52acbd7U, 0x26354480U, 0xb562a38fU,\n+    0xdeb15a49U, 0x25ba1b67U, 0x45ea0e98U, 0x5dfec0e1U,\n+    0xc32f7502U, 0x814cf012U, 0x8d4697a3U, 0x6bd3f9c6U,\n+    0x038f5fe7U, 0x15929c95U, 0xbf6d7aebU, 0x955259daU,\n+    0xd4be832dU, 0x587421d3U, 0x49e06929U, 0x8ec9c844U,\n+    0x75c2896aU, 0xf48e7978U, 0x99583e6bU, 0x27b971ddU,\n+    0xbee14fb6U, 0xf088ad17U, 0xc920ac66U, 0x7dce3ab4U,\n+    0x63df4a18U, 0xe51a3182U, 0x97513360U, 0x62537f45U,\n+    0xb16477e0U, 0xbb6bae84U, 0xfe81a01cU, 0xf9082b94U,\n+    0x70486858U, 0x8f45fd19U, 0x94de6c87U, 0x527bf8b7U,\n+    0xab73d323U, 0x724b02e2U, 0xe31f8f57U, 0x6655ab2aU,\n+    0xb2eb2807U, 0x2fb5c203U, 0x86c57b9aU, 0xd33708a5U,\n+    0x302887f2U, 0x23bfa5b2U, 0x02036abaU, 0xed16825cU,\n+    0x8acf1c2bU, 0xa779b492U, 0xf307f2f0U, 0x4e69e2a1U,\n+    0x65daf4cdU, 0x0605bed5U, 0xd134621fU, 0xc4a6fe8aU,\n+    0x342e539dU, 0xa2f355a0U, 0x058ae132U, 0xa4f6eb75U,\n+    0x0b83ec39U, 0x4060efaaU, 0x5e719f06U, 0xbd6e1051U,\n+    0x3e218af9U, 0x96dd063dU, 0xdd3e05aeU, 0x4de6bd46U,\n+    0x91548db5U, 0x71c45d05U, 0x0406d46fU, 0x605015ffU,\n+    0x1998fb24U, 0xd6bde997U, 0x894043ccU, 0x67d99e77U,\n+    0xb0e842bdU, 0x07898b88U, 0xe7195b38U, 0x79c8eedbU,\n+    0xa17c0a47U, 0x7c420fe9U, 0xf8841ec9U, 0x00000000U,\n+    0x09808683U, 0x322bed48U, 0x1e1170acU, 0x6c5a724eU,\n+    0xfd0efffbU, 0x0f853856U, 0x3daed51eU, 0x362d3927U,\n+    0x0a0fd964U, 0x685ca621U, 0x9b5b54d1U, 0x24362e3aU,\n+    0x0c0a67b1U, 0x9357e70fU, 0xb4ee96d2U, 0x1b9b919eU,\n+    0x80c0c54fU, 0x61dc20a2U, 0x5a774b69U, 0x1c121a16U,\n+    0xe293ba0aU, 0xc0a02ae5U, 0x3c22e043U, 0x121b171dU,\n+    0x0e090d0bU, 0xf28bc7adU, 0x2db6a8b9U, 0x141ea9c8U,\n+    0x57f11985U, 0xaf75074cU, 0xee99ddbbU, 0xa37f60fdU,\n+    0xf701269fU, 0x5c72f5bcU, 0x44663bc5U, 0x5bfb7e34U,\n+    0x8b432976U, 0xcb23c6dcU, 0xb6edfc68U, 0xb8e4f163U,\n+    0xd731dccaU, 0x42638510U, 0x13972240U, 0x84c61120U,\n+    0x854a247dU, 0xd2bb3df8U, 0xaef93211U, 0xc729a16dU,\n+    0x1d9e2f4bU, 0xdcb230f3U, 0x0d8652ecU, 0x77c1e3d0U,\n+    0x2bb3166cU, 0xa970b999U, 0x119448faU, 0x47e96422U,\n+    0xa8fc8cc4U, 0xa0f03f1aU, 0x567d2cd8U, 0x223390efU,\n+    0x87494ec7U, 0xd938d1c1U, 0x8ccaa2feU, 0x98d40b36U,\n+    0xa6f581cfU, 0xa57ade28U, 0xdab78e26U, 0x3fadbfa4U,\n+    0x2c3a9de4U, 0x5078920dU, 0x6a5fcc9bU, 0x547e4662U,\n+    0xf68d13c2U, 0x90d8b8e8U, 0x2e39f75eU, 0x82c3aff5U,\n+    0x9f5d80beU, 0x69d0937cU, 0x6fd52da9U, 0xcf2512b3U,\n+    0xc8ac993bU, 0x10187da7U, 0xe89c636eU, 0xdb3bbb7bU,\n+    0xcd267809U, 0x6e5918f4U, 0xec9ab701U, 0x834f9aa8U,\n+    0xe6956e65U, 0xaaffe67eU, 0x21bccf08U, 0xef15e8e6U,\n+    0xbae79bd9U, 0x4a6f36ceU, 0xea9f09d4U, 0x29b07cd6U,\n+    0x31a4b2afU, 0x2a3f2331U, 0xc6a59430U, 0x35a266c0U,\n+    0x744ebc37U, 0xfc82caa6U, 0xe090d0b0U, 0x33a7d815U,\n+    0xf104984aU, 0x41ecdaf7U, 0x7fcd500eU, 0x1791f62fU,\n+    0x764dd68dU, 0x43efb04dU, 0xccaa4d54U, 0xe49604dfU,\n+    0x9ed1b5e3U, 0x4c6a881bU, 0xc12c1fb8U, 0x4665517fU,\n+    0x9d5eea04U, 0x018c355dU, 0xfa877473U, 0xfb0b412eU,\n+    0xb3671d5aU, 0x92dbd252U, 0xe9105633U, 0x6dd64713U,\n+    0x9ad7618cU, 0x37a10c7aU, 0x59f8148eU, 0xeb133c89U,\n+    0xcea927eeU, 0xb761c935U, 0xe11ce5edU, 0x7a47b13cU,\n+    0x9cd2df59U, 0x55f2733fU, 0x1814ce79U, 0x73c737bfU,\n+    0x53f7cdeaU, 0x5ffdaa5bU, 0xdf3d6f14U, 0x7844db86U,\n+    0xcaaff381U, 0xb968c43eU, 0x3824342cU, 0xc2a3405fU,\n+    0x161dc372U, 0xbce2250cU, 0x283c498bU, 0xff0d9541U,\n+    0x39a80171U, 0x080cb3deU, 0xd8b4e49cU, 0x6456c190U,\n+    0x7bcb8461U, 0xd532b670U, 0x486c5c74U, 0xd0b85742U,\n+};\n+\n+const uint32_t Td1[256] = {\n+    0x5051f4a7U, 0x537e4165U, 0xc31a17a4U, 0x963a275eU,\n+    0xcb3bab6bU, 0xf11f9d45U, 0xabacfa58U, 0x934be303U,\n+    0x552030faU, 0xf6ad766dU, 0x9188cc76U, 0x25f5024cU,\n+    0xfc4fe5d7U, 0xd7c52acbU, 0x80263544U, 0x8fb562a3U,\n+    0x49deb15aU, 0x6725ba1bU, 0x9845ea0eU, 0xe15dfec0U,\n+    0x02c32f75U, 0x12814cf0U, 0xa38d4697U, 0xc66bd3f9U,\n+    0xe7038f5fU, 0x9515929cU, 0xebbf6d7aU, 0xda955259U,\n+    0x2dd4be83U, 0xd3587421U, 0x2949e069U, 0x448ec9c8U,\n+    0x6a75c289U, 0x78f48e79U, 0x6b99583eU, 0xdd27b971U,\n+    0xb6bee14fU, 0x17f088adU, 0x66c920acU, 0xb47dce3aU,\n+    0x1863df4aU, 0x82e51a31U, 0x60975133U, 0x4562537fU,\n+    0xe0b16477U, 0x84bb6baeU, 0x1cfe81a0U, 0x94f9082bU,\n+    0x58704868U, 0x198f45fdU, 0x8794de6cU, 0xb7527bf8U,\n+    0x23ab73d3U, 0xe2724b02U, 0x57e31f8fU, 0x2a6655abU,\n+    0x07b2eb28U, 0x032fb5c2U, 0x9a86c57bU, 0xa5d33708U,\n+    0xf2302887U, 0xb223bfa5U, 0xba02036aU, 0x5ced1682U,\n+    0x2b8acf1cU, 0x92a779b4U, 0xf0f307f2U, 0xa14e69e2U,\n+    0xcd65daf4U, 0xd50605beU, 0x1fd13462U, 0x8ac4a6feU,\n+    0x9d342e53U, 0xa0a2f355U, 0x32058ae1U, 0x75a4f6ebU,\n+    0x390b83ecU, 0xaa4060efU, 0x065e719fU, 0x51bd6e10U,\n+    0xf93e218aU, 0x3d96dd06U, 0xaedd3e05U, 0x464de6bdU,\n+    0xb591548dU, 0x0571c45dU, 0x6f0406d4U, 0xff605015U,\n+    0x241998fbU, 0x97d6bde9U, 0xcc894043U, 0x7767d99eU,\n+    0xbdb0e842U, 0x8807898bU, 0x38e7195bU, 0xdb79c8eeU,\n+    0x47a17c0aU, 0xe97c420fU, 0xc9f8841eU, 0x00000000U,\n+    0x83098086U, 0x48322bedU, 0xac1e1170U, 0x4e6c5a72U,\n+    0xfbfd0effU, 0x560f8538U, 0x1e3daed5U, 0x27362d39U,\n+    0x640a0fd9U, 0x21685ca6U, 0xd19b5b54U, 0x3a24362eU,\n+    0xb10c0a67U, 0x0f9357e7U, 0xd2b4ee96U, 0x9e1b9b91U,\n+    0x4f80c0c5U, 0xa261dc20U, 0x695a774bU, 0x161c121aU,\n+    0x0ae293baU, 0xe5c0a02aU, 0x433c22e0U, 0x1d121b17U,\n+    0x0b0e090dU, 0xadf28bc7U, 0xb92db6a8U, 0xc8141ea9U,\n+    0x8557f119U, 0x4caf7507U, 0xbbee99ddU, 0xfda37f60U,\n+    0x9ff70126U, 0xbc5c72f5U, 0xc544663bU, 0x345bfb7eU,\n+    0x768b4329U, 0xdccb23c6U, 0x68b6edfcU, 0x63b8e4f1U,\n+    0xcad731dcU, 0x10426385U, 0x40139722U, 0x2084c611U,\n+    0x7d854a24U, 0xf8d2bb3dU, 0x11aef932U, 0x6dc729a1U,\n+    0x4b1d9e2fU, 0xf3dcb230U, 0xec0d8652U, 0xd077c1e3U,\n+    0x6c2bb316U, 0x99a970b9U, 0xfa119448U, 0x2247e964U,\n+    0xc4a8fc8cU, 0x1aa0f03fU, 0xd8567d2cU, 0xef223390U,\n+    0xc787494eU, 0xc1d938d1U, 0xfe8ccaa2U, 0x3698d40bU,\n+    0xcfa6f581U, 0x28a57adeU, 0x26dab78eU, 0xa43fadbfU,\n+    0xe42c3a9dU, 0x0d507892U, 0x9b6a5fccU, 0x62547e46U,\n+    0xc2f68d13U, 0xe890d8b8U, 0x5e2e39f7U, 0xf582c3afU,\n+    0xbe9f5d80U, 0x7c69d093U, 0xa96fd52dU, 0xb3cf2512U,\n+    0x3bc8ac99U, 0xa710187dU, 0x6ee89c63U, 0x7bdb3bbbU,\n+    0x09cd2678U, 0xf46e5918U, 0x01ec9ab7U, 0xa8834f9aU,\n+    0x65e6956eU, 0x7eaaffe6U, 0x0821bccfU, 0xe6ef15e8U,\n+    0xd9bae79bU, 0xce4a6f36U, 0xd4ea9f09U, 0xd629b07cU,\n+    0xaf31a4b2U, 0x312a3f23U, 0x30c6a594U, 0xc035a266U,\n+    0x37744ebcU, 0xa6fc82caU, 0xb0e090d0U, 0x1533a7d8U,\n+    0x4af10498U, 0xf741ecdaU, 0x0e7fcd50U, 0x2f1791f6U,\n+    0x8d764dd6U, 0x4d43efb0U, 0x54ccaa4dU, 0xdfe49604U,\n+    0xe39ed1b5U, 0x1b4c6a88U, 0xb8c12c1fU, 0x7f466551U,\n+    0x049d5eeaU, 0x5d018c35U, 0x73fa8774U, 0x2efb0b41U,\n+    0x5ab3671dU, 0x5292dbd2U, 0x33e91056U, 0x136dd647U,\n+    0x8c9ad761U, 0x7a37a10cU, 0x8e59f814U, 0x89eb133cU,\n+    0xeecea927U, 0x35b761c9U, 0xede11ce5U, 0x3c7a47b1U,\n+    0x599cd2dfU, 0x3f55f273U, 0x791814ceU, 0xbf73c737U,\n+    0xea53f7cdU, 0x5b5ffdaaU, 0x14df3d6fU, 0x867844dbU,\n+    0x81caaff3U, 0x3eb968c4U, 0x2c382434U, 0x5fc2a340U,\n+    0x72161dc3U, 0x0cbce225U, 0x8b283c49U, 0x41ff0d95U,\n+    0x7139a801U, 0xde080cb3U, 0x9cd8b4e4U, 0x906456c1U,\n+    0x617bcb84U, 0x70d532b6U, 0x74486c5cU, 0x42d0b857U,\n+};\n+\n+const uint32_t Td2[256] = {\n+    0xa75051f4U, 0x65537e41U, 0xa4c31a17U, 0x5e963a27U,\n+    0x6bcb3babU, 0x45f11f9dU, 0x58abacfaU, 0x03934be3U,\n+    0xfa552030U, 0x6df6ad76U, 0x769188ccU, 0x4c25f502U,\n+    0xd7fc4fe5U, 0xcbd7c52aU, 0x44802635U, 0xa38fb562U,\n+    0x5a49deb1U, 0x1b6725baU, 0x0e9845eaU, 0xc0e15dfeU,\n+    0x7502c32fU, 0xf012814cU, 0x97a38d46U, 0xf9c66bd3U,\n+    0x5fe7038fU, 0x9c951592U, 0x7aebbf6dU, 0x59da9552U,\n+    0x832dd4beU, 0x21d35874U, 0x692949e0U, 0xc8448ec9U,\n+    0x896a75c2U, 0x7978f48eU, 0x3e6b9958U, 0x71dd27b9U,\n+    0x4fb6bee1U, 0xad17f088U, 0xac66c920U, 0x3ab47dceU,\n+    0x4a1863dfU, 0x3182e51aU, 0x33609751U, 0x7f456253U,\n+    0x77e0b164U, 0xae84bb6bU, 0xa01cfe81U, 0x2b94f908U,\n+    0x68587048U, 0xfd198f45U, 0x6c8794deU, 0xf8b7527bU,\n+    0xd323ab73U, 0x02e2724bU, 0x8f57e31fU, 0xab2a6655U,\n+    0x2807b2ebU, 0xc2032fb5U, 0x7b9a86c5U, 0x08a5d337U,\n+    0x87f23028U, 0xa5b223bfU, 0x6aba0203U, 0x825ced16U,\n+    0x1c2b8acfU, 0xb492a779U, 0xf2f0f307U, 0xe2a14e69U,\n+    0xf4cd65daU, 0xbed50605U, 0x621fd134U, 0xfe8ac4a6U,\n+    0x539d342eU, 0x55a0a2f3U, 0xe132058aU, 0xeb75a4f6U,\n+    0xec390b83U, 0xefaa4060U, 0x9f065e71U, 0x1051bd6eU,\n+    0x8af93e21U, 0x063d96ddU, 0x05aedd3eU, 0xbd464de6U,\n+    0x8db59154U, 0x5d0571c4U, 0xd46f0406U, 0x15ff6050U,\n+    0xfb241998U, 0xe997d6bdU, 0x43cc8940U, 0x9e7767d9U,\n+    0x42bdb0e8U, 0x8b880789U, 0x5b38e719U, 0xeedb79c8U,\n+    0x0a47a17cU, 0x0fe97c42U, 0x1ec9f884U, 0x00000000U,\n+    0x86830980U, 0xed48322bU, 0x70ac1e11U, 0x724e6c5aU,\n+    0xfffbfd0eU, 0x38560f85U, 0xd51e3daeU, 0x3927362dU,\n+    0xd9640a0fU, 0xa621685cU, 0x54d19b5bU, 0x2e3a2436U,\n+    0x67b10c0aU, 0xe70f9357U, 0x96d2b4eeU, 0x919e1b9bU,\n+    0xc54f80c0U, 0x20a261dcU, 0x4b695a77U, 0x1a161c12U,\n+    0xba0ae293U, 0x2ae5c0a0U, 0xe0433c22U, 0x171d121bU,\n+    0x0d0b0e09U, 0xc7adf28bU, 0xa8b92db6U, 0xa9c8141eU,\n+    0x198557f1U, 0x074caf75U, 0xddbbee99U, 0x60fda37fU,\n+    0x269ff701U, 0xf5bc5c72U, 0x3bc54466U, 0x7e345bfbU,\n+    0x29768b43U, 0xc6dccb23U, 0xfc68b6edU, 0xf163b8e4U,\n+    0xdccad731U, 0x85104263U, 0x22401397U, 0x112084c6U,\n+    0x247d854aU, 0x3df8d2bbU, 0x3211aef9U, 0xa16dc729U,\n+    0x2f4b1d9eU, 0x30f3dcb2U, 0x52ec0d86U, 0xe3d077c1U,\n+    0x166c2bb3U, 0xb999a970U, 0x48fa1194U, 0x642247e9U,\n+    0x8cc4a8fcU, 0x3f1aa0f0U, 0x2cd8567dU, 0x90ef2233U,\n+    0x4ec78749U, 0xd1c1d938U, 0xa2fe8ccaU, 0x0b3698d4U,\n+    0x81cfa6f5U, 0xde28a57aU, 0x8e26dab7U, 0xbfa43fadU,\n+    0x9de42c3aU, 0x920d5078U, 0xcc9b6a5fU, 0x4662547eU,\n+    0x13c2f68dU, 0xb8e890d8U, 0xf75e2e39U, 0xaff582c3U,\n+    0x80be9f5dU, 0x937c69d0U, 0x2da96fd5U, 0x12b3cf25U,\n+    0x993bc8acU, 0x7da71018U, 0x636ee89cU, 0xbb7bdb3bU,\n+    0x7809cd26U, 0x18f46e59U, 0xb701ec9aU, 0x9aa8834fU,\n+    0x6e65e695U, 0xe67eaaffU, 0xcf0821bcU, 0xe8e6ef15U,\n+    0x9bd9bae7U, 0x36ce4a6fU, 0x09d4ea9fU, 0x7cd629b0U,\n+    0xb2af31a4U, 0x23312a3fU, 0x9430c6a5U, 0x66c035a2U,\n+    0xbc37744eU, 0xcaa6fc82U, 0xd0b0e090U, 0xd81533a7U,\n+    0x984af104U, 0xdaf741ecU, 0x500e7fcdU, 0xf62f1791U,\n+    0xd68d764dU, 0xb04d43efU, 0x4d54ccaaU, 0x04dfe496U,\n+    0xb5e39ed1U, 0x881b4c6aU, 0x1fb8c12cU, 0x517f4665U,\n+    0xea049d5eU, 0x355d018cU, 0x7473fa87U, 0x412efb0bU,\n+    0x1d5ab367U, 0xd25292dbU, 0x5633e910U, 0x47136dd6U,\n+    0x618c9ad7U, 0x0c7a37a1U, 0x148e59f8U, 0x3c89eb13U,\n+    0x27eecea9U, 0xc935b761U, 0xe5ede11cU, 0xb13c7a47U,\n+    0xdf599cd2U, 0x733f55f2U, 0xce791814U, 0x37bf73c7U,\n+    0xcdea53f7U, 0xaa5b5ffdU, 0x6f14df3dU, 0xdb867844U,\n+    0xf381caafU, 0xc43eb968U, 0x342c3824U, 0x405fc2a3U,\n+    0xc372161dU, 0x250cbce2U, 0x498b283cU, 0x9541ff0dU,\n+    0x017139a8U, 0xb3de080cU, 0xe49cd8b4U, 0xc1906456U,\n+    0x84617bcbU, 0xb670d532U, 0x5c74486cU, 0x5742d0b8U,\n+};\n+\n+const uint32_t Td3[256] = {\n+    0xf4a75051U, 0x4165537eU, 0x17a4c31aU, 0x275e963aU,\n+    0xab6bcb3bU, 0x9d45f11fU, 0xfa58abacU, 0xe303934bU,\n+    0x30fa5520U, 0x766df6adU, 0xcc769188U, 0x024c25f5U,\n+    0xe5d7fc4fU, 0x2acbd7c5U, 0x35448026U, 0x62a38fb5U,\n+    0xb15a49deU, 0xba1b6725U, 0xea0e9845U, 0xfec0e15dU,\n+    0x2f7502c3U, 0x4cf01281U, 0x4697a38dU, 0xd3f9c66bU,\n+    0x8f5fe703U, 0x929c9515U, 0x6d7aebbfU, 0x5259da95U,\n+    0xbe832dd4U, 0x7421d358U, 0xe0692949U, 0xc9c8448eU,\n+    0xc2896a75U, 0x8e7978f4U, 0x583e6b99U, 0xb971dd27U,\n+    0xe14fb6beU, 0x88ad17f0U, 0x20ac66c9U, 0xce3ab47dU,\n+    0xdf4a1863U, 0x1a3182e5U, 0x51336097U, 0x537f4562U,\n+    0x6477e0b1U, 0x6bae84bbU, 0x81a01cfeU, 0x082b94f9U,\n+    0x48685870U, 0x45fd198fU, 0xde6c8794U, 0x7bf8b752U,\n+    0x73d323abU, 0x4b02e272U, 0x1f8f57e3U, 0x55ab2a66U,\n+    0xeb2807b2U, 0xb5c2032fU, 0xc57b9a86U, 0x3708a5d3U,\n+    0x2887f230U, 0xbfa5b223U, 0x036aba02U, 0x16825cedU,\n+    0xcf1c2b8aU, 0x79b492a7U, 0x07f2f0f3U, 0x69e2a14eU,\n+    0xdaf4cd65U, 0x05bed506U, 0x34621fd1U, 0xa6fe8ac4U,\n+    0x2e539d34U, 0xf355a0a2U, 0x8ae13205U, 0xf6eb75a4U,\n+    0x83ec390bU, 0x60efaa40U, 0x719f065eU, 0x6e1051bdU,\n+    0x218af93eU, 0xdd063d96U, 0x3e05aeddU, 0xe6bd464dU,\n+    0x548db591U, 0xc45d0571U, 0x06d46f04U, 0x5015ff60U,\n+    0x98fb2419U, 0xbde997d6U, 0x4043cc89U, 0xd99e7767U,\n+    0xe842bdb0U, 0x898b8807U, 0x195b38e7U, 0xc8eedb79U,\n+    0x7c0a47a1U, 0x420fe97cU, 0x841ec9f8U, 0x00000000U,\n+    0x80868309U, 0x2bed4832U, 0x1170ac1eU, 0x5a724e6cU,\n+    0x0efffbfdU, 0x8538560fU, 0xaed51e3dU, 0x2d392736U,\n+    0x0fd9640aU, 0x5ca62168U, 0x5b54d19bU, 0x362e3a24U,\n+    0x0a67b10cU, 0x57e70f93U, 0xee96d2b4U, 0x9b919e1bU,\n+    0xc0c54f80U, 0xdc20a261U, 0x774b695aU, 0x121a161cU,\n+    0x93ba0ae2U, 0xa02ae5c0U, 0x22e0433cU, 0x1b171d12U,\n+    0x090d0b0eU, 0x8bc7adf2U, 0xb6a8b92dU, 0x1ea9c814U,\n+    0xf1198557U, 0x75074cafU, 0x99ddbbeeU, 0x7f60fda3U,\n+    0x01269ff7U, 0x72f5bc5cU, 0x663bc544U, 0xfb7e345bU,\n+    0x4329768bU, 0x23c6dccbU, 0xedfc68b6U, 0xe4f163b8U,\n+    0x31dccad7U, 0x63851042U, 0x97224013U, 0xc6112084U,\n+    0x4a247d85U, 0xbb3df8d2U, 0xf93211aeU, 0x29a16dc7U,\n+    0x9e2f4b1dU, 0xb230f3dcU, 0x8652ec0dU, 0xc1e3d077U,\n+    0xb3166c2bU, 0x70b999a9U, 0x9448fa11U, 0xe9642247U,\n+    0xfc8cc4a8U, 0xf03f1aa0U, 0x7d2cd856U, 0x3390ef22U,\n+    0x494ec787U, 0x38d1c1d9U, 0xcaa2fe8cU, 0xd40b3698U,\n+    0xf581cfa6U, 0x7ade28a5U, 0xb78e26daU, 0xadbfa43fU,\n+    0x3a9de42cU, 0x78920d50U, 0x5fcc9b6aU, 0x7e466254U,\n+    0x8d13c2f6U, 0xd8b8e890U, 0x39f75e2eU, 0xc3aff582U,\n+    0x5d80be9fU, 0xd0937c69U, 0xd52da96fU, 0x2512b3cfU,\n+    0xac993bc8U, 0x187da710U, 0x9c636ee8U, 0x3bbb7bdbU,\n+    0x267809cdU, 0x5918f46eU, 0x9ab701ecU, 0x4f9aa883U,\n+    0x956e65e6U, 0xffe67eaaU, 0xbccf0821U, 0x15e8e6efU,\n+    0xe79bd9baU, 0x6f36ce4aU, 0x9f09d4eaU, 0xb07cd629U,\n+    0xa4b2af31U, 0x3f23312aU, 0xa59430c6U, 0xa266c035U,\n+    0x4ebc3774U, 0x82caa6fcU, 0x90d0b0e0U, 0xa7d81533U,\n+    0x04984af1U, 0xecdaf741U, 0xcd500e7fU, 0x91f62f17U,\n+    0x4dd68d76U, 0xefb04d43U, 0xaa4d54ccU, 0x9604dfe4U,\n+    0xd1b5e39eU, 0x6a881b4cU, 0x2c1fb8c1U, 0x65517f46U,\n+    0x5eea049dU, 0x8c355d01U, 0x877473faU, 0x0b412efbU,\n+    0x671d5ab3U, 0xdbd25292U, 0x105633e9U, 0xd647136dU,\n+    0xd7618c9aU, 0xa10c7a37U, 0xf8148e59U, 0x133c89ebU,\n+    0xa927eeceU, 0x61c935b7U, 0x1ce5ede1U, 0x47b13c7aU,\n+    0xd2df599cU, 0xf2733f55U, 0x14ce7918U, 0xc737bf73U,\n+    0xf7cdea53U, 0xfdaa5b5fU, 0x3d6f14dfU, 0x44db8678U,\n+    0xaff381caU, 0x68c43eb9U, 0x24342c38U, 0xa3405fc2U,\n+    0x1dc37216U, 0xe2250cbcU, 0x3c498b28U, 0x0d9541ffU,\n+    0xa8017139U, 0x0cb3de08U, 0xb4e49cd8U, 0x56c19064U,\n+    0xcb84617bU, 0x32b670d5U, 0x6c5c7448U, 0xb85742d0U,\n+};\n+\n+const uint32_t Td4[256] = {\n+    0x52525252U, 0x09090909U, 0x6a6a6a6aU, 0xd5d5d5d5U,\n+    0x30303030U, 0x36363636U, 0xa5a5a5a5U, 0x38383838U,\n+    0xbfbfbfbfU, 0x40404040U, 0xa3a3a3a3U, 0x9e9e9e9eU,\n+    0x81818181U, 0xf3f3f3f3U, 0xd7d7d7d7U, 0xfbfbfbfbU,\n+    0x7c7c7c7cU, 0xe3e3e3e3U, 0x39393939U, 0x82828282U,\n+    0x9b9b9b9bU, 0x2f2f2f2fU, 0xffffffffU, 0x87878787U,\n+    0x34343434U, 0x8e8e8e8eU, 0x43434343U, 0x44444444U,\n+    0xc4c4c4c4U, 0xdedededeU, 0xe9e9e9e9U, 0xcbcbcbcbU,\n+    0x54545454U, 0x7b7b7b7bU, 0x94949494U, 0x32323232U,\n+    0xa6a6a6a6U, 0xc2c2c2c2U, 0x23232323U, 0x3d3d3d3dU,\n+    0xeeeeeeeeU, 0x4c4c4c4cU, 0x95959595U, 0x0b0b0b0bU,\n+    0x42424242U, 0xfafafafaU, 0xc3c3c3c3U, 0x4e4e4e4eU,\n+    0x08080808U, 0x2e2e2e2eU, 0xa1a1a1a1U, 0x66666666U,\n+    0x28282828U, 0xd9d9d9d9U, 0x24242424U, 0xb2b2b2b2U,\n+    0x76767676U, 0x5b5b5b5bU, 0xa2a2a2a2U, 0x49494949U,\n+    0x6d6d6d6dU, 0x8b8b8b8bU, 0xd1d1d1d1U, 0x25252525U,\n+    0x72727272U, 0xf8f8f8f8U, 0xf6f6f6f6U, 0x64646464U,\n+    0x86868686U, 0x68686868U, 0x98989898U, 0x16161616U,\n+    0xd4d4d4d4U, 0xa4a4a4a4U, 0x5c5c5c5cU, 0xccccccccU,\n+    0x5d5d5d5dU, 0x65656565U, 0xb6b6b6b6U, 0x92929292U,\n+    0x6c6c6c6cU, 0x70707070U, 0x48484848U, 0x50505050U,\n+    0xfdfdfdfdU, 0xededededU, 0xb9b9b9b9U, 0xdadadadaU,\n+    0x5e5e5e5eU, 0x15151515U, 0x46464646U, 0x57575757U,\n+    0xa7a7a7a7U, 0x8d8d8d8dU, 0x9d9d9d9dU, 0x84848484U,\n+    0x90909090U, 0xd8d8d8d8U, 0xababababU, 0x00000000U,\n+    0x8c8c8c8cU, 0xbcbcbcbcU, 0xd3d3d3d3U, 0x0a0a0a0aU,\n+    0xf7f7f7f7U, 0xe4e4e4e4U, 0x58585858U, 0x05050505U,\n+    0xb8b8b8b8U, 0xb3b3b3b3U, 0x45454545U, 0x06060606U,\n+    0xd0d0d0d0U, 0x2c2c2c2cU, 0x1e1e1e1eU, 0x8f8f8f8fU,\n+    0xcacacacaU, 0x3f3f3f3fU, 0x0f0f0f0fU, 0x02020202U,\n+    0xc1c1c1c1U, 0xafafafafU, 0xbdbdbdbdU, 0x03030303U,\n+    0x01010101U, 0x13131313U, 0x8a8a8a8aU, 0x6b6b6b6bU,\n+    0x3a3a3a3aU, 0x91919191U, 0x11111111U, 0x41414141U,\n+    0x4f4f4f4fU, 0x67676767U, 0xdcdcdcdcU, 0xeaeaeaeaU,\n+    0x97979797U, 0xf2f2f2f2U, 0xcfcfcfcfU, 0xcecececeU,\n+    0xf0f0f0f0U, 0xb4b4b4b4U, 0xe6e6e6e6U, 0x73737373U,\n+    0x96969696U, 0xacacacacU, 0x74747474U, 0x22222222U,\n+    0xe7e7e7e7U, 0xadadadadU, 0x35353535U, 0x85858585U,\n+    0xe2e2e2e2U, 0xf9f9f9f9U, 0x37373737U, 0xe8e8e8e8U,\n+    0x1c1c1c1cU, 0x75757575U, 0xdfdfdfdfU, 0x6e6e6e6eU,\n+    0x47474747U, 0xf1f1f1f1U, 0x1a1a1a1aU, 0x71717171U,\n+    0x1d1d1d1dU, 0x29292929U, 0xc5c5c5c5U, 0x89898989U,\n+    0x6f6f6f6fU, 0xb7b7b7b7U, 0x62626262U, 0x0e0e0e0eU,\n+    0xaaaaaaaaU, 0x18181818U, 0xbebebebeU, 0x1b1b1b1bU,\n+    0xfcfcfcfcU, 0x56565656U, 0x3e3e3e3eU, 0x4b4b4b4bU,\n+    0xc6c6c6c6U, 0xd2d2d2d2U, 0x79797979U, 0x20202020U,\n+    0x9a9a9a9aU, 0xdbdbdbdbU, 0xc0c0c0c0U, 0xfefefefeU,\n+    0x78787878U, 0xcdcdcdcdU, 0x5a5a5a5aU, 0xf4f4f4f4U,\n+    0x1f1f1f1fU, 0xddddddddU, 0xa8a8a8a8U, 0x33333333U,\n+    0x88888888U, 0x07070707U, 0xc7c7c7c7U, 0x31313131U,\n+    0xb1b1b1b1U, 0x12121212U, 0x10101010U, 0x59595959U,\n+    0x27272727U, 0x80808080U, 0xececececU, 0x5f5f5f5fU,\n+    0x60606060U, 0x51515151U, 0x7f7f7f7fU, 0xa9a9a9a9U,\n+    0x19191919U, 0xb5b5b5b5U, 0x4a4a4a4aU, 0x0d0d0d0dU,\n+    0x2d2d2d2dU, 0xe5e5e5e5U, 0x7a7a7a7aU, 0x9f9f9f9fU,\n+    0x93939393U, 0xc9c9c9c9U, 0x9c9c9c9cU, 0xefefefefU,\n+    0xa0a0a0a0U, 0xe0e0e0e0U, 0x3b3b3b3bU, 0x4d4d4d4dU,\n+    0xaeaeaeaeU, 0x2a2a2a2aU, 0xf5f5f5f5U, 0xb0b0b0b0U,\n+    0xc8c8c8c8U, 0xebebebebU, 0xbbbbbbbbU, 0x3c3c3c3cU,\n+    0x83838383U, 0x53535353U, 0x99999999U, 0x61616161U,\n+    0x17171717U, 0x2b2b2b2bU, 0x04040404U, 0x7e7e7e7eU,\n+    0xbabababaU, 0x77777777U, 0xd6d6d6d6U, 0x26262626U,\n+    0xe1e1e1e1U, 0x69696969U, 0x14141414U, 0x63636363U,\n+    0x55555555U, 0x21212121U, 0x0c0c0c0cU, 0x7d7d7d7dU,\n+};\n+\n+const uint32_t rcon[] = {\n+    0x01000000, 0x02000000, 0x04000000, 0x08000000,\n+    0x10000000, 0x20000000, 0x40000000, 0x80000000,\n+    0x1B000000, 0x36000000,\n+  /* for 128-bit blocks, Rijndael never uses more than 10 rcon values */\n+};\n+\n+/**\n+ * Expand the cipher key into the encryption key schedule.\n+ *\n+ * @return the number of rounds for the given cipher key size.\n+ */\n+int RijndaelSetupEncrypt(uint32_t* rk, const uint8_t* key, int keybits)\n+{\n+    int i = 0;\n+    uint32_t temp;\n+\n+    rk[0] = ReadBE32(key);\n+    rk[1] = ReadBE32(key + 4);\n+    rk[2] = ReadBE32(key + 8);\n+    rk[3] = ReadBE32(key + 12);\n+    if (keybits == 128) {\n+        for (;;) {\n+            temp = rk[3];\n+            rk[4] = rk[0] ^\n+                    (Te4[(temp >> 16) & 0xff] & 0xff000000) ^\n+                    (Te4[(temp >> 8) & 0xff] & 0x00ff0000) ^\n+                    (Te4[(temp)&0xff] & 0x0000ff00) ^\n+                    (Te4[(temp >> 24)] & 0x000000ff) ^\n+                    rcon[i];\n+            rk[5] = rk[1] ^ rk[4];\n+            rk[6] = rk[2] ^ rk[5];\n+            rk[7] = rk[3] ^ rk[6];\n+            if (++i == 10)\n+                return 10;\n+            rk += 4;\n+        }\n+    }\n+    rk[4] = ReadBE32(key + 16);\n+    rk[5] = ReadBE32(key + 20);\n+    if (keybits == 192) {\n+        for (;;) {\n+            temp = rk[5];\n+            rk[6] = rk[0] ^\n+                    (Te4[(temp >> 16) & 0xff] & 0xff000000) ^\n+                    (Te4[(temp >> 8) & 0xff] & 0x00ff0000) ^\n+                    (Te4[(temp)&0xff] & 0x0000ff00) ^\n+                    (Te4[(temp >> 24)] & 0x000000ff) ^\n+                    rcon[i];\n+            rk[7] = rk[1] ^ rk[6];\n+            rk[8] = rk[2] ^ rk[7];\n+            rk[9] = rk[3] ^ rk[8];\n+            if (++i == 8)\n+                return 12;\n+            rk[10] = rk[4] ^ rk[9];\n+            rk[11] = rk[5] ^ rk[10];\n+            rk += 6;\n+        }\n+    }\n+    rk[6] = ReadBE32(key + 24);\n+    rk[7] = ReadBE32(key + 28);\n+    if (keybits == 256) {\n+        for (;;) {\n+            temp = rk[7];\n+            rk[8] = rk[0] ^\n+                    (Te4[(temp >> 16) & 0xff] & 0xff000000) ^\n+                    (Te4[(temp >> 8) & 0xff] & 0x00ff0000) ^\n+                    (Te4[(temp)&0xff] & 0x0000ff00) ^\n+                    (Te4[(temp >> 24)] & 0x000000ff) ^\n+                    rcon[i];\n+            rk[9] = rk[1] ^ rk[8];\n+            rk[10] = rk[2] ^ rk[9];\n+            rk[11] = rk[3] ^ rk[10];\n+            if (++i == 7)\n+                return 14;\n+            temp = rk[11];\n+            rk[12] = rk[4] ^\n+                     (Te4[(temp >> 24)] & 0xff000000) ^\n+                     (Te4[(temp >> 16) & 0xff] & 0x00ff0000) ^\n+                     (Te4[(temp >> 8) & 0xff] & 0x0000ff00) ^\n+                     (Te4[(temp)&0xff] & 0x000000ff);\n+            rk[13] = rk[5] ^ rk[12];\n+            rk[14] = rk[6] ^ rk[13];\n+            rk[15] = rk[7] ^ rk[14];\n+            rk += 8;\n+        }\n+    }\n+    return 0;\n+}\n+\n+/**\n+ * Expand the cipher key into the decryption key schedule.\n+ *\n+ * @return the number of rounds for the given cipher key size.\n+ */\n+void RijndaelSetupDecrypt(uint32_t* rk, const uint8_t* key, int keybits)\n+{\n+    int nrounds, i, j;\n+    uint32_t temp;\n+\n+    /* expand the cipher key: */\n+    nrounds = RijndaelSetupEncrypt(rk, key, keybits);\n+    /* invert the order of the round keys: */\n+    for (i = 0, j = 4 * nrounds; i < j; i += 4, j -= 4) {\n+        temp = rk[i];\n+        rk[i] = rk[j];\n+        rk[j] = temp;\n+        temp = rk[i + 1];\n+        rk[i + 1] = rk[j + 1];\n+        rk[j + 1] = temp;\n+        temp = rk[i + 2];\n+        rk[i + 2] = rk[j + 2];\n+        rk[j + 2] = temp;\n+        temp = rk[i + 3];\n+        rk[i + 3] = rk[j + 3];\n+        rk[j + 3] = temp;\n+    }\n+    /* apply the inverse MixColumn transform to all round keys but the first and the last: */\n+    for (i = 1; i < nrounds; i++) {\n+        rk += 4;\n+        rk[0] =\n+            Td0[Te4[(rk[0] >> 24)] & 0xff] ^\n+            Td1[Te4[(rk[0] >> 16) & 0xff] & 0xff] ^\n+            Td2[Te4[(rk[0] >> 8) & 0xff] & 0xff] ^\n+            Td3[Te4[(rk[0]) & 0xff] & 0xff];\n+        rk[1] =\n+            Td0[Te4[(rk[1] >> 24)] & 0xff] ^\n+            Td1[Te4[(rk[1] >> 16) & 0xff] & 0xff] ^\n+            Td2[Te4[(rk[1] >> 8) & 0xff] & 0xff] ^\n+            Td3[Te4[(rk[1]) & 0xff] & 0xff];\n+        rk[2] =\n+            Td0[Te4[(rk[2] >> 24)] & 0xff] ^\n+            Td1[Te4[(rk[2] >> 16) & 0xff] & 0xff] ^\n+            Td2[Te4[(rk[2] >> 8) & 0xff] & 0xff] ^\n+            Td3[Te4[(rk[2]) & 0xff] & 0xff];\n+        rk[3] =\n+            Td0[Te4[(rk[3] >> 24)] & 0xff] ^\n+            Td1[Te4[(rk[3] >> 16) & 0xff] & 0xff] ^\n+            Td2[Te4[(rk[3] >> 8) & 0xff] & 0xff] ^\n+            Td3[Te4[(rk[3]) & 0xff] & 0xff];\n+    }\n+}\n+\n+void RijndaelEncrypt(const uint32_t* rk, int nrounds, const uint8_t plaintext[16], uint8_t ciphertext[16])\n+{\n+    uint32_t s0, s1, s2, s3, t0, t1, t2, t3;\n+    /*\n+     * map byte array block to cipher state\n+     * and add initial round key:\n+     */\n+    s0 = ReadBE32(plaintext) ^ rk[0];\n+    s1 = ReadBE32(plaintext + 4) ^ rk[1];\n+    s2 = ReadBE32(plaintext + 8) ^ rk[2];\n+    s3 = ReadBE32(plaintext + 12) ^ rk[3];\n+    /* round 1: */\n+    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >> 8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[4];\n+    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >> 8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[5];\n+    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >> 8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[6];\n+    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >> 8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[7];\n+    /* round 2: */\n+    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >> 8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[8];\n+    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >> 8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[9];\n+    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >> 8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[10];\n+    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >> 8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[11];\n+    /* round 3: */\n+    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >> 8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[12];\n+    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >> 8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[13];\n+    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >> 8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[14];\n+    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >> 8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[15];\n+    /* round 4: */\n+    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >> 8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[16];\n+    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >> 8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[17];\n+    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >> 8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[18];\n+    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >> 8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[19];\n+    /* round 5: */\n+    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >> 8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[20];\n+    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >> 8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[21];\n+    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >> 8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[22];\n+    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >> 8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[23];\n+    /* round 6: */\n+    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >> 8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[24];\n+    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >> 8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[25];\n+    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >> 8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[26];\n+    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >> 8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[27];\n+    /* round 7: */\n+    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >> 8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[28];\n+    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >> 8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[29];\n+    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >> 8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[30];\n+    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >> 8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[31];\n+    /* round 8: */\n+    s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >> 8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[32];\n+    s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >> 8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[33];\n+    s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >> 8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[34];\n+    s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >> 8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[35];\n+    /* round 9: */\n+    t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >> 8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[36];\n+    t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >> 8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[37];\n+    t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >> 8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[38];\n+    t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >> 8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[39];\n+    if (nrounds > 10) {\n+        /* round 10: */\n+        s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >> 8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[40];\n+        s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >> 8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[41];\n+        s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >> 8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[42];\n+        s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >> 8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[43];\n+        /* round 11: */\n+        t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >> 8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[44];\n+        t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >> 8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[45];\n+        t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >> 8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[46];\n+        t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >> 8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[47];\n+        if (nrounds > 12) {\n+            /* round 12: */\n+            s0 = Te0[t0 >> 24] ^ Te1[(t1 >> 16) & 0xff] ^ Te2[(t2 >> 8) & 0xff] ^ Te3[t3 & 0xff] ^ rk[48];\n+            s1 = Te0[t1 >> 24] ^ Te1[(t2 >> 16) & 0xff] ^ Te2[(t3 >> 8) & 0xff] ^ Te3[t0 & 0xff] ^ rk[49];\n+            s2 = Te0[t2 >> 24] ^ Te1[(t3 >> 16) & 0xff] ^ Te2[(t0 >> 8) & 0xff] ^ Te3[t1 & 0xff] ^ rk[50];\n+            s3 = Te0[t3 >> 24] ^ Te1[(t0 >> 16) & 0xff] ^ Te2[(t1 >> 8) & 0xff] ^ Te3[t2 & 0xff] ^ rk[51];\n+            /* round 13: */\n+            t0 = Te0[s0 >> 24] ^ Te1[(s1 >> 16) & 0xff] ^ Te2[(s2 >> 8) & 0xff] ^ Te3[s3 & 0xff] ^ rk[52];\n+            t1 = Te0[s1 >> 24] ^ Te1[(s2 >> 16) & 0xff] ^ Te2[(s3 >> 8) & 0xff] ^ Te3[s0 & 0xff] ^ rk[53];\n+            t2 = Te0[s2 >> 24] ^ Te1[(s3 >> 16) & 0xff] ^ Te2[(s0 >> 8) & 0xff] ^ Te3[s1 & 0xff] ^ rk[54];\n+            t3 = Te0[s3 >> 24] ^ Te1[(s0 >> 16) & 0xff] ^ Te2[(s1 >> 8) & 0xff] ^ Te3[s2 & 0xff] ^ rk[55];\n+        }\n+    }\n+    rk += nrounds << 2;\n+\n+    /*\n+     * apply last round and\n+     * map cipher state to byte array block:\n+     */\n+    s0 =\n+        (Te4[(t0 >> 24)] & 0xff000000) ^\n+        (Te4[(t1 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Te4[(t2 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Te4[(t3)&0xff] & 0x000000ff) ^\n+        rk[0];\n+    WriteBE32(ciphertext, s0);\n+    s1 =\n+        (Te4[(t1 >> 24)] & 0xff000000) ^\n+        (Te4[(t2 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Te4[(t3 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Te4[(t0)&0xff] & 0x000000ff) ^\n+        rk[1];\n+    WriteBE32(ciphertext + 4, s1);\n+    s2 =\n+        (Te4[(t2 >> 24)] & 0xff000000) ^\n+        (Te4[(t3 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Te4[(t0 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Te4[(t1)&0xff] & 0x000000ff) ^\n+        rk[2];\n+    WriteBE32(ciphertext + 8, s2);\n+    s3 =\n+        (Te4[(t3 >> 24)] & 0xff000000) ^\n+        (Te4[(t0 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Te4[(t1 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Te4[(t2)&0xff] & 0x000000ff) ^\n+        rk[3];\n+    WriteBE32(ciphertext + 12, s3);\n+}\n+\n+void RijndaelDecrypt(const uint32_t* rk, int nrounds, const uint8_t ciphertext[16], uint8_t plaintext[16])\n+{\n+    uint32_t s0, s1, s2, s3, t0, t1, t2, t3;\n+\n+    /*\n+     * map byte array block to cipher state\n+     * and add initial round key:\n+     */\n+    s0 = ReadBE32(ciphertext) ^ rk[0];\n+    s1 = ReadBE32(ciphertext + 4) ^ rk[1];\n+    s2 = ReadBE32(ciphertext + 8) ^ rk[2];\n+    s3 = ReadBE32(ciphertext + 12) ^ rk[3];\n+    /* round 1: */\n+    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >> 8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[4];\n+    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >> 8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[5];\n+    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >> 8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[6];\n+    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >> 8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[7];\n+    /* round 2: */\n+    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >> 8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[8];\n+    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >> 8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[9];\n+    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >> 8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[10];\n+    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >> 8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[11];\n+    /* round 3: */\n+    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >> 8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[12];\n+    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >> 8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[13];\n+    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >> 8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[14];\n+    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >> 8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[15];\n+    /* round 4: */\n+    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >> 8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[16];\n+    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >> 8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[17];\n+    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >> 8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[18];\n+    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >> 8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[19];\n+    /* round 5: */\n+    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >> 8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[20];\n+    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >> 8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[21];\n+    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >> 8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[22];\n+    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >> 8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[23];\n+    /* round 6: */\n+    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >> 8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[24];\n+    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >> 8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[25];\n+    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >> 8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[26];\n+    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >> 8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[27];\n+    /* round 7: */\n+    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >> 8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[28];\n+    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >> 8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[29];\n+    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >> 8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[30];\n+    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >> 8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[31];\n+    /* round 8: */\n+    s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >> 8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[32];\n+    s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >> 8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[33];\n+    s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >> 8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[34];\n+    s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >> 8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[35];\n+    /* round 9: */\n+    t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >> 8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[36];\n+    t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >> 8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[37];\n+    t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >> 8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[38];\n+    t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >> 8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[39];\n+    if (nrounds > 10) {\n+        /* round 10: */\n+        s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >> 8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[40];\n+        s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >> 8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[41];\n+        s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >> 8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[42];\n+        s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >> 8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[43];\n+        /* round 11: */\n+        t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >> 8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[44];\n+        t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >> 8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[45];\n+        t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >> 8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[46];\n+        t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >> 8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[47];\n+        if (nrounds > 12) {\n+            /* round 12: */\n+            s0 = Td0[t0 >> 24] ^ Td1[(t3 >> 16) & 0xff] ^ Td2[(t2 >> 8) & 0xff] ^ Td3[t1 & 0xff] ^ rk[48];\n+            s1 = Td0[t1 >> 24] ^ Td1[(t0 >> 16) & 0xff] ^ Td2[(t3 >> 8) & 0xff] ^ Td3[t2 & 0xff] ^ rk[49];\n+            s2 = Td0[t2 >> 24] ^ Td1[(t1 >> 16) & 0xff] ^ Td2[(t0 >> 8) & 0xff] ^ Td3[t3 & 0xff] ^ rk[50];\n+            s3 = Td0[t3 >> 24] ^ Td1[(t2 >> 16) & 0xff] ^ Td2[(t1 >> 8) & 0xff] ^ Td3[t0 & 0xff] ^ rk[51];\n+            /* round 13: */\n+            t0 = Td0[s0 >> 24] ^ Td1[(s3 >> 16) & 0xff] ^ Td2[(s2 >> 8) & 0xff] ^ Td3[s1 & 0xff] ^ rk[52];\n+            t1 = Td0[s1 >> 24] ^ Td1[(s0 >> 16) & 0xff] ^ Td2[(s3 >> 8) & 0xff] ^ Td3[s2 & 0xff] ^ rk[53];\n+            t2 = Td0[s2 >> 24] ^ Td1[(s1 >> 16) & 0xff] ^ Td2[(s0 >> 8) & 0xff] ^ Td3[s3 & 0xff] ^ rk[54];\n+            t3 = Td0[s3 >> 24] ^ Td1[(s2 >> 16) & 0xff] ^ Td2[(s1 >> 8) & 0xff] ^ Td3[s0 & 0xff] ^ rk[55];\n+        }\n+    }\n+    rk += nrounds << 2;\n+\n+    /*\n+    * apply last round and\n+    * map cipher state to byte array block:\n+    */\n+    s0 =\n+        (Td4[(t0 >> 24)] & 0xff000000) ^\n+        (Td4[(t3 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Td4[(t2 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Td4[(t1)&0xff] & 0x000000ff) ^\n+        rk[0];\n+    WriteBE32(plaintext, s0);\n+    s1 =\n+        (Td4[(t1 >> 24)] & 0xff000000) ^\n+        (Td4[(t0 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Td4[(t3 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Td4[(t2)&0xff] & 0x000000ff) ^\n+        rk[1];\n+    WriteBE32(plaintext + 4, s1);\n+    s2 =\n+        (Td4[(t2 >> 24)] & 0xff000000) ^\n+        (Td4[(t1 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Td4[(t0 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Td4[(t3)&0xff] & 0x000000ff) ^\n+        rk[2];\n+    WriteBE32(plaintext + 8, s2);\n+    s3 =\n+        (Td4[(t3 >> 24)] & 0xff000000) ^\n+        (Td4[(t2 >> 16) & 0xff] & 0x00ff0000) ^\n+        (Td4[(t1 >> 8) & 0xff] & 0x0000ff00) ^\n+        (Td4[(t0)&0xff] & 0x000000ff) ^\n+        rk[3];\n+    WriteBE32(plaintext + 12, s3);\n+}\n+}\n+\n+AES128Encrypt::AES128Encrypt(const unsigned char key[16])\n+{\n+    RijndaelSetupEncrypt(rk, key, 128);\n+}\n+\n+AES128Encrypt::~AES128Encrypt()\n+{\n+    memset(rk, 0, sizeof(rk));\n+}\n+\n+void AES128Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    RijndaelEncrypt(rk, 10, plaintext, ciphertext);\n+}\n+\n+AES128Decrypt::AES128Decrypt(const unsigned char key[16])\n+{\n+    RijndaelSetupDecrypt(rk, key, 128);\n+}\n+\n+AES128Decrypt::~AES128Decrypt()\n+{\n+    memset(rk, 0, sizeof(rk));\n+}\n+\n+void AES128Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n+{\n+    RijndaelDecrypt(rk, 10, ciphertext, plaintext);\n+}\n+\n+AES256Encrypt::AES256Encrypt(const unsigned char key[32])\n+{\n+    RijndaelSetupEncrypt(rk, key, 256);\n+}\n+\n+AES256Encrypt::~AES256Encrypt()\n+{\n+    memset(rk, 0, sizeof(rk));\n+}\n+\n+void AES256Encrypt::Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const\n+{\n+    RijndaelEncrypt(rk, 14, plaintext, ciphertext);\n+}\n+\n+AES256Decrypt::AES256Decrypt(const unsigned char key[32])\n+{\n+    RijndaelSetupDecrypt(rk, key, 256);\n+}\n+\n+AES256Decrypt::~AES256Decrypt()\n+{\n+    memset(rk, 0, sizeof(rk));\n+}\n+\n+void AES256Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const\n+{\n+    RijndaelDecrypt(rk, 14, ciphertext, plaintext);\n+}\n+"
      },
      {
        "sha": "94e94a4feddcf929f48c2ea8cca8addc4d26bd4c",
        "filename": "src/crypto/aes.h",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86707bfe098c9297edd96480c94433624567c32b/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86707bfe098c9297edd96480c94433624567c32b/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=86707bfe098c9297edd96480c94433624567c32b",
        "patch": "@@ -0,0 +1,58 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_AES_H\n+#define BITCOIN_CRYPTO_AES_H\n+\n+#include <stdint.h>\n+\n+/** An encryption class for AES-128. */\n+class AES128Encrypt\n+{\n+private:\n+    uint32_t rk[44];\n+\n+public:\n+    AES128Encrypt(const unsigned char key[16]);\n+    ~AES128Encrypt();\n+    void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n+};\n+\n+/** A decryption class for AES-128. */\n+class AES128Decrypt\n+{\n+private:\n+    uint32_t rk[44];\n+\n+public:\n+    AES128Decrypt(const unsigned char key[16]);\n+    ~AES128Decrypt();\n+    void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n+};\n+\n+/** An encryption class for AES-256. */\n+class AES256Encrypt\n+{\n+private:\n+    uint32_t rk[60];\n+\n+public:\n+    AES256Encrypt(const unsigned char key[32]);\n+    ~AES256Encrypt();\n+    void Encrypt(unsigned char ciphertext[16], const unsigned char plaintext[16]) const;\n+};\n+\n+/** A decryption class for AES-256. */\n+class AES256Decrypt\n+{\n+private:\n+    uint32_t rk[60];\n+\n+public:\n+    AES256Decrypt(const unsigned char key[32]);\n+    ~AES256Decrypt();\n+    void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n+};\n+\n+#endif // BITCOIN_CRYPTO_AES_H"
      },
      {
        "sha": "9fa593df8cbad8ca5ad7b8f7ff11167f9dae6c67",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86707bfe098c9297edd96480c94433624567c32b/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86707bfe098c9297edd96480c94433624567c32b/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=86707bfe098c9297edd96480c94433624567c32b",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"crypto/aes.h\"\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha256.h\"\n@@ -248,4 +249,34 @@ BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n                    \"b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58\");\n }\n \n+BOOST_AUTO_TEST_CASE(aes_testvectors) {\n+    // AES test vectors from FIPS 197.\n+\n+    const static unsigned char key128[16] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f};\n+    // const static unsigned char key192[24] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17};\n+    const static unsigned char key256[32] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f};\n+    const static unsigned char plain[16] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff};\n+    const static unsigned char cipher128[16] = {0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30, 0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a};\n+    // const static unsigned char cipher192[16] = {0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0, 0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91};\n+    const static unsigned char cipher256[16] = {0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf, 0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89};\n+\n+    unsigned char buf[16];\n+\n+    AES128Encrypt enc128(key128);\n+    enc128.Encrypt(buf, plain);\n+    BOOST_CHECK(memcmp(buf, cipher128, sizeof(buf)) == 0);\n+\n+    AES128Decrypt dec128(key128);\n+    dec128.Decrypt(buf, cipher128);\n+    BOOST_CHECK(memcmp(buf, plain, sizeof(buf)) == 0);\n+\n+    AES256Encrypt enc256(key256);\n+    enc256.Encrypt(buf, plain);\n+    BOOST_CHECK(memcmp(buf, cipher256, sizeof(buf)) == 0);\n+\n+    AES256Decrypt dec256(key256);\n+    dec256.Decrypt(buf, cipher256);\n+    BOOST_CHECK(memcmp(buf, plain, sizeof(buf)) == 0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTA0ZDdjODBmNmQzNWYyY2ZkMzYzYzEyYmQ3ODM0OWFiYTQ5YTdm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-20T04:49:13Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:30:54Z"
      },
      "message": "crypto: add AES 128/256 CBC classes\n\nThe output should always match openssl's, even for failed operations. Even for\na decrypt with broken padding, the output is always deterministic (and attemtps\nto be constant-time).",
      "tree": {
        "sha": "820988387edc11fd62a138763e84d977cad36617",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/820988387edc11fd62a138763e84d977cad36617"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86707bfe098c9297edd96480c94433624567c32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86707bfe098c9297edd96480c94433624567c32b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86707bfe098c9297edd96480c94433624567c32b"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 199,
      "deletions": 0
    },
    "files": [
      {
        "sha": "77763031feeb51fb41946265b10db9aa60104350",
        "filename": "src/crypto/aes.cpp",
        "status": "modified",
        "additions": 143,
        "deletions": 0,
        "changes": 143,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f/src/crypto/aes.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f/src/crypto/aes.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.cpp?ref=ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
        "patch": "@@ -1121,3 +1121,146 @@ void AES256Decrypt::Decrypt(unsigned char plaintext[16], const unsigned char cip\n     RijndaelDecrypt(rk, 14, ciphertext, plaintext);\n }\n \n+\n+template <typename T>\n+static int CBCEncrypt(const T& enc, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)\n+{\n+    int written = 0;\n+    int padsize = size % AES_BLOCKSIZE;\n+    unsigned char mixed[AES_BLOCKSIZE];\n+\n+    if (!data || !size || !out)\n+        return 0;\n+\n+    if (!pad && padsize != 0)\n+        return 0;\n+\n+    memcpy(mixed, iv, AES_BLOCKSIZE);\n+\n+    // Write all but the last block\n+    while (written + AES_BLOCKSIZE <= size) {\n+        for (int i = 0; i != AES_BLOCKSIZE; i++)\n+            mixed[i] ^= *data++;\n+        enc.Encrypt(out + written, mixed);\n+        memcpy(mixed, out + written, AES_BLOCKSIZE);\n+        written += AES_BLOCKSIZE;\n+    }\n+    if (pad) {\n+        // For all that remains, pad each byte with the value of the remaining\n+        // space. If there is none, pad by a full block.\n+        for (int i = 0; i != padsize; i++)\n+            mixed[i] ^= *data++;\n+        for (int i = padsize; i != AES_BLOCKSIZE; i++)\n+            mixed[i] ^= AES_BLOCKSIZE - padsize;\n+        enc.Encrypt(out + written, mixed);\n+        written += AES_BLOCKSIZE;\n+    }\n+    return written;\n+}\n+\n+template <typename T>\n+static int CBCDecrypt(const T& dec, const unsigned char iv[AES_BLOCKSIZE], const unsigned char* data, int size, bool pad, unsigned char* out)\n+{\n+    unsigned char padsize = 0;\n+    int written = 0;\n+    bool fail = false;\n+    const unsigned char* prev = iv;\n+\n+    if (!data || !size || !out)\n+        return 0;\n+\n+    if (size % AES_BLOCKSIZE != 0)\n+        return 0;\n+\n+    // Decrypt all data. Padding will be checked in the output.\n+    while (written != size) {\n+        dec.Decrypt(out, data + written);\n+        for (int i = 0; i != AES_BLOCKSIZE; i++)\n+            *out++ ^= prev[i];\n+        prev = data + written;\n+        written += AES_BLOCKSIZE;\n+    }\n+\n+    // When decrypting padding, attempt to run in constant-time\n+    if (pad) {\n+        // If used, padding size is the value of the last decrypted byte. For\n+        // it to be valid, It must be between 1 and AES_BLOCKSIZE.\n+        padsize = *--out;\n+        fail = !padsize | (padsize > AES_BLOCKSIZE);\n+\n+        // If not well-formed, treat it as though there's no padding.\n+        padsize *= !fail;\n+\n+        // All padding must equal the last byte otherwise it's not well-formed\n+        for (int i = AES_BLOCKSIZE; i != 0; i--)\n+            fail |= ((i > AES_BLOCKSIZE - padsize) & (*out-- != padsize));\n+\n+        written -= padsize;\n+    }\n+    return written * !fail;\n+}\n+\n+AES256CBCEncrypt::AES256CBCEncrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : enc(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+int AES256CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCEncrypt(enc, iv, data, size, pad, out);\n+}\n+\n+AES256CBCEncrypt::~AES256CBCEncrypt()\n+{\n+    memset(iv, 0, sizeof(iv));\n+}\n+\n+AES256CBCDecrypt::AES256CBCDecrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : dec(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+\n+int AES256CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCDecrypt(dec, iv, data, size, pad, out);\n+}\n+\n+AES256CBCDecrypt::~AES256CBCDecrypt()\n+{\n+    memset(iv, 0, sizeof(iv));\n+}\n+\n+AES128CBCEncrypt::AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : enc(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+AES128CBCEncrypt::~AES128CBCEncrypt()\n+{\n+    memset(iv, 0, AES_BLOCKSIZE);\n+}\n+\n+int AES128CBCEncrypt::Encrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCEncrypt(enc, iv, data, size, pad, out);\n+}\n+\n+AES128CBCDecrypt::AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn)\n+    : dec(key), pad(padIn)\n+{\n+    memcpy(iv, ivIn, AES_BLOCKSIZE);\n+}\n+\n+AES128CBCDecrypt::~AES128CBCDecrypt()\n+{\n+    memset(iv, 0, AES_BLOCKSIZE);\n+}\n+\n+int AES128CBCDecrypt::Decrypt(const unsigned char* data, int size, unsigned char* out) const\n+{\n+    return CBCDecrypt(dec, iv, data, size, pad, out);\n+}"
      },
      {
        "sha": "0e79ac4101635159fcfb552b06649687fdc849c2",
        "filename": "src/crypto/aes.h",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f/src/crypto/aes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f/src/crypto/aes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/aes.h?ref=ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
        "patch": "@@ -7,6 +7,10 @@\n \n #include <stdint.h>\n \n+static const int AES_BLOCKSIZE = 16;\n+static const int AES128_KEYSIZE = 16;\n+static const int AES256_KEYSIZE = 32;\n+\n /** An encryption class for AES-128. */\n class AES128Encrypt\n {\n@@ -55,4 +59,56 @@ class AES256Decrypt\n     void Decrypt(unsigned char plaintext[16], const unsigned char ciphertext[16]) const;\n };\n \n+class AES256CBCEncrypt\n+{\n+public:\n+    AES256CBCEncrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES256CBCEncrypt();\n+    int Encrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES256Encrypt enc;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n+class AES256CBCDecrypt\n+{\n+public:\n+    AES256CBCDecrypt(const unsigned char key[AES256_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES256CBCDecrypt();\n+    int Decrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES256Decrypt dec;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n+class AES128CBCEncrypt\n+{\n+public:\n+    AES128CBCEncrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES128CBCEncrypt();\n+    int Encrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES128Encrypt enc;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n+class AES128CBCDecrypt\n+{\n+public:\n+    AES128CBCDecrypt(const unsigned char key[AES128_KEYSIZE], const unsigned char ivIn[AES_BLOCKSIZE], bool padIn);\n+    ~AES128CBCDecrypt();\n+    int Decrypt(const unsigned char* data, int size, unsigned char* out) const;\n+\n+private:\n+    const AES128Decrypt dec;\n+    const bool pad;\n+    unsigned char iv[AES_BLOCKSIZE];\n+};\n+\n #endif // BITCOIN_CRYPTO_AES_H"
      }
    ]
  },
  {
    "sha": "0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDNkMmRmMGViYjJlMmY2MDRkYzY1NTU4MDQ0Y2ZkYzBiMGUzNDk1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-20T04:52:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:31:00Z"
      },
      "message": "crypto: add aes cbc tests",
      "tree": {
        "sha": "aaaf88ecad6b3aa5e631136da0ed60d1cbff5bf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaaf88ecad6b3aa5e631136da0ed60d1cbff5bf2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce04d7c80f6d35f2cfd363c12bd78349aba49a7f"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 135,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dbbf319952f653b6eb5d26a4353a04e774346a06",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 135,
        "deletions": 0,
        "changes": 135,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495",
        "patch": "@@ -17,6 +17,8 @@\n \n #include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <openssl/aes.h>\n+#include <openssl/evp.h>\n \n BOOST_FIXTURE_TEST_SUITE(crypto_tests, BasicTestingSetup)\n \n@@ -64,6 +66,88 @@ void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const s\n     TestVector(CHMAC_SHA512(&key[0], key.size()), ParseHex(hexin), ParseHex(hexout));\n }\n \n+void TestAES128CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n+{\n+    std::vector<unsigned char> key = ParseHex(hexkey);\n+    std::vector<unsigned char> iv = ParseHex(hexiv);\n+    std::vector<unsigned char> in = ParseHex(hexin);\n+    std::vector<unsigned char> correctout = ParseHex(hexout);\n+    std::vector<unsigned char> realout(in.size() + AES_BLOCKSIZE);\n+\n+    // Encrypt the plaintext and verify that it equals the cipher\n+    AES128CBCEncrypt enc(&key[0], &iv[0], pad);\n+    int size = enc.Encrypt(&in[0], in.size(), &realout[0]);\n+    realout.resize(size);\n+    BOOST_CHECK(realout.size() == correctout.size());\n+    BOOST_CHECK_MESSAGE(realout == correctout, HexStr(realout) + std::string(\" != \") + hexout);\n+\n+    // Decrypt the cipher and verify that it equals the plaintext\n+    std::vector<unsigned char> decrypted(correctout.size());\n+    AES128CBCDecrypt dec(&key[0], &iv[0], pad);\n+    size = dec.Decrypt(&correctout[0], correctout.size(), &decrypted[0]);\n+    decrypted.resize(size);\n+    BOOST_CHECK(decrypted.size() == in.size());\n+    BOOST_CHECK_MESSAGE(decrypted == in, HexStr(decrypted) + std::string(\" != \") + hexin);\n+\n+    // Encrypt and re-decrypt substrings of the plaintext and verify that they equal each-other\n+    for(std::vector<unsigned char>::iterator i(in.begin()); i != in.end(); ++i)\n+    {\n+        std::vector<unsigned char> sub(i, in.end());\n+        std::vector<unsigned char> subout(sub.size() + AES_BLOCKSIZE);\n+        int size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n+        if (size != 0)\n+        {\n+            subout.resize(size);\n+            std::vector<unsigned char> subdecrypted(subout.size());\n+            size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n+            subdecrypted.resize(size);\n+            BOOST_CHECK(decrypted.size() == in.size());\n+            BOOST_CHECK_MESSAGE(subdecrypted == sub, HexStr(subdecrypted) + std::string(\" != \") + HexStr(sub));\n+        }\n+    }\n+}\n+\n+void TestAES256CBC(const std::string &hexkey, const std::string &hexiv, bool pad, const std::string &hexin, const std::string &hexout)\n+{\n+    std::vector<unsigned char> key = ParseHex(hexkey);\n+    std::vector<unsigned char> iv = ParseHex(hexiv);\n+    std::vector<unsigned char> in = ParseHex(hexin);\n+    std::vector<unsigned char> correctout = ParseHex(hexout);\n+    std::vector<unsigned char> realout(in.size() + AES_BLOCKSIZE);\n+\n+    // Encrypt the plaintext and verify that it equals the cipher\n+    AES256CBCEncrypt enc(&key[0], &iv[0], pad);\n+    int size = enc.Encrypt(&in[0], in.size(), &realout[0]);\n+    realout.resize(size);\n+    BOOST_CHECK(realout.size() == correctout.size());\n+    BOOST_CHECK_MESSAGE(realout == correctout, HexStr(realout) + std::string(\" != \") + hexout);\n+\n+    // Decrypt the cipher and verify that it equals the plaintext\n+    std::vector<unsigned char> decrypted(correctout.size());\n+    AES256CBCDecrypt dec(&key[0], &iv[0], pad);\n+    size = dec.Decrypt(&correctout[0], correctout.size(), &decrypted[0]);\n+    decrypted.resize(size);\n+    BOOST_CHECK(decrypted.size() == in.size());\n+    BOOST_CHECK_MESSAGE(decrypted == in, HexStr(decrypted) + std::string(\" != \") + hexin);\n+\n+    // Encrypt and re-decrypt substrings of the plaintext and verify that they equal each-other\n+    for(std::vector<unsigned char>::iterator i(in.begin()); i != in.end(); ++i)\n+    {\n+        std::vector<unsigned char> sub(i, in.end());\n+        std::vector<unsigned char> subout(sub.size() + AES_BLOCKSIZE);\n+        int size = enc.Encrypt(&sub[0], sub.size(), &subout[0]);\n+        if (size != 0)\n+        {\n+            subout.resize(size);\n+            std::vector<unsigned char> subdecrypted(subout.size());\n+            size = dec.Decrypt(&subout[0], subout.size(), &subdecrypted[0]);\n+            subdecrypted.resize(size);\n+            BOOST_CHECK(decrypted.size() == in.size());\n+            BOOST_CHECK_MESSAGE(subdecrypted == sub, HexStr(subdecrypted) + std::string(\" != \") + HexStr(sub));\n+        }\n+    }\n+}\n+\n std::string LongTestString(void) {\n     std::string ret;\n     for (int i=0; i<200000; i++) {\n@@ -279,4 +363,55 @@ BOOST_AUTO_TEST_CASE(aes_testvectors) {\n     BOOST_CHECK(memcmp(buf, plain, sizeof(buf)) == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(aes_cbc_testvectors) {\n+\n+    // NIST AES CBC 128-bit encryption test-vectors\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"000102030405060708090A0B0C0D0E0F\", false, \\\n+                  \"6bc1bee22e409f96e93d7e117393172a\", \"7649abac8119b246cee98e9b12e9197d\");\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"7649ABAC8119B246CEE98E9B12E9197D\", false, \\\n+                  \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"5086cb9b507219ee95db113a917678b2\");\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"5086cb9b507219ee95db113a917678b2\", false, \\\n+                  \"30c81c46a35ce411e5fbc1191a0a52ef\", \"73bed6b8e3c1743b7116e69e22229516\");\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"73bed6b8e3c1743b7116e69e22229516\", false, \\\n+                  \"f69f2445df4f9b17ad2b417be66c3710\", \"3ff1caa1681fac09120eca307586e1a7\");\n+\n+    // The same vectors with padding enabled\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"000102030405060708090A0B0C0D0E0F\", true, \\\n+                  \"6bc1bee22e409f96e93d7e117393172a\", \"7649abac8119b246cee98e9b12e9197d8964e0b149c10b7b682e6e39aaeb731c\");\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"7649ABAC8119B246CEE98E9B12E9197D\", true, \\\n+                  \"ae2d8a571e03ac9c9eb76fac45af8e51\", \"5086cb9b507219ee95db113a917678b255e21d7100b988ffec32feeafaf23538\");\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"5086cb9b507219ee95db113a917678b2\", true, \\\n+                  \"30c81c46a35ce411e5fbc1191a0a52ef\", \"73bed6b8e3c1743b7116e69e22229516f6eccda327bf8e5ec43718b0039adceb\");\n+    TestAES128CBC(\"2b7e151628aed2a6abf7158809cf4f3c\", \"73bed6b8e3c1743b7116e69e22229516\", true, \\\n+                  \"f69f2445df4f9b17ad2b417be66c3710\", \"3ff1caa1681fac09120eca307586e1a78cb82807230e1321d3fae00d18cc2012\");\n+\n+    // NIST AES CBC 256-bit encryption test-vectors\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"000102030405060708090A0B0C0D0E0F\", false, \"6bc1bee22e409f96e93d7e117393172a\", \\\n+                  \"f58c4c04d6e5f1ba779eabfb5f7bfbd6\");\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"F58C4C04D6E5F1BA779EABFB5F7BFBD6\", false, \"ae2d8a571e03ac9c9eb76fac45af8e51\", \\\n+                  \"9cfc4e967edb808d679f777bc6702c7d\");\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"9CFC4E967EDB808D679F777BC6702C7D\", false, \"30c81c46a35ce411e5fbc1191a0a52ef\",\n+                  \"39f23369a9d9bacfa530e26304231461\");\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"39F23369A9D9BACFA530E26304231461\", false, \"f69f2445df4f9b17ad2b417be66c3710\", \\\n+                  \"b2eb05e2c39be9fcda6c19078c6a9d1b\");\n+\n+    // The same vectors with padding enabled\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"000102030405060708090A0B0C0D0E0F\", true, \"6bc1bee22e409f96e93d7e117393172a\", \\\n+                  \"f58c4c04d6e5f1ba779eabfb5f7bfbd6485a5c81519cf378fa36d42b8547edc0\");\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"F58C4C04D6E5F1BA779EABFB5F7BFBD6\", true, \"ae2d8a571e03ac9c9eb76fac45af8e51\", \\\n+                  \"9cfc4e967edb808d679f777bc6702c7d3a3aa5e0213db1a9901f9036cf5102d2\");\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"9CFC4E967EDB808D679F777BC6702C7D\", true, \"30c81c46a35ce411e5fbc1191a0a52ef\",\n+                  \"39f23369a9d9bacfa530e263042314612f8da707643c90a6f732b3de1d3f5cee\");\n+    TestAES256CBC(\"603deb1015ca71be2b73aef0857d77811f352c073b6108d72d9810a30914dff4\", \\\n+                  \"39F23369A9D9BACFA530E26304231461\", true, \"f69f2445df4f9b17ad2b417be66c3710\", \\\n+                  \"b2eb05e2c39be9fcda6c19078c6a9d1b3f461796d6b0d6b2e0c2a72b4d80e644\");\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2JkZGU4ZDhkY2ZjN2U1Yzg1MTJkNzY3YjI1ZWI1NDE2YTk1ZGI0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-20T05:05:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:31:09Z"
      },
      "message": "crypter: fix the stored initialization vector size\n\nAES IV's are 16bytes, not 32. This was harmless but confusing.\n\nAdd WALLET_CRYPTO_IV_SIZE to make its usage explicit.",
      "tree": {
        "sha": "547f7aba36bf7bc9a802e833ac150c936fb9df8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/547f7aba36bf7bc9a802e833ac150c936fb9df8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3d2df0ebb2e2f604dc65558044cfdc0b0e3495"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8f555579fa3b5d94864ccf0408a64a8b8bfcd62a",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
        "patch": "@@ -37,7 +37,7 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV)\n {\n-    if (chNewKey.size() != WALLET_CRYPTO_KEY_SIZE || chNewIV.size() != WALLET_CRYPTO_KEY_SIZE)\n+    if (chNewKey.size() != WALLET_CRYPTO_KEY_SIZE || chNewIV.size() != WALLET_CRYPTO_IV_SIZE)\n         return false;\n \n     memcpy(&chKey[0], &chNewKey[0], sizeof chKey);\n@@ -105,8 +105,8 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n {\n     CCrypter cKeyCrypter;\n-    std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n-    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_KEY_SIZE);\n+    std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n+    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n@@ -115,8 +115,8 @@ static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMateri\n static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n-    std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n-    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_KEY_SIZE);\n+    std::vector<unsigned char> chIV(WALLET_CRYPTO_IV_SIZE);\n+    memcpy(&chIV[0], &nIV, WALLET_CRYPTO_IV_SIZE);\n     if(!cKeyCrypter.SetKey(vMasterKey, chIV))\n         return false;\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));"
      },
      {
        "sha": "b4727ac8ac0903ab6b18946a718fe074b0cbd5c1",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
        "patch": "@@ -13,6 +13,7 @@ class uint256;\n \n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n+const unsigned int WALLET_CRYPTO_IV_SIZE = 16;\n \n /**\n  * Private key encryption is done based on a CMasterKey,\n@@ -71,7 +72,7 @@ class CCrypter\n {\n private:\n     unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];\n-    unsigned char chIV[WALLET_CRYPTO_KEY_SIZE];\n+    unsigned char chIV[WALLET_CRYPTO_IV_SIZE];\n     bool fKeySet;\n \n public:"
      }
    ]
  },
  {
    "sha": "7bf56ea81a3006bc166a98710f93c916923cc633",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmY1NmVhODFhMzAwNmJjMTY2YTk4NzEwZjkzYzkxNjkyM2NjNjMz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-26T21:37:29Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:31:18Z"
      },
      "message": "crypter: constify encrypt/decrypt\n\nThis makes CCrypter easier to pass aroundf for tests",
      "tree": {
        "sha": "7695b57a96164b03296139b3735745983b9ed8e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7695b57a96164b03296139b3735745983b9ed8e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bf56ea81a3006bc166a98710f93c916923cc633",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf56ea81a3006bc166a98710f93c916923cc633",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf56ea81a3006bc166a98710f93c916923cc633",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf56ea81a3006bc166a98710f93c916923cc633/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37bdde8d8dcfc7e5c8512d767b25eb5416a95db4"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e37a9c4c85d4e70a0d81ad0a579e063d9b7ecd48",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf56ea81a3006bc166a98710f93c916923cc633/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf56ea81a3006bc166a98710f93c916923cc633/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=7bf56ea81a3006bc166a98710f93c916923cc633",
        "patch": "@@ -47,7 +47,7 @@ bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigne\n     return true;\n }\n \n-bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext)\n+bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const\n {\n     if (!fKeySet)\n         return false;\n@@ -74,7 +74,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     return true;\n }\n \n-bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext)\n+bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const\n {\n     if (!fKeySet)\n         return false;"
      },
      {
        "sha": "3457d40ffd029bf4d931f4e404d0397a73c11857",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bf56ea81a3006bc166a98710f93c916923cc633/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bf56ea81a3006bc166a98710f93c916923cc633/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=7bf56ea81a3006bc166a98710f93c916923cc633",
        "patch": "@@ -77,8 +77,8 @@ class CCrypter\n \n public:\n     bool SetKeyFromPassphrase(const SecureString &strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod);\n-    bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext);\n-    bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext);\n+    bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const;\n+    bool Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext) const;\n     bool SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigned char>& chNewIV);\n \n     void CleanKey()"
      }
    ]
  },
  {
    "sha": "56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmJiZjVlOTA0OTlhN2UzNjczYzljN2MxYzgyZTZkNDRiMDRlY2Y3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-20T05:10:30Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:31:32Z"
      },
      "message": "crypter: hook up the new aes cbc classes",
      "tree": {
        "sha": "490722839391e90287e9f9247950e9efbbb4f7b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/490722839391e90287e9f9247950e9efbbb4f7b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7bf56ea81a3006bc166a98710f93c916923cc633",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bf56ea81a3006bc166a98710f93c916923cc633",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bf56ea81a3006bc166a98710f93c916923cc633"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 14,
      "deletions": 31
    },
    "files": [
      {
        "sha": "0a19139a3172afc5ff2316375f4347f725f7506c",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 31,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"crypter.h\"\n \n+#include \"crypto/aes.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"util.h\"\n@@ -53,24 +54,15 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n         return false;\n \n     // max ciphertext len for a n bytes of plaintext is\n-    // n + AES_BLOCK_SIZE - 1 bytes\n-    int nLen = vchPlaintext.size();\n-    int nCLen = nLen + AES_BLOCK_SIZE, nFLen = 0;\n-    vchCiphertext = std::vector<unsigned char> (nCLen);\n+    // n + AES_BLOCKSIZE bytes\n+    vchCiphertext.resize(vchPlaintext.size() + AES_BLOCKSIZE);\n \n-    EVP_CIPHER_CTX ctx;\n-\n-    bool fOk = true;\n-\n-    EVP_CIPHER_CTX_init(&ctx);\n-    if (fOk) fOk = EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n-    if (fOk) fOk = EVP_EncryptUpdate(&ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen) != 0;\n-    if (fOk) fOk = EVP_EncryptFinal_ex(&ctx, (&vchCiphertext[0]) + nCLen, &nFLen) != 0;\n-    EVP_CIPHER_CTX_cleanup(&ctx);\n-\n-    if (!fOk) return false;\n+    AES256CBCEncrypt enc(chKey, chIV, true);\n+    size_t nLen = enc.Encrypt(&vchPlaintext[0], vchPlaintext.size(), &vchCiphertext[0]);\n+    if(nLen < vchPlaintext.size())\n+        return false;\n+    vchCiphertext.resize(nLen);\n \n-    vchCiphertext.resize(nCLen + nFLen);\n     return true;\n }\n \n@@ -81,23 +73,14 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n \n     // plaintext will always be equal to or lesser than length of ciphertext\n     int nLen = vchCiphertext.size();\n-    int nPLen = nLen, nFLen = 0;\n-\n-    vchPlaintext = CKeyingMaterial(nPLen);\n \n-    EVP_CIPHER_CTX ctx;\n+    vchPlaintext.resize(nLen);\n \n-    bool fOk = true;\n-\n-    EVP_CIPHER_CTX_init(&ctx);\n-    if (fOk) fOk = EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n-    if (fOk) fOk = EVP_DecryptUpdate(&ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen) != 0;\n-    if (fOk) fOk = EVP_DecryptFinal_ex(&ctx, (&vchPlaintext[0]) + nPLen, &nFLen) != 0;\n-    EVP_CIPHER_CTX_cleanup(&ctx);\n-\n-    if (!fOk) return false;\n-\n-    vchPlaintext.resize(nPLen + nFLen);\n+    AES256CBCDecrypt dec(chKey, chIV, true);\n+    nLen = dec.Decrypt(&vchCiphertext[0], vchCiphertext.size(), &vchPlaintext[0]);\n+    if(nLen == 0)\n+        return false;\n+    vchPlaintext.resize(nLen);\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDJmZThlNTJlMjNiOGRlMjEyZTA5YjM3MWJhMWZhMjY4OGRiYjYy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-20T05:24:12Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:31:43Z"
      },
      "message": "crypter: add a BytesToKey clone to replace the use of openssl\n\nBytesToKeySHA512AES should be functionally identical to EVP_BytesToKey, but\ndrops the dependency on openssl.",
      "tree": {
        "sha": "9f9619e4009546a4704e0492e9c5c275db25e68b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f9619e4009546a4704e0492e9c5c275db25e68b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56bbf5e90499a7e3673c9c7c1c82e6d44b04ecf7"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 31,
      "deletions": 4
    },
    "files": [
      {
        "sha": "190f8ecf2ab49a4d1e0f53b4a8b96b7c4d983afb",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 4,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
        "patch": "@@ -5,15 +5,41 @@\n #include \"crypter.h\"\n \n #include \"crypto/aes.h\"\n+#include \"crypto/sha512.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n #include \"util.h\"\n \n #include <string>\n #include <vector>\n #include <boost/foreach.hpp>\n-#include <openssl/aes.h>\n-#include <openssl/evp.h>\n+\n+int CCrypter::BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const\n+{\n+    // This mimics the behavior of openssl's EVP_BytesToKey with an aes256cbc\n+    // cipher and sha512 message digest. Because sha512's output size (64b) is\n+    // greater than the aes256 block size (16b) + aes256 key size (32b),\n+    // there's no need to process more than once (D_0).\n+\n+    if(!count || !key || !iv)\n+        return 0;\n+\n+    unsigned char buf[CSHA512::OUTPUT_SIZE];\n+    CSHA512 di;\n+\n+    di.Write((const unsigned char*)strKeyData.c_str(), strKeyData.size());\n+    if(chSalt.size())\n+        di.Write(&chSalt[0], chSalt.size());\n+    di.Finalize(buf);\n+\n+    for(int i = 0; i != count - 1; i++)\n+        di.Reset().Write(buf, sizeof(buf)).Finalize(buf);\n+\n+    memcpy(key, buf, WALLET_CRYPTO_KEY_SIZE);\n+    memcpy(iv, buf + WALLET_CRYPTO_KEY_SIZE, WALLET_CRYPTO_IV_SIZE);\n+    memory_cleanse(buf, sizeof(buf));\n+    return WALLET_CRYPTO_KEY_SIZE;\n+}\n \n bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)\n {\n@@ -22,8 +48,7 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     int i = 0;\n     if (nDerivationMethod == 0)\n-        i = EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha512(), &chSalt[0],\n-                          (unsigned char *)&strKeyData[0], strKeyData.size(), nRounds, chKey, chIV);\n+        i = BytesToKeySHA512AES(chSalt, strKeyData, nRounds, chKey, chIV);\n \n     if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {"
      },
      {
        "sha": "16f2ba622069c3c4b0a5080ba489c77f35bc3b50",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
        "patch": "@@ -75,6 +75,8 @@ class CCrypter\n     unsigned char chIV[WALLET_CRYPTO_IV_SIZE];\n     bool fKeySet;\n \n+    int BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const;\n+\n public:\n     bool SetKeyFromPassphrase(const SecureString &strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod);\n     bool Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext) const;"
      }
    ]
  },
  {
    "sha": "be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTdmNGQ5YmJhMWZjYzY1ODRhYjRiMWI1YTMwY2E1Y2YzNjljMTQ1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-26T23:15:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:49:41Z"
      },
      "message": "crypter: shuffle Makefile so that crypto can be used by the wallet\n\nWallet must come before crypto, otherwise linking fails on some platforms.\n\nIncludes a tangentially-related general cleanup rather than making the Makefile\nsloppier.",
      "tree": {
        "sha": "2d1c19ebe1f2fccd885f01a7c6a1f31fc431d989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d1c19ebe1f2fccd885f01a7c6a1f31fc431d989"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d2fe8e52e23b8de212e09b371ba1fa2688dbb62"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 23,
      "deletions": 32
    },
    "files": [
      {
        "sha": "fb378f8f3a524f323586601d1876338b6721df93",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 23,
        "deletions": 32,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145",
        "patch": "@@ -29,13 +29,12 @@ $(LIBLEVELDB) $(LIBMEMENV):\n endif\n \n BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n+BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BDB_CPPFLAGS) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n BITCOIN_INCLUDES += $(UNIVALUE_CFLAGS)\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n-LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n LIBBITCOIN_CONSENSUS=libbitcoin_consensus.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n@@ -44,32 +43,32 @@ LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n \n+if ENABLE_ZMQ\n+LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n+endif\n+if BUILD_BITCOIN_LIBS\n+LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n+endif\n+if ENABLE_WALLET\n+LIBBITCOIN_WALLET=libbitcoin_wallet.a\n+endif\n+\n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n EXTRA_LIBRARIES = \\\n-  crypto/libbitcoin_crypto.a \\\n-  libbitcoin_util.a \\\n-  libbitcoin_common.a \\\n-  libbitcoin_consensus.a \\\n-  libbitcoin_server.a \\\n-  libbitcoin_cli.a\n-if ENABLE_WALLET\n-BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n-EXTRA_LIBRARIES += libbitcoin_wallet.a\n-endif\n-if ENABLE_ZMQ\n-EXTRA_LIBRARIES += libbitcoin_zmq.a\n-endif\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_CONSENSUS) \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_CLI) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_ZMQ)\n \n-if BUILD_BITCOIN_LIBS\n-lib_LTLIBRARIES = libbitcoinconsensus.la\n-LIBBITCOINCONSENSUS=libbitcoinconsensus.la\n-else\n-LIBBITCOINCONSENSUS=\n-endif\n+lib_LTLIBRARIES = $(LIBBITCOINCONSENSUS)\n \n bin_PROGRAMS =\n TESTS =\n@@ -207,8 +206,6 @@ libbitcoin_server_a_SOURCES = \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_ZMQ\n-LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n-\n libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libbitcoin_zmq_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_zmq_a_SOURCES = \\\n@@ -359,21 +356,15 @@ bitcoind_LDADD = \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_WALLET) \\\n+  $(LIBBITCOIN_ZMQ) \\\n   $(LIBBITCOIN_CONSENSUS) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV) \\\n   $(LIBSECP256K1)\n \n-if ENABLE_ZMQ\n-bitcoind_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n-endif\n-\n-if ENABLE_WALLET\n-bitcoind_LDADD += libbitcoin_wallet.a\n-endif\n-\n-bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+bitcoind_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(ZMQ_LIBS)\n \n # bitcoin-cli binary #\n bitcoin_cli_SOURCES = bitcoin-cli.cpp"
      }
    ]
  },
  {
    "sha": "952dfb42b178ec2af07293446daf7a8bd24fb187",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTJkZmI0MmIxNzhlYzJhZjA3MjkzNDQ2ZGFmN2E4YmQyNGZiMTg3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-03-20T05:27:50Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-03-01T17:50:57Z"
      },
      "message": "crypter: add tests for crypter\n\nVerify that results correct (match known values), consistent (encrypt->decrypt\nmatches the original), and compatible with the previous openssl implementation.\n\nAlso check that failed encrypts/decrypts fail the exact same way as openssl.",
      "tree": {
        "sha": "3f7b58bc70e7931936749f1acf00fbb26c168e1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f7b58bc70e7931936749f1acf00fbb26c168e1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/952dfb42b178ec2af07293446daf7a8bd24fb187",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952dfb42b178ec2af07293446daf7a8bd24fb187",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/952dfb42b178ec2af07293446daf7a8bd24fb187",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952dfb42b178ec2af07293446daf7a8bd24fb187/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be7f4d9bba1fcc6584ab4b1b5a30ca5cf369c145"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 237,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7b108c236ec7760454c60b09039b7cf993da2595",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/952dfb42b178ec2af07293446daf7a8bd24fb187/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/952dfb42b178ec2af07293446daf7a8bd24fb187/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=952dfb42b178ec2af07293446daf7a8bd24fb187",
        "patch": "@@ -89,6 +89,7 @@ if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   test/accounting_tests.cpp \\\n   wallet/test/wallet_tests.cpp \\\n+  wallet/test/crypto_tests.cpp \\\n   test/rpc_wallet_tests.cpp\n endif\n "
      },
      {
        "sha": "5d0a4a3305b8c9689b93c08066be495f3f66a6c0",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/952dfb42b178ec2af07293446daf7a8bd24fb187/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/952dfb42b178ec2af07293446daf7a8bd24fb187/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=952dfb42b178ec2af07293446daf7a8bd24fb187",
        "patch": "@@ -67,9 +67,15 @@ class CMasterKey\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n \n+namespace wallet_crypto\n+{\n+    class TestCrypter;\n+}\n+\n /** Encryption/decryption context with key information */\n class CCrypter\n {\n+friend class wallet_crypto::TestCrypter; // for test access to chKey/chIV\n private:\n     unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];\n     unsigned char chIV[WALLET_CRYPTO_IV_SIZE];"
      },
      {
        "sha": "05387f5f2b5e6b011e259011a132c1efc8578d31",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "added",
        "additions": 230,
        "deletions": 0,
        "changes": 230,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/952dfb42b178ec2af07293446daf7a8bd24fb187/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/952dfb42b178ec2af07293446daf7a8bd24fb187/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=952dfb42b178ec2af07293446daf7a8bd24fb187",
        "patch": "@@ -0,0 +1,230 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"random.h\"\n+#include \"utilstrencodings.h\"\n+#include \"test/test_bitcoin.h\"\n+#include \"wallet/crypter.h\"\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+#include <openssl/aes.h>\n+#include <openssl/evp.h>\n+\n+BOOST_FIXTURE_TEST_SUITE(wallet_crypto, BasicTestingSetup)\n+\n+bool OldSetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod, unsigned char* chKey, unsigned char* chIV)\n+{\n+    if (nRounds < 1 || chSalt.size() != WALLET_CRYPTO_SALT_SIZE)\n+        return false;\n+\n+    int i = 0;\n+    if (nDerivationMethod == 0)\n+        i = EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha512(), &chSalt[0],\n+                          (unsigned char *)&strKeyData[0], strKeyData.size(), nRounds, chKey, chIV);\n+\n+    if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n+    {\n+        memory_cleanse(chKey, sizeof(chKey));\n+        memory_cleanse(chIV, sizeof(chIV));\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool OldEncrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned char> &vchCiphertext, const unsigned char chKey[32], const unsigned char chIV[16])\n+{\n+    // max ciphertext len for a n bytes of plaintext is\n+    // n + AES_BLOCK_SIZE - 1 bytes\n+    int nLen = vchPlaintext.size();\n+    int nCLen = nLen + AES_BLOCK_SIZE, nFLen = 0;\n+    vchCiphertext = std::vector<unsigned char> (nCLen);\n+\n+    EVP_CIPHER_CTX ctx;\n+\n+    bool fOk = true;\n+\n+    EVP_CIPHER_CTX_init(&ctx);\n+    if (fOk) fOk = EVP_EncryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n+    if (fOk) fOk = EVP_EncryptUpdate(&ctx, &vchCiphertext[0], &nCLen, &vchPlaintext[0], nLen) != 0;\n+    if (fOk) fOk = EVP_EncryptFinal_ex(&ctx, (&vchCiphertext[0]) + nCLen, &nFLen) != 0;\n+    EVP_CIPHER_CTX_cleanup(&ctx);\n+\n+    if (!fOk) return false;\n+\n+    vchCiphertext.resize(nCLen + nFLen);\n+    return true;\n+}\n+\n+bool OldDecrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingMaterial& vchPlaintext, const unsigned char chKey[32], const unsigned char chIV[16])\n+{\n+    // plaintext will always be equal to or lesser than length of ciphertext\n+    int nLen = vchCiphertext.size();\n+    int nPLen = nLen, nFLen = 0;\n+\n+    vchPlaintext = CKeyingMaterial(nPLen);\n+\n+    EVP_CIPHER_CTX ctx;\n+\n+    bool fOk = true;\n+\n+    EVP_CIPHER_CTX_init(&ctx);\n+    if (fOk) fOk = EVP_DecryptInit_ex(&ctx, EVP_aes_256_cbc(), NULL, chKey, chIV) != 0;\n+    if (fOk) fOk = EVP_DecryptUpdate(&ctx, &vchPlaintext[0], &nPLen, &vchCiphertext[0], nLen) != 0;\n+    if (fOk) fOk = EVP_DecryptFinal_ex(&ctx, (&vchPlaintext[0]) + nPLen, &nFLen) != 0;\n+    EVP_CIPHER_CTX_cleanup(&ctx);\n+\n+    if (!fOk) return false;\n+\n+    vchPlaintext.resize(nPLen + nFLen);\n+    return true;\n+}\n+\n+class TestCrypter\n+{\n+public:\n+static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n+                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n+                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+{\n+    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];\n+    unsigned char chIV[WALLET_CRYPTO_IV_SIZE];\n+\n+    CCrypter crypt;\n+    crypt.SetKeyFromPassphrase(passphrase, vchSalt, rounds, 0);\n+\n+    OldSetKeyFromPassphrase(passphrase, vchSalt, rounds, 0, chKey, chIV);\n+\n+    BOOST_CHECK_MESSAGE(memcmp(chKey, crypt.chKey, sizeof(chKey)) == 0, \\\n+        HexStr(chKey, chKey+sizeof(chKey)) + std::string(\" != \") + HexStr(crypt.chKey, crypt.chKey + (sizeof crypt.chKey)));\n+    BOOST_CHECK_MESSAGE(memcmp(chIV, crypt.chIV, sizeof(chIV)) == 0, \\\n+        HexStr(chIV, chIV+sizeof(chIV)) + std::string(\" != \") + HexStr(crypt.chIV, crypt.chIV + (sizeof crypt.chIV)));\n+\n+    if(!correctKey.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(chKey, &correctKey[0], sizeof(chKey)) == 0, \\\n+            HexStr(chKey, chKey+sizeof(chKey)) + std::string(\" != \") + HexStr(correctKey.begin(), correctKey.end()));\n+    if(!correctIV.empty())\n+        BOOST_CHECK_MESSAGE(memcmp(chIV, &correctIV[0], sizeof(chIV)) == 0,\n+            HexStr(chIV, chIV+sizeof(chIV)) + std::string(\" != \") + HexStr(correctIV.begin(), correctIV.end()));\n+}\n+\n+static void TestPassphrase(const std::vector<unsigned char>& vchSalt, const SecureString& passphrase, uint32_t rounds,\n+                 const std::vector<unsigned char>& correctKey = std::vector<unsigned char>(),\n+                 const std::vector<unsigned char>& correctIV=std::vector<unsigned char>())\n+{\n+    TestPassphraseSingle(vchSalt, passphrase, rounds, correctKey, correctIV);\n+    for(SecureString::const_iterator i(passphrase.begin()); i != passphrase.end(); ++i)\n+        TestPassphraseSingle(vchSalt, SecureString(i, passphrase.end()), rounds);\n+}\n+\n+\n+static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchCiphertext, \\\n+                        const std::vector<unsigned char>& vchPlaintext = std::vector<unsigned char>())\n+{\n+    CKeyingMaterial vchDecrypted1;\n+    CKeyingMaterial vchDecrypted2;\n+    int result1, result2;\n+    result1 = crypt.Decrypt(vchCiphertext, vchDecrypted1);\n+    result2 = OldDecrypt(vchCiphertext, vchDecrypted2, crypt.chKey, crypt.chIV);\n+    BOOST_CHECK(result1 == result2);\n+\n+    // These two should be equal. However, OpenSSL 1.0.1j introduced a change\n+    // that would zero all padding except for the last byte for failed decrypts.\n+    // This behavior was reverted for 1.0.1k.\n+    if (vchDecrypted1 != vchDecrypted2 && vchDecrypted1.size() >= AES_BLOCK_SIZE && SSLeay() == 0x100010afL)\n+    {\n+        for(CKeyingMaterial::iterator it = vchDecrypted1.end() - AES_BLOCK_SIZE; it != vchDecrypted1.end() - 1; it++)\n+            *it = 0;\n+    }\n+\n+    BOOST_CHECK_MESSAGE(vchDecrypted1 == vchDecrypted2, HexStr(vchDecrypted1.begin(), vchDecrypted1.end()) + \" != \" + HexStr(vchDecrypted2.begin(), vchDecrypted2.end()));\n+\n+    if (vchPlaintext.size())\n+        BOOST_CHECK(CKeyingMaterial(vchPlaintext.begin(), vchPlaintext.end()) == vchDecrypted2);\n+}\n+\n+static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchPlaintext,\n+                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+{\n+    std::vector<unsigned char> vchCiphertext1;\n+    std::vector<unsigned char> vchCiphertext2;\n+    int result1 = crypt.Encrypt(vchPlaintext, vchCiphertext1);\n+\n+    int result2 = OldEncrypt(vchPlaintext, vchCiphertext2, crypt.chKey, crypt.chIV);\n+    BOOST_CHECK(result1 == result2);\n+    BOOST_CHECK(vchCiphertext1 == vchCiphertext2);\n+\n+    if (!vchCiphertextCorrect.empty())\n+        BOOST_CHECK(vchCiphertext2 == vchCiphertextCorrect);\n+\n+    const std::vector<unsigned char> vchPlaintext2(vchPlaintext.begin(), vchPlaintext.end());\n+\n+    if(vchCiphertext1 == vchCiphertext2)\n+        TestDecrypt(crypt, vchCiphertext1, vchPlaintext2);\n+}\n+\n+static void TestEncrypt(const CCrypter& crypt, const std::vector<unsigned char>& vchPlaintextIn, \\\n+                       const std::vector<unsigned char>& vchCiphertextCorrect = std::vector<unsigned char>())\n+{\n+    TestEncryptSingle(crypt, CKeyingMaterial(vchPlaintextIn.begin(), vchPlaintextIn.end()), vchCiphertextCorrect);\n+    for(std::vector<unsigned char>::const_iterator i(vchPlaintextIn.begin()); i != vchPlaintextIn.end(); ++i)\n+        TestEncryptSingle(crypt, CKeyingMaterial(i, vchPlaintextIn.end()));\n+}\n+\n+};\n+\n+BOOST_AUTO_TEST_CASE(passphrase) {\n+    // These are expensive.\n+\n+    TestCrypter::TestPassphrase(ParseHex(\"0000deadbeef0000\"), \"test\", 25000, \\\n+                                ParseHex(\"fc7aba077ad5f4c3a0988d8daa4810d0d4a0e3bcb53af662998898f33df0556a\"), \\\n+                                ParseHex(\"cf2f2691526dd1aa220896fb8bf7c369\"));\n+\n+    std::string hash(GetRandHash().ToString());\n+    std::vector<unsigned char> vchSalt(8);\n+    GetRandBytes(&vchSalt[0], vchSalt.size());\n+    uint32_t rounds = insecure_rand();\n+    if (rounds > 30000)\n+        rounds = 30000;\n+    TestCrypter::TestPassphrase(vchSalt, SecureString(hash.begin(), hash.end()), rounds);\n+}\n+\n+BOOST_AUTO_TEST_CASE(encrypt) {\n+    std::vector<unsigned char> vchSalt = ParseHex(\"0000deadbeef0000\");\n+    BOOST_CHECK(vchSalt.size() == WALLET_CRYPTO_SALT_SIZE);\n+    CCrypter crypt;\n+    crypt.SetKeyFromPassphrase(\"passphrase\", vchSalt, 25000, 0);\n+    TestCrypter::TestEncrypt(crypt, ParseHex(\"22bcade09ac03ff6386914359cfe885cfeb5f77ff0d670f102f619687453b29d\"));\n+\n+    for (int i = 0; i != 100; i++)\n+    {\n+        uint256 hash(GetRandHash());\n+        TestCrypter::TestEncrypt(crypt, std::vector<unsigned char>(hash.begin(), hash.end()));\n+    }\n+\n+}\n+\n+BOOST_AUTO_TEST_CASE(decrypt) {\n+    std::vector<unsigned char> vchSalt = ParseHex(\"0000deadbeef0000\");\n+    BOOST_CHECK(vchSalt.size() == WALLET_CRYPTO_SALT_SIZE);\n+    CCrypter crypt;\n+    crypt.SetKeyFromPassphrase(\"passphrase\", vchSalt, 25000, 0);\n+\n+    // Some corner cases the came up while testing\n+    TestCrypter::TestDecrypt(crypt,ParseHex(\"795643ce39d736088367822cdc50535ec6f103715e3e48f4f3b1a60a08ef59ca\"));\n+    TestCrypter::TestDecrypt(crypt,ParseHex(\"de096f4a8f9bd97db012aa9d90d74de8cdea779c3ee8bc7633d8b5d6da703486\"));\n+    TestCrypter::TestDecrypt(crypt,ParseHex(\"32d0a8974e3afd9c6c3ebf4d66aa4e6419f8c173de25947f98cf8b7ace49449c\"));\n+    TestCrypter::TestDecrypt(crypt,ParseHex(\"e7c055cca2faa78cb9ac22c9357a90b4778ded9b2cc220a14cea49f931e596ea\"));\n+    TestCrypter::TestDecrypt(crypt,ParseHex(\"b88efddd668a6801d19516d6830da4ae9811988ccbaf40df8fbb72f3f4d335fd\"));\n+    TestCrypter::TestDecrypt(crypt,ParseHex(\"8cae76aa6a43694e961ebcb28c8ca8f8540b84153d72865e8561ddd93fa7bfa9\"));\n+\n+    for (int i = 0; i != 100; i++)\n+    {\n+        uint256 hash(GetRandHash());\n+        TestCrypter::TestDecrypt(crypt, std::vector<unsigned char>(hash.begin(), hash.end()));\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]