[
  {
    "sha": "cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzEyMGQ3ODhhYzFhYzMxYjZhNjQ4MGIwYmRjZWE2ZDYwYjMyZTQ0",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-31T00:57:11Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-03-10T16:53:08Z"
      },
      "message": "Return ScanResult from CWallet::RescanFromTime\n\nLookup the failed time just in the case it's needed.",
      "tree": {
        "sha": "b026d5a4456df19b659bc593ce955e92b039376f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b026d5a4456df19b659bc593ce955e92b039376f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJeZ8X5AAoJEG7l83hfeLNFBo8H/0MJ+F7n3xP7Sw3DIV9Wt5Ql\n4qQR0Y8Io7M5N4F2LxsLFlIZVRuRivfTCKWtW1R2ZY7A9dh88Gua81TY/bSO+bdk\nPyCUxKbjz3wA7A80zsUpkFziAE7l90IxqY1A5yZdWRStDiBSZjh2cUq0W4x28YNE\nxSTEd4ZewbeFoNjqi5gl/yQ2x28NXxpKtsBpbNyomgEWskViZudAkdShawtMg1yp\n9+ygAXC4LA/pM7691Did77HCmpC1m7HVtGkMTCi7ZKhDQHmB2PyHD1RE20EzClKc\nRTjrlOR5/oVzjiBL2wiIDrY7fDs3UmBOsKsxPUZxy79fYSoQG3A+zznz5aI25pw=\n=QG1f\n-----END PGP SIGNATURE-----",
        "payload": "tree b026d5a4456df19b659bc593ce955e92b039376f\nparent be00ef2aca0e5c350af0043af29428ac85dcca1d\nauthor Ben Woosley <ben.woosley@gmail.com> 1548896231 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1583859188 -0400\n\nReturn ScanResult from CWallet::RescanFromTime\n\nLookup the failed time just in the case it's needed.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be00ef2aca0e5c350af0043af29428ac85dcca1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be00ef2aca0e5c350af0043af29428ac85dcca1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be00ef2aca0e5c350af0043af29428ac85dcca1d"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 22,
      "deletions": 19
    },
    "files": [
      {
        "sha": "0b402fc1edc99e30d4324dfceb60074d2af7f9e7",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
        "patch": "@@ -79,10 +79,12 @@ static const int64_t TIMESTAMP_MIN = 0;\n \n static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver, int64_t time_begin = TIMESTAMP_MIN, bool update = true)\n {\n-    int64_t scanned_time = wallet.RescanFromTime(time_begin, reserver, update);\n-    if (wallet.IsAbortingRescan()) {\n+    switch (wallet.RescanFromTime(time_begin, reserver, update).status) {\n+    case CWallet::ScanResult::SUCCESS:\n+        break;\n+    case CWallet::ScanResult::USER_ABORT:\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n-    } else if (scanned_time > time_begin) {\n+    case CWallet::ScanResult::FAILURE:\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan was unable to fully rescan the blockchain. Some transactions may be missing.\");\n     }\n }\n@@ -1413,17 +1415,24 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n     if (fRescan && fRunScan && requests.size()) {\n-        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, reserver, true /* update */);\n+        CWallet::ScanResult result = pwallet->RescanFromTime(nLowestTimestamp, reserver, true /* update */);\n         {\n             auto locked_chain = pwallet->chain().lock();\n             LOCK(pwallet->cs_wallet);\n             pwallet->ReacceptWalletTransactions();\n         }\n \n-        if (pwallet->IsAbortingRescan()) {\n+        switch (result.status) {\n+        case CWallet::ScanResult::SUCCESS:\n+            break;\n+        case CWallet::ScanResult::USER_ABORT:\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n-        }\n-        if (scannedTime > nLowestTimestamp) {\n+        case CWallet::ScanResult::FAILURE:\n+            int64_t scannedTime = TIMESTAMP_MIN;\n+            if (!pwallet->chain().findBlock(result.last_failed_block, nullptr /* block */, nullptr /* time */, &scannedTime)) {\n+                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n+            }\n+            scannedTime += TIMESTAMP_WINDOW + 1;\n             std::vector<UniValue> results = response.getValues();\n             response.clear();\n             response.setArray();"
      },
      {
        "sha": "34cc651aa3652f6fa90bf732cf370728a5e449bf",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 11,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
        "patch": "@@ -1587,7 +1587,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n  * @return Earliest timestamp that could be successfully scanned from. Timestamp\n  * returned will be higher than startTime if relevant blocks could not be read.\n  */\n-int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update)\n+CWallet::ScanResult CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update)\n {\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n@@ -1601,17 +1601,11 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     }\n \n     if (!start_block.IsNull()) {\n-        // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n-        if (result.status == ScanResult::FAILURE) {\n-            int64_t time_max;\n-            if (!chain().findBlock(result.last_failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n-                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n-            }\n-            return time_max + TIMESTAMP_WINDOW + 1;\n-        }\n+        return ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n     }\n-    return startTime;\n+    ScanResult result;\n+    result.status = ScanResult::SUCCESS;\n+    return result;\n }\n \n /**"
      },
      {
        "sha": "e068427b190e29e46a2304c149409a60d74ea05e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
        "patch": "@@ -877,7 +877,6 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     void BlockConnected(const CBlock& block, const std::vector<CTransactionRef>& vtxConflicted, int height) override;\n     void BlockDisconnected(const CBlock& block, int height) override;\n     void UpdatedBlockTip() override;\n-    int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n \n     struct ScanResult {\n         enum { SUCCESS, FAILURE, USER_ABORT } status = SUCCESS;\n@@ -895,6 +894,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         uint256 last_failed_block;\n     };\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n+    ScanResult RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();"
      }
    ]
  },
  {
    "sha": "235c18b0450de3fac91bca0445a751add10d2409",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzVjMThiMDQ1MGRlM2ZhYzkxYmNhMDQ0NWE3NTFhZGQxMGQyNDA5",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2019-01-31T01:08:58Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-03-10T16:54:02Z"
      },
      "message": "Make scan / abort status private to CWallet\n\nDrop CWallet::IsAbortingRescan by reporting the abort\neffectuality from CWallet::AbortScan.",
      "tree": {
        "sha": "e3133fd544229d7c0eb96dd171faae7311bab770",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3133fd544229d7c0eb96dd171faae7311bab770"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/235c18b0450de3fac91bca0445a751add10d2409",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJeZ8YqAAoJEG7l83hfeLNFlr0H/0FJ2+Jrgg87SwDUYUZADfUW\nfF3MskyMg5e0WvPMrA8Bja6qUzY/0/begu0HMH3zzvMZWzn84nbI7f6yTzK66WPL\n5xy2Ige7vFz779vObcSmt4QM37GS7eMyZOkB6Z/JBQAaivkHfq+8OLbHAUUitVvD\n24RjEMU/p7J4AR6yKNhLXGQDBtsubw3B1op7PhrGln9SKtz6h6kj+RRFHftyEnG7\nr0FDLU09epckB6+UwplLXBVRrHEPlSjULKVmwjfCwevumYh/2RL5vsa0wN7Sz9FA\nIXyyhFneu5G0y7wvlgAiROuJiUAna52xGrPIjlXiVP4x1azviz/xljTuot8Rznw=\n=5ddY\n-----END PGP SIGNATURE-----",
        "payload": "tree e3133fd544229d7c0eb96dd171faae7311bab770\nparent cc120d788ac1ac31b6a6480b0bdcea6d60b32e44\nauthor Ben Woosley <ben.woosley@gmail.com> 1548896938 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1583859242 -0400\n\nMake scan / abort status private to CWallet\n\nDrop CWallet::IsAbortingRescan by reporting the abort\neffectuality from CWallet::AbortScan.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235c18b0450de3fac91bca0445a751add10d2409",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/235c18b0450de3fac91bca0445a751add10d2409",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235c18b0450de3fac91bca0445a751add10d2409/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc120d788ac1ac31b6a6480b0bdcea6d60b32e44"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1e8e42d7bffbd3dbf021a334e4a3a9d0ce0e0326",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235c18b0450de3fac91bca0445a751add10d2409/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235c18b0450de3fac91bca0445a751add10d2409/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=235c18b0450de3fac91bca0445a751add10d2409",
        "patch": "@@ -216,9 +216,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if (!pwallet->IsScanning() || pwallet->IsAbortingRescan()) return false;\n-    pwallet->AbortRescan();\n-    return true;\n+    return pwallet->AbortRescan();\n }\n \n UniValue importaddress(const JSONRPCRequest& request)"
      },
      {
        "sha": "e6329a8b6f48a48bc5bf410b7b3bc79123dbbbe1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235c18b0450de3fac91bca0445a751add10d2409/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235c18b0450de3fac91bca0445a751add10d2409/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=235c18b0450de3fac91bca0445a751add10d2409",
        "patch": "@@ -169,6 +169,13 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string&\n     return LoadWallet(chain, WalletLocation(name), error, warnings);\n }\n \n+bool CWallet::AbortRescan()\n+{\n+    if (!fScanningWallet || fAbortRescan) return false;\n+    fAbortRescan = true;\n+    return true;\n+}\n+\n WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n {\n     // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted"
      },
      {
        "sha": "771d8331aa65da79f1bcd2a3ad347e17ed96a5c3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/235c18b0450de3fac91bca0445a751add10d2409/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/235c18b0450de3fac91bca0445a751add10d2409/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=235c18b0450de3fac91bca0445a751add10d2409",
        "patch": "@@ -828,11 +828,13 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     void UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    /*\n-     * Rescan abort properties\n+    /**\n+     * Abort wallet rescan\n+     *\n+     * @return true if the abort was effectual, i.e. the wallet was scanning\n+     * and was not already aborting\n      */\n-    void AbortRescan() { fAbortRescan = true; }\n-    bool IsAbortingRescan() const { return fAbortRescan; }\n+    bool AbortRescan();\n     bool IsScanning() const { return fScanningWallet; }\n     int64_t ScanningDuration() const { return fScanningWallet ? GetTimeMillis() - m_scanning_start : 0; }\n     double ScanningProgress() const { return fScanningWallet ? (double) m_scanning_progress : 0; }"
      }
    ]
  },
  {
    "sha": "71b93603be72e01fe3de624d13a41a0cab201951",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWI5MzYwM2JlNzJlMDFmZTNkZTYyNGQxM2E0MWEwY2FiMjAxOTUx",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-03-09T17:56:03Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2020-03-10T16:54:02Z"
      },
      "message": "doc: Update CWallet::RescanFromTime return type documentation\n\nAnd move to the header.",
      "tree": {
        "sha": "cfeb32f94064aaee63a8a15d8585936a619bb6a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfeb32f94064aaee63a8a15d8585936a619bb6a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71b93603be72e01fe3de624d13a41a0cab201951",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJeZ8YqAAoJEG7l83hfeLNFqFMH/2x/YCpTOGVhKAWp67jJfGGW\nVGWe1eVLJr8h0uCpNMf+DOpo8NNj4DnVRULcjEK7U/giIm/r5WxOAmNAtiNarBW6\nmmPoNR0oImfL6m91+JdDR2naSCPVz6TwfNg61XgLdvenWVzdnKqt3D71QDVc1F3s\nJefuClxN3yxxPSMM+ANIBeEFsez2hdA/jQORLHbG3KgRi1EjRacz/8vOCT/4XfKV\n0exZWyd3lrakIS9xR/JLHkiU6TRgLyZLIBEdlaKtRunbpVLQFm6sSspBvYVgHRDS\nFYeV0pnE9RKLtCVgRIEiPbkBTVdsgS3ZAk2TWPng6eJnGulRzI9eAb8vrPLp2+8=\n=V+Ds\n-----END PGP SIGNATURE-----",
        "payload": "tree cfeb32f94064aaee63a8a15d8585936a619bb6a5\nparent 235c18b0450de3fac91bca0445a751add10d2409\nauthor Ben Woosley <ben.woosley@gmail.com> 1583776563 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1583859242 -0400\n\ndoc: Update CWallet::RescanFromTime return type documentation\n\nAnd move to the header.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71b93603be72e01fe3de624d13a41a0cab201951",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71b93603be72e01fe3de624d13a41a0cab201951",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71b93603be72e01fe3de624d13a41a0cab201951/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "235c18b0450de3fac91bca0445a751add10d2409",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/235c18b0450de3fac91bca0445a751add10d2409",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/235c18b0450de3fac91bca0445a751add10d2409"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 34,
      "deletions": 29
    },
    "files": [
      {
        "sha": "d70e6e0a47c0086238e63bdef4795b7a2fe81daa",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 29,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71b93603be72e01fe3de624d13a41a0cab201951/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71b93603be72e01fe3de624d13a41a0cab201951/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=71b93603be72e01fe3de624d13a41a0cab201951",
        "patch": "@@ -1586,14 +1586,6 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n \n }\n \n-/**\n- * Scan active chain for relevant transactions after importing keys. This should\n- * be called whenever new keys are added to the wallet, with the oldest key\n- * creation time.\n- *\n- * @return Earliest timestamp that could be successfully scanned from. Timestamp\n- * returned will be higher than startTime if relevant blocks could not be read.\n- */\n CWallet::ScanResult CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update)\n {\n     // Find starting block. May be null if nCreateTime is greater than the\n@@ -1615,27 +1607,6 @@ CWallet::ScanResult CWallet::RescanFromTime(int64_t startTime, const WalletResca\n     return result;\n }\n \n-/**\n- * Scan the block chain (starting in start_block) for transactions\n- * from or to us. If fUpdate is true, found transactions that already\n- * exist in the wallet will be updated.\n- *\n- * @param[in] start_block Scan starting block. If block is not on the active\n- *                        chain, the scan will return SUCCESS immediately.\n- * @param[in] stop_block  Scan ending block. If block is not on the active\n- *                        chain, the scan will continue until it reaches the\n- *                        chain tip.\n- *\n- * @return ScanResult returning scan information and indicating success or\n- *         failure. Return status will be set to SUCCESS if scan was\n- *         successful. FAILURE if a complete rescan was not possible (due to\n- *         pruning or corruption). USER_ABORT if the rescan was aborted before\n- *         it could complete.\n- *\n- * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n- * the main chain after to the addition of any new keys you want to detect\n- * transactions for.\n- */\n CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();"
      },
      {
        "sha": "88e72b49df83423e009fdafe20ab31177194b873",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71b93603be72e01fe3de624d13a41a0cab201951/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71b93603be72e01fe3de624d13a41a0cab201951/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=71b93603be72e01fe3de624d13a41a0cab201951",
        "patch": "@@ -895,7 +895,41 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n         //! USER_ABORT.\n         uint256 last_failed_block;\n     };\n+\n+    /**\n+     * Scan the block chain (starting in start_block) for transactions\n+     * from or to us. If fUpdate is true, found transactions that already\n+     * exist in the wallet will be updated.\n+     *\n+     * @param[in] start_block Scan starting block. If block is not on the active\n+     *                        chain, the scan will return SUCCESS immediately.\n+     * @param[in] stop_block  Scan ending block. If block is not on the active\n+     *                        chain, the scan will continue until it reaches the\n+     *                        chain tip.\n+     *\n+     * @return ScanResult returning scan information and indicating success or\n+     *         failure. Return status will be set to SUCCESS if scan was\n+     *         successful. FAILURE if a complete rescan was not possible (due to\n+     *         pruning or corruption). USER_ABORT if the rescan was aborted before\n+     *         it could complete.\n+     *\n+     * @pre Caller needs to make sure start_block (and the optional stop_block) are on\n+     * the main chain after to the addition of any new keys you want to detect\n+     * transactions for.\n+     */\n     ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n+\n+    /**\n+     * Scan active chain for relevant transactions after importing keys. This should\n+     * be called whenever new keys are added to the wallet, with the oldest key\n+     * creation time.\n+     *\n+     * @return ScanResult returning scan information and indicating success or\n+     *         failure. Return status will be set to SUCCESS if scan was\n+     *         successful. FAILURE if a complete rescan was not possible (due to\n+     *         pruning or corruption). USER_ABORT if the rescan was aborted before\n+     *         it could complete.\n+     */\n     ScanResult RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      }
    ]
  }
]