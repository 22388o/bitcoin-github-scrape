[
  {
    "sha": "96461989a2de737151bc4fb216221bf49cb53ce6",
    "node_id": "C_kwDOABII59oAKDk2NDYxOTg5YTJkZTczNzE1MWJjNGZiMjE2MjIxYmY0OWNiNTNjZTY",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-08-25T07:37:14Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-10-25T07:12:19Z"
      },
      "message": "refactor: const shared_ptrs\n\nIntroduce convention to use const shared pointers everywhere, unless the shared pointer is modified at some point, which it very rarely is.\n\nWe want this convention, as it helps alleviate the misconception that a const shared pointer somehow results in a pointer to an immutable object, which is false.",
      "tree": {
        "sha": "28e4a2f360d323fa2d2e9ec8e89e718f9851359c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28e4a2f360d323fa2d2e9ec8e89e718f9851359c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96461989a2de737151bc4fb216221bf49cb53ce6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAmF2WNUACgkQV692LbM1\nMyLyQQ/+Nc4SybRWInPBelQxCsKvWSnJ3P02GKZOsZ7bupOmye4sQ3qnz27s0C2a\nEsA+vMJaUYhnsfE5XxjBz2LLsq89kekaLCuqm1TFAsMt8+owMZWaHfQG5T2wnqQW\n0L2omHoLmd1DawTwDKdRitV+y2fNh8zWoy1cHqRoz56y4AK8OzatOZ4zUuw0a1/a\nWlPb4Zga+uIbjhSOs36gk5WBWVa6kIbrsINyfDzYh6QgjteqDUYTs1NNFStS19GQ\nBK3WYqSo+PD9FBtX59d4548qeE7qRyZwzRB3ROdS+kDi34nvbpi2OCeALRDOQrjZ\ntyBWKMv5G5AfJbZ4BOh2HzCZoAOuoxPd/ImQ1u+oqYJlKrza8HV/CvadcppXg6j7\njBkz3y6UKsEQJBR6rLWxXhF9QEFKgyfgw+cQvmymZdWxJdoLnEbj/ZnP0SuNyJD4\nLfr7bUYl+PU790LAdjx8XZaQ7Pi8zZh4/z1UFIfnauZdI9hijHu6oTLZ4H4pAajY\nGTFOGeez1pMSR1dDXi+iDWXEKBJNnRELt91cHKSeWoy7b9X5BtlEyLp/KI7Qlf/a\nl5BdDyfMfzuZD5xrfy7+g6p2+GczVwOtNaOKkRuEM7y8Kb0QZfaYO+65F97C2Jgh\nWMlrTqaCM4pfzfqFOgHRLTeNLs3NirLYLf5vUrmMDi/07csNW4A=\n=mSv+\n-----END PGP SIGNATURE-----",
        "payload": "tree 28e4a2f360d323fa2d2e9ec8e89e718f9851359c\nparent 04437ee721e66a7b76bef5ec2f88dd1efcd03b84\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1629877034 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1635145939 +0900\n\nrefactor: const shared_ptrs\n\nIntroduce convention to use const shared pointers everywhere, unless the shared pointer is modified at some point, which it very rarely is.\n\nWe want this convention, as it helps alleviate the misconception that a const shared pointer somehow results in a pointer to an immutable object, which is false.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96461989a2de737151bc4fb216221bf49cb53ce6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96461989a2de737151bc4fb216221bf49cb53ce6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96461989a2de737151bc4fb216221bf49cb53ce6/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04437ee721e66a7b76bef5ec2f88dd1efcd03b84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04437ee721e66a7b76bef5ec2f88dd1efcd03b84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04437ee721e66a7b76bef5ec2f88dd1efcd03b84"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 17,
      "deletions": 17
    },
    "files": [
      {
        "sha": "ede0e4cf9e86453d6b194e2de910504b0ce13fe7",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96461989a2de737151bc4fb216221bf49cb53ce6/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96461989a2de737151bc4fb216221bf49cb53ce6/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=96461989a2de737151bc4fb216221bf49cb53ce6",
        "patch": "@@ -63,7 +63,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     auto wallet_client = interfaces::MakeWalletClient(*test.m_node.chain, *Assert(test.m_node.args));\n     test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n+    const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     {"
      },
      {
        "sha": "badaf019b05fe0e29f9d46ad4d87b98ec663d584",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96461989a2de737151bc4fb216221bf49cb53ce6/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96461989a2de737151bc4fb216221bf49cb53ce6/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=96461989a2de737151bc4fb216221bf49cb53ce6",
        "patch": "@@ -141,7 +141,7 @@ void TestGUI(interfaces::Node& node)\n     auto wallet_client = interfaces::MakeWalletClient(*test.m_node.chain, *Assert(test.m_node.args));\n     test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n+    const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();\n     wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n     {"
      },
      {
        "sha": "8ba81e874679f001194cd03ccd223dd65f8ba075",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=96461989a2de737151bc4fb216221bf49cb53ce6",
        "patch": "@@ -103,7 +103,7 @@ std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& reques\n \n     std::string wallet_name;\n     if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n-        std::shared_ptr<CWallet> pwallet = GetWallet(context, wallet_name);\n+        const std::shared_ptr<CWallet> pwallet = GetWallet(context, wallet_name);\n         if (!pwallet) throw JSONRPCError(RPC_WALLET_NOT_FOUND, \"Requested wallet does not exist or is not loaded\");\n         return pwallet;\n     }\n@@ -2840,7 +2840,7 @@ static RPCHelpMan createwallet()\n     options.create_passphrase = passphrase;\n     bilingual_str error;\n     std::optional<bool> load_on_start = request.params[6].isNull() ? std::nullopt : std::optional<bool>(request.params[6].get_bool());\n-    std::shared_ptr<CWallet> wallet = CreateWallet(context, request.params[0].get_str(), load_on_start, options, status, error, warnings);\n+    const std::shared_ptr<CWallet> wallet = CreateWallet(context, request.params[0].get_str(), load_on_start, options, status, error, warnings);\n     if (!wallet) {\n         RPCErrorCode code = status == DatabaseStatus::FAILED_ENCRYPT ? RPC_WALLET_ENCRYPTION_FAILED : RPC_WALLET_ERROR;\n         throw JSONRPCError(code, error.original);"
      },
      {
        "sha": "7a658c10a2c371009fbb48a5ae74da1df23df6a5",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=96461989a2de737151bc4fb216221bf49cb53ce6",
        "patch": "@@ -41,7 +41,7 @@ static_assert(WALLET_INCREMENTAL_RELAY_FEE >= DEFAULT_INCREMENTAL_RELAY_FEE, \"wa\n \n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n-static std::shared_ptr<CWallet> TestLoadWallet(WalletContext& context)\n+static const std::shared_ptr<CWallet> TestLoadWallet(WalletContext& context)\n {\n     DatabaseOptions options;\n     options.create_flags = WALLET_FLAG_DESCRIPTORS;\n@@ -208,7 +208,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     // before the missing block, and success for a key whose creation time is\n     // after.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n         WalletContext context;\n@@ -274,7 +274,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     {\n         WalletContext context;\n         context.args = &gArgs;\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         {\n             auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n             LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n@@ -296,7 +296,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n     // were scanned, and no prior blocks were scanned.\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n@@ -606,7 +606,7 @@ BOOST_FIXTURE_TEST_CASE(ListCoinsTest, ListCoinsTestingSetup)\n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         wallet->SetupLegacyScriptPubKeyMan();\n         wallet->SetMinVersion(FEATURE_LATEST);\n         wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n@@ -616,7 +616,7 @@ BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n         BOOST_CHECK(!wallet->GetNewDestination(OutputType::BECH32, \"\", dest, error));\n     }\n     {\n-        std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n+        const std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(m_node.chain.get(), \"\", CreateDummyWalletDatabase());\n         LOCK(wallet->cs_wallet);\n         wallet->SetWalletFlag(WALLET_FLAG_DESCRIPTORS);\n         wallet->SetMinVersion(FEATURE_LATEST);"
      },
      {
        "sha": "342e9ead8928686634a0f5364a18a73987269005",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=96461989a2de737151bc4fb216221bf49cb53ce6",
        "patch": "@@ -221,7 +221,7 @@ std::shared_ptr<CWallet> LoadWalletInternal(WalletContext& context, const std::s\n         }\n \n         context.chain->initMessage(_(\"Loading wallet\u2026\").translated);\n-        std::shared_ptr<CWallet> wallet = CWallet::Create(context, name, std::move(database), options.create_flags, error, warnings);\n+        const std::shared_ptr<CWallet> wallet = CWallet::Create(context, name, std::move(database), options.create_flags, error, warnings);\n         if (!wallet) {\n             error = Untranslated(\"Wallet loading failed.\") + Untranslated(\" \") + error;\n             status = DatabaseStatus::FAILED_LOAD;\n@@ -301,7 +301,7 @@ std::shared_ptr<CWallet> CreateWallet(WalletContext& context, const std::string&\n \n     // Make the wallet\n     context.chain->initMessage(_(\"Loading wallet\u2026\").translated);\n-    std::shared_ptr<CWallet> wallet = CWallet::Create(context, name, std::move(database), wallet_creation_flags, error, warnings);\n+    const std::shared_ptr<CWallet> wallet = CWallet::Create(context, name, std::move(database), wallet_creation_flags, error, warnings);\n     if (!wallet) {\n         error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n         status = DatabaseStatus::FAILED_CREATE;\n@@ -2540,7 +2540,7 @@ std::shared_ptr<CWallet> CWallet::Create(WalletContext& context, const std::stri\n     int64_t nStart = GetTimeMillis();\n     // TODO: Can't use std::make_shared because we need a custom deleter but\n     // should be possible to use std::allocate_shared.\n-    std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), ReleaseWallet);\n+    const std::shared_ptr<CWallet> walletInstance(new CWallet(chain, name, std::move(database)), ReleaseWallet);\n     bool rescan_required = false;\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet();\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {"
      },
      {
        "sha": "086415f15218466b9f8bcd889c0856f1ba772a3b",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96461989a2de737151bc4fb216221bf49cb53ce6/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=96461989a2de737151bc4fb216221bf49cb53ce6",
        "patch": "@@ -40,7 +40,7 @@ static void WalletCreate(CWallet* wallet_instance, uint64_t wallet_creation_flag\n     wallet_instance->TopUpKeyPool();\n }\n \n-static std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options)\n+static const std::shared_ptr<CWallet> MakeWallet(const std::string& name, const fs::path& path, DatabaseOptions options)\n {\n     DatabaseStatus status;\n     bilingual_str error;\n@@ -151,15 +151,15 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n             options.require_format = DatabaseFormat::SQLITE;\n         }\n \n-        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Close();\n         }\n     } else if (command == \"info\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Close();\n@@ -184,7 +184,7 @@ bool ExecuteWalletToolFunc(const ArgsManager& args, const std::string& command)\n     } else if (command == \"dump\") {\n         DatabaseOptions options;\n         options.require_existing = true;\n-        std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n+        const std::shared_ptr<CWallet> wallet_instance = MakeWallet(name, path, options);\n         if (!wallet_instance) return false;\n         bilingual_str error;\n         bool ret = DumpWallet(*wallet_instance, error);"
      }
    ]
  },
  {
    "sha": "54011e7aa274bdc1b921440cc8b4623aa1e0d89e",
    "node_id": "C_kwDOABII59oAKDU0MDExZTdhYTI3NGJkYzFiOTIxNDQwY2M4YjQ2MjNhYTFlMGQ4OWU",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-08-25T07:39:04Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2021-10-25T07:12:21Z"
      },
      "message": "refactor: use CWallet const shared pointers when possible\n\nWhile const shared_ptr<X> gives us an immutable shared pointer to a mutable X (we can't set it to some other X later), shared_ptr<const X> gives us a shared pointer to an immutable X. Importantly, we can recast shared_ptr<X> into shared_ptr<const X>, but not the other way around. We do this for two reasons: because it makes the code safer to guarantee the wallet is not modified, and because it further dispells the misconception that const shared_ptr<X> gives immutability to X.",
      "tree": {
        "sha": "9237e28e520366cc35e2d9661044e24f30c1c67c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9237e28e520366cc35e2d9661044e24f30c1c67c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54011e7aa274bdc1b921440cc8b4623aa1e0d89e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAmF2WNUACgkQV692LbM1\nMyKsqg/8D9+RcicGRfIsbdZZ/aLQizbBU3bFQ1A6VTYCRAZrpvf2TY12lpgYcxly\nRvjydzOlhpv9OWkqE/2W26YYyZKsr+Dztv7Vg6B1mwr9nbvot88lZOspp7G2oqj/\nGAulHDAWUlDehQP/kuTQIAvGA106BsWHnoH4fIhUteIcH/kXTw1JXvcTDn6mxm1d\nHQw1EEhuq/SjGSbJP8tTssxRCiyydBUDL8JvV3ikfpD6X7Dy1nURFotyrpCL7p3Z\nCaIiD29TWpbv6NR8CNHGMUeJkcAGVLvyXL1u624BjVUta5/lRhzHheAOxYhvHmEP\nkdZdoUrRgtpHQz4caRK1l6wvYGXyMgdITS1JmHQ53fMGMpUncAGBUgqSGHm6ONUV\n4qRu5kaqfwW1XBRFlWJkFhzcgHmy7fmWl2FrcsN75saNpJB8HeoU8MR0fjJp2Mz7\nzYPDTm30PuSmSn1/RLmhr3+EbBHDCtuOFhai7ICEtNNXaTOZV7Ls+jJ8jArPOZYm\nBHgUhw199CnvWIc7Wq3DYrA3Tt6AlYMp0jHgocwukhlckF9fPveL6murkHZ1+sqY\nJzFIq194YfYezYqZLiJeh/pw4oLoMfOGWgMpdAT3ELpZNo2TnG+Nu4FhN/x1sKFC\n8v7oONA29B+yT9RV/M02X31O6EGMyUf1IJ0STSmv+MENY3ehIzg=\n=2ExA\n-----END PGP SIGNATURE-----",
        "payload": "tree 9237e28e520366cc35e2d9661044e24f30c1c67c\nparent 96461989a2de737151bc4fb216221bf49cb53ce6\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1629877144 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1635145941 +0900\n\nrefactor: use CWallet const shared pointers when possible\n\nWhile const shared_ptr<X> gives us an immutable shared pointer to a mutable X (we can't set it to some other X later), shared_ptr<const X> gives us a shared pointer to an immutable X. Importantly, we can recast shared_ptr<X> into shared_ptr<const X>, but not the other way around. We do this for two reasons: because it makes the code safer to guarantee the wallet is not modified, and because it further dispells the misconception that const shared_ptr<X> gives immutability to X.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54011e7aa274bdc1b921440cc8b4623aa1e0d89e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54011e7aa274bdc1b921440cc8b4623aa1e0d89e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54011e7aa274bdc1b921440cc8b4623aa1e0d89e/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96461989a2de737151bc4fb216221bf49cb53ce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96461989a2de737151bc4fb216221bf49cb53ce6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96461989a2de737151bc4fb216221bf49cb53ce6"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 23,
      "deletions": 23
    },
    "files": [
      {
        "sha": "1f13b80f3e6db4b757fa17a3b9dbdf19d6fd3f36",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54011e7aa274bdc1b921440cc8b4623aa1e0d89e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54011e7aa274bdc1b921440cc8b4623aa1e0d89e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=54011e7aa274bdc1b921440cc8b4623aa1e0d89e",
        "patch": "@@ -1788,7 +1788,7 @@ RPCHelpMan listdescriptors()\n         },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> wallet = GetWalletForJSONRPCRequest(request);\n     if (!wallet) return NullUniValue;\n \n     if (!wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {"
      },
      {
        "sha": "86bfa10d888a709894541ed94d7d6f6ac688f1c9",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54011e7aa274bdc1b921440cc8b4623aa1e0d89e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54011e7aa274bdc1b921440cc8b4623aa1e0d89e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=54011e7aa274bdc1b921440cc8b4623aa1e0d89e",
        "patch": "@@ -570,7 +570,7 @@ static RPCHelpMan listaddressgroupings()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -627,7 +627,7 @@ static RPCHelpMan signmessage()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     LOCK(pwallet->cs_wallet);\n@@ -729,7 +729,7 @@ static RPCHelpMan getreceivedbyaddress()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -767,7 +767,7 @@ static RPCHelpMan getreceivedbylabel()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -807,7 +807,7 @@ static RPCHelpMan getbalance()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -846,7 +846,7 @@ static RPCHelpMan getunconfirmedbalance()\n                 RPCExamples{\"\"},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1234,7 +1234,7 @@ static RPCHelpMan listreceivedbyaddress()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1276,7 +1276,7 @@ static RPCHelpMan listreceivedbylabel()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1461,7 +1461,7 @@ static RPCHelpMan listtransactions()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1577,7 +1577,7 @@ static RPCHelpMan listsinceblock()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     const CWallet& wallet = *pwallet;\n@@ -1718,7 +1718,7 @@ static RPCHelpMan gettransaction()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -1829,7 +1829,7 @@ static RPCHelpMan backupwallet()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -2331,7 +2331,7 @@ static RPCHelpMan listlockunspent()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     LOCK(pwallet->cs_wallet);\n@@ -2424,9 +2424,9 @@ static RPCHelpMan getbalances()\n             HelpExampleRpc(\"getbalances\", \"\")},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> rpc_wallet = GetWalletForJSONRPCRequest(request);\n     if (!rpc_wallet) return NullUniValue;\n-    CWallet& wallet = *rpc_wallet;\n+    const CWallet& wallet = *rpc_wallet;\n \n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -2500,7 +2500,7 @@ static RPCHelpMan getwalletinfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     // Make sure the results are valid at least up to the most recent block\n@@ -3030,7 +3030,7 @@ static RPCHelpMan listunspent()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     int nMinDepth = 1;\n@@ -3593,7 +3593,7 @@ RPCHelpMan signrawtransactionwithwallet()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n@@ -4058,7 +4058,7 @@ RPCHelpMan getaddressinfo()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     LOCK(pwallet->cs_wallet);\n@@ -4165,7 +4165,7 @@ static RPCHelpMan getaddressesbylabel()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     LOCK(pwallet->cs_wallet);\n@@ -4226,7 +4226,7 @@ static RPCHelpMan listlabels()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     LOCK(pwallet->cs_wallet);\n@@ -4555,7 +4555,7 @@ static RPCHelpMan walletprocesspsbt()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    const std::shared_ptr<const CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n     if (!pwallet) return NullUniValue;\n \n     const CWallet& wallet{*pwallet};"
      }
    ]
  }
]