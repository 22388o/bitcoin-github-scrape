[
  {
    "sha": "36d7ef09a78113ce6a801c0451a040d698cd3d9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmQ3ZWYwOWE3ODExM2NlNmE4MDFjMDQ1MWEwNDBkNjk4Y2QzZDlk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-25T16:54:06Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-17T01:33:21Z"
      },
      "message": "Migrate versionbits to use height instead of MTP\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\n\nGithub-Pull: #21392\nRebased-From: 25ab012cfd654994ae7f6ba3ec3fa4cb0b2806d7",
      "tree": {
        "sha": "fa9f78bf3c171647ba03c1bf0fcabb5bb28d4316",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa9f78bf3c171647ba03c1bf0fcabb5bb28d4316"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36d7ef09a78113ce6a801c0451a040d698cd3d9d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d7ef09a78113ce6a801c0451a040d698cd3d9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36d7ef09a78113ce6a801c0451a040d698cd3d9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d7ef09a78113ce6a801c0451a040d698cd3d9d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0c471a5f306044cbd2eb230714571f05dd6aaf3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c471a5f306044cbd2eb230714571f05dd6aaf3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c471a5f306044cbd2eb230714571f05dd6aaf3c"
      }
    ],
    "stats": {
      "total": 322,
      "additions": 137,
      "deletions": 185
    },
    "files": [
      {
        "sha": "edac585e9128cd8a23b666d7e98aeb4fcb84359e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -83,13 +83,13 @@ class CMainParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1916; // 95% of 2016\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n \n         consensus.nMinimumChainWork = uint256S(\"0x00000000000000000000000000000000000000001533efd8d716a517fe2c5008\");\n         consensus.defaultAssumeValid = uint256S(\"0x0000000000000000000b9d2ec5a352ecba0592946514a92f14319dc2b367fc72\"); // 654683\n@@ -196,13 +196,13 @@ class CTestNetParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 1512; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 2016; // nPowTargetTimespan / nPowTargetSpacing\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n \n         // Deployment of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n \n         consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000001db6ec4ac88cf2272c6\");\n         consensus.defaultAssumeValid = uint256S(\"0x000000000000006433d1efec504c53ca332b64963c425395515b01977bd7b3b0\"); // 1864000\n@@ -327,13 +327,13 @@ class SigNetParams : public CChainParams {\n         consensus.MinBIP9WarningHeight = 0;\n         consensus.powLimit = uint256S(\"00000377ae000000000000000000000000000000000000000000000000000000\");\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 1199145601; // January 1, 2008\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = 1230767999; // December 31, 2008\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NEVER_ACTIVE;\n \n         // Activation of Taproot (BIPs 340-342)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         // message start is defined as the first 4 bytes of the sha256d of the block script\n         CHashWriter h(SER_DISK, 0);\n@@ -392,11 +392,11 @@ class CRegTestParams : public CChainParams {\n         consensus.nRuleChangeActivationThreshold = 108; // 75% for testchains\n         consensus.nMinerConfirmationWindow = 144; // Faster than normal for regtest (144 instead of 2016)\n         consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit = 28;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight = 144;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n         consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].bit = 2;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nStartTime = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].nTimeout = Consensus::BIP9Deployment::NO_TIMEOUT;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].startheight = Consensus::BIP9Deployment::ALWAYS_ACTIVE;\n+        consensus.vDeployments[Consensus::DEPLOYMENT_TAPROOT].timeoutheight = Consensus::BIP9Deployment::NO_TIMEOUT;\n \n         consensus.nMinimumChainWork = uint256{};\n         consensus.defaultAssumeValid = uint256{};\n@@ -449,10 +449,10 @@ class CRegTestParams : public CChainParams {\n     /**\n      * Allows modifying the Version Bits regtest parameters.\n      */\n-    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t nStartTime, int64_t nTimeout)\n+    void UpdateVersionBitsParameters(Consensus::DeploymentPos d, int64_t startheight, int64_t timeoutheight)\n     {\n-        consensus.vDeployments[d].nStartTime = nStartTime;\n-        consensus.vDeployments[d].nTimeout = nTimeout;\n+        consensus.vDeployments[d].startheight = startheight;\n+        consensus.vDeployments[d].timeoutheight = timeoutheight;\n     }\n     void UpdateActivationParametersFromArgs(const ArgsManager& args);\n };\n@@ -476,21 +476,21 @@ void CRegTestParams::UpdateActivationParametersFromArgs(const ArgsManager& args)\n         std::vector<std::string> vDeploymentParams;\n         boost::split(vDeploymentParams, strDeployment, boost::is_any_of(\":\"));\n         if (vDeploymentParams.size() != 3) {\n-            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:start:end\");\n+            throw std::runtime_error(\"Version bits parameters malformed, expecting deployment:@startheight:@timeoutheight\");\n         }\n-        int64_t nStartTime, nTimeout;\n-        if (!ParseInt64(vDeploymentParams[1], &nStartTime)) {\n-            throw std::runtime_error(strprintf(\"Invalid nStartTime (%s)\", vDeploymentParams[1]));\n+        int64_t startheight = 0, timeoutheight = 0;\n+        if (vDeploymentParams[1].empty() || vDeploymentParams[1].front() != '@' || !ParseInt64(vDeploymentParams[1].substr(1), &startheight)) {\n+            throw std::runtime_error(strprintf(\"Invalid startheight (%s)\", vDeploymentParams[1]));\n         }\n-        if (!ParseInt64(vDeploymentParams[2], &nTimeout)) {\n-            throw std::runtime_error(strprintf(\"Invalid nTimeout (%s)\", vDeploymentParams[2]));\n+        if (vDeploymentParams[2].empty() || vDeploymentParams[2].front() != '@' || !ParseInt64(vDeploymentParams[2].substr(1), &timeoutheight)) {\n+            throw std::runtime_error(strprintf(\"Invalid timeoutheight (%s)\", vDeploymentParams[2]));\n         }\n         bool found = false;\n         for (int j=0; j < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++j) {\n             if (vDeploymentParams[0] == VersionBitsDeploymentInfo[j].name) {\n-                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), nStartTime, nTimeout);\n+                UpdateVersionBitsParameters(Consensus::DeploymentPos(j), startheight, timeoutheight);\n                 found = true;\n-                LogPrintf(\"Setting version bits activation parameters for %s to start=%ld, timeout=%ld\\n\", vDeploymentParams[0], nStartTime, nTimeout);\n+                LogPrintf(\"Setting version bits activation parameters for %s to startheight=%ld, timeoutheight=%ld\\n\", vDeploymentParams[0], startheight, timeoutheight);\n                 break;\n             }\n         }"
      },
      {
        "sha": "caa59eab77caa6e06abe7f239c55de54f7ac1c75",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -23,7 +23,7 @@ void SetupChainParamsBaseOptions(ArgsManager& argsman)\n                  \"This is intended for regression testing tools and app development. Equivalent to -chain=regtest.\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-segwitheight=<n>\", \"Set the activation height of segwit. -1 to disable. (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-testnet\", \"Use the test chain. Equivalent to -chain=test.\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n-    argsman.AddArg(\"-vbparams=deployment:start:end\", \"Use given start/end times for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n+    argsman.AddArg(\"-vbparams=deployment:@startheight:@timeoutheight\", \"Use given start/timeout heights for specified version bits deployment (regtest-only)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signet\", \"Use the signet chain. Equivalent to -chain=signet. Note that the network is defined by the -signetchallenge parameter\", ArgsManager::ALLOW_ANY, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetchallenge\", \"Blocks must satisfy the given script to be considered valid (only for signet networks; defaults to the global default signet test network challenge)\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);\n     argsman.AddArg(\"-signetseednode\", \"Specify a seed node for the signet network, in the hostname[:port] format, e.g. sig.net:1234 (may be used multiple times to specify multiple seed nodes; defaults to the global default signet test network seed node(s))\", ArgsManager::ALLOW_STRING, OptionsCategory::CHAINPARAMS);"
      },
      {
        "sha": "1a21f7d9c934f632cd4426eb52c7c4c4e50bb82b",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -25,19 +25,22 @@ enum DeploymentPos\n struct BIP9Deployment {\n     /** Bit position to select the particular bit in nVersion. */\n     int bit;\n-    /** Start MedianTime for version bits miner confirmation. Can be a date in the past */\n-    int64_t nStartTime;\n-    /** Timeout/expiry MedianTime for the deployment attempt. */\n-    int64_t nTimeout;\n+    /** Start block height for version bits miner confirmation. Must be a retarget block, can be in the past. */\n+    int startheight;\n+    /** Timeout/expiry block height for the deployment attempt. Must be a retarget block. */\n+    int timeoutheight;\n \n-    /** Constant for nTimeout very far in the future. */\n-    static constexpr int64_t NO_TIMEOUT = std::numeric_limits<int64_t>::max();\n+    /** Constant for timeoutheight very far in the future. */\n+    static constexpr int NO_TIMEOUT = std::numeric_limits<int>::max();\n \n-    /** Special value for nStartTime indicating that the deployment is always active.\n+    /** Special value for startheight indicating that the deployment is always active.\n      *  This is useful for testing, as it means tests don't need to deal with the activation\n      *  process (which takes at least 3 BIP9 intervals). Only tests that specifically test the\n      *  behaviour during activation cannot use this. */\n-    static constexpr int64_t ALWAYS_ACTIVE = -1;\n+    static constexpr int ALWAYS_ACTIVE = -1;\n+    /** Special value for startheight and timeoutheight (both must be set) indicating that the\n+     *  deployment is entirely disabled. */\n+    static constexpr int NEVER_ACTIVE = -2;\n };\n \n /**"
      },
      {
        "sha": "0df0d7ede98e576f9e39d0b64236e87b23fd2695",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -1214,10 +1214,9 @@ static void BuriedForkDescPushBack(UniValue& softforks, const std::string &name,\n static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &name, const Consensus::Params& consensusParams, Consensus::DeploymentPos id) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // For BIP9 deployments.\n-    // Deployments (e.g. testdummy) with timeout value before Jan 1, 2009 are hidden.\n-    // A timeout value of 0 guarantees a softfork will never be activated.\n+    // Deployments (e.g. testdummy) which are marked as \"never active\" are hidden.\n     // This is used when merging logic to implement a proposed softfork without a specified deployment schedule.\n-    if (consensusParams.vDeployments[id].nTimeout <= 1230768000) return;\n+    if (consensusParams.vDeployments[id].timeoutheight == Consensus::BIP9Deployment::NEVER_ACTIVE) return;\n \n     UniValue bip9(UniValue::VOBJ);\n     const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n@@ -1232,8 +1231,8 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     {\n         bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n-    bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n-    bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n+    bip9.pushKV(\"startheight\", consensusParams.vDeployments[id].startheight);\n+    bip9.pushKV(\"timeoutheight\", consensusParams.vDeployments[id].timeoutheight);\n     int64_t since_height = VersionBitsTipStateSinceHeight(consensusParams, id);\n     bip9.pushKV(\"since\", since_height);\n     if (ThresholdState::STARTED == thresholdState)\n@@ -1290,8 +1289,8 @@ RPCHelpMan getblockchaininfo()\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n-                                    {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n-                                    {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n+                                    {RPCResult::Type::NUM, \"startheight\", \"the minimum height of a block at which the bit gains its meaning\"},\n+                                    {RPCResult::Type::NUM, \"timeoutheight\", \"the height of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n                                     {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {"
      },
      {
        "sha": "c0eb5c00985c42c9d4399042269990de45a34fad",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 116,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -34,10 +34,10 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n \n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return TestTime(10000); }\n-    int64_t EndTime(const Consensus::Params& params) const override { return TestTime(20000); }\n-    int Period(const Consensus::Params& params) const override { return 1000; }\n-    int Threshold(const Consensus::Params& params) const override { return 900; }\n+    int64_t StartHeight(const Consensus::Params& params) const override { return 100; }\n+    int64_t TimeoutHeight(const Consensus::Params& params) const override { return 200; }\n+    int Period(const Consensus::Params& params) const override { return 10; }\n+    int Threshold(const Consensus::Params& params) const override { return 9; }\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n@@ -47,14 +47,14 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n class TestAlwaysActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n+    int64_t StartHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::ALWAYS_ACTIVE; }\n };\n \n class TestNeverActiveConditionChecker : public TestConditionChecker\n {\n public:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return 1230768000; }\n+    int64_t StartHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NEVER_ACTIVE; }\n+    int64_t TimeoutHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NEVER_ACTIVE; }\n };\n \n #define CHECKERS 6\n@@ -157,65 +157,40 @@ BOOST_FIXTURE_TEST_SUITE(versionbits_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(versionbits_test)\n {\n     for (int i = 0; i < 64; i++) {\n-        // DEFINED -> FAILED\n-        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1, TestTime(1), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(11, TestTime(11), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(989, TestTime(989), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(1999, TestTime(30001), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n-                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n-\n         // DEFINED -> STARTED -> FAILED\n-                           .Reset().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2051, TestTime(10010), 0).TestStarted().TestStateSinceHeight(2000) // 51 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 899 new blocks\n-                           .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(3000) // 50 old blocks (so 899 out of the past 1000)\n-                           .Mine(4000, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(3000)\n-\n-        // DEFINED -> STARTED -> FAILED while threshold reached\n-                           .Reset().TestDefined().TestStateSinceHeight(0)\n+        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2999, TestTime(30000), 0x100).TestStarted().TestStateSinceHeight(2000) // 999 new blocks\n-                           .Mine(3000, TestTime(30000), 0x100).TestFailed().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n-                           .Mine(3999, TestTime(30001), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(14333, TestTime(30003), 0).TestFailed().TestStateSinceHeight(3000)\n-                           .Mine(24000, TestTime(40000), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(99, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One block more and it would be defined\n+                           .Mine(100, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(100) // So that's what happens the next period\n+                           .Mine(101, TestTime(10010), 0).TestStarted().TestStateSinceHeight(100) // 1 old block\n+                           .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 8 new blocks\n+                           .Mine(110, TestTime(10020), 0).TestStarted().TestStateSinceHeight(100) // 1 old block (so 8 out of the past 10 are new)\n+                           .Mine(151, TestTime(10020), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(200, TestTime(20000), 0).TestFailed().TestStateSinceHeight(200)\n+                           .Mine(300, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(200)\n \n         // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n                            .Reset().TestDefined()\n                            .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n-                           .Mine(2050, TestTime(10010), 0x200).TestStarted().TestStateSinceHeight(2000) // 50 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 900 new blocks\n-                           .Mine(2999, TestTime(19999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n-                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n-                           .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(30002), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(14333, TestTime(30003), 0).TestActive().TestStateSinceHeight(4000)\n-                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(99, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be started\n+                           .Mine(100, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(100) // So that's what happens the next period\n+                           .Mine(109, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(100) // 9 new blocks\n+                           .Mine(110, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(110) // 1 old block (so 9 out of the past 10)\n+                           .Mine(119, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(110)\n+                           .Mine(120, TestTime(30002), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(200, TestTime(30003), 0).TestActive().TestStateSinceHeight(120)\n+                           .Mine(300, TestTime(40000), 0).TestActive().TestStateSinceHeight(120)\n \n         // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n                            .Reset().TestDefined().TestStateSinceHeight(0)\n-                           .Mine(999, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(1000, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(2000, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n-                           .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n-                           .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n-                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n+                           .Mine(9, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(10, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(20, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(100, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(103, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(105, TestTime(10000), 0).TestStarted().TestStateSinceHeight(100)\n+                           .Mine(200, TestTime(20000), 0).TestFailed().TestStateSinceHeight(200)\n+                           .Mine(300, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(200);\n     }\n \n     // Sanity checks of version bit deployments\n@@ -235,8 +210,8 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n         // overlap.)\n         for (int j=i+1; j<(int) Consensus::MAX_VERSION_BITS_DEPLOYMENTS; j++) {\n             if (VersionBitsMask(mainnetParams, static_cast<Consensus::DeploymentPos>(j)) == bitmask) {\n-                BOOST_CHECK(mainnetParams.vDeployments[j].nStartTime > mainnetParams.vDeployments[i].nTimeout ||\n-                        mainnetParams.vDeployments[i].nStartTime > mainnetParams.vDeployments[j].nTimeout);\n+                BOOST_CHECK(mainnetParams.vDeployments[j].startheight > mainnetParams.vDeployments[i].timeoutheight ||\n+                        mainnetParams.vDeployments[i].startheight > mainnetParams.vDeployments[j].timeoutheight);\n             }\n         }\n     }\n@@ -245,100 +220,67 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n BOOST_AUTO_TEST_CASE(versionbits_computeblockversion)\n {\n     // Check that ComputeBlockVersion will set the appropriate bit correctly\n-    // on mainnet.\n-    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::MAIN);\n+    const auto period = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST)->GetConsensus().nMinerConfirmationWindow;\n+    gArgs.ForceSetArg(\"-vbparams\", strprintf(\"testdummy:@%s:@%s\", period, period * 2));\n+    const auto chainParams = CreateChainParams(*m_node.args, CBaseChainParams::REGTEST);\n     const Consensus::Params &mainnetParams = chainParams->GetConsensus();\n \n     // Use the TESTDUMMY deployment for testing purposes.\n     int64_t bit = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].bit;\n-    int64_t nStartTime = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nStartTime;\n-    int64_t nTimeout = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].nTimeout;\n+    int64_t startheight = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].startheight;\n+    int64_t timeoutheight = mainnetParams.vDeployments[Consensus::DEPLOYMENT_TESTDUMMY].timeoutheight;\n+    const int64_t nTime = TestTime(startheight);\n \n-    assert(nStartTime < nTimeout);\n+    assert(startheight < timeoutheight);\n \n     // In the first chain, test that the bit is set by CBV until it has failed.\n     // In the second chain, test the bit is set by CBV while STARTED and\n     // LOCKED-IN, and then no longer set while ACTIVE.\n     VersionBitsTester firstChain, secondChain;\n \n-    // Start generating blocks before nStartTime\n-    int64_t nTime = nStartTime - 1;\n-\n-    // Before MedianTimePast of the chain has crossed nStartTime, the bit\n-    // should not be set.\n+    // Start generating blocks before startheight\n+    // Before the chain has reached startheight-1, the bit should not be set.\n     CBlockIndex *lastBlock = nullptr;\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = firstChain.Mine(startheight - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n-    // Mine more blocks (4 less than the adjustment period) at the old time, and check that CBV isn't setting the bit yet.\n-    for (uint32_t i = 1; i < mainnetParams.nMinerConfirmationWindow - 4; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        // This works because VERSIONBITS_LAST_OLD_BLOCK_VERSION happens\n-        // to be 4, and the bit we're testing happens to be bit 28.\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n-    }\n-    // Now mine 5 more blocks at the start time -- MTP should not have passed yet, so\n-    // CBV should still not yet set the bit.\n-    nTime = nStartTime;\n-    for (uint32_t i = mainnetParams.nMinerConfirmationWindow - 4; i <= mainnetParams.nMinerConfirmationWindow; i++) {\n-        lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow + i, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n-    }\n-\n-    // Advance to the next period and transition to STARTED,\n-    lastBlock = firstChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    // Advance to the next block and transition to STARTED,\n+    lastBlock = firstChain.Mine(startheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     // so ComputeBlockVersion should now set the bit,\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n     // and should also be using the VERSIONBITS_TOP_BITS.\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n-    // Check that ComputeBlockVersion will set the bit until nTimeout\n-    nTime += 600;\n-    uint32_t blocksToMine = mainnetParams.nMinerConfirmationWindow * 2; // test blocks for up to 2 time periods\n-    uint32_t nHeight = mainnetParams.nMinerConfirmationWindow * 3;\n-    // These blocks are all before nTimeout is reached.\n-    while (nTime < nTimeout && blocksToMine > 0) {\n-        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n-        blocksToMine--;\n-        nTime += 600;\n-        nHeight += 1;\n-    }\n+    // Check that ComputeBlockVersion will set the bit until timeoutheight\n+    // These blocks are all before timeoutheight is reached.\n+    lastBlock = firstChain.Mine(timeoutheight - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n+    BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & VERSIONBITS_TOP_MASK, VERSIONBITS_TOP_BITS);\n \n-    nTime = nTimeout;\n-    // FAILED is only triggered at the end of a period, so CBV should be setting\n-    // the bit until the period transition.\n-    for (uint32_t i = 0; i < mainnetParams.nMinerConfirmationWindow - 1; i++) {\n-        lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n-        BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n-        nHeight += 1;\n-    }\n     // The next block should trigger no longer setting the bit.\n-    lastBlock = firstChain.Mine(nHeight+1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = firstChain.Mine(timeoutheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // On a new chain:\n     // verify that the bit will be set after lock-in, and then stop being set\n     // after activation.\n-    nTime = nStartTime;\n \n-    // Mine one period worth of blocks, and check that the bit will be on for the\n+    // Mine up until startheight-1, and check that the bit will be on for the\n     // next period.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine(startheight, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n-    // Mine another period worth of blocks, signaling the new bit.\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 2, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n+    // Mine another block, signaling the new bit.\n+    lastBlock = secondChain.Mine(startheight + mainnetParams.nMinerConfirmationWindow, nTime, VERSIONBITS_TOP_BITS | (1<<bit)).Tip();\n     // After one period of setting the bit on each block, it should have locked in.\n     // We keep setting the bit for one more period though, until activation.\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit)) != 0);\n \n     // Now check that we keep mining the block until the end of this period, and\n     // then stop at the beginning of the next period.\n-    lastBlock = secondChain.Mine((mainnetParams.nMinerConfirmationWindow * 3) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine(startheight + (mainnetParams.nMinerConfirmationWindow * 2) - 1, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK((ComputeBlockVersion(lastBlock, mainnetParams) & (1 << bit)) != 0);\n-    lastBlock = secondChain.Mine(mainnetParams.nMinerConfirmationWindow * 3, nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n+    lastBlock = secondChain.Mine(startheight + (mainnetParams.nMinerConfirmationWindow * 2), nTime, VERSIONBITS_LAST_OLD_BLOCK_VERSION).Tip();\n     BOOST_CHECK_EQUAL(ComputeBlockVersion(lastBlock, mainnetParams) & (1<<bit), 0);\n \n     // Finally, verify that after a soft fork has activated, CBV no longer uses"
      },
      {
        "sha": "070b7a42d7f8d1fa69872c5f40483ab143e4e123",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -1853,8 +1853,8 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n public:\n     explicit WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n \n-    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }\n+    int64_t StartHeight(const Consensus::Params& params) const override { return 0; }\n+    int64_t TimeoutHeight(const Consensus::Params& params) const override { return Consensus::BIP9Deployment::NO_TIMEOUT; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n "
      },
      {
        "sha": "c60c4ad8d7159e03e995d54840f1b20cda234c10",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 15,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -9,11 +9,16 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n {\n     int nPeriod = Period(params);\n     int nThreshold = Threshold(params);\n-    int64_t nTimeStart = BeginTime(params);\n-    int64_t nTimeTimeout = EndTime(params);\n+    int64_t height_start = StartHeight(params);\n+    int64_t height_timeout = TimeoutHeight(params);\n+\n+    // Check if this deployment is never active.\n+    if (height_start == Consensus::BIP9Deployment::NEVER_ACTIVE && height_timeout == Consensus::BIP9Deployment::NEVER_ACTIVE) {\n+        return ThresholdState::DEFINED;\n+    }\n \n     // Check if this deployment is always active.\n-    if (nTimeStart == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    if (height_start == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n         return ThresholdState::ACTIVE;\n     }\n \n@@ -30,8 +35,10 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n             cache[pindexPrev] = ThresholdState::DEFINED;\n             break;\n         }\n-        if (pindexPrev->GetMedianTimePast() < nTimeStart) {\n-            // Optimization: don't recompute down further, as we know every earlier block will be before the start time\n+\n+        // We track state by previous-block, so the height we should be comparing is +1\n+        if (pindexPrev->nHeight + 1 < height_start) {\n+            // Optimization: don't recompute down further, as we know every earlier block will be before the start height\n             cache[pindexPrev] = ThresholdState::DEFINED;\n             break;\n         }\n@@ -49,20 +56,19 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n         pindexPrev = vToCompute.back();\n         vToCompute.pop_back();\n \n+        // We track state by previous-block, so the height we should be comparing is +1\n+        const int64_t height = pindexPrev->nHeight + 1;\n+\n         switch (state) {\n             case ThresholdState::DEFINED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n+                if (height >= height_timeout) {\n                     stateNext = ThresholdState::FAILED;\n-                } else if (pindexPrev->GetMedianTimePast() >= nTimeStart) {\n+                } else if (height >= height_start) {\n                     stateNext = ThresholdState::STARTED;\n                 }\n                 break;\n             }\n             case ThresholdState::STARTED: {\n-                if (pindexPrev->GetMedianTimePast() >= nTimeTimeout) {\n-                    stateNext = ThresholdState::FAILED;\n-                    break;\n-                }\n                 // We need to count\n                 const CBlockIndex* pindexCount = pindexPrev;\n                 int count = 0;\n@@ -74,6 +80,8 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n                 }\n                 if (count >= nThreshold) {\n                     stateNext = ThresholdState::LOCKED_IN;\n+                } else if (height >= height_timeout) {\n+                    stateNext = ThresholdState::FAILED;\n                 }\n                 break;\n             }\n@@ -125,8 +133,8 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n \n int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n-    int64_t start_time = BeginTime(params);\n-    if (start_time == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n+    int64_t height_start = StartHeight(params);\n+    if (height_start == Consensus::BIP9Deployment::ALWAYS_ACTIVE) {\n         return 0;\n     }\n \n@@ -168,8 +176,8 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     const Consensus::DeploymentPos id;\n \n protected:\n-    int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n-    int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n+    int64_t StartHeight(const Consensus::Params& params) const override { return params.vDeployments[id].startheight; }\n+    int64_t TimeoutHeight(const Consensus::Params& params) const override { return params.vDeployments[id].timeoutheight; }\n     int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n     int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n "
      },
      {
        "sha": "80c60ca561dc19c693378f36b02dff7fcddf2f75",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -24,10 +24,10 @@ static const int32_t VERSIONBITS_NUM_BITS = 29;\n  */\n enum class ThresholdState {\n     DEFINED,   // First state that each softfork starts out as. The genesis block is by definition in this state for each deployment.\n-    STARTED,   // For blocks past the starttime.\n+    STARTED,   // For blocks past the startheight.\n     LOCKED_IN, // For one retarget period after the first retarget period with STARTED blocks of which at least threshold have the associated bit set in nVersion.\n     ACTIVE,    // For all blocks after the LOCKED_IN retarget period (final state)\n-    FAILED,    // For all blocks once the first retarget period after the timeout time is hit, if LOCKED_IN wasn't already reached (final state)\n+    FAILED,    // For all blocks once the first retarget period after the timeout height is hit, if LOCKED_IN wasn't already reached (final state)\n };\n \n // A map that gives the state for blocks whose height is a multiple of Period().\n@@ -55,8 +55,8 @@ struct BIP9Stats {\n class AbstractThresholdConditionChecker {\n protected:\n     virtual bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const =0;\n-    virtual int64_t BeginTime(const Consensus::Params& params) const =0;\n-    virtual int64_t EndTime(const Consensus::Params& params) const =0;\n+    virtual int64_t StartHeight(const Consensus::Params& params) const =0;\n+    virtual int64_t TimeoutHeight(const Consensus::Params& params) const =0;\n     virtual int Period(const Consensus::Params& params) const =0;\n     virtual int Threshold(const Consensus::Params& params) const =0;\n "
      },
      {
        "sha": "b06b8742571e7a7ab441b6f6a74a5cdee97cf71a",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -1200,7 +1200,7 @@ def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         # Node 0 has Taproot inactive, Node 1 active.\n-        self.extra_args = [[\"-par=1\", \"-vbparams=taproot:1:1\"], [\"-par=1\"]]\n+        self.extra_args = [[\"-par=1\", \"-vbparams=taproot:@1:@1\"], [\"-par=1\"]]\n \n     def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_weight=0, witness=False, accept=False):\n "
      },
      {
        "sha": "60a8274e8d110bc8bba94c453cf36555f8a6cbd6",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d7ef09a78113ce6a801c0451a040d698cd3d9d/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d7ef09a78113ce6a801c0451a040d698cd3d9d/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "patch": "@@ -135,8 +135,8 @@ def _test_getblockchaininfo(self):\n                 'bip9': {\n                     'status': 'started',\n                     'bit': 28,\n-                    'start_time': 0,\n-                    'timeout': 0x7fffffffffffffff,  # testdummy does not have a timeout so is set to the max int64 value\n+                    'startheight': 144,\n+                    'timeoutheight': 0x7fffffff,  # testdummy does not have a timeout so is set to the max int value\n                     'since': 144,\n                     'statistics': {\n                         'period': 144,\n@@ -152,8 +152,8 @@ def _test_getblockchaininfo(self):\n                 'type': 'bip9',\n                 'bip9': {\n                     'status': 'active',\n-                    'start_time': -1,\n-                    'timeout': 9223372036854775807,\n+                    'startheight': -1,\n+                    'timeoutheight': 0x7fffffff,\n                     'since': 0\n                 },\n                 'height': 0,"
      }
    ]
  },
  {
    "sha": "dc368e4957b77d6bfa1cda51f4f634e7140f7436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzM2OGU0OTU3Yjc3ZDZiZmExY2RhNTFmNGY2MzRlNzE0MGY3NDM2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-06-26T20:51:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-17T01:34:22Z"
      },
      "message": "Rename user facing mentions of BIP 9 to versionbits and/or BIP 8\n\nCo-authored-by: Anthony Towns <aj@erisian.com.au>\n\nGithub-Pull: #21392\nRebased-From: a440de1a77f64cb1859671a8487d237142df8f3a",
      "tree": {
        "sha": "36b35b9442a089804fb8fd97c86cd6e3f1913f6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36b35b9442a089804fb8fd97c86cd6e3f1913f6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc368e4957b77d6bfa1cda51f4f634e7140f7436",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc368e4957b77d6bfa1cda51f4f634e7140f7436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc368e4957b77d6bfa1cda51f4f634e7140f7436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc368e4957b77d6bfa1cda51f4f634e7140f7436/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d7ef09a78113ce6a801c0451a040d698cd3d9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36d7ef09a78113ce6a801c0451a040d698cd3d9d"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 24,
      "deletions": 16
    },
    "files": [
      {
        "sha": "ec519166dbbefd092a1d0c15ec874b7bfea25d55",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc368e4957b77d6bfa1cda51f4f634e7140f7436/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc368e4957b77d6bfa1cda51f4f634e7140f7436/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=dc368e4957b77d6bfa1cda51f4f634e7140f7436",
        "patch": "@@ -1,6 +1,7 @@\n BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.21.0**):\n \n-* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575))\n+* [`BIP 8`](https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki): The changes for parallel, rapid deployment based on block height miner activation have been implemented since **v0.21.1** ([PR #21392](https://github.com/bitcoin/bitcoin/pull/21392)). The UASF fallback with forced signaling (`LOT=true`) has not yet been implemented. The current implementation is the equivalent of `LOT=false`.\n+* [`BIP 9`](https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki): The changes allowing multiple soft-forks to be deployed in parallel have been implemented since **v0.12.1**  ([PR #7575](https://github.com/bitcoin/bitcoin/pull/7575)) Support was removed in **v0.21.1** ([PR #21392](https://github.com/bitcoin/bitcoin/pull/21392)).\n * [`BIP 11`](https://github.com/bitcoin/bips/blob/master/bip-0011.mediawiki): Multisig outputs are standard since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 13`](https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki): The address format for P2SH addresses has been implemented since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669)).\n * [`BIP 14`](https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki): The subversion string is being used as User Agent since **v0.6.0** ([PR #669](https://github.com/bitcoin/bitcoin/pull/669))."
      },
      {
        "sha": "76f83102916471042974cde355ddb5ffbe1f402a",
        "filename": "doc/release-notes-21392.md",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc368e4957b77d6bfa1cda51f4f634e7140f7436/doc/release-notes-21392.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc368e4957b77d6bfa1cda51f4f634e7140f7436/doc/release-notes-21392.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-21392.md?ref=dc368e4957b77d6bfa1cda51f4f634e7140f7436",
        "patch": "@@ -0,0 +1,7 @@\n+Low-level changes\n+=================\n+\n+RPC\n+---\n+\n+* BIP 9 has been replaced with a partial implementation of BIP 8. This change is reflected in `getblockchaininfo` where references to BIP 9 have been replaced with references to BIP 8."
      },
      {
        "sha": "45eb6f2b5aa93e339ba9d16e396cc3bace2181fc",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc368e4957b77d6bfa1cda51f4f634e7140f7436/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc368e4957b77d6bfa1cda51f4f634e7140f7436/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=dc368e4957b77d6bfa1cda51f4f634e7140f7436",
        "patch": "@@ -1248,8 +1248,8 @@ static void BIP9SoftForkDescPushBack(UniValue& softforks, const std::string &nam\n     }\n \n     UniValue rv(UniValue::VOBJ);\n-    rv.pushKV(\"type\", \"bip9\");\n-    rv.pushKV(\"bip9\", bip9);\n+    rv.pushKV(\"type\", \"bip8\");\n+    rv.pushKV(\"bip8\", bip9);\n     if (ThresholdState::ACTIVE == thresholdState) {\n         rv.pushKV(\"height\", since_height);\n     }\n@@ -1284,24 +1284,24 @@ RPCHelpMan getblockchaininfo()\n                         {\n                             {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n-                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n-                                {RPCResult::Type::OBJ, \"bip9\", \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n+                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip8\\\"\"},\n+                                {RPCResult::Type::OBJ, \"bip8\", \"status of BIP 8 softforks (only for \\\"bip8\\\" type)\",\n                                 {\n                                     {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\"},\n                                     {RPCResult::Type::NUM, \"startheight\", \"the minimum height of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM, \"timeoutheight\", \"the height of a block at which the deployment is considered failed if not yet locked in\"},\n                                     {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n-                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP9 signalling for a softfork (only for \\\"started\\\" status)\",\n+                                    {RPCResult::Type::OBJ, \"statistics\", \"numeric statistics about BIP8 signalling for a softfork (only for \\\"started\\\" status)\",\n                                     {\n-                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP9 signalling period\"},\n+                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the BIP8 signalling period\"},\n                                         {RPCResult::Type::NUM, \"threshold\", \"the number of blocks with the version bit set required to activate the feature\"},\n                                         {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n                                         {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n                                         {RPCResult::Type::BOOL, \"possible\", \"returns false if there are not enough blocks left in this period to pass activation threshold\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::NUM, \"height\", \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip8\\\" type with \\\"active\\\" status)\"},\n                                 {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n                             }},\n                         }},"
      },
      {
        "sha": "07d95e50f3b357bd2cc8982f62cb8fac5f5dc9e5",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc368e4957b77d6bfa1cda51f4f634e7140f7436/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc368e4957b77d6bfa1cda51f4f634e7140f7436/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=dc368e4957b77d6bfa1cda51f4f634e7140f7436",
        "patch": "@@ -512,10 +512,10 @@ static RPCHelpMan getblocktemplate()\n     return RPCHelpMan{\"getblocktemplate\",\n                 \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n                 \"It returns data needed to construct a block to work on.\\n\"\n-                \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n+                \"For full specification, see BIPs 22, 23, 8, and 145:\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n-                \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+                \"    https://github.com/bitcoin/bips/blob/master/bip-0008.mediawiki#getblocktemplate_changes\\n\"\n                 \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\",\n                 {\n                     {\"template_request\", RPCArg::Type::OBJ, \"{}\", \"Format of the template\",\n@@ -541,9 +541,9 @@ static RPCHelpMan getblocktemplate()\n                         {RPCResult::Type::NUM, \"version\", \"The preferred block version\"},\n                         {RPCResult::Type::ARR, \"rules\", \"specific block rules that are to be enforced\",\n                             {\n-                                {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 9 for format\"},\n+                                {RPCResult::Type::STR, \"\", \"name of a rule the client must understand to some extent; see BIP 8 for format\"},\n                             }},\n-                        {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit (BIP 9) softfork deployments\",\n+                        {RPCResult::Type::OBJ_DYN, \"vbavailable\", \"set of pending, supported versionbit softfork deployments\",\n                             {\n                                 {RPCResult::Type::NUM, \"rulename\", \"identifies the bit number as indicating acceptance and readiness for the named softfork rule\"},\n                             }},"
      },
      {
        "sha": "072c8c964bc2fd363dcf265b66f5ca1c6c28535f",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc368e4957b77d6bfa1cda51f4f634e7140f7436/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc368e4957b77d6bfa1cda51f4f634e7140f7436/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=dc368e4957b77d6bfa1cda51f4f634e7140f7436",
        "patch": "@@ -131,8 +131,8 @@ def _test_getblockchaininfo(self):\n             'csv': {'type': 'buried', 'active': False, 'height': 432},\n             'segwit': {'type': 'buried', 'active': True, 'height': 0},\n             'testdummy': {\n-                'type': 'bip9',\n-                'bip9': {\n+                'type': 'bip8',\n+                'bip8': {\n                     'status': 'started',\n                     'bit': 28,\n                     'startheight': 144,\n@@ -149,8 +149,8 @@ def _test_getblockchaininfo(self):\n                 'active': False\n             },\n             'taproot': {\n-                'type': 'bip9',\n-                'bip9': {\n+                'type': 'bip8',\n+                'bip8': {\n                     'status': 'active',\n                     'startheight': -1,\n                     'timeoutheight': 0x7fffffff,"
      }
    ]
  }
]