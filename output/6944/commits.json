[
  {
    "sha": "7072c544b52774ac5a22835121e8e2747ad61158",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDcyYzU0NGI1Mjc3NGFjNWEyMjgzNTEyMWU4ZTI3NDdhZDYxMTU4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-09-29T21:17:24Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-09-30T13:24:42Z"
      },
      "message": "Support very-fast-running benchmarks\n\nAvoid calling gettimeofday every time through the benchmarking loop, by keeping\ntrack of how long each loop takes and doubling the number of iterations done\nbetween time checks when they take less than 1/16'th of the total elapsed time.",
      "tree": {
        "sha": "61bab3fc434f5c058ef43a73cf2cc3b4fd78661a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61bab3fc434f5c058ef43a73cf2cc3b4fd78661a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7072c544b52774ac5a22835121e8e2747ad61158",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlYL4poACgkQdYgkL74406hzfgCeIM6/Fp4CrJ5K+xoexZFysBhD\ngboAn2BrqDz6DggITJidZsOZQvLzaMae\n=Ze/N\n-----END PGP SIGNATURE-----",
        "payload": "tree 61bab3fc434f5c058ef43a73cf2cc3b4fd78661a\nparent 535ed9223dcb32bf90ead5b2c95052838b780620\nauthor Gavin Andresen <gavinandresen@gmail.com> 1443561444 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1443619482 -0400\n\nSupport very-fast-running benchmarks\n\nAvoid calling gettimeofday every time through the benchmarking loop, by keeping\ntrack of how long each loop takes and doubling the number of iterations done\nbetween time checks when they take less than 1/16'th of the total elapsed time.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7072c544b52774ac5a22835121e8e2747ad61158",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7072c544b52774ac5a22835121e8e2747ad61158",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7072c544b52774ac5a22835121e8e2747ad61158/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "535ed9223dcb32bf90ead5b2c95052838b780620",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/535ed9223dcb32bf90ead5b2c95052838b780620",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/535ed9223dcb32bf90ead5b2c95052838b780620"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "61fe9e287d80e7597009014d6dd7fa7e0c5eeedf",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -7,7 +7,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/bench_bitcoin.cpp \\\n   bench/bench.cpp \\\n   bench/bench.h \\\n-  bench/MilliSleep.cpp\n+  bench/Examples.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_LDADD = \\"
      },
      {
        "sha": "b6b020a97189d84e93d24a8a7d88fff17859aa43",
        "filename": "src/bench/Examples.cpp",
        "status": "renamed",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/Examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/Examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/Examples.cpp?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -6,6 +6,8 @@\n #include \"main.h\"\n #include \"utiltime.h\"\n \n+// Sanity test: this should loop ten times, and\n+// min/max/average should be close to 100ms.\n static void Sleep100ms(benchmark::State& state)\n {\n     while (state.KeepRunning()) {\n@@ -14,3 +16,19 @@ static void Sleep100ms(benchmark::State& state)\n }\n \n BENCHMARK(Sleep100ms);\n+\n+// Extremely fast-running benchmark:\n+#include <math.h>\n+\n+volatile double sum = 0.0; // volatile, global so not optimized away\n+\n+static void Trig(benchmark::State& state)\n+{\n+    double d = 0.01;\n+    while (state.KeepRunning()) {\n+        sum += sin(d);\n+        d += 0.000001;\n+    }\n+}\n+\n+BENCHMARK(Trig);",
        "previous_filename": "src/bench/MilliSleep.cpp"
      },
      {
        "sha": "89c3b0cc2a1b7054d00cfb6b33c50f88ffd7c329",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -36,14 +36,22 @@ BenchRunner::RunAll(double elapsedTimeForOne)\n \n bool State::KeepRunning()\n {\n-    double now = gettimedouble();\n+    double now;\n     if (count == 0) {\n-        beginTime = now;\n+        beginTime = now = gettimedouble();\n     }\n     else {\n-        double elapsedOne = now - lastTime;\n+        // timeCheckCount is used to avoid calling gettime most of the time,\n+        // so benchmarks that run very quickly get consistent results.\n+        if ((count+1)%timeCheckCount != 0) {\n+            ++count;\n+            return true; // keep going\n+        }\n+        now = gettimedouble();\n+        double elapsedOne = (now - lastTime)/timeCheckCount;\n         if (elapsedOne < minTime) minTime = elapsedOne;\n         if (elapsedOne > maxTime) maxTime = elapsedOne;\n+        if (elapsedOne*timeCheckCount < maxElapsed/16) timeCheckCount *= 2;\n     }\n     lastTime = now;\n     ++count;"
      },
      {
        "sha": "bf591a2be6ff59d67181abf8ddd13f45349789dd",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7072c544b52774ac5a22835121e8e2747ad61158/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=7072c544b52774ac5a22835121e8e2747ad61158",
        "patch": "@@ -41,10 +41,12 @@ namespace benchmark {\n         double beginTime;\n         double lastTime, minTime, maxTime;\n         int64_t count;\n+        int64_t timeCheckCount;\n     public:\n         State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n             minTime = std::numeric_limits<double>::max();\n             maxTime = std::numeric_limits<double>::min();\n+            timeCheckCount = 1;\n         }\n         bool KeepRunning();\n     };"
      }
    ]
  },
  {
    "sha": "5424d416c2d0fd692ac55d4a2fd761a35333597d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDI0ZDQxNmMyZDBmZDY5MmFjNTVkNGEyZmQ3NjFhMzUzMzM1OTdk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-30T12:37:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-30T15:09:35Z"
      },
      "message": "doc: Change #bitcoin-dev IRC channel to #bitcoin-core-dev\n\nSplit off Bitcoin Core project development discussion from the general\nBitcoin development channel.",
      "tree": {
        "sha": "33f615e160814b4b5f035a589793ed4e14a67023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33f615e160814b4b5f035a589793ed4e14a67023"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5424d416c2d0fd692ac55d4a2fd761a35333597d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5424d416c2d0fd692ac55d4a2fd761a35333597d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5424d416c2d0fd692ac55d4a2fd761a35333597d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5424d416c2d0fd692ac55d4a2fd761a35333597d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f44530bc38fb8367c2b9bde21492b545e7f7f26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f44530bc38fb8367c2b9bde21492b545e7f7f26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f44530bc38fb8367c2b9bde21492b545e7f7f26"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "275367ebbbcb6644af552b0946cd8e89ca62df7b",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5424d416c2d0fd692ac55d4a2fd761a35333597d/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5424d416c2d0fd692ac55d4a2fd761a35333597d/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=5424d416c2d0fd692ac55d4a2fd761a35333597d",
        "patch": "@@ -36,7 +36,7 @@ The developer [mailing list](https://lists.linuxfoundation.org/mailman/listinfo/\n should be used to discuss complicated or controversial changes before working\n on a patch set.\n \n-Developer IRC can be found on Freenode at #bitcoin-dev.\n+Developer IRC can be found on Freenode at #bitcoin-core-dev.\n \n Testing\n -------"
      },
      {
        "sha": "3e3f4a294ff4e32b444d4feddf4e1d26d6d5d248",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5424d416c2d0fd692ac55d4a2fd761a35333597d/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5424d416c2d0fd692ac55d4a2fd761a35333597d/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=5424d416c2d0fd692ac55d4a2fd761a35333597d",
        "patch": "@@ -64,7 +64,8 @@ The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss on [#bitcoin-dev](http://webchat.freenode.net/?channels=bitcoin) on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n+* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)"
      },
      {
        "sha": "b06975e1d8da48427827b3cca74d83d4e53c602a",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5424d416c2d0fd692ac55d4a2fd761a35333597d/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5424d416c2d0fd692ac55d4a2fd761a35333597d/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=5424d416c2d0fd692ac55d4a2fd761a35333597d",
        "patch": "@@ -106,6 +106,6 @@ To create a new language template, you will need to edit the languages manifest\n **Note:** that the language translation file **must end in `.qm`** (the compiled extension), and not `.ts`.\n \n ### Questions and general assistance\n-The Bitcoin-Core translation maintainers include *tcatm, seone, Diapolo, wumpus and luke-jr*.You can find them, and others, in the Freenode IRC chatroom - `irc.freenode.net #bitcoin-dev`.\n+The Bitcoin-Core translation maintainers include *tcatm, seone, Diapolo, wumpus and luke-jr*. You can find them, and others, in the Freenode IRC chatroom - `irc.freenode.net #bitcoin-core-dev`.\n \n If you are a translator, you should also subscribe to the mailing list, https://groups.google.com/forum/#!forum/bitcoin-translators. Announcements will be posted during application pre-releases to notify translators to check for updates."
      }
    ]
  },
  {
    "sha": "1119cc3f5918575ca397518c9fd31a64704c7e4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTE5Y2MzZjU5MTg1NzVjYTM5NzUxOGM5ZmQzMWE2NDcwNGM3ZTRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-30T15:12:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-30T15:13:34Z"
      },
      "message": "Merge pull request #6741\n\n5424d41 doc: Change #bitcoin-dev IRC channel to #bitcoin-core-dev (Wladimir J. van der Laan)",
      "tree": {
        "sha": "33f615e160814b4b5f035a589793ed4e14a67023",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33f615e160814b4b5f035a589793ed4e14a67023"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1119cc3f5918575ca397518c9fd31a64704c7e4f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWC/weAAoJEHSBCwEjRsmm1/kIAIWulpzW5ebkY5Patz75XZFP\nxmDl9GwRkYWnQsXTqo5jMhBzuRg0Li20yMGybxSmqdi6Zu8nz9LP7rdfo642KXRu\n781UqAaDOc47j5FsPQ+tVs7+zPn9dctVyF3+eiqMjyj/Ctolk6b1Dx0bgKRNVzXY\nOV5uGgJoxGv00ZOZwujajtIeL93yT0g0uJwAXfkrAsA2e2I+dmV6zHzSX70d93h7\nX1jMIcGajkgbN3xWSD2k66mkK89stuq3dDFrY0oPh5bEfoXGuYN0FZgA8hqVbtLs\nMIAClVAWKeZ8b8UExA6erSFCCEMq0A15VnUJh0L01tR7WvzGG3TtL6OqkGaiGNs=\n=AB+y\n-----END PGP SIGNATURE-----",
        "payload": "tree 33f615e160814b4b5f035a589793ed4e14a67023\nparent 4f44530bc38fb8367c2b9bde21492b545e7f7f26\nparent 5424d416c2d0fd692ac55d4a2fd761a35333597d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443625920 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443626014 +0200\n\nMerge pull request #6741\n\n5424d41 doc: Change #bitcoin-dev IRC channel to #bitcoin-core-dev (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119cc3f5918575ca397518c9fd31a64704c7e4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1119cc3f5918575ca397518c9fd31a64704c7e4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119cc3f5918575ca397518c9fd31a64704c7e4f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f44530bc38fb8367c2b9bde21492b545e7f7f26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f44530bc38fb8367c2b9bde21492b545e7f7f26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f44530bc38fb8367c2b9bde21492b545e7f7f26"
      },
      {
        "sha": "5424d416c2d0fd692ac55d4a2fd761a35333597d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5424d416c2d0fd692ac55d4a2fd761a35333597d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5424d416c2d0fd692ac55d4a2fd761a35333597d"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "275367ebbbcb6644af552b0946cd8e89ca62df7b",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -36,7 +36,7 @@ The developer [mailing list](https://lists.linuxfoundation.org/mailman/listinfo/\n should be used to discuss complicated or controversial changes before working\n on a patch set.\n \n-Developer IRC can be found on Freenode at #bitcoin-dev.\n+Developer IRC can be found on Freenode at #bitcoin-core-dev.\n \n Testing\n -------"
      },
      {
        "sha": "3e3f4a294ff4e32b444d4feddf4e1d26d6d5d248",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -64,7 +64,8 @@ The Bitcoin repo's [root README](https://github.com/bitcoin/bitcoin/blob/master/\n \n ### Resources\n * Discuss on the [BitcoinTalk](https://bitcointalk.org/) forums, in the [Development & Technical Discussion board](https://bitcointalk.org/index.php?board=6.0).\n-* Discuss on [#bitcoin-dev](http://webchat.freenode.net/?channels=bitcoin) on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n+* Discuss project-specific development on #bitcoin-core-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-core-dev).\n+* Discuss general Bitcoin development on #bitcoin-dev on Freenode. If you don't have an IRC client use [webchat here](http://webchat.freenode.net/?channels=bitcoin-dev).\n \n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)"
      },
      {
        "sha": "b06975e1d8da48427827b3cca74d83d4e53c602a",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -106,6 +106,6 @@ To create a new language template, you will need to edit the languages manifest\n **Note:** that the language translation file **must end in `.qm`** (the compiled extension), and not `.ts`.\n \n ### Questions and general assistance\n-The Bitcoin-Core translation maintainers include *tcatm, seone, Diapolo, wumpus and luke-jr*.You can find them, and others, in the Freenode IRC chatroom - `irc.freenode.net #bitcoin-dev`.\n+The Bitcoin-Core translation maintainers include *tcatm, seone, Diapolo, wumpus and luke-jr*. You can find them, and others, in the Freenode IRC chatroom - `irc.freenode.net #bitcoin-core-dev`.\n \n If you are a translator, you should also subscribe to the mailing list, https://groups.google.com/forum/#!forum/bitcoin-translators. Announcements will be posted during application pre-releases to notify translators to check for updates."
      }
    ]
  },
  {
    "sha": "58981d4f7d3cab872239f5aa3a8125e06cb93bfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODk4MWQ0ZjdkM2NhYjg3MjIzOWY1YWEzYTgxMjVlMDZjYjkzYmZk",
    "commit": {
      "author": {
        "name": "Arne Brutschy",
        "email": "abrutschy@xylon.de",
        "date": "2015-09-30T15:57:28Z"
      },
      "committer": {
        "name": "Arne Brutschy",
        "email": "abrutschy@xylon.de",
        "date": "2015-09-30T15:57:28Z"
      },
      "message": "Changed logging to make -logtimestamps to work also for -printtoconsole",
      "tree": {
        "sha": "08e990c35bea2d1da8da249036bb4a8be2b57a81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08e990c35bea2d1da8da249036bb4a8be2b57a81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58981d4f7d3cab872239f5aa3a8125e06cb93bfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58981d4f7d3cab872239f5aa3a8125e06cb93bfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58981d4f7d3cab872239f5aa3a8125e06cb93bfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58981d4f7d3cab872239f5aa3a8125e06cb93bfd/comments",
    "author": {
      "login": "arnuschky",
      "id": 179920,
      "node_id": "MDQ6VXNlcjE3OTkyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/179920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnuschky",
      "html_url": "https://github.com/arnuschky",
      "followers_url": "https://api.github.com/users/arnuschky/followers",
      "following_url": "https://api.github.com/users/arnuschky/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnuschky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnuschky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnuschky/subscriptions",
      "organizations_url": "https://api.github.com/users/arnuschky/orgs",
      "repos_url": "https://api.github.com/users/arnuschky/repos",
      "events_url": "https://api.github.com/users/arnuschky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnuschky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "arnuschky",
      "id": 179920,
      "node_id": "MDQ6VXNlcjE3OTkyMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/179920?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/arnuschky",
      "html_url": "https://github.com/arnuschky",
      "followers_url": "https://api.github.com/users/arnuschky/followers",
      "following_url": "https://api.github.com/users/arnuschky/following{/other_user}",
      "gists_url": "https://api.github.com/users/arnuschky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/arnuschky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/arnuschky/subscriptions",
      "organizations_url": "https://api.github.com/users/arnuschky/orgs",
      "repos_url": "https://api.github.com/users/arnuschky/repos",
      "events_url": "https://api.github.com/users/arnuschky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/arnuschky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f44530bc38fb8367c2b9bde21492b545e7f7f26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f44530bc38fb8367c2b9bde21492b545e7f7f26",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f44530bc38fb8367c2b9bde21492b545e7f7f26"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8192a7c71ca6fad3568f4e52dfa702b9cfdfd69f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58981d4f7d3cab872239f5aa3a8125e06cb93bfd/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58981d4f7d3cab872239f5aa3a8125e06cb93bfd/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=58981d4f7d3cab872239f5aa3a8125e06cb93bfd",
        "patch": "@@ -280,19 +280,20 @@ int LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n     static bool fStartedNewLine = true;\n+\n+    string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n+\n     if (fPrintToConsole)\n     {\n         // print to console\n-        ret = fwrite(str.data(), 1, str.size(), stdout);\n+        ret = fwrite(strTimestamped.data(), 1, strTimestamped.size(), stdout);\n         fflush(stdout);\n     }\n     else if (fPrintToDebugLog)\n     {\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n         boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-        string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n-\n         // buffer if we haven't opened the log yet\n         if (fileout == NULL) {\n             assert(vMsgsBeforeOpenLog);"
      }
    ]
  },
  {
    "sha": "0917306fdf39b12556b95fe91be2e7b44d34bb9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTE3MzA2ZmRmMzliMTI1NTZiOTVmZTkxYmUyZTdiNDRkMzRiYjlm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-04T14:59:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:36:50Z"
      },
      "message": "remove univalue, prepare for subtree",
      "tree": {
        "sha": "49e89d23481cb667edae981c01a12a35069d9990",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49e89d23481cb667edae981c01a12a35069d9990"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1119cc3f5918575ca397518c9fd31a64704c7e4f"
      }
    ],
    "stats": {
      "total": 1406,
      "additions": 0,
      "deletions": 1406
    },
    "files": [
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "src/univalue/gen.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// To re-create univalue_escapes.h:\n-// $ g++ -o gen gen.cpp\n-// $ ./gen > univalue_escapes.h\n-//\n-\n-#include <ctype.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include \"univalue.h\"\n-\n-using namespace std;\n-\n-static bool initEscapes;\n-static const char *escapes[256];\n-\n-static void initJsonEscape()\n-{\n-    escapes[(int)'\"'] = \"\\\\\\\"\";\n-    escapes[(int)'\\\\'] = \"\\\\\\\\\";\n-    escapes[(int)'\\b'] = \"\\\\b\";\n-    escapes[(int)'\\f'] = \"\\\\f\";\n-    escapes[(int)'\\n'] = \"\\\\n\";\n-    escapes[(int)'\\r'] = \"\\\\r\";\n-    escapes[(int)'\\t'] = \"\\\\t\";\n-\n-    initEscapes = true;\n-}\n-\n-static void outputEscape()\n-{\n-\tprintf(\t\"// Automatically generated file. Do not modify.\\n\"\n-\t\t\"#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n-\t\t\"#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n-\t\t\"static const char *escapes[256] = {\\n\");\n-\n-\tfor (unsigned int i = 0; i < 256; i++) {\n-\t\tif (!escapes[i]) {\n-\t\t\tprintf(\"\\tNULL,\\n\");\n-\t\t} else {\n-\t\t\tprintf(\"\\t\\\"\");\n-\n-\t\t\tunsigned int si;\n-\t\t\tfor (si = 0; si < strlen(escapes[i]); si++) {\n-\t\t\t\tchar ch = escapes[i][si];\n-\t\t\t\tswitch (ch) {\n-\t\t\t\tcase '\"':\n-\t\t\t\t\tprintf(\"\\\\\\\"\");\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase '\\\\':\n-\t\t\t\t\tprintf(\"\\\\\\\\\");\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tprintf(\"%c\", escapes[i][si]);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tprintf(\"\\\",\\n\");\n-\t\t}\n-\t}\n-\n-\tprintf(\t\"};\\n\"\n-\t\t\"#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\");\n-}\n-\n-int main (int argc, char *argv[])\n-{\n-\tinitJsonEscape();\n-\toutputEscape();\n-\treturn 0;\n-}\n-"
      },
      {
        "sha": "1d49a2cfc9e65680535e43a07b9dfdfb4cbf244a",
        "filename": "src/univalue/univalue.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 303,
        "changes": 303,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,303 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <stdint.h>\n-#include <ctype.h>\n-#include <iomanip>\n-#include <sstream>\n-#include <stdexcept>      // std::runtime_error\n-\n-#include \"univalue.h\"\n-\n-#include \"utilstrencodings.h\" // ParseXX\n-\n-using namespace std;\n-\n-const UniValue NullUniValue;\n-\n-void UniValue::clear()\n-{\n-    typ = VNULL;\n-    val.clear();\n-    keys.clear();\n-    values.clear();\n-}\n-\n-bool UniValue::setNull()\n-{\n-    clear();\n-    return true;\n-}\n-\n-bool UniValue::setBool(bool val_)\n-{\n-    clear();\n-    typ = VBOOL;\n-    if (val_)\n-        val = \"1\";\n-    return true;\n-}\n-\n-static bool validNumStr(const string& s)\n-{\n-    string tokenVal;\n-    unsigned int consumed;\n-    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n-    return (tt == JTOK_NUMBER);\n-}\n-\n-bool UniValue::setNumStr(const string& val_)\n-{\n-    if (!validNumStr(val_))\n-        return false;\n-\n-    clear();\n-    typ = VNUM;\n-    val = val_;\n-    return true;\n-}\n-\n-bool UniValue::setInt(uint64_t val)\n-{\n-    string s;\n-    ostringstream oss;\n-\n-    oss << val;\n-\n-    return setNumStr(oss.str());\n-}\n-\n-bool UniValue::setInt(int64_t val)\n-{\n-    string s;\n-    ostringstream oss;\n-\n-    oss << val;\n-\n-    return setNumStr(oss.str());\n-}\n-\n-bool UniValue::setFloat(double val)\n-{\n-    string s;\n-    ostringstream oss;\n-\n-    oss << std::setprecision(16) << val;\n-\n-    bool ret = setNumStr(oss.str());\n-    typ = VNUM;\n-    return ret;\n-}\n-\n-bool UniValue::setStr(const string& val_)\n-{\n-    clear();\n-    typ = VSTR;\n-    val = val_;\n-    return true;\n-}\n-\n-bool UniValue::setArray()\n-{\n-    clear();\n-    typ = VARR;\n-    return true;\n-}\n-\n-bool UniValue::setObject()\n-{\n-    clear();\n-    typ = VOBJ;\n-    return true;\n-}\n-\n-bool UniValue::push_back(const UniValue& val)\n-{\n-    if (typ != VARR)\n-        return false;\n-\n-    values.push_back(val);\n-    return true;\n-}\n-\n-bool UniValue::push_backV(const std::vector<UniValue>& vec)\n-{\n-    if (typ != VARR)\n-        return false;\n-\n-    values.insert(values.end(), vec.begin(), vec.end());\n-\n-    return true;\n-}\n-\n-bool UniValue::pushKV(const std::string& key, const UniValue& val)\n-{\n-    if (typ != VOBJ)\n-        return false;\n-\n-    keys.push_back(key);\n-    values.push_back(val);\n-    return true;\n-}\n-\n-bool UniValue::pushKVs(const UniValue& obj)\n-{\n-    if (typ != VOBJ || obj.typ != VOBJ)\n-        return false;\n-\n-    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n-        keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values[i]);\n-    }\n-\n-    return true;\n-}\n-\n-int UniValue::findKey(const std::string& key) const\n-{\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (keys[i] == key)\n-            return (int) i;\n-    }\n-\n-    return -1;\n-}\n-\n-bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n-{\n-    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n-         it != t.end(); it++) {\n-        int idx = findKey(it->first);\n-        if (idx < 0)\n-            return false;\n-\n-        if (values[idx].getType() != it->second)\n-            return false;\n-    }\n-\n-    return true;\n-}\n-\n-const UniValue& UniValue::operator[](const std::string& key) const\n-{\n-    if (typ != VOBJ)\n-        return NullUniValue;\n-\n-    int index = findKey(key);\n-    if (index < 0)\n-        return NullUniValue;\n-\n-    return values[index];\n-}\n-\n-const UniValue& UniValue::operator[](unsigned int index) const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        return NullUniValue;\n-    if (index >= values.size())\n-        return NullUniValue;\n-\n-    return values[index];\n-}\n-\n-const char *uvTypeName(UniValue::VType t)\n-{\n-    switch (t) {\n-    case UniValue::VNULL: return \"null\";\n-    case UniValue::VBOOL: return \"bool\";\n-    case UniValue::VOBJ: return \"object\";\n-    case UniValue::VARR: return \"array\";\n-    case UniValue::VSTR: return \"string\";\n-    case UniValue::VNUM: return \"number\";\n-    }\n-\n-    // not reached\n-    return NULL;\n-}\n-\n-const UniValue& find_value( const UniValue& obj, const std::string& name)\n-{\n-    for (unsigned int i = 0; i < obj.keys.size(); i++)\n-    {\n-        if( obj.keys[i] == name )\n-        {\n-            return obj.values[i];\n-        }\n-    }\n-\n-    return NullUniValue;\n-}\n-\n-std::vector<std::string> UniValue::getKeys() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return keys;\n-}\n-\n-std::vector<UniValue> UniValue::getValues() const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n-    return values;\n-}\n-\n-bool UniValue::get_bool() const\n-{\n-    if (typ != VBOOL)\n-        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n-    return getBool();\n-}\n-\n-std::string UniValue::get_str() const\n-{\n-    if (typ != VSTR)\n-        throw std::runtime_error(\"JSON value is not a string as expected\");\n-    return getValStr();\n-}\n-\n-int UniValue::get_int() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int32_t retval;\n-    if (!ParseInt32(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-int64_t UniValue::get_int64() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int64_t retval;\n-    if (!ParseInt64(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-double UniValue::get_real() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not a number as expected\");\n-    double retval;\n-    if (!ParseDouble(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON double out of range\");\n-    return retval;\n-}\n-\n-const UniValue& UniValue::get_obj() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return *this;\n-}\n-\n-const UniValue& UniValue::get_array() const\n-{\n-    if (typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an array as expected\");\n-    return *this;\n-}\n-"
      },
      {
        "sha": "4742b56f3d566d50d7588b035f38fb886f762f2d",
        "filename": "src/univalue/univalue.h",
        "status": "removed",
        "additions": 0,
        "deletions": 248,
        "changes": 248,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,248 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UNIVALUE_UNIVALUE_H\n-#define BITCOIN_UNIVALUE_UNIVALUE_H\n-\n-#include <stdint.h>\n-#include <string>\n-#include <vector>\n-#include <map>\n-#include <cassert>\n-\n-#include <sstream>        // .get_int64()\n-#include <utility>        // std::pair\n-\n-class UniValue {\n-public:\n-    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n-\n-    UniValue() { typ = VNULL; }\n-    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n-        typ = initialType;\n-        val = initialStr;\n-    }\n-    UniValue(uint64_t val_) {\n-        setInt(val_);\n-    }\n-    UniValue(int64_t val_) {\n-        setInt(val_);\n-    }\n-    UniValue(bool val_) {\n-        setBool(val_);\n-    }\n-    UniValue(int val_) {\n-        setInt(val_);\n-    }\n-    UniValue(double val_) {\n-        setFloat(val_);\n-    }\n-    UniValue(const std::string& val_) {\n-        setStr(val_);\n-    }\n-    UniValue(const char *val_) {\n-        std::string s(val_);\n-        setStr(s);\n-    }\n-    ~UniValue() {}\n-\n-    void clear();\n-\n-    bool setNull();\n-    bool setBool(bool val);\n-    bool setNumStr(const std::string& val);\n-    bool setInt(uint64_t val);\n-    bool setInt(int64_t val);\n-    bool setInt(int val) { return setInt((int64_t)val); }\n-    bool setFloat(double val);\n-    bool setStr(const std::string& val);\n-    bool setArray();\n-    bool setObject();\n-\n-    enum VType getType() const { return typ; }\n-    const std::string& getValStr() const { return val; }\n-    bool empty() const { return (values.size() == 0); }\n-\n-    size_t size() const { return values.size(); }\n-\n-    bool getBool() const { return isTrue(); }\n-    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n-    const UniValue& operator[](const std::string& key) const;\n-    const UniValue& operator[](unsigned int index) const;\n-    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n-\n-    bool isNull() const { return (typ == VNULL); }\n-    bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n-    bool isFalse() const { return (typ == VBOOL) && (val != \"1\"); }\n-    bool isBool() const { return (typ == VBOOL); }\n-    bool isStr() const { return (typ == VSTR); }\n-    bool isNum() const { return (typ == VNUM); }\n-    bool isArray() const { return (typ == VARR); }\n-    bool isObject() const { return (typ == VOBJ); }\n-\n-    bool push_back(const UniValue& val);\n-    bool push_back(const std::string& val_) {\n-        UniValue tmpVal(VSTR, val_);\n-        return push_back(tmpVal);\n-    }\n-    bool push_back(const char *val_) {\n-        std::string s(val_);\n-        return push_back(s);\n-    }\n-    bool push_backV(const std::vector<UniValue>& vec);\n-\n-    bool pushKV(const std::string& key, const UniValue& val);\n-    bool pushKV(const std::string& key, const std::string& val) {\n-        UniValue tmpVal(VSTR, val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, const char *val_) {\n-        std::string val(val_);\n-        return pushKV(key, val);\n-    }\n-    bool pushKV(const std::string& key, int64_t val) {\n-        UniValue tmpVal(val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, uint64_t val) {\n-        UniValue tmpVal(val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, int val) {\n-        UniValue tmpVal((int64_t)val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, double val) {\n-        UniValue tmpVal(val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKVs(const UniValue& obj);\n-\n-    std::string write(unsigned int prettyIndent = 0,\n-                      unsigned int indentLevel = 0) const;\n-\n-    bool read(const char *raw);\n-    bool read(const std::string& rawStr) {\n-        return read(rawStr.c_str());\n-    }\n-\n-private:\n-    UniValue::VType typ;\n-    std::string val;                       // numbers are stored as C++ strings\n-    std::vector<std::string> keys;\n-    std::vector<UniValue> values;\n-\n-    int findKey(const std::string& key) const;\n-    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n-    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n-\n-public:\n-    // Strict type-specific getters, these throw std::runtime_error if the\n-    // value is of unexpected type\n-    std::vector<std::string> getKeys() const;\n-    std::vector<UniValue> getValues() const;\n-    bool get_bool() const;\n-    std::string get_str() const;\n-    int get_int() const;\n-    int64_t get_int64() const;\n-    double get_real() const;\n-    const UniValue& get_obj() const;\n-    const UniValue& get_array() const;\n-\n-    enum VType type() const { return getType(); }\n-    bool push_back(std::pair<std::string,UniValue> pear) {\n-        return pushKV(pear.first, pear.second);\n-    }\n-    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n-};\n-\n-//\n-// The following were added for compatibility with json_spirit.\n-// Most duplicate other methods, and should be removed.\n-//\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(cVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(strVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(u64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(i64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(dVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n-{\n-    std::string key(cKey);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n-{\n-    return std::make_pair(key, uVal);\n-}\n-\n-enum jtokentype {\n-    JTOK_ERR        = -1,\n-    JTOK_NONE       = 0,                           // eof\n-    JTOK_OBJ_OPEN,\n-    JTOK_OBJ_CLOSE,\n-    JTOK_ARR_OPEN,\n-    JTOK_ARR_CLOSE,\n-    JTOK_COLON,\n-    JTOK_COMMA,\n-    JTOK_KW_NULL,\n-    JTOK_KW_TRUE,\n-    JTOK_KW_FALSE,\n-    JTOK_NUMBER,\n-    JTOK_STRING,\n-};\n-\n-extern enum jtokentype getJsonToken(std::string& tokenVal,\n-                                    unsigned int& consumed, const char *raw);\n-extern const char *uvTypeName(UniValue::VType t);\n-\n-extern const UniValue NullUniValue;\n-\n-const UniValue& find_value( const UniValue& obj, const std::string& name);\n-\n-#endif // BITCOIN_UNIVALUE_UNIVALUE_H"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "src/univalue/univalue_escapes.h",
        "status": "removed",
        "additions": 0,
        "deletions": 262,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_escapes.h?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,262 +0,0 @@\n-// Automatically generated file. Do not modify.\n-#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n-#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n-static const char *escapes[256] = {\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\t\"\\\\b\",\n-\t\"\\\\t\",\n-\t\"\\\\n\",\n-\tNULL,\n-\t\"\\\\f\",\n-\t\"\\\\r\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\t\"\\\\\\\"\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\t\"\\\\\\\\\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-};\n-#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "src/univalue/univalue_read.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 389,
        "changes": 389,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_read.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,389 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <string.h>\n-#include <vector>\n-#include <stdio.h>\n-#include \"univalue.h\"\n-\n-using namespace std;\n-\n-// convert hexadecimal string to unsigned integer\n-static const char *hatoui(const char *first, const char *last,\n-                          unsigned int& out)\n-{\n-    unsigned int result = 0;\n-    for (; first != last; ++first)\n-    {\n-        int digit;\n-        if (isdigit(*first))\n-            digit = *first - '0';\n-\n-        else if (*first >= 'a' && *first <= 'f')\n-            digit = *first - 'a' + 10;\n-\n-        else if (*first >= 'A' && *first <= 'F')\n-            digit = *first - 'A' + 10;\n-\n-        else\n-            break;\n-\n-        result = 16 * result + digit;\n-    }\n-    out = result;\n-\n-    return first;\n-}\n-\n-enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n-                            const char *raw)\n-{\n-    tokenVal.clear();\n-    consumed = 0;\n-\n-    const char *rawStart = raw;\n-\n-    while ((*raw) && (isspace(*raw)))             // skip whitespace\n-        raw++;\n-\n-    switch (*raw) {\n-\n-    case 0:\n-        return JTOK_NONE;\n-\n-    case '{':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_OBJ_OPEN;\n-    case '}':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_OBJ_CLOSE;\n-    case '[':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_ARR_OPEN;\n-    case ']':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_ARR_CLOSE;\n-\n-    case ':':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_COLON;\n-    case ',':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_COMMA;\n-\n-    case 'n':\n-    case 't':\n-    case 'f':\n-        if (!strncmp(raw, \"null\", 4)) {\n-            raw += 4;\n-            consumed = (raw - rawStart);\n-            return JTOK_KW_NULL;\n-        } else if (!strncmp(raw, \"true\", 4)) {\n-            raw += 4;\n-            consumed = (raw - rawStart);\n-            return JTOK_KW_TRUE;\n-        } else if (!strncmp(raw, \"false\", 5)) {\n-            raw += 5;\n-            consumed = (raw - rawStart);\n-            return JTOK_KW_FALSE;\n-        } else\n-            return JTOK_ERR;\n-\n-    case '-':\n-    case '0':\n-    case '1':\n-    case '2':\n-    case '3':\n-    case '4':\n-    case '5':\n-    case '6':\n-    case '7':\n-    case '8':\n-    case '9': {\n-        // part 1: int\n-        string numStr;\n-\n-        const char *first = raw;\n-\n-        const char *firstDigit = first;\n-        if (!isdigit(*firstDigit))\n-            firstDigit++;\n-        if ((*firstDigit == '0') && isdigit(firstDigit[1]))\n-            return JTOK_ERR;\n-\n-        numStr += *raw;                       // copy first char\n-        raw++;\n-\n-        if ((*first == '-') && (!isdigit(*raw)))\n-            return JTOK_ERR;\n-\n-        while ((*raw) && isdigit(*raw)) {     // copy digits\n-            numStr += *raw;\n-            raw++;\n-        }\n-\n-        // part 2: frac\n-        if (*raw == '.') {\n-            numStr += *raw;                   // copy .\n-            raw++;\n-\n-            if (!isdigit(*raw))\n-                return JTOK_ERR;\n-            while ((*raw) && isdigit(*raw)) { // copy digits\n-                numStr += *raw;\n-                raw++;\n-            }\n-        }\n-\n-        // part 3: exp\n-        if (*raw == 'e' || *raw == 'E') {\n-            numStr += *raw;                   // copy E\n-            raw++;\n-\n-            if (*raw == '-' || *raw == '+') { // copy +/-\n-                numStr += *raw;\n-                raw++;\n-            }\n-\n-            if (!isdigit(*raw))\n-                return JTOK_ERR;\n-            while ((*raw) && isdigit(*raw)) { // copy digits\n-                numStr += *raw;\n-                raw++;\n-            }\n-        }\n-\n-        tokenVal = numStr;\n-        consumed = (raw - rawStart);\n-        return JTOK_NUMBER;\n-        }\n-\n-    case '\"': {\n-        raw++;                                // skip \"\n-\n-        string valStr;\n-\n-        while (*raw) {\n-            if (*raw < 0x20)\n-                return JTOK_ERR;\n-\n-            else if (*raw == '\\\\') {\n-                raw++;                        // skip backslash\n-\n-                switch (*raw) {\n-                case '\"':  valStr += \"\\\"\"; break;\n-                case '\\\\': valStr += \"\\\\\"; break;\n-                case '/':  valStr += \"/\"; break;\n-                case 'b':  valStr += \"\\b\"; break;\n-                case 'f':  valStr += \"\\f\"; break;\n-                case 'n':  valStr += \"\\n\"; break;\n-                case 'r':  valStr += \"\\r\"; break;\n-                case 't':  valStr += \"\\t\"; break;\n-\n-                case 'u': {\n-                    unsigned int codepoint;\n-                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n-                               raw + 1 + 4)\n-                        return JTOK_ERR;\n-\n-                    if (codepoint <= 0x7f)\n-                        valStr.push_back((char)codepoint);\n-                    else if (codepoint <= 0x7FF) {\n-                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    } else if (codepoint <= 0xFFFF) {\n-                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n-                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    }\n-\n-                    raw += 4;\n-                    break;\n-                    }\n-                default:\n-                    return JTOK_ERR;\n-\n-                }\n-\n-                raw++;                        // skip esc'd char\n-            }\n-\n-            else if (*raw == '\"') {\n-                raw++;                        // skip \"\n-                break;                        // stop scanning\n-            }\n-\n-            else {\n-                valStr += *raw;\n-                raw++;\n-            }\n-        }\n-\n-        tokenVal = valStr;\n-        consumed = (raw - rawStart);\n-        return JTOK_STRING;\n-        }\n-\n-    default:\n-        return JTOK_ERR;\n-    }\n-}\n-\n-bool UniValue::read(const char *raw)\n-{\n-    clear();\n-\n-    bool expectName = false;\n-    bool expectColon = false;\n-    vector<UniValue*> stack;\n-\n-    string tokenVal;\n-    unsigned int consumed;\n-    enum jtokentype tok = JTOK_NONE;\n-    enum jtokentype last_tok = JTOK_NONE;\n-    do {\n-        last_tok = tok;\n-\n-        tok = getJsonToken(tokenVal, consumed, raw);\n-        if (tok == JTOK_NONE || tok == JTOK_ERR)\n-            return false;\n-        raw += consumed;\n-\n-        switch (tok) {\n-\n-        case JTOK_OBJ_OPEN:\n-        case JTOK_ARR_OPEN: {\n-            VType utyp = (tok == JTOK_OBJ_OPEN ? VOBJ : VARR);\n-            if (!stack.size()) {\n-                if (utyp == VOBJ)\n-                    setObject();\n-                else\n-                    setArray();\n-                stack.push_back(this);\n-            } else {\n-                UniValue tmpVal(utyp);\n-                UniValue *top = stack.back();\n-                top->values.push_back(tmpVal);\n-\n-                UniValue *newTop = &(top->values.back());\n-                stack.push_back(newTop);\n-            }\n-\n-            if (utyp == VOBJ)\n-                expectName = true;\n-            break;\n-            }\n-\n-        case JTOK_OBJ_CLOSE:\n-        case JTOK_ARR_CLOSE: {\n-            if (!stack.size() || expectColon || (last_tok == JTOK_COMMA))\n-                return false;\n-\n-            VType utyp = (tok == JTOK_OBJ_CLOSE ? VOBJ : VARR);\n-            UniValue *top = stack.back();\n-            if (utyp != top->getType())\n-                return false;\n-\n-            stack.pop_back();\n-            expectName = false;\n-            break;\n-            }\n-\n-        case JTOK_COLON: {\n-            if (!stack.size() || expectName || !expectColon)\n-                return false;\n-\n-            UniValue *top = stack.back();\n-            if (top->getType() != VOBJ)\n-                return false;\n-\n-            expectColon = false;\n-            break;\n-            }\n-\n-        case JTOK_COMMA: {\n-            if (!stack.size() || expectName || expectColon ||\n-                (last_tok == JTOK_COMMA) || (last_tok == JTOK_ARR_OPEN))\n-                return false;\n-\n-            UniValue *top = stack.back();\n-            if (top->getType() == VOBJ)\n-                expectName = true;\n-            break;\n-            }\n-\n-        case JTOK_KW_NULL:\n-        case JTOK_KW_TRUE:\n-        case JTOK_KW_FALSE: {\n-            if (!stack.size() || expectName || expectColon)\n-                return false;\n-\n-            UniValue tmpVal;\n-            switch (tok) {\n-            case JTOK_KW_NULL:\n-                // do nothing more\n-                break;\n-            case JTOK_KW_TRUE:\n-                tmpVal.setBool(true);\n-                break;\n-            case JTOK_KW_FALSE:\n-                tmpVal.setBool(false);\n-                break;\n-            default: /* impossible */ break;\n-            }\n-\n-            UniValue *top = stack.back();\n-            top->values.push_back(tmpVal);\n-\n-            break;\n-            }\n-\n-        case JTOK_NUMBER: {\n-            if (!stack.size() || expectName || expectColon)\n-                return false;\n-\n-            UniValue tmpVal(VNUM, tokenVal);\n-            UniValue *top = stack.back();\n-            top->values.push_back(tmpVal);\n-\n-            break;\n-            }\n-\n-        case JTOK_STRING: {\n-            if (!stack.size())\n-                return false;\n-\n-            UniValue *top = stack.back();\n-\n-            if (expectName) {\n-                top->keys.push_back(tokenVal);\n-                expectName = false;\n-                expectColon = true;\n-            } else {\n-                UniValue tmpVal(VSTR, tokenVal);\n-                top->values.push_back(tmpVal);\n-            }\n-\n-            break;\n-            }\n-\n-        default:\n-            return false;\n-        }\n-    } while (!stack.empty ());\n-\n-    /* Check that nothing follows the initial construct (parsed above).  */\n-    tok = getJsonToken(tokenVal, consumed, raw);\n-    if (tok != JTOK_NONE)\n-        return false;\n-\n-    return true;\n-}\n-"
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 127,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,127 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <ctype.h>\n-#include <iomanip>\n-#include <sstream>\n-#include <stdio.h>\n-#include \"univalue.h\"\n-#include \"univalue_escapes.h\"\n-\n-// TODO: Using UTF8\n-\n-using namespace std;\n-\n-static string json_escape(const string& inS)\n-{\n-    string outS;\n-    outS.reserve(inS.size() * 2);\n-\n-    for (unsigned int i = 0; i < inS.size(); i++) {\n-        unsigned char ch = inS[i];\n-        const char *escStr = escapes[ch];\n-\n-        if (escStr)\n-            outS += escStr;\n-\n-        else if (isprint(ch))\n-            outS += ch;\n-\n-        else {\n-            char tmpesc[16];\n-            sprintf(tmpesc, \"\\\\u%04x\", ch);\n-            outS += tmpesc;\n-        }\n-    }\n-\n-    return outS;\n-}\n-\n-string UniValue::write(unsigned int prettyIndent,\n-                       unsigned int indentLevel) const\n-{\n-    string s;\n-    s.reserve(1024);\n-\n-    unsigned int modIndent = indentLevel;\n-    if (modIndent == 0)\n-        modIndent = 1;\n-\n-    switch (typ) {\n-    case VNULL:\n-        s += \"null\";\n-        break;\n-    case VOBJ:\n-        writeObject(prettyIndent, modIndent, s);\n-        break;\n-    case VARR:\n-        writeArray(prettyIndent, modIndent, s);\n-        break;\n-    case VSTR:\n-        s += \"\\\"\" + json_escape(val) + \"\\\"\";\n-        break;\n-    case VNUM:\n-        s += val;\n-        break;\n-    case VBOOL:\n-        s += (val == \"1\" ? \"true\" : \"false\");\n-        break;\n-    }\n-\n-    return s;\n-}\n-\n-static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n-{\n-    s.append(prettyIndent * indentLevel, ' ');\n-}\n-\n-void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n-{\n-    s += \"[\";\n-    if (prettyIndent)\n-        s += \"\\n\";\n-\n-    for (unsigned int i = 0; i < values.size(); i++) {\n-        if (prettyIndent)\n-            indentStr(prettyIndent, indentLevel, s);\n-        s += values[i].write(prettyIndent, indentLevel + 1);\n-        if (i != (values.size() - 1)) {\n-            s += \",\";\n-            if (prettyIndent)\n-                s += \" \";\n-        }\n-        if (prettyIndent)\n-            s += \"\\n\";\n-    }\n-\n-    if (prettyIndent)\n-        indentStr(prettyIndent, indentLevel - 1, s);\n-    s += \"]\";\n-}\n-\n-void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n-{\n-    s += \"{\";\n-    if (prettyIndent)\n-        s += \"\\n\";\n-\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (prettyIndent)\n-            indentStr(prettyIndent, indentLevel, s);\n-        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n-        if (prettyIndent)\n-            s += \" \";\n-        s += values[i].write(prettyIndent, indentLevel + 1);\n-        if (i != (values.size() - 1))\n-            s += \",\";\n-        if (prettyIndent)\n-            s += \"\\n\";\n-    }\n-\n-    if (prettyIndent)\n-        indentStr(prettyIndent, indentLevel - 1, s);\n-    s += \"}\";\n-}\n-"
      }
    ]
  },
  {
    "sha": "6e16a41313dbc25d88def143cf1e0a964e36c7c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTE2YTQxMzEzZGJjMjVkODhkZWYxNDNjZjFlMGE5NjRlMzZjN2Mw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "message": "Merge commit '2f9f082b5ef3c495c70598ef23383effef675f9a' as 'src/univalue'",
      "tree": {
        "sha": "46da94414e5fa2e58ad15dda39152376afbad81e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46da94414e5fa2e58ad15dda39152376afbad81e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0917306fdf39b12556b95fe91be2e7b44d34bb9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0917306fdf39b12556b95fe91be2e7b44d34bb9f"
      },
      {
        "sha": "2f9f082b5ef3c495c70598ef23383effef675f9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9f082b5ef3c495c70598ef23383effef675f9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9f082b5ef3c495c70598ef23383effef675f9a"
      }
    ],
    "stats": {
      "total": 1994,
      "additions": 1994,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca9e8423481f8c6d5574c6088746fd9ed2dc21f5",
        "filename": "src/univalue/.gitignore",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.gitignore?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,22 @@\n+.deps/\n+INSTALL\n+Makefile\n+Makefile.in\n+aclocal.m4\n+autom4te.cache/\n+compile\n+config.log\n+config.status\n+config.guess\n+config.sub\n+configure\n+depcomp\n+install-sh\n+missing\n+stamp-h1\n+univalue-config.h*\n+test-driver\n+libtool\n+ltmain.sh\n+\n+*.o"
      },
      {
        "sha": "af632c78d9c3d2eb1342469180e5dc1db7fcb807",
        "filename": "src/univalue/.travis.yml",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.travis.yml?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,52 @@\n+\n+language: cpp\n+\n+compiler:\n+  - clang\n+  - gcc\n+\n+os:\n+  - linux\n+  - osx\n+\n+sudo: false\n+\n+env:\n+  global:\n+    - MAKEJOBS=-j3\n+    - RUN_TESTS=true\n+    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n+\n+cache:\n+  apt: true\n+\n+addons:\n+  apt:\n+    packages:\n+      - pkg-config\n+\n+before_script:\n+  - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n+  - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n+\n+script:\n+  - if [ -n \"$UNIVALUE_CONFIG\" ]; then unset CC; unset CXX; fi\n+  - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n+  - UNIVALUE_CONFIG_ALL=\"--prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+  - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n+  - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n+  - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n+  - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+\n+matrix:\n+  fast_finish: true\n+  include:\n+    - os: linux\n+      compiler: gcc\n+      env: UNIVALUE_CONFIG=--host=x86_64-w64-mingw32 RUN_TESTS=false\n+      addons:\n+        apt:\n+          packages:\n+            - g++-mingw-w64-x86-64\n+            - gcc-mingw-w64-x86-64\n+            - binutils-mingw-w64-x86-64"
      },
      {
        "sha": "1fb429f3569c7f8a8e57e69bfb984ab905bccf15",
        "filename": "src/univalue/COPYING",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/COPYING?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,19 @@\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+"
      },
      {
        "sha": "2800f466dc55bfbc94f20d4ededd7f5ac92a1d15",
        "filename": "src/univalue/Makefile.am",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,84 @@\n+ACLOCAL_AMFLAGS = -I build-aux/m4\n+.PHONY: gen\n+.INTERMEDIATE: $(GENBIN)\n+\n+include_HEADERS = include/univalue.h\n+noinst_HEADERS = lib/univalue_escapes.h\n+\n+lib_LTLIBRARIES = lib/libunivalue.la\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA = pc/libunivalue.pc\n+\n+lib_libunivalue_la_SOURCES = \\\n+\tlib/univalue.cpp \\\n+\tlib/univalue_read.cpp \\\n+\tlib/univalue_write.cpp\n+\n+lib_libunivalue_la_LDFLAGS = \\\n+\t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n+\t-no-undefined\n+lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+\n+TESTS = test/unitester\n+\n+GENBIN = gen/gen$(BUILD_EXEEXT)\n+GEN_SRCS = gen/gen.cpp\n+\n+$(GENBIN): $(GEN_SRCS)\n+\t@echo Building $@\n+\t$(AM_V_at)c++ -I$(top_srcdir)/include -o $@ $<\n+\n+gen: lib/univalue_escapes.h $(GENBIN)\n+\t@echo Updating $<\n+\t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n+\n+noinst_PROGRAMS = $(TESTS)\n+\n+TEST_DATA_DIR=test\n+\n+test_unitester_SOURCES = test/unitester.cpp\n+test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n+test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+TEST_FILES = \\\n+\t$(TEST_DATA_DIR)/fail10.json \\\n+\t$(TEST_DATA_DIR)/fail11.json \\\n+\t$(TEST_DATA_DIR)/fail12.json \\\n+\t$(TEST_DATA_DIR)/fail13.json \\\n+\t$(TEST_DATA_DIR)/fail14.json \\\n+\t$(TEST_DATA_DIR)/fail15.json \\\n+\t$(TEST_DATA_DIR)/fail16.json \\\n+\t$(TEST_DATA_DIR)/fail17.json \\\n+\t$(TEST_DATA_DIR)/fail18.json \\\n+\t$(TEST_DATA_DIR)/fail19.json \\\n+\t$(TEST_DATA_DIR)/fail1.json \\\n+\t$(TEST_DATA_DIR)/fail20.json \\\n+\t$(TEST_DATA_DIR)/fail21.json \\\n+\t$(TEST_DATA_DIR)/fail22.json \\\n+\t$(TEST_DATA_DIR)/fail23.json \\\n+\t$(TEST_DATA_DIR)/fail24.json \\\n+\t$(TEST_DATA_DIR)/fail25.json \\\n+\t$(TEST_DATA_DIR)/fail26.json \\\n+\t$(TEST_DATA_DIR)/fail27.json \\\n+\t$(TEST_DATA_DIR)/fail28.json \\\n+\t$(TEST_DATA_DIR)/fail29.json \\\n+\t$(TEST_DATA_DIR)/fail2.json \\\n+\t$(TEST_DATA_DIR)/fail30.json \\\n+\t$(TEST_DATA_DIR)/fail31.json \\\n+\t$(TEST_DATA_DIR)/fail32.json \\\n+\t$(TEST_DATA_DIR)/fail33.json \\\n+\t$(TEST_DATA_DIR)/fail34.json \\\n+\t$(TEST_DATA_DIR)/fail3.json \\\n+\t$(TEST_DATA_DIR)/fail4.json \\\n+\t$(TEST_DATA_DIR)/fail5.json \\\n+\t$(TEST_DATA_DIR)/fail6.json \\\n+\t$(TEST_DATA_DIR)/fail7.json \\\n+\t$(TEST_DATA_DIR)/fail8.json \\\n+\t$(TEST_DATA_DIR)/fail9.json \\\n+\t$(TEST_DATA_DIR)/pass1.json \\\n+\t$(TEST_DATA_DIR)/pass2.json \\\n+\t$(TEST_DATA_DIR)/pass3.json\n+\n+EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "src/univalue/README",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,7 @@\n+\n+\t\tUniValue\n+\n+A universal value object, with JSON encoding (output) and decoding (input).\n+\n+Built as a single dynamic RAII C++ object class, and no templates.\n+"
      },
      {
        "sha": "5530048e923e51909251e7e32f7023f1fc749999",
        "filename": "src/univalue/TODO",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/TODO",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/TODO",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/TODO?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,10 @@\n+\n+Rearrange tree for easier 'git subtree' style use\n+\n+Move towards C++11 etc.\n+\n+Namespace support - must come up with useful shorthand, avoiding\n+long Univalue::Univalue::Univalue usages forced upon library users.\n+\n+Improve test suite\n+"
      },
      {
        "sha": "4b38721faad09b9339107bb375d2d31fdbde9d4a",
        "filename": "src/univalue/autogen.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/autogen.sh?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,9 @@\n+#!/bin/sh\n+set -e\n+srcdir=\"$(dirname $0)\"\n+cd \"$srcdir\"\n+if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n+  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  export LIBTOOLIZE\n+fi\n+autoreconf --install --force"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "src/univalue/build-aux/m4/.empty",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/.empty?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0"
      },
      {
        "sha": "6cd951622925afac13d0820b2c25b4f8cac7ff1e",
        "filename": "src/univalue/configure.ac",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,69 @@\n+m4_define([libunivalue_major_version], [1])\n+m4_define([libunivalue_minor_version], [1])\n+m4_define([libunivalue_micro_version], [1])\n+m4_define([libunivalue_interface_age], [1])\n+# If you need a modifier for the version number. \n+# Normally empty, but can be used to make \"fixup\" releases.\n+m4_define([libunivalue_extraversion], [])\n+\n+dnl libtool versioning from libunivalue\n+m4_define([libunivalue_current], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version - libunivalue_interface_age)])\n+m4_define([libunivalue_binary_age], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version)])\n+m4_define([libunivalue_revision], [libunivalue_interface_age])\n+m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_interface_age)])\n+m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n+\n+\n+AC_INIT([univalue], [1.0.0],\n+        [http://github.com/jgarzik/univalue/])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_PREREQ(2.60)\n+AC_CONFIG_SRCDIR([lib/univalue.cpp])\n+AC_CONFIG_AUX_DIR([build-aux])\n+AC_CONFIG_MACRO_DIR([build-aux/m4])\n+AC_CONFIG_HEADERS([univalue-config.h])\n+AM_INIT_AUTOMAKE([subdir-objects foreign])\n+\n+LIBUNIVALUE_MAJOR_VERSION=libunivalue_major_version\n+LIBUNIVALUE_MINOR_VERSION=libunivalue_minor_version\n+LIBUNIVALUE_MICRO_VERSION=libunivalue_micro_version\n+LIBUNIVALUE_INTERFACE_AGE=libunivalue_interface_age\n+\n+# ABI version\n+# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n+LIBUNIVALUE_CURRENT=libunivalue_current\n+LIBUNIVALUE_REVISION=libunivalue_revision\n+LIBUNIVALUE_AGE=libunivalue_age\n+\n+AC_SUBST(LIBUNIVALUE_CURRENT)\n+AC_SUBST(LIBUNIVALUE_REVISION)\n+AC_SUBST(LIBUNIVALUE_AGE)\n+\n+LT_INIT\n+LT_LANG([C++])\n+\n+case $host in\n+  *mingw*)\n+    LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"\n+  ;;\n+esac\n+\n+BUILD_EXEEXT=\n+case $build in\n+  *mingw*)\n+    BUILD_EXEEXT=\".exe\"\n+  ;;\n+esac\n+\n+AC_CONFIG_FILES([\n+    Makefile\n+    pc/libunivalue.pc\n+    pc/libunivalue-uninstalled.pc])\n+\n+AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(BUILD_EXEEXT)\n+AC_OUTPUT\n+"
      },
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "src/univalue/gen/gen.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen/gen.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+//\n+// To re-create univalue_escapes.h:\n+// $ g++ -o gen gen.cpp\n+// $ ./gen > univalue_escapes.h\n+//\n+\n+#include <ctype.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+static bool initEscapes;\n+static const char *escapes[256];\n+\n+static void initJsonEscape()\n+{\n+    escapes[(int)'\"'] = \"\\\\\\\"\";\n+    escapes[(int)'\\\\'] = \"\\\\\\\\\";\n+    escapes[(int)'\\b'] = \"\\\\b\";\n+    escapes[(int)'\\f'] = \"\\\\f\";\n+    escapes[(int)'\\n'] = \"\\\\n\";\n+    escapes[(int)'\\r'] = \"\\\\r\";\n+    escapes[(int)'\\t'] = \"\\\\t\";\n+\n+    initEscapes = true;\n+}\n+\n+static void outputEscape()\n+{\n+\tprintf(\t\"// Automatically generated file. Do not modify.\\n\"\n+\t\t\"#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"static const char *escapes[256] = {\\n\");\n+\n+\tfor (unsigned int i = 0; i < 256; i++) {\n+\t\tif (!escapes[i]) {\n+\t\t\tprintf(\"\\tNULL,\\n\");\n+\t\t} else {\n+\t\t\tprintf(\"\\t\\\"\");\n+\n+\t\t\tunsigned int si;\n+\t\t\tfor (si = 0; si < strlen(escapes[i]); si++) {\n+\t\t\t\tchar ch = escapes[i][si];\n+\t\t\t\tswitch (ch) {\n+\t\t\t\tcase '\"':\n+\t\t\t\t\tprintf(\"\\\\\\\"\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase '\\\\':\n+\t\t\t\t\tprintf(\"\\\\\\\\\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tprintf(\"%c\", escapes[i][si]);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprintf(\"\\\",\\n\");\n+\t\t}\n+\t}\n+\n+\tprintf(\t\"};\\n\"\n+\t\t\"#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\");\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+\tinitJsonEscape();\n+\toutputEscape();\n+\treturn 0;\n+}\n+"
      },
      {
        "sha": "ac051160118f4ef84237ddc5e766e91d5fb8285e",
        "filename": "src/univalue/include/univalue.h",
        "status": "added",
        "additions": 250,
        "deletions": 0,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,250 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+#include <sstream>        // .get_int64()\n+#include <utility>        // std::pair\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(bool val_) {\n+        setBool(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    const std::string& getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const { return values.size(); }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    const UniValue& operator[](const std::string& key) const;\n+    const UniValue& operator[](unsigned int index) const;\n+    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+\n+    bool isNull() const { return (typ == VNULL); }\n+    bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n+    bool isFalse() const { return (typ == VBOOL) && (val != \"1\"); }\n+    bool isBool() const { return (typ == VBOOL); }\n+    bool isStr() const { return (typ == VSTR); }\n+    bool isNum() const { return (typ == VNUM); }\n+    bool isArray() const { return (typ == VARR); }\n+    bool isObject() const { return (typ == VOBJ); }\n+\n+    bool push_back(const UniValue& val);\n+    bool push_back(const std::string& val_) {\n+        UniValue tmpVal(VSTR, val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(const char *val_) {\n+        std::string s(val_);\n+        return push_back(s);\n+    }\n+    bool push_backV(const std::vector<UniValue>& vec);\n+\n+    bool pushKV(const std::string& key, const UniValue& val);\n+    bool pushKV(const std::string& key, const std::string& val) {\n+        UniValue tmpVal(VSTR, val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, const char *val_) {\n+        std::string val(val_);\n+        return pushKV(key, val);\n+    }\n+    bool pushKV(const std::string& key, int64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, uint64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, int val) {\n+        UniValue tmpVal((int64_t)val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, double val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKVs(const UniValue& obj);\n+\n+    std::string write(unsigned int prettyIndent = 0,\n+                      unsigned int indentLevel = 0) const;\n+\n+    bool read(const char *raw);\n+    bool read(const std::string& rawStr) {\n+        return read(rawStr.c_str());\n+    }\n+\n+private:\n+    UniValue::VType typ;\n+    std::string val;                       // numbers are stored as C++ strings\n+    std::vector<std::string> keys;\n+    std::vector<UniValue> values;\n+\n+    int findKey(const std::string& key) const;\n+    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+\n+public:\n+    // Strict type-specific getters, these throw std::runtime_error if the\n+    // value is of unexpected type\n+    std::vector<std::string> getKeys() const;\n+    std::vector<UniValue> getValues() const;\n+    bool get_bool() const;\n+    std::string get_str() const;\n+    int get_int() const;\n+    int64_t get_int64() const;\n+    double get_real() const;\n+    const UniValue& get_obj() const;\n+    const UniValue& get_array() const;\n+\n+    enum VType type() const { return getType(); }\n+    bool push_back(std::pair<std::string,UniValue> pear) {\n+        return pushKV(pear.first, pear.second);\n+    }\n+    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n+};\n+\n+//\n+// The following were added for compatibility with json_spirit.\n+// Most duplicate other methods, and should be removed.\n+//\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(cVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(strVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(u64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(i64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(dVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n+{\n+    std::string key(cKey);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n+{\n+    return std::make_pair(key, uVal);\n+}\n+\n+enum jtokentype {\n+    JTOK_ERR        = -1,\n+    JTOK_NONE       = 0,                           // eof\n+    JTOK_OBJ_OPEN,\n+    JTOK_OBJ_CLOSE,\n+    JTOK_ARR_OPEN,\n+    JTOK_ARR_CLOSE,\n+    JTOK_COLON,\n+    JTOK_COMMA,\n+    JTOK_KW_NULL,\n+    JTOK_KW_TRUE,\n+    JTOK_KW_FALSE,\n+    JTOK_NUMBER,\n+    JTOK_STRING,\n+};\n+\n+extern enum jtokentype getJsonToken(std::string& tokenVal,\n+                                    unsigned int& consumed, const char *raw);\n+extern const char *uvTypeName(UniValue::VType t);\n+\n+extern const UniValue NullUniValue;\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name);\n+\n+#endif // __UNIVALUE_H__\n\\ No newline at end of file"
      },
      {
        "sha": "ca8c16dcd4b0d5ab31a3ac29be11d35e768c3cdb",
        "filename": "src/univalue/lib/.gitignore",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/.gitignore?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,10 @@\n+\n+libunivalue-uninstalled.pc\n+libunivalue.pc\n+libunivalue.a\n+gen\n+\n+.libs\n+*.lo\n+*.la\n+"
      },
      {
        "sha": "883e8651fe3d42e2c5c24a6c436dc2bf4c0f351b",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "added",
        "additions": 365,
        "deletions": 0,
        "changes": 365,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,365 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <iomanip>\n+#include <limits>\n+#include <sstream>\n+#include <stdexcept>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"univalue.h\"\n+\n+namespace \n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+using namespace std;\n+\n+const UniValue NullUniValue;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val_)\n+{\n+    clear();\n+    typ = VBOOL;\n+    if (val_)\n+        val = \"1\";\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    return (tt == JTOK_NUMBER);\n+}\n+\n+bool UniValue::setNumStr(const string& val_)\n+{\n+    if (!validNumStr(val_))\n+        return false;\n+\n+    clear();\n+    typ = VNUM;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setInt(uint64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setInt(int64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setFloat(double val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << std::setprecision(16) << val;\n+\n+    bool ret = setNumStr(oss.str());\n+    typ = VNUM;\n+    return ret;\n+}\n+\n+bool UniValue::setStr(const string& val_)\n+{\n+    clear();\n+    typ = VSTR;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setArray()\n+{\n+    clear();\n+    typ = VARR;\n+    return true;\n+}\n+\n+bool UniValue::setObject()\n+{\n+    clear();\n+    typ = VOBJ;\n+    return true;\n+}\n+\n+bool UniValue::push_back(const UniValue& val)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::push_backV(const std::vector<UniValue>& vec)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.insert(values.end(), vec.begin(), vec.end());\n+\n+    return true;\n+}\n+\n+bool UniValue::pushKV(const std::string& key, const UniValue& val)\n+{\n+    if (typ != VOBJ)\n+        return false;\n+\n+    keys.push_back(key);\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::pushKVs(const UniValue& obj)\n+{\n+    if (typ != VOBJ || obj.typ != VOBJ)\n+        return false;\n+\n+    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n+        keys.push_back(obj.keys[i]);\n+        values.push_back(obj.values[i]);\n+    }\n+\n+    return true;\n+}\n+\n+int UniValue::findKey(const std::string& key) const\n+{\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key)\n+            return (int) i;\n+    }\n+\n+    return -1;\n+}\n+\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+{\n+    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n+         it != t.end(); it++) {\n+        int idx = findKey(it->first);\n+        if (idx < 0)\n+            return false;\n+\n+        if (values[idx].getType() != it->second)\n+            return false;\n+    }\n+\n+    return true;\n+}\n+\n+const UniValue& UniValue::operator[](const std::string& key) const\n+{\n+    if (typ != VOBJ)\n+        return NullUniValue;\n+\n+    int index = findKey(key);\n+    if (index < 0)\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const UniValue& UniValue::operator[](unsigned int index) const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        return NullUniValue;\n+    if (index >= values.size())\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const char *uvTypeName(UniValue::VType t)\n+{\n+    switch (t) {\n+    case UniValue::VNULL: return \"null\";\n+    case UniValue::VBOOL: return \"bool\";\n+    case UniValue::VOBJ: return \"object\";\n+    case UniValue::VARR: return \"array\";\n+    case UniValue::VSTR: return \"string\";\n+    case UniValue::VNUM: return \"number\";\n+    }\n+\n+    // not reached\n+    return NULL;\n+}\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name)\n+{\n+    for (unsigned int i = 0; i < obj.keys.size(); i++)\n+    {\n+        if( obj.keys[i] == name )\n+        {\n+            return obj.values[i];\n+        }\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+std::vector<std::string> UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+std::vector<UniValue> UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+std::string UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "src/univalue/lib/univalue_escapes.h",
        "status": "added",
        "additions": 262,
        "deletions": 0,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_escapes.h?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,262 @@\n+// Automatically generated file. Do not modify.\n+#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+static const char *escapes[256] = {\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\b\",\n+\t\"\\\\t\",\n+\t\"\\\\n\",\n+\tNULL,\n+\t\"\\\\f\",\n+\t\"\\\\r\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\"\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\\\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+};\n+#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "added",
        "additions": 389,
        "deletions": 0,
        "changes": 389,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,389 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <string.h>\n+#include <vector>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+// convert hexadecimal string to unsigned integer\n+static const char *hatoui(const char *first, const char *last,\n+                          unsigned int& out)\n+{\n+    unsigned int result = 0;\n+    for (; first != last; ++first)\n+    {\n+        int digit;\n+        if (isdigit(*first))\n+            digit = *first - '0';\n+\n+        else if (*first >= 'a' && *first <= 'f')\n+            digit = *first - 'a' + 10;\n+\n+        else if (*first >= 'A' && *first <= 'F')\n+            digit = *first - 'A' + 10;\n+\n+        else\n+            break;\n+\n+        result = 16 * result + digit;\n+    }\n+    out = result;\n+\n+    return first;\n+}\n+\n+enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n+                            const char *raw)\n+{\n+    tokenVal.clear();\n+    consumed = 0;\n+\n+    const char *rawStart = raw;\n+\n+    while ((*raw) && (isspace(*raw)))             // skip whitespace\n+        raw++;\n+\n+    switch (*raw) {\n+\n+    case 0:\n+        return JTOK_NONE;\n+\n+    case '{':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_OPEN;\n+    case '}':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_CLOSE;\n+    case '[':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_OPEN;\n+    case ']':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_CLOSE;\n+\n+    case ':':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COLON;\n+    case ',':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COMMA;\n+\n+    case 'n':\n+    case 't':\n+    case 'f':\n+        if (!strncmp(raw, \"null\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_NULL;\n+        } else if (!strncmp(raw, \"true\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_TRUE;\n+        } else if (!strncmp(raw, \"false\", 5)) {\n+            raw += 5;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_FALSE;\n+        } else\n+            return JTOK_ERR;\n+\n+    case '-':\n+    case '0':\n+    case '1':\n+    case '2':\n+    case '3':\n+    case '4':\n+    case '5':\n+    case '6':\n+    case '7':\n+    case '8':\n+    case '9': {\n+        // part 1: int\n+        string numStr;\n+\n+        const char *first = raw;\n+\n+        const char *firstDigit = first;\n+        if (!isdigit(*firstDigit))\n+            firstDigit++;\n+        if ((*firstDigit == '0') && isdigit(firstDigit[1]))\n+            return JTOK_ERR;\n+\n+        numStr += *raw;                       // copy first char\n+        raw++;\n+\n+        if ((*first == '-') && (!isdigit(*raw)))\n+            return JTOK_ERR;\n+\n+        while ((*raw) && isdigit(*raw)) {     // copy digits\n+            numStr += *raw;\n+            raw++;\n+        }\n+\n+        // part 2: frac\n+        if (*raw == '.') {\n+            numStr += *raw;                   // copy .\n+            raw++;\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        // part 3: exp\n+        if (*raw == 'e' || *raw == 'E') {\n+            numStr += *raw;                   // copy E\n+            raw++;\n+\n+            if (*raw == '-' || *raw == '+') { // copy +/-\n+                numStr += *raw;\n+                raw++;\n+            }\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = numStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_NUMBER;\n+        }\n+\n+    case '\"': {\n+        raw++;                                // skip \"\n+\n+        string valStr;\n+\n+        while (*raw) {\n+            if (*raw < 0x20)\n+                return JTOK_ERR;\n+\n+            else if (*raw == '\\\\') {\n+                raw++;                        // skip backslash\n+\n+                switch (*raw) {\n+                case '\"':  valStr += \"\\\"\"; break;\n+                case '\\\\': valStr += \"\\\\\"; break;\n+                case '/':  valStr += \"/\"; break;\n+                case 'b':  valStr += \"\\b\"; break;\n+                case 'f':  valStr += \"\\f\"; break;\n+                case 'n':  valStr += \"\\n\"; break;\n+                case 'r':  valStr += \"\\r\"; break;\n+                case 't':  valStr += \"\\t\"; break;\n+\n+                case 'u': {\n+                    unsigned int codepoint;\n+                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                               raw + 1 + 4)\n+                        return JTOK_ERR;\n+\n+                    if (codepoint <= 0x7f)\n+                        valStr.push_back((char)codepoint);\n+                    else if (codepoint <= 0x7FF) {\n+                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    } else if (codepoint <= 0xFFFF) {\n+                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n+                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    }\n+\n+                    raw += 4;\n+                    break;\n+                    }\n+                default:\n+                    return JTOK_ERR;\n+\n+                }\n+\n+                raw++;                        // skip esc'd char\n+            }\n+\n+            else if (*raw == '\"') {\n+                raw++;                        // skip \"\n+                break;                        // stop scanning\n+            }\n+\n+            else {\n+                valStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = valStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_STRING;\n+        }\n+\n+    default:\n+        return JTOK_ERR;\n+    }\n+}\n+\n+bool UniValue::read(const char *raw)\n+{\n+    clear();\n+\n+    bool expectName = false;\n+    bool expectColon = false;\n+    vector<UniValue*> stack;\n+\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tok = JTOK_NONE;\n+    enum jtokentype last_tok = JTOK_NONE;\n+    do {\n+        last_tok = tok;\n+\n+        tok = getJsonToken(tokenVal, consumed, raw);\n+        if (tok == JTOK_NONE || tok == JTOK_ERR)\n+            return false;\n+        raw += consumed;\n+\n+        switch (tok) {\n+\n+        case JTOK_OBJ_OPEN:\n+        case JTOK_ARR_OPEN: {\n+            VType utyp = (tok == JTOK_OBJ_OPEN ? VOBJ : VARR);\n+            if (!stack.size()) {\n+                if (utyp == VOBJ)\n+                    setObject();\n+                else\n+                    setArray();\n+                stack.push_back(this);\n+            } else {\n+                UniValue tmpVal(utyp);\n+                UniValue *top = stack.back();\n+                top->values.push_back(tmpVal);\n+\n+                UniValue *newTop = &(top->values.back());\n+                stack.push_back(newTop);\n+            }\n+\n+            if (utyp == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_OBJ_CLOSE:\n+        case JTOK_ARR_CLOSE: {\n+            if (!stack.size() || expectColon || (last_tok == JTOK_COMMA))\n+                return false;\n+\n+            VType utyp = (tok == JTOK_OBJ_CLOSE ? VOBJ : VARR);\n+            UniValue *top = stack.back();\n+            if (utyp != top->getType())\n+                return false;\n+\n+            stack.pop_back();\n+            expectName = false;\n+            break;\n+            }\n+\n+        case JTOK_COLON: {\n+            if (!stack.size() || expectName || !expectColon)\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() != VOBJ)\n+                return false;\n+\n+            expectColon = false;\n+            break;\n+            }\n+\n+        case JTOK_COMMA: {\n+            if (!stack.size() || expectName || expectColon ||\n+                (last_tok == JTOK_COMMA) || (last_tok == JTOK_ARR_OPEN))\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_KW_NULL:\n+        case JTOK_KW_TRUE:\n+        case JTOK_KW_FALSE: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal;\n+            switch (tok) {\n+            case JTOK_KW_NULL:\n+                // do nothing more\n+                break;\n+            case JTOK_KW_TRUE:\n+                tmpVal.setBool(true);\n+                break;\n+            case JTOK_KW_FALSE:\n+                tmpVal.setBool(false);\n+                break;\n+            default: /* impossible */ break;\n+            }\n+\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_NUMBER: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal(VNUM, tokenVal);\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_STRING: {\n+            if (!stack.size())\n+                return false;\n+\n+            UniValue *top = stack.back();\n+\n+            if (expectName) {\n+                top->keys.push_back(tokenVal);\n+                expectName = false;\n+                expectColon = true;\n+            } else {\n+                UniValue tmpVal(VSTR, tokenVal);\n+                top->values.push_back(tmpVal);\n+            }\n+\n+            break;\n+            }\n+\n+        default:\n+            return false;\n+        }\n+    } while (!stack.empty ());\n+\n+    /* Check that nothing follows the initial construct (parsed above).  */\n+    tok = getJsonToken(tokenVal, consumed, raw);\n+    if (tok != JTOK_NONE)\n+        return false;\n+\n+    return true;\n+}\n+"
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <ctype.h>\n+#include <iomanip>\n+#include <sstream>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+#include \"univalue_escapes.h\"\n+\n+// TODO: Using UTF8\n+\n+using namespace std;\n+\n+static string json_escape(const string& inS)\n+{\n+    string outS;\n+    outS.reserve(inS.size() * 2);\n+\n+    for (unsigned int i = 0; i < inS.size(); i++) {\n+        unsigned char ch = inS[i];\n+        const char *escStr = escapes[ch];\n+\n+        if (escStr)\n+            outS += escStr;\n+\n+        else if (isprint(ch))\n+            outS += ch;\n+\n+        else {\n+            char tmpesc[16];\n+            sprintf(tmpesc, \"\\\\u%04x\", ch);\n+            outS += tmpesc;\n+        }\n+    }\n+\n+    return outS;\n+}\n+\n+string UniValue::write(unsigned int prettyIndent,\n+                       unsigned int indentLevel) const\n+{\n+    string s;\n+    s.reserve(1024);\n+\n+    unsigned int modIndent = indentLevel;\n+    if (modIndent == 0)\n+        modIndent = 1;\n+\n+    switch (typ) {\n+    case VNULL:\n+        s += \"null\";\n+        break;\n+    case VOBJ:\n+        writeObject(prettyIndent, modIndent, s);\n+        break;\n+    case VARR:\n+        writeArray(prettyIndent, modIndent, s);\n+        break;\n+    case VSTR:\n+        s += \"\\\"\" + json_escape(val) + \"\\\"\";\n+        break;\n+    case VNUM:\n+        s += val;\n+        break;\n+    case VBOOL:\n+        s += (val == \"1\" ? \"true\" : \"false\");\n+        break;\n+    }\n+\n+    return s;\n+}\n+\n+static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n+{\n+    s.append(prettyIndent * indentLevel, ' ');\n+}\n+\n+void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"[\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < values.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1)) {\n+            s += \",\";\n+            if (prettyIndent)\n+                s += \" \";\n+        }\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"]\";\n+}\n+\n+void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"{\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n+        if (prettyIndent)\n+            s += \" \";\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1))\n+            s += \",\";\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"}\";\n+}\n+"
      },
      {
        "sha": "b7f53e875e6e45e6e5cdb37dcd3c3b1a12e2b832",
        "filename": "src/univalue/pc/libunivalue-uninstalled.pc.in",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue-uninstalled.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue-uninstalled.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/pc/libunivalue-uninstalled.pc.in?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,9 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: ${pc_top_builddir}/${pcfiledir}/libunivalue.la"
      },
      {
        "sha": "358a2d5f73219147d8a2f286146dc4e912363f40",
        "filename": "src/univalue/pc/libunivalue.pc.in",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/pc/libunivalue.pc.in?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,10 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: -L${libdir} -lunivalue\n+Cflags: -I${includedir}"
      },
      {
        "sha": "e4dea0df723bbe22e111e639e394c3d62562dddd",
        "filename": "src/univalue/test/.gitignore",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,7 @@\n+\n+unitester\n+\n+*.log\n+*.trs\n+\n+.libs"
      },
      {
        "sha": "6216b865f10219c51c6af21e7a68641bab77ee4f",
        "filename": "src/univalue/test/fail1.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail1.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file"
      },
      {
        "sha": "5d8c0047bd522dfa9fbc642051ed76bd3162d936",
        "filename": "src/univalue/test/fail10.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail10.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail10.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail10.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra value after close\": true} \"misplaced quoted value\"\n\\ No newline at end of file"
      },
      {
        "sha": "76eb95b4583c8ee74eee3bdc25e1db69e1aaf4bb",
        "filename": "src/univalue/test/fail11.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail11.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail11.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail11.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal expression\": 1 + 2}\n\\ No newline at end of file"
      },
      {
        "sha": "77580a4522d8c79245851e72a3644a0709b3d28c",
        "filename": "src/univalue/test/fail12.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail12.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail12.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail12.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal invocation\": alert()}\n\\ No newline at end of file"
      },
      {
        "sha": "379406b59bdb943f145afea98ff1bbc45d43ff45",
        "filename": "src/univalue/test/fail13.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail13.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail13.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail13.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot have leading zeroes\": 013}\n\\ No newline at end of file"
      },
      {
        "sha": "0ed366b38a34f551c25735bdcb9282d27beae026",
        "filename": "src/univalue/test/fail14.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail14.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail14.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail14.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot be hex\": 0x14}\n\\ No newline at end of file"
      },
      {
        "sha": "fc8376b605da69dda23f3fcdd9816dcbf2e736cc",
        "filename": "src/univalue/test/fail15.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail15.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail15.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail15.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\x15\"]\n\\ No newline at end of file"
      },
      {
        "sha": "3fe21d4b532498c8b90872ef571c6867f45e645f",
        "filename": "src/univalue/test/fail16.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail16.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail16.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail16.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\\naked]\n\\ No newline at end of file"
      },
      {
        "sha": "62b9214aeda6d74a72ebeceedf0aae3609f1c638",
        "filename": "src/univalue/test/fail17.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail17.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail17.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail17.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\017\"]\n\\ No newline at end of file"
      },
      {
        "sha": "edac92716f186e39d0e3c818b8b110b9a2c4add5",
        "filename": "src/univalue/test/fail18.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail18.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail18.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail18.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[[\"Too deep\"]]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "3b9c46fa9a296c9d8c35ce4a6592d8bb7ffe748a",
        "filename": "src/univalue/test/fail19.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail19.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail19.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail19.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Missing colon\" null}\n\\ No newline at end of file"
      },
      {
        "sha": "6b7c11e5a56537f81e651980359c62e263f7399f",
        "filename": "src/univalue/test/fail2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail2.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Unclosed array\"\n\\ No newline at end of file"
      },
      {
        "sha": "27c1af3e72ee37bbf64ccd7b77c5bad8cdea1557",
        "filename": "src/univalue/test/fail20.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail20.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail20.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail20.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Double colon\":: null}\n\\ No newline at end of file"
      },
      {
        "sha": "62474573b2160adefc3dc669b39200ea659d6e59",
        "filename": "src/univalue/test/fail21.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail21.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail21.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail21.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead of colon\", null}\n\\ No newline at end of file"
      },
      {
        "sha": "a7752581bcf7f3b901aef052a2df541c1285b6c2",
        "filename": "src/univalue/test/fail22.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail22.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail22.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail22.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Colon instead of comma\": false]\n\\ No newline at end of file"
      },
      {
        "sha": "494add1ca190e12acd1c8e34ac819a6316c927bc",
        "filename": "src/univalue/test/fail23.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail23.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail23.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail23.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Bad value\", truth]\n\\ No newline at end of file"
      },
      {
        "sha": "caff239bfc36297da08828095105bb497b8aef2a",
        "filename": "src/univalue/test/fail24.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail24.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail24.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail24.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+['single quote']\n\\ No newline at end of file"
      },
      {
        "sha": "8b7ad23e010314591d914519996c28483b5dadc8",
        "filename": "src/univalue/test/fail25.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail25.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail25.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail25.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"\ttab\tcharacter\tin\tstring\t\"]\n\\ No newline at end of file"
      },
      {
        "sha": "845d26a6a54398c49cd492e6836c0d1987f554e4",
        "filename": "src/univalue/test/fail26.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail26.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail26.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail26.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"tab\\   character\\   in\\  string\\  \"]\n\\ No newline at end of file"
      },
      {
        "sha": "6b01a2ca4a97ec36604771dcc3175bbcda865d85",
        "filename": "src/univalue/test/fail27.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail27.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail27.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail27.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "621a0101c664a619457d16f1107a677c911481b4",
        "filename": "src/univalue/test/fail28.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail28.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail28.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail28.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\\\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "47ec421bb6242648e80b2b465049acbae1e6e44a",
        "filename": "src/univalue/test/fail29.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail29.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail29.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail29.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[0e]\n\\ No newline at end of file"
      },
      {
        "sha": "168c81eb78537ea4006ea0a46b67851d9995564d",
        "filename": "src/univalue/test/fail3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail3.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{unquoted_key: \"keys must be quoted\"}\n\\ No newline at end of file"
      },
      {
        "sha": "8ab0bc4b8b2c73b616a45931d05720555a2f7762",
        "filename": "src/univalue/test/fail30.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail30.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail30.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail30.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[0e+]\n\\ No newline at end of file"
      },
      {
        "sha": "1cce602b518fc6e7f164a58cc710def27e64b8a5",
        "filename": "src/univalue/test/fail31.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail31.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail31.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail31.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[0e+-1]\n\\ No newline at end of file"
      },
      {
        "sha": "45cba7396ff7462dd6de005c32fd2a95c5318e5f",
        "filename": "src/univalue/test/fail32.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail32.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail32.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail32.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead if closing brace\": true,\n\\ No newline at end of file"
      },
      {
        "sha": "ca5eb19dc97f5ca363ff33a4c3644ad28e612679",
        "filename": "src/univalue/test/fail33.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail33.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail33.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail33.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"mismatch\"}\n\\ No newline at end of file"
      },
      {
        "sha": "3f8be172865d17dd812f50d5cf00a2509f51e6bf",
        "filename": "src/univalue/test/fail34.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail34.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail34.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail34.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{} garbage\n\\ No newline at end of file"
      },
      {
        "sha": "9de168bf34e2e368d044bccc099d44b02316de66",
        "filename": "src/univalue/test/fail4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail4.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"extra comma\",]\n\\ No newline at end of file"
      },
      {
        "sha": "ddf3ce3d2409467011ec7545551d5d078bce1bfd",
        "filename": "src/univalue/test/fail5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail5.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"double extra comma\",,]\n\\ No newline at end of file"
      },
      {
        "sha": "ed91580e1b1c15194a9a758f1b231575074722db",
        "filename": "src/univalue/test/fail6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail6.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[   , \"<-- missing value\"]\n\\ No newline at end of file"
      },
      {
        "sha": "8a96af3e4ee6c7fffd8da641dedcd750a5cc4d9d",
        "filename": "src/univalue/test/fail7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail7.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Comma after the close\"],\n\\ No newline at end of file"
      },
      {
        "sha": "b28479c6ecb21a801d6988b9ea39a4eb00a64702",
        "filename": "src/univalue/test/fail8.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail8.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail8.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail8.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Extra close\"]]\n\\ No newline at end of file"
      },
      {
        "sha": "5815574f363e58cf91578e909ef4dabb402a75de",
        "filename": "src/univalue/test/fail9.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail9.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail9.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail9.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra comma\": true,}\n\\ No newline at end of file"
      },
      {
        "sha": "70e26854369282e625e75b302782f581e610f2b3",
        "filename": "src/univalue/test/pass1.json",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass1.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,58 @@\n+[\n+    \"JSON Test Pattern pass1\",\n+    {\"object with 1 member\":[\"array with 1 element\"]},\n+    {},\n+    [],\n+    -42,\n+    true,\n+    false,\n+    null,\n+    {\n+        \"integer\": 1234567890,\n+        \"real\": -9876.543210,\n+        \"e\": 0.123456789e-12,\n+        \"E\": 1.234567890E+34,\n+        \"\":  23456789012E66,\n+        \"zero\": 0,\n+        \"one\": 1,\n+        \"space\": \" \",\n+        \"quote\": \"\\\"\",\n+        \"backslash\": \"\\\\\",\n+        \"controls\": \"\\b\\f\\n\\r\\t\",\n+        \"slash\": \"/ & \\/\",\n+        \"alpha\": \"abcdefghijklmnopqrstuvwyz\",\n+        \"ALPHA\": \"ABCDEFGHIJKLMNOPQRSTUVWYZ\",\n+        \"digit\": \"0123456789\",\n+        \"0123456789\": \"digit\",\n+        \"special\": \"`1~!@#$%^&*()_+-={':[,]}|;.</>?\",\n+        \"hex\": \"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\",\n+        \"true\": true,\n+        \"false\": false,\n+        \"null\": null,\n+        \"array\":[  ],\n+        \"object\":{  },\n+        \"address\": \"50 St. James Street\",\n+        \"url\": \"http://www.JSON.org/\",\n+        \"comment\": \"// /* <!-- --\",\n+        \"# -- --> */\": \" \",\n+        \" s p a c e d \" :[1,2 , 3\n+\n+,\n+\n+4 , 5        ,          6           ,7        ],\"compact\":[1,2,3,4,5,6,7],\n+        \"jsontext\": \"{\\\"object with 1 member\\\":[\\\"array with 1 element\\\"]}\",\n+        \"quotes\": \"&#34; \\u0022 %22 0x22 034 &#x22;\",\n+        \"\\/\\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?\"\n+: \"A key can be any string\"\n+    },\n+    0.5 ,98.6\n+,\n+99.44\n+,\n+\n+1066,\n+1e1,\n+0.1e1,\n+1e-1,\n+1e00,2e+00,2e-00\n+,\"rosebud\"]\n\\ No newline at end of file"
      },
      {
        "sha": "d3c63c7ad845e4cedd0c70d13102b38c51ec197a",
        "filename": "src/univalue/test/pass2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass2.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[\"Not too deep\"]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "4528d51f1ac615e7e11dbb1321dc99187705f0d8",
        "filename": "src/univalue/test/pass3.json",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass3.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,6 @@\n+{\n+    \"JSON Test Pattern pass3\": {\n+        \"The outermost value\": \"must be an object or array.\",\n+        \"In this test\": \"It is an object.\"\n+    }\n+}"
      },
      {
        "sha": "835556e031708f8e3c9d07a8f31980d6a1228986",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <cassert>\n+#include <string>\n+#include \"univalue.h\"\n+\n+#ifndef JSON_TEST_SRC\n+#error JSON_TEST_SRC must point to test source directory\n+#endif\n+\n+#ifndef ARRAY_SIZE\n+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n+#endif\n+\n+using namespace std;\n+string srcdir(JSON_TEST_SRC);\n+\n+static void runtest(string filename, const string& jdata)\n+{\n+        fprintf(stderr, \"test %s\\n\", filename.c_str());\n+\n+        string prefix = filename.substr(0, 4);\n+\n+        bool wantPass = (prefix == \"pass\");\n+        bool wantFail = (prefix == \"fail\");\n+        assert(wantPass || wantFail);\n+\n+        UniValue val;\n+        bool testResult = val.read(jdata);\n+\n+        if (wantPass) {\n+            assert(testResult == true);\n+        } else {\n+            assert(testResult == false);\n+        }\n+}\n+\n+static void runtest_file(const char *filename_)\n+{\n+        string basename(filename_);\n+        string filename = srcdir + \"/\" + basename;\n+        FILE *f = fopen(filename.c_str(), \"r\");\n+        assert(f != NULL);\n+\n+        string jdata;\n+\n+        char buf[4096];\n+        while (!feof(f)) {\n+                int bread = fread(buf, 1, sizeof(buf), f);\n+                assert(!ferror(f));\n+\n+                string s(buf, bread);\n+                jdata += s;\n+        }\n+\n+        assert(!ferror(f));\n+        fclose(f);\n+\n+        runtest(basename, jdata);\n+}\n+\n+static const char *filenames[] = {\n+        \"fail10.json\",\n+        \"fail11.json\",\n+        \"fail12.json\",\n+        \"fail13.json\",\n+        \"fail14.json\",\n+        \"fail15.json\",\n+        \"fail16.json\",\n+        \"fail17.json\",\n+        //\"fail18.json\",             // investigate\n+        \"fail19.json\",\n+        \"fail1.json\",\n+        \"fail20.json\",\n+        \"fail21.json\",\n+        \"fail22.json\",\n+        \"fail23.json\",\n+        \"fail24.json\",\n+        \"fail25.json\",\n+        \"fail26.json\",\n+        \"fail27.json\",\n+        \"fail28.json\",\n+        \"fail29.json\",\n+        \"fail2.json\",\n+        \"fail30.json\",\n+        \"fail31.json\",\n+        \"fail32.json\",\n+        \"fail33.json\",\n+        \"fail34.json\",\n+        \"fail3.json\",\n+        \"fail4.json\",                // extra comma\n+        \"fail5.json\",\n+        \"fail6.json\",\n+        \"fail7.json\",\n+        \"fail8.json\",\n+        \"fail9.json\",               // extra comma\n+        \"pass1.json\",\n+        \"pass2.json\",\n+        \"pass3.json\",\n+};\n+\n+int main (int argc, char *argv[])\n+{\n+    for (unsigned int fidx = 0; fidx < ARRAY_SIZE(filenames); fidx++) {\n+        runtest_file(filenames[fidx]);\n+    }\n+\n+    return 0;\n+}\n+"
      }
    ]
  },
  {
    "sha": "2f9f082b5ef3c495c70598ef23383effef675f9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjlmMDgyYjVlZjNjNDk1YzcwNTk4ZWYyMzM4M2VmZmVmNjc1Zjlh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "message": "Squashed 'src/univalue/' content from commit 87d9045\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: 87d90455ff5e87dedc304353aa23ace47ffb6c1c",
      "tree": {
        "sha": "977f901119038f0ce1351b1d0c78bdfe21f7d354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/977f901119038f0ce1351b1d0c78bdfe21f7d354"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f9f082b5ef3c495c70598ef23383effef675f9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9f082b5ef3c495c70598ef23383effef675f9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9f082b5ef3c495c70598ef23383effef675f9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9f082b5ef3c495c70598ef23383effef675f9a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [],
    "stats": {
      "total": 1994,
      "additions": 1994,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca9e8423481f8c6d5574c6088746fd9ed2dc21f5",
        "filename": ".gitignore",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,22 @@\n+.deps/\n+INSTALL\n+Makefile\n+Makefile.in\n+aclocal.m4\n+autom4te.cache/\n+compile\n+config.log\n+config.status\n+config.guess\n+config.sub\n+configure\n+depcomp\n+install-sh\n+missing\n+stamp-h1\n+univalue-config.h*\n+test-driver\n+libtool\n+ltmain.sh\n+\n+*.o"
      },
      {
        "sha": "af632c78d9c3d2eb1342469180e5dc1db7fcb807",
        "filename": ".travis.yml",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,52 @@\n+\n+language: cpp\n+\n+compiler:\n+  - clang\n+  - gcc\n+\n+os:\n+  - linux\n+  - osx\n+\n+sudo: false\n+\n+env:\n+  global:\n+    - MAKEJOBS=-j3\n+    - RUN_TESTS=true\n+    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n+\n+cache:\n+  apt: true\n+\n+addons:\n+  apt:\n+    packages:\n+      - pkg-config\n+\n+before_script:\n+  - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n+  - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n+\n+script:\n+  - if [ -n \"$UNIVALUE_CONFIG\" ]; then unset CC; unset CXX; fi\n+  - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n+  - UNIVALUE_CONFIG_ALL=\"--prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+  - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n+  - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n+  - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n+  - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+\n+matrix:\n+  fast_finish: true\n+  include:\n+    - os: linux\n+      compiler: gcc\n+      env: UNIVALUE_CONFIG=--host=x86_64-w64-mingw32 RUN_TESTS=false\n+      addons:\n+        apt:\n+          packages:\n+            - g++-mingw-w64-x86-64\n+            - gcc-mingw-w64-x86-64\n+            - binutils-mingw-w64-x86-64"
      },
      {
        "sha": "1fb429f3569c7f8a8e57e69bfb984ab905bccf15",
        "filename": "COPYING",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,19 @@\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+"
      },
      {
        "sha": "2800f466dc55bfbc94f20d4ededd7f5ac92a1d15",
        "filename": "Makefile.am",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,84 @@\n+ACLOCAL_AMFLAGS = -I build-aux/m4\n+.PHONY: gen\n+.INTERMEDIATE: $(GENBIN)\n+\n+include_HEADERS = include/univalue.h\n+noinst_HEADERS = lib/univalue_escapes.h\n+\n+lib_LTLIBRARIES = lib/libunivalue.la\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA = pc/libunivalue.pc\n+\n+lib_libunivalue_la_SOURCES = \\\n+\tlib/univalue.cpp \\\n+\tlib/univalue_read.cpp \\\n+\tlib/univalue_write.cpp\n+\n+lib_libunivalue_la_LDFLAGS = \\\n+\t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n+\t-no-undefined\n+lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+\n+TESTS = test/unitester\n+\n+GENBIN = gen/gen$(BUILD_EXEEXT)\n+GEN_SRCS = gen/gen.cpp\n+\n+$(GENBIN): $(GEN_SRCS)\n+\t@echo Building $@\n+\t$(AM_V_at)c++ -I$(top_srcdir)/include -o $@ $<\n+\n+gen: lib/univalue_escapes.h $(GENBIN)\n+\t@echo Updating $<\n+\t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n+\n+noinst_PROGRAMS = $(TESTS)\n+\n+TEST_DATA_DIR=test\n+\n+test_unitester_SOURCES = test/unitester.cpp\n+test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n+test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+TEST_FILES = \\\n+\t$(TEST_DATA_DIR)/fail10.json \\\n+\t$(TEST_DATA_DIR)/fail11.json \\\n+\t$(TEST_DATA_DIR)/fail12.json \\\n+\t$(TEST_DATA_DIR)/fail13.json \\\n+\t$(TEST_DATA_DIR)/fail14.json \\\n+\t$(TEST_DATA_DIR)/fail15.json \\\n+\t$(TEST_DATA_DIR)/fail16.json \\\n+\t$(TEST_DATA_DIR)/fail17.json \\\n+\t$(TEST_DATA_DIR)/fail18.json \\\n+\t$(TEST_DATA_DIR)/fail19.json \\\n+\t$(TEST_DATA_DIR)/fail1.json \\\n+\t$(TEST_DATA_DIR)/fail20.json \\\n+\t$(TEST_DATA_DIR)/fail21.json \\\n+\t$(TEST_DATA_DIR)/fail22.json \\\n+\t$(TEST_DATA_DIR)/fail23.json \\\n+\t$(TEST_DATA_DIR)/fail24.json \\\n+\t$(TEST_DATA_DIR)/fail25.json \\\n+\t$(TEST_DATA_DIR)/fail26.json \\\n+\t$(TEST_DATA_DIR)/fail27.json \\\n+\t$(TEST_DATA_DIR)/fail28.json \\\n+\t$(TEST_DATA_DIR)/fail29.json \\\n+\t$(TEST_DATA_DIR)/fail2.json \\\n+\t$(TEST_DATA_DIR)/fail30.json \\\n+\t$(TEST_DATA_DIR)/fail31.json \\\n+\t$(TEST_DATA_DIR)/fail32.json \\\n+\t$(TEST_DATA_DIR)/fail33.json \\\n+\t$(TEST_DATA_DIR)/fail34.json \\\n+\t$(TEST_DATA_DIR)/fail3.json \\\n+\t$(TEST_DATA_DIR)/fail4.json \\\n+\t$(TEST_DATA_DIR)/fail5.json \\\n+\t$(TEST_DATA_DIR)/fail6.json \\\n+\t$(TEST_DATA_DIR)/fail7.json \\\n+\t$(TEST_DATA_DIR)/fail8.json \\\n+\t$(TEST_DATA_DIR)/fail9.json \\\n+\t$(TEST_DATA_DIR)/pass1.json \\\n+\t$(TEST_DATA_DIR)/pass2.json \\\n+\t$(TEST_DATA_DIR)/pass3.json\n+\n+EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "README",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,7 @@\n+\n+\t\tUniValue\n+\n+A universal value object, with JSON encoding (output) and decoding (input).\n+\n+Built as a single dynamic RAII C++ object class, and no templates.\n+"
      },
      {
        "sha": "5530048e923e51909251e7e32f7023f1fc749999",
        "filename": "TODO",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/TODO",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/TODO",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/TODO?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,10 @@\n+\n+Rearrange tree for easier 'git subtree' style use\n+\n+Move towards C++11 etc.\n+\n+Namespace support - must come up with useful shorthand, avoiding\n+long Univalue::Univalue::Univalue usages forced upon library users.\n+\n+Improve test suite\n+"
      },
      {
        "sha": "4b38721faad09b9339107bb375d2d31fdbde9d4a",
        "filename": "autogen.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,9 @@\n+#!/bin/sh\n+set -e\n+srcdir=\"$(dirname $0)\"\n+cd \"$srcdir\"\n+if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n+  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  export LIBTOOLIZE\n+fi\n+autoreconf --install --force"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "build-aux/m4/.empty",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/.empty?ref=2f9f082b5ef3c495c70598ef23383effef675f9a"
      },
      {
        "sha": "6cd951622925afac13d0820b2c25b4f8cac7ff1e",
        "filename": "configure.ac",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,69 @@\n+m4_define([libunivalue_major_version], [1])\n+m4_define([libunivalue_minor_version], [1])\n+m4_define([libunivalue_micro_version], [1])\n+m4_define([libunivalue_interface_age], [1])\n+# If you need a modifier for the version number. \n+# Normally empty, but can be used to make \"fixup\" releases.\n+m4_define([libunivalue_extraversion], [])\n+\n+dnl libtool versioning from libunivalue\n+m4_define([libunivalue_current], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version - libunivalue_interface_age)])\n+m4_define([libunivalue_binary_age], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version)])\n+m4_define([libunivalue_revision], [libunivalue_interface_age])\n+m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_interface_age)])\n+m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n+\n+\n+AC_INIT([univalue], [1.0.0],\n+        [http://github.com/jgarzik/univalue/])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_PREREQ(2.60)\n+AC_CONFIG_SRCDIR([lib/univalue.cpp])\n+AC_CONFIG_AUX_DIR([build-aux])\n+AC_CONFIG_MACRO_DIR([build-aux/m4])\n+AC_CONFIG_HEADERS([univalue-config.h])\n+AM_INIT_AUTOMAKE([subdir-objects foreign])\n+\n+LIBUNIVALUE_MAJOR_VERSION=libunivalue_major_version\n+LIBUNIVALUE_MINOR_VERSION=libunivalue_minor_version\n+LIBUNIVALUE_MICRO_VERSION=libunivalue_micro_version\n+LIBUNIVALUE_INTERFACE_AGE=libunivalue_interface_age\n+\n+# ABI version\n+# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n+LIBUNIVALUE_CURRENT=libunivalue_current\n+LIBUNIVALUE_REVISION=libunivalue_revision\n+LIBUNIVALUE_AGE=libunivalue_age\n+\n+AC_SUBST(LIBUNIVALUE_CURRENT)\n+AC_SUBST(LIBUNIVALUE_REVISION)\n+AC_SUBST(LIBUNIVALUE_AGE)\n+\n+LT_INIT\n+LT_LANG([C++])\n+\n+case $host in\n+  *mingw*)\n+    LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"\n+  ;;\n+esac\n+\n+BUILD_EXEEXT=\n+case $build in\n+  *mingw*)\n+    BUILD_EXEEXT=\".exe\"\n+  ;;\n+esac\n+\n+AC_CONFIG_FILES([\n+    Makefile\n+    pc/libunivalue.pc\n+    pc/libunivalue-uninstalled.pc])\n+\n+AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(BUILD_EXEEXT)\n+AC_OUTPUT\n+"
      },
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "gen/gen.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/gen/gen.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+//\n+// To re-create univalue_escapes.h:\n+// $ g++ -o gen gen.cpp\n+// $ ./gen > univalue_escapes.h\n+//\n+\n+#include <ctype.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+static bool initEscapes;\n+static const char *escapes[256];\n+\n+static void initJsonEscape()\n+{\n+    escapes[(int)'\"'] = \"\\\\\\\"\";\n+    escapes[(int)'\\\\'] = \"\\\\\\\\\";\n+    escapes[(int)'\\b'] = \"\\\\b\";\n+    escapes[(int)'\\f'] = \"\\\\f\";\n+    escapes[(int)'\\n'] = \"\\\\n\";\n+    escapes[(int)'\\r'] = \"\\\\r\";\n+    escapes[(int)'\\t'] = \"\\\\t\";\n+\n+    initEscapes = true;\n+}\n+\n+static void outputEscape()\n+{\n+\tprintf(\t\"// Automatically generated file. Do not modify.\\n\"\n+\t\t\"#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"static const char *escapes[256] = {\\n\");\n+\n+\tfor (unsigned int i = 0; i < 256; i++) {\n+\t\tif (!escapes[i]) {\n+\t\t\tprintf(\"\\tNULL,\\n\");\n+\t\t} else {\n+\t\t\tprintf(\"\\t\\\"\");\n+\n+\t\t\tunsigned int si;\n+\t\t\tfor (si = 0; si < strlen(escapes[i]); si++) {\n+\t\t\t\tchar ch = escapes[i][si];\n+\t\t\t\tswitch (ch) {\n+\t\t\t\tcase '\"':\n+\t\t\t\t\tprintf(\"\\\\\\\"\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase '\\\\':\n+\t\t\t\t\tprintf(\"\\\\\\\\\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tprintf(\"%c\", escapes[i][si]);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprintf(\"\\\",\\n\");\n+\t\t}\n+\t}\n+\n+\tprintf(\t\"};\\n\"\n+\t\t\"#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\");\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+\tinitJsonEscape();\n+\toutputEscape();\n+\treturn 0;\n+}\n+"
      },
      {
        "sha": "ac051160118f4ef84237ddc5e766e91d5fb8285e",
        "filename": "include/univalue.h",
        "status": "added",
        "additions": 250,
        "deletions": 0,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,250 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+#include <sstream>        // .get_int64()\n+#include <utility>        // std::pair\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(bool val_) {\n+        setBool(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    const std::string& getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const { return values.size(); }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    const UniValue& operator[](const std::string& key) const;\n+    const UniValue& operator[](unsigned int index) const;\n+    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+\n+    bool isNull() const { return (typ == VNULL); }\n+    bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n+    bool isFalse() const { return (typ == VBOOL) && (val != \"1\"); }\n+    bool isBool() const { return (typ == VBOOL); }\n+    bool isStr() const { return (typ == VSTR); }\n+    bool isNum() const { return (typ == VNUM); }\n+    bool isArray() const { return (typ == VARR); }\n+    bool isObject() const { return (typ == VOBJ); }\n+\n+    bool push_back(const UniValue& val);\n+    bool push_back(const std::string& val_) {\n+        UniValue tmpVal(VSTR, val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(const char *val_) {\n+        std::string s(val_);\n+        return push_back(s);\n+    }\n+    bool push_backV(const std::vector<UniValue>& vec);\n+\n+    bool pushKV(const std::string& key, const UniValue& val);\n+    bool pushKV(const std::string& key, const std::string& val) {\n+        UniValue tmpVal(VSTR, val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, const char *val_) {\n+        std::string val(val_);\n+        return pushKV(key, val);\n+    }\n+    bool pushKV(const std::string& key, int64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, uint64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, int val) {\n+        UniValue tmpVal((int64_t)val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, double val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKVs(const UniValue& obj);\n+\n+    std::string write(unsigned int prettyIndent = 0,\n+                      unsigned int indentLevel = 0) const;\n+\n+    bool read(const char *raw);\n+    bool read(const std::string& rawStr) {\n+        return read(rawStr.c_str());\n+    }\n+\n+private:\n+    UniValue::VType typ;\n+    std::string val;                       // numbers are stored as C++ strings\n+    std::vector<std::string> keys;\n+    std::vector<UniValue> values;\n+\n+    int findKey(const std::string& key) const;\n+    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+\n+public:\n+    // Strict type-specific getters, these throw std::runtime_error if the\n+    // value is of unexpected type\n+    std::vector<std::string> getKeys() const;\n+    std::vector<UniValue> getValues() const;\n+    bool get_bool() const;\n+    std::string get_str() const;\n+    int get_int() const;\n+    int64_t get_int64() const;\n+    double get_real() const;\n+    const UniValue& get_obj() const;\n+    const UniValue& get_array() const;\n+\n+    enum VType type() const { return getType(); }\n+    bool push_back(std::pair<std::string,UniValue> pear) {\n+        return pushKV(pear.first, pear.second);\n+    }\n+    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n+};\n+\n+//\n+// The following were added for compatibility with json_spirit.\n+// Most duplicate other methods, and should be removed.\n+//\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(cVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(strVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(u64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(i64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(dVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n+{\n+    std::string key(cKey);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n+{\n+    return std::make_pair(key, uVal);\n+}\n+\n+enum jtokentype {\n+    JTOK_ERR        = -1,\n+    JTOK_NONE       = 0,                           // eof\n+    JTOK_OBJ_OPEN,\n+    JTOK_OBJ_CLOSE,\n+    JTOK_ARR_OPEN,\n+    JTOK_ARR_CLOSE,\n+    JTOK_COLON,\n+    JTOK_COMMA,\n+    JTOK_KW_NULL,\n+    JTOK_KW_TRUE,\n+    JTOK_KW_FALSE,\n+    JTOK_NUMBER,\n+    JTOK_STRING,\n+};\n+\n+extern enum jtokentype getJsonToken(std::string& tokenVal,\n+                                    unsigned int& consumed, const char *raw);\n+extern const char *uvTypeName(UniValue::VType t);\n+\n+extern const UniValue NullUniValue;\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name);\n+\n+#endif // __UNIVALUE_H__\n\\ No newline at end of file"
      },
      {
        "sha": "ca8c16dcd4b0d5ab31a3ac29be11d35e768c3cdb",
        "filename": "lib/.gitignore",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/.gitignore?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,10 @@\n+\n+libunivalue-uninstalled.pc\n+libunivalue.pc\n+libunivalue.a\n+gen\n+\n+.libs\n+*.lo\n+*.la\n+"
      },
      {
        "sha": "883e8651fe3d42e2c5c24a6c436dc2bf4c0f351b",
        "filename": "lib/univalue.cpp",
        "status": "added",
        "additions": 365,
        "deletions": 0,
        "changes": 365,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,365 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <iomanip>\n+#include <limits>\n+#include <sstream>\n+#include <stdexcept>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"univalue.h\"\n+\n+namespace \n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+using namespace std;\n+\n+const UniValue NullUniValue;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val_)\n+{\n+    clear();\n+    typ = VBOOL;\n+    if (val_)\n+        val = \"1\";\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    return (tt == JTOK_NUMBER);\n+}\n+\n+bool UniValue::setNumStr(const string& val_)\n+{\n+    if (!validNumStr(val_))\n+        return false;\n+\n+    clear();\n+    typ = VNUM;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setInt(uint64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setInt(int64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setFloat(double val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << std::setprecision(16) << val;\n+\n+    bool ret = setNumStr(oss.str());\n+    typ = VNUM;\n+    return ret;\n+}\n+\n+bool UniValue::setStr(const string& val_)\n+{\n+    clear();\n+    typ = VSTR;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setArray()\n+{\n+    clear();\n+    typ = VARR;\n+    return true;\n+}\n+\n+bool UniValue::setObject()\n+{\n+    clear();\n+    typ = VOBJ;\n+    return true;\n+}\n+\n+bool UniValue::push_back(const UniValue& val)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::push_backV(const std::vector<UniValue>& vec)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.insert(values.end(), vec.begin(), vec.end());\n+\n+    return true;\n+}\n+\n+bool UniValue::pushKV(const std::string& key, const UniValue& val)\n+{\n+    if (typ != VOBJ)\n+        return false;\n+\n+    keys.push_back(key);\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::pushKVs(const UniValue& obj)\n+{\n+    if (typ != VOBJ || obj.typ != VOBJ)\n+        return false;\n+\n+    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n+        keys.push_back(obj.keys[i]);\n+        values.push_back(obj.values[i]);\n+    }\n+\n+    return true;\n+}\n+\n+int UniValue::findKey(const std::string& key) const\n+{\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key)\n+            return (int) i;\n+    }\n+\n+    return -1;\n+}\n+\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+{\n+    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n+         it != t.end(); it++) {\n+        int idx = findKey(it->first);\n+        if (idx < 0)\n+            return false;\n+\n+        if (values[idx].getType() != it->second)\n+            return false;\n+    }\n+\n+    return true;\n+}\n+\n+const UniValue& UniValue::operator[](const std::string& key) const\n+{\n+    if (typ != VOBJ)\n+        return NullUniValue;\n+\n+    int index = findKey(key);\n+    if (index < 0)\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const UniValue& UniValue::operator[](unsigned int index) const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        return NullUniValue;\n+    if (index >= values.size())\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const char *uvTypeName(UniValue::VType t)\n+{\n+    switch (t) {\n+    case UniValue::VNULL: return \"null\";\n+    case UniValue::VBOOL: return \"bool\";\n+    case UniValue::VOBJ: return \"object\";\n+    case UniValue::VARR: return \"array\";\n+    case UniValue::VSTR: return \"string\";\n+    case UniValue::VNUM: return \"number\";\n+    }\n+\n+    // not reached\n+    return NULL;\n+}\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name)\n+{\n+    for (unsigned int i = 0; i < obj.keys.size(); i++)\n+    {\n+        if( obj.keys[i] == name )\n+        {\n+            return obj.values[i];\n+        }\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+std::vector<std::string> UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+std::vector<UniValue> UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+std::string UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "lib/univalue_escapes.h",
        "status": "added",
        "additions": 262,
        "deletions": 0,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_escapes.h?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,262 @@\n+// Automatically generated file. Do not modify.\n+#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+static const char *escapes[256] = {\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\b\",\n+\t\"\\\\t\",\n+\t\"\\\\n\",\n+\tNULL,\n+\t\"\\\\f\",\n+\t\"\\\\r\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\"\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\\\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+};\n+#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "lib/univalue_read.cpp",
        "status": "added",
        "additions": 389,
        "deletions": 0,
        "changes": 389,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_read.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,389 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <string.h>\n+#include <vector>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+// convert hexadecimal string to unsigned integer\n+static const char *hatoui(const char *first, const char *last,\n+                          unsigned int& out)\n+{\n+    unsigned int result = 0;\n+    for (; first != last; ++first)\n+    {\n+        int digit;\n+        if (isdigit(*first))\n+            digit = *first - '0';\n+\n+        else if (*first >= 'a' && *first <= 'f')\n+            digit = *first - 'a' + 10;\n+\n+        else if (*first >= 'A' && *first <= 'F')\n+            digit = *first - 'A' + 10;\n+\n+        else\n+            break;\n+\n+        result = 16 * result + digit;\n+    }\n+    out = result;\n+\n+    return first;\n+}\n+\n+enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n+                            const char *raw)\n+{\n+    tokenVal.clear();\n+    consumed = 0;\n+\n+    const char *rawStart = raw;\n+\n+    while ((*raw) && (isspace(*raw)))             // skip whitespace\n+        raw++;\n+\n+    switch (*raw) {\n+\n+    case 0:\n+        return JTOK_NONE;\n+\n+    case '{':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_OPEN;\n+    case '}':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_CLOSE;\n+    case '[':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_OPEN;\n+    case ']':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_CLOSE;\n+\n+    case ':':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COLON;\n+    case ',':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COMMA;\n+\n+    case 'n':\n+    case 't':\n+    case 'f':\n+        if (!strncmp(raw, \"null\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_NULL;\n+        } else if (!strncmp(raw, \"true\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_TRUE;\n+        } else if (!strncmp(raw, \"false\", 5)) {\n+            raw += 5;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_FALSE;\n+        } else\n+            return JTOK_ERR;\n+\n+    case '-':\n+    case '0':\n+    case '1':\n+    case '2':\n+    case '3':\n+    case '4':\n+    case '5':\n+    case '6':\n+    case '7':\n+    case '8':\n+    case '9': {\n+        // part 1: int\n+        string numStr;\n+\n+        const char *first = raw;\n+\n+        const char *firstDigit = first;\n+        if (!isdigit(*firstDigit))\n+            firstDigit++;\n+        if ((*firstDigit == '0') && isdigit(firstDigit[1]))\n+            return JTOK_ERR;\n+\n+        numStr += *raw;                       // copy first char\n+        raw++;\n+\n+        if ((*first == '-') && (!isdigit(*raw)))\n+            return JTOK_ERR;\n+\n+        while ((*raw) && isdigit(*raw)) {     // copy digits\n+            numStr += *raw;\n+            raw++;\n+        }\n+\n+        // part 2: frac\n+        if (*raw == '.') {\n+            numStr += *raw;                   // copy .\n+            raw++;\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        // part 3: exp\n+        if (*raw == 'e' || *raw == 'E') {\n+            numStr += *raw;                   // copy E\n+            raw++;\n+\n+            if (*raw == '-' || *raw == '+') { // copy +/-\n+                numStr += *raw;\n+                raw++;\n+            }\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = numStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_NUMBER;\n+        }\n+\n+    case '\"': {\n+        raw++;                                // skip \"\n+\n+        string valStr;\n+\n+        while (*raw) {\n+            if (*raw < 0x20)\n+                return JTOK_ERR;\n+\n+            else if (*raw == '\\\\') {\n+                raw++;                        // skip backslash\n+\n+                switch (*raw) {\n+                case '\"':  valStr += \"\\\"\"; break;\n+                case '\\\\': valStr += \"\\\\\"; break;\n+                case '/':  valStr += \"/\"; break;\n+                case 'b':  valStr += \"\\b\"; break;\n+                case 'f':  valStr += \"\\f\"; break;\n+                case 'n':  valStr += \"\\n\"; break;\n+                case 'r':  valStr += \"\\r\"; break;\n+                case 't':  valStr += \"\\t\"; break;\n+\n+                case 'u': {\n+                    unsigned int codepoint;\n+                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                               raw + 1 + 4)\n+                        return JTOK_ERR;\n+\n+                    if (codepoint <= 0x7f)\n+                        valStr.push_back((char)codepoint);\n+                    else if (codepoint <= 0x7FF) {\n+                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    } else if (codepoint <= 0xFFFF) {\n+                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n+                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    }\n+\n+                    raw += 4;\n+                    break;\n+                    }\n+                default:\n+                    return JTOK_ERR;\n+\n+                }\n+\n+                raw++;                        // skip esc'd char\n+            }\n+\n+            else if (*raw == '\"') {\n+                raw++;                        // skip \"\n+                break;                        // stop scanning\n+            }\n+\n+            else {\n+                valStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = valStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_STRING;\n+        }\n+\n+    default:\n+        return JTOK_ERR;\n+    }\n+}\n+\n+bool UniValue::read(const char *raw)\n+{\n+    clear();\n+\n+    bool expectName = false;\n+    bool expectColon = false;\n+    vector<UniValue*> stack;\n+\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tok = JTOK_NONE;\n+    enum jtokentype last_tok = JTOK_NONE;\n+    do {\n+        last_tok = tok;\n+\n+        tok = getJsonToken(tokenVal, consumed, raw);\n+        if (tok == JTOK_NONE || tok == JTOK_ERR)\n+            return false;\n+        raw += consumed;\n+\n+        switch (tok) {\n+\n+        case JTOK_OBJ_OPEN:\n+        case JTOK_ARR_OPEN: {\n+            VType utyp = (tok == JTOK_OBJ_OPEN ? VOBJ : VARR);\n+            if (!stack.size()) {\n+                if (utyp == VOBJ)\n+                    setObject();\n+                else\n+                    setArray();\n+                stack.push_back(this);\n+            } else {\n+                UniValue tmpVal(utyp);\n+                UniValue *top = stack.back();\n+                top->values.push_back(tmpVal);\n+\n+                UniValue *newTop = &(top->values.back());\n+                stack.push_back(newTop);\n+            }\n+\n+            if (utyp == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_OBJ_CLOSE:\n+        case JTOK_ARR_CLOSE: {\n+            if (!stack.size() || expectColon || (last_tok == JTOK_COMMA))\n+                return false;\n+\n+            VType utyp = (tok == JTOK_OBJ_CLOSE ? VOBJ : VARR);\n+            UniValue *top = stack.back();\n+            if (utyp != top->getType())\n+                return false;\n+\n+            stack.pop_back();\n+            expectName = false;\n+            break;\n+            }\n+\n+        case JTOK_COLON: {\n+            if (!stack.size() || expectName || !expectColon)\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() != VOBJ)\n+                return false;\n+\n+            expectColon = false;\n+            break;\n+            }\n+\n+        case JTOK_COMMA: {\n+            if (!stack.size() || expectName || expectColon ||\n+                (last_tok == JTOK_COMMA) || (last_tok == JTOK_ARR_OPEN))\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_KW_NULL:\n+        case JTOK_KW_TRUE:\n+        case JTOK_KW_FALSE: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal;\n+            switch (tok) {\n+            case JTOK_KW_NULL:\n+                // do nothing more\n+                break;\n+            case JTOK_KW_TRUE:\n+                tmpVal.setBool(true);\n+                break;\n+            case JTOK_KW_FALSE:\n+                tmpVal.setBool(false);\n+                break;\n+            default: /* impossible */ break;\n+            }\n+\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_NUMBER: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal(VNUM, tokenVal);\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_STRING: {\n+            if (!stack.size())\n+                return false;\n+\n+            UniValue *top = stack.back();\n+\n+            if (expectName) {\n+                top->keys.push_back(tokenVal);\n+                expectName = false;\n+                expectColon = true;\n+            } else {\n+                UniValue tmpVal(VSTR, tokenVal);\n+                top->values.push_back(tmpVal);\n+            }\n+\n+            break;\n+            }\n+\n+        default:\n+            return false;\n+        }\n+    } while (!stack.empty ());\n+\n+    /* Check that nothing follows the initial construct (parsed above).  */\n+    tok = getJsonToken(tokenVal, consumed, raw);\n+    if (tok != JTOK_NONE)\n+        return false;\n+\n+    return true;\n+}\n+"
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "lib/univalue_write.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_write.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <ctype.h>\n+#include <iomanip>\n+#include <sstream>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+#include \"univalue_escapes.h\"\n+\n+// TODO: Using UTF8\n+\n+using namespace std;\n+\n+static string json_escape(const string& inS)\n+{\n+    string outS;\n+    outS.reserve(inS.size() * 2);\n+\n+    for (unsigned int i = 0; i < inS.size(); i++) {\n+        unsigned char ch = inS[i];\n+        const char *escStr = escapes[ch];\n+\n+        if (escStr)\n+            outS += escStr;\n+\n+        else if (isprint(ch))\n+            outS += ch;\n+\n+        else {\n+            char tmpesc[16];\n+            sprintf(tmpesc, \"\\\\u%04x\", ch);\n+            outS += tmpesc;\n+        }\n+    }\n+\n+    return outS;\n+}\n+\n+string UniValue::write(unsigned int prettyIndent,\n+                       unsigned int indentLevel) const\n+{\n+    string s;\n+    s.reserve(1024);\n+\n+    unsigned int modIndent = indentLevel;\n+    if (modIndent == 0)\n+        modIndent = 1;\n+\n+    switch (typ) {\n+    case VNULL:\n+        s += \"null\";\n+        break;\n+    case VOBJ:\n+        writeObject(prettyIndent, modIndent, s);\n+        break;\n+    case VARR:\n+        writeArray(prettyIndent, modIndent, s);\n+        break;\n+    case VSTR:\n+        s += \"\\\"\" + json_escape(val) + \"\\\"\";\n+        break;\n+    case VNUM:\n+        s += val;\n+        break;\n+    case VBOOL:\n+        s += (val == \"1\" ? \"true\" : \"false\");\n+        break;\n+    }\n+\n+    return s;\n+}\n+\n+static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n+{\n+    s.append(prettyIndent * indentLevel, ' ');\n+}\n+\n+void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"[\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < values.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1)) {\n+            s += \",\";\n+            if (prettyIndent)\n+                s += \" \";\n+        }\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"]\";\n+}\n+\n+void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"{\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n+        if (prettyIndent)\n+            s += \" \";\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1))\n+            s += \",\";\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"}\";\n+}\n+"
      },
      {
        "sha": "b7f53e875e6e45e6e5cdb37dcd3c3b1a12e2b832",
        "filename": "pc/libunivalue-uninstalled.pc.in",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue-uninstalled.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue-uninstalled.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pc/libunivalue-uninstalled.pc.in?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,9 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: ${pc_top_builddir}/${pcfiledir}/libunivalue.la"
      },
      {
        "sha": "358a2d5f73219147d8a2f286146dc4e912363f40",
        "filename": "pc/libunivalue.pc.in",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pc/libunivalue.pc.in?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,10 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: -L${libdir} -lunivalue\n+Cflags: -I${includedir}"
      },
      {
        "sha": "e4dea0df723bbe22e111e639e394c3d62562dddd",
        "filename": "test/.gitignore",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/.gitignore?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,7 @@\n+\n+unitester\n+\n+*.log\n+*.trs\n+\n+.libs"
      },
      {
        "sha": "6216b865f10219c51c6af21e7a68641bab77ee4f",
        "filename": "test/fail1.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail1.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file"
      },
      {
        "sha": "5d8c0047bd522dfa9fbc642051ed76bd3162d936",
        "filename": "test/fail10.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail10.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail10.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail10.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra value after close\": true} \"misplaced quoted value\"\n\\ No newline at end of file"
      },
      {
        "sha": "76eb95b4583c8ee74eee3bdc25e1db69e1aaf4bb",
        "filename": "test/fail11.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail11.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail11.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail11.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal expression\": 1 + 2}\n\\ No newline at end of file"
      },
      {
        "sha": "77580a4522d8c79245851e72a3644a0709b3d28c",
        "filename": "test/fail12.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail12.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail12.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail12.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal invocation\": alert()}\n\\ No newline at end of file"
      },
      {
        "sha": "379406b59bdb943f145afea98ff1bbc45d43ff45",
        "filename": "test/fail13.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail13.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail13.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail13.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot have leading zeroes\": 013}\n\\ No newline at end of file"
      },
      {
        "sha": "0ed366b38a34f551c25735bdcb9282d27beae026",
        "filename": "test/fail14.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail14.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail14.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail14.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot be hex\": 0x14}\n\\ No newline at end of file"
      },
      {
        "sha": "fc8376b605da69dda23f3fcdd9816dcbf2e736cc",
        "filename": "test/fail15.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail15.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail15.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail15.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\x15\"]\n\\ No newline at end of file"
      },
      {
        "sha": "3fe21d4b532498c8b90872ef571c6867f45e645f",
        "filename": "test/fail16.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail16.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail16.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail16.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\\naked]\n\\ No newline at end of file"
      },
      {
        "sha": "62b9214aeda6d74a72ebeceedf0aae3609f1c638",
        "filename": "test/fail17.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail17.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail17.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail17.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\017\"]\n\\ No newline at end of file"
      },
      {
        "sha": "edac92716f186e39d0e3c818b8b110b9a2c4add5",
        "filename": "test/fail18.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail18.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail18.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail18.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[[\"Too deep\"]]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "3b9c46fa9a296c9d8c35ce4a6592d8bb7ffe748a",
        "filename": "test/fail19.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail19.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail19.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail19.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Missing colon\" null}\n\\ No newline at end of file"
      },
      {
        "sha": "6b7c11e5a56537f81e651980359c62e263f7399f",
        "filename": "test/fail2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail2.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Unclosed array\"\n\\ No newline at end of file"
      },
      {
        "sha": "27c1af3e72ee37bbf64ccd7b77c5bad8cdea1557",
        "filename": "test/fail20.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail20.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail20.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail20.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Double colon\":: null}\n\\ No newline at end of file"
      },
      {
        "sha": "62474573b2160adefc3dc669b39200ea659d6e59",
        "filename": "test/fail21.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail21.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail21.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail21.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead of colon\", null}\n\\ No newline at end of file"
      },
      {
        "sha": "a7752581bcf7f3b901aef052a2df541c1285b6c2",
        "filename": "test/fail22.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail22.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail22.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail22.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Colon instead of comma\": false]\n\\ No newline at end of file"
      },
      {
        "sha": "494add1ca190e12acd1c8e34ac819a6316c927bc",
        "filename": "test/fail23.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail23.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail23.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail23.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Bad value\", truth]\n\\ No newline at end of file"
      },
      {
        "sha": "caff239bfc36297da08828095105bb497b8aef2a",
        "filename": "test/fail24.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail24.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail24.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail24.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+['single quote']\n\\ No newline at end of file"
      },
      {
        "sha": "8b7ad23e010314591d914519996c28483b5dadc8",
        "filename": "test/fail25.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail25.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail25.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail25.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"\ttab\tcharacter\tin\tstring\t\"]\n\\ No newline at end of file"
      },
      {
        "sha": "845d26a6a54398c49cd492e6836c0d1987f554e4",
        "filename": "test/fail26.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail26.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail26.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail26.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"tab\\   character\\   in\\  string\\  \"]\n\\ No newline at end of file"
      },
      {
        "sha": "6b01a2ca4a97ec36604771dcc3175bbcda865d85",
        "filename": "test/fail27.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail27.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail27.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail27.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "621a0101c664a619457d16f1107a677c911481b4",
        "filename": "test/fail28.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail28.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail28.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail28.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\\\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "47ec421bb6242648e80b2b465049acbae1e6e44a",
        "filename": "test/fail29.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail29.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail29.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail29.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[0e]\n\\ No newline at end of file"
      },
      {
        "sha": "168c81eb78537ea4006ea0a46b67851d9995564d",
        "filename": "test/fail3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail3.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{unquoted_key: \"keys must be quoted\"}\n\\ No newline at end of file"
      },
      {
        "sha": "8ab0bc4b8b2c73b616a45931d05720555a2f7762",
        "filename": "test/fail30.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail30.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail30.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail30.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[0e+]\n\\ No newline at end of file"
      },
      {
        "sha": "1cce602b518fc6e7f164a58cc710def27e64b8a5",
        "filename": "test/fail31.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail31.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail31.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail31.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[0e+-1]\n\\ No newline at end of file"
      },
      {
        "sha": "45cba7396ff7462dd6de005c32fd2a95c5318e5f",
        "filename": "test/fail32.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail32.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail32.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail32.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead if closing brace\": true,\n\\ No newline at end of file"
      },
      {
        "sha": "ca5eb19dc97f5ca363ff33a4c3644ad28e612679",
        "filename": "test/fail33.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail33.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail33.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail33.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"mismatch\"}\n\\ No newline at end of file"
      },
      {
        "sha": "3f8be172865d17dd812f50d5cf00a2509f51e6bf",
        "filename": "test/fail34.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail34.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail34.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail34.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{} garbage\n\\ No newline at end of file"
      },
      {
        "sha": "9de168bf34e2e368d044bccc099d44b02316de66",
        "filename": "test/fail4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail4.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"extra comma\",]\n\\ No newline at end of file"
      },
      {
        "sha": "ddf3ce3d2409467011ec7545551d5d078bce1bfd",
        "filename": "test/fail5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail5.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"double extra comma\",,]\n\\ No newline at end of file"
      },
      {
        "sha": "ed91580e1b1c15194a9a758f1b231575074722db",
        "filename": "test/fail6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail6.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[   , \"<-- missing value\"]\n\\ No newline at end of file"
      },
      {
        "sha": "8a96af3e4ee6c7fffd8da641dedcd750a5cc4d9d",
        "filename": "test/fail7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail7.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Comma after the close\"],\n\\ No newline at end of file"
      },
      {
        "sha": "b28479c6ecb21a801d6988b9ea39a4eb00a64702",
        "filename": "test/fail8.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail8.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail8.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail8.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Extra close\"]]\n\\ No newline at end of file"
      },
      {
        "sha": "5815574f363e58cf91578e909ef4dabb402a75de",
        "filename": "test/fail9.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail9.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail9.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail9.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra comma\": true,}\n\\ No newline at end of file"
      },
      {
        "sha": "70e26854369282e625e75b302782f581e610f2b3",
        "filename": "test/pass1.json",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/pass1.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,58 @@\n+[\n+    \"JSON Test Pattern pass1\",\n+    {\"object with 1 member\":[\"array with 1 element\"]},\n+    {},\n+    [],\n+    -42,\n+    true,\n+    false,\n+    null,\n+    {\n+        \"integer\": 1234567890,\n+        \"real\": -9876.543210,\n+        \"e\": 0.123456789e-12,\n+        \"E\": 1.234567890E+34,\n+        \"\":  23456789012E66,\n+        \"zero\": 0,\n+        \"one\": 1,\n+        \"space\": \" \",\n+        \"quote\": \"\\\"\",\n+        \"backslash\": \"\\\\\",\n+        \"controls\": \"\\b\\f\\n\\r\\t\",\n+        \"slash\": \"/ & \\/\",\n+        \"alpha\": \"abcdefghijklmnopqrstuvwyz\",\n+        \"ALPHA\": \"ABCDEFGHIJKLMNOPQRSTUVWYZ\",\n+        \"digit\": \"0123456789\",\n+        \"0123456789\": \"digit\",\n+        \"special\": \"`1~!@#$%^&*()_+-={':[,]}|;.</>?\",\n+        \"hex\": \"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\",\n+        \"true\": true,\n+        \"false\": false,\n+        \"null\": null,\n+        \"array\":[  ],\n+        \"object\":{  },\n+        \"address\": \"50 St. James Street\",\n+        \"url\": \"http://www.JSON.org/\",\n+        \"comment\": \"// /* <!-- --\",\n+        \"# -- --> */\": \" \",\n+        \" s p a c e d \" :[1,2 , 3\n+\n+,\n+\n+4 , 5        ,          6           ,7        ],\"compact\":[1,2,3,4,5,6,7],\n+        \"jsontext\": \"{\\\"object with 1 member\\\":[\\\"array with 1 element\\\"]}\",\n+        \"quotes\": \"&#34; \\u0022 %22 0x22 034 &#x22;\",\n+        \"\\/\\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?\"\n+: \"A key can be any string\"\n+    },\n+    0.5 ,98.6\n+,\n+99.44\n+,\n+\n+1066,\n+1e1,\n+0.1e1,\n+1e-1,\n+1e00,2e+00,2e-00\n+,\"rosebud\"]\n\\ No newline at end of file"
      },
      {
        "sha": "d3c63c7ad845e4cedd0c70d13102b38c51ec197a",
        "filename": "test/pass2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/pass2.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[\"Not too deep\"]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "4528d51f1ac615e7e11dbb1321dc99187705f0d8",
        "filename": "test/pass3.json",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/pass3.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,6 @@\n+{\n+    \"JSON Test Pattern pass3\": {\n+        \"The outermost value\": \"must be an object or array.\",\n+        \"In this test\": \"It is an object.\"\n+    }\n+}"
      },
      {
        "sha": "835556e031708f8e3c9d07a8f31980d6a1228986",
        "filename": "test/unitester.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/unitester.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <cassert>\n+#include <string>\n+#include \"univalue.h\"\n+\n+#ifndef JSON_TEST_SRC\n+#error JSON_TEST_SRC must point to test source directory\n+#endif\n+\n+#ifndef ARRAY_SIZE\n+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n+#endif\n+\n+using namespace std;\n+string srcdir(JSON_TEST_SRC);\n+\n+static void runtest(string filename, const string& jdata)\n+{\n+        fprintf(stderr, \"test %s\\n\", filename.c_str());\n+\n+        string prefix = filename.substr(0, 4);\n+\n+        bool wantPass = (prefix == \"pass\");\n+        bool wantFail = (prefix == \"fail\");\n+        assert(wantPass || wantFail);\n+\n+        UniValue val;\n+        bool testResult = val.read(jdata);\n+\n+        if (wantPass) {\n+            assert(testResult == true);\n+        } else {\n+            assert(testResult == false);\n+        }\n+}\n+\n+static void runtest_file(const char *filename_)\n+{\n+        string basename(filename_);\n+        string filename = srcdir + \"/\" + basename;\n+        FILE *f = fopen(filename.c_str(), \"r\");\n+        assert(f != NULL);\n+\n+        string jdata;\n+\n+        char buf[4096];\n+        while (!feof(f)) {\n+                int bread = fread(buf, 1, sizeof(buf), f);\n+                assert(!ferror(f));\n+\n+                string s(buf, bread);\n+                jdata += s;\n+        }\n+\n+        assert(!ferror(f));\n+        fclose(f);\n+\n+        runtest(basename, jdata);\n+}\n+\n+static const char *filenames[] = {\n+        \"fail10.json\",\n+        \"fail11.json\",\n+        \"fail12.json\",\n+        \"fail13.json\",\n+        \"fail14.json\",\n+        \"fail15.json\",\n+        \"fail16.json\",\n+        \"fail17.json\",\n+        //\"fail18.json\",             // investigate\n+        \"fail19.json\",\n+        \"fail1.json\",\n+        \"fail20.json\",\n+        \"fail21.json\",\n+        \"fail22.json\",\n+        \"fail23.json\",\n+        \"fail24.json\",\n+        \"fail25.json\",\n+        \"fail26.json\",\n+        \"fail27.json\",\n+        \"fail28.json\",\n+        \"fail29.json\",\n+        \"fail2.json\",\n+        \"fail30.json\",\n+        \"fail31.json\",\n+        \"fail32.json\",\n+        \"fail33.json\",\n+        \"fail34.json\",\n+        \"fail3.json\",\n+        \"fail4.json\",                // extra comma\n+        \"fail5.json\",\n+        \"fail6.json\",\n+        \"fail7.json\",\n+        \"fail8.json\",\n+        \"fail9.json\",               // extra comma\n+        \"pass1.json\",\n+        \"pass2.json\",\n+        \"pass3.json\",\n+};\n+\n+int main (int argc, char *argv[])\n+{\n+    for (unsigned int fidx = 0; fidx < ARRAY_SIZE(filenames); fidx++) {\n+        runtest_file(filenames[fidx]);\n+    }\n+\n+    return 0;\n+}\n+"
      }
    ]
  },
  {
    "sha": "9623e934732ba0f0a5176cd3d993ebcda327b413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjIzZTkzNDczMmJhMGYwYTUxNzZjZDNkOTkzZWJjZGEzMjdiNDEz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-04T14:11:34Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:49:57Z"
      },
      "message": "[Univalue] add univalue over subtree\n\nsimilar to secp256k1 include and compile univalue over a subtree",
      "tree": {
        "sha": "fbaf7e369670900b20c1b809885116adbab4c563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbaf7e369670900b20c1b809885116adbab4c563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9623e934732ba0f0a5176cd3d993ebcda327b413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9623e934732ba0f0a5176cd3d993ebcda327b413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9623e934732ba0f0a5176cd3d993ebcda327b413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9623e934732ba0f0a5176cd3d993ebcda327b413/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e16a41313dbc25d88def143cf1e0a964e36c7c0"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 39,
      "deletions": 43
    },
    "files": [
      {
        "sha": "dbdc356f5d2b36a72dc4ffb351bfe1de8609c5e1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -940,7 +940,7 @@ unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no\"\n-AC_CONFIG_SUBDIRS([src/secp256k1])\n+AC_CONFIG_SUBDIRS([src/secp256k1 src/univalue])\n \n AC_OUTPUT\n "
      },
      {
        "sha": "301880dbc344648447e58de62099adc003e4e5a2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -1,4 +1,4 @@\n-DIST_SUBDIRS = secp256k1\n+DIST_SUBDIRS = secp256k1 univalue\n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)\n \n \n@@ -21,27 +21,30 @@ BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n+BITCOIN_INCLUDES += -I$(srcdir)/univalue/include\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n-LIBBITCOIN_UNIVALUE=univalue/libbitcoin_univalue.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n+LIBUNIVALUE=univalue/lib/libunivalue.la\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n+  \n+$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n EXTRA_LIBRARIES = \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n   libbitcoin_common.a \\\n-  univalue/libbitcoin_univalue.a \\\n   libbitcoin_server.a \\\n   libbitcoin_cli.a\n if ENABLE_WALLET\n@@ -248,14 +251,6 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha512.cpp \\\n   crypto/sha512.h\n \n-# univalue JSON library\n-univalue_libbitcoin_univalue_a_SOURCES = \\\n-  univalue/univalue.cpp \\\n-  univalue/univalue.h \\\n-  univalue/univalue_escapes.h \\\n-  univalue/univalue_read.cpp \\\n-  univalue/univalue_write.cpp\n-\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n@@ -332,7 +327,7 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n@@ -360,7 +355,7 @@ endif\n \n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL)\n \n bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n@@ -376,7 +371,7 @@ bitcoin_tx_SOURCES += bitcoin-tx-res.rc\n endif\n \n bitcoin_tx_LDADD = \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "67fd7c1076e0e92eb4ce98e773b45a22a904aad5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -367,7 +367,7 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "b8725c872de610dc148ce72066ffc6eefa272a63",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -33,7 +33,7 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "9a6e43631b42611758421d22a2fa02ad3a9cd614",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -91,7 +91,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n@@ -124,6 +124,7 @@ check-local:\n \t@echo \"Running test/bitcoin-util-test.py...\"\n \t$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check\n \n %.json.h: %.json\n \t@$(MKDIR_P) $(@D)"
      },
      {
        "sha": "e0fe6aa5bfde8ccb2b7d26b47bc617b91cc8cb4d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "f7518fab5d19f4588957bfa9974565972a027581",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -12,7 +12,7 @@\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "4be24f8e09725899533d22711af2ac775b400614",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -9,7 +9,7 @@\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\""
      },
      {
        "sha": "533fedfe7a68617c583074c76ccf264c5134ab21",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -10,7 +10,7 @@\n #include \"script/standard.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "f387a3ec8c5ef93ef086b6be9b39931e240b0547",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n \n #include <openssl/crypto.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #ifdef ENABLE_WALLET\n #include <db_cxx.h>"
      },
      {
        "sha": "c46d7a8bd2de75874f40b4cc66a1acf2606281f2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/dynamic_bitset.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "545ac1289081955ee57322d9de46cca99d16f3d7",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -20,7 +20,7 @@\n \n #include <stdint.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "4064c2fee320fb93933c354eb320c48ec79ef9aa",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -12,7 +12,7 @@\n #include <stdint.h>\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "8937a56f035e393d1ab78ea104a22b1187b4189d",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_RPCCLIENT_H\n #define BITCOIN_RPCCLIENT_H\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n UniValue RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n /** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)"
      },
      {
        "sha": "c49c3e5194a1f4c29061ace337430a25f24c61f1",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -25,7 +25,7 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/shared_ptr.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "0f0457c5cfa2b521f13a8393b464ce1c5f3fd232",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -22,7 +22,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "7746be25f73c9af7ddf2c863fa8d35b040a6fab9",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -19,7 +19,7 @@\n \n #include <boost/foreach.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "9cf1ab6d99ce9b1cbb3a9c50ae5860de3b0aae4f",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -12,7 +12,7 @@\n #include <string>\n #include <boost/filesystem.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n //! HTTP status codes\n enum HTTPStatusCode"
      },
      {
        "sha": "4dec53396de89a9d88dfc582c90ec194bd62eb4f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -31,7 +31,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "fa60f8c833f0d50247b0d831aac757571b961c98",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -13,7 +13,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "dde8dfdcc3dbecfb9da7f3cce3fc2ec7ac6d5175",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -17,7 +17,7 @@\n \n #include <boost/function.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n class CRPCCommand;\n "
      },
      {
        "sha": "9845df697f996b8d04f92ac79fd0b8e6e78c51ed",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n "
      },
      {
        "sha": "2a486f08e43518fb0758e6b81562ba6aa3b2b2b6",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -13,7 +13,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "2e652f76e272dd95142c07bb52210ed3a90eb982",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -14,7 +14,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "882f9eb199c2ae1e8b649079a73a0f7472a14695",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -27,7 +27,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "6fca64d5da3cd564e69c788642644c591304ab86",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -20,7 +20,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n "
      },
      {
        "sha": "beec39667537718bcf92ca51495303a67fec42d7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -26,7 +26,7 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "945c1acbeb49f6d07150d61207bd956a7b5aafdb",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -6,7 +6,7 @@\n #include <vector>\n #include <string>\n #include <map>\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "c431fc401311dbac3f99c199206ed8f089b8ff46",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -20,7 +20,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #include <boost/foreach.hpp>\n "
      },
      {
        "sha": "30b854477b04b73984330f42a5e24216d5b9b67a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -22,7 +22,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      }
    ]
  },
  {
    "sha": "12a7712abd49079cbd128caab8904684c7563fff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmE3NzEyYWJkNDkwNzljYmQxMjhjYWFiODkwNDY4NGM3NTYzZmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T09:16:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T09:20:08Z"
      },
      "message": "Merge pull request #5924\n\n835c122 Clean up change computation in CreateTransaction. (Daniel Kraft)",
      "tree": {
        "sha": "76ff04241d284c6646b1d92a767a4d03ed458974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76ff04241d284c6646b1d92a767a4d03ed458974"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12a7712abd49079cbd128caab8904684c7563fff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDPrIAAoJEHSBCwEjRsmmjMUIAJjVnUzqVsEhlLuNnr1eZbiV\nGpFehBlS+cbVmTBUjtiNXN4n6zi7CfbsmQjTOyZxhHHUrTs1aSJ5ll/S5aUme7mc\nvMn2zh8m5Z83q0F6GcAQBCUqCUF2urTh9iiZdSXF1MpmGO5gPV6t1zwLWVVLmSON\nC+56uJOtRi3i+SZmjZcvkozvLmOeEKhhcussM7E5T6ufSGOgYBhhY8WH9RxWPBrM\nxwMZeH/+cc0AtxjV3jtKCybptVouQDtcDj6j1NBhBK4cdpHMr4ISp+yA467//Zn1\nWdFCo4zL0JA1dZlLyGe0zgCE77/W1kELdgqGNmZSDodF0aHoDsh0HGjSlESNtdU=\n=YU5R\n-----END PGP SIGNATURE-----",
        "payload": "tree 76ff04241d284c6646b1d92a767a4d03ed458974\nparent 1119cc3f5918575ca397518c9fd31a64704c7e4f\nparent 835c12291efc2ca03017622fe970218fdeb63727\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443690974 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443691208 +0200\n\nMerge pull request #5924\n\n835c122 Clean up change computation in CreateTransaction. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a7712abd49079cbd128caab8904684c7563fff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12a7712abd49079cbd128caab8904684c7563fff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a7712abd49079cbd128caab8904684c7563fff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1119cc3f5918575ca397518c9fd31a64704c7e4f"
      },
      {
        "sha": "835c12291efc2ca03017622fe970218fdeb63727",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/835c12291efc2ca03017622fe970218fdeb63727",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/835c12291efc2ca03017622fe970218fdeb63727"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 4,
      "deletions": 7
    },
    "files": [
      {
        "sha": "bd3004061b1c88f0291092099dd1ce25c9b1b720",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12a7712abd49079cbd128caab8904684c7563fff/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12a7712abd49079cbd128caab8904684c7563fff/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=12a7712abd49079cbd128caab8904684c7563fff",
        "patch": "@@ -1852,9 +1852,9 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 nChangePosRet = -1;\n                 bool fFirst = true;\n \n-                CAmount nTotalValue = nValue;\n+                CAmount nValueToSelect = nValue;\n                 if (nSubtractFeeFromAmount == 0)\n-                    nTotalValue += nFeeRet;\n+                    nValueToSelect += nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n                 BOOST_FOREACH (const CRecipient& recipient, vecSend)\n@@ -1891,7 +1891,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n                 CAmount nValueIn = 0;\n-                if (!SelectCoins(nTotalValue, setCoins, nValueIn, coinControl))\n+                if (!SelectCoins(nValueToSelect, setCoins, nValueIn, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n@@ -1909,10 +1909,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     dPriority += (double)nCredit * age;\n                 }\n \n-                CAmount nChange = nValueIn - nValue;\n-                if (nSubtractFeeFromAmount == 0)\n-                    nChange -= nFeeRet;\n-\n+                const CAmount nChange = nValueIn - nValueToSelect;\n                 if (nChange > 0)\n                 {\n                     // Fill a vout to ourself"
      }
    ]
  },
  {
    "sha": "cf9bb11f97dbff428e9aee3b65e068d70af08e17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjliYjExZjk3ZGJmZjQyOGU5YWVlM2I2NWUwNjhkNzBhZjA4ZTE3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-01T09:58:51Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-01T09:58:51Z"
      },
      "message": "Merge pull request #6588",
      "tree": {
        "sha": "bdea635cc8deb4925b0c7697f0a218d1f535b2b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdea635cc8deb4925b0c7697f0a218d1f535b2b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf9bb11f97dbff428e9aee3b65e068d70af08e17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIVAwUAVg0D6SWzCDIBeCsvAQKfVA/9GRjr8RtgRD6PRZE/0Ey7//uZF26TKVSi\n5YV0ZbDDkNd2yHwgBZaRrZtphDWY4Z0+l/3A8yJ9NY/RK0+9MbtIgWpyTcus1Mdh\nPcnvg8K/sNuIaF851zQknACSerGanX1VLYOxexOH0cofLS4rs3+Iy1At0YzsovLy\neSbf8eQv/D7lKVlTLUsr2R36w/wPA7UKSZu9dNUUb5Fq+Zni/kK2B1u8jveH+RSZ\nzkFh3Rhpo0kXll8rR/fL3d4awqTYR6YwOtwWCUDCmI15tMd7kMz9I7xjVWiEiQzF\nJYp80cicfJOllhbCT5aK0mCbOsfYX3J0JJGMcsc23n6m8BGobSDgmwPbF8CcWnGw\niGfr3Jqpa5jo3RREfHg64MZRIeJg+dJJ8cgS8OxslKMK49qL9oXGlsxrAhxvtR/C\nwMp09wBG7zk+5rCPGzUsZXi23X19DSdZ8mO6eDBZDuYsAYxCda5BEqsxzIBa7C8s\n0L8nLVqA9/9j/LbqK1IlEAv/1vyFCF9ROdm635A0JqYzcvf+Y0M3cyfNP0YQJI/1\nok3CBwoOu0/S5csDJzpRerHr6zNhdV1jJ7L9saIiMbZ83ZmR5E7+OAf53QiBOpCe\nfRBX8Euyv0u9vQUasj89nKnsE88cSTY3K8WpswRE/aPEq6p6/bK3M9E+9Gd/FgPK\nAqCahYJ4LNo=\n=+yml\n-----END PGP SIGNATURE-----",
        "payload": "tree bdea635cc8deb4925b0c7697f0a218d1f535b2b5\nparent 12a7712abd49079cbd128caab8904684c7563fff\nparent 9524c4d35cb6ec4bd7becf1d938d21c536669d1f\nauthor Jeff Garzik <jgarzik@pobox.com> 1443693531 -0400\ncommitter Jeff Garzik <jgarzik@pobox.com> 1443693531 -0400\n\nMerge pull request #6588\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9bb11f97dbff428e9aee3b65e068d70af08e17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf9bb11f97dbff428e9aee3b65e068d70af08e17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9bb11f97dbff428e9aee3b65e068d70af08e17/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12a7712abd49079cbd128caab8904684c7563fff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12a7712abd49079cbd128caab8904684c7563fff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12a7712abd49079cbd128caab8904684c7563fff"
      },
      {
        "sha": "9524c4d35cb6ec4bd7becf1d938d21c536669d1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9524c4d35cb6ec4bd7becf1d938d21c536669d1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9524c4d35cb6ec4bd7becf1d938d21c536669d1f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "e8a6edc225078bd90ee0c301d1c3ec2f8c2d1cf5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf9bb11f97dbff428e9aee3b65e068d70af08e17/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf9bb11f97dbff428e9aee3b65e068d70af08e17/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cf9bb11f97dbff428e9aee3b65e068d70af08e17",
        "patch": "@@ -4280,6 +4280,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         mapAlreadyAskedFor.erase(inv);\n \n+        // Check for recently rejected (and do other quick existence checks)\n+        if (AlreadyHave(inv))\n+            return true;\n+\n         if (AcceptToMemoryPool(mempool, state, tx, true, &fMissingInputs))\n         {\n             mempool.check(pcoinsTip);\n@@ -4355,13 +4359,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (nEvicted > 0)\n                 LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n         } else {\n-            // AcceptToMemoryPool() returned false, possibly because the tx is\n-            // already in the mempool; if the tx isn't in the mempool that\n-            // means it was rejected and we shouldn't ask for it again.\n-            if (!mempool.exists(tx.GetHash())) {\n-                assert(recentRejects);\n-                recentRejects->insert(tx.GetHash());\n-            }\n+            assert(recentRejects);\n+            recentRejects->insert(tx.GetHash());\n+\n             if (pfrom->fWhitelisted) {\n                 // Always relay transactions received from whitelisted peers, even\n                 // if they were rejected from the mempool, allowing the node to"
      }
    ]
  },
  {
    "sha": "8a86d53bd5705712bebd74a037ec702bf17b83bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTg2ZDUzYmQ1NzA1NzEyYmViZDc0YTAzN2VjNzAyYmYxN2I4M2Jj",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-01T10:02:14Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-01T10:02:14Z"
      },
      "message": "Merge pull request #6731",
      "tree": {
        "sha": "eac39e94ad56b4f0cf0828d261248fdf3949f99b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eac39e94ad56b4f0cf0828d261248fdf3949f99b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a86d53bd5705712bebd74a037ec702bf17b83bc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIVAwUAVg0EsSWzCDIBeCsvAQJkgw/+PcJTXcn2CAWQ85R0mEYhDvMJZDTOtBma\nG/huFd1wrD9SSKa0S/eTsMJlHaK6imsSIY1mkjaFfXaVk00v6ZnnU/G+OZiovqaq\nsMmz1cNDmdm8jQ08bDOGlPes3XB5uOxNNDmQRcAAYLnNJUTASVEu33PP5J9S0YCg\nebMgUtXzFcIQgs2TvyjgwYtz8UPBp7yqQ6T1dRE97Yu+kIX3DbPrN/vpMeqww4UA\nRKhqtPGjBxRuitikbT0ah1rPLesbz4FXD0cAprg9BcLaTV8kCy6Z9b0ilnd1aerZ\n+89XejP6n/MnDS2LnoQr5jlmsrTtCu/Ic6hEHgt9zpcEyfCTAzNh6PTFOOLtX812\n9OjWQqbK612It2qzf2iMNGKOSqVLH5GH4lyyN3avCJ8hQe0Lz4OOg+wyQjvbuJ3d\nukNghizc7Nd/p+LWTdgDB3JstVZJ/tGtQ0hL7VEL1K8WMekz2SfPXsZuy6INYM53\n713zPK9BSuP3ROem2ZxDpuBpiL42d8GBODwQIG23pPDQbeW62l8yNDMNu534HC9K\nmvGimx1yYgKSuMfdypd3GWN+O9O9oIkOA9ALU5HQDi9Fv4ZgVsMm93VRtIelGkB9\nm0E+NE+bHMVqyssRd+YFu5/JESKZz1MHWOI4TsZ73ZQi1BA1ZQjhxjWJCBlcQ97F\nWWrNLYz1yIQ=\n=Oyw6\n-----END PGP SIGNATURE-----",
        "payload": "tree eac39e94ad56b4f0cf0828d261248fdf3949f99b\nparent cf9bb11f97dbff428e9aee3b65e068d70af08e17\nparent 9639eadd93d988e9ea10e68ef38b21b33f76dc41\nauthor Jeff Garzik <jgarzik@pobox.com> 1443693734 -0400\ncommitter Jeff Garzik <jgarzik@pobox.com> 1443693734 -0400\n\nMerge pull request #6731\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a86d53bd5705712bebd74a037ec702bf17b83bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a86d53bd5705712bebd74a037ec702bf17b83bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a86d53bd5705712bebd74a037ec702bf17b83bc/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf9bb11f97dbff428e9aee3b65e068d70af08e17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf9bb11f97dbff428e9aee3b65e068d70af08e17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf9bb11f97dbff428e9aee3b65e068d70af08e17"
      },
      {
        "sha": "9639eadd93d988e9ea10e68ef38b21b33f76dc41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9639eadd93d988e9ea10e68ef38b21b33f76dc41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9639eadd93d988e9ea10e68ef38b21b33f76dc41"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 189,
      "deletions": 0
    },
    "files": [
      {
        "sha": "28fa784515038d9469cc3c30fcb88999f2519ae1",
        "filename": "doc/build-openbsd.md",
        "status": "added",
        "additions": 187,
        "deletions": 0,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a86d53bd5705712bebd74a037ec702bf17b83bc/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a86d53bd5705712bebd74a037ec702bf17b83bc/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=8a86d53bd5705712bebd74a037ec702bf17b83bc",
        "patch": "@@ -0,0 +1,187 @@\n+OpenBSD build guide\n+======================\n+(updated for OpenBSD 5.7)\n+\n+This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n+\n+As OpenBSD is most common as a server OS, we will not bother with the GUI.\n+\n+Preparation\n+-------------\n+\n+Run the following as root to install the base dependencies for building:\n+\n+```bash\n+pkg_add gmake libtool libevent\n+pkg_add autoconf # (select highest version, e.g. 2.69)\n+pkg_add automake # (select highest version, e.g. 1.15)\n+pkg_add python # (select version 2.7.x, not 3.x)\n+ln -sf /usr/local/bin/python2.7 /usr/local/bin/python2\n+```\n+\n+The default C++ compiler that comes with OpenBSD 5.7 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core. It is possible to patch it up to compile, but with the planned transition to C++11 this is a losing battle. So here we will be installing a newer compiler.\n+\n+GCC\n+-------\n+\n+You can install a newer version of gcc with:\n+\n+```bash\n+pkg_add g++ # (select newest 4.x version, e.g. 4.9.2)\n+```\n+\n+This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n+\n+### Building boost\n+\n+Do not use `pkg_add boost`! The boost version installed thus is compiled using the `g++` compiler not `eg++`, which will result in a conflict between `/usr/local/lib/libestdc++.so.XX.0` and `/usr/lib/libstdc++.so.XX.0`, resulting in a test crash:\n+\n+    test_bitcoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n+    ...\n+    Segmentation fault (core dumped) \n+\n+This makes it necessary to build boost, or at least the parts used by Bitcoin Core, manually:\n+\n+```\n+# Pick some path to install boost to, here we create a directory within the bitcoin directory\n+BITCOIN_ROOT=$(pwd)\n+BOOST_PREFIX=\"${BITCOIN_ROOT}/boost\"\n+mkdir -p $BOOST_PREFIX\n+\n+# Fetch the source and verify that it is not tampered with\n+wget http://heanet.dl.sourceforge.net/project/boost/boost/1.59.0/boost_1_59_0.tar.bz2\n+echo '727a932322d94287b62abb1bd2d41723eec4356a7728909e38adb65ca25241ca  boost_1_59_0.tar.bz2' | sha256 -c\n+# MUST output: (SHA256) boost_1_59_0.tar.bz2: OK\n+tar -xjf boost_1_59_0.tar.bz2\n+\n+# Boost 1.59 needs two small patches for OpenBSD\n+cd boost_1_59_0\n+# Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n+patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp \n+# https://github.com/boostorg/filesystem/commit/90517e459681790a091566dce27ca3acabf9a70c\n+sed 's/__OPEN_BSD__/__OpenBSD__/g' < libs/filesystem/src/path.cpp > libs/filesystem/src/path.cpp.tmp\n+mv libs/filesystem/src/path.cpp.tmp libs/filesystem/src/path.cpp\n+\n+# Build w/ minimum configuration necessary for bitcoin\n+echo 'using gcc : : eg++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\"  <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam\n+config_opts=\"runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1\"\n+./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test\n+./b2 -d2 -j2 -d1 ${config_opts} --prefix=${BOOST_PREFIX} stage\n+./b2 -d0 -j4 ${config_opts} --prefix=${BOOST_PREFIX} install\n+```\n+\n+### OpenSSL\n+\n+OpenBSD uses a replacement of OpenSSL: LibreSSL. This can cause compatibility issues, hence `./configure` will bark if you try to compile with this library:\n+\n+    Detected LibreSSL: This is NOT supported, and may break consensus compatibility!\n+\n+To install a 'real' OpenSSL use:\n+\n+    pkg_add openssl\n+   \n+Any program linked against this library can only be used after setting the dynamic library path:\n+    \n+    export LD_LIBRARY_PATH=\"/usr/local/lib/eopenssl\"\n+\n+(otherwise there will be an error about not being able to find `libcrypto.so.1.0`)\n+\n+Alternatively, pass `--with-libressl` to `./configure`, however as the warning says, this is NOT supported, and may cause problems syncing the chain, or the node to fork off the network in unexpected circumstances.\n+\n+### Building BerkeleyDB\n+\n+BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n+\n+See \"Berkeley DB\" in [build_unix.md](build_unix.md) for instructions on how to build BerkeleyDB 4.8.\n+You cannot use the BerkeleyDB library from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n+\n+```bash\n+# Pick some path to install BDB to, here we create a directory within the bitcoin directory\n+BITCOIN_ROOT=$(pwd)\n+BDB_PREFIX=\"${BITCOIN_ROOT}/db4\"\n+mkdir -p $BDB_PREFIX\n+\n+# Fetch the source and verify that it is not tampered with\n+wget 'http://download.oracle.com/berkeley-db/db-4.8.30.NC.tar.gz'\n+echo '12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b85732798364ef  db-4.8.30.NC.tar.gz' | sha256 -c\n+# MUST output: (SHA256) db-4.8.30.NC.tar.gz: OK\n+tar -xzf db-4.8.30.NC.tar.gz\n+\n+# Build the library and install to specified prefix\n+cd db-4.8.30.NC/build_unix/\n+#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n+../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp \n+make install\n+```\n+\n+### Building Bitcoin Core\n+\n+**Important**: use `gmake`, not `make`. The non-GNU `make` will exit with a horrible error.\n+\n+Preparation:\n+```bash\n+export AUTOCONF_VERSION=2.69 # replace this with the autoconf version that you installed\n+export AUTOMAKE_VERSION=1.15 # replace this with the automake version that you installed\n+./autogen.sh\n+```\n+\n+To configure with wallet:\n+```bash\n+./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n+    CC=egcc CXX=eg++ CPP=ecpp \\\n+    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n+    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\" \\\n+    LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n+```\n+\n+To configure without wallet:\n+```bash\n+./configure --disable-wallet --with-gui=no --with-boost=$BOOST_PREFIX \\\n+    CC=egcc CXX=eg++ CPP=ecpp \\\n+    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n+    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\"\n+```\n+\n+Build and run the tests:\n+```bash\n+gmake\n+export LD_LIBRARY_PATH=\"/usr/local/lib/eopenssl\"\n+gmake check\n+```\n+\n+Clang (not currently working)\n+------------------------------\n+\n+Using a newer g++ results in linking the new code to a new libstdc++.\n+Libraries built with the old g++, will still import the old library.\n+This gives conflicts, necessitating rebuild of all C++ dependencies of the application.\n+\n+With clang this can - at least theoretically - be avoided because it uses the\n+base system's libstdc++.\n+\n+```bash\n+pkg_add llvm boost\n+```\n+\n+```bash\n+./configure --disable-wallet --with-gui=no CC=clang CXX=clang++ \\\n+    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n+    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\"\n+gmake\n+```\n+\n+However, this does not appear to work. Compilation succeeds, but link fails\n+with many 'local symbol discarded' errors:\n+\n+    local symbol 150: discarded in section `.text._ZN10tinyformat6detail14FormatIterator6finishEv' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n+    local symbol 151: discarded in section `.text._ZN10tinyformat6detail14FormatIterator21streamStateFromFormatERSoRjPKcii' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n+    local symbol 152: discarded in section `.text._ZN10tinyformat6detail12convertToIntIA13_cLb0EE6invokeERA13_Kc' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n+\n+According to similar reported errors this is a binutils (ld) issue in 2.15, the\n+version installed by OpenBSD 5.7:\n+\n+- http://openbsd-archive.7691.n7.nabble.com/UPDATE-cppcheck-1-65-td248900.html\n+- https://llvm.org/bugs/show_bug.cgi?id=9758\n+\n+There is no known workaround for this.\n+"
      },
      {
        "sha": "a9a0028c4a5513f5c727df3c5385dcc0f6fc7397",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a86d53bd5705712bebd74a037ec702bf17b83bc/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a86d53bd5705712bebd74a037ec702bf17b83bc/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=8a86d53bd5705712bebd74a037ec702bf17b83bc",
        "patch": "@@ -2,6 +2,8 @@ UNIX BUILD NOTES\n ====================\n Some notes on how to build Bitcoin in Unix.\n \n+(for OpenBSD specific instructions, see [build-openbsd.md](build-openbsd.md))\n+\n Note\n ---------------------\n Always use absolute paths to configure and compile bitcoin and the dependencies,"
      }
    ]
  },
  {
    "sha": "a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWMyN2NkZjU1ZDViNWI3ZTA3ZDE4OWU1YmZlMmQ2YmM4NTg2N2Ji",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-17T14:32:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T12:02:26Z"
      },
      "message": "[travis] add zmq python module",
      "tree": {
        "sha": "e9c69ee9b61b2f9ffea274295fd6c432b8f941d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9c69ee9b61b2f9ffea274295fd6c432b8f941d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "110a1fd7271eb90448498302e2d95dab770513d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/110a1fd7271eb90448498302e2d95dab770513d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/110a1fd7271eb90448498302e2d95dab770513d6"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cd79aa410889bac9278ba83567aae91b5ba59d46",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
        "patch": "@@ -33,11 +33,11 @@ matrix:\n     - compiler: \": Win32\"\n       env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python-zmq\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n@@ -47,6 +47,7 @@ matrix:\n install:\n     - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n+    - if [ -n \"$PACKAGES\" ]; then travis_retry sudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:\n     - unset CC; unset CXX"
      },
      {
        "sha": "e949b61f5de3a02fcb095e4e5e2047c9cfd7b456",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
        "patch": "@@ -32,15 +32,15 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        # Note: proxies are not used to connect to local nodes\n-        # this is because the proxy to use is based on CService.GetNetwork(), which return NET_UNROUTABLE for localhost\n         return start_nodes(4, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n             [],\n             [],\n             []\n             ])\n \n+        return nodes\n+\n     def run_test(self):\n         self.sync_all()\n "
      }
    ]
  },
  {
    "sha": "4899a04c24b927166048a74999992d216a543c23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODk5YTA0YzI0YjkyNzE2NjA0OGE3NDk5OTk5MmQyMTZhNTQzYzIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T12:11:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T12:11:56Z"
      },
      "message": "Merge pull request #5987\n\ne761d7a Bugfix: Allow mining on top of old tip blocks for testnet (fixes testnet-in-a-box use case) (Luke Dashjr)",
      "tree": {
        "sha": "d0a993cdb666e2c00734e6b05334c6763923215f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0a993cdb666e2c00734e6b05334c6763923215f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4899a04c24b927166048a74999992d216a543c23",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDSMMAAoJEHSBCwEjRsmmvLMH/RV5aWiI7qr88VshL9M8zGoB\n7xM601vIJcc/qcjFUZxhEm+R91zekvG7HC0wIkvoEGYyCIxukOZQbUc5Fj46y19Y\nC6b0mav9iyT3cwhyXeVXt97MEFzJ7SAIW0zEI8I6OBs34L7MkUpFZB9E+w21PcmD\nXw3oHqP8kL7pK+GnPp4KyfYrnzLdAfHFMd5vFPFuO1oqSk7NdZFzICV+gmwVyK2F\nXGk3mUJoZajz8PC8baqXCtI0DGtsWC01X7DgGr8wHJwi9NuIJ0Yw9bI+iaxx+QQE\nmZWTnUPXor48GZuHN2rqz+lwyodAQLOGI1i3sXCxwZhS7yPaHSSS7/HhdE9d6as=\n=+WQe\n-----END PGP SIGNATURE-----",
        "payload": "tree d0a993cdb666e2c00734e6b05334c6763923215f\nparent 8a86d53bd5705712bebd74a037ec702bf17b83bc\nparent e761d7a94ff8b9f638b65b16f5c4ffab6573884a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443701514 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443701516 +0200\n\nMerge pull request #5987\n\ne761d7a Bugfix: Allow mining on top of old tip blocks for testnet (fixes testnet-in-a-box use case) (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4899a04c24b927166048a74999992d216a543c23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4899a04c24b927166048a74999992d216a543c23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4899a04c24b927166048a74999992d216a543c23/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a86d53bd5705712bebd74a037ec702bf17b83bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a86d53bd5705712bebd74a037ec702bf17b83bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a86d53bd5705712bebd74a037ec702bf17b83bc"
      },
      {
        "sha": "e761d7a94ff8b9f638b65b16f5c4ffab6573884a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e761d7a94ff8b9f638b65b16f5c4ffab6573884a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e761d7a94ff8b9f638b65b16f5c4ffab6573884a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "430b75683bb55f1b8198e555f3847a8a5b261fe6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4899a04c24b927166048a74999992d216a543c23/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4899a04c24b927166048a74999992d216a543c23/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=4899a04c24b927166048a74999992d216a543c23",
        "patch": "@@ -87,6 +87,7 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         vAlertPubKey = ParseHex(\"04fc9702847840aaf195de8442ebecedf5b095cdbb9bc716bda9110971b28a49e0ead8564ff0db22209e0374782c093bb899692d524e9d6a6956e7c5ecbcd68284\");\n         nDefaultPort = 8333;\n+        nMaxTipAge = 24 * 60 * 60;\n         nPruneAfterHeight = 100000;\n \n         genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n@@ -160,6 +161,7 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[3] = 0x07;\n         vAlertPubKey = ParseHex(\"04302390343f91cc401d56d68b123028bf52e5fca1939df127f63c6467cdf9c8e2c14b61104cf817d0b780da337893ecc4aaff1309e536162dabbdb45200ca2b0a\");\n         nDefaultPort = 18333;\n+        nMaxTipAge = 0x7fffffff;\n         nPruneAfterHeight = 1000;\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n@@ -220,6 +222,7 @@ class CRegTestParams : public CChainParams {\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;\n         pchMessageStart[3] = 0xda;\n+        nMaxTipAge = 24 * 60 * 60;\n         nDefaultPort = 18444;\n         nPruneAfterHeight = 1000;\n "
      },
      {
        "sha": "342bccb12f78068dba519147d3709ca13534db1e",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4899a04c24b927166048a74999992d216a543c23/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4899a04c24b927166048a74999992d216a543c23/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=4899a04c24b927166048a74999992d216a543c23",
        "patch": "@@ -64,6 +64,7 @@ class CChainParams\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n     /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n+    int64_t MaxTipAge() const { return nMaxTipAge; }\n     int64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n@@ -83,6 +84,7 @@ class CChainParams\n     //! Raw pub key bytes for the broadcast alert signing key.\n     std::vector<unsigned char> vAlertPubKey;\n     int nDefaultPort;\n+    long nMaxTipAge;\n     uint64_t nPruneAfterHeight;\n     std::vector<CDNSSeedData> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];"
      },
      {
        "sha": "5cfb05b0d288eae73da0e0a965490f710999648e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4899a04c24b927166048a74999992d216a543c23/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4899a04c24b927166048a74999992d216a543c23/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4899a04c24b927166048a74999992d216a543c23",
        "patch": "@@ -1112,7 +1112,7 @@ bool IsInitialBlockDownload()\n     if (lockIBDState)\n         return false;\n     bool state = (chainActive.Height() < pindexBestHeader->nHeight - 24 * 6 ||\n-            pindexBestHeader->GetBlockTime() < GetTime() - 24 * 60 * 60);\n+            pindexBestHeader->GetBlockTime() < GetTime() - chainParams.MaxTipAge());\n     if (!state)\n         lockIBDState = true;\n     return state;"
      }
    ]
  },
  {
    "sha": "95acf3cc6d90d9406030ce897efdee8be0550a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWFjZjNjYzZkOTBkOTQwNjAzMGNlODk3ZWZkZWU4YmUwNTUwYTUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T11:01:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T12:28:44Z"
      },
      "message": "remove $(@F) and subdirs from univalue make",
      "tree": {
        "sha": "a92fc9e9b94c44439b3b205b94607ea68259f650",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a92fc9e9b94c44439b3b205b94607ea68259f650"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95acf3cc6d90d9406030ce897efdee8be0550a53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95acf3cc6d90d9406030ce897efdee8be0550a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95acf3cc6d90d9406030ce897efdee8be0550a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95acf3cc6d90d9406030ce897efdee8be0550a53/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9623e934732ba0f0a5176cd3d993ebcda327b413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9623e934732ba0f0a5176cd3d993ebcda327b413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9623e934732ba0f0a5176cd3d993ebcda327b413"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "462774389a22b4ad9ebb859b7a8dfdf7a3b5e350",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95acf3cc6d90d9406030ce897efdee8be0550a53/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95acf3cc6d90d9406030ce897efdee8be0550a53/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=95acf3cc6d90d9406030ce897efdee8be0550a53",
        "patch": "@@ -36,8 +36,8 @@ LIBUNIVALUE=univalue/lib/libunivalue.la\n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n   \n-$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n-\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n+$(LIBUNIVALUE): $(wildcard univalue/lib/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue/\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:"
      }
    ]
  },
  {
    "sha": "59783884766d00866e190ba5ae761916e932df10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTc4Mzg4NDc2NmQwMDg2NmUxOTBiYTVhZTc2MTkxNmU5MzJkZjEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-09-28T14:06:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T12:44:27Z"
      },
      "message": "build: remove libressl check\n\nNow that BIP66 passed, OpenSSL is no longer directly part of the\nconsensus. What matters is that DER signatures are correctly parsed, and\nsecp256k1 crypto is implemented correctly (as well as the other\nfunctions we use from OpenSSL, such as random number generation)\n\nThis means that effectively, using LibreSSL is not a larger risk than\nusing another version of OpenSSL.\n\nRemove the specific check for LibreSSL.\n\nIncludes the still-relevant part of #6729: make sure CHECK_HEADER is\ncalled using the right CXXFLAGS, not CFLAGS (as AC_LANG is c++).",
      "tree": {
        "sha": "147cb31c959d7d4fdadbdaba9346b713bd7cf662",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/147cb31c959d7d4fdadbdaba9346b713bd7cf662"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59783884766d00866e190ba5ae761916e932df10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59783884766d00866e190ba5ae761916e932df10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59783884766d00866e190ba5ae761916e932df10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59783884766d00866e190ba5ae761916e932df10/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4899a04c24b927166048a74999992d216a543c23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4899a04c24b927166048a74999992d216a543c23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4899a04c24b927166048a74999992d216a543c23"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 3,
      "deletions": 18
    },
    "files": [
      {
        "sha": "8b518b09cf0548cf4d374d07704ed3fb38e7b960",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59783884766d00866e190ba5ae761916e932df10/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59783884766d00866e190ba5ae761916e932df10/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=59783884766d00866e190ba5ae761916e932df10",
        "patch": "@@ -700,27 +700,12 @@ else\n   fi\n fi\n \n-CFLAGS_TEMP=\"$CFLAGS\"\n+CXXFLAGS_TEMP=\"$CXXFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n-CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n-\n-AC_MSG_CHECKING(for a supported OpenSSL version)\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <openssl/rand.h>\n-  ]],\n-  [[RAND_egd(NULL);]])],\n-  [AC_MSG_RESULT(yes)],\n-  [\n-    AC_ARG_WITH([libressl],\n-    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n-    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n-    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n-    )]\n-)\n-\n-CFLAGS=\"$CFLAGS_TEMP\"\n+CXXFLAGS=\"$CXXFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n \n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)"
      }
    ]
  },
  {
    "sha": "a3874c7c3aeefc2330424f0247129a89c27edcd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzg3NGM3YzNhZWVmYzIzMzA0MjRmMDI0NzEyOWE4OWMyN2VkY2Q4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T12:46:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T12:55:57Z"
      },
      "message": "doc: no longer require use of openssl in OpenBSD build guide",
      "tree": {
        "sha": "1a7a957febe4d03e5bada7506cd2a07067fcb871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a7a957febe4d03e5bada7506cd2a07067fcb871"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3874c7c3aeefc2330424f0247129a89c27edcd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3874c7c3aeefc2330424f0247129a89c27edcd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3874c7c3aeefc2330424f0247129a89c27edcd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3874c7c3aeefc2330424f0247129a89c27edcd8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59783884766d00866e190ba5ae761916e932df10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59783884766d00866e190ba5ae761916e932df10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59783884766d00866e190ba5ae761916e932df10"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 3,
      "deletions": 27
    },
    "files": [
      {
        "sha": "a26b52465e94913fbbd341aee4b6d38dc3a049c4",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 3,
        "deletions": 27,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3874c7c3aeefc2330424f0247129a89c27edcd8/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3874c7c3aeefc2330424f0247129a89c27edcd8/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=a3874c7c3aeefc2330424f0247129a89c27edcd8",
        "patch": "@@ -70,24 +70,6 @@ config_opts=\"runtime-link=shared threadapi=pthread threading=multi link=static v\n ./b2 -d0 -j4 ${config_opts} --prefix=${BOOST_PREFIX} install\n ```\n \n-### OpenSSL\n-\n-OpenBSD uses a replacement of OpenSSL: LibreSSL. This can cause compatibility issues, hence `./configure` will bark if you try to compile with this library:\n-\n-    Detected LibreSSL: This is NOT supported, and may break consensus compatibility!\n-\n-To install a 'real' OpenSSL use:\n-\n-    pkg_add openssl\n-   \n-Any program linked against this library can only be used after setting the dynamic library path:\n-    \n-    export LD_LIBRARY_PATH=\"/usr/local/lib/eopenssl\"\n-\n-(otherwise there will be an error about not being able to find `libcrypto.so.1.0`)\n-\n-Alternatively, pass `--with-libressl` to `./configure`, however as the warning says, this is NOT supported, and may cause problems syncing the chain, or the node to fork off the network in unexpected circumstances.\n-\n ### Building BerkeleyDB\n \n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n@@ -124,28 +106,24 @@ export AUTOCONF_VERSION=2.69 # replace this with the autoconf version that you i\n export AUTOMAKE_VERSION=1.15 # replace this with the automake version that you installed\n ./autogen.sh\n ```\n+Make sure `BDB_PREFIX` and `BOOST_PREFIX` are set to the appropriate paths from the above steps.\n \n To configure with wallet:\n ```bash\n ./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n     CC=egcc CXX=eg++ CPP=ecpp \\\n-    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n-    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\" \\\n     LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n ```\n \n To configure without wallet:\n ```bash\n ./configure --disable-wallet --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp \\\n-    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n-    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\"\n+    CC=egcc CXX=eg++ CPP=ecpp\n ```\n \n Build and run the tests:\n ```bash\n gmake\n-export LD_LIBRARY_PATH=\"/usr/local/lib/eopenssl\"\n gmake check\n ```\n \n@@ -164,9 +142,7 @@ pkg_add llvm boost\n ```\n \n ```bash\n-./configure --disable-wallet --with-gui=no CC=clang CXX=clang++ \\\n-    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n-    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\"\n+./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n gmake\n ```\n "
      }
    ]
  },
  {
    "sha": "745f909925be419914083c66867150b11fa3a7b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDVmOTA5OTI1YmU0MTk5MTQwODNjNjY4NjcxNTBiMTFmYTNhN2Iy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-09-29T21:01:43Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T13:40:57Z"
      },
      "message": "travis: install a recent libzmq and pyzmq for tests",
      "tree": {
        "sha": "b55463b5c7e55b80f7408380d03e5c563adf9f90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b55463b5c7e55b80f7408380d03e5c563adf9f90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/745f909925be419914083c66867150b11fa3a7b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745f909925be419914083c66867150b11fa3a7b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/745f909925be419914083c66867150b11fa3a7b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745f909925be419914083c66867150b11fa3a7b2/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c27cdf55d5b5b7e07d189e5bfe2d6bc85867bb"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "3e7077ab2659994e0c7991c7c5c043e231e3b337",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/745f909925be419914083c66867150b11fa3a7b2/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/745f909925be419914083c66867150b11fa3a7b2/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=745f909925be419914083c66867150b11fa3a7b2",
        "patch": "@@ -33,21 +33,21 @@ matrix:\n     - compiler: \": Win32\"\n       env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python-zmq\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python-zmq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n   exclude:\n     - compiler: gcc\n install:\n+    - if [ -n \"$PACKAGES\" ]; then sudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list; fi\n     - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n-    - if [ -n \"$PACKAGES\" ]; then travis_retry sudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi\n before_script:\n     - unset CC; unset CXX"
      },
      {
        "sha": "bcb132321a4c6931efe41d8d1ae3605d9278d62b",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/745f909925be419914083c66867150b11fa3a7b2/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/745f909925be419914083c66867150b11fa3a7b2/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=745f909925be419914083c66867150b11fa3a7b2",
        "patch": "@@ -39,8 +39,6 @@ def setup_nodes(self):\n             []\n             ])\n \n-        return nodes\n-\n     def run_test(self):\n         self.sync_all()\n "
      }
    ]
  },
  {
    "sha": "17d0e638b66b9dd51370335c9b0a7039de3f81fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2QwZTYzOGI2NmI5ZGQ1MTM3MDMzNWM5YjBhNzAzOWRlM2Y4MWZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T14:12:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T14:22:26Z"
      },
      "message": "Merge pull request #6686\n\n745f909 travis: install a recent libzmq and pyzmq for tests (Cory Fields)\na9c27cd [travis] add zmq python module (Jonas Schnelli)\n110a1fd enable zmq-test in rpc-tests.sh (Jonas Schnelli)",
      "tree": {
        "sha": "5f23133631a574afda55dbad76e451d172856fd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f23133631a574afda55dbad76e451d172856fd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17d0e638b66b9dd51370335c9b0a7039de3f81fa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDUGiAAoJEHSBCwEjRsmmRF8H/RskNZojzvZSgqgYV12cCCsi\ncwk8vmCI7OtsYl1mKEzCkRS+Ry63Vi6Nyfbq4kw6e9HAWeUSQycGejDqTNT1ep1L\nOgZVCWzj3wnM5fkK6BPKMOZV2R2FlHRSPsd1J1fnf/51HP7+8t8FyQxi6RIpZ2y/\ncQiND5m/MJaSUJjfdOQELJsHn7V3ZLGGO1EWQAyH/42794s+XSmS0q1SMMC1LTzb\nvtkyCkAE5iZ6+zFBBV87sMcGtlTaip2UAjE38s6dBKXrS9q4vTkjQaixeVBCXR7y\nkmYzZL1Yi94iF7wLHCsnJ7L057I6CVYPb9hImzXQtOjis31VkhVcH+qBYXhqAx0=\n=8Lpt\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f23133631a574afda55dbad76e451d172856fd4\nparent 4899a04c24b927166048a74999992d216a543c23\nparent 745f909925be419914083c66867150b11fa3a7b2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443708726 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443709346 +0200\n\nMerge pull request #6686\n\n745f909 travis: install a recent libzmq and pyzmq for tests (Cory Fields)\na9c27cd [travis] add zmq python module (Jonas Schnelli)\n110a1fd enable zmq-test in rpc-tests.sh (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17d0e638b66b9dd51370335c9b0a7039de3f81fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17d0e638b66b9dd51370335c9b0a7039de3f81fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17d0e638b66b9dd51370335c9b0a7039de3f81fa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4899a04c24b927166048a74999992d216a543c23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4899a04c24b927166048a74999992d216a543c23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4899a04c24b927166048a74999992d216a543c23"
      },
      {
        "sha": "745f909925be419914083c66867150b11fa3a7b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/745f909925be419914083c66867150b11fa3a7b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/745f909925be419914083c66867150b11fa3a7b2"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "3e7077ab2659994e0c7991c7c5c043e231e3b337",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17d0e638b66b9dd51370335c9b0a7039de3f81fa/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17d0e638b66b9dd51370335c9b0a7039de3f81fa/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=17d0e638b66b9dd51370335c9b0a7039de3f81fa",
        "patch": "@@ -33,18 +33,19 @@ matrix:\n     - compiler: \": Win32\"\n       env: HOST=i686-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": 32-bit + dash\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\" USE_SHELL=\"/bin/dash\"\n     - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PPA=\"ppa:ubuntu-wine/ppa\" PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine1.7 bc\" RUN_TESTS=true GOAL=\"deploy\" BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports\" MAKEJOBS=\"-j2\"\n     - compiler: \": bitcoind\"\n-      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu PACKAGES=\"bc python-zmq\" PPA=\"ppa:chris-lea/zeromq\" DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-zmq --enable-glibc-back-compat --enable-reduce-exports CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\"\n     - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"cmake libcap-dev libz-dev libbz2-dev\" BITCOIN_CONFIG=\"--enable-reduce-exports\" OSX_SDK=10.9 GOAL=\"deploy\"\n   exclude:\n     - compiler: gcc\n install:\n+    - if [ -n \"$PACKAGES\" ]; then sudo rm -f /etc/apt/sources.list.d/travis_ci_zeromq3-source.list; fi\n     - if [ -n \"$PPA\" ]; then travis_retry sudo add-apt-repository \"$PPA\" -y; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-install-recommends --no-upgrade -qq $PACKAGES; fi"
      },
      {
        "sha": "7e1d2e8e503fd2f483b3629c0797146fcc826922",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17d0e638b66b9dd51370335c9b0a7039de3f81fa/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17d0e638b66b9dd51370335c9b0a7039de3f81fa/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=17d0e638b66b9dd51370335c9b0a7039de3f81fa",
        "patch": "@@ -60,9 +60,9 @@ testScriptsExt=(\n     'mempool_packages.py'\n );\n \n-#if [ \"x$ENABLE_ZMQ\" = \"x1\" ]; then\n-#  testScripts+=('zmq_test.py')\n-#fi\n+if [ \"x$ENABLE_ZMQ\" = \"x1\" ]; then\n+  testScripts+=('zmq_test.py')\n+fi\n \n extArg=\"-extended\"\n passOn=${@#$extArg}"
      },
      {
        "sha": "bcb132321a4c6931efe41d8d1ae3605d9278d62b",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17d0e638b66b9dd51370335c9b0a7039de3f81fa/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17d0e638b66b9dd51370335c9b0a7039de3f81fa/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=17d0e638b66b9dd51370335c9b0a7039de3f81fa",
        "patch": "@@ -32,8 +32,6 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        # Note: proxies are not used to connect to local nodes\n-        # this is because the proxy to use is based on CService.GetNetwork(), which return NET_UNROUTABLE for localhost\n         return start_nodes(4, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n             [],"
      }
    ]
  },
  {
    "sha": "f297042cae572753e6c25d25caf92091e88b76df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjk3MDQyY2FlNTcyNzUzZTZjMjVkMjVjYWY5MjA5MWU4OGI3NmRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T14:23:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T14:36:15Z"
      },
      "message": "Merge pull request #6637\n\n95acf3c remove $(@F) and subdirs from univalue make (Jonas Schnelli)\n9623e93 [Univalue] add univalue over subtree (Jonas Schnelli)\n2f9f082 Squashed 'src/univalue/' content from commit 87d9045 (Jonas Schnelli)\n0917306 remove univalue, prepare for subtree (Jonas Schnelli)",
      "tree": {
        "sha": "59a0827f7d3500f1b145e4f5653f1f8b94c1e037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59a0827f7d3500f1b145e4f5653f1f8b94c1e037"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f297042cae572753e6c25d25caf92091e88b76df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDUTfAAoJEHSBCwEjRsmm3aIH/Ri/JLHTiN+7fl+pbw9bXs2f\nm4sV+Zk4YhplmrxRgBfQObikDTppShTwKpxEKrlnzJgSj9+uJi8pZJ69PNfmgvL0\nL+ZBmanXlmxR8reNb54q6khn0080aTy/IsA5WjKf9QYKOgtT31hWbUGhZVmnlGVo\ny6YmkTsSRaKMkF5X5SUR8KA3DCvcdVUbEnumCNep0PANNPDWHAz9gVWXloZHMlDL\nyfpCYCz4Ip4zS4oBYw5gVrnEWB6rpvjjYVepfn4Fb+5MX0diRtyXjbY4C5jF14sr\ng9f69PtfuJtWKemV6YSxq1ZGO/7XyiIHXTkSdOj8mrGGzwYmw6jtteD5+b7HlD4=\n=ArFd\n-----END PGP SIGNATURE-----",
        "payload": "tree 59a0827f7d3500f1b145e4f5653f1f8b94c1e037\nparent 17d0e638b66b9dd51370335c9b0a7039de3f81fa\nparent 95acf3cc6d90d9406030ce897efdee8be0550a53\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443709439 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443710175 +0200\n\nMerge pull request #6637\n\n95acf3c remove $(@F) and subdirs from univalue make (Jonas Schnelli)\n9623e93 [Univalue] add univalue over subtree (Jonas Schnelli)\n2f9f082 Squashed 'src/univalue/' content from commit 87d9045 (Jonas Schnelli)\n0917306 remove univalue, prepare for subtree (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f297042cae572753e6c25d25caf92091e88b76df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f297042cae572753e6c25d25caf92091e88b76df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f297042cae572753e6c25d25caf92091e88b76df/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17d0e638b66b9dd51370335c9b0a7039de3f81fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17d0e638b66b9dd51370335c9b0a7039de3f81fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17d0e638b66b9dd51370335c9b0a7039de3f81fa"
      },
      {
        "sha": "95acf3cc6d90d9406030ce897efdee8be0550a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95acf3cc6d90d9406030ce897efdee8be0550a53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95acf3cc6d90d9406030ce897efdee8be0550a53"
      }
    ],
    "stats": {
      "total": 680,
      "additions": 632,
      "deletions": 48
    },
    "files": [
      {
        "sha": "dbdc356f5d2b36a72dc4ffb351bfe1de8609c5e1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -940,7 +940,7 @@ unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no\"\n-AC_CONFIG_SUBDIRS([src/secp256k1])\n+AC_CONFIG_SUBDIRS([src/secp256k1 src/univalue])\n \n AC_OUTPUT\n "
      },
      {
        "sha": "462774389a22b4ad9ebb859b7a8dfdf7a3b5e350",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -1,4 +1,4 @@\n-DIST_SUBDIRS = secp256k1\n+DIST_SUBDIRS = secp256k1 univalue\n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)\n \n \n@@ -21,27 +21,30 @@ BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n+BITCOIN_INCLUDES += -I$(srcdir)/univalue/include\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n-LIBBITCOIN_UNIVALUE=univalue/libbitcoin_univalue.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n+LIBUNIVALUE=univalue/lib/libunivalue.la\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n+  \n+$(LIBUNIVALUE): $(wildcard univalue/lib/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue/\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n EXTRA_LIBRARIES = \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n   libbitcoin_common.a \\\n-  univalue/libbitcoin_univalue.a \\\n   libbitcoin_server.a \\\n   libbitcoin_cli.a\n if ENABLE_WALLET\n@@ -248,14 +251,6 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha512.cpp \\\n   crypto/sha512.h\n \n-# univalue JSON library\n-univalue_libbitcoin_univalue_a_SOURCES = \\\n-  univalue/univalue.cpp \\\n-  univalue/univalue.h \\\n-  univalue/univalue_escapes.h \\\n-  univalue/univalue_read.cpp \\\n-  univalue/univalue_write.cpp\n-\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n@@ -332,7 +327,7 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n@@ -360,7 +355,7 @@ endif\n \n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL)\n \n bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n@@ -376,7 +371,7 @@ bitcoin_tx_SOURCES += bitcoin-tx-res.rc\n endif\n \n bitcoin_tx_LDADD = \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "67fd7c1076e0e92eb4ce98e773b45a22a904aad5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -367,7 +367,7 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "b8725c872de610dc148ce72066ffc6eefa272a63",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -33,7 +33,7 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "9a6e43631b42611758421d22a2fa02ad3a9cd614",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -91,7 +91,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n@@ -124,6 +124,7 @@ check-local:\n \t@echo \"Running test/bitcoin-util-test.py...\"\n \t$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check\n \n %.json.h: %.json\n \t@$(MKDIR_P) $(@D)"
      },
      {
        "sha": "e0fe6aa5bfde8ccb2b7d26b47bc617b91cc8cb4d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -18,7 +18,7 @@\n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "f7518fab5d19f4588957bfa9974565972a027581",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -12,7 +12,7 @@\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "4be24f8e09725899533d22711af2ac775b400614",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -9,7 +9,7 @@\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\""
      },
      {
        "sha": "533fedfe7a68617c583074c76ccf264c5134ab21",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -10,7 +10,7 @@\n #include \"script/standard.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "f387a3ec8c5ef93ef086b6be9b39931e240b0547",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -18,7 +18,7 @@\n \n #include <openssl/crypto.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #ifdef ENABLE_WALLET\n #include <db_cxx.h>"
      },
      {
        "sha": "c46d7a8bd2de75874f40b4cc66a1acf2606281f2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -18,7 +18,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/dynamic_bitset.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "545ac1289081955ee57322d9de46cca99d16f3d7",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -20,7 +20,7 @@\n \n #include <stdint.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "4064c2fee320fb93933c354eb320c48ec79ef9aa",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -12,7 +12,7 @@\n #include <stdint.h>\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "8937a56f035e393d1ab78ea104a22b1187b4189d",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_RPCCLIENT_H\n #define BITCOIN_RPCCLIENT_H\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n UniValue RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n /** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)"
      },
      {
        "sha": "c49c3e5194a1f4c29061ace337430a25f24c61f1",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -25,7 +25,7 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/shared_ptr.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "0f0457c5cfa2b521f13a8393b464ce1c5f3fd232",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -22,7 +22,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "7746be25f73c9af7ddf2c863fa8d35b040a6fab9",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -19,7 +19,7 @@\n \n #include <boost/foreach.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "9cf1ab6d99ce9b1cbb3a9c50ae5860de3b0aae4f",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -12,7 +12,7 @@\n #include <string>\n #include <boost/filesystem.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n //! HTTP status codes\n enum HTTPStatusCode"
      },
      {
        "sha": "4dec53396de89a9d88dfc582c90ec194bd62eb4f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -31,7 +31,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "fa60f8c833f0d50247b0d831aac757571b961c98",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -13,7 +13,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "dde8dfdcc3dbecfb9da7f3cce3fc2ec7ac6d5175",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -17,7 +17,7 @@\n \n #include <boost/function.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n class CRPCCommand;\n "
      },
      {
        "sha": "9845df697f996b8d04f92ac79fd0b8e6e78c51ed",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -18,7 +18,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n "
      },
      {
        "sha": "2a486f08e43518fb0758e6b81562ba6aa3b2b2b6",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -13,7 +13,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "2e652f76e272dd95142c07bb52210ed3a90eb982",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -14,7 +14,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "882f9eb199c2ae1e8b649079a73a0f7472a14695",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -27,7 +27,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "6fca64d5da3cd564e69c788642644c591304ab86",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -20,7 +20,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n "
      },
      {
        "sha": "beec39667537718bcf92ca51495303a67fec42d7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -26,7 +26,7 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "945c1acbeb49f6d07150d61207bd956a7b5aafdb",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -6,7 +6,7 @@\n #include <vector>\n #include <string>\n #include <map>\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "ca9e8423481f8c6d5574c6088746fd9ed2dc21f5",
        "filename": "src/univalue/.gitignore",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.gitignore?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,22 @@\n+.deps/\n+INSTALL\n+Makefile\n+Makefile.in\n+aclocal.m4\n+autom4te.cache/\n+compile\n+config.log\n+config.status\n+config.guess\n+config.sub\n+configure\n+depcomp\n+install-sh\n+missing\n+stamp-h1\n+univalue-config.h*\n+test-driver\n+libtool\n+ltmain.sh\n+\n+*.o"
      },
      {
        "sha": "af632c78d9c3d2eb1342469180e5dc1db7fcb807",
        "filename": "src/univalue/.travis.yml",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.travis.yml?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,52 @@\n+\n+language: cpp\n+\n+compiler:\n+  - clang\n+  - gcc\n+\n+os:\n+  - linux\n+  - osx\n+\n+sudo: false\n+\n+env:\n+  global:\n+    - MAKEJOBS=-j3\n+    - RUN_TESTS=true\n+    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n+\n+cache:\n+  apt: true\n+\n+addons:\n+  apt:\n+    packages:\n+      - pkg-config\n+\n+before_script:\n+  - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n+  - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n+\n+script:\n+  - if [ -n \"$UNIVALUE_CONFIG\" ]; then unset CC; unset CXX; fi\n+  - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n+  - UNIVALUE_CONFIG_ALL=\"--prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+  - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n+  - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n+  - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n+  - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+\n+matrix:\n+  fast_finish: true\n+  include:\n+    - os: linux\n+      compiler: gcc\n+      env: UNIVALUE_CONFIG=--host=x86_64-w64-mingw32 RUN_TESTS=false\n+      addons:\n+        apt:\n+          packages:\n+            - g++-mingw-w64-x86-64\n+            - gcc-mingw-w64-x86-64\n+            - binutils-mingw-w64-x86-64"
      },
      {
        "sha": "1fb429f3569c7f8a8e57e69bfb984ab905bccf15",
        "filename": "src/univalue/COPYING",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/COPYING?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,19 @@\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+"
      },
      {
        "sha": "2800f466dc55bfbc94f20d4ededd7f5ac92a1d15",
        "filename": "src/univalue/Makefile.am",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,84 @@\n+ACLOCAL_AMFLAGS = -I build-aux/m4\n+.PHONY: gen\n+.INTERMEDIATE: $(GENBIN)\n+\n+include_HEADERS = include/univalue.h\n+noinst_HEADERS = lib/univalue_escapes.h\n+\n+lib_LTLIBRARIES = lib/libunivalue.la\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA = pc/libunivalue.pc\n+\n+lib_libunivalue_la_SOURCES = \\\n+\tlib/univalue.cpp \\\n+\tlib/univalue_read.cpp \\\n+\tlib/univalue_write.cpp\n+\n+lib_libunivalue_la_LDFLAGS = \\\n+\t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n+\t-no-undefined\n+lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+\n+TESTS = test/unitester\n+\n+GENBIN = gen/gen$(BUILD_EXEEXT)\n+GEN_SRCS = gen/gen.cpp\n+\n+$(GENBIN): $(GEN_SRCS)\n+\t@echo Building $@\n+\t$(AM_V_at)c++ -I$(top_srcdir)/include -o $@ $<\n+\n+gen: lib/univalue_escapes.h $(GENBIN)\n+\t@echo Updating $<\n+\t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n+\n+noinst_PROGRAMS = $(TESTS)\n+\n+TEST_DATA_DIR=test\n+\n+test_unitester_SOURCES = test/unitester.cpp\n+test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n+test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+TEST_FILES = \\\n+\t$(TEST_DATA_DIR)/fail10.json \\\n+\t$(TEST_DATA_DIR)/fail11.json \\\n+\t$(TEST_DATA_DIR)/fail12.json \\\n+\t$(TEST_DATA_DIR)/fail13.json \\\n+\t$(TEST_DATA_DIR)/fail14.json \\\n+\t$(TEST_DATA_DIR)/fail15.json \\\n+\t$(TEST_DATA_DIR)/fail16.json \\\n+\t$(TEST_DATA_DIR)/fail17.json \\\n+\t$(TEST_DATA_DIR)/fail18.json \\\n+\t$(TEST_DATA_DIR)/fail19.json \\\n+\t$(TEST_DATA_DIR)/fail1.json \\\n+\t$(TEST_DATA_DIR)/fail20.json \\\n+\t$(TEST_DATA_DIR)/fail21.json \\\n+\t$(TEST_DATA_DIR)/fail22.json \\\n+\t$(TEST_DATA_DIR)/fail23.json \\\n+\t$(TEST_DATA_DIR)/fail24.json \\\n+\t$(TEST_DATA_DIR)/fail25.json \\\n+\t$(TEST_DATA_DIR)/fail26.json \\\n+\t$(TEST_DATA_DIR)/fail27.json \\\n+\t$(TEST_DATA_DIR)/fail28.json \\\n+\t$(TEST_DATA_DIR)/fail29.json \\\n+\t$(TEST_DATA_DIR)/fail2.json \\\n+\t$(TEST_DATA_DIR)/fail30.json \\\n+\t$(TEST_DATA_DIR)/fail31.json \\\n+\t$(TEST_DATA_DIR)/fail32.json \\\n+\t$(TEST_DATA_DIR)/fail33.json \\\n+\t$(TEST_DATA_DIR)/fail34.json \\\n+\t$(TEST_DATA_DIR)/fail3.json \\\n+\t$(TEST_DATA_DIR)/fail4.json \\\n+\t$(TEST_DATA_DIR)/fail5.json \\\n+\t$(TEST_DATA_DIR)/fail6.json \\\n+\t$(TEST_DATA_DIR)/fail7.json \\\n+\t$(TEST_DATA_DIR)/fail8.json \\\n+\t$(TEST_DATA_DIR)/fail9.json \\\n+\t$(TEST_DATA_DIR)/pass1.json \\\n+\t$(TEST_DATA_DIR)/pass2.json \\\n+\t$(TEST_DATA_DIR)/pass3.json\n+\n+EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "src/univalue/README",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,7 @@\n+\n+\t\tUniValue\n+\n+A universal value object, with JSON encoding (output) and decoding (input).\n+\n+Built as a single dynamic RAII C++ object class, and no templates.\n+"
      },
      {
        "sha": "5530048e923e51909251e7e32f7023f1fc749999",
        "filename": "src/univalue/TODO",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/TODO",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/TODO",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/TODO?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,10 @@\n+\n+Rearrange tree for easier 'git subtree' style use\n+\n+Move towards C++11 etc.\n+\n+Namespace support - must come up with useful shorthand, avoiding\n+long Univalue::Univalue::Univalue usages forced upon library users.\n+\n+Improve test suite\n+"
      },
      {
        "sha": "4b38721faad09b9339107bb375d2d31fdbde9d4a",
        "filename": "src/univalue/autogen.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/autogen.sh?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,9 @@\n+#!/bin/sh\n+set -e\n+srcdir=\"$(dirname $0)\"\n+cd \"$srcdir\"\n+if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n+  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  export LIBTOOLIZE\n+fi\n+autoreconf --install --force"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "src/univalue/build-aux/m4/.empty",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/.empty?ref=f297042cae572753e6c25d25caf92091e88b76df"
      },
      {
        "sha": "6cd951622925afac13d0820b2c25b4f8cac7ff1e",
        "filename": "src/univalue/configure.ac",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,69 @@\n+m4_define([libunivalue_major_version], [1])\n+m4_define([libunivalue_minor_version], [1])\n+m4_define([libunivalue_micro_version], [1])\n+m4_define([libunivalue_interface_age], [1])\n+# If you need a modifier for the version number. \n+# Normally empty, but can be used to make \"fixup\" releases.\n+m4_define([libunivalue_extraversion], [])\n+\n+dnl libtool versioning from libunivalue\n+m4_define([libunivalue_current], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version - libunivalue_interface_age)])\n+m4_define([libunivalue_binary_age], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version)])\n+m4_define([libunivalue_revision], [libunivalue_interface_age])\n+m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_interface_age)])\n+m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n+\n+\n+AC_INIT([univalue], [1.0.0],\n+        [http://github.com/jgarzik/univalue/])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_PREREQ(2.60)\n+AC_CONFIG_SRCDIR([lib/univalue.cpp])\n+AC_CONFIG_AUX_DIR([build-aux])\n+AC_CONFIG_MACRO_DIR([build-aux/m4])\n+AC_CONFIG_HEADERS([univalue-config.h])\n+AM_INIT_AUTOMAKE([subdir-objects foreign])\n+\n+LIBUNIVALUE_MAJOR_VERSION=libunivalue_major_version\n+LIBUNIVALUE_MINOR_VERSION=libunivalue_minor_version\n+LIBUNIVALUE_MICRO_VERSION=libunivalue_micro_version\n+LIBUNIVALUE_INTERFACE_AGE=libunivalue_interface_age\n+\n+# ABI version\n+# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n+LIBUNIVALUE_CURRENT=libunivalue_current\n+LIBUNIVALUE_REVISION=libunivalue_revision\n+LIBUNIVALUE_AGE=libunivalue_age\n+\n+AC_SUBST(LIBUNIVALUE_CURRENT)\n+AC_SUBST(LIBUNIVALUE_REVISION)\n+AC_SUBST(LIBUNIVALUE_AGE)\n+\n+LT_INIT\n+LT_LANG([C++])\n+\n+case $host in\n+  *mingw*)\n+    LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"\n+  ;;\n+esac\n+\n+BUILD_EXEEXT=\n+case $build in\n+  *mingw*)\n+    BUILD_EXEEXT=\".exe\"\n+  ;;\n+esac\n+\n+AC_CONFIG_FILES([\n+    Makefile\n+    pc/libunivalue.pc\n+    pc/libunivalue-uninstalled.pc])\n+\n+AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(BUILD_EXEEXT)\n+AC_OUTPUT\n+"
      },
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "src/univalue/gen/gen.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen/gen.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "previous_filename": "src/univalue/gen.cpp"
      },
      {
        "sha": "ac051160118f4ef84237ddc5e766e91d5fb8285e",
        "filename": "src/univalue/include/univalue.h",
        "status": "renamed",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -1,11 +1,13 @@\n // Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_UNIVALUE_UNIVALUE_H\n-#define BITCOIN_UNIVALUE_UNIVALUE_H\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n \n #include <stdint.h>\n+\n #include <string>\n #include <vector>\n #include <map>\n@@ -245,4 +247,4 @@ extern const UniValue NullUniValue;\n \n const UniValue& find_value( const UniValue& obj, const std::string& name);\n \n-#endif // BITCOIN_UNIVALUE_UNIVALUE_H\n+#endif // __UNIVALUE_H__\n\\ No newline at end of file",
        "previous_filename": "src/univalue/univalue.h"
      },
      {
        "sha": "ca8c16dcd4b0d5ab31a3ac29be11d35e768c3cdb",
        "filename": "src/univalue/lib/.gitignore",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/.gitignore?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,10 @@\n+\n+libunivalue-uninstalled.pc\n+libunivalue.pc\n+libunivalue.a\n+gen\n+\n+.libs\n+*.lo\n+*.la\n+"
      },
      {
        "sha": "883e8651fe3d42e2c5c24a6c436dc2bf4c0f351b",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "renamed",
        "additions": 64,
        "deletions": 2,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -1,16 +1,78 @@\n // Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <stdint.h>\n #include <ctype.h>\n+#include <errno.h>\n #include <iomanip>\n+#include <limits>\n #include <sstream>\n-#include <stdexcept>      // std::runtime_error\n+#include <stdexcept>\n+#include <stdlib.h>\n+#include <string.h>\n \n #include \"univalue.h\"\n \n-#include \"utilstrencodings.h\" // ParseXX\n+namespace \n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n \n using namespace std;\n ",
        "previous_filename": "src/univalue/univalue.cpp"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "src/univalue/lib/univalue_escapes.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_escapes.h?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "previous_filename": "src/univalue/univalue_escapes.h"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "previous_filename": "src/univalue/univalue_read.cpp"
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "previous_filename": "src/univalue/univalue_write.cpp"
      },
      {
        "sha": "b7f53e875e6e45e6e5cdb37dcd3c3b1a12e2b832",
        "filename": "src/univalue/pc/libunivalue-uninstalled.pc.in",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/pc/libunivalue-uninstalled.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/pc/libunivalue-uninstalled.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/pc/libunivalue-uninstalled.pc.in?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,9 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: ${pc_top_builddir}/${pcfiledir}/libunivalue.la"
      },
      {
        "sha": "358a2d5f73219147d8a2f286146dc4e912363f40",
        "filename": "src/univalue/pc/libunivalue.pc.in",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/pc/libunivalue.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/pc/libunivalue.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/pc/libunivalue.pc.in?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,10 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: -L${libdir} -lunivalue\n+Cflags: -I${includedir}"
      },
      {
        "sha": "e4dea0df723bbe22e111e639e394c3d62562dddd",
        "filename": "src/univalue/test/.gitignore",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,7 @@\n+\n+unitester\n+\n+*.log\n+*.trs\n+\n+.libs"
      },
      {
        "sha": "6216b865f10219c51c6af21e7a68641bab77ee4f",
        "filename": "src/univalue/test/fail1.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail1.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file"
      },
      {
        "sha": "5d8c0047bd522dfa9fbc642051ed76bd3162d936",
        "filename": "src/univalue/test/fail10.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail10.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail10.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail10.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra value after close\": true} \"misplaced quoted value\"\n\\ No newline at end of file"
      },
      {
        "sha": "76eb95b4583c8ee74eee3bdc25e1db69e1aaf4bb",
        "filename": "src/univalue/test/fail11.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail11.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail11.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail11.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal expression\": 1 + 2}\n\\ No newline at end of file"
      },
      {
        "sha": "77580a4522d8c79245851e72a3644a0709b3d28c",
        "filename": "src/univalue/test/fail12.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail12.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail12.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail12.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal invocation\": alert()}\n\\ No newline at end of file"
      },
      {
        "sha": "379406b59bdb943f145afea98ff1bbc45d43ff45",
        "filename": "src/univalue/test/fail13.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail13.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail13.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail13.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot have leading zeroes\": 013}\n\\ No newline at end of file"
      },
      {
        "sha": "0ed366b38a34f551c25735bdcb9282d27beae026",
        "filename": "src/univalue/test/fail14.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail14.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail14.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail14.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot be hex\": 0x14}\n\\ No newline at end of file"
      },
      {
        "sha": "fc8376b605da69dda23f3fcdd9816dcbf2e736cc",
        "filename": "src/univalue/test/fail15.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail15.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail15.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail15.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\x15\"]\n\\ No newline at end of file"
      },
      {
        "sha": "3fe21d4b532498c8b90872ef571c6867f45e645f",
        "filename": "src/univalue/test/fail16.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail16.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail16.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail16.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\\naked]\n\\ No newline at end of file"
      },
      {
        "sha": "62b9214aeda6d74a72ebeceedf0aae3609f1c638",
        "filename": "src/univalue/test/fail17.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail17.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail17.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail17.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\017\"]\n\\ No newline at end of file"
      },
      {
        "sha": "edac92716f186e39d0e3c818b8b110b9a2c4add5",
        "filename": "src/univalue/test/fail18.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail18.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail18.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail18.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[[\"Too deep\"]]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "3b9c46fa9a296c9d8c35ce4a6592d8bb7ffe748a",
        "filename": "src/univalue/test/fail19.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail19.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail19.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail19.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Missing colon\" null}\n\\ No newline at end of file"
      },
      {
        "sha": "6b7c11e5a56537f81e651980359c62e263f7399f",
        "filename": "src/univalue/test/fail2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail2.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"Unclosed array\"\n\\ No newline at end of file"
      },
      {
        "sha": "27c1af3e72ee37bbf64ccd7b77c5bad8cdea1557",
        "filename": "src/univalue/test/fail20.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail20.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail20.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail20.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Double colon\":: null}\n\\ No newline at end of file"
      },
      {
        "sha": "62474573b2160adefc3dc669b39200ea659d6e59",
        "filename": "src/univalue/test/fail21.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail21.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail21.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail21.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead of colon\", null}\n\\ No newline at end of file"
      },
      {
        "sha": "a7752581bcf7f3b901aef052a2df541c1285b6c2",
        "filename": "src/univalue/test/fail22.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail22.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail22.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail22.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"Colon instead of comma\": false]\n\\ No newline at end of file"
      },
      {
        "sha": "494add1ca190e12acd1c8e34ac819a6316c927bc",
        "filename": "src/univalue/test/fail23.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail23.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail23.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail23.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"Bad value\", truth]\n\\ No newline at end of file"
      },
      {
        "sha": "caff239bfc36297da08828095105bb497b8aef2a",
        "filename": "src/univalue/test/fail24.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail24.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail24.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail24.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+['single quote']\n\\ No newline at end of file"
      },
      {
        "sha": "8b7ad23e010314591d914519996c28483b5dadc8",
        "filename": "src/univalue/test/fail25.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail25.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail25.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail25.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"\ttab\tcharacter\tin\tstring\t\"]\n\\ No newline at end of file"
      },
      {
        "sha": "845d26a6a54398c49cd492e6836c0d1987f554e4",
        "filename": "src/univalue/test/fail26.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail26.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail26.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail26.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"tab\\   character\\   in\\  string\\  \"]\n\\ No newline at end of file"
      },
      {
        "sha": "6b01a2ca4a97ec36604771dcc3175bbcda865d85",
        "filename": "src/univalue/test/fail27.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail27.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail27.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail27.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "621a0101c664a619457d16f1107a677c911481b4",
        "filename": "src/univalue/test/fail28.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail28.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail28.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail28.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\\\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "47ec421bb6242648e80b2b465049acbae1e6e44a",
        "filename": "src/univalue/test/fail29.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail29.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail29.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail29.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[0e]\n\\ No newline at end of file"
      },
      {
        "sha": "168c81eb78537ea4006ea0a46b67851d9995564d",
        "filename": "src/univalue/test/fail3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail3.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{unquoted_key: \"keys must be quoted\"}\n\\ No newline at end of file"
      },
      {
        "sha": "8ab0bc4b8b2c73b616a45931d05720555a2f7762",
        "filename": "src/univalue/test/fail30.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail30.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail30.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail30.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[0e+]\n\\ No newline at end of file"
      },
      {
        "sha": "1cce602b518fc6e7f164a58cc710def27e64b8a5",
        "filename": "src/univalue/test/fail31.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail31.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail31.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail31.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[0e+-1]\n\\ No newline at end of file"
      },
      {
        "sha": "45cba7396ff7462dd6de005c32fd2a95c5318e5f",
        "filename": "src/univalue/test/fail32.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail32.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail32.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail32.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead if closing brace\": true,\n\\ No newline at end of file"
      },
      {
        "sha": "ca5eb19dc97f5ca363ff33a4c3644ad28e612679",
        "filename": "src/univalue/test/fail33.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail33.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail33.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail33.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"mismatch\"}\n\\ No newline at end of file"
      },
      {
        "sha": "3f8be172865d17dd812f50d5cf00a2509f51e6bf",
        "filename": "src/univalue/test/fail34.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail34.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail34.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail34.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{} garbage\n\\ No newline at end of file"
      },
      {
        "sha": "9de168bf34e2e368d044bccc099d44b02316de66",
        "filename": "src/univalue/test/fail4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail4.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"extra comma\",]\n\\ No newline at end of file"
      },
      {
        "sha": "ddf3ce3d2409467011ec7545551d5d078bce1bfd",
        "filename": "src/univalue/test/fail5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail5.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"double extra comma\",,]\n\\ No newline at end of file"
      },
      {
        "sha": "ed91580e1b1c15194a9a758f1b231575074722db",
        "filename": "src/univalue/test/fail6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail6.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[   , \"<-- missing value\"]\n\\ No newline at end of file"
      },
      {
        "sha": "8a96af3e4ee6c7fffd8da641dedcd750a5cc4d9d",
        "filename": "src/univalue/test/fail7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail7.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"Comma after the close\"],\n\\ No newline at end of file"
      },
      {
        "sha": "b28479c6ecb21a801d6988b9ea39a4eb00a64702",
        "filename": "src/univalue/test/fail8.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail8.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail8.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail8.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[\"Extra close\"]]\n\\ No newline at end of file"
      },
      {
        "sha": "5815574f363e58cf91578e909ef4dabb402a75de",
        "filename": "src/univalue/test/fail9.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail9.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/fail9.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail9.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra comma\": true,}\n\\ No newline at end of file"
      },
      {
        "sha": "70e26854369282e625e75b302782f581e610f2b3",
        "filename": "src/univalue/test/pass1.json",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/pass1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/pass1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass1.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,58 @@\n+[\n+    \"JSON Test Pattern pass1\",\n+    {\"object with 1 member\":[\"array with 1 element\"]},\n+    {},\n+    [],\n+    -42,\n+    true,\n+    false,\n+    null,\n+    {\n+        \"integer\": 1234567890,\n+        \"real\": -9876.543210,\n+        \"e\": 0.123456789e-12,\n+        \"E\": 1.234567890E+34,\n+        \"\":  23456789012E66,\n+        \"zero\": 0,\n+        \"one\": 1,\n+        \"space\": \" \",\n+        \"quote\": \"\\\"\",\n+        \"backslash\": \"\\\\\",\n+        \"controls\": \"\\b\\f\\n\\r\\t\",\n+        \"slash\": \"/ & \\/\",\n+        \"alpha\": \"abcdefghijklmnopqrstuvwyz\",\n+        \"ALPHA\": \"ABCDEFGHIJKLMNOPQRSTUVWYZ\",\n+        \"digit\": \"0123456789\",\n+        \"0123456789\": \"digit\",\n+        \"special\": \"`1~!@#$%^&*()_+-={':[,]}|;.</>?\",\n+        \"hex\": \"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\",\n+        \"true\": true,\n+        \"false\": false,\n+        \"null\": null,\n+        \"array\":[  ],\n+        \"object\":{  },\n+        \"address\": \"50 St. James Street\",\n+        \"url\": \"http://www.JSON.org/\",\n+        \"comment\": \"// /* <!-- --\",\n+        \"# -- --> */\": \" \",\n+        \" s p a c e d \" :[1,2 , 3\n+\n+,\n+\n+4 , 5        ,          6           ,7        ],\"compact\":[1,2,3,4,5,6,7],\n+        \"jsontext\": \"{\\\"object with 1 member\\\":[\\\"array with 1 element\\\"]}\",\n+        \"quotes\": \"&#34; \\u0022 %22 0x22 034 &#x22;\",\n+        \"\\/\\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?\"\n+: \"A key can be any string\"\n+    },\n+    0.5 ,98.6\n+,\n+99.44\n+,\n+\n+1066,\n+1e1,\n+0.1e1,\n+1e-1,\n+1e00,2e+00,2e-00\n+,\"rosebud\"]\n\\ No newline at end of file"
      },
      {
        "sha": "d3c63c7ad845e4cedd0c70d13102b38c51ec197a",
        "filename": "src/univalue/test/pass2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/pass2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/pass2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass2.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[\"Not too deep\"]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "4528d51f1ac615e7e11dbb1321dc99187705f0d8",
        "filename": "src/univalue/test/pass3.json",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/pass3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/pass3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass3.json?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,6 @@\n+{\n+    \"JSON Test Pattern pass3\": {\n+        \"The outermost value\": \"must be an object or array.\",\n+        \"In this test\": \"It is an object.\"\n+    }\n+}"
      },
      {
        "sha": "835556e031708f8e3c9d07a8f31980d6a1228986",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <cassert>\n+#include <string>\n+#include \"univalue.h\"\n+\n+#ifndef JSON_TEST_SRC\n+#error JSON_TEST_SRC must point to test source directory\n+#endif\n+\n+#ifndef ARRAY_SIZE\n+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n+#endif\n+\n+using namespace std;\n+string srcdir(JSON_TEST_SRC);\n+\n+static void runtest(string filename, const string& jdata)\n+{\n+        fprintf(stderr, \"test %s\\n\", filename.c_str());\n+\n+        string prefix = filename.substr(0, 4);\n+\n+        bool wantPass = (prefix == \"pass\");\n+        bool wantFail = (prefix == \"fail\");\n+        assert(wantPass || wantFail);\n+\n+        UniValue val;\n+        bool testResult = val.read(jdata);\n+\n+        if (wantPass) {\n+            assert(testResult == true);\n+        } else {\n+            assert(testResult == false);\n+        }\n+}\n+\n+static void runtest_file(const char *filename_)\n+{\n+        string basename(filename_);\n+        string filename = srcdir + \"/\" + basename;\n+        FILE *f = fopen(filename.c_str(), \"r\");\n+        assert(f != NULL);\n+\n+        string jdata;\n+\n+        char buf[4096];\n+        while (!feof(f)) {\n+                int bread = fread(buf, 1, sizeof(buf), f);\n+                assert(!ferror(f));\n+\n+                string s(buf, bread);\n+                jdata += s;\n+        }\n+\n+        assert(!ferror(f));\n+        fclose(f);\n+\n+        runtest(basename, jdata);\n+}\n+\n+static const char *filenames[] = {\n+        \"fail10.json\",\n+        \"fail11.json\",\n+        \"fail12.json\",\n+        \"fail13.json\",\n+        \"fail14.json\",\n+        \"fail15.json\",\n+        \"fail16.json\",\n+        \"fail17.json\",\n+        //\"fail18.json\",             // investigate\n+        \"fail19.json\",\n+        \"fail1.json\",\n+        \"fail20.json\",\n+        \"fail21.json\",\n+        \"fail22.json\",\n+        \"fail23.json\",\n+        \"fail24.json\",\n+        \"fail25.json\",\n+        \"fail26.json\",\n+        \"fail27.json\",\n+        \"fail28.json\",\n+        \"fail29.json\",\n+        \"fail2.json\",\n+        \"fail30.json\",\n+        \"fail31.json\",\n+        \"fail32.json\",\n+        \"fail33.json\",\n+        \"fail34.json\",\n+        \"fail3.json\",\n+        \"fail4.json\",                // extra comma\n+        \"fail5.json\",\n+        \"fail6.json\",\n+        \"fail7.json\",\n+        \"fail8.json\",\n+        \"fail9.json\",               // extra comma\n+        \"pass1.json\",\n+        \"pass2.json\",\n+        \"pass3.json\",\n+};\n+\n+int main (int argc, char *argv[])\n+{\n+    for (unsigned int fidx = 0; fidx < ARRAY_SIZE(filenames); fidx++) {\n+        runtest_file(filenames[fidx]);\n+    }\n+\n+    return 0;\n+}\n+"
      },
      {
        "sha": "c431fc401311dbac3f99c199206ed8f089b8ff46",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -20,7 +20,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #include <boost/foreach.hpp>\n "
      },
      {
        "sha": "30b854477b04b73984330f42a5e24216d5b9b67a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -22,7 +22,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      }
    ]
  },
  {
    "sha": "bb882d04e8626ba534200a44b58e7ac872a55dd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjg4MmQwNGU4NjI2YmE1MzQyMDBhNDRiNThlN2FjODcyYTU1ZGQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T16:12:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T16:12:36Z"
      },
      "message": "Merge pull request #6732\n\na3874c7 doc: no longer require use of openssl in OpenBSD build guide (Wladimir J. van der Laan)\n5978388 build: remove libressl check (Wladimir J. van der Laan)",
      "tree": {
        "sha": "fbaa2fc66a6966cbd0f474db0405b31fe5cdae52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbaa2fc66a6966cbd0f474db0405b31fe5cdae52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb882d04e8626ba534200a44b58e7ac872a55dd0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDVt0AAoJEHSBCwEjRsmmnS8H/0XR/AggAlBFP4EuSTW3mPGa\nwXLDCjUJfrVv92DdnW/Knp+B3KGxX8d1lVPm3nxxKoJOK7YOm4GcHkFXPSR/vfBp\nQrS5VrGLagkHxVMYpy87MNLgkkRuutJ6Ye9N7GmTbOI0YQJBhmKjVJRbK40NsDqY\nGW6X4DoleOScAFFO9mC6/Iri2Iusb97xLRflCoP/nhP3OhpWj42A15g1CTsDKn+b\nndDLyyKFgJWBL5HounRu8hc74OeKgn8KKVSFhA0Klnl6Q72dHZTOTDdPq1Kng/eg\nxRiUQDLwww3Qb0ubdmkutw89Mfs5G8yyiRnjaxyLaYbM4kZ6h0fgTWUIWKRJcGQ=\n=OARj\n-----END PGP SIGNATURE-----",
        "payload": "tree fbaa2fc66a6966cbd0f474db0405b31fe5cdae52\nparent f297042cae572753e6c25d25caf92091e88b76df\nparent a3874c7c3aeefc2330424f0247129a89c27edcd8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443715927 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443715956 +0200\n\nMerge pull request #6732\n\na3874c7 doc: no longer require use of openssl in OpenBSD build guide (Wladimir J. van der Laan)\n5978388 build: remove libressl check (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb882d04e8626ba534200a44b58e7ac872a55dd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb882d04e8626ba534200a44b58e7ac872a55dd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb882d04e8626ba534200a44b58e7ac872a55dd0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f297042cae572753e6c25d25caf92091e88b76df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f297042cae572753e6c25d25caf92091e88b76df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f297042cae572753e6c25d25caf92091e88b76df"
      },
      {
        "sha": "a3874c7c3aeefc2330424f0247129a89c27edcd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3874c7c3aeefc2330424f0247129a89c27edcd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3874c7c3aeefc2330424f0247129a89c27edcd8"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 6,
      "deletions": 45
    },
    "files": [
      {
        "sha": "0803e74ff69fc8f6bc57dd32720b8115f074d919",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 18,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb882d04e8626ba534200a44b58e7ac872a55dd0/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb882d04e8626ba534200a44b58e7ac872a55dd0/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "patch": "@@ -700,27 +700,12 @@ else\n   fi\n fi\n \n-CFLAGS_TEMP=\"$CFLAGS\"\n+CXXFLAGS_TEMP=\"$CXXFLAGS\"\n LIBS_TEMP=\"$LIBS\"\n-CFLAGS=\"$CFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n+CXXFLAGS=\"$CXXFLAGS $SSL_CFLAGS $CRYPTO_CFLAGS\"\n LIBS=\"$LIBS $SSL_LIBS $CRYPTO_LIBS\"\n AC_CHECK_HEADER([openssl/ec.h],, AC_MSG_ERROR(OpenSSL ec header missing),)\n-\n-AC_MSG_CHECKING(for a supported OpenSSL version)\n-AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-  #include <openssl/rand.h>\n-  ]],\n-  [[RAND_egd(NULL);]])],\n-  [AC_MSG_RESULT(yes)],\n-  [\n-    AC_ARG_WITH([libressl],\n-    [AS_HELP_STRING([--with-libressl],[Build with system LibreSSL (default is no; DANGEROUS; NOT SUPPORTED)])],\n-    [AC_MSG_WARN([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])],\n-    [AC_MSG_ERROR([Detected LibreSSL: This is NOT supported, and may break consensus compatibility!])]\n-    )]\n-)\n-\n-CFLAGS=\"$CFLAGS_TEMP\"\n+CXXFLAGS=\"$CXXFLAGS_TEMP\"\n LIBS=\"$LIBS_TEMP\"\n \n BITCOIN_QT_PATH_PROGS([PROTOC], [protoc],$protoc_bin_path)"
      },
      {
        "sha": "a26b52465e94913fbbd341aee4b6d38dc3a049c4",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 3,
        "deletions": 27,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb882d04e8626ba534200a44b58e7ac872a55dd0/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb882d04e8626ba534200a44b58e7ac872a55dd0/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "patch": "@@ -70,24 +70,6 @@ config_opts=\"runtime-link=shared threadapi=pthread threading=multi link=static v\n ./b2 -d0 -j4 ${config_opts} --prefix=${BOOST_PREFIX} install\n ```\n \n-### OpenSSL\n-\n-OpenBSD uses a replacement of OpenSSL: LibreSSL. This can cause compatibility issues, hence `./configure` will bark if you try to compile with this library:\n-\n-    Detected LibreSSL: This is NOT supported, and may break consensus compatibility!\n-\n-To install a 'real' OpenSSL use:\n-\n-    pkg_add openssl\n-   \n-Any program linked against this library can only be used after setting the dynamic library path:\n-    \n-    export LD_LIBRARY_PATH=\"/usr/local/lib/eopenssl\"\n-\n-(otherwise there will be an error about not being able to find `libcrypto.so.1.0`)\n-\n-Alternatively, pass `--with-libressl` to `./configure`, however as the warning says, this is NOT supported, and may cause problems syncing the chain, or the node to fork off the network in unexpected circumstances.\n-\n ### Building BerkeleyDB\n \n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n@@ -124,28 +106,24 @@ export AUTOCONF_VERSION=2.69 # replace this with the autoconf version that you i\n export AUTOMAKE_VERSION=1.15 # replace this with the automake version that you installed\n ./autogen.sh\n ```\n+Make sure `BDB_PREFIX` and `BOOST_PREFIX` are set to the appropriate paths from the above steps.\n \n To configure with wallet:\n ```bash\n ./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n     CC=egcc CXX=eg++ CPP=ecpp \\\n-    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n-    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\" \\\n     LDFLAGS=\"-L${BDB_PREFIX}/lib/\" CPPFLAGS=\"-I${BDB_PREFIX}/include/\"\n ```\n \n To configure without wallet:\n ```bash\n ./configure --disable-wallet --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp \\\n-    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n-    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\"\n+    CC=egcc CXX=eg++ CPP=ecpp\n ```\n \n Build and run the tests:\n ```bash\n gmake\n-export LD_LIBRARY_PATH=\"/usr/local/lib/eopenssl\"\n gmake check\n ```\n \n@@ -164,9 +142,7 @@ pkg_add llvm boost\n ```\n \n ```bash\n-./configure --disable-wallet --with-gui=no CC=clang CXX=clang++ \\\n-    SSL_CFLAGS=\"-I/usr/local/include/eopenssl\" SSL_LIBS=\"-L/usr/local/lib/eopenssl -lssl\" \\\n-    CRYPTO_CFLAGS=\"-I/usr/local/include/eopenssl\" CRYPTO_LIBS=\"-L/usr/local/lib/eopenssl -lcrypto\"\n+./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n gmake\n ```\n "
      }
    ]
  },
  {
    "sha": "6a07eb676a020b0035173facb25f92f1ff6380f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTA3ZWI2NzZhMDIwYjAwMzUxNzNmYWNiMjVmOTJmMWZmNjM4MGY3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-10-13T14:14:58Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-01T16:27:22Z"
      },
      "message": "Make TX_SCRIPTHASH clear vSolutionsRet first\n\nPreviously unlike other transaction types the TX_SCRIPTHASH would not\nclear vSolutionsRet, which means that unlike other transaction types if\nit was called twice in a row you would get the result of the previous\ninvocation as well.",
      "tree": {
        "sha": "7c78eaa878e8a206b9412eb089224a7a85a590df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c78eaa878e8a206b9412eb089224a7a85a590df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a07eb676a020b0035173facb25f92f1ff6380f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a07eb676a020b0035173facb25f92f1ff6380f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a07eb676a020b0035173facb25f92f1ff6380f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a07eb676a020b0035173facb25f92f1ff6380f7/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb882d04e8626ba534200a44b58e7ac872a55dd0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "59496d795d1c337e57966e964e682676e869e6a2",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a07eb676a020b0035173facb25f92f1ff6380f7/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a07eb676a020b0035173facb25f92f1ff6380f7/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=6a07eb676a020b0035173facb25f92f1ff6380f7",
        "patch": "@@ -58,6 +58,8 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN));\n     }\n \n+    vSolutionsRet.clear();\n+\n     // Shortcut for pay-to-script-hash, which are more constrained than the other types:\n     // it is always OP_HASH160 20 [20 byte hash] OP_EQUAL\n     if (scriptPubKey.IsPayToScriptHash())"
      }
    ]
  },
  {
    "sha": "5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDg3MDljM2I3ZmNjNjZmYmY1MzdlYzBiNmMxYTk4ZDY5MjE0ZTI1",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-11-04T17:38:56Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-01T16:28:11Z"
      },
      "message": "Add IsPushOnly(const_iterator pc)\n\nAllows IsPushOnly() to be applied to just part of the script for\nOP_RETURN outputs.",
      "tree": {
        "sha": "ee5385b59d430542d8f8195a6f33988e322bf107",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee5385b59d430542d8f8195a6f33988e322bf107"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a07eb676a020b0035173facb25f92f1ff6380f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a07eb676a020b0035173facb25f92f1ff6380f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a07eb676a020b0035173facb25f92f1ff6380f7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0a8ec9fa7bf7d569ed68bb447bbd422265cee578",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
        "patch": "@@ -210,9 +210,8 @@ bool CScript::IsPayToScriptHash() const\n             this->at(22) == OP_EQUAL);\n }\n \n-bool CScript::IsPushOnly() const\n+bool CScript::IsPushOnly(const_iterator pc) const\n {\n-    const_iterator pc = begin();\n     while (pc < end())\n     {\n         opcodetype opcode;\n@@ -227,3 +226,8 @@ bool CScript::IsPushOnly() const\n     }\n     return true;\n }\n+\n+bool CScript::IsPushOnly() const\n+{\n+    return this->IsPushOnly(begin());\n+}"
      },
      {
        "sha": "3923a559b160119950d30335b1e211212021364d",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
        "patch": "@@ -589,6 +589,7 @@ class CScript : public std::vector<unsigned char>\n     bool IsPayToScriptHash() const;\n \n     /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n+    bool IsPushOnly(const_iterator pc) const;\n     bool IsPushOnly() const;\n \n     /**"
      }
    ]
  },
  {
    "sha": "da894ab5da222ad317039eb008ec6443fb9113d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTg5NGFiNWRhMjIyYWQzMTcwMzllYjAwOGVjNjQ0M2ZiOTExM2Q5",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-10-13T14:18:05Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-01T16:28:13Z"
      },
      "message": "Accept any sequence of PUSHDATAs in OP_RETURN outputs\n\nPreviously only one PUSHDATA was allowed, needlessly limiting\napplications such as matching OP_RETURN contents with bloom filters that\noperate on a per-PUSHDATA level. Now any combination that passes\nIsPushOnly() is allowed, so long as the total size of the scriptPubKey\nis less than 42 bytes. (unchanged modulo non-minimal PUSHDATA encodings)\n\nAlso, this fixes the odd bug where previously the PUSHDATA could be\nreplaced by any single opcode, even sigops consuming opcodes such as\nCHECKMULTISIG. (20 sigops!)",
      "tree": {
        "sha": "391ecd1cf9ea432a1558ae2e70d9a1fbb91d5dd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/391ecd1cf9ea432a1558ae2e70d9a1fbb91d5dd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da894ab5da222ad317039eb008ec6443fb9113d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da894ab5da222ad317039eb008ec6443fb9113d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da894ab5da222ad317039eb008ec6443fb9113d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da894ab5da222ad317039eb008ec6443fb9113d9/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d8709c3b7fcc66fbf537ec0b6c1a98d69214e25"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 34,
      "deletions": 17
    },
    "files": [
      {
        "sha": "4c96fbf5a5c399296a1fa355ad86a4770fcef84f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da894ab5da222ad317039eb008ec6443fb9113d9/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da894ab5da222ad317039eb008ec6443fb9113d9/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=da894ab5da222ad317039eb008ec6443fb9113d9",
        "patch": "@@ -49,7 +49,9 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n             return false;\n         if (m < 1 || m > n)\n             return false;\n-    }\n+    } else if (whichType == TX_NULL_DATA &&\n+               (!GetBoolArg(\"-datacarrier\", true) || scriptPubKey.size() > nMaxDatacarrierBytes))\n+          return false;\n \n     return whichType != TX_NONSTANDARD;\n }"
      },
      {
        "sha": "9a0c067a335d0fa6b3ed7ae117ac9880bd558871",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=da894ab5da222ad317039eb008ec6443fb9113d9",
        "patch": "@@ -144,7 +144,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n \n     // Note:\n-    //  The template matching params OP_SMALLDATA/etc are defined in opcodetype enum\n+    //  The template matching params OP_SMALLINTEGER/etc are defined in opcodetype enum\n     //  as kind of implementation hack, they are *NOT* real opcodes.  If found in real\n     //  Script, just let the default: case deal with them.\n "
      },
      {
        "sha": "cdc9a71bb24a075a4025e3cb359e828244dd4f88",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=da894ab5da222ad317039eb008ec6443fb9113d9",
        "patch": "@@ -167,7 +167,6 @@ enum opcodetype\n \n \n     // template matching params\n-    OP_SMALLDATA = 0xf9,\n     OP_SMALLINTEGER = 0xfa,\n     OP_PUBKEYS = 0xfb,\n     OP_PUBKEYHASH = 0xfd,"
      },
      {
        "sha": "bfef8afa17bbc9d26007a74a77a764dcec3026c5",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=da894ab5da222ad317039eb008ec6443fb9113d9",
        "patch": "@@ -51,11 +51,6 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n         // Sender provides N pubkeys, receivers provides M signatures\n         mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n-\n-        // Empty, provably prunable, data-carrying output\n-        if (GetBoolArg(\"-datacarrier\", true))\n-            mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA));\n-        mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN));\n     }\n \n     vSolutionsRet.clear();\n@@ -70,6 +65,16 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         return true;\n     }\n \n+    // Provably prunable, data-carrying output\n+    //\n+    // So long as script passes the IsUnspendable() test and all but the first\n+    // byte passes the IsPushOnly() test we don't care what exactly is in the\n+    // script.\n+    if (scriptPubKey.size() >= 1 && scriptPubKey[0] == OP_RETURN && scriptPubKey.IsPushOnly(scriptPubKey.begin()+1)) {\n+        typeRet = TX_NULL_DATA;\n+        return true;\n+    }\n+\n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n     BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n@@ -142,12 +147,6 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n                 else\n                     break;\n             }\n-            else if (opcode2 == OP_SMALLDATA)\n-            {\n-                // small pushdata, <= nMaxDatacarrierBytes\n-                if (vch1.size() > nMaxDatacarrierBytes)\n-                    break;\n-            }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n                 // Others must match exactly"
      },
      {
        "sha": "ae1bbecca0bc58ef1f3dc5e016e94f04dd0131d4",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da894ab5da222ad317039eb008ec6443fb9113d9/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=da894ab5da222ad317039eb008ec6443fb9113d9",
        "patch": "@@ -25,7 +25,7 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 80;      //! bytes\n+static const unsigned int MAX_OP_RETURN_RELAY = 83; //! bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "9847f6512ea6fbfd879077ec1bd9962fecd66988",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da894ab5da222ad317039eb008ec6443fb9113d9/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da894ab5da222ad317039eb008ec6443fb9113d9/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=da894ab5da222ad317039eb008ec6443fb9113d9",
        "patch": "@@ -351,12 +351,29 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n-    // 80-byte TX_NULL_DATA (standard)\n+    // MAX_OP_RETURN_RELAY-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n-    // 81-byte TX_NULL_DATA (non-standard)\n+    // MAX_OP_RETURN_RELAY+1-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n+    BOOST_CHECK(!IsStandardTx(t, reason));\n+\n+    // Data payload can be encoded in any way...\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+    // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+\n+    // ...so long as it only contains PUSHDATA's\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RETURN;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n     // TX_NULL_DATA w/o PUSHDATA"
      }
    ]
  },
  {
    "sha": "bb24835aed822ff1842bbf0920dba592eb48dfd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjI0ODM1YWVkODIyZmYxODQyYmJmMDkyMGRiYTU5MmViNDhkZmQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T16:38:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T16:38:54Z"
      },
      "message": "build: disable -Wself-assign\n\nPrevent these warnings in clang 3.6:\n\n    ./serialize.h:96:9: warning: explicitly assigning value of variable of type 'uint64_t' (aka 'unsigned long') to itself [-Wself-assign]\n        obj = (obj);\n        ~~~ ^  ~~~",
      "tree": {
        "sha": "19c0085bbe0a8dd786c8f86418fea0506c49a4c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19c0085bbe0a8dd786c8f86418fea0506c49a4c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb24835aed822ff1842bbf0920dba592eb48dfd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb24835aed822ff1842bbf0920dba592eb48dfd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb24835aed822ff1842bbf0920dba592eb48dfd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb24835aed822ff1842bbf0920dba592eb48dfd5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb882d04e8626ba534200a44b58e7ac872a55dd0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "57d89d9d5de7cdfa01d1fe5ee42bdd478cca8979",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb24835aed822ff1842bbf0920dba592eb48dfd5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb24835aed822ff1842bbf0920dba592eb48dfd5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bb24835aed822ff1842bbf0920dba592eb48dfd5",
        "patch": "@@ -167,7 +167,7 @@ fi\n ##       compatibility with the legacy buildsystem.\n ##\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter\"\n+  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wno-self-assign\"\n fi\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n "
      }
    ]
  },
  {
    "sha": "5467820be5404fa736436a1202079e764a4308b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDY3ODIwYmU1NDA0ZmE3MzY0MzZhMTIwMjA3OWU3NjRhNDMwOGI0",
    "commit": {
      "author": {
        "name": "ptschip",
        "email": "peter.tschipper@gmail.com",
        "date": "2015-08-26T10:05:36Z"
      },
      "committer": {
        "name": "ptschip",
        "email": "peter.tschipper@gmail.com",
        "date": "2015-10-01T18:28:11Z"
      },
      "message": "Migrated rpc-tests.sh to all python rpc-tests.py\n\n1) created rpc-tests.py\n2) deleted rpc-tests.sh\n3) travis.yml points to rpc-tests.py\n4) Modified Makefile.am\n5) Updated README.md\n6) Added tests_config.py and deleted tests-config.sh\n7) Modified configure.ac with script to set correct path in tests_config.py",
      "tree": {
        "sha": "64474b1acd9e650aabf9fe9298600dd36ae263f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64474b1acd9e650aabf9fe9298600dd36ae263f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5467820be5404fa736436a1202079e764a4308b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5467820be5404fa736436a1202079e764a4308b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5467820be5404fa736436a1202079e764a4308b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5467820be5404fa736436a1202079e764a4308b4/comments",
    "author": {
      "login": "ptschip",
      "id": 12862928,
      "node_id": "MDQ6VXNlcjEyODYyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12862928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptschip",
      "html_url": "https://github.com/ptschip",
      "followers_url": "https://api.github.com/users/ptschip/followers",
      "following_url": "https://api.github.com/users/ptschip/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptschip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptschip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptschip/subscriptions",
      "organizations_url": "https://api.github.com/users/ptschip/orgs",
      "repos_url": "https://api.github.com/users/ptschip/repos",
      "events_url": "https://api.github.com/users/ptschip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptschip/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ptschip",
      "id": 12862928,
      "node_id": "MDQ6VXNlcjEyODYyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12862928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptschip",
      "html_url": "https://github.com/ptschip",
      "followers_url": "https://api.github.com/users/ptschip/followers",
      "following_url": "https://api.github.com/users/ptschip/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptschip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptschip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptschip/subscriptions",
      "organizations_url": "https://api.github.com/users/ptschip/orgs",
      "repos_url": "https://api.github.com/users/ptschip/repos",
      "events_url": "https://api.github.com/users/ptschip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptschip/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f297042cae572753e6c25d25caf92091e88b76df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f297042cae572753e6c25d25caf92091e88b76df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f297042cae572753e6c25d25caf92091e88b76df"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 139,
      "deletions": 98
    },
    "files": [
      {
        "sha": "8e9684826f69081ff8b3bdf4b37c8182a194a267",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5467820be5404fa736436a1202079e764a4308b4/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5467820be5404fa736436a1202079e764a4308b4/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=5467820be5404fa736436a1202079e764a4308b4",
        "patch": "@@ -69,6 +69,6 @@ script:\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.sh; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      },
      {
        "sha": "8a7140398f8d2e69e3c4e6b5402b24f57555ca64",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5467820be5404fa736436a1202079e764a4308b4/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5467820be5404fa736436a1202079e764a4308b4/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=5467820be5404fa736436a1202079e764a4308b4",
        "patch": "@@ -204,7 +204,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/pull-tester/tests_config.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      },
      {
        "sha": "5a0b4ae9cb3b26f98f8c345d86e69313f5c93ce9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5467820be5404fa736436a1202079e764a4308b4/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5467820be5404fa736436a1202079e764a4308b4/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5467820be5404fa736436a1202079e764a4308b4",
        "patch": "@@ -914,7 +914,8 @@ AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n-AC_CONFIG_FILES([qa/pull-tester/tests-config.sh],[chmod +x qa/pull-tester/tests-config.sh])\n+AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+chmod +x qa/pull-tester/rpc-tests.py\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen.\n@@ -954,3 +955,12 @@ case $host in\n      chmod 755 libtool\n    ;;\n esac\n+\n+dnl Replace the BUILDDIR path with the correct Windows path if compiling on Native Windows\n+case ${OS} in\n+   *Windows*)\n+     sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  qa/pull-tester/tests_config.py > qa/pull-tester/tests_config-2.py\n+     mv qa/pull-tester/tests_config-2.py qa/pull-tester/tests_config.py\n+     chmod +x qa/pull-tester/tests_config.py\n+   ;;\n+esac"
      },
      {
        "sha": "68c1c0471e332d48042e1c45c3a7724d308316b9",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5467820be5404fa736436a1202079e764a4308b4/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5467820be5404fa736436a1202079e764a4308b4/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=5467820be5404fa736436a1202079e764a4308b4",
        "patch": "@@ -0,0 +1,118 @@\n+#!/usr/bin/env python2\n+\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Run Regression Test Suite\n+#\n+\n+import os\n+import sys\n+import subprocess\n+import re\n+from tests_config import *\n+from sets import Set\n+\n+#If imported values are not defined then set to zero (or disabled)\n+if not vars().has_key('ENABLE_WALLET'):\n+    ENABLE_WALLET=0\n+if not vars().has_key('ENABLE_BITCOIND'):\n+    ENABLE_BITCOIND=0\n+if not vars().has_key('ENABLE_UTILS'):\n+    ENABLE_UTILS=0\n+if not vars().has_key('ENABLE_ZMQ'):\n+    ENABLE_ZMQ=0\n+\n+#Create a set to store arguments and create the passOn string\n+opts = Set()\n+passOn = \"\"\n+p = re.compile(\"^--\")\n+for i in range(1,len(sys.argv)):\n+    if (p.match(sys.argv[i]) or sys.argv[i] == \"-h\"):\n+        passOn += \" \" + sys.argv[i]\n+    else:\n+        opts.add(sys.argv[i])\n+\n+#Set env vars\n+buildDir = BUILDDIR\n+os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n+os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n+ \n+#Disable Windows tests by default\n+if EXEEXT == \".exe\" and \"-win\" not in opts:\n+    print \"Win tests currently disabled.  Use -win option to enable\"\n+    sys.exit(0)\n+\n+#Tests\n+testScripts = [\n+    'wallet.py',\n+    'listtransactions.py',\n+    'mempool_resurrect_test.py',\n+    'txn_doublespend.py --mineblock',\n+    'txn_clone.py',\n+    'getchaintips.py',\n+    'rawtransactions.py',\n+    'rest.py',\n+    'mempool_spendcoinbase.py',\n+    'mempool_coinbase_spends.py',\n+    'httpbasics.py',\n+    'zapwallettxes.py',\n+    'proxy_test.py',\n+    'merkle_blocks.py',\n+    'fundrawtransaction.py',\n+    'signrawtransactions.py',\n+    'walletbackup.py',\n+    'nodehandling.py',\n+    'reindex.py',\n+    'decodescript.py',\n+    'p2p-fullblocktest.py',\n+]\n+testScriptsExt = [\n+    'bipdersig-p2p.py',\n+    'bipdersig.py',\n+    'getblocktemplate_longpoll.py',\n+    'getblocktemplate_proposals.py',\n+    'txn_doublespend.py',\n+    'txn_clone.py --mineblock',\n+    'pruning.py',\n+    'forknotify.py',\n+    'invalidateblock.py',\n+    'keypool.py',\n+    'receivedby.py',\n+    'rpcbind_test.py',\n+#   'script_test.py',\n+    'smartfees.py',\n+    'maxblocksinflight.py',\n+    'invalidblockrequest.py',\n+#    'forknotify.py',\n+    'p2p-acceptblock.py',\n+    'mempool_packages.py',\n+]\n+\n+#Enable ZMQ tests\n+if ENABLE_ZMQ == 1:\n+    testScripts.append('zmq_test.py')\n+\n+if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+    rpcTestDir = buildDir + '/qa/rpc-tests/'\n+    #Run Tests\n+    for i in range(len(testScripts)):\n+       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts \n+           or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n+            print  \"Running testscript \" + testScripts[i] + \"...\" \n+            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+\t    #exit if help is called so we print just one set of instructions\n+            p = re.compile(\" -h| --help\")\n+            if p.match(passOn):\n+                sys.exit(0)\n+\n+    #Run Extended Tests\n+    for i in range(len(testScriptsExt)):\n+        if ('-extended' in opts or testScriptsExt[i] in opts \n+           or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n+            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\" \n+            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+else:\n+    print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "7e1d2e8e503fd2f483b3629c0797146fcc826922",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 89,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f297042cae572753e6c25d25caf92091e88b76df/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f297042cae572753e6c25d25caf92091e88b76df/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=f297042cae572753e6c25d25caf92091e88b76df",
        "patch": "@@ -1,89 +0,0 @@\n-#!/bin/bash\n-set -e\n-\n-CURDIR=$(cd $(dirname \"$0\"); pwd)\n-# Get BUILDDIR and REAL_BITCOIND\n-. \"${CURDIR}/tests-config.sh\"\n-\n-export BITCOIND=${REAL_BITCOIND}\n-export BITCOINCLI=${REAL_BITCOINCLI}\n-\n-if [ \"x${EXEEXT}\" = \"x.exe\" ]; then\n-  echo \"Win tests currently disabled\"\n-  exit 0\n-fi\n-\n-#Run the tests\n-\n-testScripts=(\n-    'wallet.py'\n-    'listtransactions.py'\n-    'mempool_resurrect_test.py'\n-    'txn_doublespend.py --mineblock'\n-    'txn_clone.py'\n-    'getchaintips.py'\n-    'rawtransactions.py'\n-    'rest.py'\n-    'mempool_spendcoinbase.py'\n-    'mempool_coinbase_spends.py'\n-    'httpbasics.py'\n-    'zapwallettxes.py'\n-    'proxy_test.py'\n-    'merkle_blocks.py'\n-    'fundrawtransaction.py'\n-    'signrawtransactions.py'\n-    'walletbackup.py'\n-    'nodehandling.py'\n-    'reindex.py'\n-    'decodescript.py'\n-    'p2p-fullblocktest.py'\n-);\n-testScriptsExt=(\n-    'bipdersig-p2p.py'\n-    'bipdersig.py'\n-    'getblocktemplate_longpoll.py'\n-    'getblocktemplate_proposals.py'\n-    'txn_doublespend.py'\n-    'txn_clone.py --mineblock'\n-    'pruning.py'\n-    'forknotify.py'\n-    'invalidateblock.py'\n-    'keypool.py'\n-    'receivedby.py'\n-    'rpcbind_test.py'\n-#   'script_test.py'\n-    'smartfees.py'\n-    'maxblocksinflight.py'\n-    'invalidblockrequest.py'\n-#    'forknotify.py'\n-    'p2p-acceptblock.py'\n-    'mempool_packages.py'\n-);\n-\n-if [ \"x$ENABLE_ZMQ\" = \"x1\" ]; then\n-  testScripts+=('zmq_test.py')\n-fi\n-\n-extArg=\"-extended\"\n-passOn=${@#$extArg}\n-\n-if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n-    for (( i = 0; i < ${#testScripts[@]}; i++ ))\n-    do\n-        if [ -z \"$1\" ] || [ \"${1:0:1}\" == \"-\" ] || [ \"$1\" == \"${testScripts[$i]}\" ] || [ \"$1.py\" == \"${testScripts[$i]}\" ]\n-        then\n-            echo -e \"Running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n-            ${BUILDDIR}/qa/rpc-tests/${testScripts[$i]} --srcdir \"${BUILDDIR}/src\" ${passOn}\n-        fi\n-    done\n-    for (( i = 0; i < ${#testScriptsExt[@]}; i++ ))\n-    do\n-        if [ \"$1\" == $extArg ] || [ \"$1\" == \"${testScriptsExt[$i]}\" ] || [ \"$1.py\" == \"${testScriptsExt[$i]}\" ]\n-        then\n-            echo -e \"Running \\033[1m2nd level\\033[0m testscript \\033[1m${testScriptsExt[$i]}...\\033[0m\"\n-            ${BUILDDIR}/qa/rpc-tests/${testScriptsExt[$i]} --srcdir \"${BUILDDIR}/src\" ${passOn}\n-        fi\n-    done\n-else\n-  echo \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n-fi"
      },
      {
        "sha": "937b4231f12f82841c52d7f34133c2daf5575668",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "renamed",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5467820be5404fa736436a1202079e764a4308b4/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5467820be5404fa736436a1202079e764a4308b4/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=5467820be5404fa736436a1202079e764a4308b4",
        "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env python2\n # Copyright (c) 2013-2014 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -12,6 +12,4 @@ EXEEXT=\"@EXEEXT@\"\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1\n \n-REAL_BITCOIND=\"$BUILDDIR/src/bitcoind${EXEEXT}\"\n-REAL_BITCOINCLI=\"$BUILDDIR/src/bitcoin-cli${EXEEXT}\"\n ",
        "previous_filename": "qa/pull-tester/tests-config.sh.in"
      },
      {
        "sha": "3391ee03aee23f01c1f0017cdfc5300ca2088bfa",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5467820be5404fa736436a1202079e764a4308b4/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5467820be5404fa736436a1202079e764a4308b4/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=5467820be5404fa736436a1202079e764a4308b4",
        "patch": "@@ -37,9 +37,13 @@ Helper functions for creating blocks and transactions.\n Notes\n =====\n \n-You can run a single test by calling `qa/pull-tester/rpc-tests.sh <testname>`.\n+You can run any single test by calling qa/pull-tester/rpc-tests.py <testname>\n \n-Run all possible tests with `qa/pull-tester/rpc-tests.sh -extended`.\n+Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n+\n+Run the regression test suite with `qa/pull-tester/rpc-tests.py'\n+\n+Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n \n Possible options:\n \n@@ -53,7 +57,7 @@ Possible options:\n   --tracerpc       Print out all RPC calls as they are made\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.sh wallet`). \n+If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`). \n \n A 200-block -regtest blockchain and wallets for four nodes\n is created the first time a regression test is run and"
      }
    ]
  },
  {
    "sha": "cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDc4YzJhNDIxYWU1YWExNzczYzhmYjg0ZGFkYzJjNjFhMDFlNWU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T17:53:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T19:28:45Z"
      },
      "message": "Merge pull request #6424\n\nda894ab Accept any sequence of PUSHDATAs in OP_RETURN outputs (Peter Todd)\n5d8709c Add IsPushOnly(const_iterator pc) (Peter Todd)\n6a07eb6 Make TX_SCRIPTHASH clear vSolutionsRet first (Peter Todd)",
      "tree": {
        "sha": "391ecd1cf9ea432a1558ae2e70d9a1fbb91d5dd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/391ecd1cf9ea432a1558ae2e70d9a1fbb91d5dd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDYltAAoJEHSBCwEjRsmmih0IALcgAE9/ukUBIbaxrgQmTQ2v\n5S96gCoOgYP86VKCbLBr8YTUMj2CrJcUOw9rYe3EvIJMYPXh2F1dasI2BaaDG3JY\nwhO6n8sUz+83QdniJCAgjEwswsespqzNygxtvMPxwltGxh8ZYSydSDDx56IHO/nn\niWPACWrBuAY+ve3nEVziLYRWvI5iruPoh3ky0gTbv8xKF8fTXu8jYAb4nrmoIoMd\n2ZYXiMEgQcs8SY21v3BdmotlKBxG2N7zB9i2DX3SAtkhsuU0Az9VmGCG6idWFuH0\nREtloduibpEHSfVTgMrLe3eJrGMQPyLfQJd0yjnY55193JDRBgkANR7iETh8RHQ=\n=p4ka\n-----END PGP SIGNATURE-----",
        "payload": "tree 391ecd1cf9ea432a1558ae2e70d9a1fbb91d5dd3\nparent bb882d04e8626ba534200a44b58e7ac872a55dd0\nparent da894ab5da222ad317039eb008ec6443fb9113d9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443722004 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443727725 +0200\n\nMerge pull request #6424\n\nda894ab Accept any sequence of PUSHDATAs in OP_RETURN outputs (Peter Todd)\n5d8709c Add IsPushOnly(const_iterator pc) (Peter Todd)\n6a07eb6 Make TX_SCRIPTHASH clear vSolutionsRet first (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb882d04e8626ba534200a44b58e7ac872a55dd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb882d04e8626ba534200a44b58e7ac872a55dd0"
      },
      {
        "sha": "da894ab5da222ad317039eb008ec6443fb9113d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da894ab5da222ad317039eb008ec6443fb9113d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da894ab5da222ad317039eb008ec6443fb9113d9"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 43,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4c96fbf5a5c399296a1fa355ad86a4770fcef84f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "patch": "@@ -49,7 +49,9 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType)\n             return false;\n         if (m < 1 || m > n)\n             return false;\n-    }\n+    } else if (whichType == TX_NULL_DATA &&\n+               (!GetBoolArg(\"-datacarrier\", true) || scriptPubKey.size() > nMaxDatacarrierBytes))\n+          return false;\n \n     return whichType != TX_NONSTANDARD;\n }"
      },
      {
        "sha": "9a0c067a335d0fa6b3ed7ae117ac9880bd558871",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "patch": "@@ -144,7 +144,7 @@ const char* GetOpName(opcodetype opcode)\n     case OP_INVALIDOPCODE          : return \"OP_INVALIDOPCODE\";\n \n     // Note:\n-    //  The template matching params OP_SMALLDATA/etc are defined in opcodetype enum\n+    //  The template matching params OP_SMALLINTEGER/etc are defined in opcodetype enum\n     //  as kind of implementation hack, they are *NOT* real opcodes.  If found in real\n     //  Script, just let the default: case deal with them.\n \n@@ -210,9 +210,8 @@ bool CScript::IsPayToScriptHash() const\n             this->at(22) == OP_EQUAL);\n }\n \n-bool CScript::IsPushOnly() const\n+bool CScript::IsPushOnly(const_iterator pc) const\n {\n-    const_iterator pc = begin();\n     while (pc < end())\n     {\n         opcodetype opcode;\n@@ -227,3 +226,8 @@ bool CScript::IsPushOnly() const\n     }\n     return true;\n }\n+\n+bool CScript::IsPushOnly() const\n+{\n+    return this->IsPushOnly(begin());\n+}"
      },
      {
        "sha": "cdc9a71bb24a075a4025e3cb359e828244dd4f88",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "patch": "@@ -167,7 +167,6 @@ enum opcodetype\n \n \n     // template matching params\n-    OP_SMALLDATA = 0xf9,\n     OP_SMALLINTEGER = 0xfa,\n     OP_PUBKEYS = 0xfb,\n     OP_PUBKEYHASH = 0xfd,\n@@ -589,6 +588,7 @@ class CScript : public std::vector<unsigned char>\n     bool IsPayToScriptHash() const;\n \n     /** Called by IsStandardTx and P2SH/BIP62 VerifyScript (which makes it consensus-critical). */\n+    bool IsPushOnly(const_iterator pc) const;\n     bool IsPushOnly() const;\n \n     /**"
      },
      {
        "sha": "bfef8afa17bbc9d26007a74a77a764dcec3026c5",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "patch": "@@ -51,13 +51,10 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n \n         // Sender provides N pubkeys, receivers provides M signatures\n         mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG));\n-\n-        // Empty, provably prunable, data-carrying output\n-        if (GetBoolArg(\"-datacarrier\", true))\n-            mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA));\n-        mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN));\n     }\n \n+    vSolutionsRet.clear();\n+\n     // Shortcut for pay-to-script-hash, which are more constrained than the other types:\n     // it is always OP_HASH160 20 [20 byte hash] OP_EQUAL\n     if (scriptPubKey.IsPayToScriptHash())\n@@ -68,6 +65,16 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n         return true;\n     }\n \n+    // Provably prunable, data-carrying output\n+    //\n+    // So long as script passes the IsUnspendable() test and all but the first\n+    // byte passes the IsPushOnly() test we don't care what exactly is in the\n+    // script.\n+    if (scriptPubKey.size() >= 1 && scriptPubKey[0] == OP_RETURN && scriptPubKey.IsPushOnly(scriptPubKey.begin()+1)) {\n+        typeRet = TX_NULL_DATA;\n+        return true;\n+    }\n+\n     // Scan templates\n     const CScript& script1 = scriptPubKey;\n     BOOST_FOREACH(const PAIRTYPE(txnouttype, CScript)& tplate, mTemplates)\n@@ -140,12 +147,6 @@ bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi\n                 else\n                     break;\n             }\n-            else if (opcode2 == OP_SMALLDATA)\n-            {\n-                // small pushdata, <= nMaxDatacarrierBytes\n-                if (vch1.size() > nMaxDatacarrierBytes)\n-                    break;\n-            }\n             else if (opcode1 != opcode2 || vch1 != vch2)\n             {\n                 // Others must match exactly"
      },
      {
        "sha": "ae1bbecca0bc58ef1f3dc5e016e94f04dd0131d4",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "patch": "@@ -25,7 +25,7 @@ class CScriptID : public uint160\n     CScriptID(const uint160& in) : uint160(in) {}\n };\n \n-static const unsigned int MAX_OP_RETURN_RELAY = 80;      //! bytes\n+static const unsigned int MAX_OP_RETURN_RELAY = 83; //! bytes (+1 for OP_RETURN, +2 for the pushdata opcodes)\n extern unsigned nMaxDatacarrierBytes;\n \n /**"
      },
      {
        "sha": "9847f6512ea6fbfd879077ec1bd9962fecd66988",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "patch": "@@ -351,12 +351,29 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n-    // 80-byte TX_NULL_DATA (standard)\n+    // MAX_OP_RETURN_RELAY-byte TX_NULL_DATA (standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38\");\n+    BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY, t.vout[0].scriptPubKey.size());\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n-    // 81-byte TX_NULL_DATA (non-standard)\n+    // MAX_OP_RETURN_RELAY+1-byte TX_NULL_DATA (non-standard)\n     t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3800\");\n+    BOOST_CHECK_EQUAL(MAX_OP_RETURN_RELAY + 1, t.vout[0].scriptPubKey.size());\n+    BOOST_CHECK(!IsStandardTx(t, reason));\n+\n+    // Data payload can be encoded in any way...\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"\");\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex(\"00\") << ParseHex(\"01\");\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+    // OP_RESERVED *is* considered to be a PUSHDATA type opcode by IsPushOnly()!\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RESERVED << -1 << 0 << ParseHex(\"01\") << 2 << 3 << 4 << 5 << 6 << 7 << 8 << 9 << 10 << 11 << 12 << 13 << 14 << 15 << 16;\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << 0 << ParseHex(\"01\") << 2 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n+    BOOST_CHECK(IsStandardTx(t, reason));\n+\n+    // ...so long as it only contains PUSHDATA's\n+    t.vout[0].scriptPubKey = CScript() << OP_RETURN << OP_RETURN;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n     // TX_NULL_DATA w/o PUSHDATA"
      }
    ]
  },
  {
    "sha": "19c71864258f55b07dd290d8740715c4707222f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWM3MTg2NDI1OGY1NWIwN2RkMjkwZDg3NDA3MTVjNDcwNzIyMmYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T20:47:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T20:47:05Z"
      },
      "message": "Merge pull request #6739\n\n96106f0 [Trivial] start the help texts with lowercase (paveljanik)",
      "tree": {
        "sha": "909c5d2bfccfc8fb9c6fe9d6c3308e5eeb9db44e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/909c5d2bfccfc8fb9c6fe9d6c3308e5eeb9db44e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19c71864258f55b07dd290d8740715c4707222f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDZvJAAoJEHSBCwEjRsmmaBQH/1sw4wd/ikiXK4T6JvYTfuvN\n0T6F23gRcJfYKlVUu/HHU5ZnL53kheLRIicKdjwUzVNGTJnlAxHmR5Xh8DkI5Ksy\nKEVMROG+zHmciEjYagJXjyBK6D6ITkcJgGcCSTOr29XTUeHaSM9NuHjXCDZCc1Ss\nA0IwapJXeIYbxYbP0nXgwYpTOTuV6U7crZm7+AGt5gP6kXudPcsU9cDSnOA+Shiv\nnKkdjNgQ1Dh41Qvk4DTUVrDnfgsMSHRM86HpA4h+v3HgrwwRAXyTIdsTied1aywd\n/vsikv3hBwZ3c8LOzPbjI3nsSrtMRtX7bDs/r7cna7Z+u8d7B+zq6FP8+SINBIs=\n=xMPH\n-----END PGP SIGNATURE-----",
        "payload": "tree 909c5d2bfccfc8fb9c6fe9d6c3308e5eeb9db44e\nparent cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8\nparent 96106f0f3023369ab88ad6cfde42f689f0296ab8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443732423 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443732425 +0200\n\nMerge pull request #6739\n\n96106f0 [Trivial] start the help texts with lowercase (paveljanik)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c71864258f55b07dd290d8740715c4707222f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19c71864258f55b07dd290d8740715c4707222f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c71864258f55b07dd290d8740715c4707222f2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd78c2a421ae5aa1773c8fb84dadc2c61a01e5e8"
      },
      {
        "sha": "96106f0f3023369ab88ad6cfde42f689f0296ab8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96106f0f3023369ab88ad6cfde42f689f0296ab8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96106f0f3023369ab88ad6cfde42f689f0296ab8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ff2c7ab4e931b0a1797a202ea822fe0d2088c8d6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c71864258f55b07dd290d8740715c4707222f2/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c71864258f55b07dd290d8740715c4707222f2/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=19c71864258f55b07dd290d8740715c4707222f2",
        "patch": "@@ -139,7 +139,7 @@ AC_ARG_ENABLE([glibc-back-compat],\n \n AC_ARG_ENABLE([zmq],\n   [AS_HELP_STRING([--disable-zmq],\n-  [Disable ZMQ notifications])],\n+  [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n "
      }
    ]
  },
  {
    "sha": "5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWI1ZGNhNmYxYmIxZWNjZDQ3ZWE2NDgzNGFjYzRmZWUwNDM1Yjcz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T21:05:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-01T21:06:02Z"
      },
      "message": "Merge pull request #6616\n\n5467820 Migrated rpc-tests.sh to all python rpc-tests.py (ptschip)",
      "tree": {
        "sha": "89bfbe4aa2375b8e37275707f458a45d4a183d85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89bfbe4aa2375b8e37275707f458a45d4a183d85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWDaA6AAoJEHSBCwEjRsmmLaUIALRBto611AsxqNf+i6BY12At\nX+TzR6ViM/EU/F6290Ng9N8yALTbhfM57EujvD/raSHmPg4FJ5kuJL0v4LvjypS0\nFEaahgZMQGIVg15bstgDwqmilOd7WTn0XM2BBgiAsIw8GfDLSDqD7Vi6iSyMo4TZ\n642zMwgbIyYaeHVl98akRQB/cnRzJmyHdSSD/qBcpT0MhQo7L6ykHhOz75iOMeqd\nEMJz5HWpMEbQv+nz6e4oHBXXZzrVHD2YAG4fpP7XX5kmgn27zAlfokGCFJEb+vcd\nLR/ArOQ1oFvEFtW684W4uGfDeSgL/lUCF2NubOp+jlZS1h+FoX4QzgqUnupEkiU=\n=3HCS\n-----END PGP SIGNATURE-----",
        "payload": "tree 89bfbe4aa2375b8e37275707f458a45d4a183d85\nparent 19c71864258f55b07dd290d8740715c4707222f2\nparent 5467820be5404fa736436a1202079e764a4308b4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1443733531 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1443733562 +0200\n\nMerge pull request #6616\n\n5467820 Migrated rpc-tests.sh to all python rpc-tests.py (ptschip)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19c71864258f55b07dd290d8740715c4707222f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c71864258f55b07dd290d8740715c4707222f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19c71864258f55b07dd290d8740715c4707222f2"
      },
      {
        "sha": "5467820be5404fa736436a1202079e764a4308b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5467820be5404fa736436a1202079e764a4308b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5467820be5404fa736436a1202079e764a4308b4"
      }
    ],
    "stats": {
      "total": 237,
      "additions": 139,
      "deletions": 98
    },
    "files": [
      {
        "sha": "8e9684826f69081ff8b3bdf4b37c8182a194a267",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "patch": "@@ -69,6 +69,6 @@ script:\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.sh; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      },
      {
        "sha": "8a7140398f8d2e69e3c4e6b5402b24f57555ca64",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "patch": "@@ -204,7 +204,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.sh qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/pull-tester/tests_config.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      },
      {
        "sha": "9a1029e79f3ad0fcdd2ae82ebad1e877b672702b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "patch": "@@ -899,7 +899,8 @@ AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n-AC_CONFIG_FILES([qa/pull-tester/tests-config.sh],[chmod +x qa/pull-tester/tests-config.sh])\n+AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n+chmod +x qa/pull-tester/rpc-tests.py\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen.\n@@ -939,3 +940,12 @@ case $host in\n      chmod 755 libtool\n    ;;\n esac\n+\n+dnl Replace the BUILDDIR path with the correct Windows path if compiling on Native Windows\n+case ${OS} in\n+   *Windows*)\n+     sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  qa/pull-tester/tests_config.py > qa/pull-tester/tests_config-2.py\n+     mv qa/pull-tester/tests_config-2.py qa/pull-tester/tests_config.py\n+     chmod +x qa/pull-tester/tests_config.py\n+   ;;\n+esac"
      },
      {
        "sha": "68c1c0471e332d48042e1c45c3a7724d308316b9",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "patch": "@@ -0,0 +1,118 @@\n+#!/usr/bin/env python2\n+\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Run Regression Test Suite\n+#\n+\n+import os\n+import sys\n+import subprocess\n+import re\n+from tests_config import *\n+from sets import Set\n+\n+#If imported values are not defined then set to zero (or disabled)\n+if not vars().has_key('ENABLE_WALLET'):\n+    ENABLE_WALLET=0\n+if not vars().has_key('ENABLE_BITCOIND'):\n+    ENABLE_BITCOIND=0\n+if not vars().has_key('ENABLE_UTILS'):\n+    ENABLE_UTILS=0\n+if not vars().has_key('ENABLE_ZMQ'):\n+    ENABLE_ZMQ=0\n+\n+#Create a set to store arguments and create the passOn string\n+opts = Set()\n+passOn = \"\"\n+p = re.compile(\"^--\")\n+for i in range(1,len(sys.argv)):\n+    if (p.match(sys.argv[i]) or sys.argv[i] == \"-h\"):\n+        passOn += \" \" + sys.argv[i]\n+    else:\n+        opts.add(sys.argv[i])\n+\n+#Set env vars\n+buildDir = BUILDDIR\n+os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n+os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n+ \n+#Disable Windows tests by default\n+if EXEEXT == \".exe\" and \"-win\" not in opts:\n+    print \"Win tests currently disabled.  Use -win option to enable\"\n+    sys.exit(0)\n+\n+#Tests\n+testScripts = [\n+    'wallet.py',\n+    'listtransactions.py',\n+    'mempool_resurrect_test.py',\n+    'txn_doublespend.py --mineblock',\n+    'txn_clone.py',\n+    'getchaintips.py',\n+    'rawtransactions.py',\n+    'rest.py',\n+    'mempool_spendcoinbase.py',\n+    'mempool_coinbase_spends.py',\n+    'httpbasics.py',\n+    'zapwallettxes.py',\n+    'proxy_test.py',\n+    'merkle_blocks.py',\n+    'fundrawtransaction.py',\n+    'signrawtransactions.py',\n+    'walletbackup.py',\n+    'nodehandling.py',\n+    'reindex.py',\n+    'decodescript.py',\n+    'p2p-fullblocktest.py',\n+]\n+testScriptsExt = [\n+    'bipdersig-p2p.py',\n+    'bipdersig.py',\n+    'getblocktemplate_longpoll.py',\n+    'getblocktemplate_proposals.py',\n+    'txn_doublespend.py',\n+    'txn_clone.py --mineblock',\n+    'pruning.py',\n+    'forknotify.py',\n+    'invalidateblock.py',\n+    'keypool.py',\n+    'receivedby.py',\n+    'rpcbind_test.py',\n+#   'script_test.py',\n+    'smartfees.py',\n+    'maxblocksinflight.py',\n+    'invalidblockrequest.py',\n+#    'forknotify.py',\n+    'p2p-acceptblock.py',\n+    'mempool_packages.py',\n+]\n+\n+#Enable ZMQ tests\n+if ENABLE_ZMQ == 1:\n+    testScripts.append('zmq_test.py')\n+\n+if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+    rpcTestDir = buildDir + '/qa/rpc-tests/'\n+    #Run Tests\n+    for i in range(len(testScripts)):\n+       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts \n+           or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n+            print  \"Running testscript \" + testScripts[i] + \"...\" \n+            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+\t    #exit if help is called so we print just one set of instructions\n+            p = re.compile(\" -h| --help\")\n+            if p.match(passOn):\n+                sys.exit(0)\n+\n+    #Run Extended Tests\n+    for i in range(len(testScriptsExt)):\n+        if ('-extended' in opts or testScriptsExt[i] in opts \n+           or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n+            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\" \n+            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+else:\n+    print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "7e1d2e8e503fd2f483b3629c0797146fcc826922",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 89,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c71864258f55b07dd290d8740715c4707222f2/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c71864258f55b07dd290d8740715c4707222f2/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=19c71864258f55b07dd290d8740715c4707222f2",
        "patch": "@@ -1,89 +0,0 @@\n-#!/bin/bash\n-set -e\n-\n-CURDIR=$(cd $(dirname \"$0\"); pwd)\n-# Get BUILDDIR and REAL_BITCOIND\n-. \"${CURDIR}/tests-config.sh\"\n-\n-export BITCOIND=${REAL_BITCOIND}\n-export BITCOINCLI=${REAL_BITCOINCLI}\n-\n-if [ \"x${EXEEXT}\" = \"x.exe\" ]; then\n-  echo \"Win tests currently disabled\"\n-  exit 0\n-fi\n-\n-#Run the tests\n-\n-testScripts=(\n-    'wallet.py'\n-    'listtransactions.py'\n-    'mempool_resurrect_test.py'\n-    'txn_doublespend.py --mineblock'\n-    'txn_clone.py'\n-    'getchaintips.py'\n-    'rawtransactions.py'\n-    'rest.py'\n-    'mempool_spendcoinbase.py'\n-    'mempool_coinbase_spends.py'\n-    'httpbasics.py'\n-    'zapwallettxes.py'\n-    'proxy_test.py'\n-    'merkle_blocks.py'\n-    'fundrawtransaction.py'\n-    'signrawtransactions.py'\n-    'walletbackup.py'\n-    'nodehandling.py'\n-    'reindex.py'\n-    'decodescript.py'\n-    'p2p-fullblocktest.py'\n-);\n-testScriptsExt=(\n-    'bipdersig-p2p.py'\n-    'bipdersig.py'\n-    'getblocktemplate_longpoll.py'\n-    'getblocktemplate_proposals.py'\n-    'txn_doublespend.py'\n-    'txn_clone.py --mineblock'\n-    'pruning.py'\n-    'forknotify.py'\n-    'invalidateblock.py'\n-    'keypool.py'\n-    'receivedby.py'\n-    'rpcbind_test.py'\n-#   'script_test.py'\n-    'smartfees.py'\n-    'maxblocksinflight.py'\n-    'invalidblockrequest.py'\n-#    'forknotify.py'\n-    'p2p-acceptblock.py'\n-    'mempool_packages.py'\n-);\n-\n-if [ \"x$ENABLE_ZMQ\" = \"x1\" ]; then\n-  testScripts+=('zmq_test.py')\n-fi\n-\n-extArg=\"-extended\"\n-passOn=${@#$extArg}\n-\n-if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n-    for (( i = 0; i < ${#testScripts[@]}; i++ ))\n-    do\n-        if [ -z \"$1\" ] || [ \"${1:0:1}\" == \"-\" ] || [ \"$1\" == \"${testScripts[$i]}\" ] || [ \"$1.py\" == \"${testScripts[$i]}\" ]\n-        then\n-            echo -e \"Running testscript \\033[1m${testScripts[$i]}...\\033[0m\"\n-            ${BUILDDIR}/qa/rpc-tests/${testScripts[$i]} --srcdir \"${BUILDDIR}/src\" ${passOn}\n-        fi\n-    done\n-    for (( i = 0; i < ${#testScriptsExt[@]}; i++ ))\n-    do\n-        if [ \"$1\" == $extArg ] || [ \"$1\" == \"${testScriptsExt[$i]}\" ] || [ \"$1.py\" == \"${testScriptsExt[$i]}\" ]\n-        then\n-            echo -e \"Running \\033[1m2nd level\\033[0m testscript \\033[1m${testScriptsExt[$i]}...\\033[0m\"\n-            ${BUILDDIR}/qa/rpc-tests/${testScriptsExt[$i]} --srcdir \"${BUILDDIR}/src\" ${passOn}\n-        fi\n-    done\n-else\n-  echo \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n-fi"
      },
      {
        "sha": "937b4231f12f82841c52d7f34133c2daf5575668",
        "filename": "qa/pull-tester/tests_config.py.in",
        "status": "renamed",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/qa/pull-tester/tests_config.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/qa/pull-tester/tests_config.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/tests_config.py.in?ref=5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "patch": "@@ -1,4 +1,4 @@\n-#!/bin/bash\n+#!/usr/bin/env python2\n # Copyright (c) 2013-2014 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -12,6 +12,4 @@ EXEEXT=\"@EXEEXT@\"\n @BUILD_BITCOIND_TRUE@ENABLE_BITCOIND=1\n @ENABLE_ZMQ_TRUE@ENABLE_ZMQ=1\n \n-REAL_BITCOIND=\"$BUILDDIR/src/bitcoind${EXEEXT}\"\n-REAL_BITCOINCLI=\"$BUILDDIR/src/bitcoin-cli${EXEEXT}\"\n ",
        "previous_filename": "qa/pull-tester/tests-config.sh.in"
      },
      {
        "sha": "3391ee03aee23f01c1f0017cdfc5300ca2088bfa",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "patch": "@@ -37,9 +37,13 @@ Helper functions for creating blocks and transactions.\n Notes\n =====\n \n-You can run a single test by calling `qa/pull-tester/rpc-tests.sh <testname>`.\n+You can run any single test by calling qa/pull-tester/rpc-tests.py <testname>\n \n-Run all possible tests with `qa/pull-tester/rpc-tests.sh -extended`.\n+Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n+\n+Run the regression test suite with `qa/pull-tester/rpc-tests.py'\n+\n+Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n \n Possible options:\n \n@@ -53,7 +57,7 @@ Possible options:\n   --tracerpc       Print out all RPC calls as they are made\n ```\n \n-If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.sh wallet`). \n+If you set the environment variable `PYTHON_DEBUG=1` you will get some debug output (example: `PYTHON_DEBUG=1 qa/pull-tester/rpc-tests.py wallet`). \n \n A 200-block -regtest blockchain and wallets for four nodes\n is created the first time a regression test is run and"
      }
    ]
  },
  {
    "sha": "caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWEzZDQyZjA2ODliZDk0NWM1YjU0NGZlMGViZTJjYTI1YWNkMTgw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T19:08:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:42Z"
      },
      "message": "Bugfix: RPC: blockchain: Display correct defaults in help for verifychain method",
      "tree": {
        "sha": "e98cc84329cb652691461d349051139174ecfb0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e98cc84329cb652691461d349051139174ecfb0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da894ab5da222ad317039eb008ec6443fb9113d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da894ab5da222ad317039eb008ec6443fb9113d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da894ab5da222ad317039eb008ec6443fb9113d9"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "68aacf073c1ffb7cea78a15930b29178ddf59625",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "patch": "@@ -307,8 +307,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n-    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n-    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3));\n+    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n+    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -1273,9 +1273,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n-                if (fHavePruned && GetArg(\"-checkblocks\", 288) > MIN_BLOCKS_TO_KEEP) {\n+                if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\",\n-                        MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", 288));\n+                        MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS));\n                 }\n \n                 {\n@@ -1289,8 +1289,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n-                              GetArg(\"-checkblocks\", 288))) {\n+                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                              GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n                 }"
      },
      {
        "sha": "7fe004c3a14baaf3359e6e4bdf7fee7237ca13b3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "patch": "@@ -123,6 +123,9 @@ extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n \n+static const signed int DEFAULT_CHECKBLOCKS = MIN_BLOCKS_TO_KEEP;\n+static const unsigned int DEFAULT_CHECKLEVEL = 3;\n+\n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n // Add 15% for Undo data = 331MB"
      },
      {
        "sha": "58f49f9f562b99db4458692bd0e44fa747d623ff",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caa3d42f0689bd945c5b544fe0ebe2ca25acd180/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "patch": "@@ -539,13 +539,15 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n \n UniValue verifychain(const UniValue& params, bool fHelp)\n {\n+    int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n+    int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.\\n\"\n-            \"2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.\\n\"\n+            \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n+            \"2. numblocks    (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false       (boolean) Verified or not\\n\"\n             \"\\nExamples:\\n\"\n@@ -555,8 +557,6 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    int nCheckLevel = GetArg(\"-checklevel\", 3);\n-    int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n         nCheckLevel = params[0].get_int();\n     if (params.size() > 1)"
      }
    ]
  },
  {
    "sha": "420a82f1ae2f56938ea935fbdbb60e47685684c7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjBhODJmMWFlMmY1NjkzOGVhOTM1ZmJkYmI2MGU0NzY4NTY4NGM3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T23:15:11Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:42Z"
      },
      "message": "Bugfix: Describe dblogsize option correctly (it refers to the wallet database, not memory pool)",
      "tree": {
        "sha": "da4cc0037c4e545cf3720a3ea5933313721d8780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da4cc0037c4e545cf3720a3ea5933313721d8780"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/420a82f1ae2f56938ea935fbdbb60e47685684c7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caa3d42f0689bd945c5b544fe0ebe2ca25acd180",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caa3d42f0689bd945c5b544fe0ebe2ca25acd180"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "13a82739cc1f5a2ebaefaf741e352d6995d0ae19",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "patch": "@@ -404,7 +404,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\", 100));\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");"
      },
      {
        "sha": "cf6122813c059a36973eeb8872ac7f45a24ff768",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "patch": "@@ -293,7 +293,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()"
      },
      {
        "sha": "46bc0ac0a9f25992199931a3802ae3749ea1db9c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/420a82f1ae2f56938ea935fbdbb60e47685684c7/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "patch": "@@ -20,6 +20,8 @@\n \n #include <db_cxx.h>\n \n+static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+\n extern unsigned int nWalletDBUpdated;\n \n class CDBEnv"
      }
    ]
  },
  {
    "sha": "5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjkyNjBmNDU4NDNlNWIwZTFmNDE1NmFmMGY3YjZkNmMyZDkzYTc2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-27T23:48:38Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-10-01T23:16:42Z"
      },
      "message": "Bugfix: If genproclimit is omitted to RPC setgenerate, don't change it; also show correct default in getmininginfo",
      "tree": {
        "sha": "786c434f05ee26a808a7a79783c0c79c6c753ab9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/786c434f05ee26a808a7a79783c0c79c6c753ab9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/420a82f1ae2f56938ea935fbdbb60e47685684c7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/420a82f1ae2f56938ea935fbdbb60e47685684c7"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "80af1fbfd25020c3774ea6c60b26e5b04a197552",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "patch": "@@ -422,7 +422,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -1558,7 +1558,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), Params());\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "ad1320481887bbffa050865c40c7e4c3da902189",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "patch": "@@ -17,6 +17,8 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n+static const int DEFAULT_GENERATE_THREADS = 1;\n+\n struct CBlockTemplate\n {\n     CBlock block;"
      },
      {
        "sha": "f42b31627c46f7fe85450070ce1029610e422d8b",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "patch": "@@ -211,7 +211,7 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n     if (params.size() > 0)\n         fGenerate = params[0].get_bool();\n \n-    int nGenProcLimit = -1;\n+    int nGenProcLimit = GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS);\n     if (params.size() > 1)\n     {\n         nGenProcLimit = params[1].get_int();\n@@ -259,7 +259,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n+    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));"
      }
    ]
  },
  {
    "sha": "9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWU1YWM4MmY2YTZjYTBjMzY1MjdkYmMwY2EzMzkzYWYwMjhhZjdm",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-02T05:44:36Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-02T05:44:36Z"
      },
      "message": "Rewrite help texts for features enabled by default.",
      "tree": {
        "sha": "39c135e78e2a19e59683f71b50673b49ff0a2568",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39c135e78e2a19e59683f71b50673b49ff0a2568"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "284c4cd7f5c1e116b3298aec716afc8df0ed74d2",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f",
        "patch": "@@ -69,8 +69,8 @@ PKG_PROG_PKG_CONFIG\n \n # Enable wallet\n AC_ARG_ENABLE([wallet],\n-  [AS_HELP_STRING([--enable-wallet],\n-  [enable wallet (default is yes)])],\n+  [AS_HELP_STRING([--disable-wallet],\n+  [disable wallet (enabled by default)])],\n   [enable_wallet=$enableval],\n   [enable_wallet=yes])\n \n@@ -87,7 +87,7 @@ AC_ARG_ENABLE([upnp-default],\n   [use_upnp_default=no])\n \n AC_ARG_ENABLE(tests,\n-    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n     [use_tests=$enableval],\n     [use_tests=yes])\n \n@@ -108,8 +108,8 @@ AC_ARG_WITH([qrencode],\n   [use_qr=auto])\n \n AC_ARG_ENABLE([hardening],\n-  [AS_HELP_STRING([--enable-hardening],\n-  [attempt to harden the resulting executables (default is yes)])],\n+  [AS_HELP_STRING([--disable-hardening],\n+  [do not attempt to harden the resulting executables (default is to harden)])],\n   [use_hardening=$enableval],\n   [use_hardening=yes])\n \n@@ -120,8 +120,8 @@ AC_ARG_ENABLE([reduce-exports],\n   [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n-  [AS_HELP_STRING([--enable-ccache],\n-  [use ccache for building (default is yes if ccache is found)])],\n+  [AS_HELP_STRING([--disable-ccache],\n+  [do not use ccache for building (default is to use if found)])],\n   [use_ccache=$enableval],\n   [use_ccache=auto])\n "
      }
    ]
  },
  {
    "sha": "dd28089fa23b1d91cc0799433904b8467fdc1880",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDI4MDg5ZmEyM2IxZDkxY2MwNzk5NDMzOTA0Yjg0NjdmZGMxODgw",
    "commit": {
      "author": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2015-10-03T19:21:55Z"
      },
      "committer": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2015-10-03T19:21:55Z"
      },
      "message": "autotools: move checking for zmq library to common area in configure.ac\n\n* Fixes #6679\n\n* Tested with --disable-zmq\n* Tested with and without pkgconfig\n* Tested with and without zmq installed\n\nSigned-off-by: Johnathan Corgan <johnathan@corganlabs.com>",
      "tree": {
        "sha": "e68cb8369bfa6a27abe260f4dfccfb30ba4c12c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e68cb8369bfa6a27abe260f4dfccfb30ba4c12c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd28089fa23b1d91cc0799433904b8467fdc1880",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd28089fa23b1d91cc0799433904b8467fdc1880",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd28089fa23b1d91cc0799433904b8467fdc1880",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd28089fa23b1d91cc0799433904b8467fdc1880/comments",
    "author": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f297042cae572753e6c25d25caf92091e88b76df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f297042cae572753e6c25d25caf92091e88b76df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f297042cae572753e6c25d25caf92091e88b76df"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 25,
      "deletions": 15
    },
    "files": [
      {
        "sha": "18215a900db1c2c811374e592d92195b6360605a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd28089fa23b1d91cc0799433904b8467fdc1880/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd28089fa23b1d91cc0799433904b8467fdc1880/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=dd28089fa23b1d91cc0799433904b8467fdc1880",
        "patch": "@@ -139,7 +139,7 @@ AC_ARG_ENABLE([glibc-back-compat],\n \n AC_ARG_ENABLE([zmq],\n   [AS_HELP_STRING([--disable-zmq],\n-  [Disable ZMQ notifications])],\n+  [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n \n@@ -676,6 +676,16 @@ if test x$use_pkgconfig = xyes; then\n           PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n         fi\n       fi\n+\n+      if test \"x$use_zmq\" = \"xyes\"; then\n+        PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n+          [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+          [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+           AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n+           use_zmq=no])\n+      else\n+          AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+      fi\n     ]\n   )\n else\n@@ -693,6 +703,20 @@ else\n     fi\n   fi\n \n+  if test \"x$use_zmq\" = \"xyes\"; then\n+     AC_CHECK_HEADER([zmq.h],\n+       [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+       [AC_MSG_WARN([zmq.h not found, disabling zmq support])\n+        use_zmq=no\n+        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n+     AC_CHECK_LIB([zmq],[zmq_ctx_shutdown],ZMQ_LIBS=-lzmq,\n+       [AC_MSG_WARN([libzmq >= 4.0 not found, disabling zmq support])\n+        use_zmq=no\n+        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n+  else\n+    AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+  fi\n+\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n@@ -839,20 +863,6 @@ if test x$bitcoin_enable_qt != xno; then\n   fi\n fi\n \n-# conditional search for and use libzmq\n-AC_MSG_CHECKING([whether to build ZMQ support])\n-if test \"x$use_zmq\" = \"xyes\"; then\n-  AC_MSG_RESULT([yes])\n-  PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n-    [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n-    [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n-     AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n-     use_zmq=no])\n-else\n-  AC_MSG_RESULT([no, --disable-zmq used])\n-  AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n-fi\n-\n AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n \n AC_MSG_CHECKING([whether to build test_bitcoin])"
      }
    ]
  },
  {
    "sha": "3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWIzZGU4YmExYTYzZDVlYzBmOTdhZTEyZTY2MGQ5NzMwYzYwMTU2",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-04T19:08:18Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-04T19:08:18Z"
      },
      "message": "qa/pull-tester/rpc-tests.py: chmod 0755\n\nFix file mode to be executable.\n\nInclude dummy whitespace change to force git to change mode.",
      "tree": {
        "sha": "6f0caa4e891c7488cec908b2d60ca17c11dec274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f0caa4e891c7488cec908b2d60ca17c11dec274"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIVAwUAVhF5JiWzCDIBeCsvAQL5SBAAu7k5TLErg7V10MYhkQmMrOANZ5WRUZnu\nC0q66YCgG5qEZEX4s54zk1Cfto0jRd4oXIwtW2KJINqUSxuq2ajXA/122/TxrgJJ\nGQj53FQxsXwvTP55oznSg9houizADOnIH1kqQEt1vpaDOIBKXk83xXHmkgpDy5Yg\nsJxJaFrXEWb/22fzu76vz4BruD05hLXOLtT0UyaiDvsxwfF0eIgfHiMSUAqMrT/q\nkXqptPdKwryW6oLtfQ48pBrTCqfEOAaORHZDQrpwBKDLJHJkJRZbtUa5rcdRBfsW\ni+yowdfW0UD8lNC84EvvTdPhtkYqd5epPeOCxVgOgw2+BUWa1AXhTWvsjjaPMKZD\n8onY1YOFAIGK2BYAJglEWCIQ0vsyJri0xAiN6V1VutSmJkn86R4Wk9+dZFl3nT2S\nq/MSGdnaDp/CCvOG36a+vF1AR70eh547jqEiG58OXUzHCkSDTzGtvCq1hKyJdZdi\n0WykNbJuvDjylqFtKk2qDBFqP00kI63BVAFrvmFABl/8yCOSIm7I0yJHnnvtqxER\n1oNpTxwWZa+DrpISLV0fETfPI75iOhfPtU0cxKs8RQlElEtt27vOuP8DxXwTMnUa\njm3ingR21DCf18dIyB0mdcIpF3/7stnV/gopmcpE1LJgwcascP8KzuwviNzj2gbs\npeUySRFjMug=\n=vdpX\n-----END PGP SIGNATURE-----",
        "payload": "tree 6f0caa4e891c7488cec908b2d60ca17c11dec274\nparent 5ab5dca6f1bb1eccd47ea64834acc4fee0435b73\nauthor Jeff Garzik <jgarzik@pobox.com> 1443985698 -0400\ncommitter Jeff Garzik <jgarzik@pobox.com> 1443985698 -0400\n\nqa/pull-tester/rpc-tests.py: chmod 0755\n\nFix file mode to be executable.\n\nInclude dummy whitespace change to force git to change mode.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "58098bdec52f8949afc957b2134240ae610c7310",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
        "patch": "@@ -1,5 +1,4 @@\n #!/usr/bin/env python2\n-\n # Copyright (c) 2014 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php."
      }
    ]
  },
  {
    "sha": "ea709970e00104dcb9b510ca090d2bdb50e3ab6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTcwOTk3MGUwMDEwNGRjYjliNTEwY2EwOTBkMmJkYjUwZTNhYjZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T09:49:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:32:51Z"
      },
      "message": "build: Remove unnecessary chmods after #6616\n\nDon't chmod a repository-included file in the configure script, and\n`tests_config.py` is a module that doesn't need to be executable.",
      "tree": {
        "sha": "5a27271aedc9a15578641c3a131def24b139d509",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a27271aedc9a15578641c3a131def24b139d509"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea709970e00104dcb9b510ca090d2bdb50e3ab6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea709970e00104dcb9b510ca090d2bdb50e3ab6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea709970e00104dcb9b510ca090d2bdb50e3ab6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea709970e00104dcb9b510ca090d2bdb50e3ab6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dd6c7d008a48c84b2558b5aa5797bfd7afa0c9c8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea709970e00104dcb9b510ca090d2bdb50e3ab6b/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea709970e00104dcb9b510ca090d2bdb50e3ab6b/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ea709970e00104dcb9b510ca090d2bdb50e3ab6b",
        "patch": "@@ -900,7 +900,6 @@ AC_SUBST(MINIUPNPC_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n-chmod +x qa/pull-tester/rpc-tests.py\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen.\n@@ -946,6 +945,5 @@ case ${OS} in\n    *Windows*)\n      sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  qa/pull-tester/tests_config.py > qa/pull-tester/tests_config-2.py\n      mv qa/pull-tester/tests_config-2.py qa/pull-tester/tests_config.py\n-     chmod +x qa/pull-tester/tests_config.py\n    ;;\n esac"
      }
    ]
  },
  {
    "sha": "2844b9e90e588ea04bc2116188fa3eef195d3be8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODQ0YjllOTBlNTg4ZWEwNGJjMjExNjE4OGZhM2VlZjE5NWQzYmU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:35:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:35:07Z"
      },
      "message": "Merge pull request #6759\n\nea70997 build: Remove unnecessary chmods after #6616 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "5a27271aedc9a15578641c3a131def24b139d509",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a27271aedc9a15578641c3a131def24b139d509"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2844b9e90e588ea04bc2116188fa3eef195d3be8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWEmBrAAoJEHSBCwEjRsmmb2oH+wQgkf0AOFg57yKlGbHMPDd1\nfy+CfD/qk0QZM5ikU9dMU3RznmFvt9KuztnXoBOdViQa0Gkgr8T50gwLIX9KvgVo\nrBrLMFIjX6SjvoJ9ZuMykptYh/L/2ELW9yoj7v1JGebWFrwv4QRZ0cUSxvq0kKvM\n3GO8QuUTlfjf8yEBQzEY9S2rwJ3oi9BXuoX3Hry5/4tnauNsUQ2In8FPsDpMNnQU\nvo3hf+A3mORQARpxERfBDqlejOQf2TocJJtOcFMCtG+rZkL9+53x4eny8YPjxhho\ncKugGcTcl7FyqK0+kicOZK6u1jrPKljOnHSm3XEWH7dShXz6NVrQz0ShSJDbysY=\n=wDaF\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a27271aedc9a15578641c3a131def24b139d509\nparent 3ab3de8ba1a63d5ec0f97ae12e660d9730c60156\nparent ea709970e00104dcb9b510ca090d2bdb50e3ab6b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444044902 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444044907 +0200\n\nMerge pull request #6759\n\nea70997 build: Remove unnecessary chmods after #6616 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2844b9e90e588ea04bc2116188fa3eef195d3be8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2844b9e90e588ea04bc2116188fa3eef195d3be8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2844b9e90e588ea04bc2116188fa3eef195d3be8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156"
      },
      {
        "sha": "ea709970e00104dcb9b510ca090d2bdb50e3ab6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea709970e00104dcb9b510ca090d2bdb50e3ab6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea709970e00104dcb9b510ca090d2bdb50e3ab6b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dd6c7d008a48c84b2558b5aa5797bfd7afa0c9c8",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2844b9e90e588ea04bc2116188fa3eef195d3be8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2844b9e90e588ea04bc2116188fa3eef195d3be8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2844b9e90e588ea04bc2116188fa3eef195d3be8",
        "patch": "@@ -900,7 +900,6 @@ AC_SUBST(MINIUPNPC_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/tests_config.py],[chmod +x qa/pull-tester/tests_config.py])\n-chmod +x qa/pull-tester/rpc-tests.py\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n dnl result, they leak into secp256k1's configure and crazy things happen.\n@@ -946,6 +945,5 @@ case ${OS} in\n    *Windows*)\n      sed  's/BUILDDIR=\"\\/\\([[a-z]]\\)/BUILDDIR=\"\\1:/'  qa/pull-tester/tests_config.py > qa/pull-tester/tests_config-2.py\n      mv qa/pull-tester/tests_config-2.py qa/pull-tester/tests_config.py\n-     chmod +x qa/pull-tester/tests_config.py\n    ;;\n esac"
      }
    ]
  },
  {
    "sha": "5f34a2510f6414a27ac3179ee461c944c8acd395",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjM0YTI1MTBmNjQxNGEyN2FjMzE3OWVlNDYxYzk0NGM4YWNkMzk1",
    "commit": {
      "author": {
        "name": "ptschip",
        "email": "peter.tschipper@gmail.com",
        "date": "2015-10-03T15:03:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:38:31Z"
      },
      "message": "Changed rpc-tests.sh to rpc-tests.py in README.md\n\nGithub-Pull: #6752",
      "tree": {
        "sha": "18abb500e75990f7cc616cf3fe3abc0429dc51a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18abb500e75990f7cc616cf3fe3abc0429dc51a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f34a2510f6414a27ac3179ee461c944c8acd395",
      "comment_count": 1,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWEmE/AAoJEHSBCwEjRsmmf6UIAJHbGr4n6kOQB7FEuYpfQVt5\nPIJUudgvxHSbpRc7l8mg0D6hLlu3qx800p6GLSHPeA1UD44i0W8ii8NPi/5iox38\nXQ7qZYomZVU3IyTbjODIqHOeTp/HG3RMXFhXiVR/h77mPNAJEJB8kE1uNANhBg27\nP06VXR4KkNc3wzgX+VADvnchSuec97UFADVr4zjzlLuL4iKC5YpMDjfxuIZqSLBx\nttgvd8mkl0X8WKS8RFQUjC/8wVwCnjKkvQFc3ES3HkfTFXBu5ykL7QcSkyeHqlqq\n7XyqloBgKIyYWUjEGmeZVx9h9z6XuDGW8RJbGqPj/sGb/iekLSpUXSJx64OlhGU=\n=oMqE\n-----END PGP SIGNATURE-----",
        "payload": "tree 18abb500e75990f7cc616cf3fe3abc0429dc51a5\nparent 2844b9e90e588ea04bc2116188fa3eef195d3be8\nauthor ptschip <peter.tschipper@gmail.com> 1443884605 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444045111 +0200\n\nChanged rpc-tests.sh to rpc-tests.py in README.md\n\nGithub-Pull: #6752\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f34a2510f6414a27ac3179ee461c944c8acd395",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f34a2510f6414a27ac3179ee461c944c8acd395",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f34a2510f6414a27ac3179ee461c944c8acd395/comments",
    "author": {
      "login": "ptschip",
      "id": 12862928,
      "node_id": "MDQ6VXNlcjEyODYyOTI4",
      "avatar_url": "https://avatars.githubusercontent.com/u/12862928?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ptschip",
      "html_url": "https://github.com/ptschip",
      "followers_url": "https://api.github.com/users/ptschip/followers",
      "following_url": "https://api.github.com/users/ptschip/following{/other_user}",
      "gists_url": "https://api.github.com/users/ptschip/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ptschip/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ptschip/subscriptions",
      "organizations_url": "https://api.github.com/users/ptschip/orgs",
      "repos_url": "https://api.github.com/users/ptschip/repos",
      "events_url": "https://api.github.com/users/ptschip/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ptschip/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2844b9e90e588ea04bc2116188fa3eef195d3be8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2844b9e90e588ea04bc2116188fa3eef195d3be8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2844b9e90e588ea04bc2116188fa3eef195d3be8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "39813677c80884d2ae8812f6d7b8e96e01abfad3",
        "filename": "README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f34a2510f6414a27ac3179ee461c944c8acd395/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f34a2510f6414a27ac3179ee461c944c8acd395/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=5f34a2510f6414a27ac3179ee461c944c8acd395",
        "patch": "@@ -1,4 +1,4 @@\n-Bitcoin Core integration/staging tree\n+\ufeffBitcoin Core integration/staging tree\n =====================================\n \n [![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n@@ -53,7 +53,7 @@ submit new unit tests for old code. Unit tests can be compiled and run (assuming\n \n There are also regression and integration tests of the RPC interface, written\n in Python, that are run automatically on the build server.\n-These tests can be run with: `qa/pull-tester/rpc-tests.sh`\n+These tests can be run with: `qa/pull-tester/rpc-tests.py`\n \n Every pull request is built for both Windows and Linux on a dedicated server,\n and unit and sanity tests are automatically run. The binaries produced may be"
      }
    ]
  },
  {
    "sha": "e10a4ab904ab078d3f34c674d19922ec16c3115a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTBhNGFiOTA0YWIwNzhkM2YzNGM2NzRkMTk5MjJlYzE2YzMxMTVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:40:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:41:04Z"
      },
      "message": "Merge pull request #6748\n\n9ee5ac8 Rewrite help texts for features enabled by default. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "91ac332ced323dd952da9247d119160d45f51ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91ac332ced323dd952da9247d119160d45f51ad8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e10a4ab904ab078d3f34c674d19922ec16c3115a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWEmHQAAoJEHSBCwEjRsmmAc0H/ioMnaM9pi1mrwDw+5rEI9wo\n03pIoMz0Ixz0xTbRLvApjJfiMvWjClNYNl48KrGbYvHjfzvQ3//6I4eBMk43Zwi6\nG5gMoolC0T4DYiIrOfnRXZCf2potGESn/LRK7Miv3R6ujUK21qfqUaEinMbXUEst\n8XB+ELXg44lJOF7FA/ge/w2CV5U09Yg8fgjGRJP2xEduYcou1hCYBSxUQ90INQIz\n9ArPqiNzP/D92EO8jlT0ryCAwT/8d15JZ3dRy1hhcZbhN8ELOUwbBz7VAjgpSqKI\n59WKM+1InGIU71peTdTyVTjQcYN741jO9/P+cqpub44zOnizH3KX5GuP32S2j+o=\n=OSqD\n-----END PGP SIGNATURE-----",
        "payload": "tree 91ac332ced323dd952da9247d119160d45f51ad8\nparent 5f34a2510f6414a27ac3179ee461c944c8acd395\nparent 9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444045241 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444045264 +0200\n\nMerge pull request #6748\n\n9ee5ac8 Rewrite help texts for features enabled by default. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10a4ab904ab078d3f34c674d19922ec16c3115a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e10a4ab904ab078d3f34c674d19922ec16c3115a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10a4ab904ab078d3f34c674d19922ec16c3115a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f34a2510f6414a27ac3179ee461c944c8acd395",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f34a2510f6414a27ac3179ee461c944c8acd395",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f34a2510f6414a27ac3179ee461c944c8acd395"
      },
      {
        "sha": "9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ee5ac82f6a6ca0c36527dbc0ca3393af028af7f"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cbfa9cfc6d2acac99de4dcb58239ae68568325ca",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10a4ab904ab078d3f34c674d19922ec16c3115a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10a4ab904ab078d3f34c674d19922ec16c3115a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=e10a4ab904ab078d3f34c674d19922ec16c3115a",
        "patch": "@@ -69,8 +69,8 @@ PKG_PROG_PKG_CONFIG\n \n # Enable wallet\n AC_ARG_ENABLE([wallet],\n-  [AS_HELP_STRING([--enable-wallet],\n-  [enable wallet (default is yes)])],\n+  [AS_HELP_STRING([--disable-wallet],\n+  [disable wallet (enabled by default)])],\n   [enable_wallet=$enableval],\n   [enable_wallet=yes])\n \n@@ -87,7 +87,7 @@ AC_ARG_ENABLE([upnp-default],\n   [use_upnp_default=no])\n \n AC_ARG_ENABLE(tests,\n-    AS_HELP_STRING([--enable-tests],[compile tests (default is yes)]),\n+    AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n     [use_tests=$enableval],\n     [use_tests=yes])\n \n@@ -108,8 +108,8 @@ AC_ARG_WITH([qrencode],\n   [use_qr=auto])\n \n AC_ARG_ENABLE([hardening],\n-  [AS_HELP_STRING([--enable-hardening],\n-  [attempt to harden the resulting executables (default is yes)])],\n+  [AS_HELP_STRING([--disable-hardening],\n+  [do not attempt to harden the resulting executables (default is to harden)])],\n   [use_hardening=$enableval],\n   [use_hardening=yes])\n \n@@ -120,8 +120,8 @@ AC_ARG_ENABLE([reduce-exports],\n   [use_reduce_exports=no])\n \n AC_ARG_ENABLE([ccache],\n-  [AS_HELP_STRING([--enable-ccache],\n-  [use ccache for building (default is yes if ccache is found)])],\n+  [AS_HELP_STRING([--disable-ccache],\n+  [do not use ccache for building (default is to use if found)])],\n   [use_ccache=$enableval],\n   [use_ccache=auto])\n "
      }
    ]
  },
  {
    "sha": "a75c67364d3484147c0643baf535845ce72a50cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzVjNjczNjRkMzQ4NDE0N2MwNjQzYmFmNTM1ODQ1Y2U3MmE1MGNj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:41:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:43:16Z"
      },
      "message": "Merge pull request #6744\n\nbb24835 build: disable -Wself-assign (Wladimir J. van der Laan)",
      "tree": {
        "sha": "6753dcb104315f8170072c41ff7e3fb5bc375dff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6753dcb104315f8170072c41ff7e3fb5bc375dff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a75c67364d3484147c0643baf535845ce72a50cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWEmJUAAoJEHSBCwEjRsmmWOIIAJT0EnNHnAFrkePesXB9CW7d\nq3Twg8c7neOX0WHceIJbFw2Nh+rS1U4taZPM0y3x9tbYSFie2FbItpoq2q3wEJ+F\nNAyQ41wiDlvTWL3BW69fPCthvzQnyydQmjavAIgwjayBGfaCQGXImHwqY3Nhv9yb\nJF/DS310SsoYksm3Ey//pdO3jLgZB0JOC4MlLisAH9hgPiS4MXeRf8phtf/pnhuv\nNUFdgBnaCCbEXJXuDPMZBXLxvyDBOYQaIraHeqp0afQVQtskUH80saCdzjuwwIre\nn8Snfkg0SZrsMJQN8seO+U6SpXGYRWozGu37/1FFOhdOruWSjuSp4fphU7z0lWA=\n=/lV5\n-----END PGP SIGNATURE-----",
        "payload": "tree 6753dcb104315f8170072c41ff7e3fb5bc375dff\nparent e10a4ab904ab078d3f34c674d19922ec16c3115a\nparent bb24835aed822ff1842bbf0920dba592eb48dfd5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444045287 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444045396 +0200\n\nMerge pull request #6744\n\nbb24835 build: disable -Wself-assign (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75c67364d3484147c0643baf535845ce72a50cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a75c67364d3484147c0643baf535845ce72a50cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75c67364d3484147c0643baf535845ce72a50cc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e10a4ab904ab078d3f34c674d19922ec16c3115a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10a4ab904ab078d3f34c674d19922ec16c3115a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e10a4ab904ab078d3f34c674d19922ec16c3115a"
      },
      {
        "sha": "bb24835aed822ff1842bbf0920dba592eb48dfd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb24835aed822ff1842bbf0920dba592eb48dfd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb24835aed822ff1842bbf0920dba592eb48dfd5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d8c7e8b779b569053d0123467aeaf95eefc9be4b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a75c67364d3484147c0643baf535845ce72a50cc/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a75c67364d3484147c0643baf535845ce72a50cc/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a75c67364d3484147c0643baf535845ce72a50cc",
        "patch": "@@ -167,7 +167,7 @@ fi\n ##       compatibility with the legacy buildsystem.\n ##\n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n-  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter\"\n+  CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wno-self-assign\"\n fi\n CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n "
      }
    ]
  },
  {
    "sha": "efb37d4fda0fe6001f9e112e0392cfae4338022e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZmIzN2Q0ZmRhMGZlNjAwMWY5ZTExMmUwMzkyY2ZhZTQzMzgwMjJl",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-10-05T12:25:13Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2015-10-05T12:25:13Z"
      },
      "message": "Changed run-bitcoind-for-test.sh.in to non-executable mode.\nConsistency with other *.in input files.",
      "tree": {
        "sha": "dfe98b1dd7cad2d3030ef2cece44231a01402fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfe98b1dd7cad2d3030ef2cece44231a01402fc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/efb37d4fda0fe6001f9e112e0392cfae4338022e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb37d4fda0fe6001f9e112e0392cfae4338022e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/efb37d4fda0fe6001f9e112e0392cfae4338022e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb37d4fda0fe6001f9e112e0392cfae4338022e/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a75c67364d3484147c0643baf535845ce72a50cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75c67364d3484147c0643baf535845ce72a50cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a75c67364d3484147c0643baf535845ce72a50cc"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": null,
        "filename": "qa/pull-tester/run-bitcoind-for-test.sh.in",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/efb37d4fda0fe6001f9e112e0392cfae4338022e/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/efb37d4fda0fe6001f9e112e0392cfae4338022e/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoind-for-test.sh.in?ref=efb37d4fda0fe6001f9e112e0392cfae4338022e"
      }
    ]
  },
  {
    "sha": "a19504b9ab3702998a8cb94866d494f44ca247e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTk1MDRiOWFiMzcwMjk5OGE4Y2I5NDg2NmQ0OTRmNDRjYTI0N2U3",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-05T18:15:18Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-05T18:15:18Z"
      },
      "message": "tests-config.sh is superseded by tests_config.py",
      "tree": {
        "sha": "4652573b7a57214c6dcab08d997498b9c2cf36f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4652573b7a57214c6dcab08d997498b9c2cf36f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a19504b9ab3702998a8cb94866d494f44ca247e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19504b9ab3702998a8cb94866d494f44ca247e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a19504b9ab3702998a8cb94866d494f44ca247e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19504b9ab3702998a8cb94866d494f44ca247e7/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a75c67364d3484147c0643baf535845ce72a50cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75c67364d3484147c0643baf535845ce72a50cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a75c67364d3484147c0643baf535845ce72a50cc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a8035731d172f9a441c14db71fb3649e7d556098",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a19504b9ab3702998a8cb94866d494f44ca247e7/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a19504b9ab3702998a8cb94866d494f44ca247e7/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=a19504b9ab3702998a8cb94866d494f44ca247e7",
        "patch": "@@ -104,7 +104,7 @@ linux-coverage-build\n linux-build\n win32-build\n qa/pull-tester/run-bitcoind-for-test.sh\n-qa/pull-tester/tests-config.sh\n+qa/pull-tester/tests_config.py\n qa/pull-tester/cache/*\n qa/pull-tester/test.*/*\n "
      }
    ]
  },
  {
    "sha": "202f612a415f2b32332701bc15f28bd6fab49ebb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDJmNjEyYTQxNWYyYjMyMzMyNzAxYmMxNWYyOGJkNmZhYjQ5ZWJi",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-05T19:20:43Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-05T19:20:43Z"
      },
      "message": "The Bitcoin Core project is releasing Bitcoin Core, not Bitcoin.",
      "tree": {
        "sha": "028b25f4e55e540f91a78d373a2d29db1d7ee368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/028b25f4e55e540f91a78d373a2d29db1d7ee368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/202f612a415f2b32332701bc15f28bd6fab49ebb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202f612a415f2b32332701bc15f28bd6fab49ebb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/202f612a415f2b32332701bc15f28bd6fab49ebb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202f612a415f2b32332701bc15f28bd6fab49ebb/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a75c67364d3484147c0643baf535845ce72a50cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75c67364d3484147c0643baf535845ce72a50cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a75c67364d3484147c0643baf535845ce72a50cc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5aa8c327df5e215c1710b2b05df63dbe278c01c6",
        "filename": "README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/202f612a415f2b32332701bc15f28bd6fab49ebb/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/202f612a415f2b32332701bc15f28bd6fab49ebb/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=202f612a415f2b32332701bc15f28bd6fab49ebb",
        "patch": "@@ -1,4 +1,4 @@\n-\ufeffBitcoin Core integration/staging tree\n+Bitcoin Core integration/staging tree\n =====================================\n \n [![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n@@ -28,7 +28,7 @@ Development Process\n \n The `master` branch is regularly built and tested, but is not guaranteed to be\n completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly to indicate new official, stable release versions of Bitcoin.\n+regularly to indicate new official, stable release versions of Bitcoin Core.\n \n The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n "
      }
    ]
  },
  {
    "sha": "92049301017387cc14cd09ee04021a9f36299a97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjA0OTMwMTAxNzM4N2NjMTRjZDA5ZWUwNDAyMWE5ZjM2Mjk5YTk3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-03T12:57:41Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-05T22:12:57Z"
      },
      "message": "Document pull-req #6424 in release-notes\n\nMention now allowed sequence of pushdatas in OP_RETURN outputs in\nrelease notes.",
      "tree": {
        "sha": "fa432189987d667bd607c13615ec5e29a30ddb16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa432189987d667bd607c13615ec5e29a30ddb16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92049301017387cc14cd09ee04021a9f36299a97",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWEvX+XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAxMDczNDk1M2NlNDg2YTgyMGI2Zjc5MDdlODc5YjFiNmUz\nMGZjY2Y2MDMwOThiZWYvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udxn+ggAgXy1SBJA9mGsI8omDfZLCdJs\nNQDuVIhvkNKD/W4/im2Uw2kjLCZ+LF6zCqyr9Yhsp73fy+YPPYKQXdqlmNmFvEA2\nz086eMgGuqI0qu9DDPtgO48JEsS1EIunSsaj24qaZ72isrd2DvrfQrAYwqnxvqaj\nPyM4fzkoGIOupZ1FDIvo0QGfXwY6RT8pCIk4nAK1VUrX4VshCUHKBbNuOF73D3cD\nxjcErPikafNwPEZ2hNy393EgydkKFsg5QDr2IUFiqngkKs0dsFkUODyMGwLnbECc\n72JI2DLc2NzLRXf4KxjjXQLxFgBnWMXRFN2Fj4l1eNv4HtELmctV5DkVVeOIUg==\n=uX7C\n-----END PGP SIGNATURE-----",
        "payload": "tree fa432189987d667bd607c13615ec5e29a30ddb16\nparent 5ab5dca6f1bb1eccd47ea64834acc4fee0435b73\nauthor Peter Todd <pete@petertodd.org> 1443877061 +0200\ncommitter Peter Todd <pete@petertodd.org> 1444083177 +0200\n\nDocument pull-req #6424 in release-notes\n\nMention now allowed sequence of pushdatas in OP_RETURN outputs in\nrelease notes.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92049301017387cc14cd09ee04021a9f36299a97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92049301017387cc14cd09ee04021a9f36299a97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92049301017387cc14cd09ee04021a9f36299a97/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ab5dca6f1bb1eccd47ea64834acc4fee0435b73"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "78ab3516f6bedcc9fc715bea8fff66411993d675",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92049301017387cc14cd09ee04021a9f36299a97/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92049301017387cc14cd09ee04021a9f36299a97/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=92049301017387cc14cd09ee04021a9f36299a97",
        "patch": "@@ -105,6 +105,16 @@ In this version, it is only enforced for peers that send protocol versions\n removed. It is recommended to update SPV clients to check for the `NODE_BLOOM`\n service bit for nodes that report versions newer than 70011.\n \n+Any sequence of pushdatas in OP_RETURN outputs now allowed\n+----------------------------------------------------------\n+\n+Previously OP_RETURN outputs with a payload were only relayed and mined if they\n+had a single pushdata. This restriction has been lifted to allow any\n+combination of data pushes and numeric constant opcodes (OP_1 to OP_16). The\n+limit on OP_RETURN output size is now applied to the entire serialized\n+scriptPubKey, 83 bytes by default. (the previous 80 byte default plus three\n+bytes overhead)\n+\n Merkle branches removed from wallet\n -----------------------------------\n "
      }
    ]
  },
  {
    "sha": "9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjVjNjQxYTQwMDZiZDcxYmY0YzJkNzZjNzQ0NmNiNmU2YmZjZTQ5",
    "commit": {
      "author": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2015-10-06T03:09:04Z"
      },
      "committer": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2015-10-06T03:09:04Z"
      },
      "message": "zmq: update docs to reflect feature is compiled in automatically if possible\n\nSigned-off-by: Johnathan Corgan <johnathan@corganlabs.com>",
      "tree": {
        "sha": "d3b338e2baeb04b54624efb5e1a5c4867ecd4f12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3b338e2baeb04b54624efb5e1a5c4867ecd4f12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49",
      "comment_count": 5,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49/comments",
    "author": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ab3de8ba1a63d5ec0f97ae12e660d9730c60156"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "484b005cf471f5a53b162fc4fdef23cf39ce3655",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49",
        "patch": "@@ -43,14 +43,14 @@ operation.\n \n ## Enabling\n \n-By default, the ZeroMQ port functionality is enabled. Two steps are\n-required to enable--compiling in the ZeroMQ code, and configuring\n-runtime operation on the command-line or configuration file.\n+By default, the ZeroMQ feature is automatically compiled in if the\n+necessary prerequisites are found.  To disable, use --disable-zmq\n+during the *configure* step of building bitcoind:\n \n-    $ ./configure --enable-zmq (other options)\n+    $ ./configure --disable-zmq (other options)\n \n-This will produce a binary that is capable of providing the ZeroMQ\n-facility, but will not do so until also configured properly.\n+To actually enable operation, one must set the appropriate options on\n+the commandline or in the configuration file.\n \n ## Usage\n "
      }
    ]
  },
  {
    "sha": "b196b685c9089b74fd4ff3d9a28ea847ab36179b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMTk2YjY4NWM5MDg5Yjc0ZmQ0ZmYzZDlhMjhlYTg0N2FiMzYxNzli",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-06T03:19:12Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-06T03:50:38Z"
      },
      "message": "Test LowS in standardness, removes nuisance malleability vector.\n\nThis adds SCRIPT_VERIFY_LOW_S to STANDARD_SCRIPT_VERIFY_FLAGS which\n will make the node require the canonical 'low-s' encoding for\n ECDSA signatures when relaying or mining.\n\nConsensus behavior is unchanged.\n\nThe rational is explained in a81cd96805ce6b65cca3a40ebbd3b2eb428abb7b:\n Absent this kind of test ECDSA is not a strong signature as given\n a valid signature {r, s} both that value and {r, -s mod n} are valid.\n These two encodings have different hashes allowing third parties a\n vector to change users txids.  These attacks are avoided by picking\n a particular form as canonical and rejecting the other form(s); in\n the of the LOW_S rule, the smaller of the two possible S values is\n used.\n\nIf widely deployed this change would eliminate the last remaining\n known vector for nuisance malleability on boring SIGHASH_ALL\n p2pkh transactions.  On the down-side it will block most\n transactions made by sufficiently out of date software.\n\nUnlike the other avenues to change txids on boring transactions this\n one was randomly violated by all deployed bitcoin software prior to\n its discovery.  So, while other malleability vectors where made\n non-standard as soon as they were discovered, this one has remained\n permitted.  Even BIP62 did not propose applying this rule to\n old version transactions, but conforming implementations have become\n much more common since BIP62 was initially written.\n\nBitcoin Core has produced compatible signatures since a28fb70e in\n September 2013, but this didn't make it into a release until 0.9\n in March 2014; Bitcoinj has done so for a similar span of time.\n Bitcoinjs and electrum have been more recently updated.\n\nThis does not replace the need for BIP62 or similar, as miners can\n still cooperate to break transactions.  Nor does it replace the\n need for wallet software to handle malleability sanely[1]. This\n only eliminates the cheap and irritating DOS attack.\n\n[1] On the Malleability of Bitcoin Transactions\nMarcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\nhttp://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf",
      "tree": {
        "sha": "77d3a90524f04674d34138a6398476f31558bc27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d3a90524f04674d34138a6398476f31558bc27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b196b685c9089b74fd4ff3d9a28ea847ab36179b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b196b685c9089b74fd4ff3d9a28ea847ab36179b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b196b685c9089b74fd4ff3d9a28ea847ab36179b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b196b685c9089b74fd4ff3d9a28ea847ab36179b/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a75c67364d3484147c0643baf535845ce72a50cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75c67364d3484147c0643baf535845ce72a50cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a75c67364d3484147c0643baf535845ce72a50cc"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ea0d435adbf55ab2ac4fafdc0504219af6c674f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b196b685c9089b74fd4ff3d9a28ea847ab36179b/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b196b685c9089b74fd4ff3d9a28ea847ab36179b/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=b196b685c9089b74fd4ff3d9a28ea847ab36179b",
        "patch": "@@ -37,7 +37,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_NULLDUMMY |\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n-                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                         SCRIPT_VERIFY_LOW_S;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      }
    ]
  },
  {
    "sha": "3b2d37c61963d423c9147d342a0985ced33ae4f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjJkMzdjNjE5NjNkNDIzYzkxNDdkMzQyYTA5ODVjZWQzM2FlNGYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-05T11:43:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T07:59:19Z"
      },
      "message": "Merge pull request #6742\n\n58981d4 Changed logging to make -logtimestamps to work also for -printtoconsole (Arne Brutschy)",
      "tree": {
        "sha": "7a25583cc4b2a37868304b57681cc29f143ff9fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a25583cc4b2a37868304b57681cc29f143ff9fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b2d37c61963d423c9147d342a0985ced33ae4f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE39XAAoJEHSBCwEjRsmmC9MH/jL4oZR1+w8apzAaVBMn0XUz\n0S1etv2Tf5u6BQJi26dyZ2ATxBFEoZAd1PsxMxIZy/lbTkSENBWXOP++3fNtClhU\njDFWLex6bpK++6MiaV892mZAmXQLkurHMnoiQHeMswVtQbJ2oX+2/T3bbvUx1hPC\n15pQoHfDhjgK2HdKwlsjo0wGVuLlNJgLUUYkUOjWiEvDtkO8UopwMq8qovvEZoy6\ntmFKPzKs5/TDzWDWx3zWxwefT24seVtbnKQJ0I7Blw0/inhVowRln67EUkbhqlvL\nf/OxCacpCaZ9cH6526DzK/1IF91/W9Bg2a0PwV+mgNycvsTHNG8olQt80pEYnJc=\n=0Ki/\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a25583cc4b2a37868304b57681cc29f143ff9fe\nparent a75c67364d3484147c0643baf535845ce72a50cc\nparent 58981d4f7d3cab872239f5aa3a8125e06cb93bfd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444045433 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444118359 +0200\n\nMerge pull request #6742\n\n58981d4 Changed logging to make -logtimestamps to work also for -printtoconsole (Arne Brutschy)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b2d37c61963d423c9147d342a0985ced33ae4f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b2d37c61963d423c9147d342a0985ced33ae4f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b2d37c61963d423c9147d342a0985ced33ae4f1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a75c67364d3484147c0643baf535845ce72a50cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a75c67364d3484147c0643baf535845ce72a50cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a75c67364d3484147c0643baf535845ce72a50cc"
      },
      {
        "sha": "58981d4f7d3cab872239f5aa3a8125e06cb93bfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58981d4f7d3cab872239f5aa3a8125e06cb93bfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58981d4f7d3cab872239f5aa3a8125e06cb93bfd"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8192a7c71ca6fad3568f4e52dfa702b9cfdfd69f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b2d37c61963d423c9147d342a0985ced33ae4f1/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b2d37c61963d423c9147d342a0985ced33ae4f1/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3b2d37c61963d423c9147d342a0985ced33ae4f1",
        "patch": "@@ -280,19 +280,20 @@ int LogPrintStr(const std::string &str)\n {\n     int ret = 0; // Returns total number of characters written\n     static bool fStartedNewLine = true;\n+\n+    string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n+\n     if (fPrintToConsole)\n     {\n         // print to console\n-        ret = fwrite(str.data(), 1, str.size(), stdout);\n+        ret = fwrite(strTimestamped.data(), 1, strTimestamped.size(), stdout);\n         fflush(stdout);\n     }\n     else if (fPrintToDebugLog)\n     {\n         boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n         boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n-        string strTimestamped = LogTimestampStr(str, &fStartedNewLine);\n-\n         // buffer if we haven't opened the log yet\n         if (fileout == NULL) {\n             assert(vMsgsBeforeOpenLog);"
      }
    ]
  },
  {
    "sha": "5d98e0fa14969daac3c0da2bdf207d2025a6c8af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDk4ZTBmYTE0OTY5ZGFhYzNjMGRhMmJkZjIwN2QyMDI1YTZjOGFm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:00:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:00:51Z"
      },
      "message": "Merge pull request #6768\n\n9f5c641 zmq: update docs to reflect feature is compiled in automatically if possible (Johnathan Corgan)",
      "tree": {
        "sha": "8a9eaf74b649c6a939213364e8c988ce67671547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a9eaf74b649c6a939213364e8c988ce67671547"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d98e0fa14969daac3c0da2bdf207d2025a6c8af",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE3+zAAoJEHSBCwEjRsmmaAsIAMGH90kfLcGmHn11xDELy18o\nc7dv38JsHb35vqGeshuSfYNX2evat9q4N3L6dAP+RJoicyYqS8Fbn+y9QJehSZfn\nIJilQEFVwqj3/yuQGVeIY/ogNubT4DYpVeJbSltdIG0MzocbVXJHb1iOwDjioymh\ny3I4nt5kdwKXrnzh3LKipBGe2tpt9huVwbO52Jar8pBF5H8K0rJ3SOxrxzgizTsf\ngm9oJU2HHNmlIHc3HPzsDzFi1CXgtHDtmYTwKfxKy3DPjw30fCnrXWT4nfMoGmEA\n2nR5XEWY6H8g7KfBvSNaiyqk8QHJbXPsUl97UUy/zKM+1a+H14ooTmZxiujuWfk=\n=8N8k\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a9eaf74b649c6a939213364e8c988ce67671547\nparent 3b2d37c61963d423c9147d342a0985ced33ae4f1\nparent 9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444118436 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444118451 +0200\n\nMerge pull request #6768\n\n9f5c641 zmq: update docs to reflect feature is compiled in automatically if possible (Johnathan Corgan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d98e0fa14969daac3c0da2bdf207d2025a6c8af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d98e0fa14969daac3c0da2bdf207d2025a6c8af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d98e0fa14969daac3c0da2bdf207d2025a6c8af/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b2d37c61963d423c9147d342a0985ced33ae4f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b2d37c61963d423c9147d342a0985ced33ae4f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b2d37c61963d423c9147d342a0985ced33ae4f1"
      },
      {
        "sha": "9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f5c641a4006bd71bf4c2d76c7446cb6e6bfce49"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "484b005cf471f5a53b162fc4fdef23cf39ce3655",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d98e0fa14969daac3c0da2bdf207d2025a6c8af/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d98e0fa14969daac3c0da2bdf207d2025a6c8af/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=5d98e0fa14969daac3c0da2bdf207d2025a6c8af",
        "patch": "@@ -43,14 +43,14 @@ operation.\n \n ## Enabling\n \n-By default, the ZeroMQ port functionality is enabled. Two steps are\n-required to enable--compiling in the ZeroMQ code, and configuring\n-runtime operation on the command-line or configuration file.\n+By default, the ZeroMQ feature is automatically compiled in if the\n+necessary prerequisites are found.  To disable, use --disable-zmq\n+during the *configure* step of building bitcoind:\n \n-    $ ./configure --enable-zmq (other options)\n+    $ ./configure --disable-zmq (other options)\n \n-This will produce a binary that is capable of providing the ZeroMQ\n-facility, but will not do so until also configured properly.\n+To actually enable operation, one must set the appropriate options on\n+the commandline or in the configuration file.\n \n ## Usage\n "
      }
    ]
  },
  {
    "sha": "b6f3a4eb19ae93403f428acf7e4ff933c16144cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmYzYTRlYjE5YWU5MzQwM2Y0MjhhY2Y3ZTRmZjkzM2MxNjE0NGNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:01:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:01:42Z"
      },
      "message": "Merge pull request #6751\n\n9204930 Document pull-req #6424 in release-notes (Peter Todd)",
      "tree": {
        "sha": "8fc3d47bedfa735ea0c5667806655813b69fc8b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fc3d47bedfa735ea0c5667806655813b69fc8b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6f3a4eb19ae93403f428acf7e4ff933c16144cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE3/mAAoJEHSBCwEjRsmmltgH/jUqF7YqMg5ZLCx4HODaF2tl\nCeOYMrMFfZL5dRSwgjVrWCeip27rJWRiAzz/RJW2sRhxxOHuQGNCvQssCRIX0WAY\nMK+CyODe/izz3Y9y7nO/3KD6eCOeiuujhyCu2SMsDzvpQqsuo2i2GFYDH99QNS2p\n0Dk19Gua1lcEh/nasb2779JYwd9VOxCWTqvvwDtD0pbnh1PADArCy1pB/6TnT53l\ne9YPxBahQSay1RGO6RvnVgC2Gj5IrlKvwUShMCi5lfbVnGBMvXeFUNCyVO3aTYXl\nAh1xDE6vP7MhIUnf0Pe8OXYAJJK3IRMHAw2IbBNagFWFr/TEreFh6hAXG4AHXWM=\n=XANN\n-----END PGP SIGNATURE-----",
        "payload": "tree 8fc3d47bedfa735ea0c5667806655813b69fc8b2\nparent 5d98e0fa14969daac3c0da2bdf207d2025a6c8af\nparent 92049301017387cc14cd09ee04021a9f36299a97\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444118483 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444118502 +0200\n\nMerge pull request #6751\n\n9204930 Document pull-req #6424 in release-notes (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f3a4eb19ae93403f428acf7e4ff933c16144cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6f3a4eb19ae93403f428acf7e4ff933c16144cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f3a4eb19ae93403f428acf7e4ff933c16144cf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d98e0fa14969daac3c0da2bdf207d2025a6c8af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d98e0fa14969daac3c0da2bdf207d2025a6c8af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d98e0fa14969daac3c0da2bdf207d2025a6c8af"
      },
      {
        "sha": "92049301017387cc14cd09ee04021a9f36299a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92049301017387cc14cd09ee04021a9f36299a97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92049301017387cc14cd09ee04021a9f36299a97"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 10,
      "deletions": 0
    },
    "files": [
      {
        "sha": "78ab3516f6bedcc9fc715bea8fff66411993d675",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6f3a4eb19ae93403f428acf7e4ff933c16144cf/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6f3a4eb19ae93403f428acf7e4ff933c16144cf/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=b6f3a4eb19ae93403f428acf7e4ff933c16144cf",
        "patch": "@@ -105,6 +105,16 @@ In this version, it is only enforced for peers that send protocol versions\n removed. It is recommended to update SPV clients to check for the `NODE_BLOOM`\n service bit for nodes that report versions newer than 70011.\n \n+Any sequence of pushdatas in OP_RETURN outputs now allowed\n+----------------------------------------------------------\n+\n+Previously OP_RETURN outputs with a payload were only relayed and mined if they\n+had a single pushdata. This restriction has been lifted to allow any\n+combination of data pushes and numeric constant opcodes (OP_1 to OP_16). The\n+limit on OP_RETURN output size is now applied to the entire serialized\n+scriptPubKey, 83 bytes by default. (the previous 80 byte default plus three\n+bytes overhead)\n+\n Merkle branches removed from wallet\n -----------------------------------\n "
      }
    ]
  },
  {
    "sha": "79529e50dbe431934a4ea8d715ff528e55e6eb85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTUyOWU1MGRiZTQzMTkzNGE0ZWE4ZDcxNWZmNTI4ZTU1ZTZlYjg1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:02:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:02:18Z"
      },
      "message": "Merge pull request #6763\n\n202f612 The Bitcoin Core project is releasing Bitcoin Core, not Bitcoin. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "4cafe5f5b704760f345e37a2621ed8bbecc83969",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cafe5f5b704760f345e37a2621ed8bbecc83969"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/79529e50dbe431934a4ea8d715ff528e55e6eb85",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE4AKAAoJEHSBCwEjRsmmPqUIAJ7VyYy66EUDva4qWXoAkpnj\nj3FEty05Aviu9QQe7bOXU2SLkHuLt5KOtmnhNy97zttVxb/UWptspDpsV5jTiJaw\nEJFFHOZ1Rfo572VM33mt7va7TxY0u8KMdYQvZoehYKa3NaeYIWIn3CVpvucro9GJ\nOHLcJDKy0A/CTca/MId4WzaU41eifOAmEgWGOD5vfODSaoloiDrji48NAIZhmG5A\nd1rFqowUId035Y3xIaamlft/oGlyhtGHXI1pxwuvBSLiGdzT1DM4p9lLtudhZFFI\nRjv6b6za6uTjQUCcrF5hoMgahY+XWCcw9loRqm4vguIwJxz5vV73zhjKHT9RTl8=\n=O3lm\n-----END PGP SIGNATURE-----",
        "payload": "tree 4cafe5f5b704760f345e37a2621ed8bbecc83969\nparent b6f3a4eb19ae93403f428acf7e4ff933c16144cf\nparent 202f612a415f2b32332701bc15f28bd6fab49ebb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444118530 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444118538 +0200\n\nMerge pull request #6763\n\n202f612 The Bitcoin Core project is releasing Bitcoin Core, not Bitcoin. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79529e50dbe431934a4ea8d715ff528e55e6eb85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/79529e50dbe431934a4ea8d715ff528e55e6eb85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79529e50dbe431934a4ea8d715ff528e55e6eb85/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6f3a4eb19ae93403f428acf7e4ff933c16144cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6f3a4eb19ae93403f428acf7e4ff933c16144cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6f3a4eb19ae93403f428acf7e4ff933c16144cf"
      },
      {
        "sha": "202f612a415f2b32332701bc15f28bd6fab49ebb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/202f612a415f2b32332701bc15f28bd6fab49ebb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/202f612a415f2b32332701bc15f28bd6fab49ebb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5aa8c327df5e215c1710b2b05df63dbe278c01c6",
        "filename": "README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/79529e50dbe431934a4ea8d715ff528e55e6eb85/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/79529e50dbe431934a4ea8d715ff528e55e6eb85/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=79529e50dbe431934a4ea8d715ff528e55e6eb85",
        "patch": "@@ -1,4 +1,4 @@\n-\ufeffBitcoin Core integration/staging tree\n+Bitcoin Core integration/staging tree\n =====================================\n \n [![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n@@ -28,7 +28,7 @@ Development Process\n \n The `master` branch is regularly built and tested, but is not guaranteed to be\n completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly to indicate new official, stable release versions of Bitcoin.\n+regularly to indicate new official, stable release versions of Bitcoin Core.\n \n The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n "
      }
    ]
  },
  {
    "sha": "0a5385b23f33408a3356720d11f229d1d40ba8b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTUzODViMjNmMzM0MDhhMzM1NjcyMGQxMWYyMjlkMWQ0MGJhOGI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:03:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:03:25Z"
      },
      "message": "Merge pull request #6760\n\nefb37d4 Changed run-bitcoind-for-test.sh.in to non-executable mode. Consistency with other *.in input files. (randy-waterhouse)",
      "tree": {
        "sha": "ae911c912883d0c48ddaf0e27ef8d8ccb02047c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae911c912883d0c48ddaf0e27ef8d8ccb02047c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a5385b23f33408a3356720d11f229d1d40ba8b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE4BNAAoJEHSBCwEjRsmmg6MIAMyGIDHacuKLf3i6d3yYpLuU\ntY6CakqDWUkP4LzMSLG8kKReZcZEfLpnzvEAK9S5z9n7FBkHHDcbzx0JaThwXGld\nNxM9KT7tIYdTSelhEjs9Rj6eSZL3zRQeS0T9bsgJtZBLagFr1yMciMXzZcDgXIUv\nsEKTDrYiLMv3koTkSTWHSfCMuu7e08RTbNXE815z2EQ/r43ZCOy7Byje2VdjiFWW\nC26u/pHsMKyrZemgMLOoPODUG9kyXqjvdQve6tlzy4xV/apOjfsdOD2iG60OqEhC\noDimXMljTrtTARLZ03RZxT1Xq8nBTV21ON0isMIN3G9BpNbYOXM2KkUpB4LqXiE=\n=UPAH\n-----END PGP SIGNATURE-----",
        "payload": "tree ae911c912883d0c48ddaf0e27ef8d8ccb02047c0\nparent 79529e50dbe431934a4ea8d715ff528e55e6eb85\nparent efb37d4fda0fe6001f9e112e0392cfae4338022e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444118592 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444118605 +0200\n\nMerge pull request #6760\n\nefb37d4 Changed run-bitcoind-for-test.sh.in to non-executable mode. Consistency with other *.in input files. (randy-waterhouse)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5385b23f33408a3356720d11f229d1d40ba8b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5385b23f33408a3356720d11f229d1d40ba8b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5385b23f33408a3356720d11f229d1d40ba8b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79529e50dbe431934a4ea8d715ff528e55e6eb85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79529e50dbe431934a4ea8d715ff528e55e6eb85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79529e50dbe431934a4ea8d715ff528e55e6eb85"
      },
      {
        "sha": "efb37d4fda0fe6001f9e112e0392cfae4338022e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/efb37d4fda0fe6001f9e112e0392cfae4338022e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/efb37d4fda0fe6001f9e112e0392cfae4338022e"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": null,
        "filename": "qa/pull-tester/run-bitcoind-for-test.sh.in",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5385b23f33408a3356720d11f229d1d40ba8b5/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5385b23f33408a3356720d11f229d1d40ba8b5/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoind-for-test.sh.in?ref=0a5385b23f33408a3356720d11f229d1d40ba8b5"
      }
    ]
  },
  {
    "sha": "bdece5068bc741bf2bae37f7170b298e3d853715",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGVjZTUwNjhiYzc0MWJmMmJhZTM3ZjcxNzBiMjk4ZTNkODUzNzE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:04:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:04:55Z"
      },
      "message": "Merge pull request #6743\n\ndd28089 autotools: move checking for zmq library to common area in configure.ac (Johnathan Corgan)",
      "tree": {
        "sha": "bfbf0ad671d7b61d3cf0a00ea78efcee38ddd905",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfbf0ad671d7b61d3cf0a00ea78efcee38ddd905"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdece5068bc741bf2bae37f7170b298e3d853715",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE4CnAAoJEHSBCwEjRsmm3qEIAIsdi0xxmWr3LLoKrpWDFRm7\nFiw0RRQ48o+trxNUv5GHX839YiSD5EzbAX9xy8P1nqqYgW21TaYBDpK1kc+GBaSA\nyPtapaTLGdlHCPxpk8FUuoPoZceryUkPs2cg14jK1MfZWFf9cT3A0k/7C+GMuxNK\nm0pdQpzKxIfu6LJwL8sWINsWT+PE/EMMiSebRwFUD/wRvQurGWDMWaHyLAqwVfQf\nVM6JBUBjV70Rdm4E4tbAB81roUmTboiW9z3kSxvL9qo2qkb23d+ZDHL4nvKYbqxQ\nszVsGGSl3rK1os/+Vav04cTm1qA0D3Kdm6tztFFLKztE6g9clnn7Lb4Cmvv7L5E=\n=zuR/\n-----END PGP SIGNATURE-----",
        "payload": "tree bfbf0ad671d7b61d3cf0a00ea78efcee38ddd905\nparent 0a5385b23f33408a3356720d11f229d1d40ba8b5\nparent dd28089fa23b1d91cc0799433904b8467fdc1880\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444118686 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444118695 +0200\n\nMerge pull request #6743\n\ndd28089 autotools: move checking for zmq library to common area in configure.ac (Johnathan Corgan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdece5068bc741bf2bae37f7170b298e3d853715",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdece5068bc741bf2bae37f7170b298e3d853715",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdece5068bc741bf2bae37f7170b298e3d853715/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a5385b23f33408a3356720d11f229d1d40ba8b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5385b23f33408a3356720d11f229d1d40ba8b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5385b23f33408a3356720d11f229d1d40ba8b5"
      },
      {
        "sha": "dd28089fa23b1d91cc0799433904b8467fdc1880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd28089fa23b1d91cc0799433904b8467fdc1880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd28089fa23b1d91cc0799433904b8467fdc1880"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 24,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c28c4d11e3ad8b446787feb831a5ecc0beaf3758",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 24,
        "deletions": 14,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdece5068bc741bf2bae37f7170b298e3d853715/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdece5068bc741bf2bae37f7170b298e3d853715/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=bdece5068bc741bf2bae37f7170b298e3d853715",
        "patch": "@@ -676,6 +676,16 @@ if test x$use_pkgconfig = xyes; then\n           PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads],, [AC_MSG_ERROR(libevent_pthreads not found.)])\n         fi\n       fi\n+\n+      if test \"x$use_zmq\" = \"xyes\"; then\n+        PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n+          [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+          [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+           AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n+           use_zmq=no])\n+      else\n+          AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+      fi\n     ]\n   )\n else\n@@ -693,6 +703,20 @@ else\n     fi\n   fi\n \n+  if test \"x$use_zmq\" = \"xyes\"; then\n+     AC_CHECK_HEADER([zmq.h],\n+       [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+       [AC_MSG_WARN([zmq.h not found, disabling zmq support])\n+        use_zmq=no\n+        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n+     AC_CHECK_LIB([zmq],[zmq_ctx_shutdown],ZMQ_LIBS=-lzmq,\n+       [AC_MSG_WARN([libzmq >= 4.0 not found, disabling zmq support])\n+        use_zmq=no\n+        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n+  else\n+    AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+  fi\n+\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([protobuf] ,[main],[PROTOBUF_LIBS=-lprotobuf], BITCOIN_QT_FAIL(libprotobuf not found)))\n   if test x$use_qr != xno; then\n     BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n@@ -824,20 +848,6 @@ if test x$bitcoin_enable_qt != xno; then\n   fi\n fi\n \n-# conditional search for and use libzmq\n-AC_MSG_CHECKING([whether to build ZMQ support])\n-if test \"x$use_zmq\" = \"xyes\"; then\n-  AC_MSG_RESULT([yes])\n-  PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n-    [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n-    [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n-     AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n-     use_zmq=no])\n-else\n-  AC_MSG_RESULT([no, --disable-zmq used])\n-  AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n-fi\n-\n AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n \n AC_MSG_CHECKING([whether to build test_bitcoin])"
      }
    ]
  },
  {
    "sha": "66a86a3edb94e4769dd318f49dbe3f306274aa2c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmE4NmEzZWRiOTRlNDc2OWRkMzE4ZjQ5ZGJlM2YzMDYyNzRhYTJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:06:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T08:07:04Z"
      },
      "message": "Merge pull request #6762\n\na19504b tests-config.sh is superseded by tests_config.py (Pavel Jan\u00edk)",
      "tree": {
        "sha": "ac9ce3252bd8d0d5b4c9d003e9ef5b060d5eca8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ac9ce3252bd8d0d5b4c9d003e9ef5b060d5eca8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66a86a3edb94e4769dd318f49dbe3f306274aa2c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEbBAABCgAGBQJWE4EoAAoJEHSBCwEjRsmmfK4H91ZdrjZbdbiekQGDOdH43gZW\n7yTesl7G2pe/dNgxB6nhgVQcISNiofb575vWx5HV3tW3nu+IfAhtYSme0NTg1DXM\n09yvdwR2OCzhBHYHWsEKzO3xt9y/8IQUW/Yx1AdNuBtSV8jJ2v0WyeZlr8olyj57\nS9Wb22ehezG9lb5r1xRWYQ3Zc2UStGdi1mqR2iY1GsiekjNVt7GkYxgPPwDcRtw6\nZLdLTWELHixGQAPxYB2m4bbjsrdMSzpardHSoIaHZjgmOM4OkjgxuX0oujAf54WZ\nBNIfqufOVZZdOmjdul/bUK+rI3z2Mbfwg8GQILMPk6juOoU/fXS9PHLg4Dv5JQ==\n=ZaUd\n-----END PGP SIGNATURE-----",
        "payload": "tree ac9ce3252bd8d0d5b4c9d003e9ef5b060d5eca8c\nparent bdece5068bc741bf2bae37f7170b298e3d853715\nparent a19504b9ab3702998a8cb94866d494f44ca247e7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444118807 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444118824 +0200\n\nMerge pull request #6762\n\na19504b tests-config.sh is superseded by tests_config.py (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66a86a3edb94e4769dd318f49dbe3f306274aa2c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66a86a3edb94e4769dd318f49dbe3f306274aa2c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66a86a3edb94e4769dd318f49dbe3f306274aa2c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdece5068bc741bf2bae37f7170b298e3d853715",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdece5068bc741bf2bae37f7170b298e3d853715",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdece5068bc741bf2bae37f7170b298e3d853715"
      },
      {
        "sha": "a19504b9ab3702998a8cb94866d494f44ca247e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a19504b9ab3702998a8cb94866d494f44ca247e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a19504b9ab3702998a8cb94866d494f44ca247e7"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a8035731d172f9a441c14db71fb3649e7d556098",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66a86a3edb94e4769dd318f49dbe3f306274aa2c/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66a86a3edb94e4769dd318f49dbe3f306274aa2c/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=66a86a3edb94e4769dd318f49dbe3f306274aa2c",
        "patch": "@@ -104,7 +104,7 @@ linux-coverage-build\n linux-build\n win32-build\n qa/pull-tester/run-bitcoind-for-test.sh\n-qa/pull-tester/tests-config.sh\n+qa/pull-tester/tests_config.py\n qa/pull-tester/cache/*\n qa/pull-tester/test.*/*\n "
      }
    ]
  },
  {
    "sha": "b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiN2Q3OGZkMGJkMjQ0YjMyNGRlZDQxMzFjMWRkMGVjODFhODdkMTVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T14:22:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T14:34:23Z"
      },
      "message": "Merge pull request #6733\n\n7072c54 Support very-fast-running benchmarks (Gavin Andresen)\n535ed92 Simple benchmarking framework (Gavin Andresen)",
      "tree": {
        "sha": "4f7a368c21fe6fb44ba61aeb2837429cb39ce27b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f7a368c21fe6fb44ba61aeb2837429cb39ce27b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE9vvAAoJEHSBCwEjRsmm2jkH/jKi0UHuYW2FUujvUj8DpRnR\nQJENl1osiZGIc/qG2E1gI+oK+1eVlrCWxl8vDq13S2lefkAiLJheq1fL10Iny9Fa\n6V3/59FDHqRhBSeOxWcNEDVXLaM6f2hPpjq2yh7ioTq4IDBnW/WnCFzuAZD+Rgpm\nIqzdZe9Oe4FNDDxcDCpuQLJmGkyBJZUdexWAy29GrJ1mgMUJWanqx0DnExzGS3m/\nzPxJJebp4KME68HVsjqCQS3Dk1Unm0H4ore6tcj0ouLrTV1KCxwNjOXOgvhicTEF\nD+OzZ++4cNMjGc7kTPNYY8QSqAM5DNM/V6yBLYStxanFbFxahQhRqWAQNG/KHOA=\n=vlJx\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f7a368c21fe6fb44ba61aeb2837429cb39ce27b\nparent 66a86a3edb94e4769dd318f49dbe3f306274aa2c\nparent 7072c544b52774ac5a22835121e8e2747ad61158\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444141323 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444142063 +0200\n\nMerge pull request #6733\n\n7072c54 Support very-fast-running benchmarks (Gavin Andresen)\n535ed92 Simple benchmarking framework (Gavin Andresen)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "66a86a3edb94e4769dd318f49dbe3f306274aa2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66a86a3edb94e4769dd318f49dbe3f306274aa2c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/66a86a3edb94e4769dd318f49dbe3f306274aa2c"
      },
      {
        "sha": "7072c544b52774ac5a22835121e8e2747ad61158",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7072c544b52774ac5a22835121e8e2747ad61158",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7072c544b52774ac5a22835121e8e2747ad61158"
      }
    ],
    "stats": {
      "total": 250,
      "additions": 250,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4318aafa559785ff53d00342fc30de04baca625b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "patch": "@@ -91,6 +91,11 @@ AC_ARG_ENABLE(tests,\n     [use_tests=$enableval],\n     [use_tests=yes])\n \n+AC_ARG_ENABLE(bench,\n+    AS_HELP_STRING([--enable-bench],[compile benchmarks (default is yes)]),\n+    [use_bench=$enableval],\n+    [use_bench=yes])\n+\n AC_ARG_WITH([comparison-tool],\n     AS_HELP_STRING([--with-comparison-tool],[path to java comparison tool (requires --enable-tests)]),\n     [use_comparison_tool=$withval],\n@@ -876,6 +881,7 @@ AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$use_tests$bitcoin_enable_qt_test = xyesyes])\n+AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])"
      },
      {
        "sha": "c3f19926df7c3d06e26de03a0b2e3a49ea3d1e2a",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "patch": "@@ -64,6 +64,7 @@ endif\n \n bin_PROGRAMS =\n TESTS =\n+BENCHMARKS =\n \n if BUILD_BITCOIND\n   bin_PROGRAMS += bitcoind\n@@ -439,6 +440,10 @@ if ENABLE_TESTS\n include Makefile.test.include\n endif\n \n+if ENABLE_BENCH\n+include Makefile.bench.include\n+endif\n+\n if ENABLE_QT\n include Makefile.qt.include\n endif"
      },
      {
        "sha": "61fe9e287d80e7597009014d6dd7fa7e0c5eeedf",
        "filename": "src/Makefile.bench.include",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "patch": "@@ -0,0 +1,45 @@\n+bin_PROGRAMS += bench/bench_bitcoin\n+BENCH_SRCDIR = bench\n+BENCH_BINARY = bench/bench_bitcoin$(EXEEXT)\n+\n+\n+bench_bench_bitcoin_SOURCES = \\\n+  bench/bench_bitcoin.cpp \\\n+  bench/bench.cpp \\\n+  bench/bench.h \\\n+  bench/Examples.cpp\n+\n+bench_bench_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n+bench_bench_bitcoin_LDADD = \\\n+  $(LIBBITCOIN_SERVER) \\\n+  $(LIBBITCOIN_COMMON) \\\n+  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBBITCOIN_UTIL) \\\n+  $(LIBBITCOIN_CRYPTO) \\\n+  $(LIBLEVELDB) \\\n+  $(LIBMEMENV) \\\n+  $(LIBSECP256K1)\n+\n+if ENABLE_ZMQ\n+bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n+endif\n+\n+if ENABLE_WALLET\n+bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n+endif\n+\n+bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n+bench_bench_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+\n+\n+CLEAN_BITCOIN_BENCH = bench/*.gcda bench/*.gcno\n+\n+CLEANFILES += $(CLEAN_BITCOIN_BENCH)\n+\n+bitcoin_bench: $(BENCH_BINARY)\n+\n+bench: $(BENCH_BINARY) FORCE\n+\t$(BENCH_BINARY)\n+\n+bitcoin_bench_clean : FORCE\n+\trm -f $(CLEAN_BITCOIN_BENCH) $(bench_bench_bitcoin_OBJECTS) $(BENCH_BINARY)"
      },
      {
        "sha": "b6b020a97189d84e93d24a8a7d88fff17859aa43",
        "filename": "src/bench/Examples.cpp",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/Examples.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/Examples.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/Examples.cpp?ref=b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"main.h\"\n+#include \"utiltime.h\"\n+\n+// Sanity test: this should loop ten times, and\n+// min/max/average should be close to 100ms.\n+static void Sleep100ms(benchmark::State& state)\n+{\n+    while (state.KeepRunning()) {\n+        MilliSleep(100);\n+    }\n+}\n+\n+BENCHMARK(Sleep100ms);\n+\n+// Extremely fast-running benchmark:\n+#include <math.h>\n+\n+volatile double sum = 0.0; // volatile, global so not optimized away\n+\n+static void Trig(benchmark::State& state)\n+{\n+    double d = 0.01;\n+    while (state.KeepRunning()) {\n+        sum += sin(d);\n+        d += 0.000001;\n+    }\n+}\n+\n+BENCHMARK(Trig);"
      },
      {
        "sha": "89c3b0cc2a1b7054d00cfb6b33c50f88ffd7c329",
        "filename": "src/bench/bench.cpp",
        "status": "added",
        "additions": 68,
        "deletions": 0,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "patch": "@@ -0,0 +1,68 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"bench.h\"\n+#include <iostream>\n+#include <sys/time.h>\n+\n+using namespace benchmark;\n+\n+std::map<std::string, BenchFunction> BenchRunner::benchmarks;\n+\n+static double gettimedouble(void) {\n+    struct timeval tv;\n+    gettimeofday(&tv, NULL);\n+    return tv.tv_usec * 0.000001 + tv.tv_sec;\n+}\n+\n+BenchRunner::BenchRunner(std::string name, BenchFunction func)\n+{\n+    benchmarks.insert(std::make_pair(name, func));\n+}\n+\n+void\n+BenchRunner::RunAll(double elapsedTimeForOne)\n+{\n+    std::cout << \"Benchmark\" << \",\" << \"count\" << \",\" << \"min\" << \",\" << \"max\" << \",\" << \"average\" << \"\\n\";\n+\n+    for (std::map<std::string,BenchFunction>::iterator it = benchmarks.begin();\n+         it != benchmarks.end(); ++it) {\n+\n+        State state(it->first, elapsedTimeForOne);\n+        BenchFunction& func = it->second;\n+        func(state);\n+    }\n+}\n+\n+bool State::KeepRunning()\n+{\n+    double now;\n+    if (count == 0) {\n+        beginTime = now = gettimedouble();\n+    }\n+    else {\n+        // timeCheckCount is used to avoid calling gettime most of the time,\n+        // so benchmarks that run very quickly get consistent results.\n+        if ((count+1)%timeCheckCount != 0) {\n+            ++count;\n+            return true; // keep going\n+        }\n+        now = gettimedouble();\n+        double elapsedOne = (now - lastTime)/timeCheckCount;\n+        if (elapsedOne < minTime) minTime = elapsedOne;\n+        if (elapsedOne > maxTime) maxTime = elapsedOne;\n+        if (elapsedOne*timeCheckCount < maxElapsed/16) timeCheckCount *= 2;\n+    }\n+    lastTime = now;\n+    ++count;\n+\n+    if (now - beginTime < maxElapsed) return true; // Keep going\n+\n+    --count;\n+\n+    // Output results\n+    double average = (now-beginTime)/count;\n+    std::cout << name << \",\" << count << \",\" << minTime << \",\" << maxTime << \",\" << average << \"\\n\";\n+\n+    return false;\n+}"
      },
      {
        "sha": "bf591a2be6ff59d67181abf8ddd13f45349789dd",
        "filename": "src/bench/bench.h",
        "status": "added",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "patch": "@@ -0,0 +1,71 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef BITCOIN_BENCH_H\n+#define BITCOIN_BENCH_H\n+\n+// Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n+// framework (see https://github.com/google/benchmark)\n+// Wny not use the Google Benchmark framework? Because adding Yet Another Dependency\n+// (that uses cmake as its build system and has lots of features we don't need) isn't\n+// worth it.\n+\n+/*\n+ * Usage:\n+\n+static void CODE_TO_TIME(benchmark::State& state)\n+{\n+    ... do any setup needed...\n+    while (state.KeepRunning()) {\n+       ... do stuff you want to time...\n+    }\n+    ... do any cleanup needed...\n+}\n+\n+BENCHMARK(CODE_TO_TIME);\n+\n+ */\n+\n+\n+#include <boost/function.hpp>\n+#include <boost/preprocessor/cat.hpp>\n+#include <boost/preprocessor/stringize.hpp>\n+#include <map>\n+#include <string>\n+\n+namespace benchmark {\n+\n+    class State {\n+        std::string name;\n+        double maxElapsed;\n+        double beginTime;\n+        double lastTime, minTime, maxTime;\n+        int64_t count;\n+        int64_t timeCheckCount;\n+    public:\n+        State(std::string _name, double _maxElapsed) : name(_name), maxElapsed(_maxElapsed), count(0) {\n+            minTime = std::numeric_limits<double>::max();\n+            maxTime = std::numeric_limits<double>::min();\n+            timeCheckCount = 1;\n+        }\n+        bool KeepRunning();\n+    };\n+\n+    typedef boost::function<void(State&)> BenchFunction;\n+\n+    class BenchRunner\n+    {\n+        static std::map<std::string, BenchFunction> benchmarks;\n+\n+    public:\n+        BenchRunner(std::string name, BenchFunction func);\n+\n+        static void RunAll(double elapsedTimeForOne=1.0);\n+    };\n+}\n+\n+// BENCHMARK(foo) expands to:  benchmark::BenchRunner bench_11foo(\"foo\", foo);\n+#define BENCHMARK(n) \\\n+    benchmark::BenchRunner BOOST_PP_CAT(bench_, BOOST_PP_CAT(__LINE__, n))(BOOST_PP_STRINGIZE(n), n);\n+\n+#endif // BITCOIN_BENCH_H"
      },
      {
        "sha": "db1402216d823a93165fe2af90520f2bf41265bf",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "patch": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"key.h\"\n+#include \"main.h\"\n+#include \"util.h\"\n+\n+int\n+main(int argc, char** argv)\n+{\n+    ECC_Start();\n+    SetupEnvironment();\n+    fPrintToDebugLog = false; // don't want to write to debug.log file\n+\n+    benchmark::BenchRunner::RunAll();\n+\n+    ECC_Stop();\n+}"
      }
    ]
  },
  {
    "sha": "42cb388167ef78f47a3a440eb651b6938c10f508",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmNiMzg4MTY3ZWY3OGY0N2EzYTQ0MGViNjUxYjY5MzhjMTBmNTA4",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-09-07T22:22:23Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-06T14:46:10Z"
      },
      "message": "Add chainstate obfuscation to avoid spurious antivirus detection\n\nAdds an `obfuscate` parameter to `CLevelDBWrapper` and makes use of it\nfor all new chainstate stores built via `CCoinsViewDB`. Also adds an\n`Xor` method to `CDataStream`.\n\nThanks to @sipa @laanwj @pstratem @dexX7 @KyrosKrane @gmaxwell.",
      "tree": {
        "sha": "5030db533bf8e2c8231b9df00865528a6f6b5706",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5030db533bf8e2c8231b9df00865528a6f6b5706"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42cb388167ef78f47a3a440eb651b6938c10f508",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cb388167ef78f47a3a440eb651b6938c10f508",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42cb388167ef78f47a3a440eb651b6938c10f508",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cb388167ef78f47a3a440eb651b6938c10f508/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3932ff50c563df19c14e9987f2297d9f99a299ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3932ff50c563df19c14e9987f2297d9f99a299ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3932ff50c563df19c14e9987f2297d9f99a299ac"
      }
    ],
    "stats": {
      "total": 360,
      "additions": 338,
      "deletions": 22
    },
    "files": [
      {
        "sha": "7107235a8ae095e11b8d8ca71a3708c7bd18a6dc",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cb388167ef78f47a3a440eb651b6938c10f508/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=42cb388167ef78f47a3a440eb651b6938c10f508",
        "patch": "@@ -53,6 +53,7 @@ BITCOIN_TESTS =\\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n+  test/leveldbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\\n@@ -72,6 +73,7 @@ BITCOIN_TESTS =\\\n   test/sighash_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n+  test/streams_tests.cpp \\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\"
      },
      {
        "sha": "ce96b5c8aa632d8300841c9967e7590bf30f7882",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cb388167ef78f47a3a440eb651b6938c10f508/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=42cb388167ef78f47a3a440eb651b6938c10f508",
        "patch": "@@ -5,13 +5,15 @@\n #include \"leveldbwrapper.h\"\n \n #include \"util.h\"\n+#include \"random.h\"\n \n #include <boost/filesystem.hpp>\n \n #include <leveldb/cache.h>\n #include <leveldb/env.h>\n #include <leveldb/filter_policy.h>\n #include <memenv.h>\n+#include <stdint.h>\n \n void HandleError(const leveldb::Status& status) throw(leveldb_error)\n {\n@@ -43,7 +45,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe)\n+CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n@@ -67,6 +69,25 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n     HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n+\n+    // The base-case obfuscation key, which is a noop.\n+    obfuscate_key = std::vector<unsigned char>(OBFUSCATE_KEY_NUM_BYTES, '\\000');\n+\n+    bool key_exists = Read(OBFUSCATE_KEY_KEY, obfuscate_key);\n+\n+    if (!key_exists && obfuscate && IsEmpty()) {\n+        // Initialize non-degenerate obfuscation if it won't upset \n+        // existing, non-obfuscated data.\n+        std::vector<unsigned char> new_key = CreateObfuscateKey();\n+\n+        // Write `new_key` so we don't obfuscate the key with itself\n+        Write(OBFUSCATE_KEY_KEY, new_key);\n+        obfuscate_key = new_key;\n+\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+    }\n+\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n }\n \n CLevelDBWrapper::~CLevelDBWrapper()\n@@ -87,3 +108,40 @@ bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb\n     HandleError(status);\n     return true;\n }\n+\n+// Prefixed with null character to avoid collisions with other keys\n+//\n+// We must use a string constructor which specifies length so that we copy\n+// past the null-terminator.\n+const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n+\n+const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n+\n+/**\n+ * Returns a string (consisting of 8 random bytes) suitable for use as an \n+ * obfuscating XOR key. \n+ */\n+std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const \n+{\n+    unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n+    GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n+    return std::vector<unsigned char>(&buff[0], &buff[OBFUSCATE_KEY_NUM_BYTES]);\n+\n+}\n+\n+bool CLevelDBWrapper::IsEmpty()\n+{\n+    boost::scoped_ptr<leveldb::Iterator> it(NewIterator());\n+    it->SeekToFirst();\n+    return !(it->Valid());\n+}\n+\n+const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const \n+{ \n+    return obfuscate_key; \n+}\n+\n+std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n+{ \n+    return HexStr(obfuscate_key); \n+}"
      },
      {
        "sha": "f5c463830cbddb5fb0898bfa839e81b1a5d774c2",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cb388167ef78f47a3a440eb651b6938c10f508/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=42cb388167ef78f47a3a440eb651b6938c10f508",
        "patch": "@@ -9,6 +9,7 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <boost/filesystem/path.hpp>\n@@ -31,8 +32,14 @@ class CLevelDBBatch\n \n private:\n     leveldb::WriteBatch batch;\n+    const std::vector<unsigned char> obfuscate_key;\n \n public:\n+    /**\n+     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     */\n+    CLevelDBBatch(const std::vector<unsigned char>& obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+\n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n     {\n@@ -44,6 +51,7 @@ class CLevelDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n+        ssValue.Xor(obfuscate_key);\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -85,8 +93,27 @@ class CLevelDBWrapper\n     //! the database itself\n     leveldb::DB* pdb;\n \n+    //! a key used for optional XOR-obfuscation of the database\n+    std::vector<unsigned char> obfuscate_key;\n+\n+    //! the key under which the obfuscation key is stored\n+    static const std::string OBFUSCATE_KEY_KEY;\n+    \n+    //! the length of the obfuscate key in number of bytes\n+    static const unsigned int OBFUSCATE_KEY_NUM_BYTES;\n+    \n+    std::vector<unsigned char> CreateObfuscateKey() const;\n+\n public:\n-    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    /**\n+     * @param[in] path        Location in the filesystem where leveldb data will be stored.\n+     * @param[in] nCacheSize  Configures various leveldb cache settings.\n+     * @param[in] fMemory     If true, use leveldb's memory environment.\n+     * @param[in] fWipe       If true, remove all existing data.\n+     * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n+     *                        with a zero'd byte array.\n+     */\n+    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CLevelDBWrapper();\n \n     template <typename K, typename V>\n@@ -107,6 +134,7 @@ class CLevelDBWrapper\n         }\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue.Xor(obfuscate_key);\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -117,7 +145,7 @@ class CLevelDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -144,7 +172,7 @@ class CLevelDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -159,7 +187,7 @@ class CLevelDBWrapper\n \n     bool Sync() throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n@@ -168,6 +196,23 @@ class CLevelDBWrapper\n     {\n         return pdb->NewIterator(iteroptions);\n     }\n+\n+    /**\n+     * Return true if the database managed by this class contains no entries.\n+     */\n+    bool IsEmpty();\n+\n+    /**\n+     * Accessor for obfuscate_key.\n+     */\n+    const std::vector<unsigned char>& GetObfuscateKey() const;\n+\n+    /**\n+     * Return the obfuscate_key as a hex-formatted string.\n+     */\n+    std::string GetObfuscateKeyHex() const;\n+\n };\n \n #endif // BITCOIN_LEVELDBWRAPPER_H\n+"
      },
      {
        "sha": "8610e4d18e612b71a7ae1501153f356275dd8864",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cb388167ef78f47a3a440eb651b6938c10f508/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=42cb388167ef78f47a3a440eb651b6938c10f508",
        "patch": "@@ -296,6 +296,29 @@ class CDataStream\n         data.insert(data.end(), begin(), end());\n         clear();\n     }\n+\n+    /**\n+     * XOR the contents of this stream with a certain key.\n+     *\n+     * @param[in] key    The key used to XOR the data in this stream.\n+     */\n+    void Xor(const std::vector<unsigned char>& key)\n+    {\n+        if (key.size() == 0) {\n+            return;\n+        }\n+\n+        for (size_type i = 0, j = 0; i != size(); i++) {\n+            vch[i] ^= key[j++];\n+\n+            // This potentially acts on very many bytes of data, so it's\n+            // important that we calculate `j`, i.e. the `key` index in this\n+            // way instead of doing a %, which would effectively be a division\n+            // for each byte Xor'd -- much slower than need be.\n+            if (j == key.size())\n+                j = 0;\n+        }\n+    }\n };\n \n "
      },
      {
        "sha": "db04f3ea481216e01d9d593bfa3dcf02325973b2",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "added",
        "additions": 128,
        "deletions": 0,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cb388167ef78f47a3a440eb651b6938c10f508/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=42cb388167ef78f47a3a440eb651b6938c10f508",
        "patch": "@@ -0,0 +1,128 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"leveldbwrapper.h\"\n+#include \"uint256.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/assign/std/vector.hpp> // for 'operator+=()'\n+#include <boost/assert.hpp>\n+#include <boost/test/unit_test.hpp>\n+                    \n+using namespace std;\n+using namespace boost::assign; // bring 'operator+=()' into scope\n+using namespace boost::filesystem;\n+         \n+// Test if a string consists entirely of null characters\n+bool is_null_key(const vector<unsigned char>& key) {\n+    bool isnull = true;\n+\n+    for (unsigned int i = 0; i < key.size(); i++)\n+        isnull &= (key[i] == '\\x00');\n+\n+    return isnull;\n+}\n+ \n+BOOST_FIXTURE_TEST_SUITE(leveldbwrapper_tests, BasicTestingSetup)\n+                       \n+BOOST_AUTO_TEST_CASE(leveldbwrapper)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        char key = 'k';\n+        uint256 in = GetRandHash();\n+        uint256 res;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbw.GetObfuscateKey()));\n+\n+        BOOST_CHECK(dbw.Write(key, in));\n+        BOOST_CHECK(dbw.Read(key, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+    }\n+}\n+                       \n+// Test that we do not obfuscation if there is existing data.\n+BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n+{\n+    // We're going to share this path between two wrappers\n+    path ph = temp_directory_path() / unique_path();\n+    create_directories(ph);\n+\n+    // Set up a non-obfuscated wrapper to write some initial data.\n+    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    char key = 'k';\n+    uint256 in = GetRandHash();\n+    uint256 res;\n+\n+    BOOST_CHECK(dbw->Write(key, in));\n+    BOOST_CHECK(dbw->Read(key, res));\n+    BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+\n+    // Call the destructor to free leveldb LOCK\n+    delete dbw;\n+\n+    // Now, set up another wrapper that wants to obfuscate the same directory\n+    CLevelDBWrapper odbw(ph, (1 << 10), false, false, true);\n+\n+    // Check that the key/val we wrote with unobfuscated wrapper exists and \n+    // is readable.\n+    uint256 res2;\n+    BOOST_CHECK(odbw.Read(key, res2));\n+    BOOST_CHECK_EQUAL(res2.ToString(), in.ToString());\n+\n+    BOOST_CHECK(!odbw.IsEmpty()); // There should be existing data\n+    BOOST_CHECK(is_null_key(odbw.GetObfuscateKey())); // The key should be an empty string\n+\n+    uint256 in2 = GetRandHash();\n+    uint256 res3;\n+ \n+    // Check that we can write successfully\n+    BOOST_CHECK(odbw.Write(key, in2));\n+    BOOST_CHECK(odbw.Read(key, res3));\n+    BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n+}\n+                        \n+// Ensure that we start obfuscating during a reindex.\n+BOOST_AUTO_TEST_CASE(existing_data_reindex)\n+{\n+    // We're going to share this path between two wrappers\n+    path ph = temp_directory_path() / unique_path();\n+    create_directories(ph);\n+\n+    // Set up a non-obfuscated wrapper to write some initial data.\n+    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    char key = 'k';\n+    uint256 in = GetRandHash();\n+    uint256 res;\n+\n+    BOOST_CHECK(dbw->Write(key, in));\n+    BOOST_CHECK(dbw->Read(key, res));\n+    BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+\n+    // Call the destructor to free leveldb LOCK\n+    delete dbw;\n+\n+    // Simulate a -reindex by wiping the existing data store\n+    CLevelDBWrapper odbw(ph, (1 << 10), false, true, true);\n+\n+    // Check that the key/val we wrote with unobfuscated wrapper doesn't exist\n+    uint256 res2;\n+    BOOST_CHECK(!odbw.Read(key, res2));\n+    BOOST_CHECK(!is_null_key(odbw.GetObfuscateKey()));\n+\n+    uint256 in2 = GetRandHash();\n+    uint256 res3;\n+ \n+    // Check that we can write successfully\n+    BOOST_CHECK(odbw.Write(key, in2));\n+    BOOST_CHECK(odbw.Read(key, res3));\n+    BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n+}\n+ \n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0ed8f363d7893d13c4e61b4df1711ab7e36addcb",
        "filename": "src/test/streams_tests.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cb388167ef78f47a3a440eb651b6938c10f508/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=42cb388167ef78f47a3a440eb651b6938c10f508",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"streams.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/assign/std/vector.hpp> // for 'operator+=()'\n+#include <boost/assert.hpp>\n+#include <boost/test/unit_test.hpp>\n+                    \n+using namespace std;\n+using namespace boost::assign; // bring 'operator+=()' into scope\n+\n+BOOST_FIXTURE_TEST_SUITE(streams_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n+{\n+    std::vector<char> in;\n+    std::vector<char> expected_xor;\n+    std::vector<unsigned char> key;\n+    CDataStream ds(in, 0, 0);\n+\n+    // Degenerate case\n+    \n+    key += '\\x00','\\x00';\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end()));\n+\n+    in += '\\x0f','\\xf0';\n+    expected_xor += '\\xf0','\\x0f';\n+    \n+    // Single character key\n+\n+    ds.clear();\n+    ds.insert(ds.begin(), in.begin(), in.end());\n+    key.clear();\n+\n+    key += '\\xff';\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end())); \n+    \n+    // Multi character key\n+\n+    in.clear();\n+    expected_xor.clear();\n+    in += '\\xf0','\\x0f';\n+    expected_xor += '\\x0f','\\x00';\n+                        \n+    ds.clear();\n+    ds.insert(ds.begin(), in.begin(), in.end());\n+\n+    key.clear();\n+    key += '\\xff','\\x0f';\n+\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end()));  \n+}         \n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9738dea03d79f2b4b349111c413f1b3834b64f48",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42cb388167ef78f47a3a440eb651b6938c10f508/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42cb388167ef78f47a3a440eb651b6938c10f508/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=42cb388167ef78f47a3a440eb651b6938c10f508",
        "patch": "@@ -29,18 +29,8 @@ static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n \n-void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n-    if (coins.IsPruned())\n-        batch.Erase(make_pair(DB_COINS, hash));\n-    else\n-        batch.Write(make_pair(DB_COINS, hash), coins);\n-}\n-\n-void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write(DB_BEST_BLOCK, hash);\n-}\n-\n-CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true) \n+{\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n@@ -59,20 +49,23 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n-            BatchWriteCoins(batch, it->first, it->second.coins);\n+            if (it->second.coins.IsPruned())\n+                batch.Erase(make_pair(DB_COINS, it->first));\n+            else\n+                batch.Write(make_pair(DB_COINS, it->first), it->second.coins);\n             changed++;\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n     if (!hashBlock.IsNull())\n-        BatchWriteHashBestChain(batch, hashBlock);\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n \n     LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n@@ -158,7 +151,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -174,7 +167,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);"
      }
    ]
  },
  {
    "sha": "b2af29b806080d95e1e8d70f2929138a4d5db8e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmFmMjliODA2MDgwZDk1ZTFlOGQ3MGYyOTI5MTM4YTRkNWRiOGUx",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-06T15:46:12Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-10-06T15:46:12Z"
      },
      "message": "Ignore bench_bitcoin binary.",
      "tree": {
        "sha": "b36be23fc82cc75abca5e9de2a1d99a8f0a3c957",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b36be23fc82cc75abca5e9de2a1d99a8f0a3c957"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2af29b806080d95e1e8d70f2929138a4d5db8e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2af29b806080d95e1e8d70f2929138a4d5db8e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2af29b806080d95e1e8d70f2929138a4d5db8e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2af29b806080d95e1e8d70f2929138a4d5db8e1/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e231fe4cab5cb0fb49418ce68b145c0e2c541c16",
        "filename": "src/bench/.gitignore",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2af29b806080d95e1e8d70f2929138a4d5db8e1/src/bench/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2af29b806080d95e1e8d70f2929138a4d5db8e1/src/bench/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/.gitignore?ref=b2af29b806080d95e1e8d70f2929138a4d5db8e1",
        "patch": "@@ -0,0 +1 @@\n+bench_bitcoin"
      }
    ]
  },
  {
    "sha": "4fac576c619f450da8ca09ac8790063b3dea4364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmFjNTc2YzYxOWY0NTBkYThjYTA5YWM4NzkwMDYzYjNkZWE0MzY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T15:32:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-06T15:50:46Z"
      },
      "message": "Merge pull request #6650\n\n42cb388 Add chainstate obfuscation to avoid spurious antivirus detection (James O'Beirne)",
      "tree": {
        "sha": "36184ec8419bc1ae12a0285c58406a745e7a6d71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36184ec8419bc1ae12a0285c58406a745e7a6d71"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fac576c619f450da8ca09ac8790063b3dea4364",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWE+3WAAoJEHSBCwEjRsmmvHsIAJEm9i9wQ6YXosuYmDEiGwbL\n9gxZSLLbWl24x0D72s8tIrYnGSWUK+YBxwPLuw8VQe02qYaUFUu66lV7OCEGWbN9\n6GaOf1QSmU4EsGx7Kg/dZejtLY7CilM5Q562GG3qvZ/NhZtGYLeV/+Yl/ONXxn7l\nXJ3cBXJTixk8CX3QFmIy3aEf8cz0WNtYOaAATwBwq3CIJwoq3gRneYMq7bNuTDth\nOxVV1Gfra2T22UlI/6rGDt8ne5Gz4ps2I2cwdUr+wZlkb5HmVHN5OfE8wSY7xfef\nbJf50a6Z9MzBljhPsVczHKxHll2vHdDdVciD1Gh3YJeWXRcP65dPaXw9S8oAomY=\n=yPI7\n-----END PGP SIGNATURE-----",
        "payload": "tree 36184ec8419bc1ae12a0285c58406a745e7a6d71\nparent b7d78fd0bd244b324ded4131c1dd0ec81a87d15d\nparent 42cb388167ef78f47a3a440eb651b6938c10f508\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444145538 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444146646 +0200\n\nMerge pull request #6650\n\n42cb388 Add chainstate obfuscation to avoid spurious antivirus detection (James O'Beirne)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fac576c619f450da8ca09ac8790063b3dea4364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fac576c619f450da8ca09ac8790063b3dea4364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fac576c619f450da8ca09ac8790063b3dea4364/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7d78fd0bd244b324ded4131c1dd0ec81a87d15d"
      },
      {
        "sha": "42cb388167ef78f47a3a440eb651b6938c10f508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42cb388167ef78f47a3a440eb651b6938c10f508",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42cb388167ef78f47a3a440eb651b6938c10f508"
      }
    ],
    "stats": {
      "total": 360,
      "additions": 338,
      "deletions": 22
    },
    "files": [
      {
        "sha": "a3b6c4d9b1516f6c0428d54b6c940d39134d4f9c",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fac576c619f450da8ca09ac8790063b3dea4364/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fac576c619f450da8ca09ac8790063b3dea4364/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4fac576c619f450da8ca09ac8790063b3dea4364",
        "patch": "@@ -53,6 +53,7 @@ BITCOIN_TESTS =\\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n+  test/leveldbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\\n@@ -73,6 +74,7 @@ BITCOIN_TESTS =\\\n   test/sighash_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/skiplist_tests.cpp \\\n+  test/streams_tests.cpp \\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\"
      },
      {
        "sha": "ce96b5c8aa632d8300841c9967e7590bf30f7882",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 1,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fac576c619f450da8ca09ac8790063b3dea4364/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fac576c619f450da8ca09ac8790063b3dea4364/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=4fac576c619f450da8ca09ac8790063b3dea4364",
        "patch": "@@ -5,13 +5,15 @@\n #include \"leveldbwrapper.h\"\n \n #include \"util.h\"\n+#include \"random.h\"\n \n #include <boost/filesystem.hpp>\n \n #include <leveldb/cache.h>\n #include <leveldb/env.h>\n #include <leveldb/filter_policy.h>\n #include <memenv.h>\n+#include <stdint.h>\n \n void HandleError(const leveldb::Status& status) throw(leveldb_error)\n {\n@@ -43,7 +45,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe)\n+CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n@@ -67,6 +69,25 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     leveldb::Status status = leveldb::DB::Open(options, path.string(), &pdb);\n     HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n+\n+    // The base-case obfuscation key, which is a noop.\n+    obfuscate_key = std::vector<unsigned char>(OBFUSCATE_KEY_NUM_BYTES, '\\000');\n+\n+    bool key_exists = Read(OBFUSCATE_KEY_KEY, obfuscate_key);\n+\n+    if (!key_exists && obfuscate && IsEmpty()) {\n+        // Initialize non-degenerate obfuscation if it won't upset \n+        // existing, non-obfuscated data.\n+        std::vector<unsigned char> new_key = CreateObfuscateKey();\n+\n+        // Write `new_key` so we don't obfuscate the key with itself\n+        Write(OBFUSCATE_KEY_KEY, new_key);\n+        obfuscate_key = new_key;\n+\n+        LogPrintf(\"Wrote new obfuscate key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n+    }\n+\n+    LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n }\n \n CLevelDBWrapper::~CLevelDBWrapper()\n@@ -87,3 +108,40 @@ bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb\n     HandleError(status);\n     return true;\n }\n+\n+// Prefixed with null character to avoid collisions with other keys\n+//\n+// We must use a string constructor which specifies length so that we copy\n+// past the null-terminator.\n+const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n+\n+const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n+\n+/**\n+ * Returns a string (consisting of 8 random bytes) suitable for use as an \n+ * obfuscating XOR key. \n+ */\n+std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const \n+{\n+    unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n+    GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n+    return std::vector<unsigned char>(&buff[0], &buff[OBFUSCATE_KEY_NUM_BYTES]);\n+\n+}\n+\n+bool CLevelDBWrapper::IsEmpty()\n+{\n+    boost::scoped_ptr<leveldb::Iterator> it(NewIterator());\n+    it->SeekToFirst();\n+    return !(it->Valid());\n+}\n+\n+const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const \n+{ \n+    return obfuscate_key; \n+}\n+\n+std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n+{ \n+    return HexStr(obfuscate_key); \n+}"
      },
      {
        "sha": "f5c463830cbddb5fb0898bfa839e81b1a5d774c2",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 49,
        "deletions": 4,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fac576c619f450da8ca09ac8790063b3dea4364/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fac576c619f450da8ca09ac8790063b3dea4364/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=4fac576c619f450da8ca09ac8790063b3dea4364",
        "patch": "@@ -9,6 +9,7 @@\n #include \"serialize.h\"\n #include \"streams.h\"\n #include \"util.h\"\n+#include \"utilstrencodings.h\"\n #include \"version.h\"\n \n #include <boost/filesystem/path.hpp>\n@@ -31,8 +32,14 @@ class CLevelDBBatch\n \n private:\n     leveldb::WriteBatch batch;\n+    const std::vector<unsigned char> obfuscate_key;\n \n public:\n+    /**\n+     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     */\n+    CLevelDBBatch(const std::vector<unsigned char>& obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+\n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n     {\n@@ -44,6 +51,7 @@ class CLevelDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n+        ssValue.Xor(obfuscate_key);\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -85,8 +93,27 @@ class CLevelDBWrapper\n     //! the database itself\n     leveldb::DB* pdb;\n \n+    //! a key used for optional XOR-obfuscation of the database\n+    std::vector<unsigned char> obfuscate_key;\n+\n+    //! the key under which the obfuscation key is stored\n+    static const std::string OBFUSCATE_KEY_KEY;\n+    \n+    //! the length of the obfuscate key in number of bytes\n+    static const unsigned int OBFUSCATE_KEY_NUM_BYTES;\n+    \n+    std::vector<unsigned char> CreateObfuscateKey() const;\n+\n public:\n-    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    /**\n+     * @param[in] path        Location in the filesystem where leveldb data will be stored.\n+     * @param[in] nCacheSize  Configures various leveldb cache settings.\n+     * @param[in] fMemory     If true, use leveldb's memory environment.\n+     * @param[in] fWipe       If true, remove all existing data.\n+     * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n+     *                        with a zero'd byte array.\n+     */\n+    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n     ~CLevelDBWrapper();\n \n     template <typename K, typename V>\n@@ -107,6 +134,7 @@ class CLevelDBWrapper\n         }\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue.Xor(obfuscate_key);\n             ssValue >> value;\n         } catch (const std::exception&) {\n             return false;\n@@ -117,7 +145,7 @@ class CLevelDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -144,7 +172,7 @@ class CLevelDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -159,7 +187,7 @@ class CLevelDBWrapper\n \n     bool Sync() throw(leveldb_error)\n     {\n-        CLevelDBBatch batch;\n+        CLevelDBBatch batch(obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n@@ -168,6 +196,23 @@ class CLevelDBWrapper\n     {\n         return pdb->NewIterator(iteroptions);\n     }\n+\n+    /**\n+     * Return true if the database managed by this class contains no entries.\n+     */\n+    bool IsEmpty();\n+\n+    /**\n+     * Accessor for obfuscate_key.\n+     */\n+    const std::vector<unsigned char>& GetObfuscateKey() const;\n+\n+    /**\n+     * Return the obfuscate_key as a hex-formatted string.\n+     */\n+    std::string GetObfuscateKeyHex() const;\n+\n };\n \n #endif // BITCOIN_LEVELDBWRAPPER_H\n+"
      },
      {
        "sha": "8610e4d18e612b71a7ae1501153f356275dd8864",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fac576c619f450da8ca09ac8790063b3dea4364/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fac576c619f450da8ca09ac8790063b3dea4364/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=4fac576c619f450da8ca09ac8790063b3dea4364",
        "patch": "@@ -296,6 +296,29 @@ class CDataStream\n         data.insert(data.end(), begin(), end());\n         clear();\n     }\n+\n+    /**\n+     * XOR the contents of this stream with a certain key.\n+     *\n+     * @param[in] key    The key used to XOR the data in this stream.\n+     */\n+    void Xor(const std::vector<unsigned char>& key)\n+    {\n+        if (key.size() == 0) {\n+            return;\n+        }\n+\n+        for (size_type i = 0, j = 0; i != size(); i++) {\n+            vch[i] ^= key[j++];\n+\n+            // This potentially acts on very many bytes of data, so it's\n+            // important that we calculate `j`, i.e. the `key` index in this\n+            // way instead of doing a %, which would effectively be a division\n+            // for each byte Xor'd -- much slower than need be.\n+            if (j == key.size())\n+                j = 0;\n+        }\n+    }\n };\n \n "
      },
      {
        "sha": "db04f3ea481216e01d9d593bfa3dcf02325973b2",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "added",
        "additions": 128,
        "deletions": 0,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fac576c619f450da8ca09ac8790063b3dea4364/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fac576c619f450da8ca09ac8790063b3dea4364/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=4fac576c619f450da8ca09ac8790063b3dea4364",
        "patch": "@@ -0,0 +1,128 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"leveldbwrapper.h\"\n+#include \"uint256.h\"\n+#include \"random.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/assign/std/vector.hpp> // for 'operator+=()'\n+#include <boost/assert.hpp>\n+#include <boost/test/unit_test.hpp>\n+                    \n+using namespace std;\n+using namespace boost::assign; // bring 'operator+=()' into scope\n+using namespace boost::filesystem;\n+         \n+// Test if a string consists entirely of null characters\n+bool is_null_key(const vector<unsigned char>& key) {\n+    bool isnull = true;\n+\n+    for (unsigned int i = 0; i < key.size(); i++)\n+        isnull &= (key[i] == '\\x00');\n+\n+    return isnull;\n+}\n+ \n+BOOST_FIXTURE_TEST_SUITE(leveldbwrapper_tests, BasicTestingSetup)\n+                       \n+BOOST_AUTO_TEST_CASE(leveldbwrapper)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        char key = 'k';\n+        uint256 in = GetRandHash();\n+        uint256 res;\n+\n+        // Ensure that we're doing real obfuscation when obfuscate=true\n+        BOOST_CHECK(obfuscate != is_null_key(dbw.GetObfuscateKey()));\n+\n+        BOOST_CHECK(dbw.Write(key, in));\n+        BOOST_CHECK(dbw.Read(key, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+    }\n+}\n+                       \n+// Test that we do not obfuscation if there is existing data.\n+BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n+{\n+    // We're going to share this path between two wrappers\n+    path ph = temp_directory_path() / unique_path();\n+    create_directories(ph);\n+\n+    // Set up a non-obfuscated wrapper to write some initial data.\n+    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    char key = 'k';\n+    uint256 in = GetRandHash();\n+    uint256 res;\n+\n+    BOOST_CHECK(dbw->Write(key, in));\n+    BOOST_CHECK(dbw->Read(key, res));\n+    BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+\n+    // Call the destructor to free leveldb LOCK\n+    delete dbw;\n+\n+    // Now, set up another wrapper that wants to obfuscate the same directory\n+    CLevelDBWrapper odbw(ph, (1 << 10), false, false, true);\n+\n+    // Check that the key/val we wrote with unobfuscated wrapper exists and \n+    // is readable.\n+    uint256 res2;\n+    BOOST_CHECK(odbw.Read(key, res2));\n+    BOOST_CHECK_EQUAL(res2.ToString(), in.ToString());\n+\n+    BOOST_CHECK(!odbw.IsEmpty()); // There should be existing data\n+    BOOST_CHECK(is_null_key(odbw.GetObfuscateKey())); // The key should be an empty string\n+\n+    uint256 in2 = GetRandHash();\n+    uint256 res3;\n+ \n+    // Check that we can write successfully\n+    BOOST_CHECK(odbw.Write(key, in2));\n+    BOOST_CHECK(odbw.Read(key, res3));\n+    BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n+}\n+                        \n+// Ensure that we start obfuscating during a reindex.\n+BOOST_AUTO_TEST_CASE(existing_data_reindex)\n+{\n+    // We're going to share this path between two wrappers\n+    path ph = temp_directory_path() / unique_path();\n+    create_directories(ph);\n+\n+    // Set up a non-obfuscated wrapper to write some initial data.\n+    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    char key = 'k';\n+    uint256 in = GetRandHash();\n+    uint256 res;\n+\n+    BOOST_CHECK(dbw->Write(key, in));\n+    BOOST_CHECK(dbw->Read(key, res));\n+    BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+\n+    // Call the destructor to free leveldb LOCK\n+    delete dbw;\n+\n+    // Simulate a -reindex by wiping the existing data store\n+    CLevelDBWrapper odbw(ph, (1 << 10), false, true, true);\n+\n+    // Check that the key/val we wrote with unobfuscated wrapper doesn't exist\n+    uint256 res2;\n+    BOOST_CHECK(!odbw.Read(key, res2));\n+    BOOST_CHECK(!is_null_key(odbw.GetObfuscateKey()));\n+\n+    uint256 in2 = GetRandHash();\n+    uint256 res3;\n+ \n+    // Check that we can write successfully\n+    BOOST_CHECK(odbw.Write(key, in2));\n+    BOOST_CHECK(odbw.Read(key, res3));\n+    BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n+}\n+ \n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0ed8f363d7893d13c4e61b4df1711ab7e36addcb",
        "filename": "src/test/streams_tests.cpp",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fac576c619f450da8ca09ac8790063b3dea4364/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fac576c619f450da8ca09ac8790063b3dea4364/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=4fac576c619f450da8ca09ac8790063b3dea4364",
        "patch": "@@ -0,0 +1,67 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"streams.h\"\n+#include \"support/allocators/zeroafterfree.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/assign/std/vector.hpp> // for 'operator+=()'\n+#include <boost/assert.hpp>\n+#include <boost/test/unit_test.hpp>\n+                    \n+using namespace std;\n+using namespace boost::assign; // bring 'operator+=()' into scope\n+\n+BOOST_FIXTURE_TEST_SUITE(streams_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n+{\n+    std::vector<char> in;\n+    std::vector<char> expected_xor;\n+    std::vector<unsigned char> key;\n+    CDataStream ds(in, 0, 0);\n+\n+    // Degenerate case\n+    \n+    key += '\\x00','\\x00';\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end()));\n+\n+    in += '\\x0f','\\xf0';\n+    expected_xor += '\\xf0','\\x0f';\n+    \n+    // Single character key\n+\n+    ds.clear();\n+    ds.insert(ds.begin(), in.begin(), in.end());\n+    key.clear();\n+\n+    key += '\\xff';\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end())); \n+    \n+    // Multi character key\n+\n+    in.clear();\n+    expected_xor.clear();\n+    in += '\\xf0','\\x0f';\n+    expected_xor += '\\x0f','\\x00';\n+                        \n+    ds.clear();\n+    ds.insert(ds.begin(), in.begin(), in.end());\n+\n+    key.clear();\n+    key += '\\xff','\\x0f';\n+\n+    ds.Xor(key);\n+    BOOST_CHECK_EQUAL(\n+            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(ds.begin(), ds.end()));  \n+}         \n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9738dea03d79f2b4b349111c413f1b3834b64f48",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fac576c619f450da8ca09ac8790063b3dea4364/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fac576c619f450da8ca09ac8790063b3dea4364/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=4fac576c619f450da8ca09ac8790063b3dea4364",
        "patch": "@@ -29,18 +29,8 @@ static const char DB_REINDEX_FLAG = 'R';\n static const char DB_LAST_BLOCK = 'l';\n \n \n-void static BatchWriteCoins(CLevelDBBatch &batch, const uint256 &hash, const CCoins &coins) {\n-    if (coins.IsPruned())\n-        batch.Erase(make_pair(DB_COINS, hash));\n-    else\n-        batch.Write(make_pair(DB_COINS, hash), coins);\n-}\n-\n-void static BatchWriteHashBestChain(CLevelDBBatch &batch, const uint256 &hash) {\n-    batch.Write(DB_BEST_BLOCK, hash);\n-}\n-\n-CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe) {\n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true) \n+{\n }\n \n bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n@@ -59,20 +49,23 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n-            BatchWriteCoins(batch, it->first, it->second.coins);\n+            if (it->second.coins.IsPruned())\n+                batch.Erase(make_pair(DB_COINS, it->first));\n+            else\n+                batch.Write(make_pair(DB_COINS, it->first), it->second.coins);\n             changed++;\n         }\n         count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n     if (!hashBlock.IsNull())\n-        BatchWriteHashBestChain(batch, hashBlock);\n+        batch.Write(DB_BEST_BLOCK, hashBlock);\n \n     LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n@@ -158,7 +151,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -174,7 +167,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch;\n+    CLevelDBBatch batch(GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);"
      }
    ]
  },
  {
    "sha": "49dd5c629df0a08cf3b1ea8085c03312d1a81696",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWRkNWM2MjlkZjBhMDhjZjNiMWVhODA4NWMwMzMxMmQxYTgxNjk2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-07T08:57:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-07T08:58:37Z"
      },
      "message": "Merge pull request #6769\n\nb196b68 Test LowS in standardness, removes nuisance malleability vector. (Gregory Maxwell)",
      "tree": {
        "sha": "26be3c0801fcb4a9391cc21e1ba491fb44d75554",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26be3c0801fcb4a9391cc21e1ba491fb44d75554"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49dd5c629df0a08cf3b1ea8085c03312d1a81696",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWFN69AAoJEHSBCwEjRsmm0akIAMlUqOBnLeLEfRJg2hLxLJtV\nJOpNztwWKzghh+SkW+Hf8qdTnvZmpnzaVUF3g4JpDNeJmgCaFKBn1WMX7usZP9d9\nr0GGIeNv0mq0r5Ql4z+PXOTkGNJTKnC1og8zn26Hra6eez2Vh0EVWasNsDEnasfm\n81E/Y1zZXpJ15M2Lis3t6Oan3hVD4L30K/kbBCy+TDSl2614XZ/lJdCbKuxcBkOp\ntxjPJBSKvzrBOir0Obk8qFxZoV6Ajwq5tidh87YR//6TO9sRVNNIsa1dgfXB0Spl\n2xSUtHgzGmOs7QEu48tuRkVbL2QqMWn0zLTyJWICSPIdhWxRiO8rPN6YYgNOb4M=\n=AULB\n-----END PGP SIGNATURE-----",
        "payload": "tree 26be3c0801fcb4a9391cc21e1ba491fb44d75554\nparent 4fac576c619f450da8ca09ac8790063b3dea4364\nparent b196b685c9089b74fd4ff3d9a28ea847ab36179b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444208270 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444208317 +0200\n\nMerge pull request #6769\n\nb196b68 Test LowS in standardness, removes nuisance malleability vector. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49dd5c629df0a08cf3b1ea8085c03312d1a81696",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49dd5c629df0a08cf3b1ea8085c03312d1a81696",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49dd5c629df0a08cf3b1ea8085c03312d1a81696/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fac576c619f450da8ca09ac8790063b3dea4364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fac576c619f450da8ca09ac8790063b3dea4364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fac576c619f450da8ca09ac8790063b3dea4364"
      },
      {
        "sha": "b196b685c9089b74fd4ff3d9a28ea847ab36179b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b196b685c9089b74fd4ff3d9a28ea847ab36179b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b196b685c9089b74fd4ff3d9a28ea847ab36179b"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ea0d435adbf55ab2ac4fafdc0504219af6c674f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49dd5c629df0a08cf3b1ea8085c03312d1a81696/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49dd5c629df0a08cf3b1ea8085c03312d1a81696/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=49dd5c629df0a08cf3b1ea8085c03312d1a81696",
        "patch": "@@ -37,7 +37,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_NULLDUMMY |\n                                                          SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS |\n                                                          SCRIPT_VERIFY_CLEANSTACK |\n-                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+                                                         SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY |\n+                                                         SCRIPT_VERIFY_LOW_S;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      }
    ]
  },
  {
    "sha": "d479311dba25d6a697a0c5bebbb1e913a0121b9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDc5MzExZGJhMjVkNmE2OTdhMGM1YmViYmIxZTkxM2EwMTIxYjlm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-07T12:43:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-07T12:59:58Z"
      },
      "message": "Merge pull request #6720\n\n1534d9a Creates unittests for addrman, makes addrman testable. Adds several unittests for addrman to verify it works as expected. Makes small modifications to addrman to allow deterministic and targeted tests. (EthanHeilman)",
      "tree": {
        "sha": "0b68ebc3223acb130a375d200ccdac7b6205ecf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b68ebc3223acb130a375d200ccdac7b6205ecf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWFRdOAAoJEHSBCwEjRsmm+/8H/0QYq/ed+42lcDZNJULOeRZi\nGWRhFSJpG3bAmnfnrUTCRM+1ikTS+p/nQ8mpzjM2ay79SwnlwHEhKCDnQyCXIJil\n+WgtzpqmJJLQyio4YzsZHhsxrdwAdf36HvVbEBhtLIdkw0wm+8vd7W0DD+0usCU0\nLReaIFVAKol2fnr74t0iZSjA/wB4DdzBwCmYU8k0X30QpuUiDc3kWSMYl7/8fMMb\nb/79nftubgL6SNoAgjuucE6klQe0SGBtGK8dLKsHsHd7X9aBxx8voukkoaP3uHpp\nYexK3wNv1ljjcZwbUT1ZD6dzBiG3qYuY61gpDc+Z3os02hEq5u9FhN5+vhLGvZI=\n=EAVz\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b68ebc3223acb130a375d200ccdac7b6205ecf0\nparent 49dd5c629df0a08cf3b1ea8085c03312d1a81696\nparent 1534d9a83c3648709690f8ad6af752b782a35be7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444221818 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444222798 +0200\n\nMerge pull request #6720\n\n1534d9a Creates unittests for addrman, makes addrman testable. Adds several unittests for addrman to verify it works as expected. Makes small modifications to addrman to allow deterministic and targeted tests. (EthanHeilman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49dd5c629df0a08cf3b1ea8085c03312d1a81696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49dd5c629df0a08cf3b1ea8085c03312d1a81696",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49dd5c629df0a08cf3b1ea8085c03312d1a81696"
      },
      {
        "sha": "1534d9a83c3648709690f8ad6af752b782a35be7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1534d9a83c3648709690f8ad6af752b782a35be7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1534d9a83c3648709690f8ad6af752b782a35be7"
      }
    ],
    "stats": {
      "total": 205,
      "additions": 199,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0fe8ea42ff513fa617e116063dcd1b9d0c6735ad",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "patch": "@@ -36,6 +36,7 @@ GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.r\n BITCOIN_TESTS =\\\n   test/arith_uint256_tests.cpp \\\n   test/bignum.h \\\n+  test/addrman_tests.cpp \\\n   test/alert_tests.cpp \\\n   test/allocator_tests.cpp \\\n   test/base32_tests.cpp \\"
      },
      {
        "sha": "078b9e16817544ef9721f4009dc0533871f7b169",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "patch": "@@ -329,13 +329,17 @@ void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n     info.nAttempts++;\n }\n \n-CAddrInfo CAddrMan::Select_()\n+CAddrInfo CAddrMan::Select_(bool newOnly)\n {\n     if (size() == 0)\n         return CAddrInfo();\n \n+    if (newOnly && nNew == 0)\n+        return CAddrInfo();\n+\n     // Use a 50% chance for choosing between tried and new table entries.\n-    if (nTried > 0 && (nNew == 0 || GetRandInt(2) == 0)) {\n+    if (!newOnly &&\n+       (nTried > 0 && (nNew == 0 || GetRandInt(2) == 0))) { \n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {"
      },
      {
        "sha": "1123caabfaf601a49b7be292d97cfc5443aba4a5",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "patch": "@@ -22,6 +22,8 @@\n  */\n class CAddrInfo : public CAddress\n {\n+\n+\n public:\n     //! last try whatsoever by us (memory only)\n     int64_t nLastTry;\n@@ -230,8 +232,8 @@ class CAddrMan\n     //! Mark an entry as attempted to connect.\n     void Attempt_(const CService &addr, int64_t nTime);\n \n-    //! Select an address to connect to.\n-    CAddrInfo Select_();\n+    //! Select an address to connect to, if newOnly is set to true, only the new table is selected from.\n+    CAddrInfo Select_(bool newOnly);\n \n #ifdef DEBUG_ADDRMAN\n     //! Perform consistency check. Returns an error code or zero.\n@@ -532,13 +534,13 @@ class CAddrMan\n     /**\n      * Choose an address to connect to.\n      */\n-    CAddrInfo Select()\n+    CAddrInfo Select(bool newOnly = false)\n     {\n         CAddrInfo addrRet;\n         {\n             LOCK(cs);\n             Check();\n-            addrRet = Select_();\n+            addrRet = Select_(newOnly);\n             Check();\n         }\n         return addrRet;\n@@ -567,6 +569,12 @@ class CAddrMan\n             Check();\n         }\n     }\n+    \n+    //! Ensure that bucket placement is always the same for testing purposes.\n+    void MakeDeterministic(){\n+        nKey.SetNull(); //Do not use outside of tests.\n+    }\n+\n };\n \n #endif // BITCOIN_ADDRMAN_H"
      },
      {
        "sha": "cfcdd9abb272440ae83c1103316b3cf0acbec2b6",
        "filename": "src/test/addrman_tests.cpp",
        "status": "added",
        "additions": 180,
        "deletions": 0,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d479311dba25d6a697a0c5bebbb1e913a0121b9f/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "patch": "@@ -0,0 +1,180 @@\n+// Copyright (c) 2012-2013 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#include \"addrman.h\"\n+#include \"test/test_bitcoin.h\"\n+#include <string>\n+#include <boost/test/unit_test.hpp>\n+\n+#include \"random.h\"\n+\n+using namespace std;\n+\n+class CAddrManTest : public CAddrMan{};\n+\n+BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(addrman_simple)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    // Test 1: Does Addrman respond correctly when empty.\n+    BOOST_CHECK(addrman.size() == 0);\n+    CAddrInfo addr_null = addrman.Select();\n+    BOOST_CHECK(addr_null.ToString() == \"[::]:0\");\n+\n+    // Test 2: Does Addrman::Add work as expected.\n+    CService addr1 = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+    CAddrInfo addr_ret1 = addrman.Select();\n+    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n+\n+    // Test 3: Does IP address deduplication work correctly. \n+    //  Expected dup IP should not be added.\n+    CService addr1_dup = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1_dup), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+\n+\n+    // Test 5: New table has one addr and we add a diff addr we should\n+    //  have two addrs.\n+    CService addr2 = CService(\"250.1.1.2:8333\");\n+    addrman.Add(CAddress(addr2), source);\n+    BOOST_CHECK(addrman.size() == 2);\n+\n+    // Test 6: AddrMan::Clear() should empty the new table. \n+    addrman.Clear();\n+    BOOST_CHECK(addrman.size() == 0);\n+    CAddrInfo addr_null2 = addrman.Select();\n+    BOOST_CHECK(addr_null2.ToString() == \"[::]:0\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_ports)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    // Test 7; Addr with same IP but diff port does not replace existing addr.\n+    CService addr1 = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+\n+    CService addr1_port = CService(\"250.1.1.1:8334\");\n+    addrman.Add(CAddress(addr1_port), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+    CAddrInfo addr_ret2 = addrman.Select();\n+    BOOST_CHECK(addr_ret2.ToString() == \"250.1.1.1:8333\");\n+\n+    // Test 8: Add same IP but diff port to tried table, it doesn't get added.\n+    //  Perhaps this is not ideal behavior but it is the current behavior.\n+    addrman.Good(CAddress(addr1_port));\n+    BOOST_CHECK(addrman.size() == 1);\n+    bool newOnly = true;\n+    CAddrInfo addr_ret3 = addrman.Select(newOnly);\n+    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8333\");\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(addrman_select)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    // Test 9: Select from new with 1 addr in new.\n+    CService addr1 = CService(\"250.1.1.1:8333\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 1);\n+\n+    bool newOnly = true;\n+    CAddrInfo addr_ret1 = addrman.Select(newOnly);\n+    BOOST_CHECK(addr_ret1.ToString() == \"250.1.1.1:8333\");\n+\n+\n+    // Test 10: move addr to tried, select from new expected nothing returned.\n+    addrman.Good(CAddress(addr1));\n+    BOOST_CHECK(addrman.size() == 1);\n+    CAddrInfo addr_ret2 = addrman.Select(newOnly);\n+    BOOST_CHECK(addr_ret2.ToString() == \"[::]:0\");\n+\n+    CAddrInfo addr_ret3 = addrman.Select();\n+    BOOST_CHECK(addr_ret3.ToString() == \"250.1.1.1:8333\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    for (unsigned int i = 1; i < 4; i++){\n+        CService addr = CService(\"250.1.1.\"+boost::to_string(i));\n+        addrman.Add(CAddress(addr), source);\n+\n+        //Test 11: No collision in new table yet.\n+        BOOST_CHECK(addrman.size() == i);\n+    }\n+\n+    //Test 12: new table collision!\n+    CService addr1 = CService(\"250.1.1.4\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 3);\n+\n+    CService addr2 = CService(\"250.1.1.5\");\n+    addrman.Add(CAddress(addr2), source);\n+    BOOST_CHECK(addrman.size() == 4);\n+}\n+\n+BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n+{\n+    CAddrManTest addrman;\n+\n+    // Set addrman addr placement to be deterministic.\n+    addrman.MakeDeterministic();\n+\n+    CNetAddr source = CNetAddr(\"252.2.2.2:8333\");\n+\n+    BOOST_CHECK(addrman.size() == 0);\n+\n+    for (unsigned int i = 1; i < 75; i++){\n+        CService addr = CService(\"250.1.1.\"+boost::to_string(i));\n+        addrman.Add(CAddress(addr), source);\n+        addrman.Good(CAddress(addr));\n+\n+        //Test 13: No collision in tried table yet.\n+        BOOST_TEST_MESSAGE(addrman.size());\n+        BOOST_CHECK(addrman.size() == i);\n+    }\n+\n+    //Test 14: tried table collision!\n+    CService addr1 = CService(\"250.1.1.76\");\n+    addrman.Add(CAddress(addr1), source);\n+    BOOST_CHECK(addrman.size() == 74);\n+\n+    CService addr2 = CService(\"250.1.1.77\");\n+    addrman.Add(CAddress(addr2), source);\n+    BOOST_CHECK(addrman.size() == 75);\n+}\n+\n+\n+BOOST_AUTO_TEST_SUITE_END()\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjI2OTJjZTNlMTY2OWRkZWVlYjE1OGEwZWVjZWRjZGJjYjFlMzZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-10-08T04:00:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-10-08T04:00:55Z"
      },
      "message": "build: Make use of ZMQ_CFLAGS",
      "tree": {
        "sha": "670175449b21d2c52b17baed49d201accfb94cd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/670175449b21d2c52b17baed49d201accfb94cd5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d479311dba25d6a697a0c5bebbb1e913a0121b9f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0654ff4227d67a2b4be7e9bf32d79f4d3334cc0e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d",
        "patch": "@@ -214,7 +214,7 @@ libbitcoin_server_a_SOURCES = \\\n if ENABLE_ZMQ\n LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n \n-libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libbitcoin_zmq_a_SOURCES = \\\n   zmq/zmqabstractnotifier.cpp \\\n   zmq/zmqnotificationinterface.cpp \\"
      }
    ]
  },
  {
    "sha": "287f54fc90c29301faede8d4ac2ea24a91441917",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODdmNTRmYzkwYzI5MzAxZmFlZGU4ZDRhYzJlYTI0YTkxNDQxOTE3",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-28T18:30:50Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:23:22Z"
      },
      "message": "Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n\nBased on the earlier BIP66 soft-fork logic implemented by Pieter\nWuille's 5a47811da5158df763aa2fca09ce646ee0c51e7b",
      "tree": {
        "sha": "61c3f8edef89edbf7507360fc0c0fcc68f38af7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c3f8edef89edbf7507360fc0c0fcc68f38af7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/287f54fc90c29301faede8d4ac2ea24a91441917",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/287f54fc90c29301faede8d4ac2ea24a91441917",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/287f54fc90c29301faede8d4ac2ea24a91441917",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/287f54fc90c29301faede8d4ac2ea24a91441917/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d479311dba25d6a697a0c5bebbb1e913a0121b9f"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "61c0d8e1c9bada145be9f08674a8dee098112ef9",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/287f54fc90c29301faede8d4ac2ea24a91441917/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/287f54fc90c29301faede8d4ac2ea24a91441917/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=287f54fc90c29301faede8d4ac2ea24a91441917",
        "patch": "@@ -1740,11 +1740,18 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n+    // when 75% of the network has upgraded:\n     if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n+    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n+    // blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2684,6 +2691,11 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n \n+    // Reject block.nVersion=3 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 4 && IsSuperMajority(4, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n     return true;\n }\n "
      },
      {
        "sha": "54731ff55736332161b24052f6838dcf348c41ae",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/287f54fc90c29301faede8d4ac2ea24a91441917/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/287f54fc90c29301faede8d4ac2ea24a91441917/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=287f54fc90c29301faede8d4ac2ea24a91441917",
        "patch": "@@ -21,7 +21,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=3;\n+    static const int32_t CURRENT_VERSION=4;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "a48ff1e18d3a41c89ccf4b4686be51844a135635",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/287f54fc90c29301faede8d4ac2ea24a91441917/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/287f54fc90c29301faede8d4ac2ea24a91441917/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=287f54fc90c29301faede8d4ac2ea24a91441917",
        "patch": "@@ -44,9 +44,10 @@ typedef enum bitcoinconsensus_error_t\n /** Script verification flags */\n enum\n {\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      }
    ]
  },
  {
    "sha": "cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGU3YWIyZDRlYTdmYmY3MTQ5N2M0MmVkYzFhODJiOWM4ZTZjOTFk",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-06-28T18:42:17Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:25:25Z"
      },
      "message": "Add RPC tests for the CHECKLOCKTIMEVERIFY (BIP65) soft-fork\n\nbip65-cltv.py is based on the earlier BIP66 soft-fork RPC test\nimplemented by Pieter Wuille's 819bcf9b9902319176cdb1d476cacfee9b3727ec\n\nbip65-cltv-p2p.py is based on the earlier BIP66 P2P test by Suhas\nDaftuar's d76412b068d95454732aa3def95decf35251759a",
      "tree": {
        "sha": "5174cb10323a2aef3e78d40b29f0cb75ca92a1db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5174cb10323a2aef3e78d40b29f0cb75ca92a1db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "287f54fc90c29301faede8d4ac2ea24a91441917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/287f54fc90c29301faede8d4ac2ea24a91441917",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/287f54fc90c29301faede8d4ac2ea24a91441917"
      }
    ],
    "stats": {
      "total": 266,
      "additions": 266,
      "deletions": 0
    },
    "files": [
      {
        "sha": "09ee9a36a908b834a88248ecb2791ce3118389de",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "patch": "@@ -69,6 +69,8 @@\n     'p2p-fullblocktest.py',\n ]\n testScriptsExt = [\n+    'bip65-cltv.py',\n+    'bip65-cltv-p2p.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'getblocktemplate_longpoll.py',"
      },
      {
        "sha": "1f8548c21933eab8ece7565787bba51f39aeb055",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "patch": "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP2, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+\n+def cltv_invalidate(tx):\n+    '''Modify the signature in vin 0 of the tx to fail CLTV\n+\n+    Prepends -1 CLTV DROP in the scriptSig itself.\n+    '''\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP2, OP_DROP] +\n+                                  list(CScript(tx.vin[0].scriptSig)))\n+\n+'''\n+This test is meant to exercise BIP65 (CHECKLOCKTIMEVERIFY)\n+Connect to a single node.\n+Mine 2 (version 3) blocks (save the coinbases for later).\n+Generate 98 more version 3 blocks, verify the node accepts.\n+Mine 749 version 4 blocks, verify the node accepts.\n+Check that the new CLTV rules are not enforced on the 750th version 4 block.\n+Check that the new CLTV rules are enforced on the 751st version 4 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+'''\n+\n+class BIP65Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def get_tests(self):\n+\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        ''' 98 more version 3 blocks '''\n+        test_blocks = []\n+        for i in xrange(98):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 749 version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(749):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        '''\n+        Check that the new CLTV rules are not enforced in the 750th\n+        version 3 block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Check that the new CLTV rules are enforced in the 751st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        ''' Mine 199 new version blocks on last valid tip '''\n+        test_blocks = []\n+        for i in xrange(199):\n+            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 1 old version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 new version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 old version block, should be invalid '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      },
      {
        "sha": "e90e11e6a75a8960e3aa403e67ad4249ab646f24",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "patch": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+class BIP65Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].generate(100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=3 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].generate(50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].generate(99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=4 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=3 block after 949 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].generate(1)\n+            raise AssertionError(\"Succeeded to mine a version=3 block after 950 version=4 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=3 block after 950 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      }
    ]
  },
  {
    "sha": "65ef3723024881b7b21597bb784503094a323fb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWVmMzcyMzAyNDg4MWI3YjIxNTk3YmI3ODQ1MDMwOTRhMzIzZmI0",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-09-27T18:32:10Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-08T15:37:10Z"
      },
      "message": "Add BIP65 to getblockchaininfo softforks list",
      "tree": {
        "sha": "507c6b2d9f2880fced0700aaade8a2000667db52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/507c6b2d9f2880fced0700aaade8a2000667db52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65ef3723024881b7b21597bb784503094a323fb4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWFo2oXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwMTBhNzM3MDkwMmI0MzFmZjE4MDM2ODQ0YjgzZThlNjBi\nMWM1NDAzMzQwOWNlZmYvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udy32Qf/Xc53j5l2tL1Yo48/xs1/TgKX\nGre4Z36uX4sRqbY0/RNcztUV902zsmXwMz0ZOtSpXLSLANfJ31UvWrs3xi2gOrY5\nagjz4CxBGQYm3GmUFrt/zCJUiNniCo5bAOGuKQdtSoJDOs47CwN+oSrqlC4Ut3pg\nELYN+Itqvos0MZwDz+aPrX7yz33MECD6cMy6tPWGr3ZizloytasCHi9VzMdgSU73\nLGJzJExrCWSVONT3jIYpVSjXmTJPBr4JfWlvqQai4Nx3+0DE6l+tmW52++x4QTuL\nrXe+TSofF6CZsHCGQGIhZ7jrAiN0sZcZQSS0fzGR+FP8MOW6q++YgMk6cG9cKQ==\n=nQ8q\n-----END PGP SIGNATURE-----",
        "payload": "tree 507c6b2d9f2880fced0700aaade8a2000667db52\nparent cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d\nauthor Peter Todd <pete@petertodd.org> 1443378730 -0400\ncommitter Peter Todd <pete@petertodd.org> 1444318630 +0200\n\nAdd BIP65 to getblockchaininfo softforks list\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef3723024881b7b21597bb784503094a323fb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef3723024881b7b21597bb784503094a323fb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef3723024881b7b21597bb784503094a323fb4/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cde7ab2d4ea7fbf71497c42edc1a82b9c8e6c91d"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "20c0c1fb2f2e46b0be7c554ba294b0fbc2364117",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65ef3723024881b7b21597bb784503094a323fb4/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65ef3723024881b7b21597bb784503094a323fb4/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=65ef3723024881b7b21597bb784503094a323fb4",
        "patch": "@@ -648,6 +648,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     UniValue softforks(UniValue::VARR);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n \n     if (fPruneMode)"
      }
    ]
  },
  {
    "sha": "3499ce1e1ad87a86598d00b7124072c91ddad833",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDk5Y2UxZTFhZDg3YTg2NTk4ZDAwYjcxMjQwNzJjOTFkZGFkODMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-08T00:12:24Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T16:32:27Z"
      },
      "message": "Encapsulate CLevelDB iterators cleanly\n\nConflicts:\n\tsrc/leveldb.cpp\n\tsrc/leveldb.h\n\tsrc/txdb.cpp",
      "tree": {
        "sha": "a85dd4fc69ca25aad28bf5bead2097d9688abece",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85dd4fc69ca25aad28bf5bead2097d9688abece"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3499ce1e1ad87a86598d00b7124072c91ddad833",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499ce1e1ad87a86598d00b7124072c91ddad833",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3499ce1e1ad87a86598d00b7124072c91ddad833",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499ce1e1ad87a86598d00b7124072c91ddad833/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fac576c619f450da8ca09ac8790063b3dea4364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fac576c619f450da8ca09ac8790063b3dea4364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fac576c619f450da8ca09ac8790063b3dea4364"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 89,
      "deletions": 44
    },
    "files": [
      {
        "sha": "a94cfd8a305a90e05015982176cea119b95c3b97",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=3499ce1e1ad87a86598d00b7124072c91ddad833",
        "patch": "@@ -131,7 +131,7 @@ std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n \n bool CLevelDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<leveldb::Iterator> it(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n@@ -145,3 +145,10 @@ std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n { \n     return HexStr(obfuscate_key); \n }\n+ \n+CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n+bool CLevelDBIterator::Valid() { return piter->Valid(); }\n+void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n+void CLevelDBIterator::Next() { piter->Next(); }\n+void CLevelDBIterator::Prev() { piter->Prev(); }"
      },
      {
        "sha": "ece4e4969409f69c1f5be94d2c083eb83bc534e3",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 61,
        "deletions": 4,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3499ce1e1ad87a86598d00b7124072c91ddad833/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=3499ce1e1ad87a86598d00b7124072c91ddad833",
        "patch": "@@ -68,7 +68,65 @@ class CLevelDBBatch\n         batch.Delete(slKey);\n     }\n };\n+ \n+class CLevelDBIterator\n+{\n+private:\n+    leveldb::Iterator *piter;\n+\n+public:\n+    CLevelDBIterator(leveldb::Iterator *piterIn) : piter(piterIn) {}\n+    ~CLevelDBIterator();\n+\n+    bool Valid();\n \n+    void SeekToFirst();\n+    void SeekToLast();\n+\n+    template<typename K> void Seek(const K& key) {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey << key;\n+        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        piter->Seek(slKey);\n+    }\n+\n+    void Next();\n+    void Prev();\n+\n+    template<typename K> bool GetKey(K& key) {\n+        leveldb::Slice slKey = piter->key();\n+        try {\n+            CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n+            ssKey >> key;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetKeySize() {\n+        return piter->key().size();\n+    }\n+\n+    template<typename V> bool GetValue(V& value) {\n+        leveldb::Slice slValue = piter->value();\n+        try {\n+            CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue.Xor(db.GetObfuscateKey());\n+            ssValue >> value;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetValueSize() {\n+        return piter->value().size();\n+    }\n+\n+};\n+ \n class CLevelDBWrapper\n {\n private:\n@@ -191,11 +249,10 @@ class CLevelDBWrapper\n         return WriteBatch(batch, true);\n     }\n \n-    // not exactly clean encapsulation, but it's easiest for now\n-    leveldb::Iterator* NewIterator()\n+    CLevelDBIterator *NewIterator() \n+    {\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions));\n     {\n-        return pdb->NewIterator(iteroptions);\n-    }\n \n     /**\n      * Return true if the database managed by this class contains no entries."
      },
      {
        "sha": "3d20508912ea1dea8ed8b2ee6c7ca0444e0d2109",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 39,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3499ce1e1ad87a86598d00b7124072c91ddad833/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3499ce1e1ad87a86598d00b7124072c91ddad833/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3499ce1e1ad87a86598d00b7124072c91ddad833",
        "patch": "@@ -98,31 +98,19 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n-    pcursor->SeekToFirst();\n+    boost::scoped_ptr<CLevelDBWrapper> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n     CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_COINS) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CCoins coins;\n-                ssValue >> coins;\n-                uint256 txhash;\n-                ssKey >> txhash;\n-                ss << txhash;\n-                ss << VARINT(coins.nVersion);\n-                ss << (coins.fCoinBase ? 'c' : 'n');\n-                ss << VARINT(coins.nHeight);\n+        std::pair<char, uint256> key;\n+        CCoins coins;\n+        if (pcursor->GetKey(key) && key.first == 'c') {\n+            if (pcursor->GetValue(coins)) {\n                 stats.nTransactions++;\n                 for (unsigned int i=0; i<coins.vout.size(); i++) {\n                     const CTxOut &out = coins.vout[i];\n@@ -133,13 +121,15 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + slValue.size();\n+                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n                 ss << VARINT(0);\n+            } else {\n+                return error(\"CCoinsViewDB::GetStats() : unable to read value\");\n             }\n-            pcursor->Next();\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n+        pcursor->Next();\n     }\n     {\n         LOCK(cs_main);\n@@ -189,24 +179,15 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n     boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n \n-    CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n-    pcursor->Seek(ssKeySet.str());\n+    pcursor->Seek(make_pair('b', uint256(0)));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_BLOCK_INDEX) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CDiskBlockIndex diskindex;\n-                ssValue >> diskindex;\n-\n+        std::pair<char, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == 'b') {\n+            CDiskBlockIndex diskindex;\n+            if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object\n                 CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetBlockHash());\n                 pindexNew->pprev          = InsertBlockIndex(diskindex.hashPrev);\n@@ -227,10 +208,10 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n \n                 pcursor->Next();\n             } else {\n-                break; // if shutdown requested or finished loading block index\n+                return error(\"LoadBlockIndex() : failed to read value\");\n             }\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "0fdf8c80ee322ab747321d61faf9c72af4a51445",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmRmOGM4MGVlMzIyYWI3NDczMjFkNjFmYWY5YzcyYWY0YTUxNDQ1",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T07:44:10Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T16:32:27Z"
      },
      "message": "Handle obfuscation in CLevelDBIterator",
      "tree": {
        "sha": "b9e94a6249b05fa597d9f3926316215c74710c60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9e94a6249b05fa597d9f3926316215c74710c60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdf8c80ee322ab747321d61faf9c72af4a51445",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3499ce1e1ad87a86598d00b7124072c91ddad833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3499ce1e1ad87a86598d00b7124072c91ddad833",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3499ce1e1ad87a86598d00b7124072c91ddad833"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "32c9345be5c5e10c92c5183a91ef403a60877d19",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "patch": "@@ -145,7 +145,7 @@ std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n { \n     return HexStr(obfuscate_key); \n }\n- \n+\n CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n bool CLevelDBIterator::Valid() { return piter->Valid(); }\n void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }"
      },
      {
        "sha": "891381c5f2f0d96491ee11f07a6b520a28da4264",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "patch": "@@ -73,9 +73,16 @@ class CLevelDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n+    const std::vector<unsigned char> obfuscate_key;\n \n public:\n-    CLevelDBIterator(leveldb::Iterator *piterIn) : piter(piterIn) {}\n+\n+    /**\n+     * @param[in] piterIn          The original leveldb iterator.\n+     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     */\n+    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>& obfuscate_key) : \n+        piter(piterIn), obfuscate_key(obfuscate_key) { };\n     ~CLevelDBIterator();\n \n     bool Valid();\n@@ -113,7 +120,7 @@ class CLevelDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(db.GetObfuscateKey());\n+            ssValue.Xor(obfuscate_key);\n             ssValue >> value;\n         } catch(std::exception &e) {\n             return false;\n@@ -251,8 +258,8 @@ class CLevelDBWrapper\n \n     CLevelDBIterator *NewIterator() \n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions));\n-    {\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions), obfuscate_key);\n+    }\n \n     /**\n      * Return true if the database managed by this class contains no entries."
      },
      {
        "sha": "4d7ec27aaec5454590ab453c210f9d5ca6de96ac",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdf8c80ee322ab747321d61faf9c72af4a51445/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "patch": "@@ -98,7 +98,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<CLevelDBWrapper> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n     pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n@@ -177,9 +177,9 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair('b', uint256(0)));\n+    pcursor->Seek(make_pair('b', uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {"
      }
    ]
  },
  {
    "sha": "34754ce3bc33a8b3c2e7d03039301ba171ac3362",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDc1NGNlM2JjMzNhOGIzYzJlN2QwMzAzOTMwMWJhMTcxYWMzMzYy",
    "commit": {
      "author": {
        "name": "Chris Kleeschulte",
        "email": "chrisk@bitpay.com",
        "date": "2015-10-08T19:21:54Z"
      },
      "committer": {
        "name": "Chris Kleeschulte",
        "email": "chrisk@bitpay.com",
        "date": "2015-10-08T19:27:12Z"
      },
      "message": "[Trivial] Fixed typo when referring to a previous section in\ndepends/README.md [skip ci]",
      "tree": {
        "sha": "fd4db7fc1607cb75f19e3ad27872608058ab7a32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd4db7fc1607cb75f19e3ad27872608058ab7a32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34754ce3bc33a8b3c2e7d03039301ba171ac3362",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34754ce3bc33a8b3c2e7d03039301ba171ac3362",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34754ce3bc33a8b3c2e7d03039301ba171ac3362",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34754ce3bc33a8b3c2e7d03039301ba171ac3362/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d479311dba25d6a697a0c5bebbb1e913a0121b9f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d85e652c60f23810bef2dca5b32c22b2c1b6946b",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34754ce3bc33a8b3c2e7d03039301ba171ac3362/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34754ce3bc33a8b3c2e7d03039301ba171ac3362/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=34754ce3bc33a8b3c2e7d03039301ba171ac3362",
        "patch": "@@ -13,7 +13,7 @@ For example:\n     make HOST=x86_64-w64-mingw32 -j4\n \n A prefix will be generated that's suitable for plugging into Bitcoin's\n-configure. In the above example, a dir named i686-w64-mingw32 will be\n+configure. In the above example, a dir named x86_64-w64-mingw32 will be\n created. To use it for Bitcoin:\n \n     ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32"
      }
    ]
  },
  {
    "sha": "a99b6cb19ee7688e28608ccbdc79470726de51be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTliNmNiMTllZTc2ODhlMjg2MDhjY2JkYzc5NDcwNzI2ZGU1MWJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T08:11:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T08:15:48Z"
      },
      "message": "Merge pull request #6770\n\nb2af29b Ignore bench_bitcoin binary. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "7ec9909f7810ad5f29776c967313ff1e606fc7ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ec9909f7810ad5f29776c967313ff1e606fc7ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a99b6cb19ee7688e28608ccbdc79470726de51be",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWF3e0AAoJEHSBCwEjRsmmON0H/imEZILHrnZVCJjTwVqBoAV4\n/H9kvqZIkl9WkjwSSMeFhgYFgYmZMUdLHXdzG93SE1DDbvI38JJ5ct6EhCMbZvC+\nUT6witHd1sVemtsK04GJSWx4artXUxguNF2Y810Ld/Ei5sXE2JQ6AZOBj1AR0WrB\nNJYuSeSM28hxVHPa12TC0bPiZtoZzbjMbbE0iJmId2CgHBLLE4Zprc9Gij97zMqM\nmUTNYsI3I8DtjVvJ37w5iViJPdPaVQfVCcRp9xm+BdDb3CDnrztH7w8xf7JKexK1\nEEgr57ZXkNbf3hqeELeVjOUbLqEjcQXu9+zrQoLyvBJwqIwmAELXmlapvbht21c=\n=uVdz\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ec9909f7810ad5f29776c967313ff1e606fc7ad\nparent d479311dba25d6a697a0c5bebbb1e913a0121b9f\nparent b2af29b806080d95e1e8d70f2929138a4d5db8e1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444378285 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444378548 +0200\n\nMerge pull request #6770\n\nb2af29b Ignore bench_bitcoin binary. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99b6cb19ee7688e28608ccbdc79470726de51be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a99b6cb19ee7688e28608ccbdc79470726de51be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99b6cb19ee7688e28608ccbdc79470726de51be/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d479311dba25d6a697a0c5bebbb1e913a0121b9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d479311dba25d6a697a0c5bebbb1e913a0121b9f"
      },
      {
        "sha": "b2af29b806080d95e1e8d70f2929138a4d5db8e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2af29b806080d95e1e8d70f2929138a4d5db8e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2af29b806080d95e1e8d70f2929138a4d5db8e1"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e231fe4cab5cb0fb49418ce68b145c0e2c541c16",
        "filename": "src/bench/.gitignore",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a99b6cb19ee7688e28608ccbdc79470726de51be/src/bench/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a99b6cb19ee7688e28608ccbdc79470726de51be/src/bench/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/.gitignore?ref=a99b6cb19ee7688e28608ccbdc79470726de51be",
        "patch": "@@ -0,0 +1 @@\n+bench_bitcoin"
      }
    ]
  },
  {
    "sha": "c82ea8b271c85e85b3767b1a9862fdcdc63260c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODJlYThiMjcxYzg1ZTg1YjM3NjdiMWE5ODYyZmRjZGM2MzI2MGMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T08:21:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T08:21:27Z"
      },
      "message": "Merge pull request #6783\n\n34754ce [Trivial] Fixed typo when referring to a previous section in depends/README.md [skip ci] (Chris Kleeschulte)",
      "tree": {
        "sha": "d4e4d5a128ab599b5555c2938e58598fd5b548c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4e4d5a128ab599b5555c2938e58598fd5b548c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c82ea8b271c85e85b3767b1a9862fdcdc63260c2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWF3kHAAoJEHSBCwEjRsmmHksH/3mT0K+knZ2iY/zPAzy1tl73\nLV2zn66m28SpNy0d0MLd62++Xcu6LwpxdHiW/wOSSUxXfO057FZiPScSd7FUQeEN\nOKjigFofQjltq0v6DTdqg5R43xIQhqoOBcF+1efnEjZHmVA99QiIygZ+V7Sogwh9\n1apRssDaCL28ZNZ2bEgPIF4uafZk2TDtzZ9LEfKIa35TaS6gHDH1HS72hDXL7YXg\nYW3HAM9EBf38j021CfE4y6L1/3/6XtKOQgmzqY8kfroyt0X/8TvkdDR+SnLpzLTx\nTeRcs2VzyRu16ZI9oOHi5twIqCGy30K7wR3787oE6M4Ety2UZWmMGoaDetlrv+I=\n=QqnF\n-----END PGP SIGNATURE-----",
        "payload": "tree d4e4d5a128ab599b5555c2938e58598fd5b548c8\nparent a99b6cb19ee7688e28608ccbdc79470726de51be\nparent 34754ce3bc33a8b3c2e7d03039301ba171ac3362\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444378881 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444378887 +0200\n\nMerge pull request #6783\n\n34754ce [Trivial] Fixed typo when referring to a previous section in depends/README.md [skip ci] (Chris Kleeschulte)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c82ea8b271c85e85b3767b1a9862fdcdc63260c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c82ea8b271c85e85b3767b1a9862fdcdc63260c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c82ea8b271c85e85b3767b1a9862fdcdc63260c2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a99b6cb19ee7688e28608ccbdc79470726de51be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a99b6cb19ee7688e28608ccbdc79470726de51be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a99b6cb19ee7688e28608ccbdc79470726de51be"
      },
      {
        "sha": "34754ce3bc33a8b3c2e7d03039301ba171ac3362",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34754ce3bc33a8b3c2e7d03039301ba171ac3362",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34754ce3bc33a8b3c2e7d03039301ba171ac3362"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d85e652c60f23810bef2dca5b32c22b2c1b6946b",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c82ea8b271c85e85b3767b1a9862fdcdc63260c2/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c82ea8b271c85e85b3767b1a9862fdcdc63260c2/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=c82ea8b271c85e85b3767b1a9862fdcdc63260c2",
        "patch": "@@ -13,7 +13,7 @@ For example:\n     make HOST=x86_64-w64-mingw32 -j4\n \n A prefix will be generated that's suitable for plugging into Bitcoin's\n-configure. In the above example, a dir named i686-w64-mingw32 will be\n+configure. In the above example, a dir named x86_64-w64-mingw32 will be\n created. To use it for Bitcoin:\n \n     ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32"
      }
    ]
  },
  {
    "sha": "6cf73b0cd4cf510aafc37719c68e6634c1719502",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2Y3M2IwY2Q0Y2Y1MTBhYWZjMzc3MTljNjhlNjYzNGMxNzE5NTAy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T08:24:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T08:26:48Z"
      },
      "message": "Merge pull request #6779\n\nb22692c build: Make use of ZMQ_CFLAGS (Cory Fields)",
      "tree": {
        "sha": "2ce0d6ce629bbeac62c2f608d56101f07ee53e63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ce0d6ce629bbeac62c2f608d56101f07ee53e63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6cf73b0cd4cf510aafc37719c68e6634c1719502",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWF3pIAAoJEHSBCwEjRsmmMLYIAI1N3bHjUq8wVo2wQ1ljUHwz\n5hgc6uuEeooZGkRQGsNnzFErKjRTnWgDNTSUJiilXl6iT9Wtq2Db/kkHxONJdbBQ\ntEnBVqkSVSGNAcDMdzg/quM1PMvJxGGIYolGmsDdTNMvwghbVa/kHkBhgQZXpsfx\nAfu2UplBNU7D8oW158Lz974vP4LTNJ/0P4aN1E32oibP1//vZ94NGRIkfpxZCFEC\nwAfU2vVPnICcPOV37h/KQ1ZlC++6IYiyFezCKzR0axuFTRcq4G9ipX9ZdHthcGIN\nn0AGvj8gNdluuidXMsogVaC2EUWW7NxD4eYtuMmEbRdW6g2OVcqy7KkgQIu0XlM=\n=Eqxk\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ce0d6ce629bbeac62c2f608d56101f07ee53e63\nparent c82ea8b271c85e85b3767b1a9862fdcdc63260c2\nparent b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444379066 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444379208 +0200\n\nMerge pull request #6779\n\nb22692c build: Make use of ZMQ_CFLAGS (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf73b0cd4cf510aafc37719c68e6634c1719502",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf73b0cd4cf510aafc37719c68e6634c1719502",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf73b0cd4cf510aafc37719c68e6634c1719502/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c82ea8b271c85e85b3767b1a9862fdcdc63260c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c82ea8b271c85e85b3767b1a9862fdcdc63260c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c82ea8b271c85e85b3767b1a9862fdcdc63260c2"
      },
      {
        "sha": "b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b22692ce3e1669ddeeeb158a0eecedcdbcb1e36d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0654ff4227d67a2b4be7e9bf32d79f4d3334cc0e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf73b0cd4cf510aafc37719c68e6634c1719502/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf73b0cd4cf510aafc37719c68e6634c1719502/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "patch": "@@ -214,7 +214,7 @@ libbitcoin_server_a_SOURCES = \\\n if ENABLE_ZMQ\n LIBBITCOIN_ZMQ=libbitcoin_zmq.a\n \n-libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n+libbitcoin_zmq_a_CPPFLAGS = $(BITCOIN_INCLUDES) $(ZMQ_CFLAGS)\n libbitcoin_zmq_a_SOURCES = \\\n   zmq/zmqabstractnotifier.cpp \\\n   zmq/zmqnotificationinterface.cpp \\"
      }
    ]
  },
  {
    "sha": "313e7f5c89d6e72e06efe9255089765b4c5815fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTNlN2Y1Yzg5ZDZlNzJlMDZlZmU5MjU1MDg5NzY1YjRjNTgxNWZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T09:36:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T09:36:59Z"
      },
      "message": "Squashed 'src/univalue/' changes from 87d9045..5839ac3\n\n5839ac3 Merge pull request #13 from theuni/move-lib\n3f248e0 build: move libunivalue.la to the root dir\na68aed5 Merge pull request #12 from jmcorgan/add-ignores\n81cafe3 Update and consolidate git ignores\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: 5839ac3311792f80b9cd5070440c2256e0e69e13",
      "tree": {
        "sha": "259c34c09fea315ca8ac9efd61111e6321c315cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/259c34c09fea315ca8ac9efd61111e6321c315cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/313e7f5c89d6e72e06efe9255089765b4c5815fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/313e7f5c89d6e72e06efe9255089765b4c5815fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/313e7f5c89d6e72e06efe9255089765b4c5815fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/313e7f5c89d6e72e06efe9255089765b4c5815fe/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f9f082b5ef3c495c70598ef23383effef675f9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9f082b5ef3c495c70598ef23383effef675f9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9f082b5ef3c495c70598ef23383effef675f9a"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 15,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a7a2ca91975b11155b9877c745b06aa759197fbe",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/313e7f5c89d6e72e06efe9255089765b4c5815fe/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/313e7f5c89d6e72e06efe9255089765b4c5815fe/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=313e7f5c89d6e72e06efe9255089765b4c5815fe",
        "patch": "@@ -19,4 +19,13 @@ test-driver\n libtool\n ltmain.sh\n \n+*.a\n+*.la\n+*.lo\n+*.logs\n *.o\n+*.pc\n+*.trs\n+\n+.dirstamp\n+.libs"
      },
      {
        "sha": "df9e66229c4069c164cc47642a1752b31f16ed7b",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/313e7f5c89d6e72e06efe9255089765b4c5815fe/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/313e7f5c89d6e72e06efe9255089765b4c5815fe/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=313e7f5c89d6e72e06efe9255089765b4c5815fe",
        "patch": "@@ -5,20 +5,20 @@ ACLOCAL_AMFLAGS = -I build-aux/m4\n include_HEADERS = include/univalue.h\n noinst_HEADERS = lib/univalue_escapes.h\n \n-lib_LTLIBRARIES = lib/libunivalue.la\n+lib_LTLIBRARIES = libunivalue.la\n \n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA = pc/libunivalue.pc\n \n-lib_libunivalue_la_SOURCES = \\\n+libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n-lib_libunivalue_la_LDFLAGS = \\\n+libunivalue_la_LDFLAGS = \\\n \t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n \t-no-undefined\n-lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n TESTS = test/unitester\n \n@@ -38,7 +38,7 @@ noinst_PROGRAMS = $(TESTS)\n TEST_DATA_DIR=test\n \n test_unitester_SOURCES = test/unitester.cpp\n-test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n "
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "build-aux/m4/.empty",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/.empty?ref=2f9f082b5ef3c495c70598ef23383effef675f9a"
      },
      {
        "sha": "f063686524ea4b501f819e52865dff64f3ec5324",
        "filename": "build-aux/m4/.gitignore",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/313e7f5c89d6e72e06efe9255089765b4c5815fe/build-aux/m4/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/313e7f5c89d6e72e06efe9255089765b4c5815fe/build-aux/m4/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/.gitignore?ref=313e7f5c89d6e72e06efe9255089765b4c5815fe",
        "patch": "@@ -0,0 +1 @@\n+/*.m4"
      },
      {
        "sha": "ee7fc2851cd511579ee60c7a9fa916f3897c11e2",
        "filename": "lib/.gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/313e7f5c89d6e72e06efe9255089765b4c5815fe/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/313e7f5c89d6e72e06efe9255089765b4c5815fe/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/.gitignore?ref=313e7f5c89d6e72e06efe9255089765b4c5815fe",
        "patch": "@@ -1,10 +1,2 @@\n-\n-libunivalue-uninstalled.pc\n-libunivalue.pc\n-libunivalue.a\n gen\n-\n .libs\n-*.lo\n-*.la\n-"
      },
      {
        "sha": "4afa094b106d601c690c13d1f88f03a96921fbfd",
        "filename": "test/.gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/313e7f5c89d6e72e06efe9255089765b4c5815fe/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/313e7f5c89d6e72e06efe9255089765b4c5815fe/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/.gitignore?ref=313e7f5c89d6e72e06efe9255089765b4c5815fe",
        "patch": "@@ -1,7 +1 @@\n-\n unitester\n-\n-*.log\n-*.trs\n-\n-.libs"
      }
    ]
  },
  {
    "sha": "31f4ba97b78e781b34b0e09130de923dc754c8f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWY0YmE5N2I3OGU3ODFiMzRiMGUwOTEzMGRlOTIzZGM3NTRjOGY4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T09:37:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T09:37:00Z"
      },
      "message": "Merge commit '313e7f5c89d6e72e06efe9255089765b4c5815fe' into HEAD",
      "tree": {
        "sha": "e82eda6c98889f233641d984706d4061b5779fc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e82eda6c98889f233641d984706d4061b5779fc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31f4ba97b78e781b34b0e09130de923dc754c8f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f4ba97b78e781b34b0e09130de923dc754c8f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31f4ba97b78e781b34b0e09130de923dc754c8f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f4ba97b78e781b34b0e09130de923dc754c8f8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf73b0cd4cf510aafc37719c68e6634c1719502"
      },
      {
        "sha": "313e7f5c89d6e72e06efe9255089765b4c5815fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/313e7f5c89d6e72e06efe9255089765b4c5815fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/313e7f5c89d6e72e06efe9255089765b4c5815fe"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 15,
      "deletions": 19
    },
    "files": [
      {
        "sha": "a7a2ca91975b11155b9877c745b06aa759197fbe",
        "filename": "src/univalue/.gitignore",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.gitignore?ref=31f4ba97b78e781b34b0e09130de923dc754c8f8",
        "patch": "@@ -19,4 +19,13 @@ test-driver\n libtool\n ltmain.sh\n \n+*.a\n+*.la\n+*.lo\n+*.logs\n *.o\n+*.pc\n+*.trs\n+\n+.dirstamp\n+.libs"
      },
      {
        "sha": "df9e66229c4069c164cc47642a1752b31f16ed7b",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=31f4ba97b78e781b34b0e09130de923dc754c8f8",
        "patch": "@@ -5,20 +5,20 @@ ACLOCAL_AMFLAGS = -I build-aux/m4\n include_HEADERS = include/univalue.h\n noinst_HEADERS = lib/univalue_escapes.h\n \n-lib_LTLIBRARIES = lib/libunivalue.la\n+lib_LTLIBRARIES = libunivalue.la\n \n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA = pc/libunivalue.pc\n \n-lib_libunivalue_la_SOURCES = \\\n+libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n-lib_libunivalue_la_LDFLAGS = \\\n+libunivalue_la_LDFLAGS = \\\n \t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n \t-no-undefined\n-lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n TESTS = test/unitester\n \n@@ -38,7 +38,7 @@ noinst_PROGRAMS = $(TESTS)\n TEST_DATA_DIR=test\n \n test_unitester_SOURCES = test/unitester.cpp\n-test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n "
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "src/univalue/build-aux/m4/.empty",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6cf73b0cd4cf510aafc37719c68e6634c1719502/src/univalue/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6cf73b0cd4cf510aafc37719c68e6634c1719502/src/univalue/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/.empty?ref=6cf73b0cd4cf510aafc37719c68e6634c1719502"
      },
      {
        "sha": "f063686524ea4b501f819e52865dff64f3ec5324",
        "filename": "src/univalue/build-aux/m4/.gitignore",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/build-aux/m4/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/build-aux/m4/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/.gitignore?ref=31f4ba97b78e781b34b0e09130de923dc754c8f8",
        "patch": "@@ -0,0 +1 @@\n+/*.m4"
      },
      {
        "sha": "ee7fc2851cd511579ee60c7a9fa916f3897c11e2",
        "filename": "src/univalue/lib/.gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/.gitignore?ref=31f4ba97b78e781b34b0e09130de923dc754c8f8",
        "patch": "@@ -1,10 +1,2 @@\n-\n-libunivalue-uninstalled.pc\n-libunivalue.pc\n-libunivalue.a\n gen\n-\n .libs\n-*.lo\n-*.la\n-"
      },
      {
        "sha": "4afa094b106d601c690c13d1f88f03a96921fbfd",
        "filename": "src/univalue/test/.gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31f4ba97b78e781b34b0e09130de923dc754c8f8/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=31f4ba97b78e781b34b0e09130de923dc754c8f8",
        "patch": "@@ -1,7 +1 @@\n-\n unitester\n-\n-*.log\n-*.trs\n-\n-.libs"
      }
    ]
  },
  {
    "sha": "3b1279fdb269727f4fd964df0c238401467930ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjEyNzlmZGIyNjk3MjdmNGZkOTY0ZGYwYzIzODQwMTQ2NzkzMGVh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-10-08T04:09:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T09:38:05Z"
      },
      "message": "build: match upstream build change",
      "tree": {
        "sha": "890f87ab0f623887996d3e2140b4d015a81ba846",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/890f87ab0f623887996d3e2140b4d015a81ba846"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b1279fdb269727f4fd964df0c238401467930ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1279fdb269727f4fd964df0c238401467930ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1279fdb269727f4fd964df0c238401467930ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1279fdb269727f4fd964df0c238401467930ea/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31f4ba97b78e781b34b0e09130de923dc754c8f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31f4ba97b78e781b34b0e09130de923dc754c8f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31f4ba97b78e781b34b0e09130de923dc754c8f8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "605031eb43fc8cfada3f7a31d53d174d04c87d62",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b1279fdb269727f4fd964df0c238401467930ea/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b1279fdb269727f4fd964df0c238401467930ea/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3b1279fdb269727f4fd964df0c238401467930ea",
        "patch": "@@ -31,7 +31,7 @@ LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n-LIBUNIVALUE=univalue/lib/libunivalue.la\n+LIBUNIVALUE=univalue/libunivalue.la\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)"
      }
    ]
  },
  {
    "sha": "0cca0248f030ea32bd8de778b5a2782e0d191978",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2NhMDI0OGYwMzBlYTMyYmQ4ZGU3NzhiNWEyNzgyZTBkMTkxOTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T11:16:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T11:16:44Z"
      },
      "message": "Update miniupnpc to 1.9.20151008\n\nThis version of miniupnpc fixes a buffer overflow in the XML (ugh)\nparser during initial network discovery.\n\nhttp://talosintel.com/reports/TALOS-2015-0035/\n\nThe commit fixing the vulnerability is:\nhttps://github.com/miniupnp/miniupnp/commit/79cca974a4c2ab1199786732a67ff6d898051b78\n\nReported by timothy on IRC.",
      "tree": {
        "sha": "b9b612128ac4702f5017643ad52b07ebe456331b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9b612128ac4702f5017643ad52b07ebe456331b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cca0248f030ea32bd8de778b5a2782e0d191978",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cca0248f030ea32bd8de778b5a2782e0d191978",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cca0248f030ea32bd8de778b5a2782e0d191978",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cca0248f030ea32bd8de778b5a2782e0d191978/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf73b0cd4cf510aafc37719c68e6634c1719502"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "77bae10c793db1edf165850db891e6c4584008b1",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cca0248f030ea32bd8de778b5a2782e0d191978/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cca0248f030ea32bd8de778b5a2782e0d191978/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=0cca0248f030ea32bd8de778b5a2782e0d191978",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=1.9.20150730\n+$(package)_version=1.9.20151008\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=1d64fab1fd3b4c8545139341ba197f19329a863f4f21b578fc2a228ab586a604\n+$(package)_sha256_hash=e444ac3b587ce82709c4d0cfca1fe71f44f9fc433e9f946b12b9e1bfe667a633\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      }
    ]
  },
  {
    "sha": "8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzdlNjEzOGRiY2JkNGEyYjVmZTY3ZTczNGUyYjBmZTBmMDk2MWJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T12:51:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T12:51:09Z"
      },
      "message": "Merge pull request #6789\n\n0cca024 Update miniupnpc to 1.9.20151008 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "b9b612128ac4702f5017643ad52b07ebe456331b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9b612128ac4702f5017643ad52b07ebe456331b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWF7g9AAoJEHSBCwEjRsmmwBYH/2yxokDaAMM5BRvlxRiKQj1B\nzulbKqcSoFmdgzpQT2QX6fuuvg8sPvfqEDbBlCVpUtqlaoD3mxYdq2rYm88/Ub4h\nQUns4uxhUJIUI4hfn+AjwFEkeKLMHJfflDLkFYoGFzYGS3mz0PPtELWaxAX59mDm\nphtv4PlWu67tAlVBnlOLxusU2Rp07S2OV3r85WR1JnkE+h1fH7sRF+0TmgHuPHwL\nSTib+0JuThQpV9NBEYdU2SCjhcnJAj3qvgJY0yQblxLx1HbaaNteVvf3xcz8QNA+\nujQgLPloSobX3DLwSMnU1lMsqTLXfCbLQAt5mc2Dul+G9/eq08AjiMEJ0V6sbcM=\n=/SEB\n-----END PGP SIGNATURE-----",
        "payload": "tree b9b612128ac4702f5017643ad52b07ebe456331b\nparent 6cf73b0cd4cf510aafc37719c68e6634c1719502\nparent 0cca0248f030ea32bd8de778b5a2782e0d191978\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444395065 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444395069 +0200\n\nMerge pull request #6789\n\n0cca024 Update miniupnpc to 1.9.20151008 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf73b0cd4cf510aafc37719c68e6634c1719502"
      },
      {
        "sha": "0cca0248f030ea32bd8de778b5a2782e0d191978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cca0248f030ea32bd8de778b5a2782e0d191978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0cca0248f030ea32bd8de778b5a2782e0d191978"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "77bae10c793db1edf165850db891e6c4584008b1",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "patch": "@@ -1,8 +1,8 @@\n package=miniupnpc\n-$(package)_version=1.9.20150730\n+$(package)_version=1.9.20151008\n $(package)_download_path=http://miniupnp.free.fr/files\n $(package)_file_name=$(package)-$($(package)_version).tar.gz\n-$(package)_sha256_hash=1d64fab1fd3b4c8545139341ba197f19329a863f4f21b578fc2a228ab586a604\n+$(package)_sha256_hash=e444ac3b587ce82709c4d0cfca1fe71f44f9fc433e9f946b12b9e1bfe667a633\n \n define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\""
      }
    ]
  },
  {
    "sha": "8a320c7956f1cb051305a7664d7c6bb8d555e5e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTMyMGM3OTU2ZjFjYjA1MTMwNWE3NjY0ZDdjNmJiOGQ1NTVlNWU3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-26T15:57:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T14:57:28Z"
      },
      "message": "[trivial] Remove obsolete share/qt/make_windows_icon.sh",
      "tree": {
        "sha": "c3c4189e9de0c91a7674793fdcd278c014f7adf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3c4189e9de0c91a7674793fdcd278c014f7adf4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a320c7956f1cb051305a7664d7c6bb8d555e5e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a320c7956f1cb051305a7664d7c6bb8d555e5e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a320c7956f1cb051305a7664d7c6bb8d555e5e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a320c7956f1cb051305a7664d7c6bb8d555e5e7/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "bf607b1c62384eba8ddbe4acf9f930d1b0f03ae3",
        "filename": "share/qt/make_windows_icon.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc/share/qt/make_windows_icon.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc/share/qt/make_windows_icon.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/make_windows_icon.sh?ref=8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "patch": "@@ -1,9 +0,0 @@\n-#!/bin/bash\n-# create multiresolution windows icon\n-ICON_SRC=../../src/qt/res/icons/bitcoin.png\n-ICON_DST=../../src/qt/res/icons/bitcoin.ico\n-convert ${ICON_SRC} -resize 16x16 bitcoin-16.png\n-convert ${ICON_SRC} -resize 32x32 bitcoin-32.png\n-convert ${ICON_SRC} -resize 48x48 bitcoin-48.png\n-convert bitcoin-16.png bitcoin-32.png bitcoin-48.png ${ICON_DST}\n-"
      }
    ]
  },
  {
    "sha": "3507992bcfd5a6b24355d9f652e5e249db725e44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTA3OTkyYmNmZDVhNmIyNDM1NWQ5ZjY1MmU1ZTI0OWRiNzI1ZTQ0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-26T16:01:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T15:09:05Z"
      },
      "message": "[trivial] Make optimize-pngs.py also cover share/pixmaps\n\nAlso fix:\n\"Exception: tostring() has been removed. Please call tobytes() instead.\"",
      "tree": {
        "sha": "1e3f2fedcc48c4304b9fb492164bcb00b358e70e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e3f2fedcc48c4304b9fb492164bcb00b358e70e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3507992bcfd5a6b24355d9f652e5e249db725e44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3507992bcfd5a6b24355d9f652e5e249db725e44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3507992bcfd5a6b24355d9f652e5e249db725e44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3507992bcfd5a6b24355d9f652e5e249db725e44/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a320c7956f1cb051305a7664d7c6bb8d555e5e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a320c7956f1cb051305a7664d7c6bb8d555e5e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a320c7956f1cb051305a7664d7c6bb8d555e5e7"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "799e0cc7d0fb15b6e9338c711d5ca4d813a06a32",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3507992bcfd5a6b24355d9f652e5e249db725e44/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3507992bcfd5a6b24355d9f652e5e249db725e44/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=3507992bcfd5a6b24355d9f652e5e249db725e44",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python\n '''\n-Run this scrip every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n+Run this script every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n #pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n '''\n import os\n@@ -18,12 +18,12 @@ def content_hash(filename):\n     '''Return hash of RGBA contents of image'''\n     i = Image.open(filename)\n     i = i.convert('RGBA')\n-    data = i.tostring()\n+    data = i.tobytes()\n     return hashlib.sha256(data).hexdigest()\n \n pngcrush = 'pngcrush'\n git = 'git'\n-folders = [\"src/qt/res/movies\", \"src/qt/res/icons\"]\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"share/pixmaps\"]\n basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n totalSaveBytes = 0\n noHashChange = True"
      }
    ]
  },
  {
    "sha": "60a8b70585d426d55ded88309c87d14c210e7032",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGE4YjcwNTg1ZDQyNmQ1NWRlZDg4MzA5Yzg3ZDE0YzIxMGU3MDMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-26T16:25:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T15:09:29Z"
      },
      "message": "[doc] trivial: developer-notes.md covers more than just coding standards",
      "tree": {
        "sha": "005103f8cd4cea7b00ef3fbc14a8d4cf007ad188",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/005103f8cd4cea7b00ef3fbc14a8d4cf007ad188"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60a8b70585d426d55ded88309c87d14c210e7032",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a8b70585d426d55ded88309c87d14c210e7032",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60a8b70585d426d55ded88309c87d14c210e7032",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a8b70585d426d55ded88309c87d14c210e7032/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3507992bcfd5a6b24355d9f652e5e249db725e44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3507992bcfd5a6b24355d9f652e5e249db725e44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3507992bcfd5a6b24355d9f652e5e249db725e44"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a649b3af4d37b5de82c9be6cf85e5e89eac28cd8",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60a8b70585d426d55ded88309c87d14c210e7032/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60a8b70585d426d55ded88309c87d14c210e7032/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=60a8b70585d426d55ded88309c87d14c210e7032",
        "patch": "@@ -1,5 +1,5 @@\n-Coding Standards\n-================\n+Developer Notes\n+===============\n \n Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to"
      }
    ]
  },
  {
    "sha": "d0321a4cfdd660b8335b5d7f14556fb2ec60af22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDMyMWE0Y2ZkZDY2MGI4MzM1YjVkN2YxNDU1NmZiMmVjNjBhZjIy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-08T12:54:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T15:09:29Z"
      },
      "message": "[doc] trivial: fix markdown syntax in qa/rpc-tests/README.md",
      "tree": {
        "sha": "9fb200629fc1698ef900cb773b75123aa107113d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fb200629fc1698ef900cb773b75123aa107113d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0321a4cfdd660b8335b5d7f14556fb2ec60af22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0321a4cfdd660b8335b5d7f14556fb2ec60af22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0321a4cfdd660b8335b5d7f14556fb2ec60af22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0321a4cfdd660b8335b5d7f14556fb2ec60af22/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "60a8b70585d426d55ded88309c87d14c210e7032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60a8b70585d426d55ded88309c87d14c210e7032",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60a8b70585d426d55ded88309c87d14c210e7032"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d2db00362fa189032d5a8da2c0d9ced5a53148a9",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0321a4cfdd660b8335b5d7f14556fb2ec60af22/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0321a4cfdd660b8335b5d7f14556fb2ec60af22/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=d0321a4cfdd660b8335b5d7f14556fb2ec60af22",
        "patch": "@@ -37,11 +37,11 @@ Helper functions for creating blocks and transactions.\n Notes\n =====\n \n-You can run any single test by calling qa/pull-tester/rpc-tests.py <testname>\n+You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n \n Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n \n-Run the regression test suite with `qa/pull-tester/rpc-tests.py'\n+Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n \n Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n "
      }
    ]
  },
  {
    "sha": "28e3249e53b8ef7516636df0f1406466a513095d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGUzMjQ5ZTUzYjhlZjc1MTY2MzZkZjBmMTQwNjQ2NmE1MTMwOTVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T17:36:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T17:36:32Z"
      },
      "message": "Bump minrelaytxfee default\n\nTo bridge the time until a dynamic method for determining this fee is\nmerged.\n\nThis is especially aimed at the stable releases (0.10, 0.11) because\nfull mempool limiting, as will be in 0.12, is too invasive and risky to\nbackport.",
      "tree": {
        "sha": "ba38d3530f653d308dab60cf398757c56e8d8778",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba38d3530f653d308dab60cf398757c56e8d8778"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28e3249e53b8ef7516636df0f1406466a513095d",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28e3249e53b8ef7516636df0f1406466a513095d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28e3249e53b8ef7516636df0f1406466a513095d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28e3249e53b8ef7516636df0f1406466a513095d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "baad7fc050be60b7c7b9aedcbf498fe15072b4ba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28e3249e53b8ef7516636df0f1406466a513095d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28e3249e53b8ef7516636df0f1406466a513095d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=28e3249e53b8ef7516636df0f1406466a513095d",
        "patch": "@@ -75,7 +75,7 @@ uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(1000);\n+CFeeRate minRelayTxFee = CFeeRate(5000);\n \n CTxMemPool mempool(::minRelayTxFee);\n "
      }
    ]
  },
  {
    "sha": "14885068726a8e0dc73ffa127225ab80be3e3612",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDg4NTA2ODcyNmE4ZTBkYzczZmZhMTI3MjI1YWI4MGJlM2UzNjEy",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-08T08:22:50Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-09T17:56:39Z"
      },
      "message": "Add tests for gettxoutsetinfo, CLevelDBBatch, CLevelDBIterator\n\nThanks @dexX7.",
      "tree": {
        "sha": "53d5098ed266593cc08c3d72bc6000062c519a15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53d5098ed266593cc08c3d72bc6000062c519a15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14885068726a8e0dc73ffa127225ab80be3e3612",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14885068726a8e0dc73ffa127225ab80be3e3612",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14885068726a8e0dc73ffa127225ab80be3e3612",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14885068726a8e0dc73ffa127225ab80be3e3612/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf8c80ee322ab747321d61faf9c72af4a51445",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdf8c80ee322ab747321d61faf9c72af4a51445"
      }
    ],
    "stats": {
      "total": 148,
      "additions": 140,
      "deletions": 8
    },
    "files": [
      {
        "sha": "db97767272b406374792299467f5136c3edf0e4a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14885068726a8e0dc73ffa127225ab80be3e3612/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14885068726a8e0dc73ffa127225ab80be3e3612/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=14885068726a8e0dc73ffa127225ab80be3e3612",
        "patch": "@@ -38,7 +38,7 @@\n buildDir = BUILDDIR\n os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n- \n+\n #Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n     print \"Win tests currently disabled.  Use -win option to enable\"\n@@ -67,6 +67,7 @@\n     'reindex.py',\n     'decodescript.py',\n     'p2p-fullblocktest.py',\n+    'blockchain.py',\n ]\n testScriptsExt = [\n     'bipdersig-p2p.py',\n@@ -98,20 +99,20 @@\n     rpcTestDir = buildDir + '/qa/rpc-tests/'\n     #Run Tests\n     for i in range(len(testScripts)):\n-       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts \n+       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts\n            or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-            print  \"Running testscript \" + testScripts[i] + \"...\" \n-            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+            print  \"Running testscript \" + testScripts[i] + \"...\"\n+            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n \t    #exit if help is called so we print just one set of instructions\n             p = re.compile(\" -h| --help\")\n             if p.match(passOn):\n                 sys.exit(0)\n \n     #Run Extended Tests\n     for i in range(len(testScriptsExt)):\n-        if ('-extended' in opts or testScriptsExt[i] in opts \n+        if ('-extended' in opts or testScriptsExt[i] in opts\n            or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n-            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\" \n-            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\"\n+            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n else:\n     print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "a5c98b777e0d42f900253dd68c614037f592b8c4",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14885068726a8e0dc73ffa127225ab80be3e3612/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14885068726a8e0dc73ffa127225ab80be3e3612/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=14885068726a8e0dc73ffa127225ab80be3e3612",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test RPC calls related to blockchain state.\n+#\n+\n+import decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    initialize_chain,\n+    assert_equal,\n+    start_nodes,\n+    connect_nodes_bi,\n+)\n+\n+class BlockchainTest(BitcoinTestFramework):\n+    \"\"\"\n+    Test blockchain-related RPC calls:\n+\n+        - gettxoutsetinfo\n+\n+    \"\"\"\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \" + self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        res = node.gettxoutsetinfo()\n+\n+        assert_equal(res[u'total_amount'], decimal.Decimal('8725.00000000'))\n+        assert_equal(res[u'transactions'], 200)\n+        assert_equal(res[u'height'], 200)\n+        assert_equal(res[u'txouts'], 200)\n+        assert_equal(res[u'bytes_serialized'], 13000),\n+        assert_equal(len(res[u'bestblock']), 64)\n+        assert_equal(len(res[u'hash_serialized']), 64)\n+\n+\n+if __name__ == '__main__':\n+    BlockchainTest().main()"
      },
      {
        "sha": "36975548c2119bc662203660c2180ec083968ebb",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 1,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14885068726a8e0dc73ffa127225ab80be3e3612/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14885068726a8e0dc73ffa127225ab80be3e3612/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=14885068726a8e0dc73ffa127225ab80be3e3612",
        "patch": "@@ -46,7 +46,86 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper)\n         BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n     }\n }\n-                       \n+\n+// Test batch operations\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        char key = 'i';\n+        uint256 in = GetRandHash();\n+        char key2 = 'j';\n+        uint256 in2 = GetRandHash();\n+        char key3 = 'k';\n+        uint256 in3 = GetRandHash();\n+\n+        uint256 res;\n+        CLevelDBBatch batch(dbw.GetObfuscateKey());\n+\n+        batch.Write(key, in);\n+        batch.Write(key2, in2);\n+        batch.Write(key3, in3);\n+\n+        // Remove key3 before it's even been written\n+        batch.Erase(key3);\n+\n+        dbw.WriteBatch(batch);\n+\n+        BOOST_CHECK(dbw.Read(key, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+        BOOST_CHECK(dbw.Read(key2, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in2.ToString());\n+\n+        // key3 never should've been written\n+        BOOST_CHECK(dbw.Read(key3, res) == false);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        // The two keys are intentionally chosen for ordering\n+        char key = 'j';\n+        uint256 in = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key, in));\n+        char key2 = 'k';\n+        uint256 in2 = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key2, in2));\n+\n+        boost::scoped_ptr<CLevelDBIterator> it(const_cast<CLevelDBWrapper*>(&dbw)->NewIterator());\n+\n+        // Be sure to seek past the obfuscation key (if it exists)\n+        it->Seek(key);\n+\n+        char key_res;\n+        uint256 val_res;\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in.ToString());\n+\n+        it->Next();\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key2);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in2.ToString());\n+\n+        it->Next();\n+        BOOST_CHECK_EQUAL(it->Valid(), false);\n+    }\n+}\n+\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {"
      }
    ]
  },
  {
    "sha": "dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2Q4ZTI3YzY1ZGUwZDJjYjk3MjU4OGE2ZTgxMWNhN2NjZDFiM2Jk",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-09T17:55:27Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2015-10-09T17:56:48Z"
      },
      "message": "Refer to obfuscate_key via pointer in peripheral CLevelDB classes\n\ncc @sipa",
      "tree": {
        "sha": "d53c4b73ad23c520732eb2f79e1a8d9652d5d272",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53c4b73ad23c520732eb2f79e1a8d9652d5d272"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14885068726a8e0dc73ffa127225ab80be3e3612",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14885068726a8e0dc73ffa127225ab80be3e3612",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14885068726a8e0dc73ffa127225ab80be3e3612"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 14,
      "deletions": 14
    },
    "files": [
      {
        "sha": "60101e18cc03e67aba6a4058fea0c8533c713902",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "patch": "@@ -32,13 +32,13 @@ class CLevelDBBatch\n \n private:\n     leveldb::WriteBatch batch;\n-    const std::vector<unsigned char> obfuscate_key;\n+    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n     /**\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBBatch(const std::vector<unsigned char>& obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CLevelDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -51,7 +51,7 @@ class CLevelDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n-        ssValue.Xor(obfuscate_key);\n+        ssValue.Xor(*obfuscate_key);\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -73,15 +73,15 @@ class CLevelDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n-    const std::vector<unsigned char> obfuscate_key;\n+    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n \n     /**\n      * @param[in] piterIn          The original leveldb iterator.\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>& obfuscate_key) : \n+    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n         piter(piterIn), obfuscate_key(obfuscate_key) { };\n     ~CLevelDBIterator();\n \n@@ -120,7 +120,7 @@ class CLevelDBIterator\n         leveldb::Slice slValue = piter->value();\n         try {\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n-            ssValue.Xor(obfuscate_key);\n+            ssValue.Xor(*obfuscate_key);\n             ssValue >> value;\n         } catch(std::exception &e) {\n             return false;\n@@ -210,7 +210,7 @@ class CLevelDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -237,7 +237,7 @@ class CLevelDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -252,13 +252,13 @@ class CLevelDBWrapper\n \n     bool Sync() throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n     CLevelDBIterator *NewIterator() \n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions), obfuscate_key);\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }\n \n     /**"
      },
      {
        "sha": "606313b00453ff7e3b7c6e5f2f01d4fe366dcff6",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "patch": "@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n         uint256 in3 = GetRandHash();\n \n         uint256 res;\n-        CLevelDBBatch batch(dbw.GetObfuscateKey());\n+        CLevelDBBatch batch(&dbw.GetObfuscateKey());\n \n         batch.Write(key, in);\n         batch.Write(key2, in2);"
      },
      {
        "sha": "5723c92440196a43447975e8537605428c4be7ca",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "patch": "@@ -49,7 +49,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch(db.GetObfuscateKey());\n+    CLevelDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -157,7 +157,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);"
      }
    ]
  },
  {
    "sha": "21d27ebad5721bc61c62bc72dc3ab3197f9da268",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWQyN2ViYWQ1NzIxYmM2MWM2MmJjNzJkYzNhYjMxOTdmOWRhMjY4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T17:56:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-09T19:09:44Z"
      },
      "message": "net: Disable upnp by default\n\nCommon sentiment is that the miniupnpc codebase likely contains further\nvulnerabilities.\n\nI'd prefer to get rid of the dependency completely, but a compromise for\nnow is to at least disable it by default.",
      "tree": {
        "sha": "28b2cb57166558c7bc4b74d01a0f1a7c5809bcc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28b2cb57166558c7bc4b74d01a0f1a7c5809bcc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21d27ebad5721bc61c62bc72dc3ab3197f9da268",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d27ebad5721bc61c62bc72dc3ab3197f9da268",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21d27ebad5721bc61c62bc72dc3ab3197f9da268",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d27ebad5721bc61c62bc72dc3ab3197f9da268/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a98a71e2f9add21f54801358033eb699da6fa92f",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d27ebad5721bc61c62bc72dc3ab3197f9da268/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d27ebad5721bc61c62bc72dc3ab3197f9da268/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=21d27ebad5721bc61c62bc72dc3ab3197f9da268",
        "patch": "@@ -24,7 +24,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm strip\"\n "
      },
      {
        "sha": "eeeb408ded0f9799a10c2f3ffc2f844d9d99c28d",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d27ebad5721bc61c62bc72dc3ab3197f9da268/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d27ebad5721bc61c62bc72dc3ab3197f9da268/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=21d27ebad5721bc61c62bc72dc3ab3197f9da268",
        "patch": "@@ -27,7 +27,7 @@ files:\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n "
      },
      {
        "sha": "5fa0db6784ea2c8f7fecde6b1df14b9e59623ebe",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21d27ebad5721bc61c62bc72dc3ab3197f9da268/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21d27ebad5721bc61c62bc72dc3ab3197f9da268/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=21d27ebad5721bc61c62bc72dc3ab3197f9da268",
        "patch": "@@ -26,7 +26,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports\"\n+  CONFIGFLAGS=\"--enable-reduce-exports\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n   FAKETIME_PROGS=\"date makensis zip\"\n "
      }
    ]
  },
  {
    "sha": "e253e83c5cc38f1bef7a784671541399bcd0a205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjUzZTgzYzVjYzM4ZjFiZWY3YTc4NDY3MTU0MTM5OWJjZDBhMjA1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-09T20:40:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-09T20:43:16Z"
      },
      "message": "Update debian/changelog and slight tweak to debian/control",
      "tree": {
        "sha": "7574095a8971725a1cd2437fb1af948b262d3368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7574095a8971725a1cd2437fb1af948b262d3368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e253e83c5cc38f1bef7a784671541399bcd0a205",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e253e83c5cc38f1bef7a784671541399bcd0a205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e253e83c5cc38f1bef7a784671541399bcd0a205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e253e83c5cc38f1bef7a784671541399bcd0a205/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 32,
      "deletions": 1
    },
    "files": [
      {
        "sha": "110bfe03effcdad2f353ff9746ab9589e4a7c08e",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e253e83c5cc38f1bef7a784671541399bcd0a205/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e253e83c5cc38f1bef7a784671541399bcd0a205/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=e253e83c5cc38f1bef7a784671541399bcd0a205",
        "patch": "@@ -1,3 +1,33 @@\n+bitcoin (0.11.0-precise1) precise; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 14 Jul 2015 14:39:00 -1000\n+\n+bitcoin (0.10.2-precise1) precise; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Mon, 29 Jun 2015 17:33:00 -1000\n+\n+bitcoin (0.10.1-precise3) precise; urgency=medium\n+\n+  * Fix build dep (include python).\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 5 May 2015 09:28:00 -1000\n+\n+bitcoin (0.10.1-precise2) precise; urgency=medium\n+\n+  * Fix miniupnpc dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 5 May 2015 00:33:00 -1000\n+\n+bitcoin (0.10.1-precise1) precise; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 5 May 2015 00:07:00 -1000\n+\n bitcoin (0.10.0-precise1) precise; urgency=medium\n \n   * New upstream releases."
      },
      {
        "sha": "abbea8b80bbf0d215a79de996881f6b1455be6d4",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e253e83c5cc38f1bef7a784671541399bcd0a205/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e253e83c5cc38f1bef7a784671541399bcd0a205/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=e253e83c5cc38f1bef7a784671541399bcd0a205",
        "patch": "@@ -20,7 +20,8 @@ Build-Depends: debhelper,\n  qt4-qmake,\n  libqt4-dev,\n  libqrencode-dev,\n- libprotobuf-dev, protobuf-compiler\n+ libprotobuf-dev, protobuf-compiler,\n+ python\n Standards-Version: 3.9.2\n Homepage: http://www.bitcoin.org/\n Vcs-Git: git://github.com/bitcoin/bitcoin.git"
      }
    ]
  },
  {
    "sha": "c7b36ccf4a9a71864d850d1c6f597351ba20430f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2IzNmNjZjRhOWE3MTg2NGQ4NTBkMWM2ZjU5NzM1MWJhMjA0MzBm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-09T22:32:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-09T22:32:05Z"
      },
      "message": "Change URLs to https in debian/control",
      "tree": {
        "sha": "80d0ee6c97581dd2fdc29b2939a2fde80b3ff621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80d0ee6c97581dd2fdc29b2939a2fde80b3ff621"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7b36ccf4a9a71864d850d1c6f597351ba20430f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b36ccf4a9a71864d850d1c6f597351ba20430f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b36ccf4a9a71864d850d1c6f597351ba20430f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b36ccf4a9a71864d850d1c6f597351ba20430f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e253e83c5cc38f1bef7a784671541399bcd0a205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e253e83c5cc38f1bef7a784671541399bcd0a205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e253e83c5cc38f1bef7a784671541399bcd0a205"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2fd68583cecee6907b1e09bbe381aa11cf5e040b",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7b36ccf4a9a71864d850d1c6f597351ba20430f/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7b36ccf4a9a71864d850d1c6f597351ba20430f/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=c7b36ccf4a9a71864d850d1c6f597351ba20430f",
        "patch": "@@ -23,9 +23,9 @@ Build-Depends: debhelper,\n  libprotobuf-dev, protobuf-compiler,\n  python\n Standards-Version: 3.9.2\n-Homepage: http://www.bitcoin.org/\n+Homepage: https://www.bitcoin.org/\n Vcs-Git: git://github.com/bitcoin/bitcoin.git\n-Vcs-Browser: http://github.com/bitcoin/bitcoin\n+Vcs-Browser: https://github.com/bitcoin/bitcoin\n \n Package: bitcoind\n Architecture: any"
      }
    ]
  },
  {
    "sha": "b94ae81576c199c9a44453b8c9b17e8303f67b72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTRhZTgxNTc2YzE5OWM5YTQ0NDUzYjhjOWIxN2U4MzAzZjY3Yjcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-10T09:37:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-10T09:38:11Z"
      },
      "message": "Merge pull request #6795\n\n21d27eb net: Disable upnp by default (Wladimir J. van der Laan)",
      "tree": {
        "sha": "28b2cb57166558c7bc4b74d01a0f1a7c5809bcc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28b2cb57166558c7bc4b74d01a0f1a7c5809bcc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b94ae81576c199c9a44453b8c9b17e8303f67b72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWGNyDAAoJEHSBCwEjRsmmshcIAKEseXOKy/9jEAKzoFGzHMAG\nvBmnt+ivawe13KaUmnpVpW1jB1y0A7GBApXAOYQw7rFX+gotYN+PJI0Z+pw1fhZx\nJ46BUv4dY+n48fSu+18JS+6B3yTWXdzIa+EVqMgSRcoRvaoNiFNWBHw167bdjOrF\ntHvblCOMsTRUYcrW36ItqE5HQKDfo7s5M8+XNnMjaC5Sude2YtvS/wOT0HTIVj1m\n4gQYVSiCWe/VTEimaA0YWqXp53bo/5e4SRihLxaHMmklhYaBlgcLoQIsrihRrZwj\n6x/PEBYKJZOTaHJvPKtu+YDZgR2NH1gK693V7imD1xaqnB3pDr76ZznAJv3zUPE=\n=HL1s\n-----END PGP SIGNATURE-----",
        "payload": "tree 28b2cb57166558c7bc4b74d01a0f1a7c5809bcc1\nparent 8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc\nparent 21d27ebad5721bc61c62bc72dc3ab3197f9da268\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444469877 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444469891 +0200\n\nMerge pull request #6795\n\n21d27eb net: Disable upnp by default (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94ae81576c199c9a44453b8c9b17e8303f67b72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b94ae81576c199c9a44453b8c9b17e8303f67b72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94ae81576c199c9a44453b8c9b17e8303f67b72/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c7e6138dbcbd4a2b5fe67e734e2b0fe0f0961bc"
      },
      {
        "sha": "21d27ebad5721bc61c62bc72dc3ab3197f9da268",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21d27ebad5721bc61c62bc72dc3ab3197f9da268",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21d27ebad5721bc61c62bc72dc3ab3197f9da268"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "a98a71e2f9add21f54801358033eb699da6fa92f",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b94ae81576c199c9a44453b8c9b17e8303f67b72/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b94ae81576c199c9a44453b8c9b17e8303f67b72/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "patch": "@@ -24,7 +24,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"i686-pc-linux-gnu x86_64-unknown-linux-gnu\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n+  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"date ar ranlib nm strip\"\n "
      },
      {
        "sha": "eeeb408ded0f9799a10c2f3ffc2f844d9d99c28d",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b94ae81576c199c9a44453b8c9b17e8303f67b72/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b94ae81576c199c9a44453b8c9b17e8303f67b72/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "patch": "@@ -27,7 +27,7 @@ files:\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-apple-darwin11\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  CONFIGFLAGS=\"--enable-reduce-exports GENISOIMAGE=$WRAP_DIR/genisoimage\"\n   FAKETIME_HOST_PROGS=\"\"\n   FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n "
      },
      {
        "sha": "5fa0db6784ea2c8f7fecde6b1df14b9e59623ebe",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b94ae81576c199c9a44453b8c9b17e8303f67b72/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b94ae81576c199c9a44453b8c9b17e8303f67b72/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "patch": "@@ -26,7 +26,7 @@ files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n   HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n-  CONFIGFLAGS=\"--enable-upnp-default --enable-reduce-exports\"\n+  CONFIGFLAGS=\"--enable-reduce-exports\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip\"\n   FAKETIME_PROGS=\"date makensis zip\"\n "
      }
    ]
  },
  {
    "sha": "700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MDBmNTJlMGY2YmM0ZWI1ZDA2NWRjOGYxZTQ0ZmZjYmQ1ZGFiMGUw",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-10T10:46:35Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-10T10:46:35Z"
      },
      "message": "Clarification of unit test build instructions.",
      "tree": {
        "sha": "5df2461ca6deed97ed10574440fa642a024bc532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5df2461ca6deed97ed10574440fa642a024bc532"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b94ae81576c199c9a44453b8c9b17e8303f67b72"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b2d6be14f14fd019309beeb40deb1adfd80aa80c",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0",
        "patch": "@@ -16,6 +16,8 @@ their tests in a test suite called \"<source_filename>_tests\".  For an\n examples of this pattern, examine uint160_tests.cpp and\n uint256_tests.cpp.\n \n+Add the source files to /src/Makefile.test.include to add them to the build.\n+\n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n [http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/)."
      }
    ]
  },
  {
    "sha": "4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTJlZmIzYzVmZGU0YjFlMzMyY2MwMzJlM2RjNDA4MmVjNGUzY2Fj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-10T12:49:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-10T12:49:38Z"
      },
      "message": "tests: update transaction_tests for new dust threshold",
      "tree": {
        "sha": "2e90f545dd854c93e34bb4fa4734de90c4d9d01b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e90f545dd854c93e34bb4fa4734de90c4d9d01b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28e3249e53b8ef7516636df0f1406466a513095d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28e3249e53b8ef7516636df0f1406466a513095d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28e3249e53b8ef7516636df0f1406466a513095d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f9423bc0de731fd67b603627e016ee22ccbdfd8f",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac",
        "patch": "@@ -345,7 +345,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = 501; // dust\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n-    t.vout[0].nValue = 601; // not dust\n+    t.vout[0].nValue = 2730; // not dust\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;"
      }
    ]
  },
  {
    "sha": "e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzZkOWU0YzE1YmVkN2UxZmE4NzZiNGM2OWMzNWM4ZDE3MTJiNTAz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-10-10T14:25:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-10-11T02:17:06Z"
      },
      "message": "[depends] Latest config.guess and config.sub",
      "tree": {
        "sha": "6a45c73dc2867fdbc081171faa287fece42a4d27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a45c73dc2867fdbc081171faa287fece42a4d27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b94ae81576c199c9a44453b8c9b17e8303f67b72"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 17,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3c022c5bb8b3ae3737c3b28f7e77bcab98d790d9",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
        "patch": "@@ -2,7 +2,7 @@\n # Attempt to guess a canonical system name.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-03-04'\n+timestamp='2015-09-14'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -221,7 +221,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\\./'`\n+\t\trelease=`echo ${UNAME_RELEASE} | sed -e 's/[-_].*//' | cut -d. -f1,2`\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n@@ -249,6 +249,9 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n     *:MirBSD:*:*)\n \techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n \texit ;;\n+    *:Sortix:*:*)\n+\techo ${UNAME_MACHINE}-unknown-sortix\n+\texit ;;\n     alpha:OSF1:*:*)\n \tcase $UNAME_RELEASE in\n \t*4.0)\n@@ -962,6 +965,9 @@ EOF\n     ia64:Linux:*:*)\n \techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n+    k1om:Linux:*:*)\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\texit ;;\n     m32r*:Linux:*:*)\n \techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n@@ -1038,7 +1044,7 @@ EOF\n \techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n \texit ;;\n     xtensa*:Linux:*:*)\n \techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n@@ -1117,7 +1123,7 @@ EOF\n \t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n \t# the processor, so we play safe by assuming i586.\n \t# Note: whatever this is, it MUST be the same as what config.sub\n-\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n+\t# prints for the \"djgpp\" host, or else GDB configury will decide that\n \t# this is a cross-build.\n \techo i586-pc-msdosdjgpp\n \texit ;;"
      },
      {
        "sha": "1acc966a33bf509f7c50f87d7678fbb813089ca6",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
        "patch": "@@ -2,7 +2,7 @@\n # Configuration validation subroutine script.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-03-08'\n+timestamp='2015-08-20'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -255,6 +255,7 @@ case $basic_machine in\n \t| arc | arceb \\\n \t| arm | arm[bl]e | arme[lb] | armv[2-8] | armv[3-8][lb] | armv7[arm] \\\n \t| avr | avr32 \\\n+\t| ba \\\n \t| be32 | be64 \\\n \t| bfin \\\n \t| c4x | c8051 | clipper \\\n@@ -305,7 +306,7 @@ case $basic_machine in\n \t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n \t| score \\\n-\t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n+\t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[234]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n \t| sh64 | sh64le \\\n \t| sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet | sparclite \\\n \t| sparcv8 | sparcv9 | sparcv9b | sparcv9v \\\n@@ -376,6 +377,7 @@ case $basic_machine in\n \t| alphapca5[67]-* | alpha64pca5[67]-* | arc-* | arceb-* \\\n \t| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \\\n \t| avr-* | avr32-* \\\n+\t| ba-* \\\n \t| be32-* | be64-* \\\n \t| bfin-* | bs2000-* \\\n \t| c[123]* | c30-* | [cjt]90-* | c4x-* \\\n@@ -428,12 +430,13 @@ case $basic_machine in\n \t| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \\\n \t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* \\\n \t| pyramid-* \\\n+\t| riscv32-* | riscv64-* \\\n \t| rl78-* | romp-* | rs6000-* | rx-* \\\n \t| sh-* | sh[1234]-* | sh[24]a-* | sh[24]aeb-* | sh[23]e-* | sh[34]eb-* | sheb-* | shbe-* \\\n \t| shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \\\n \t| sparc-* | sparc64-* | sparc64b-* | sparc64v-* | sparc86x-* | sparclet-* \\\n \t| sparclite-* \\\n-\t| sparcv8-* | sparcv9-* | sparcv9b-* | sparcv9v-* | sv1-* | sx?-* \\\n+\t| sparcv8-* | sparcv9-* | sparcv9b-* | sparcv9v-* | sv1-* | sx*-* \\\n \t| tahoe-* \\\n \t| tic30-* | tic4x-* | tic54x-* | tic55x-* | tic6x-* | tic80-* \\\n \t| tile*-* \\\n@@ -1376,7 +1379,7 @@ case $os in\n \t      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -auroraux* | -solaris* \\\n \t      | -sym* | -kopensolaris* | -plan9* \\\n \t      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \\\n-\t      | -aos* | -aros* | -cloudabi* \\\n+\t      | -aos* | -aros* | -cloudabi* | -sortix* \\\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n \t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\"
      }
    ]
  },
  {
    "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2E2ZGRlYzRkNzkxOGI0N2YwZTQ3NDdjNTY0N2RhZjU0Njc1MzA2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-11T08:32:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-11T08:33:12Z"
      },
      "message": "Merge pull request #6793\n\n4e2efb3 tests: update transaction_tests for new dust threshold (Wladimir J. van der Laan)\n28e3249 Bump minrelaytxfee default (Wladimir J. van der Laan)",
      "tree": {
        "sha": "c8b16cf160fdf2c38adf186f58429ace68d6c15e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8b16cf160fdf2c38adf186f58429ace68d6c15e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWGh7IAAoJEHSBCwEjRsmmPQYH/0ZSvjhU2cKVthOIIi8i8p/L\nJ8xRE2eYxxnQ5h3FXXGu0TJmysQbqenQ7q8OyVc+bxSQriPwMIuKMX91mNpZdsZ5\nOhVMaTYhl5g5h7bRGIObf3RYfAugQm44jrod3Tf8MCDYhCUMkhPrCOjmnt0Iu/Ob\n7oAYE2Wu17Qj3+HgZa/e5Rc93mlJrTLoqJ+v6zfBeMH+Oqo0AHVplaPNOkHzJ0tM\n0xrR+4bWiS+Z+HgTOPNjpVxNrHNUghVvZc3FqMCnrwLPO46ps57OYt3oIl0kEBdC\nN9i14GOAgOAhhGlepYWN4J5mAPYztKmVAroi0HRNb9maaDzkMOUfkYcZC3zJxtU=\n=yTTz\n-----END PGP SIGNATURE-----",
        "payload": "tree c8b16cf160fdf2c38adf186f58429ace68d6c15e\nparent b94ae81576c199c9a44453b8c9b17e8303f67b72\nparent 4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444552350 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444552392 +0200\n\nMerge pull request #6793\n\n4e2efb3 tests: update transaction_tests for new dust threshold (Wladimir J. van der Laan)\n28e3249 Bump minrelaytxfee default (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b94ae81576c199c9a44453b8c9b17e8303f67b72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b94ae81576c199c9a44453b8c9b17e8303f67b72"
      },
      {
        "sha": "4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e2efb3c5fde4b1e332cc032e3dc4082ec4e3cac"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "baad7fc050be60b7c7b9aedcbf498fe15072b4ba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ca6ddec4d7918b47f0e4747c5647daf54675306/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ca6ddec4d7918b47f0e4747c5647daf54675306/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "patch": "@@ -75,7 +75,7 @@ uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(1000);\n+CFeeRate minRelayTxFee = CFeeRate(5000);\n \n CTxMemPool mempool(::minRelayTxFee);\n "
      },
      {
        "sha": "f9423bc0de731fd67b603627e016ee22ccbdfd8f",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ca6ddec4d7918b47f0e4747c5647daf54675306/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ca6ddec4d7918b47f0e4747c5647daf54675306/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "patch": "@@ -345,7 +345,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = 501; // dust\n     BOOST_CHECK(!IsStandardTx(t, reason));\n \n-    t.vout[0].nValue = 601; // not dust\n+    t.vout[0].nValue = 2730; // not dust\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;"
      }
    ]
  },
  {
    "sha": "2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzRmZmJjNzZlYThjYzVlZTg2OTFhMjg4NGYwYTVhOWJlMDdiNzQ5",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-10-11T11:59:03Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2015-10-11T12:17:41Z"
      },
      "message": "Create btcdrak-key.pgp",
      "tree": {
        "sha": "8e08148b5c5d0927afc520d1df52d9915afea5c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e08148b5c5d0927afc520d1df52d9915afea5c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWGlNnAAoJEPxkNPw6MelWoOMH+wcUbKy8gHCOXaANK85vMQ/N\n/RueOJYt4ZkcPzrkgARENPLSfCNhu0Og24lo8L0VHOXzyRR7gumWNi39BikbSLbM\na714bghMWsuiJCJ/kkRnFmlqIPv2wp5Ft1S2SJd80ovwvA0vIGMTIA9r3e9X2Ryo\nCm5wzZDHXuKKXabnv5TJ70xaX30M88llLYLb6/CWGHmG9pbwDNKkWw7zl1flwLxv\n3bXJEP4VTRvR2MTq6vdeaMyyfk1zNlrMXu7i487u63MfyMA4jmnD5/xvx+Z6nuNd\nD+KSVvhwbtd8XmWg7I21x9Djc0b08kN3vsKW8fF/OTL/63qKe854eo8g4y0uYS0=\n=Z4TB\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e08148b5c5d0927afc520d1df52d9915afea5c2\nparent 4ca6ddec4d7918b47f0e4747c5647daf54675306\nauthor BtcDrak <btcdrak@gmail.com> 1444564743 +0100\ncommitter BtcDrak <btcdrak@gmail.com> 1444565861 +0100\n\nCreate btcdrak-key.pgp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 142,
      "deletions": 0
    },
    "files": [
      {
        "sha": "60d76c0ec7ab86635637ee9f49948e004fadfee4",
        "filename": "contrib/gitian-downloader/btcdrak-key.pgp",
        "status": "added",
        "additions": 142,
        "deletions": 0,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749/contrib/gitian-downloader/btcdrak-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749/contrib/gitian-downloader/btcdrak-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/btcdrak-key.pgp?ref=2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749",
        "patch": "@@ -0,0 +1,142 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v2\n+\n+mQINBFWpKewBEACzsuhtkin1MdQCKCEcFypjEstg0jA0nNVOpsGDTtdwfMpWiLJH\n+bV7b3V1p5hgaPdSyZsUezvHbkVEQxmU47C9lwph3svu6v8HInBwnOa5zj4L0Ih18\n+7yfeEJOvWzULzNxtiIqvWQBFxrVBbgHMhUMg0j6KCYOWeTmTuUKgvbQB8dExCoV9\n+7l+mb0k6eOZhwGWl6KD8mVkdhfXhoCZY5g79BTJf7lAQqnVbjxdyEKD2HSSs5Jnx\n+mTeZg40ottXa1puT+x9ES7L/IOY5kcrp6lU8iyKAoUS4vOJt4nPqY59Pr9j2nUak\n+2BUY0yojH41a752OYW59R+0uTNcUAwpNFucOb4TrNqjGJaPtxvFBZPTLImfSE+Jj\n+VTT6eZixOXPlOWm/7PgR66JF70p3gDwCL19bwUeOKX3UbkjhmYG48d9y1FNFZlVM\n+Yf36xj0c2IOz34VVY6GcCfnIN6xus5qWgHWiQ6RRdlRc9TbcCsUGttXuFP/n4nX2\n+OHo6I/HBNidLScfD2sXZtYHLcqvi2CcvEmmDdwBZrZncz+cHpjz8xmONb3bEMNT0\n+euPcEC5PXUItCSk9KHSgJhAWqfB2WcZ0RUYLp5lbtIZGHqY34LJRWXVKeOQIq4Gn\n+8uCyM5oQUY9zK4x7fdRz5tOjInYg+eSqtnLVDACqmazQHZ6kuGspAvwW8QARAQAB\n+tBtCdGNEcmFrIDxidGNkcmFrQGdtYWlsLmNvbT6JAj0EEwECACgFAlWpKewCGwEF\n+CQWjmoAGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEOXROPXnOhryKiAP+L3B\n+4c4eZcp8OSRwtYMiNmlxqhzEe+Va8T748rP8oULBFi7b7Nw9FILtp0Vtt2Xw9Pd9\n+EMsv5ZfgPpFL58ZeaO5f4uyrxipfUE5XdhkMOtqqlTfuCGh5fvNv1sWgf5tOFS2+\n+4TCtcSSywl/OlbRmWW/rsJ+RPrE32iSn171WRUXmGGBGSTF2mxCELLIW/rnY1qUw\n+u81BN4SYQOSyd1ha4XAlVYnPcEdpD5mBhwh2mdw7nCtJ9G/lPJ+1VT5axsONbEKK\n+utoU8CRt7OBlAUe0GbAcp7FcniKaFF2nUuhNbMjFcqZ9pddb6aWHVcaXIHwjoR8T\n+Br8ygIoODNEauc0e1xbtsXByD76pcz3yzZOFCKxtjtjsln23Drko4JA2LyLxx8WY\n+BCZcf8/8QSZJOocFOoUIHEfdljo/41kF1MF1Ra2Pr5ZHx/qNcI3U+4+uBoc1AuWS\n+5gJl6xXicLByqweSGKzAfq+SGXM+8ZdJ5KuHISMq7tfkzkmIJ7fRy+cdprXYVnhK\n+CW5EWA6+xQqpt0QGaOyRPJvQqJJvO42Eg9slHkfON1499pwaIwblWuNRs/jq5xCY\n+b21m50JmPas6o5lCcF0SFiFLEJa8spWxMrsLZGUf8KfwriDrssw0XzI74E//BFb0\n+8TLeC7daL3bsCe3FD/Nlcplz0oPKOm6Zb7fNf8mJAYEEEwEIAGsFAlWtJa0FgwWf\n+nr9eFIAAAAAAFQBAYmxvY2toYXNoQGJpdGNvaW4ub3JnMDAwMDAwMDAwMDAwMDAw\n+MDEzNjM5NmE3M2YxOTBmZDRiMjRkMmNjOWM5N2UxNDgxMjcyZWI1YjE3YzU1YzVm\n+MgAKCRB/qxFCZ+T6BHGbB/9wvhZ2rgT4vOT7HENDXF+Bv9TItBF7JQ4mehCenWme\n+23qxBLttfQp3AbwA2K2FyrshGM0fmtmpO5pcXjjHMVzlIDa1fKvbQGbhok5Y+94w\n+hswGS8O0XTU6sB3JxC4vpqdS1pryA/7g3YI+EuzYCkubNxvYnAy80Rf098xZzj2r\n+Yov2c73qg8+kb+5MS2fTjOMQhJo8N70YOew9FVOeZoeepv7SWLDI5Ya/YQ+1fFKN\n+2ovfBq/fzAD4PJbPJCz0miq1T5GL2nTXLcJmj46uV3wNvppNm/w8492de5VO0JqG\n+qlRurp6Jp2k37jqRSIIXG2wxCkND0cYftjS13pHnerPyuQENBFWpKiUBCADiSsd/\n+CmoZV2/UCqAnxm5/kxF8rW5hVYsYmfGO6lY868j5GMOVhWkrjl2CNWrFwQRqyiol\n+FNvyOro2IpOGXlM87AU3MP2/Zz+zkO3zY4ZH40t/UqcO2MPpKdkmGofCt+C6IFGS\n+Y23FqdfOLxV3aczN2aLzL2C6hHdXTcs99NGSf51iHLXn9b+hT4k2AxLPnOnnjgJL\n+eC6+s2sh4loSuvCh5FjVQfhQDLyTn93r9xvEhUMUUxBLz1Iy+e+w1elSwqNT5wEI\n+V5Iontm63lN37GrkRyX90PBtKf6VYXE1yKhNLmPBOIc1vx02og6Psu5eilzKfoK/\n+tQeYr4M/6HOcNvEnABEBAAGJAiUEGAECAA8FAlWpKiUCGwwFCQHhM4AACgkQ5dE4\n+9ec6GvJmFQ/+IoBituRcR394sVPiK7apDIPzPziVT4Qu8aBuHHREhK1Vl5C5tLZ7\n+Q6wA5Xc6O2/G+37HqKX3rqD7XBdFwcPXQa6g54uVs8l2+1UIwnFqZm8bJwubkHU7\n+U6addHacbX2itqb4EiQ82mAQqPSwx36QGLtPF2htl5z1XWj6queqjVrteAl2cbz5\n+KKGklTjReaX1jmun/3nL1yJuYRpZ0L7lF3IU17FVckCL/y3CXhdWOK1fGRfsnZWe\n+XQT+00dKhW5uRfpa8hR1/HJnaczAZnjjpRJZq8hBLamTjPypwjLf+gFAPiAJRuug\n+Bh4saYoE3ciNDzB3B7RR8oqNwxaF316vurrcKqEvnpQechFudDKYz6Pd09lFM1U2\n+MlyJ/jMwwlEvwoTlKFvgYmXOHPZoyf4Vdq+RPfRy+pDI1et9fN4wsy/Foj5hb7Yw\n+/hPOAjWElc4huCwaHIbGN+gHd+AbO6dOkWC7GgsOTGopyU0NXWfud7HB1V/NQ7o1\n+EMrEEPg3eMBMpksuNJ4TaesJ3keW+9OwIMDvsIGcRvqcAVL0R0ZkMGiYG3ITna7l\n+KRcCZwWaHmE6WJTuffBu9oyRFfSH6YbI4pFuFulxghNe3gD1AFZyWPlS/M6jw87I\n+4nBWSNoyPs1UxEGtntBkWiBJq79WAUSAeiDPVzvekQfaZxSpCrZh1cy5AQ0EVapR\n+MwEIAIpPUS3x6zTo9YoFxf2CCNho62MZfoN4ZpVQyY+NLhZ0p1XQBullafZdQjF2\n+mGPXysg7SEZflkcwBGjS6B/CJUoe+zGRL0DXrpoGrqEZzDshiOQ7lM08iloZ9X7V\n+UqhZdi7CFQCO9lAPgrFnvlTVvc7z+1L01/I+9H+w7rmnVsa4NyR/3W1zpOjAO7Wh\n+telWGTcLGYM5fWE3XnUTsWHUQnvdJ9qkDQB6emAOSzBreGmxzru1VSKIPrGsYmlW\n+Q/5Z82ihJ9uCYswUmh+hXRnAXTZTw9jQ+/hw75YuKUGjxXnMGJPMWIlBgB65h1fz\n+a6cTU1ZuS/wEEWEsiDWIob+B4qUAEQEAAYkCPgQoAQoAKAUCVd+TsSEdA0xvc3Qg\n+aW4gbWFsZnVuY3Rpb25pbmcgaGFyZHdhcmUACgkQ5dE49ec6GvIMfQ//SVwsyixG\n+w77pubV8R3LHjVqjo8CNWR2CedzT2/2xfRqjiz9juxpVSunPLTCUWhJTp8bAJzVY\n+UteZ3G1ctKuA/cnUbiAduU4CNlKrZ6AjmUysPVrsyw3kUDm8LSKKiARb0hCAFbvO\n+AO3Lm0YbpBtVYOUpWLoxpkFPx4PKRSyS+mkmFCgBV3baf6YOfPimGyEkVOhF5vZ9\n+WDjnlxPHWhjrpWOpWYPOlDMfSxsvYe4JTd/QXEqx0Ki1inNM4AnLiDf/rnyliQiQ\n+RFlHNnfo/FyqO9wvY8Hu0YLUJqee3WWTVDoYnQYSdHVM8w5JYXiUG8Cc8H2kQ79f\n+sYwIQEXPdJUCeFYnWwkltAjd95AvNDv/5/4kSBBGWUY80TH8qoxuPLekPmuvS8QE\n+TP2AeEcL8Hi5GnKbl9xb3bu/cuauLp1D23qC3HMoigFEgUPQ3egB7Z66PVWo+ko9\n++niqujCFBZBmkS23fvp4EgejYkvvhH9NcWDXWhnIaghLq6ngrj+zHDTTb5dCp9aM\n+JKOyKZIjEtT+AOi8g7yQ7bDyI0eJxOhKamBcVYHcvUU3DMsRSao8cEE6ee/G9564\n+sQ15Ma7W+wqee8SbaND84A2tAQcFtd7kvRn8C3Ac/bHuL5UIihNruTzOsfIHlXmE\n+jqjNA37tatNGoAK6//UHCzX6rLZSBUJtsDWJA0QEGAECAA8FAlWqUTMCGwIFCQHh\n+M4ABKQkQ5dE49ec6GvLAXSAEGQECAAYFAlWqUTMACgkQ3qOE7dYp+kBF2AgAiI8O\n+mFVfhCSJl7ofMMO2g92JfeWevQsn+GITexaYs/FEBb4NmWAyItJ1mL0jCVOhRXwj\n+AcKbKiWhuco17EdXi3xvu5FrfsN/lOmmyhkKyHSR+LS2XPb+xG5JJrafS7m2nxMx\n+4m0yH6tUcsBnqBPFFZ+w+Fxtg8ngUbo9B/gaXr7mvHwir0P2LYpcqlwpD0Zxmu1W\n+HpKT/DQa09Zjr5l9WDGtF6U6ZuSH8sdh/tD///x7AJ6eoiYadcy3YWRLFKKpfMSI\n+tSDhOlWBFFNRwrsZRXCrETYoJNWb/kvcHOaWNzPWcePjQ5RdOkQwnidUd1iy/Uqr\n+2+cT9WWfkHAND4uHlP1wD/sF+nQWOoWcQLFqTx9qt9h7tbgNAzXfEec7fwQ+NMwS\n+bKocjb5OOdzInEMDufusOWgKBfJtPQSMUe+W2orxBWtJb7WY9Xeshjs4q42GooPz\n+e9AN5B2M1V+wmSYEMyhHSTldjj/ZUWBmzZGH7skPHFUwFB633NOA97Mrt/F1RhiO\n+kw1TTn61x1op+wF919DnKdXaFiFX02XzqjJgnuUoGN/72cnfRzIkSaq9b9uX/dQK\n+z2Uk19ENQ3ipmAqBnzOzz+kjSqh8PdHgTGSyy8Ump8+dfhXjC98wVwP6YEn7tOv0\n+iaRzOiKd2kkCvSYexiqWYtKLU8icUFmvd6SROkcAHhPr1+oPS7LJpYDuES17iN3X\n+YaYHGGyvNsh1RseJvE7saosVGQwM539W61JUS9A3TP5jaL8ka8Q5AiXyIee+CD5h\n+2wFQnvdnmnc4QVkdVdrpNRBZyGySgyrO9E+iogfMSfcdDApgiETUOuMTvuCZSPhQ\n+YZ3+rddfgyDXYN3y5oW7Piro19r6R0D7DcGSstk1+1mEjJbb7s5Gc7oGq+EgLm0K\n+VYKa4Ky12osPCHFAoYLHe2upSHFhtgPgfzHKE8Uo5hnAVmx9jAi2XxBi4y5ezPPD\n+C0cCKsRTVrbvNavTSMYdfcxWuB4vlrMZIsvV0RcyP9jPXZm3XPrMik8xRbLR9AzR\n+C7kBDQRVqlGOAQgArkX9q/xZbvceeW0vzxI1UfbZnVoO3E+lL8W40RtBoF7R/7bD\n+68/dNYa1/geUc1jVyrycdp5RkTfnHnIHDt1WZfi6Ywdw9val+BpT/X9ZkxEXgYxO\n+tzMq0zO+ipeLgiqBRck7kgsOEgv+zaqMFXXrH+Zbsg1QbDEug61iCoKzpR8b2+5Z\n+QHxklnGd1RbiMWpioTmacOQE9yTfWvastJXIvZoZ8gdaLR8hA5o/ePP+GcSgntAd\n+NlMYTqqNujAymBJvMAu+ybyFRKN/L/X+IX2elhJWM1x4d1OjM/4sk31g6pucWRcd\n+vimPWouDIWVh+sh1g/IRsO295QKzXUCDELc/QQARAQABiQI4BCgBCgAiBQJV35N0\n+Gx0Da2V5IGxvc3QgaW4gZmF1bHR5IGRvbmdsZQAKCRDl0Tj15zoa8lAJD/93voL9\n+dqZ9IViyULsWsEkQDD20HQ+mxbuJcAE526If/x9JIMR1JcuE/C7pAtNjg5VBCOeB\n+sk0JC+Z7M80ivU1xov+rmjRvVNAX22/rBLpCTmUe0gzIBnWG5+O2/sccutigvvQE\n+O1rqLTEp0dzLoYbVAwJedELZnmK04Y8uXXQ1XSHXJOJmvEBpbDF0U3FXl7Sw4C+u\n+hI8IR6l2D/BYKIZgNIkh4ppFa6RJY0DtEWR94POZYBjjjToeCTRBG9IxudDy1jm4\n+k6bF/ByOecN4B3HRcBXUM1yJEmOZlPSZu2v7XvFp2VnFJfN2UjmtpYsKamV/xUsw\n+DE0voGp15TOfb+6QzfnLSI7vXcm1CfkBS++lYKcYcJ9Kj90ZPjtKy25vKcBvG68o\n+nYgS0Jnzm6j2yE2KBc90CWS1Txgu1Rd5ZrP8pM1ZK20/dq9CjtPLE94WFIc77k0R\n+3z8DJPG8I8M2RJ1XoqENrBvG5U0B+eeGA7mY8QSRH0COhslJ7j0WjOyO8xBSGTCq\n+QKGppFmDLs440cCVUOpnPz1kYG3YFgdCsFxOQ1GBJuHFLUdA1BEbb/nG4C4+y3Ek\n+Bihhu+3ZRoaBgE7ZmVOMEV7xdslPNssiTh+CxIUtugY2mhGnANvEcWrqTgG9+EHf\n+ax2avHR4CQMn7onZAPt2sOMoPkE8R3H3Knlta4kCJQQYAQIADwUCVapRjgIbIAUJ\n+AeEzgAAKCRDl0Tj15zoa8rK4EACFfSUffkm80uzBxFDbo3+fWf2k5hnjXheZxE5w\n+gpT4Z6QGH70GjR+rbH5a6fMM4hkmqNRYWLf6n8RTYNvCLxopVg2l1QbHYFbA+pAB\n+0tM7HOng8iyvc+uUJ4hTicpePm66A4uc1/z+mr5mcLTQS6Nfix2j3hduzzCVIbuF\n+/3UUxS9hFAXOu1F1Oz6auFkeQ8R/w/49yXrq/MYYSUsWtOR66Yu4664TJKBkZGlw\n+CiGPYmpeE7To7LqdhAop+ZnZnc5agSnB9QZw1HVbMY0nwbPuiJx+6mmbh7Gf/OHu\n+2pHSAStvFUGA6ngbYVH2LlRC2XgAA/yFAy1FNFegxTXO+3DI9ykj/3WBmjbNZMIA\n+mhcvPPwwJCNdxbZJbCcot82FBGPpwmsiZJWynD4m4+aGErp/pZmKjfMwP5NAgOQd\n+77XaRlJTvW4GqAdmT0ib7tCqGwFAx5o80SszhgRCUqu8oLGAUlTfMoRgmFNRznP9\n+7xptwjNSl19YrlXdgbhOvVvNO0/J6uXnRc3v9yfaa8J7xU6GvuR5smejYNLUxccl\n+N1UmouS3Vol5z6hOmqnembN/zC3THOHqmJ1G6SdiCcn5dG5Tc+jmBKLRAnoIimWT\n+dO/UoWhm2EB40Hlj6HRFXure47oD9x28d48E0+HI9Jzlh4Wuu6kkr+ugOpdC0TbN\n+H/+RObkBDQRV35PpAQgAo1+V52e+8VFsDKyceNNEVE8NdUiPRKBZuVfCSP8nqNCj\n+hYf4lY/iygHCNZDtKaBs6BUCj0Ev1CLm+Uxvdl1trEr1FGz8E1kdUsh0LocKJgjh\n+wbuDrxM/6LNBxYTR9fEIGx+ka8o9OMLqWav+QjZtDC/nTWaJkXxvcgZPhadCmkkz\n+P0g/vnJVYbvDBBmxI9ofkxZIrwNR2Y8VO2oLVP0MpCA06cuUQWym/gQ2uqBToGqr\n+M/gc+vq0XQyFrNmH/iP8MuASrOoQfGhvZDg/x8rcFRs37itZWpUfP3pZ5zWztX3G\n+TBtc1EktSjs8fU828lPxtG80r4RB2sWVDJfoqhi7XQARAQABiQNEBBgBCgAPBQJV\n+35PpAhsCBQkB4TOAASkJEOXROPXnOhrywF0gBBkBCgAGBQJV35PpAAoJEPxkNPw6\n+MelWLCsH/R69Q2jgT2+sHVWbDsmNjTOkJIteKbz0uW8/vBJqZ2VEwKozGruCTkNI\n+orYKj52ZRcxKiAijN2XGw1TEccP0s5Trap1Z+xgjDDLByLswoVBUzAjbq77hedT+\n+ZUuQFKnm0Cc+PzB/Nz96I8AV4AxYc7RW4keGtvEv7qgdIlb6fbPpFB7Z5W573OZ7\n+G72B/T6QL43HRaN+ZbjwRJaY66tYKSl0Vd0WrO2p5xVdbTarVFn6q/A0IYEafVKY\n+QaRTh+VQbN7vNZCn1Gi6fvnjtWRsj0vMkafdAzVYqF42P+cf6iHrglE6DwR5AsaS\n+O9G+8kLpkXFRjDQJBaijWdBtaeOulCxTog/7BZwo1kpTC3ZCTxr/SHJDc1Nsxt8K\n+xnMCPxFSrHRJb/fUQDjhLv6lXXAm5SCBdFzAc9oDKUbcuGSEz2nZQjL1OADn9rVo\n+j/Y6wJ+okOCOs9AI1H+VW/rz5Z7wxvw3YOVa+dnYdV0w7FklCn+xFdZLj8Z5WjcZ\n+zoyqGlVAFGOZ4MbO+fz/+8f0Y7K/bW7E6smhnomTy2ZOk64eiO12d8quHTHMi7Xh\n+mmVYDiNn1gW9IxZwt/Ga9AvZbIAYhL2m/xBbdfMKAG7Ttjzd3Ac+8wrGm3lOesBD\n+AJUtBmURu8b1Eyj72IQcV0AJM8gvc1B0H345oX6VBgkBB0bf3nuUVftv6r529jTr\n+Jix6yrs4uf25tefzcFuqqE1s1r+pSZFIDpaNsP+jjMgYj/zn4dLOZaq4V3SHvnsU\n+v8KOUC2/qNH9U0KC6bh4mw0fVsHzhkaOjOM7SF1Doc8Lz4vZuk4BpumHpkHEG90x\n+CLg2k/R9iIDQfcGtKY++1/GitjXakPuKrJctZ1SJuW1KWyzFeF4qvuowmLGMFRVi\n++CG5JJSLCUr+cPXa8NbjZv9BwSHqWbn3grr7ZE/j6SFNhuLmByeePPNKRt0cae6a\n+3TQkQFh/yvSIkB5BrB1n2x+xNoWMME+GR0zYQCOncCe8W+a5BZ1mTiVGacHgVqSN\n+eEaG0RH54+pi4gw=\n+=fFMC\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "3b363dfe88a1cd08d7b3369e1195742733638adf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjM2M2RmZTg4YTFjZDA4ZDdiMzM2OWUxMTk1NzQyNzMzNjM4YWRm",
    "commit": {
      "author": {
        "name": "Paul Rabahy",
        "email": "PRabahy@gmail.com",
        "date": "2015-10-11T23:36:51Z"
      },
      "committer": {
        "name": "Paul Rabahy",
        "email": "PRabahy@gmail.com",
        "date": "2015-10-11T23:45:01Z"
      },
      "message": "Updated Prab's PGP Key\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThis message is to inform you that I, Paul Rabahy have rolled over GPG\nkeys.\n\nMy old key = EA695E0CE2D0DCB0D65167A8D1CBA2A21BCD88F6\nMy new key = D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A\n\nMy new key now has an offline primary key with an online subkey that I\nwill be\nusing for normal communications.\n\nI have signed this message with both the old and new key so it should show\nup\nas validly signed. Please add my new key to your keyring so that future\ncommunication will be properly verified.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCAAGBQJWB3/LAAoJENHLoqIbzYj2LBwQAMgH5u2KDuxK2gmpRjEpVXe8\nXPOon+SRL5zXfu1dFInXCg8APJEVaXhSeY+/s0GmUq0INRpK4r0tvZVN84X2UoHz\ny88P6BeHzQI7dsCStINhW4Hb7DVpFvkHAxsRhy05/geD56/IOXnsG+5SvsH3essJ\nO6DuRQOipDWkZ9NQuQPrqzlkcBErMbL4Cs0ED5DOOYccntnt5HM909KDHfKcG8iJ\n/qNTVzVFYMGbLn6MVq89reatmIOxuVBkbixsqad5M4P9rQ3iGPnUzIEp4wn7/Ssd\nXDiCZypzlHkcs1GKBLtWnYWahlWHItcd/Yz3AiHLfUehcZb52p0mvIaTf4lyAR5p\nkQFTXZwrrzJDaomSE2Y2IeMIATZE7/7RInkHD6okUTFSoCFgxOeAxLBI6sxLH5x5\nxLIdv45iiv3P5fz1gungfzn2OYy+dHgT74bJ32N18hs+xwZM2G6AYYvVvkTSDqC0\nc3AopnjEV4i+4Aq0QfDD9fXpBc0QuDN7c5GkcFCiFlhN+gffjT8hkFliiW3e2X5K\nVsycv1sYXFSS/YYZ7RCixWgTkpi18ABaLu/N1ses7hLNMxx9ovjrMIJ5gC6Nyga9\n2BiumvNMh0iE9yhPiN0a4YsZZnW/tc5K1+OJxnKZvxWrXqOgIhnKZA1U1Y83COgA\n6pI5uKrggGQWgQFJxTmciQEcBAEBCAAGBQJWB3/LAAoJEDJeXsBcJ6amLBwH/ib+\nwiD3wDy+VeTDFvh4AgQqDRCk+CvGEKJlcoBLm3ZDwzi+/26XB/BCFoopW9h67ZmC\nyMFhgvCJ3RwPcVGgZBOZ//88E2symcYRBSZJVwMN/n3McmEKBmmEH6/tTqhLeBal\n2pynse7qgfZV7P/rSMcqFdhzMYq6Jt25obTl3IqTo939G1oOxRK8ORNT3Hs4/uiF\n7xsx+nUBe/L6dvw2Rxr8bWm7WKi/LF7fKN/HZuBfK2qH0S4ctG49fiBw3DTV+erO\nlYHdOMA9sjk90Le5sNBw75Hyr4WMLUkGFkh9SvDK1Xe3bUCfCpBTpcPnRUqnHL32\n9GbqORFiaUGPRCnaWKQ=\n=JR4m\n-----END PGP SIGNATURE-----",
      "tree": {
        "sha": "b5a4d47c8e19483f7e39076f7de0307f29d4e4b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5a4d47c8e19483f7e39076f7de0307f29d4e4b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b363dfe88a1cd08d7b3369e1195742733638adf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJWGvSlAAoJEDJeXsBcJ6ama7UH/06JM4POYCMt5dc6D1NDxQ6K\nSYg2JCsbfY09/l2aXt4TkGOdNoLtoRcr8rbl5h+Gyl4zAhxcDw8rC00v6pnlWGAe\nPuBOdY9hNX7DbHGB7XC9O3uF3HMo5dB3aIGtbZMZoa3cQoe/BtV3/Rs87qyqSkJw\nTC7cUucFChJpYYVA+2DoCwb4thzikOFIdfoucnusnKoZSUWM6EAMi/zYZDy37Nfk\nl/Ik9avdj8ukl57o9jjEzL5BQgRzsHoH8QTnYga/lKlejvjmvtEOIPhbwbGQll03\nraevTTK4DAJKv5EhlUBkrrAcudjZC8W6r9BrzYNtOLFPh6PPDm/qPuQ8NmXDBRs=\n=b06o\n-----END PGP SIGNATURE-----",
        "payload": "tree b5a4d47c8e19483f7e39076f7de0307f29d4e4b3\nparent 4ca6ddec4d7918b47f0e4747c5647daf54675306\nauthor Paul Rabahy <PRabahy@gmail.com> 1444606611 -0400\ncommitter Paul Rabahy <PRabahy@gmail.com> 1444607101 -0400\n\nUpdated Prab's PGP Key\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA256\n\nThis message is to inform you that I, Paul Rabahy have rolled over GPG\nkeys.\n\nMy old key = EA695E0CE2D0DCB0D65167A8D1CBA2A21BCD88F6\nMy new key = D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A\n\nMy new key now has an offline primary key with an online subkey that I\nwill be\nusing for normal communications.\n\nI have signed this message with both the old and new key so it should show\nup\nas validly signed. Please add my new key to your keyring so that future\ncommunication will be properly verified.\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBCAAGBQJWB3/LAAoJENHLoqIbzYj2LBwQAMgH5u2KDuxK2gmpRjEpVXe8\nXPOon+SRL5zXfu1dFInXCg8APJEVaXhSeY+/s0GmUq0INRpK4r0tvZVN84X2UoHz\ny88P6BeHzQI7dsCStINhW4Hb7DVpFvkHAxsRhy05/geD56/IOXnsG+5SvsH3essJ\nO6DuRQOipDWkZ9NQuQPrqzlkcBErMbL4Cs0ED5DOOYccntnt5HM909KDHfKcG8iJ\n/qNTVzVFYMGbLn6MVq89reatmIOxuVBkbixsqad5M4P9rQ3iGPnUzIEp4wn7/Ssd\nXDiCZypzlHkcs1GKBLtWnYWahlWHItcd/Yz3AiHLfUehcZb52p0mvIaTf4lyAR5p\nkQFTXZwrrzJDaomSE2Y2IeMIATZE7/7RInkHD6okUTFSoCFgxOeAxLBI6sxLH5x5\nxLIdv45iiv3P5fz1gungfzn2OYy+dHgT74bJ32N18hs+xwZM2G6AYYvVvkTSDqC0\nc3AopnjEV4i+4Aq0QfDD9fXpBc0QuDN7c5GkcFCiFlhN+gffjT8hkFliiW3e2X5K\nVsycv1sYXFSS/YYZ7RCixWgTkpi18ABaLu/N1ses7hLNMxx9ovjrMIJ5gC6Nyga9\n2BiumvNMh0iE9yhPiN0a4YsZZnW/tc5K1+OJxnKZvxWrXqOgIhnKZA1U1Y83COgA\n6pI5uKrggGQWgQFJxTmciQEcBAEBCAAGBQJWB3/LAAoJEDJeXsBcJ6amLBwH/ib+\nwiD3wDy+VeTDFvh4AgQqDRCk+CvGEKJlcoBLm3ZDwzi+/26XB/BCFoopW9h67ZmC\nyMFhgvCJ3RwPcVGgZBOZ//88E2symcYRBSZJVwMN/n3McmEKBmmEH6/tTqhLeBal\n2pynse7qgfZV7P/rSMcqFdhzMYq6Jt25obTl3IqTo939G1oOxRK8ORNT3Hs4/uiF\n7xsx+nUBe/L6dvw2Rxr8bWm7WKi/LF7fKN/HZuBfK2qH0S4ctG49fiBw3DTV+erO\nlYHdOMA9sjk90Le5sNBw75Hyr4WMLUkGFkh9SvDK1Xe3bUCfCpBTpcPnRUqnHL32\n9GbqORFiaUGPRCnaWKQ=\n=JR4m\n-----END PGP SIGNATURE-----\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b363dfe88a1cd08d7b3369e1195742733638adf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b363dfe88a1cd08d7b3369e1195742733638adf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b363dfe88a1cd08d7b3369e1195742733638adf/comments",
    "author": {
      "login": "PRabahy",
      "id": 429961,
      "node_id": "MDQ6VXNlcjQyOTk2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PRabahy",
      "html_url": "https://github.com/PRabahy",
      "followers_url": "https://api.github.com/users/PRabahy/followers",
      "following_url": "https://api.github.com/users/PRabahy/following{/other_user}",
      "gists_url": "https://api.github.com/users/PRabahy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PRabahy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PRabahy/subscriptions",
      "organizations_url": "https://api.github.com/users/PRabahy/orgs",
      "repos_url": "https://api.github.com/users/PRabahy/repos",
      "events_url": "https://api.github.com/users/PRabahy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PRabahy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "PRabahy",
      "id": 429961,
      "node_id": "MDQ6VXNlcjQyOTk2MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/429961?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/PRabahy",
      "html_url": "https://github.com/PRabahy",
      "followers_url": "https://api.github.com/users/PRabahy/followers",
      "following_url": "https://api.github.com/users/PRabahy/following{/other_user}",
      "gists_url": "https://api.github.com/users/PRabahy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/PRabahy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/PRabahy/subscriptions",
      "organizations_url": "https://api.github.com/users/PRabahy/orgs",
      "repos_url": "https://api.github.com/users/PRabahy/repos",
      "events_url": "https://api.github.com/users/PRabahy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/PRabahy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 77,
      "deletions": 25
    },
    "files": [
      {
        "sha": "0870c88b9b3608b761565063dcbdc33536250227",
        "filename": "contrib/gitian-downloader/prab-key.pgp",
        "status": "modified",
        "additions": 77,
        "deletions": 25,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b363dfe88a1cd08d7b3369e1195742733638adf/contrib/gitian-downloader/prab-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b363dfe88a1cd08d7b3369e1195742733638adf/contrib/gitian-downloader/prab-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/prab-key.pgp?ref=3b363dfe88a1cd08d7b3369e1195742733638adf",
        "patch": "@@ -1,29 +1,81 @@\n -----BEGIN PGP PUBLIC KEY BLOCK-----\n Version: GnuPG v2\n \n-mQINBFI3uQUBEADRjbUQb65n7sfjT5OPnjPO8oUh5onKjNALRGHGJxWwNkwkgmT6\n-mZFWjikM8B3ONEp8MfTyoOzv+MbWuBDS1GZxi0Tcb4HU323/7hhwfXV4bcHif7vq\n-Sc1ahN/5LIHj0htC6Uj78IWXW+kPWjX9biRJnZ9eerfA/AatC+4KuvYTjAa9uAfa\n-BnAs38EG/7ryXzxdz6M8iNB/YjHE72swSH84uTtA3LqI3huVY41eFMK6qXFBMFiq\n-H6bMx4pjwKzJj78bibXEQxq88yc6TLxbURs2GF4s11dr7Iq2Y+6FHqX3PfUByZBz\n-PQfbEy1Df4RbB3htCBv5puETlqZ0PVe9/B+WrcnaobxrbKEAqt0DspfoveRTIL+z\n-+YDs7FuW9TFBmd+5d2nmblHrNm8eEig3DpOoVetuuXsmDy03Fwao7hGkva4P3xbP\n-H4/U8GaxsfNzuLvEyy+dtd2t2C1HIxS+56r41/vdb/9rvGgEQuSr0DVpZIW9en0f\n-3bek+H7/qRCbXuaiBACBvOKNror5jtTeXTvnHWMkrOItyGH9pwR2Lhhv68JQS1jk\n-e3pwVRzfHBz4wQMHeLIh+blsVKCIjytBR8Rq36rsmN1q44/3HwuPW/XP61kPP90k\n-dKyPF4Qa+EoPw5ON5nr3lWy8ysklM79o1NmpyqNT4UjtDDBSfJtX82ct8QARAQAB\n-tB9QYXVsIFJhYmFoeSA8UFJhYmFoeUBnbWFpbC5jb20+iQI/BBMBAgApBQJSN7kF\n-AhsPBQkDwdj7BwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQ0cuiohvNiPaB\n-KA//Y6h6r8vUkA4/Gl2ejMgH+/DAolg9dFD+KMjQNKw16g7WzFNNS05T4RhcfZDT\n-mapAW2LOUiiPVJTacmblyFp2hXCv3S+DESQjVdz15pxMHkt9fFteXGyJyrcTY5pR\n-rZmjMD/9Twy2mLl5IH5ms87p0TN9HhM5Ux+B51la+Uq1wMdc1PdPWvGDeBVxCnRI\n-w0224M5u1uHaMwMDGdz6sXuCuonB7CDGL9Z2+m1Al7t0peL2QdKHjv8S+SKM2rZS\n-bRJyNmmTSKFQOTb9e2Ve48NNeaC0usEf8ttsygclps0mDpoa68YSY1LiuwVoIxvd\n-S626eDqgmq1yyz0l3gQbYKIUv7KvRDnYhqIEkPZLCOwKirm+I5vzXvVIlfoNRoyJ\n-VH3K6MJDSpBEerYNWHmUQpp7cLXIqVtako7IgmglOXQ5XVRnPvlOt5VOqQnNRTdM\n-nd/FK3n1TbUyNRverODSpOS6ZxdSSwLkTycTtj1SvpLo7laW0HQ1ofJfwzVmOq8s\n-8aWWTwBBC/X1UNLL/rsZMoHeUpaKHF2HSK5XzLcwqOBPRTMY0OG7vtBvj4G8clht\n-A3uQmmCMr6RxsPPYPHPO3MnMpY2AK6RRnNZg5Y1Fu+/71FAuUDVTxmI402yE5XbP\n-ILbJ8RgsrTVgeHdNhp9or0BdsB/wwMT5intkCaNqwb6eJag=\n-=y2Va\n+mQINBFYHMLQBEADLpvMbTQZ28jaV/tEcHpt/a2YiIqBdNreh6rE2MkTTjdkZJ5Mp\n+RAFOTrRYRWyBL9jmCjvjt4TToiV4quv9ubRWdTKn0cKaqcl8kwZ5rtoX6EEhcLJO\n+CAL13kDzkBrG3OqRxM7VWn/0IGf++Eq0yT2eqBi7Ae3FvC4m64TKLI2NK7GB/MQD\n+JqcXuh/0yMsPiCNZrTDBX+3SzTuSLjWt2Le1Ap2nWXf68cWqP6nhT+f76epZyA4D\n+NI48/KeylUzPSJtqBmBM+YLg/XGcxDpbIotnr7D27ThJQIXDzut9O9f7RjdlKaeh\n+G73W/hDqTqLpkR5LMa7K3unUuvlyQqYGXfHINjJibNUTLCi7YcJtuDv/DJwQxu45\n+/UUYS2xH6HpgOTdWs6VjHRCDzeAoKzkdDB+8Mvi2lZXxY0iFQeQtRNkmN9D3M4oT\n+voG0cZWjPGeKSalGVSRS3TGhdf+IqOPhOl9yrwEArlZ8HtsTUFdx/jAsWHsycCVb\n+LjkD8Mdgit39UZCln3e0bY862wF7Gm7P3ITMnTofO9w6Pqffh9WWQBtLrxIXrgII\n+vstC8H9ajIl1FDuYs1Mf8u7iq1zHh6GNzoxkm+FEvYc3mkSfx6KJD3STWqSrJcQK\n+q/1SsjBb+RiuqeFdY8krWfm2xkuUoGLEQnr14UQz1hQTTLEgSoHBSHxuHwARAQAB\n+tB9QYXVsIFJhYmFoeSA8UFJhYmFoeUBnbWFpbC5jb20+iQI5BBMBCAAjBQJWBzC0\n+AhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQvNBNjpzMrCp8dA//Yaob\n+cnFuzLjIeWyz996DPJvU62WmAE4GkZot/wk+dtIAnOCxO9YbhWVU/b1WG2PjGdqt\n+LiB6COG28/HzJoUh2zjG0lDcjvu060Bdw9rQ/kJWW22ylNAoKiY9jd3Abde5nBGK\n+0wwJ8+aMMDrO6euwgcJymJ+yZ6ZiWyG4TXXCbSdCDSsBtaaAugMlzZWeyEBEgUK4\n+nX3ZCoNiF3s2bYojr6VcgG2clM9gsSBW03XLW3lRLOvDFmdEAFp8KSJNSkGBlcOS\n+iba6zAKTY80W/+D3soBP6Lr2uP0AOFr+ZnfxvaH9YvXIFDq/jT3CH2RxiZLd1m59\n+ehUbU878ebOMlJCJYiUBY6H+vChytqy51o1np+KTQtpxKzigWiPbtyJ9zYoVVczI\n+Ds8APCqL729BPMhhTDm8I9jeEhjXNmmiJjGVJGVB5X/3w+7jQrEz6f1Ebi+cCrgN\n+tfN22bMs9hh5KkQ4JhRVfDM0DOXCvokXjdo9yXUf+Doc96ruCJKH0qR9L7qIASiD\n+hSEK3CNGY1G05Bb4wCS+FrexL11whAxlX7HCwbgjgHu07QJBYITdn3J4fUFYGsyS\n+G/2D5aLASiKGfq2TL1G9e/qI49/TksDQ6Xy4ue4cQYbf6JigfYjDcSDOZmkHPuXG\n+kSd60WPWJT6OqLrhq2c7exYCUGZaKrWBoie5yoGJAhwEEAEIAAYFAlYHcWAACgkQ\n+0cuiohvNiPY3BQ//TVOxm3UncyGyXOs+ss3fBSPE5q3lR71H4uo4CxE5pi9Y10tK\n+Qf0ULe0gRpnF2FMUkCCE5hu2oG+kPpqKON8/jwcnRCO9h2AndIZ3NRPAOXO2pn9f\n+bkDHMlInhPUxDk5zCHMTOdCONDvhocZ69gYHJdgt4w3Joji1YxTkHr2n8dFyNY7Q\n+LgqT1tpuXgopjKsUcYRhDCRN/iFsMa4D+XZR+rflvX5hkee19DzUIWmaHitfHZlo\n+VsJ7uVZKqUevS3rbBr3i+tpvvlrqDXAGksGWOdK7QFD6GtRgOD91IB82K0NvyX6t\n+M0TMh/aAAslxfH3YeTIGnETuBkp9QBCa1c966ipoHyzItmK9sF/ONPEfYR/ad3gB\n+Nc4G5w0UEROX0v4AWMfYc2CD+un3beH6rkWnopsIRJcQ71XvufqweWsPFALuBBzR\n+PTiugTi0SSSr/ayA543s90Ko2Fxrg20UYJZj1u/DEukpNJwjRSS/yyjk0hMWtzW8\n+rY1Br4Djbq3uQQj8EQojHgg3vlpHcbO77kXIJAlWYIzfHY69RGXCQG6Y7tavIiXm\n+vveP54CPFCs8Kl9t8Pq0IrWKnBGklE/KwfMzkzvrKFmi+nk9yRgwyN9G/geQt4Vo\n+W2mHmO1lvY8Zu2zpzLkvkYGXpL1VkIefmBYV/SWgyYGhLOJIFodJcMrrnje5AQ0E\n+Vgc1VQEIALsxaGYOnwWdgE2e7zX4uFz7jY5fZh0+RqGOe+Sk2g/QVKEDSLDgVF/V\n+tneG8AFgYukHPFCm0IZdKrewrkzdQOwxjyxiyFxOV/LYPesElVe8OWIs0lrMrWlL\n+ZLDguF63wnxWhjolfBzQAG29UTXYaJt6onEB59R2l426LBl3W9wvq19jolOECISw\n+r9z2IRUJ3poqBckT9j11p8yuPjGyht90dvg4htGPBV7nHDIijUnqLfk9mnAj8NwW\n+2Gf7TwW2uNA2rHV6riFzYVe2t1sB5Gdlx5ostJzo67yIc5Dffca901VhmpJTUPox\n+W2KmTpl3ObvaS0U0mkAyVObVHSuT6UsAEQEAAYkDRAQYAQgADwUCVgc1VQIbAgUJ\n+A8JnAAEpCRC80E2OnMysKsBdIAQZAQgABgUCVgc1VQAKCRAyXl7AXCempkrrB/9H\n+tOAstawkJ1IflUztgknEDE7MWuNR5XGqN7ROJAZvL8YfB5J7a4HJxTzCWft2QQUu\n+x3uwSfBpm+hRftBjm4aACrhDS6OOH4eFOUIdDASb2lgnhLmygKhAO9LW2z8jSrRs\n+tKNj9nyCo56mtd2awFESgpskavv/ilc9wU830C82FFdyBqgy5OBdWBurnb3SV5F7\n+23uD1t1n8b9gseIxNdF6Q//szAeHa4VRzzqykExXqHCEFCtH2gs9EjiZ3YeCyygK\n+cPbe6/+FP6UD810PBqnWaCShOIeT56JsOu2gMZ5+epWB+piUTn38N2Znu3EA3Q64\n+Gc7P8AtrNUCv56bof5NoTuwP/0rP4n1bsTy7siBuPqc9YvYkVCxNsGmg1Qs5h2Jr\n+ZmQlAnz8JXfi/TRxarUNQTZEsXVQzq+4C9eEMey440kXvDE2sd3p4MKnbtkDmahJ\n+XcMG5lsMMAQTpmyBf1EBEIFOwjZBqUqEkHl4FGRpEx/Q2p9/pVlogGW7SE5Ck6W/\n+A63ClJUJLsHaWiv9zJ23tzT+ooNy/iO1Y+GfV6MY1tBfLd4ZHHd2n1urFB362sgY\n+2x1TfvfXN0Myw7m1X0l9bYFycuuWfSo6qK+LCU/4P3jm21+i9lWBYX5l+NLz5mlC\n+V5aN57zmtGK7QMSp+6VY8mwG1TuhUt91S2fEScLax6qEASiEChB8m3YJOjKycP27\n+Sq9WactijiVTPslHjCNfyM4BbE9crAbDWGkIbzbka8ix3t4uBWt0YO0Ug9S3eZBt\n+w1OVxUI+LWjF5XlkfXn8W+pZ/C+M9Cs6QsAXEbfHXVZKwlAGZfvYE25UTr11RRnY\n+pl8JZglq0Z2Gip3YzJewC1pjjQTnnPoPT79elBuPmiGwNm5L8HsKUZ1IMf1k5mQB\n+FX0CilHMF/JAO+r8Obs1l7FHXvO0a95tStcjpFodZjHARi5B3VGghcypy2J9hWfH\n+YF23EcE4GzpqqSEO/SJoxuLNNtj5ZVJOxmeRz2CKCe1sI8xO7wY7ckjRaGmrvK+c\n+dAxeuQENBFYHOocBCACxVJwkGbqcgKTrg6APMxWO77ielcac8FOVpd0ns1h4TGZM\n+iCwwTR5WPRiIA6zuS3VTuPAntnK3VF9fQsLBORHIb4CzMeU3F/64SPt8NFajEQ+P\n+vPsZlyv29RSVmvhIRDTDry3Z/KQxnZ3rzazrBqGVuLBgsG45n97MQ8Xq0gkY42jU\n+VDldULYGMco5zHj/MFSQ6L3z0j1lL+aiX2xIdRyDNzOhRqaA1ByZvsRSsqW2JWox\n+78c6AbclWw0QLdQd4Pxk8k5hpeN/EtneVnFDX3hOq/C9fZs6f5aAKn81WXqPPPk6\n+G0b7KzlUoCWGlO7M5LzEzWmWvGPs7W8y2Uil99CVABEBAAGJAiUEGAEIAA8FAlYH\n+OocCGwwFCQPCZwAACgkQvNBNjpzMrCr50BAApY22DRYqmtALFieREu78BvjQT/DY\n+f9Smkga1YVr9/Ph9NJ5iSVeM8mrVkwZnGRK1UCjk16rsmB70IqlnJnyJGXqPMj7M\n+3ioOWY8fCL8fmLI2g0TbXXKl3e0nGByGXW4pwyLYa/hR7XJMco/PxqIGhEKcCIRP\n+dxq/6U9T9SYe2IkfXBYZAxfUTE2FkRpw1zSfZN3z32LM7ICZ26NRHRWo4Kv5sij4\n+0mYYecFmWdf6ib5pPCI0HmPGpblbmZgR1LoJNmuNxfpgEnPe8BbxtO4mueNW5A39\n+y7gLCmDZ8MaOGxvjGByBoXxXP62BiU910iZZZurjSD+3FD+NUX0m4yxVIZCkuInY\n+QzLxFACr26IYpcsPHIYGnEjDBFw9hHdP6tzKbjzgVSZESheQf2zwit0YYSjwHQN/\n+XGnBy8+p66As61jg8mcAN2Zd8vwFKZOvfEnSsaoK5ssAh8jixhPj+Ujgs0/PB8t/\n+ON20yr+YRAwU+RVnC/vfvrM83mjoz4mbmSLapFz/xWNhoS0ZczYEI5CyxE8peGPX\n+gd/7tim2OqUuZ3SlH5TZP3pdJcqxTNN7iNaWy1wAY/sb8As3Pge/Vv5hSYmHNjQy\n+h/62SSbTf6OZCuUGjy8fvVj51SclVKqGNprmAqVrIy0J+VeTKj4r7PGesPWJavRc\n+RFdDYRHByRDDL1I=\n+=dOwX\n -----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "7d325b9de7d6bb2a38ece738436e615588696010",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDMyNWI5ZGU3ZDZiYjJhMzhlY2U3Mzg0MzZlNjE1NTg4Njk2MDEw",
    "commit": {
      "author": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2015-10-12T20:39:47Z"
      },
      "committer": {
        "name": "Johnathan Corgan",
        "email": "johnathan@corganlabs.com",
        "date": "2015-10-12T20:40:13Z"
      },
      "message": "zmq: point API link to 4.0 as that is what we are conforming to [Trivial]\n\nSigned-off-by: Johnathan Corgan <johnathan@corganlabs.com>",
      "tree": {
        "sha": "20d47ae189eb4e1e4f56d16f0fcbb2f06e1a4238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/20d47ae189eb4e1e4f56d16f0fcbb2f06e1a4238"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d325b9de7d6bb2a38ece738436e615588696010",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niF4EABEIAAYFAlYcGrAACgkQRzB3vGcdovdWOQD/ai0+hjShMBoT2j2PfcQQdoG6\nHSyGfTmDOxtFrTI1VUYA/21Fk6yopU5h2Lb1md6xEG4AjxQsCaA6pgdINhoJn06W\n=zqBK\n-----END PGP SIGNATURE-----",
        "payload": "tree 20d47ae189eb4e1e4f56d16f0fcbb2f06e1a4238\nparent 4ca6ddec4d7918b47f0e4747c5647daf54675306\nauthor Johnathan Corgan <johnathan@corganlabs.com> 1444682387 -0700\ncommitter Johnathan Corgan <johnathan@corganlabs.com> 1444682413 -0700\n\nzmq: point API link to 4.0 as that is what we are conforming to [Trivial]\n\nSigned-off-by: Johnathan Corgan <johnathan@corganlabs.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d325b9de7d6bb2a38ece738436e615588696010",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d325b9de7d6bb2a38ece738436e615588696010",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d325b9de7d6bb2a38ece738436e615588696010/comments",
    "author": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jmcorgan",
      "id": 1492956,
      "node_id": "MDQ6VXNlcjE0OTI5NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1492956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jmcorgan",
      "html_url": "https://github.com/jmcorgan",
      "followers_url": "https://api.github.com/users/jmcorgan/followers",
      "following_url": "https://api.github.com/users/jmcorgan/following{/other_user}",
      "gists_url": "https://api.github.com/users/jmcorgan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jmcorgan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jmcorgan/subscriptions",
      "organizations_url": "https://api.github.com/users/jmcorgan/orgs",
      "repos_url": "https://api.github.com/users/jmcorgan/repos",
      "events_url": "https://api.github.com/users/jmcorgan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jmcorgan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "53e557e3db191795535d779861afd8e25746179c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d325b9de7d6bb2a38ece738436e615588696010/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d325b9de7d6bb2a38ece738436e615588696010/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=7d325b9de7d6bb2a38ece738436e615588696010",
        "patch": "@@ -78,7 +78,7 @@ bytes).\n These options can also be provided in bitcoin.conf.\n \n ZeroMQ endpoint specifiers for TCP (and others) are documented in the\n-[ZeroMQ API](http://api.zeromq.org).\n+[ZeroMQ API](http://api.zeromq.org/4-0:_start).\n \n Client side, then, the ZeroMQ subscriber socket must have the\n ZMQ_SUBSCRIBE option set to one or either of these prefixes (for"
      }
    ]
  },
  {
    "sha": "3a4a458fe59b36ed697ca8a0a304ba68941a4373",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTRhNDU4ZmU1OWIzNmVkNjk3Y2E4YTBhMzA0YmE2ODk0MWE0Mzcz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-12T21:25:51Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-12T21:25:51Z"
      },
      "message": "Update bluematt-key, the old one is long-since revoked",
      "tree": {
        "sha": "d1c0cbe8f97799b29a6c2ab3009dc45d8239c617",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1c0cbe8f97799b29a6c2ab3009dc45d8239c617"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a4a458fe59b36ed697ca8a0a304ba68941a4373",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4a458fe59b36ed697ca8a0a304ba68941a4373",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4a458fe59b36ed697ca8a0a304ba68941a4373",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4a458fe59b36ed697ca8a0a304ba68941a4373/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2389d4657fb7f5f225f5d76e08841fd6e21d4be9",
        "filename": "contrib/gitian-downloader/bluematt-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a4a458fe59b36ed697ca8a0a304ba68941a4373/contrib/gitian-downloader/bluematt-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a4a458fe59b36ed697ca8a0a304ba68941a4373/contrib/gitian-downloader/bluematt-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/bluematt-key.pgp?ref=3a4a458fe59b36ed697ca8a0a304ba68941a4373"
      }
    ]
  },
  {
    "sha": "78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGI4MmY0YTE2ZDhhYWQxNWVmMzk3YjFhMWNkMDc1YjJlZmM4YzE2",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-09-24T17:21:31Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:44:03Z"
      },
      "message": "Reverse the sort on the mempool's feerate index",
      "tree": {
        "sha": "c6aef9e8f52ce6f18fc3fb710ed03d5ea1cd1a28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6aef9e8f52ce6f18fc3fb710ed03d5ea1cd1a28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 25,
      "deletions": 25
    },
    "files": [
      {
        "sha": "79d806bd224204f155b856ad68b8d4d2bb313bbd",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "patch": "@@ -153,11 +153,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     std::vector<std::string> sortedOrder;\n     sortedOrder.resize(5);\n-    sortedOrder[0] = tx2.GetHash().ToString(); // 20000\n-    sortedOrder[1] = tx4.GetHash().ToString(); // 15000\n+    sortedOrder[0] = tx3.GetHash().ToString(); // 0\n+    sortedOrder[1] = tx5.GetHash().ToString(); // 10000\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n-    sortedOrder[3] = tx5.GetHash().ToString(); // 10000\n-    sortedOrder[4] = tx3.GetHash().ToString(); // 0\n+    sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n+    sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n     CheckSort(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -169,7 +169,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 0LL, 1, 10.0, 1, true));\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n-    sortedOrder.push_back(tx6.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     CTxMemPool::setEntries setAncestors;\n@@ -194,9 +194,9 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 7);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n-    sortedOrder.erase(sortedOrder.end()-1);\n-    sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n-    sortedOrder.insert(sortedOrder.begin(), tx7.GetHash().ToString());\n+    sortedOrder.erase(sortedOrder.begin());\n+    sortedOrder.push_back(tx6.GetHash().ToString());\n+    sortedOrder.push_back(tx7.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(tx8.GetHash(), CTxMemPoolEntry(tx8, 0LL, 2, 10.0, 1, true), setAncestors);\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n-    sortedOrder.push_back(tx8.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n@@ -226,7 +226,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n-    sortedOrder.push_back(tx9.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n@@ -255,21 +255,21 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n      *  tx8 and tx9 should both now be sorted higher\n      *  Final order after tx10 is added:\n      *\n-     *  tx7 = 2.2M (4 txs)\n-     *  tx6 = 2.2M (5 txs)\n-     *  tx10 = 200k (1 tx)\n-     *  tx8 = 200k (2 txs)\n-     *  tx9 = 200k (2 txs)\n-     *  tx2 = 20000 (1)\n-     *  tx4 = 15000 (1)\n-     *  tx1 = 10000 (1)\n-     *  tx5 = 10000 (1)\n      *  tx3 = 0 (1)\n+     *  tx5 = 10000 (1)\n+     *  tx1 = 10000 (1)\n+     *  tx4 = 15000 (1)\n+     *  tx2 = 20000 (1)\n+     *  tx9 = 200k (2 txs)\n+     *  tx8 = 200k (2 txs)\n+     *  tx10 = 200k (1 tx)\n+     *  tx6 = 2.2M (5 txs)\n+     *  tx7 = 2.2M (4 txs)\n      */\n-    sortedOrder.erase(sortedOrder.end()-2, sortedOrder.end()); // take out tx8, tx9 from the end\n-    sortedOrder.insert(sortedOrder.begin()+2, tx10.GetHash().ToString()); // tx10 is after tx6\n-    sortedOrder.insert(sortedOrder.begin()+3, tx9.GetHash().ToString());\n-    sortedOrder.insert(sortedOrder.begin()+3, tx8.GetHash().ToString());\n+    sortedOrder.erase(sortedOrder.begin(), sortedOrder.begin()+2); // take out tx9, tx8 from the beginning\n+    sortedOrder.insert(sortedOrder.begin()+5, tx9.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin()+6, tx8.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin()+7, tx10.GetHash().ToString()); // tx10 is just before tx6\n     CheckSort(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool"
      },
      {
        "sha": "2085b718e26c20494bc1c92be86998dd663f340f",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "patch": "@@ -160,9 +160,9 @@ class CompareTxMemPoolEntryByFee\n         double f2 = aSize * bFees;\n \n         if (f1 == f2) {\n-            return a.GetTime() < b.GetTime();\n+            return a.GetTime() >= b.GetTime();\n         }\n-        return f1 > f2;\n+        return f1 < f2;\n     }\n \n     // Calculate which feerate to use for an entry (avoiding division)."
      }
    ]
  },
  {
    "sha": "49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWI2ZmQ1NjYzZGZlMDgxZDEyN2NkMWViMTE0MDdjNGQzZWFmOTNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-02T21:43:30Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:44:03Z"
      },
      "message": "Add Mempool Expire function to remove old transactions\n\n(note the 9x multiplier on (void*)'s for CTxMemPool::DynamicMemoryUsage\n was accidentally introduced in 5add7a7 but should have waited for this\n commit which adds the extra index)",
      "tree": {
        "sha": "30caec98dd3dc4fae4aef494ff04b0df81778ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30caec98dd3dc4fae4aef494ff04b0df81778ca4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78b82f4a16d8aad15ef397b1a1cd075b2efc8c16"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "22f0525b320db7e5c0e6d0733e6d35d1b1140903",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -320,6 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32"
      },
      {
        "sha": "ec7cc2fdc6547f79e8ce9427bd6a46e11688045e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -51,6 +51,8 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 900;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 1000;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 2500;\n+/** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n+static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */"
      },
      {
        "sha": "57bb284602135a3b3e7521520fb75b9743e935b5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -792,6 +792,22 @@ void CTxMemPool::RemoveStaged(setEntries &stage) {\n     }\n }\n \n+int CTxMemPool::Expire(int64_t time) {\n+    LOCK(cs);\n+    indexed_transaction_set::nth_index<2>::type::iterator it = mapTx.get<2>().begin();\n+    setEntries toremove;\n+    while (it != mapTx.get<2>().end() && it->GetTime() < time) {\n+        toremove.insert(mapTx.project<0>(it));\n+        it++;\n+    }\n+    setEntries stage;\n+    BOOST_FOREACH(txiter removeit, toremove) {\n+        CalculateDescendants(removeit, stage);\n+    }\n+    RemoveStaged(stage);\n+    return stage.size();\n+}\n+\n bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)\n {\n     LOCK(cs);"
      },
      {
        "sha": "635b66fb85081778e4284662c0a5e5f19b576ab8",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "patch": "@@ -211,9 +211,10 @@ class CInPoint\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:\n  *\n- * mapTx is a boost::multi_index that sorts the mempool on 2 criteria:\n+ * mapTx is a boost::multi_index that sorts the mempool on 3 criteria:\n  * - transaction hash\n  * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n+ * - time in mempool\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given\n@@ -294,6 +295,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByFee\n+            >,\n+            // sorted by entry time\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByEntryTime\n             >\n         >\n     > indexed_transaction_set;\n@@ -397,6 +403,9 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n+    /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n+    int Expire(int64_t time);\n+\n     unsigned long size()\n     {\n         LOCK(cs);"
      }
    ]
  },
  {
    "sha": "9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzliNjZmNzcxYWQ5MDRjZDY2NWY3ZjVmNjhlMzI3OWViYjJmYTdl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-02T21:17:27Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:44:03Z"
      },
      "message": "Fix calling mempool directly, instead of pool, in ATMP",
      "tree": {
        "sha": "ee023e54b896bcbe5d5eee7bb87da639e5bd852a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee023e54b896bcbe5d5eee7bb87da639e5bd852a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49b6fd5663dfe081d127cd1eb11407c4d3eaf93d"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 13,
      "deletions": 16
    },
    "files": [
      {
        "sha": "613eeff2272ae49f7fa25460bbcb306699fb3f1c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 12,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "patch": "@@ -740,17 +740,14 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n+CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned int nBytes, bool fAllowFree)\n {\n-    {\n-        LOCK(mempool.cs);\n-        uint256 hash = tx.GetHash();\n-        double dPriorityDelta = 0;\n-        CAmount nFeeDelta = 0;\n-        mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-        if (dPriorityDelta > 0 || nFeeDelta > 0)\n-            return 0;\n-    }\n+    uint256 hash = tx.GetHash();\n+    double dPriorityDelta = 0;\n+    CAmount nFeeDelta = 0;\n+    pool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n+    if (dPriorityDelta > 0 || nFeeDelta > 0)\n+        return 0;\n \n     CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n \n@@ -879,11 +876,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, pool, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                 strprintf(\"%d < %d\", nFees, txMinFee));"
      },
      {
        "sha": "aa5aec0556bb6534246940802804194d0b3bc88a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "patch": "@@ -735,10 +735,10 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n+void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n     const std::pair<double, CAmount> &deltas = pos->second;"
      },
      {
        "sha": "cee1a146dab2f6a31a943078d36e6b9d2aadc629",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "patch": "@@ -83,7 +83,7 @@ class CTxMemPoolEntry\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    CAmount GetFee() const { return nFee; }\n+    const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n@@ -371,7 +371,7 @@ class CTxMemPool\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n+    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n \n public:"
      }
    ]
  },
  {
    "sha": "e8bcdce8a245af235f8be9853c8f81c9bda56412",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGJjZGNlOGEyNDVhZjIzNWY4YmU5ODUzYzhmODFjOWJkYTU2NDEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:57:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:00:19Z"
      },
      "message": "Track (and define) ::minRelayTxFee in CTxMemPool",
      "tree": {
        "sha": "2404fef3f821029474459fbf6e5941757581a865",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2404fef3f821029474459fbf6e5941757581a865"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8bcdce8a245af235f8be9853c8f81c9bda56412",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c9b66f771ad904cd665f7f5f68e3279ebb2fa7e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e8d76dd2f1d558a0197242395748c30aeaa1ce11",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "patch": "@@ -305,15 +305,16 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n     }\n }\n \n-CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n+CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n     fSanityCheck = false;\n \n-    minerPolicyEstimator = new CBlockPolicyEstimator(_minRelayFee);\n+    minerPolicyEstimator = new CBlockPolicyEstimator(_minReasonableRelayFee);\n+    minReasonableRelayFee = _minReasonableRelayFee;\n }\n \n CTxMemPool::~CTxMemPool()"
      },
      {
        "sha": "e45867f71357854056aaae4e8caf6b90917ab896",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8bcdce8a245af235f8be9853c8f81c9bda56412/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "patch": "@@ -285,6 +285,8 @@ class CTxMemPool\n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n+    CFeeRate minReasonableRelayFee;\n+\n public:\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n@@ -334,7 +336,12 @@ class CTxMemPool\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n-    CTxMemPool(const CFeeRate& _minRelayFee);\n+    /** Create a new CTxMemPool.\n+     *  minReasonableRelayFee should be a feerate which is, roughly, somewhere\n+     *  around what it \"costs\" to relay a transaction around the network and\n+     *  below which we would reasonably say a transaction has 0-effective-fee.\n+     */\n+    CTxMemPool(const CFeeRate& _minReasonableRelayFee);\n     ~CTxMemPool();\n \n     /**"
      }
    ]
  },
  {
    "sha": "1fc5ca05caccb9026c8a6245a32257cc57de6e33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmM1Y2EwNWNhY2NiOTAyNmM4YTYyNDVhMzIyNTdjYzU3ZGU2ZTMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:03:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:04:04Z"
      },
      "message": "Merge pull request #6805\n\n2c4ffbc Create btcdrak-key.pgp (BtcDrak)",
      "tree": {
        "sha": "8e08148b5c5d0927afc520d1df52d9915afea5c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e08148b5c5d0927afc520d1df52d9915afea5c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fc5ca05caccb9026c8a6245a32257cc57de6e33",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHLr1AAoJEHSBCwEjRsmm8pIIAIleBlzM+6aVwLau0/wdbQEf\nQ4hjB++jXnbfFwukwQ1MXgS/P2uEE2EfSS/HIshHzSuzeHJXARb4FpwR95d+REj6\ni60gAgJlpmBXmH11lpelnDeCdmYHT0ra/xD+11py1MAKofJzhGstIFtVckJLYQGa\n94Rw6NlHOeAG2jHl461AURbvNm5a+RoEYp2apvVci4QUP0HewDylkGbeNzbcULZq\nqWtnBUm3d18V1kNsq+3E5E+fu1386Q3vRHYiW1Vx9HWonYQdSvl8CUARI7x8yxNp\nQ6J52WBQAwhRpEcHGQwEUMPUZaLn6BinvDu0F7oXBzVIHL30auGy1fOiomeAM7w=\n=GRDG\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e08148b5c5d0927afc520d1df52d9915afea5c2\nparent 4ca6ddec4d7918b47f0e4747c5647daf54675306\nparent 2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444723420 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444723444 +0200\n\nMerge pull request #6805\n\n2c4ffbc Create btcdrak-key.pgp (BtcDrak)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc5ca05caccb9026c8a6245a32257cc57de6e33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc5ca05caccb9026c8a6245a32257cc57de6e33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc5ca05caccb9026c8a6245a32257cc57de6e33/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ca6ddec4d7918b47f0e4747c5647daf54675306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ca6ddec4d7918b47f0e4747c5647daf54675306"
      },
      {
        "sha": "2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c4ffbc76ea8cc5ee8691a2884f0a5a9be07b749"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 142,
      "deletions": 0
    },
    "files": [
      {
        "sha": "60d76c0ec7ab86635637ee9f49948e004fadfee4",
        "filename": "contrib/gitian-downloader/btcdrak-key.pgp",
        "status": "added",
        "additions": 142,
        "deletions": 0,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fc5ca05caccb9026c8a6245a32257cc57de6e33/contrib/gitian-downloader/btcdrak-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fc5ca05caccb9026c8a6245a32257cc57de6e33/contrib/gitian-downloader/btcdrak-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/btcdrak-key.pgp?ref=1fc5ca05caccb9026c8a6245a32257cc57de6e33",
        "patch": "@@ -0,0 +1,142 @@\n+-----BEGIN PGP PUBLIC KEY BLOCK-----\n+Version: GnuPG v2\n+\n+mQINBFWpKewBEACzsuhtkin1MdQCKCEcFypjEstg0jA0nNVOpsGDTtdwfMpWiLJH\n+bV7b3V1p5hgaPdSyZsUezvHbkVEQxmU47C9lwph3svu6v8HInBwnOa5zj4L0Ih18\n+7yfeEJOvWzULzNxtiIqvWQBFxrVBbgHMhUMg0j6KCYOWeTmTuUKgvbQB8dExCoV9\n+7l+mb0k6eOZhwGWl6KD8mVkdhfXhoCZY5g79BTJf7lAQqnVbjxdyEKD2HSSs5Jnx\n+mTeZg40ottXa1puT+x9ES7L/IOY5kcrp6lU8iyKAoUS4vOJt4nPqY59Pr9j2nUak\n+2BUY0yojH41a752OYW59R+0uTNcUAwpNFucOb4TrNqjGJaPtxvFBZPTLImfSE+Jj\n+VTT6eZixOXPlOWm/7PgR66JF70p3gDwCL19bwUeOKX3UbkjhmYG48d9y1FNFZlVM\n+Yf36xj0c2IOz34VVY6GcCfnIN6xus5qWgHWiQ6RRdlRc9TbcCsUGttXuFP/n4nX2\n+OHo6I/HBNidLScfD2sXZtYHLcqvi2CcvEmmDdwBZrZncz+cHpjz8xmONb3bEMNT0\n+euPcEC5PXUItCSk9KHSgJhAWqfB2WcZ0RUYLp5lbtIZGHqY34LJRWXVKeOQIq4Gn\n+8uCyM5oQUY9zK4x7fdRz5tOjInYg+eSqtnLVDACqmazQHZ6kuGspAvwW8QARAQAB\n+tBtCdGNEcmFrIDxidGNkcmFrQGdtYWlsLmNvbT6JAj0EEwECACgFAlWpKewCGwEF\n+CQWjmoAGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEOXROPXnOhryKiAP+L3B\n+4c4eZcp8OSRwtYMiNmlxqhzEe+Va8T748rP8oULBFi7b7Nw9FILtp0Vtt2Xw9Pd9\n+EMsv5ZfgPpFL58ZeaO5f4uyrxipfUE5XdhkMOtqqlTfuCGh5fvNv1sWgf5tOFS2+\n+4TCtcSSywl/OlbRmWW/rsJ+RPrE32iSn171WRUXmGGBGSTF2mxCELLIW/rnY1qUw\n+u81BN4SYQOSyd1ha4XAlVYnPcEdpD5mBhwh2mdw7nCtJ9G/lPJ+1VT5axsONbEKK\n+utoU8CRt7OBlAUe0GbAcp7FcniKaFF2nUuhNbMjFcqZ9pddb6aWHVcaXIHwjoR8T\n+Br8ygIoODNEauc0e1xbtsXByD76pcz3yzZOFCKxtjtjsln23Drko4JA2LyLxx8WY\n+BCZcf8/8QSZJOocFOoUIHEfdljo/41kF1MF1Ra2Pr5ZHx/qNcI3U+4+uBoc1AuWS\n+5gJl6xXicLByqweSGKzAfq+SGXM+8ZdJ5KuHISMq7tfkzkmIJ7fRy+cdprXYVnhK\n+CW5EWA6+xQqpt0QGaOyRPJvQqJJvO42Eg9slHkfON1499pwaIwblWuNRs/jq5xCY\n+b21m50JmPas6o5lCcF0SFiFLEJa8spWxMrsLZGUf8KfwriDrssw0XzI74E//BFb0\n+8TLeC7daL3bsCe3FD/Nlcplz0oPKOm6Zb7fNf8mJAYEEEwEIAGsFAlWtJa0FgwWf\n+nr9eFIAAAAAAFQBAYmxvY2toYXNoQGJpdGNvaW4ub3JnMDAwMDAwMDAwMDAwMDAw\n+MDEzNjM5NmE3M2YxOTBmZDRiMjRkMmNjOWM5N2UxNDgxMjcyZWI1YjE3YzU1YzVm\n+MgAKCRB/qxFCZ+T6BHGbB/9wvhZ2rgT4vOT7HENDXF+Bv9TItBF7JQ4mehCenWme\n+23qxBLttfQp3AbwA2K2FyrshGM0fmtmpO5pcXjjHMVzlIDa1fKvbQGbhok5Y+94w\n+hswGS8O0XTU6sB3JxC4vpqdS1pryA/7g3YI+EuzYCkubNxvYnAy80Rf098xZzj2r\n+Yov2c73qg8+kb+5MS2fTjOMQhJo8N70YOew9FVOeZoeepv7SWLDI5Ya/YQ+1fFKN\n+2ovfBq/fzAD4PJbPJCz0miq1T5GL2nTXLcJmj46uV3wNvppNm/w8492de5VO0JqG\n+qlRurp6Jp2k37jqRSIIXG2wxCkND0cYftjS13pHnerPyuQENBFWpKiUBCADiSsd/\n+CmoZV2/UCqAnxm5/kxF8rW5hVYsYmfGO6lY868j5GMOVhWkrjl2CNWrFwQRqyiol\n+FNvyOro2IpOGXlM87AU3MP2/Zz+zkO3zY4ZH40t/UqcO2MPpKdkmGofCt+C6IFGS\n+Y23FqdfOLxV3aczN2aLzL2C6hHdXTcs99NGSf51iHLXn9b+hT4k2AxLPnOnnjgJL\n+eC6+s2sh4loSuvCh5FjVQfhQDLyTn93r9xvEhUMUUxBLz1Iy+e+w1elSwqNT5wEI\n+V5Iontm63lN37GrkRyX90PBtKf6VYXE1yKhNLmPBOIc1vx02og6Psu5eilzKfoK/\n+tQeYr4M/6HOcNvEnABEBAAGJAiUEGAECAA8FAlWpKiUCGwwFCQHhM4AACgkQ5dE4\n+9ec6GvJmFQ/+IoBituRcR394sVPiK7apDIPzPziVT4Qu8aBuHHREhK1Vl5C5tLZ7\n+Q6wA5Xc6O2/G+37HqKX3rqD7XBdFwcPXQa6g54uVs8l2+1UIwnFqZm8bJwubkHU7\n+U6addHacbX2itqb4EiQ82mAQqPSwx36QGLtPF2htl5z1XWj6queqjVrteAl2cbz5\n+KKGklTjReaX1jmun/3nL1yJuYRpZ0L7lF3IU17FVckCL/y3CXhdWOK1fGRfsnZWe\n+XQT+00dKhW5uRfpa8hR1/HJnaczAZnjjpRJZq8hBLamTjPypwjLf+gFAPiAJRuug\n+Bh4saYoE3ciNDzB3B7RR8oqNwxaF316vurrcKqEvnpQechFudDKYz6Pd09lFM1U2\n+MlyJ/jMwwlEvwoTlKFvgYmXOHPZoyf4Vdq+RPfRy+pDI1et9fN4wsy/Foj5hb7Yw\n+/hPOAjWElc4huCwaHIbGN+gHd+AbO6dOkWC7GgsOTGopyU0NXWfud7HB1V/NQ7o1\n+EMrEEPg3eMBMpksuNJ4TaesJ3keW+9OwIMDvsIGcRvqcAVL0R0ZkMGiYG3ITna7l\n+KRcCZwWaHmE6WJTuffBu9oyRFfSH6YbI4pFuFulxghNe3gD1AFZyWPlS/M6jw87I\n+4nBWSNoyPs1UxEGtntBkWiBJq79WAUSAeiDPVzvekQfaZxSpCrZh1cy5AQ0EVapR\n+MwEIAIpPUS3x6zTo9YoFxf2CCNho62MZfoN4ZpVQyY+NLhZ0p1XQBullafZdQjF2\n+mGPXysg7SEZflkcwBGjS6B/CJUoe+zGRL0DXrpoGrqEZzDshiOQ7lM08iloZ9X7V\n+UqhZdi7CFQCO9lAPgrFnvlTVvc7z+1L01/I+9H+w7rmnVsa4NyR/3W1zpOjAO7Wh\n+telWGTcLGYM5fWE3XnUTsWHUQnvdJ9qkDQB6emAOSzBreGmxzru1VSKIPrGsYmlW\n+Q/5Z82ihJ9uCYswUmh+hXRnAXTZTw9jQ+/hw75YuKUGjxXnMGJPMWIlBgB65h1fz\n+a6cTU1ZuS/wEEWEsiDWIob+B4qUAEQEAAYkCPgQoAQoAKAUCVd+TsSEdA0xvc3Qg\n+aW4gbWFsZnVuY3Rpb25pbmcgaGFyZHdhcmUACgkQ5dE49ec6GvIMfQ//SVwsyixG\n+w77pubV8R3LHjVqjo8CNWR2CedzT2/2xfRqjiz9juxpVSunPLTCUWhJTp8bAJzVY\n+UteZ3G1ctKuA/cnUbiAduU4CNlKrZ6AjmUysPVrsyw3kUDm8LSKKiARb0hCAFbvO\n+AO3Lm0YbpBtVYOUpWLoxpkFPx4PKRSyS+mkmFCgBV3baf6YOfPimGyEkVOhF5vZ9\n+WDjnlxPHWhjrpWOpWYPOlDMfSxsvYe4JTd/QXEqx0Ki1inNM4AnLiDf/rnyliQiQ\n+RFlHNnfo/FyqO9wvY8Hu0YLUJqee3WWTVDoYnQYSdHVM8w5JYXiUG8Cc8H2kQ79f\n+sYwIQEXPdJUCeFYnWwkltAjd95AvNDv/5/4kSBBGWUY80TH8qoxuPLekPmuvS8QE\n+TP2AeEcL8Hi5GnKbl9xb3bu/cuauLp1D23qC3HMoigFEgUPQ3egB7Z66PVWo+ko9\n++niqujCFBZBmkS23fvp4EgejYkvvhH9NcWDXWhnIaghLq6ngrj+zHDTTb5dCp9aM\n+JKOyKZIjEtT+AOi8g7yQ7bDyI0eJxOhKamBcVYHcvUU3DMsRSao8cEE6ee/G9564\n+sQ15Ma7W+wqee8SbaND84A2tAQcFtd7kvRn8C3Ac/bHuL5UIihNruTzOsfIHlXmE\n+jqjNA37tatNGoAK6//UHCzX6rLZSBUJtsDWJA0QEGAECAA8FAlWqUTMCGwIFCQHh\n+M4ABKQkQ5dE49ec6GvLAXSAEGQECAAYFAlWqUTMACgkQ3qOE7dYp+kBF2AgAiI8O\n+mFVfhCSJl7ofMMO2g92JfeWevQsn+GITexaYs/FEBb4NmWAyItJ1mL0jCVOhRXwj\n+AcKbKiWhuco17EdXi3xvu5FrfsN/lOmmyhkKyHSR+LS2XPb+xG5JJrafS7m2nxMx\n+4m0yH6tUcsBnqBPFFZ+w+Fxtg8ngUbo9B/gaXr7mvHwir0P2LYpcqlwpD0Zxmu1W\n+HpKT/DQa09Zjr5l9WDGtF6U6ZuSH8sdh/tD///x7AJ6eoiYadcy3YWRLFKKpfMSI\n+tSDhOlWBFFNRwrsZRXCrETYoJNWb/kvcHOaWNzPWcePjQ5RdOkQwnidUd1iy/Uqr\n+2+cT9WWfkHAND4uHlP1wD/sF+nQWOoWcQLFqTx9qt9h7tbgNAzXfEec7fwQ+NMwS\n+bKocjb5OOdzInEMDufusOWgKBfJtPQSMUe+W2orxBWtJb7WY9Xeshjs4q42GooPz\n+e9AN5B2M1V+wmSYEMyhHSTldjj/ZUWBmzZGH7skPHFUwFB633NOA97Mrt/F1RhiO\n+kw1TTn61x1op+wF919DnKdXaFiFX02XzqjJgnuUoGN/72cnfRzIkSaq9b9uX/dQK\n+z2Uk19ENQ3ipmAqBnzOzz+kjSqh8PdHgTGSyy8Ump8+dfhXjC98wVwP6YEn7tOv0\n+iaRzOiKd2kkCvSYexiqWYtKLU8icUFmvd6SROkcAHhPr1+oPS7LJpYDuES17iN3X\n+YaYHGGyvNsh1RseJvE7saosVGQwM539W61JUS9A3TP5jaL8ka8Q5AiXyIee+CD5h\n+2wFQnvdnmnc4QVkdVdrpNRBZyGySgyrO9E+iogfMSfcdDApgiETUOuMTvuCZSPhQ\n+YZ3+rddfgyDXYN3y5oW7Piro19r6R0D7DcGSstk1+1mEjJbb7s5Gc7oGq+EgLm0K\n+VYKa4Ky12osPCHFAoYLHe2upSHFhtgPgfzHKE8Uo5hnAVmx9jAi2XxBi4y5ezPPD\n+C0cCKsRTVrbvNavTSMYdfcxWuB4vlrMZIsvV0RcyP9jPXZm3XPrMik8xRbLR9AzR\n+C7kBDQRVqlGOAQgArkX9q/xZbvceeW0vzxI1UfbZnVoO3E+lL8W40RtBoF7R/7bD\n+68/dNYa1/geUc1jVyrycdp5RkTfnHnIHDt1WZfi6Ywdw9val+BpT/X9ZkxEXgYxO\n+tzMq0zO+ipeLgiqBRck7kgsOEgv+zaqMFXXrH+Zbsg1QbDEug61iCoKzpR8b2+5Z\n+QHxklnGd1RbiMWpioTmacOQE9yTfWvastJXIvZoZ8gdaLR8hA5o/ePP+GcSgntAd\n+NlMYTqqNujAymBJvMAu+ybyFRKN/L/X+IX2elhJWM1x4d1OjM/4sk31g6pucWRcd\n+vimPWouDIWVh+sh1g/IRsO295QKzXUCDELc/QQARAQABiQI4BCgBCgAiBQJV35N0\n+Gx0Da2V5IGxvc3QgaW4gZmF1bHR5IGRvbmdsZQAKCRDl0Tj15zoa8lAJD/93voL9\n+dqZ9IViyULsWsEkQDD20HQ+mxbuJcAE526If/x9JIMR1JcuE/C7pAtNjg5VBCOeB\n+sk0JC+Z7M80ivU1xov+rmjRvVNAX22/rBLpCTmUe0gzIBnWG5+O2/sccutigvvQE\n+O1rqLTEp0dzLoYbVAwJedELZnmK04Y8uXXQ1XSHXJOJmvEBpbDF0U3FXl7Sw4C+u\n+hI8IR6l2D/BYKIZgNIkh4ppFa6RJY0DtEWR94POZYBjjjToeCTRBG9IxudDy1jm4\n+k6bF/ByOecN4B3HRcBXUM1yJEmOZlPSZu2v7XvFp2VnFJfN2UjmtpYsKamV/xUsw\n+DE0voGp15TOfb+6QzfnLSI7vXcm1CfkBS++lYKcYcJ9Kj90ZPjtKy25vKcBvG68o\n+nYgS0Jnzm6j2yE2KBc90CWS1Txgu1Rd5ZrP8pM1ZK20/dq9CjtPLE94WFIc77k0R\n+3z8DJPG8I8M2RJ1XoqENrBvG5U0B+eeGA7mY8QSRH0COhslJ7j0WjOyO8xBSGTCq\n+QKGppFmDLs440cCVUOpnPz1kYG3YFgdCsFxOQ1GBJuHFLUdA1BEbb/nG4C4+y3Ek\n+Bihhu+3ZRoaBgE7ZmVOMEV7xdslPNssiTh+CxIUtugY2mhGnANvEcWrqTgG9+EHf\n+ax2avHR4CQMn7onZAPt2sOMoPkE8R3H3Knlta4kCJQQYAQIADwUCVapRjgIbIAUJ\n+AeEzgAAKCRDl0Tj15zoa8rK4EACFfSUffkm80uzBxFDbo3+fWf2k5hnjXheZxE5w\n+gpT4Z6QGH70GjR+rbH5a6fMM4hkmqNRYWLf6n8RTYNvCLxopVg2l1QbHYFbA+pAB\n+0tM7HOng8iyvc+uUJ4hTicpePm66A4uc1/z+mr5mcLTQS6Nfix2j3hduzzCVIbuF\n+/3UUxS9hFAXOu1F1Oz6auFkeQ8R/w/49yXrq/MYYSUsWtOR66Yu4664TJKBkZGlw\n+CiGPYmpeE7To7LqdhAop+ZnZnc5agSnB9QZw1HVbMY0nwbPuiJx+6mmbh7Gf/OHu\n+2pHSAStvFUGA6ngbYVH2LlRC2XgAA/yFAy1FNFegxTXO+3DI9ykj/3WBmjbNZMIA\n+mhcvPPwwJCNdxbZJbCcot82FBGPpwmsiZJWynD4m4+aGErp/pZmKjfMwP5NAgOQd\n+77XaRlJTvW4GqAdmT0ib7tCqGwFAx5o80SszhgRCUqu8oLGAUlTfMoRgmFNRznP9\n+7xptwjNSl19YrlXdgbhOvVvNO0/J6uXnRc3v9yfaa8J7xU6GvuR5smejYNLUxccl\n+N1UmouS3Vol5z6hOmqnembN/zC3THOHqmJ1G6SdiCcn5dG5Tc+jmBKLRAnoIimWT\n+dO/UoWhm2EB40Hlj6HRFXure47oD9x28d48E0+HI9Jzlh4Wuu6kkr+ugOpdC0TbN\n+H/+RObkBDQRV35PpAQgAo1+V52e+8VFsDKyceNNEVE8NdUiPRKBZuVfCSP8nqNCj\n+hYf4lY/iygHCNZDtKaBs6BUCj0Ev1CLm+Uxvdl1trEr1FGz8E1kdUsh0LocKJgjh\n+wbuDrxM/6LNBxYTR9fEIGx+ka8o9OMLqWav+QjZtDC/nTWaJkXxvcgZPhadCmkkz\n+P0g/vnJVYbvDBBmxI9ofkxZIrwNR2Y8VO2oLVP0MpCA06cuUQWym/gQ2uqBToGqr\n+M/gc+vq0XQyFrNmH/iP8MuASrOoQfGhvZDg/x8rcFRs37itZWpUfP3pZ5zWztX3G\n+TBtc1EktSjs8fU828lPxtG80r4RB2sWVDJfoqhi7XQARAQABiQNEBBgBCgAPBQJV\n+35PpAhsCBQkB4TOAASkJEOXROPXnOhrywF0gBBkBCgAGBQJV35PpAAoJEPxkNPw6\n+MelWLCsH/R69Q2jgT2+sHVWbDsmNjTOkJIteKbz0uW8/vBJqZ2VEwKozGruCTkNI\n+orYKj52ZRcxKiAijN2XGw1TEccP0s5Trap1Z+xgjDDLByLswoVBUzAjbq77hedT+\n+ZUuQFKnm0Cc+PzB/Nz96I8AV4AxYc7RW4keGtvEv7qgdIlb6fbPpFB7Z5W573OZ7\n+G72B/T6QL43HRaN+ZbjwRJaY66tYKSl0Vd0WrO2p5xVdbTarVFn6q/A0IYEafVKY\n+QaRTh+VQbN7vNZCn1Gi6fvnjtWRsj0vMkafdAzVYqF42P+cf6iHrglE6DwR5AsaS\n+O9G+8kLpkXFRjDQJBaijWdBtaeOulCxTog/7BZwo1kpTC3ZCTxr/SHJDc1Nsxt8K\n+xnMCPxFSrHRJb/fUQDjhLv6lXXAm5SCBdFzAc9oDKUbcuGSEz2nZQjL1OADn9rVo\n+j/Y6wJ+okOCOs9AI1H+VW/rz5Z7wxvw3YOVa+dnYdV0w7FklCn+xFdZLj8Z5WjcZ\n+zoyqGlVAFGOZ4MbO+fz/+8f0Y7K/bW7E6smhnomTy2ZOk64eiO12d8quHTHMi7Xh\n+mmVYDiNn1gW9IxZwt/Ga9AvZbIAYhL2m/xBbdfMKAG7Ttjzd3Ac+8wrGm3lOesBD\n+AJUtBmURu8b1Eyj72IQcV0AJM8gvc1B0H345oX6VBgkBB0bf3nuUVftv6r529jTr\n+Jix6yrs4uf25tefzcFuqqE1s1r+pSZFIDpaNsP+jjMgYj/zn4dLOZaq4V3SHvnsU\n+v8KOUC2/qNH9U0KC6bh4mw0fVsHzhkaOjOM7SF1Doc8Lz4vZuk4BpumHpkHEG90x\n+CLg2k/R9iIDQfcGtKY++1/GitjXakPuKrJctZ1SJuW1KWyzFeF4qvuowmLGMFRVi\n++CG5JJSLCUr+cPXa8NbjZv9BwSHqWbn3grr7ZE/j6SFNhuLmByeePPNKRt0cae6a\n+3TQkQFh/yvSIkB5BrB1n2x+xNoWMME+GR0zYQCOncCe8W+a5BZ1mTiVGacHgVqSN\n+eEaG0RH54+pi4gw=\n+=fFMC\n+-----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "241d6078ba26db4d3a36227d3275be2ee34625a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDFkNjA3OGJhMjZkYjRkM2EzNjIyN2QzMjc1YmUyZWUzNDYyNWE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:53:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:04:39Z"
      },
      "message": "Add CFeeRate += operator",
      "tree": {
        "sha": "717da978c3a0e4cd6e55b91fdf0452e5f838896c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/717da978c3a0e4cd6e55b91fdf0452e5f838896c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/241d6078ba26db4d3a36227d3275be2ee34625a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241d6078ba26db4d3a36227d3275be2ee34625a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/241d6078ba26db4d3a36227d3275be2ee34625a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241d6078ba26db4d3a36227d3275be2ee34625a6/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8bcdce8a245af235f8be9853c8f81c9bda56412",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8bcdce8a245af235f8be9853c8f81c9bda56412"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a4c7764cda2bfd3a7afcc4ffa9a286eb0a42a4c3",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/241d6078ba26db4d3a36227d3275be2ee34625a6/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/241d6078ba26db4d3a36227d3275be2ee34625a6/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=241d6078ba26db4d3a36227d3275be2ee34625a6",
        "patch": "@@ -51,6 +51,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n \n     ADD_SERIALIZE_METHODS;"
      }
    ]
  },
  {
    "sha": "cd57f344a591edb1c8b35736b2734b39eb202dc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDU3ZjM0NGE1OTFlZGIxYzhiMzU3MzZiMjczNGIzOWViMjAyZGMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:04:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:04:51Z"
      },
      "message": "Merge pull request #6807\n\n3b363df Updated Prab's PGP Key -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256 (Paul Rabahy)",
      "tree": {
        "sha": "b685772d3c23aa2f16ea582596ed7236d0fcb220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b685772d3c23aa2f16ea582596ed7236d0fcb220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd57f344a591edb1c8b35736b2734b39eb202dc3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHLsjAAoJEHSBCwEjRsmmR90H/20YASxNPYtZS4XOWydjHV8r\nLpfoMIuoL08w06fvl1mMOpp8FO1wymUIlZknUK+9OCenE0qm8oKGomI1X9xb+Rr5\nIqDk3BYUFn95me6RS0MVgwuPKsnc28Oma9hlx8BuNYxACEdu+cQx/cMtuK87EA5s\neTc/Ewx/3DuzVR+vrCMKdJ9JZMdlsIqqtaoBfUklKa6MVmIWxy3SODHni6GhNsaE\n32zAkHmatRer+eVn64RIx6RQvnpgBh/1Fp4WhW7WeH+1hbXZKzo1JoP56ZPpzMvB\nTwVtYRITTViHgrO6bXX/JELkk07s1/72ZXH9+ayzTgXsTkS1CBMrTK5b2oV5+Cg=\n=7k/w\n-----END PGP SIGNATURE-----",
        "payload": "tree b685772d3c23aa2f16ea582596ed7236d0fcb220\nparent 1fc5ca05caccb9026c8a6245a32257cc57de6e33\nparent 3b363dfe88a1cd08d7b3369e1195742733638adf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444723486 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444723491 +0200\n\nMerge pull request #6807\n\n3b363df Updated Prab's PGP Key -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA256 (Paul Rabahy)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd57f344a591edb1c8b35736b2734b39eb202dc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd57f344a591edb1c8b35736b2734b39eb202dc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd57f344a591edb1c8b35736b2734b39eb202dc3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fc5ca05caccb9026c8a6245a32257cc57de6e33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc5ca05caccb9026c8a6245a32257cc57de6e33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc5ca05caccb9026c8a6245a32257cc57de6e33"
      },
      {
        "sha": "3b363dfe88a1cd08d7b3369e1195742733638adf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b363dfe88a1cd08d7b3369e1195742733638adf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b363dfe88a1cd08d7b3369e1195742733638adf"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 77,
      "deletions": 25
    },
    "files": [
      {
        "sha": "0870c88b9b3608b761565063dcbdc33536250227",
        "filename": "contrib/gitian-downloader/prab-key.pgp",
        "status": "modified",
        "additions": 77,
        "deletions": 25,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f344a591edb1c8b35736b2734b39eb202dc3/contrib/gitian-downloader/prab-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f344a591edb1c8b35736b2734b39eb202dc3/contrib/gitian-downloader/prab-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/prab-key.pgp?ref=cd57f344a591edb1c8b35736b2734b39eb202dc3",
        "patch": "@@ -1,29 +1,81 @@\n -----BEGIN PGP PUBLIC KEY BLOCK-----\n Version: GnuPG v2\n \n-mQINBFI3uQUBEADRjbUQb65n7sfjT5OPnjPO8oUh5onKjNALRGHGJxWwNkwkgmT6\n-mZFWjikM8B3ONEp8MfTyoOzv+MbWuBDS1GZxi0Tcb4HU323/7hhwfXV4bcHif7vq\n-Sc1ahN/5LIHj0htC6Uj78IWXW+kPWjX9biRJnZ9eerfA/AatC+4KuvYTjAa9uAfa\n-BnAs38EG/7ryXzxdz6M8iNB/YjHE72swSH84uTtA3LqI3huVY41eFMK6qXFBMFiq\n-H6bMx4pjwKzJj78bibXEQxq88yc6TLxbURs2GF4s11dr7Iq2Y+6FHqX3PfUByZBz\n-PQfbEy1Df4RbB3htCBv5puETlqZ0PVe9/B+WrcnaobxrbKEAqt0DspfoveRTIL+z\n-+YDs7FuW9TFBmd+5d2nmblHrNm8eEig3DpOoVetuuXsmDy03Fwao7hGkva4P3xbP\n-H4/U8GaxsfNzuLvEyy+dtd2t2C1HIxS+56r41/vdb/9rvGgEQuSr0DVpZIW9en0f\n-3bek+H7/qRCbXuaiBACBvOKNror5jtTeXTvnHWMkrOItyGH9pwR2Lhhv68JQS1jk\n-e3pwVRzfHBz4wQMHeLIh+blsVKCIjytBR8Rq36rsmN1q44/3HwuPW/XP61kPP90k\n-dKyPF4Qa+EoPw5ON5nr3lWy8ysklM79o1NmpyqNT4UjtDDBSfJtX82ct8QARAQAB\n-tB9QYXVsIFJhYmFoeSA8UFJhYmFoeUBnbWFpbC5jb20+iQI/BBMBAgApBQJSN7kF\n-AhsPBQkDwdj7BwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQ0cuiohvNiPaB\n-KA//Y6h6r8vUkA4/Gl2ejMgH+/DAolg9dFD+KMjQNKw16g7WzFNNS05T4RhcfZDT\n-mapAW2LOUiiPVJTacmblyFp2hXCv3S+DESQjVdz15pxMHkt9fFteXGyJyrcTY5pR\n-rZmjMD/9Twy2mLl5IH5ms87p0TN9HhM5Ux+B51la+Uq1wMdc1PdPWvGDeBVxCnRI\n-w0224M5u1uHaMwMDGdz6sXuCuonB7CDGL9Z2+m1Al7t0peL2QdKHjv8S+SKM2rZS\n-bRJyNmmTSKFQOTb9e2Ve48NNeaC0usEf8ttsygclps0mDpoa68YSY1LiuwVoIxvd\n-S626eDqgmq1yyz0l3gQbYKIUv7KvRDnYhqIEkPZLCOwKirm+I5vzXvVIlfoNRoyJ\n-VH3K6MJDSpBEerYNWHmUQpp7cLXIqVtako7IgmglOXQ5XVRnPvlOt5VOqQnNRTdM\n-nd/FK3n1TbUyNRverODSpOS6ZxdSSwLkTycTtj1SvpLo7laW0HQ1ofJfwzVmOq8s\n-8aWWTwBBC/X1UNLL/rsZMoHeUpaKHF2HSK5XzLcwqOBPRTMY0OG7vtBvj4G8clht\n-A3uQmmCMr6RxsPPYPHPO3MnMpY2AK6RRnNZg5Y1Fu+/71FAuUDVTxmI402yE5XbP\n-ILbJ8RgsrTVgeHdNhp9or0BdsB/wwMT5intkCaNqwb6eJag=\n-=y2Va\n+mQINBFYHMLQBEADLpvMbTQZ28jaV/tEcHpt/a2YiIqBdNreh6rE2MkTTjdkZJ5Mp\n+RAFOTrRYRWyBL9jmCjvjt4TToiV4quv9ubRWdTKn0cKaqcl8kwZ5rtoX6EEhcLJO\n+CAL13kDzkBrG3OqRxM7VWn/0IGf++Eq0yT2eqBi7Ae3FvC4m64TKLI2NK7GB/MQD\n+JqcXuh/0yMsPiCNZrTDBX+3SzTuSLjWt2Le1Ap2nWXf68cWqP6nhT+f76epZyA4D\n+NI48/KeylUzPSJtqBmBM+YLg/XGcxDpbIotnr7D27ThJQIXDzut9O9f7RjdlKaeh\n+G73W/hDqTqLpkR5LMa7K3unUuvlyQqYGXfHINjJibNUTLCi7YcJtuDv/DJwQxu45\n+/UUYS2xH6HpgOTdWs6VjHRCDzeAoKzkdDB+8Mvi2lZXxY0iFQeQtRNkmN9D3M4oT\n+voG0cZWjPGeKSalGVSRS3TGhdf+IqOPhOl9yrwEArlZ8HtsTUFdx/jAsWHsycCVb\n+LjkD8Mdgit39UZCln3e0bY862wF7Gm7P3ITMnTofO9w6Pqffh9WWQBtLrxIXrgII\n+vstC8H9ajIl1FDuYs1Mf8u7iq1zHh6GNzoxkm+FEvYc3mkSfx6KJD3STWqSrJcQK\n+q/1SsjBb+RiuqeFdY8krWfm2xkuUoGLEQnr14UQz1hQTTLEgSoHBSHxuHwARAQAB\n+tB9QYXVsIFJhYmFoeSA8UFJhYmFoeUBnbWFpbC5jb20+iQI5BBMBCAAjBQJWBzC0\n+AhsDBwsJCAcDAgEGFQgCCQoLBBYCAwECHgECF4AACgkQvNBNjpzMrCp8dA//Yaob\n+cnFuzLjIeWyz996DPJvU62WmAE4GkZot/wk+dtIAnOCxO9YbhWVU/b1WG2PjGdqt\n+LiB6COG28/HzJoUh2zjG0lDcjvu060Bdw9rQ/kJWW22ylNAoKiY9jd3Abde5nBGK\n+0wwJ8+aMMDrO6euwgcJymJ+yZ6ZiWyG4TXXCbSdCDSsBtaaAugMlzZWeyEBEgUK4\n+nX3ZCoNiF3s2bYojr6VcgG2clM9gsSBW03XLW3lRLOvDFmdEAFp8KSJNSkGBlcOS\n+iba6zAKTY80W/+D3soBP6Lr2uP0AOFr+ZnfxvaH9YvXIFDq/jT3CH2RxiZLd1m59\n+ehUbU878ebOMlJCJYiUBY6H+vChytqy51o1np+KTQtpxKzigWiPbtyJ9zYoVVczI\n+Ds8APCqL729BPMhhTDm8I9jeEhjXNmmiJjGVJGVB5X/3w+7jQrEz6f1Ebi+cCrgN\n+tfN22bMs9hh5KkQ4JhRVfDM0DOXCvokXjdo9yXUf+Doc96ruCJKH0qR9L7qIASiD\n+hSEK3CNGY1G05Bb4wCS+FrexL11whAxlX7HCwbgjgHu07QJBYITdn3J4fUFYGsyS\n+G/2D5aLASiKGfq2TL1G9e/qI49/TksDQ6Xy4ue4cQYbf6JigfYjDcSDOZmkHPuXG\n+kSd60WPWJT6OqLrhq2c7exYCUGZaKrWBoie5yoGJAhwEEAEIAAYFAlYHcWAACgkQ\n+0cuiohvNiPY3BQ//TVOxm3UncyGyXOs+ss3fBSPE5q3lR71H4uo4CxE5pi9Y10tK\n+Qf0ULe0gRpnF2FMUkCCE5hu2oG+kPpqKON8/jwcnRCO9h2AndIZ3NRPAOXO2pn9f\n+bkDHMlInhPUxDk5zCHMTOdCONDvhocZ69gYHJdgt4w3Joji1YxTkHr2n8dFyNY7Q\n+LgqT1tpuXgopjKsUcYRhDCRN/iFsMa4D+XZR+rflvX5hkee19DzUIWmaHitfHZlo\n+VsJ7uVZKqUevS3rbBr3i+tpvvlrqDXAGksGWOdK7QFD6GtRgOD91IB82K0NvyX6t\n+M0TMh/aAAslxfH3YeTIGnETuBkp9QBCa1c966ipoHyzItmK9sF/ONPEfYR/ad3gB\n+Nc4G5w0UEROX0v4AWMfYc2CD+un3beH6rkWnopsIRJcQ71XvufqweWsPFALuBBzR\n+PTiugTi0SSSr/ayA543s90Ko2Fxrg20UYJZj1u/DEukpNJwjRSS/yyjk0hMWtzW8\n+rY1Br4Djbq3uQQj8EQojHgg3vlpHcbO77kXIJAlWYIzfHY69RGXCQG6Y7tavIiXm\n+vveP54CPFCs8Kl9t8Pq0IrWKnBGklE/KwfMzkzvrKFmi+nk9yRgwyN9G/geQt4Vo\n+W2mHmO1lvY8Zu2zpzLkvkYGXpL1VkIefmBYV/SWgyYGhLOJIFodJcMrrnje5AQ0E\n+Vgc1VQEIALsxaGYOnwWdgE2e7zX4uFz7jY5fZh0+RqGOe+Sk2g/QVKEDSLDgVF/V\n+tneG8AFgYukHPFCm0IZdKrewrkzdQOwxjyxiyFxOV/LYPesElVe8OWIs0lrMrWlL\n+ZLDguF63wnxWhjolfBzQAG29UTXYaJt6onEB59R2l426LBl3W9wvq19jolOECISw\n+r9z2IRUJ3poqBckT9j11p8yuPjGyht90dvg4htGPBV7nHDIijUnqLfk9mnAj8NwW\n+2Gf7TwW2uNA2rHV6riFzYVe2t1sB5Gdlx5ostJzo67yIc5Dffca901VhmpJTUPox\n+W2KmTpl3ObvaS0U0mkAyVObVHSuT6UsAEQEAAYkDRAQYAQgADwUCVgc1VQIbAgUJ\n+A8JnAAEpCRC80E2OnMysKsBdIAQZAQgABgUCVgc1VQAKCRAyXl7AXCempkrrB/9H\n+tOAstawkJ1IflUztgknEDE7MWuNR5XGqN7ROJAZvL8YfB5J7a4HJxTzCWft2QQUu\n+x3uwSfBpm+hRftBjm4aACrhDS6OOH4eFOUIdDASb2lgnhLmygKhAO9LW2z8jSrRs\n+tKNj9nyCo56mtd2awFESgpskavv/ilc9wU830C82FFdyBqgy5OBdWBurnb3SV5F7\n+23uD1t1n8b9gseIxNdF6Q//szAeHa4VRzzqykExXqHCEFCtH2gs9EjiZ3YeCyygK\n+cPbe6/+FP6UD810PBqnWaCShOIeT56JsOu2gMZ5+epWB+piUTn38N2Znu3EA3Q64\n+Gc7P8AtrNUCv56bof5NoTuwP/0rP4n1bsTy7siBuPqc9YvYkVCxNsGmg1Qs5h2Jr\n+ZmQlAnz8JXfi/TRxarUNQTZEsXVQzq+4C9eEMey440kXvDE2sd3p4MKnbtkDmahJ\n+XcMG5lsMMAQTpmyBf1EBEIFOwjZBqUqEkHl4FGRpEx/Q2p9/pVlogGW7SE5Ck6W/\n+A63ClJUJLsHaWiv9zJ23tzT+ooNy/iO1Y+GfV6MY1tBfLd4ZHHd2n1urFB362sgY\n+2x1TfvfXN0Myw7m1X0l9bYFycuuWfSo6qK+LCU/4P3jm21+i9lWBYX5l+NLz5mlC\n+V5aN57zmtGK7QMSp+6VY8mwG1TuhUt91S2fEScLax6qEASiEChB8m3YJOjKycP27\n+Sq9WactijiVTPslHjCNfyM4BbE9crAbDWGkIbzbka8ix3t4uBWt0YO0Ug9S3eZBt\n+w1OVxUI+LWjF5XlkfXn8W+pZ/C+M9Cs6QsAXEbfHXVZKwlAGZfvYE25UTr11RRnY\n+pl8JZglq0Z2Gip3YzJewC1pjjQTnnPoPT79elBuPmiGwNm5L8HsKUZ1IMf1k5mQB\n+FX0CilHMF/JAO+r8Obs1l7FHXvO0a95tStcjpFodZjHARi5B3VGghcypy2J9hWfH\n+YF23EcE4GzpqqSEO/SJoxuLNNtj5ZVJOxmeRz2CKCe1sI8xO7wY7ckjRaGmrvK+c\n+dAxeuQENBFYHOocBCACxVJwkGbqcgKTrg6APMxWO77ielcac8FOVpd0ns1h4TGZM\n+iCwwTR5WPRiIA6zuS3VTuPAntnK3VF9fQsLBORHIb4CzMeU3F/64SPt8NFajEQ+P\n+vPsZlyv29RSVmvhIRDTDry3Z/KQxnZ3rzazrBqGVuLBgsG45n97MQ8Xq0gkY42jU\n+VDldULYGMco5zHj/MFSQ6L3z0j1lL+aiX2xIdRyDNzOhRqaA1ByZvsRSsqW2JWox\n+78c6AbclWw0QLdQd4Pxk8k5hpeN/EtneVnFDX3hOq/C9fZs6f5aAKn81WXqPPPk6\n+G0b7KzlUoCWGlO7M5LzEzWmWvGPs7W8y2Uil99CVABEBAAGJAiUEGAEIAA8FAlYH\n+OocCGwwFCQPCZwAACgkQvNBNjpzMrCr50BAApY22DRYqmtALFieREu78BvjQT/DY\n+f9Smkga1YVr9/Ph9NJ5iSVeM8mrVkwZnGRK1UCjk16rsmB70IqlnJnyJGXqPMj7M\n+3ioOWY8fCL8fmLI2g0TbXXKl3e0nGByGXW4pwyLYa/hR7XJMco/PxqIGhEKcCIRP\n+dxq/6U9T9SYe2IkfXBYZAxfUTE2FkRpw1zSfZN3z32LM7ICZ26NRHRWo4Kv5sij4\n+0mYYecFmWdf6ib5pPCI0HmPGpblbmZgR1LoJNmuNxfpgEnPe8BbxtO4mueNW5A39\n+y7gLCmDZ8MaOGxvjGByBoXxXP62BiU910iZZZurjSD+3FD+NUX0m4yxVIZCkuInY\n+QzLxFACr26IYpcsPHIYGnEjDBFw9hHdP6tzKbjzgVSZESheQf2zwit0YYSjwHQN/\n+XGnBy8+p66As61jg8mcAN2Zd8vwFKZOvfEnSsaoK5ssAh8jixhPj+Ujgs0/PB8t/\n+ON20yr+YRAwU+RVnC/vfvrM83mjoz4mbmSLapFz/xWNhoS0ZczYEI5CyxE8peGPX\n+gd/7tim2OqUuZ3SlH5TZP3pdJcqxTNN7iNaWy1wAY/sb8As3Pge/Vv5hSYmHNjQy\n+h/62SSbTf6OZCuUGjy8fvVj51SclVKqGNprmAqVrIy0J+VeTKj4r7PGesPWJavRc\n+RFdDYRHByRDDL1I=\n+=dOwX\n -----END PGP PUBLIC KEY BLOCK-----"
      }
    ]
  },
  {
    "sha": "e6c7b362ab8915e2aac167fa519bd29836d482af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmM3YjM2MmFiODkxNWUyYWFjMTY3ZmE1MTliZDI5ODM2ZDQ4MmFm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-08T07:46:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:05:43Z"
      },
      "message": "Print mempool size in KB when adding txn",
      "tree": {
        "sha": "d34bdd92b0f60688a50c4461fb6335189cb895dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d34bdd92b0f60688a50c4461fb6335189cb895dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6c7b362ab8915e2aac167fa519bd29836d482af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c7b362ab8915e2aac167fa519bd29836d482af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c7b362ab8915e2aac167fa519bd29836d482af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c7b362ab8915e2aac167fa519bd29836d482af/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "241d6078ba26db4d3a36227d3275be2ee34625a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241d6078ba26db4d3a36227d3275be2ee34625a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/241d6078ba26db4d3a36227d3275be2ee34625a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f01bb8ec9e2f7e259c71624bcddc29111b2074b1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6c7b362ab8915e2aac167fa519bd29836d482af/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6c7b362ab8915e2aac167fa519bd29836d482af/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e6c7b362ab8915e2aac167fa519bd29836d482af",
        "patch": "@@ -4287,10 +4287,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),\n-                mempool.size());\n+                mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n             set<NodeId> setMisbehaving;"
      }
    ]
  },
  {
    "sha": "794a8cec5db84fde1cce82ada51740070ec188ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTRhOGNlYzVkYjg0ZmRlMWNjZTgyYWRhNTE3NDAwNzBlYzE4OGFj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-02T21:19:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:27Z"
      },
      "message": "Implement on-the-fly mempool size limitation.\n\nAfter each transaction which is added to mempool, we first call\nExpire() to remove old transactions, then throwing away the\nlowest-feerate transactions.\n\nAfter throwing away transactions by feerate, we set the minimum\nrelay fee to the maximum fee transaction-and-dependant-set we\nremoved, plus the default minimum relay fee.\n\nAfter the next block is received, the minimum relay fee is allowed\nto decrease exponentially. Its halflife defaults to 12 hours, but\nis decreased to 6 hours if the mempool is smaller than half its\nmaximum size, and 3 hours if the mempool is smaller than a quarter\nits maximum size.\n\nThe minimum -maxmempool size is 40*-limitdescendantsize, as it is\neasy for an attacker to play games with the cheapest\n-limitdescendantsize transactions. -maxmempool defaults to 300MB.\n\nThis disables high-priority transaction relay when the min relay\nfee adjustment is >0 (ie when the mempool is full). When the relay\nfee adjustment drops below the default minimum relay fee / 2 it is\nset to 0 (re-enabling priority-based free relay).",
      "tree": {
        "sha": "35b6750a3dc813c635fb304f9d7658b2695edb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35b6750a3dc813c635fb304f9d7658b2695edb70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/794a8cec5db84fde1cce82ada51740070ec188ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a8cec5db84fde1cce82ada51740070ec188ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/794a8cec5db84fde1cce82ada51740070ec188ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a8cec5db84fde1cce82ada51740070ec188ac/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6c7b362ab8915e2aac167fa519bd29836d482af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6c7b362ab8915e2aac167fa519bd29836d482af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6c7b362ab8915e2aac167fa519bd29836d482af"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 106,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e3ad63a56e9d99f7cd23fbec2f45de9c8da7c53f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -320,6 +320,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n@@ -842,6 +843,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n+    // -mempoollimit limits\n+    int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+    if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n+        return InitError(strprintf(_(\"Error: -maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n+\n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)"
      },
      {
        "sha": "c1df9998a9e73cd28453b0a73b9fa4d1aad801fc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -885,8 +885,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                 strprintf(\"%d < %d\", nFees, txMinFee));\n \n-        // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+            // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n@@ -951,6 +954,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, !IsInitialBlockDownload());\n+\n+        // trim mempool and check if tx was trimmed\n+        int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+        if (expired != 0)\n+            LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+\n+        pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        if (!pool.exists(tx.GetHash()))\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n     }\n \n     SyncWithWallets(tx, NULL);"
      },
      {
        "sha": "be0d2bf47d26c74fca8dc3783f921645069b8de6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -51,6 +51,8 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 900;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 1000;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 2500;\n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */"
      },
      {
        "sha": "7563c0788040152a07f4abfaee8e489b47b32f46",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -13,6 +13,7 @@\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utiltime.h\"\n #include \"version.h\"\n \n using namespace std;\n@@ -308,6 +309,8 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n+    clear();\n+\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n@@ -539,6 +542,8 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     }\n     // After the txs in the new block have been removed from the mempool, update policy estimates\n     minerPolicyEstimator->processBlock(nBlockHeight, entries, fCurrentEstimate);\n+    lastRollingFeeUpdate = GetTime();\n+    blockSinceLastRollingFeeBump = true;\n }\n \n void CTxMemPool::clear()\n@@ -549,6 +554,9 @@ void CTxMemPool::clear()\n     mapNextTx.clear();\n     totalTxSize = 0;\n     cachedInnerUsage = 0;\n+    lastRollingFeeUpdate = GetTime();\n+    blockSinceLastRollingFeeBump = false;\n+    rollingMinimumFeeRate = 0;\n     ++nTransactionsUpdated;\n }\n \n@@ -854,3 +862,60 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        double halflife = ROLLING_FEE_HALFLIFE;\n+        if (DynamicMemoryUsage() < sizelimit / 4)\n+            halflife /= 4;\n+        else if (DynamicMemoryUsage() < sizelimit / 2)\n+            halflife /= 2;\n+\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n+        lastRollingFeeUpdate = time;\n+\n+        if (rollingMinimumFeeRate < minReasonableRelayFee.GetFeePerK() / 2)\n+            rollingMinimumFeeRate = 0;\n+    }\n+    return std::max(CFeeRate(rollingMinimumFeeRate), minReasonableRelayFee);\n+}\n+\n+void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+void CTxMemPool::TrimToSize(size_t sizelimit) {\n+    LOCK(cs);\n+\n+    unsigned nTxnRemoved = 0;\n+    CFeeRate maxFeeRateRemoved(0);\n+    while (DynamicMemoryUsage() > sizelimit) {\n+        indexed_transaction_set::nth_index<1>::type::iterator it = mapTx.get<1>().begin();\n+\n+        // We set the new mempool min fee to either the feerate of the removed set,\n+        // or the \"minimum reasonable fee rate\" (ie some value under which we consider\n+        // txn to have 0 fee). This way, if the mempool reaches its full size on free\n+        // txn, we will simply disable free txn until there is a block, and some time.\n+        CFeeRate removed(it->GetFeesWithDescendants(), it->GetSizeWithDescendants());\n+        removed += minReasonableRelayFee;\n+        trackPackageRemoved(removed);\n+        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+\n+        setEntries stage;\n+        CalculateDescendants(mapTx.project<0>(it), stage);\n+        RemoveStaged(stage);\n+        nTxnRemoved += stage.size();\n+    }\n+\n+    if (maxFeeRateRemoved > CFeeRate(0))\n+        LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n+}"
      },
      {
        "sha": "e8572e7bdad57aa639476c0eb10d2bae6ff6b47c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a8cec5db84fde1cce82ada51740070ec188ac/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=794a8cec5db84fde1cce82ada51740070ec188ac",
        "patch": "@@ -287,6 +287,13 @@ class CTxMemPool\n \n     CFeeRate minReasonableRelayFee;\n \n+    mutable int64_t lastRollingFeeUpdate;\n+    mutable bool blockSinceLastRollingFeeBump;\n+    mutable double rollingMinimumFeeRate; //! minimum fee to get into the pool, decreases exponentially\n+    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12;\n+\n+    void trackPackageRemoved(const CFeeRate& rate);\n+\n public:\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n@@ -410,6 +417,17 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n+    /** The minimum fee to get into the mempool, which may itself not be enough\n+\t *  for larger-sized transactions.\n+\t *  The minReasonableRelayFee constructor arg is used to bound the time it\n+     *  takes the fee rate to go back down all the way to 0. When the feerate\n+     *  would otherwise be half of this, it is set to 0 instead.\n+\t */\n+    CFeeRate GetMinFee(size_t sizelimit) const;\n+\n+    /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */\n+    void TrimToSize(size_t sizelimit);\n+\n     /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n     int Expire(int64_t time);\n "
      }
    ]
  },
  {
    "sha": "d355cf4420043a866e418c97778d999cd1958f61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzU1Y2Y0NDIwMDQzYTg2NmU0MThjOTc3NzhkOTk5Y2QxOTU4ZjYx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-02T21:20:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:38Z"
      },
      "message": "Only call TrimToSize once per reorg/blocks disconnect",
      "tree": {
        "sha": "ffd7f4048f86201a3737bb04a795d1c5c60970b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffd7f4048f86201a3737bb04a795d1c5c60970b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d355cf4420043a866e418c97778d999cd1958f61",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d355cf4420043a866e418c97778d999cd1958f61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d355cf4420043a866e418c97778d999cd1958f61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d355cf4420043a866e418c97778d999cd1958f61/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "794a8cec5db84fde1cce82ada51740070ec188ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a8cec5db84fde1cce82ada51740070ec188ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/794a8cec5db84fde1cce82ada51740070ec188ac"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "f379ea46e27a2dc9f0bc74943b9b85a2a3286162",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 9,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -776,7 +776,7 @@ static std::string FormatStateMessage(const CValidationState &state)\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectAbsurdFee)\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -956,13 +956,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         pool.addUnchecked(hash, entry, setAncestors, !IsInitialBlockDownload());\n \n         // trim mempool and check if tx was trimmed\n-        int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n-        if (expired != 0)\n-            LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+        if (!fOverrideMempoolLimit) {\n+            int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            if (expired != 0)\n+                LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n \n-        pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n-        if (!pool.exists(tx.GetHash()))\n-            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+            pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+            if (!pool.exists(tx.GetHash()))\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+        }\n     }\n \n     SyncWithWallets(tx, NULL);\n@@ -2029,7 +2031,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     }\n }\n \n-/** Disconnect chainActive's tip. */\n+/** Disconnect chainActive's tip. You want to manually re-limit mempool size after this */\n bool static DisconnectTip(CValidationState &state) {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2056,7 +2058,7 @@ bool static DisconnectTip(CValidationState &state) {\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL)) {\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n             mempool.remove(tx, removed, true);\n         } else if (mempool.exists(tx.GetHash())) {\n             vHashUpdate.push_back(tx.GetHash());\n@@ -2229,9 +2231,11 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n     // Disconnect active blocks which are no longer in the best chain.\n+    bool fBlocksDisconnected = false;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n         if (!DisconnectTip(state))\n             return false;\n+        fBlocksDisconnected = true;\n     }\n \n     // Build list of new blocks to connect.\n@@ -2277,6 +2281,9 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     }\n     }\n \n+    if (fBlocksDisconnected)\n+        mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+\n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n         CheckForkWarningConditionsOnNewFork(vpindexToConnect.back());\n@@ -2363,6 +2370,8 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n         }\n     }\n \n+    mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+\n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again.\n     BlockMap::iterator it = mapBlockIndex.begin();"
      },
      {
        "sha": "202d2c772ba896b3f9f71cba6d1e6121ddd53594",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -229,7 +229,7 @@ void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);\n \n \n struct CNodeStateStats {"
      },
      {
        "sha": "4b964735042dabbffcc4bcc266942a28b99b5833",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -809,7 +809,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, !fOverrideFees)) {\n+        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, !fOverrideFees)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "9b8e1c088b2d386986d23580d8efdaefaa40c0c9",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, false);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "3f2d5a05f698d7da7e8d70f61ec2f1cda71a449d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d355cf4420043a866e418c97778d999cd1958f61/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d355cf4420043a866e418c97778d999cd1958f61/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d355cf4420043a866e418c97778d999cd1958f61",
        "patch": "@@ -2863,6 +2863,6 @@ int CMerkleTx::GetBlocksToMaturity() const\n bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, fRejectAbsurdFee);\n }\n "
      }
    ]
  },
  {
    "sha": "074cb155c2f01ba6ddc555c01943fc20c46c0b46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzRjYjE1NWMyZjAxYmE2ZGRjNTU1YzAxOTQzZmMyMGM0NmMwYjQ2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T07:43:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:38Z"
      },
      "message": "Add reasonable test case for mempool trimming",
      "tree": {
        "sha": "46461c075f6e47dbb42f1e599b03026d872e2df4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46461c075f6e47dbb42f1e599b03026d872e2df4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d355cf4420043a866e418c97778d999cd1958f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d355cf4420043a866e418c97778d999cd1958f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d355cf4420043a866e418c97778d999cd1958f61"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 157,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dce278d99908039f892e7c1cc2c8abdde44ed04c",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 154,
        "deletions": 0,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "patch": "@@ -281,4 +281,158 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     CheckSort(pool, snapshotOrder);\n }\n \n+BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n+{\n+    CTxMemPool pool(CFeeRate(1000));\n+\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vin.resize(1);\n+    tx1.vin[0].scriptSig = CScript() << OP_1;\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx1)));\n+\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vin.resize(1);\n+    tx2.vin[0].scriptSig = CScript() << OP_2;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n+    tx2.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n+    BOOST_CHECK(pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // should remove the lower-feerate transaction\n+    BOOST_CHECK(pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vin.resize(1);\n+    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n+    tx3.vin[0].scriptSig = CScript() << OP_2;\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n+    tx3.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 20000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx3)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n+    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(pool.exists(tx3.GetHash()));\n+\n+    pool.TrimToSize(::GetSerializeSize(CTransaction(tx1), SER_NETWORK, PROTOCOL_VERSION)); // mempool is limited to tx1's size in memory usage, so nothing fits\n+    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx3.GetHash()));\n+\n+    CFeeRate maxFeeRateRemoved(25000, ::GetSerializeSize(CTransaction(tx3), SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(CTransaction(tx2), SER_NETWORK, PROTOCOL_VERSION));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vin.resize(2);\n+    tx4.vin[0].prevout.SetNull();\n+    tx4.vin[0].scriptSig = CScript() << OP_4;\n+    tx4.vin[1].prevout.SetNull();\n+    tx4.vin[1].scriptSig = CScript() << OP_4;\n+    tx4.vout.resize(2);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[0].nValue = 10 * COIN;\n+    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vin.resize(2);\n+    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n+    tx5.vin[0].scriptSig = CScript() << OP_4;\n+    tx5.vin[1].prevout.SetNull();\n+    tx5.vin[1].scriptSig = CScript() << OP_5;\n+    tx5.vout.resize(2);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[0].nValue = 10 * COIN;\n+    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx6 = CMutableTransaction();\n+    tx6.vin.resize(2);\n+    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n+    tx6.vin[0].scriptSig = CScript() << OP_4;\n+    tx6.vin[1].prevout.SetNull();\n+    tx6.vin[1].scriptSig = CScript() << OP_6;\n+    tx6.vout.resize(2);\n+    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[0].nValue = 10 * COIN;\n+    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx7 = CMutableTransaction();\n+    tx7.vin.resize(2);\n+    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n+    tx7.vin[0].scriptSig = CScript() << OP_5;\n+    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n+    tx7.vin[1].scriptSig = CScript() << OP_6;\n+    tx7.vout.resize(2);\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+\n+    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 7000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx4)));\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 1100LL, 0, 10.0, 1, pool.HasNoInputsOf(tx6)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    // we only require this remove, at max, 2 txn, because its not clear what we're really optimizing for aside from that\n+    pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+    BOOST_CHECK(pool.exists(tx4.GetHash()));\n+    BOOST_CHECK(pool.exists(tx6.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+\n+    if (!pool.exists(tx5.GetHash()))\n+        pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n+    BOOST_CHECK(pool.exists(tx4.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx5.GetHash()));\n+    BOOST_CHECK(pool.exists(tx6.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    std::vector<CTransaction> vtx;\n+    std::list<CTransaction> conflicts;\n+    SetMockTime(42);\n+    SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    // ... we should keep the same min fee until we get a block\n+    pool.removeForBlock(vtx, 1, conflicts);\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n+    // ... then feerate should drop 1/2 each halflife\n+\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n+    // ... with a 1/2 halflife when mempool is < 1/2 its target size\n+\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n+    // ... with a 1/4 halflife when mempool is < 1/4 its target size\n+\n+    SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    // ... but feerate should never drop below 1000\n+\n+    SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    pool.GetMinFee(1);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n+    // ... unless it has gone all the way to 0 (after getting past 1000/2)\n+\n+    SetMockTime(0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "319b972c3a00f0b8c263a4ce4f6bc9abb0bdfef3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/074cb155c2f01ba6ddc555c01943fc20c46c0b46/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "patch": "@@ -290,11 +290,13 @@ class CTxMemPool\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //! minimum fee to get into the pool, decreases exponentially\n-    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12;\n \n     void trackPackageRemoved(const CFeeRate& rate);\n \n public:\n+\n+    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; // public only for testing\n+\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n         boost::multi_index::indexed_by<"
      }
    ]
  },
  {
    "sha": "9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTkzNjQwYmU2YzQ5ZmExNTA1YmE1YzVkZjhjODkyMTBkYTVhNmU0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:06:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-13T08:39:38Z"
      },
      "message": "Drop minRelayTxFee to 1000\n\nThere is no exact science to setting this parameter, but 5000\n(just over 1 US cent at the time of writing) is higher than the\ncost to relay a transaction around the network (the new benchmark\ndue to mempool limiting).",
      "tree": {
        "sha": "e6864d5d559b5dc298fb227c97dcc2ebef807ada",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6864d5d559b5dc298fb227c97dcc2ebef807ada"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/074cb155c2f01ba6ddc555c01943fc20c46c0b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/074cb155c2f01ba6ddc555c01943fc20c46c0b46"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "31b3c2114351a8f4e1744fabacdafcc074f12875",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e93640be6c49fa1505ba5c5df8c89210da5a6e4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e93640be6c49fa1505ba5c5df8c89210da5a6e4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
        "patch": "@@ -75,7 +75,7 @@ uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(5000);\n+CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n "
      }
    ]
  },
  {
    "sha": "97bee37d4c35c3ee53b54b04f5e665250773b20c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2JlZTM3ZDRjMzVjM2VlNTNiNTRiMDRmNWU2NjUyNTA3NzNiMjBj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:48:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:54:31Z"
      },
      "message": "Merge pull request #6788\n\n3b1279f build: match upstream build change (Cory Fields)\n313e7f5 Squashed 'src/univalue/' changes from 87d9045..5839ac3 (MarcoFalke)",
      "tree": {
        "sha": "c18a133b0f83dc6c7e2b49741b82ef91fd774fae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c18a133b0f83dc6c7e2b49741b82ef91fd774fae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97bee37d4c35c3ee53b54b04f5e665250773b20c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHMbHAAoJEHSBCwEjRsmmiUoH/RdNBdLZRGkHcn+Fn6hN87pN\nJyTMjYZxHdFLtmI+8KOyyFgDwUKSO/0a6Drc63Mt062HJwkpPJ6L19SryZYocTEC\nHd2mP9BkgEEpdqYK8nQlmu5XxriAPttHM2934fHuMGrNKE9g3whAufDfHbd7lhmM\ndVb+yjY3IgUmLpNAs+Pzs4yyV7JKXc3zWK++iiVaLOd94aI+ZnCuLvCxpkSOJ1ms\nYiQhg/v5axeHF4pJzbRV4O7WbO3PG875mF3ul7aaj3BPKjBXugA8b6vdmoNQcya9\ntmr2FphebSf0aqkIcyJMCYtOpPDrn/D/rPcmycVP70yW8MSQ1F24aLIYyA0Q8dQ=\n=B2/c\n-----END PGP SIGNATURE-----",
        "payload": "tree c18a133b0f83dc6c7e2b49741b82ef91fd774fae\nparent cd57f344a591edb1c8b35736b2734b39eb202dc3\nparent 3b1279fdb269727f4fd964df0c238401467930ea\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444726086 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444726471 +0200\n\nMerge pull request #6788\n\n3b1279f build: match upstream build change (Cory Fields)\n313e7f5 Squashed 'src/univalue/' changes from 87d9045..5839ac3 (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bee37d4c35c3ee53b54b04f5e665250773b20c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97bee37d4c35c3ee53b54b04f5e665250773b20c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bee37d4c35c3ee53b54b04f5e665250773b20c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd57f344a591edb1c8b35736b2734b39eb202dc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd57f344a591edb1c8b35736b2734b39eb202dc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd57f344a591edb1c8b35736b2734b39eb202dc3"
      },
      {
        "sha": "3b1279fdb269727f4fd964df0c238401467930ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b1279fdb269727f4fd964df0c238401467930ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b1279fdb269727f4fd964df0c238401467930ea"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 16,
      "deletions": 20
    },
    "files": [
      {
        "sha": "605031eb43fc8cfada3f7a31d53d174d04c87d62",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "patch": "@@ -31,7 +31,7 @@ LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n-LIBUNIVALUE=univalue/lib/libunivalue.la\n+LIBUNIVALUE=univalue/libunivalue.la\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)"
      },
      {
        "sha": "a7a2ca91975b11155b9877c745b06aa759197fbe",
        "filename": "src/univalue/.gitignore",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.gitignore?ref=97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "patch": "@@ -19,4 +19,13 @@ test-driver\n libtool\n ltmain.sh\n \n+*.a\n+*.la\n+*.lo\n+*.logs\n *.o\n+*.pc\n+*.trs\n+\n+.dirstamp\n+.libs"
      },
      {
        "sha": "df9e66229c4069c164cc47642a1752b31f16ed7b",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "patch": "@@ -5,20 +5,20 @@ ACLOCAL_AMFLAGS = -I build-aux/m4\n include_HEADERS = include/univalue.h\n noinst_HEADERS = lib/univalue_escapes.h\n \n-lib_LTLIBRARIES = lib/libunivalue.la\n+lib_LTLIBRARIES = libunivalue.la\n \n pkgconfigdir = $(libdir)/pkgconfig\n pkgconfig_DATA = pc/libunivalue.pc\n \n-lib_libunivalue_la_SOURCES = \\\n+libunivalue_la_SOURCES = \\\n \tlib/univalue.cpp \\\n \tlib/univalue_read.cpp \\\n \tlib/univalue_write.cpp\n \n-lib_libunivalue_la_LDFLAGS = \\\n+libunivalue_la_LDFLAGS = \\\n \t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n \t-no-undefined\n-lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n \n TESTS = test/unitester\n \n@@ -38,7 +38,7 @@ noinst_PROGRAMS = $(TESTS)\n TEST_DATA_DIR=test\n \n test_unitester_SOURCES = test/unitester.cpp\n-test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_LDADD = libunivalue.la\n test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n "
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "src/univalue/build-aux/m4/.empty",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd57f344a591edb1c8b35736b2734b39eb202dc3/src/univalue/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd57f344a591edb1c8b35736b2734b39eb202dc3/src/univalue/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/.empty?ref=cd57f344a591edb1c8b35736b2734b39eb202dc3"
      },
      {
        "sha": "f063686524ea4b501f819e52865dff64f3ec5324",
        "filename": "src/univalue/build-aux/m4/.gitignore",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/build-aux/m4/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/build-aux/m4/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/.gitignore?ref=97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "patch": "@@ -0,0 +1 @@\n+/*.m4"
      },
      {
        "sha": "ee7fc2851cd511579ee60c7a9fa916f3897c11e2",
        "filename": "src/univalue/lib/.gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/.gitignore?ref=97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "patch": "@@ -1,10 +1,2 @@\n-\n-libunivalue-uninstalled.pc\n-libunivalue.pc\n-libunivalue.a\n gen\n-\n .libs\n-*.lo\n-*.la\n-"
      },
      {
        "sha": "4afa094b106d601c690c13d1f88f03a96921fbfd",
        "filename": "src/univalue/test/.gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97bee37d4c35c3ee53b54b04f5e665250773b20c/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "patch": "@@ -1,7 +1 @@\n-\n unitester\n-\n-*.log\n-*.trs\n-\n-.libs"
      }
    ]
  },
  {
    "sha": "feea3057df472ad924a0bedff5bbf5af9f5f57bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWVhMzA1N2RmNDcyYWQ5MjRhMGJlZGZmNWJiZjVhZjlmNWY1N2Jm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:56:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T08:57:03Z"
      },
      "message": "Merge pull request #6812\n\n3a4a458 Update bluematt-key, the old one is long-since revoked (Matt Corallo)",
      "tree": {
        "sha": "476cb2fd8625993f7e7bf7c6311a2e286300ec00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/476cb2fd8625993f7e7bf7c6311a2e286300ec00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/feea3057df472ad924a0bedff5bbf5af9f5f57bf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHMdfAAoJEHSBCwEjRsmmEmYIAMaYo51rt+5YsdGbh8tSOfin\nukUpQ4zjRnnLb8BsyrRRkaafAcWpyu760hzrDcsEVSDUkiY+VeC6uV0Of59WCamh\n+U+aS5Cq317TOqwIWoohqQCcXZebatSNYqsjaXLuP/TEB2MsUoxp+6DuH+3tU9/g\nmV6nQqGOn+25L1h5ZJd+SswrEYH9NFsV0AaLO90x0Ka1c1C8+I+NrEaacYk5PHDA\n7rk9SgFG5d6EIMCI14GkrU/xvVIqDDHAzSPT+Ybb3uC4gZbOQmSqoF77xrusvxBK\nSGu3Jt2LFgcB3FkMNtkT+LR/X3HtLQR9xvoOtYiCAxqoPLt8OWY6G0r9erYq/OU=\n=LS+t\n-----END PGP SIGNATURE-----",
        "payload": "tree 476cb2fd8625993f7e7bf7c6311a2e286300ec00\nparent 97bee37d4c35c3ee53b54b04f5e665250773b20c\nparent 3a4a458fe59b36ed697ca8a0a304ba68941a4373\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444726616 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444726623 +0200\n\nMerge pull request #6812\n\n3a4a458 Update bluematt-key, the old one is long-since revoked (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/feea3057df472ad924a0bedff5bbf5af9f5f57bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/feea3057df472ad924a0bedff5bbf5af9f5f57bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/feea3057df472ad924a0bedff5bbf5af9f5f57bf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97bee37d4c35c3ee53b54b04f5e665250773b20c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97bee37d4c35c3ee53b54b04f5e665250773b20c"
      },
      {
        "sha": "3a4a458fe59b36ed697ca8a0a304ba68941a4373",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a4a458fe59b36ed697ca8a0a304ba68941a4373",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a4a458fe59b36ed697ca8a0a304ba68941a4373"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2389d4657fb7f5f225f5d76e08841fd6e21d4be9",
        "filename": "contrib/gitian-downloader/bluematt-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/feea3057df472ad924a0bedff5bbf5af9f5f57bf/contrib/gitian-downloader/bluematt-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/feea3057df472ad924a0bedff5bbf5af9f5f57bf/contrib/gitian-downloader/bluematt-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/bluematt-key.pgp?ref=feea3057df472ad924a0bedff5bbf5af9f5f57bf"
      }
    ]
  },
  {
    "sha": "01f74999e3dff1b0c76c334ce3935e3680d2927d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWY3NDk5OWUzZGZmMWIwYzc2YzMzNGNlMzkzNWUzNjgwZDI5Mjdk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T09:35:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T09:35:24Z"
      },
      "message": "Merge pull request #6798\n\n700f52e Clarification of unit test build instructions. (Eric Lombrozo)",
      "tree": {
        "sha": "e399975434ae0b566fd57e34ce1c4596b19a21ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e399975434ae0b566fd57e34ce1c4596b19a21ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01f74999e3dff1b0c76c334ce3935e3680d2927d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHNBcAAoJEHSBCwEjRsmmwXoH/0HE76hap0+s5IxnptfCvOCo\nDjoFThR+mgnvzAt8jeJDlpjO1Jvp0F+etPHLMx0pRf9OGmwXjhow0UYt+FdIvktA\n8yMKg0S4+XWAUJdJSaZgNW/ciPRWY75d6yL12MDLClDh322Uhc8jDQVYDFOrFkMB\nBSvEzaoiyCDky65IGTeckiD5SVnuSL5iJtiMhw6B+ICFnbt2OPUL1Xx9y4IAEZpU\n1HiElMYyYtKUmhgk2h1pwXk2OqFhqeBQVejUX1qpmpgFWzX/RZdDpmOrfCSPLxhE\nFrKQj1QfvV7+pJaK4yJgoQzaMBIXsqyJ8dZGq7kNnfy9Oz2nNqq9q5kpUa0Gb4M=\n=wCZY\n-----END PGP SIGNATURE-----",
        "payload": "tree e399975434ae0b566fd57e34ce1c4596b19a21ca\nparent feea3057df472ad924a0bedff5bbf5af9f5f57bf\nparent 700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444728911 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444728924 +0200\n\nMerge pull request #6798\n\n700f52e Clarification of unit test build instructions. (Eric Lombrozo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f74999e3dff1b0c76c334ce3935e3680d2927d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01f74999e3dff1b0c76c334ce3935e3680d2927d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f74999e3dff1b0c76c334ce3935e3680d2927d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "feea3057df472ad924a0bedff5bbf5af9f5f57bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/feea3057df472ad924a0bedff5bbf5af9f5f57bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/feea3057df472ad924a0bedff5bbf5af9f5f57bf"
      },
      {
        "sha": "700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/700f52e0f6bc4eb5d065dc8f1e44ffcbd5dab0e0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b2d6be14f14fd019309beeb40deb1adfd80aa80c",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f74999e3dff1b0c76c334ce3935e3680d2927d/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f74999e3dff1b0c76c334ce3935e3680d2927d/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=01f74999e3dff1b0c76c334ce3935e3680d2927d",
        "patch": "@@ -16,6 +16,8 @@ their tests in a test suite called \"<source_filename>_tests\".  For an\n examples of this pattern, examine uint160_tests.cpp and\n uint256_tests.cpp.\n \n+Add the source files to /src/Makefile.test.include to add them to the build.\n+\n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n [http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/)."
      }
    ]
  },
  {
    "sha": "16faccb736ab23aec0a325133b4e0caf91dd8d52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmZhY2NiNzM2YWIyM2FlYzBhMzI1MTMzYjRlMGNhZjkxZGQ4ZDUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T09:50:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T09:50:26Z"
      },
      "message": "Merge pull request #6791\n\nd0321a4 [doc] trivial: fix markdown syntax in qa/rpc-tests/README.md (MarcoFalke)\n60a8b70 [doc] trivial: developer-notes.md covers more than just coding standards (MarcoFalke)\n3507992 [trivial] Make optimize-pngs.py also cover share/pixmaps (MarcoFalke)\n8a320c7 [trivial] Remove obsolete share/qt/make_windows_icon.sh (MarcoFalke)",
      "tree": {
        "sha": "c5de0f087cf918e3dc69c74d196bf6d6af132190",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5de0f087cf918e3dc69c74d196bf6d6af132190"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16faccb736ab23aec0a325133b4e0caf91dd8d52",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHNPjAAoJEHSBCwEjRsmmuCAH/jlgzMUYkXV7ZDBCUKygvGnK\nlXf9zkApPIX0lWP1w5NQx406IfEN3x71M2sR+e6zHpDeyx4r4+ZPwndshhBZ4Ubg\nKBpQZ7IWYqQVGmTUKIca/8AHeleyI4HAfR3B8itnkHxCRZcc2wbOArqLTeBnTO2N\nxyiiePp4vexkUvi1LxYfa+i3NUTszRlOjdCYbcrsMdjsAdyNoB9b/mlk9SHStyH1\nryyG8ehrxRESZsEATM8tLTFX6KyJSpn/4PW8GKItKZIL0qv7I7zpbPGv6lf7EPCK\n+ksx9ZVpvLtjlx7v+W9exeIqpd9EF+4DSMIewIuQQXiJjSEneaHVK5MrqWLnv5A=\n=ZrFR\n-----END PGP SIGNATURE-----",
        "payload": "tree c5de0f087cf918e3dc69c74d196bf6d6af132190\nparent 01f74999e3dff1b0c76c334ce3935e3680d2927d\nparent d0321a4cfdd660b8335b5d7f14556fb2ec60af22\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444729825 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444729826 +0200\n\nMerge pull request #6791\n\nd0321a4 [doc] trivial: fix markdown syntax in qa/rpc-tests/README.md (MarcoFalke)\n60a8b70 [doc] trivial: developer-notes.md covers more than just coding standards (MarcoFalke)\n3507992 [trivial] Make optimize-pngs.py also cover share/pixmaps (MarcoFalke)\n8a320c7 [trivial] Remove obsolete share/qt/make_windows_icon.sh (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16faccb736ab23aec0a325133b4e0caf91dd8d52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16faccb736ab23aec0a325133b4e0caf91dd8d52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16faccb736ab23aec0a325133b4e0caf91dd8d52/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01f74999e3dff1b0c76c334ce3935e3680d2927d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01f74999e3dff1b0c76c334ce3935e3680d2927d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01f74999e3dff1b0c76c334ce3935e3680d2927d"
      },
      {
        "sha": "d0321a4cfdd660b8335b5d7f14556fb2ec60af22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0321a4cfdd660b8335b5d7f14556fb2ec60af22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0321a4cfdd660b8335b5d7f14556fb2ec60af22"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 7,
      "deletions": 16
    },
    "files": [
      {
        "sha": "799e0cc7d0fb15b6e9338c711d5ca4d813a06a32",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16faccb736ab23aec0a325133b4e0caf91dd8d52/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16faccb736ab23aec0a325133b4e0caf91dd8d52/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=16faccb736ab23aec0a325133b4e0caf91dd8d52",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python\n '''\n-Run this scrip every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n+Run this script every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n #pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n '''\n import os\n@@ -18,12 +18,12 @@ def content_hash(filename):\n     '''Return hash of RGBA contents of image'''\n     i = Image.open(filename)\n     i = i.convert('RGBA')\n-    data = i.tostring()\n+    data = i.tobytes()\n     return hashlib.sha256(data).hexdigest()\n \n pngcrush = 'pngcrush'\n git = 'git'\n-folders = [\"src/qt/res/movies\", \"src/qt/res/icons\"]\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"share/pixmaps\"]\n basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel']).rstrip('\\n')\n totalSaveBytes = 0\n noHashChange = True"
      },
      {
        "sha": "a649b3af4d37b5de82c9be6cf85e5e89eac28cd8",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16faccb736ab23aec0a325133b4e0caf91dd8d52/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16faccb736ab23aec0a325133b4e0caf91dd8d52/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=16faccb736ab23aec0a325133b4e0caf91dd8d52",
        "patch": "@@ -1,5 +1,5 @@\n-Coding Standards\n-================\n+Developer Notes\n+===============\n \n Various coding styles have been used during the history of the codebase,\n and the result is not very consistent. However, we're now trying to converge to"
      },
      {
        "sha": "d2db00362fa189032d5a8da2c0d9ced5a53148a9",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16faccb736ab23aec0a325133b4e0caf91dd8d52/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16faccb736ab23aec0a325133b4e0caf91dd8d52/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=16faccb736ab23aec0a325133b4e0caf91dd8d52",
        "patch": "@@ -37,11 +37,11 @@ Helper functions for creating blocks and transactions.\n Notes\n =====\n \n-You can run any single test by calling qa/pull-tester/rpc-tests.py <testname>\n+You can run any single test by calling `qa/pull-tester/rpc-tests.py <testname>`.\n \n Or you can run any combination of tests by calling `qa/pull-tester/rpc-tests.py <testname1> <testname2> <testname3> ...`\n \n-Run the regression test suite with `qa/pull-tester/rpc-tests.py'\n+Run the regression test suite with `qa/pull-tester/rpc-tests.py`\n \n Run all possible tests with `qa/pull-tester/rpc-tests.py -extended`\n "
      },
      {
        "sha": "bf607b1c62384eba8ddbe4acf9f930d1b0f03ae3",
        "filename": "share/qt/make_windows_icon.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01f74999e3dff1b0c76c334ce3935e3680d2927d/share/qt/make_windows_icon.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01f74999e3dff1b0c76c334ce3935e3680d2927d/share/qt/make_windows_icon.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/make_windows_icon.sh?ref=01f74999e3dff1b0c76c334ce3935e3680d2927d",
        "patch": "@@ -1,9 +0,0 @@\n-#!/bin/bash\n-# create multiresolution windows icon\n-ICON_SRC=../../src/qt/res/icons/bitcoin.png\n-ICON_DST=../../src/qt/res/icons/bitcoin.ico\n-convert ${ICON_SRC} -resize 16x16 bitcoin-16.png\n-convert ${ICON_SRC} -resize 32x32 bitcoin-32.png\n-convert ${ICON_SRC} -resize 48x48 bitcoin-48.png\n-convert bitcoin-16.png bitcoin-32.png bitcoin-48.png ${ICON_DST}\n-"
      }
    ]
  },
  {
    "sha": "9caaf6ed22d052bae2b9552a7d2df529166664e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2FhZjZlZDIyZDA1MmJhZTJiOTU1MmE3ZDJkZjUyOTE2NjY2NGU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T10:22:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T10:23:45Z"
      },
      "message": "Merge pull request #6777\n\ndcd8e27 Refer to obfuscate_key via pointer in peripheral CLevelDB classes (James O'Beirne)\n1488506 Add tests for gettxoutsetinfo, CLevelDBBatch, CLevelDBIterator (James O'Beirne)\n0fdf8c8 Handle obfuscation in CLevelDBIterator (James O'Beirne)\n3499ce1 Encapsulate CLevelDB iterators cleanly (Pieter Wuille)",
      "tree": {
        "sha": "1bdc5d1979cc745f573ef4e6ad375ee7bd8473ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bdc5d1979cc745f573ef4e6ad375ee7bd8473ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9caaf6ed22d052bae2b9552a7d2df529166664e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHNuxAAoJEHSBCwEjRsmmiZcH/RK+Y0m5u9aA/3H8vpZTDexz\nqgFXiTKm2k/7gbi38cLT/Fun+2rjgOJ/xMvPVTJbQhPtx5jJBbYLf+k1kpzCmHJw\neXq/cSZlyKREcd5y5i8fwvAVoNHBPT/wHSi9QcrHTP69BB517x00AsTaOiX+0kPd\nQ/RflTGbTmo+Ley4RBvQEEIrXXXEVVkzOERhEuUM3pVLyw9BFRCWnS2PsVE+Rw2Y\n1A86Um5LCYR4zsJTv0W/cBBHYG9gTa8RqP4dm+yBQKxvu7kjCPwD9ETZnDv9+Tdx\nI8SDTCBzwrPS9ekSVVA2U/WEEViuPuEIQa76Qy2oWAT3UFbuWiWfzGxGlY63qQ0=\n=Jztm\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bdc5d1979cc745f573ef4e6ad375ee7bd8473ac\nparent 16faccb736ab23aec0a325133b4e0caf91dd8d52\nparent dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444731760 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444731825 +0200\n\nMerge pull request #6777\n\ndcd8e27 Refer to obfuscate_key via pointer in peripheral CLevelDB classes (James O'Beirne)\n1488506 Add tests for gettxoutsetinfo, CLevelDBBatch, CLevelDBIterator (James O'Beirne)\n0fdf8c8 Handle obfuscation in CLevelDBIterator (James O'Beirne)\n3499ce1 Encapsulate CLevelDB iterators cleanly (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9caaf6ed22d052bae2b9552a7d2df529166664e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9caaf6ed22d052bae2b9552a7d2df529166664e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9caaf6ed22d052bae2b9552a7d2df529166664e8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16faccb736ab23aec0a325133b4e0caf91dd8d52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16faccb736ab23aec0a325133b4e0caf91dd8d52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16faccb736ab23aec0a325133b4e0caf91dd8d52"
      },
      {
        "sha": "dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcd8e27c65de0d2cb972588a6e811ca7ccd1b3bd"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 245,
      "deletions": 61
    },
    "files": [
      {
        "sha": "db97767272b406374792299467f5136c3edf0e4a",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caaf6ed22d052bae2b9552a7d2df529166664e8/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caaf6ed22d052bae2b9552a7d2df529166664e8/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "patch": "@@ -38,7 +38,7 @@\n buildDir = BUILDDIR\n os.environ[\"BITCOIND\"] = buildDir + '/src/bitcoind' + EXEEXT\n os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n- \n+\n #Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n     print \"Win tests currently disabled.  Use -win option to enable\"\n@@ -67,6 +67,7 @@\n     'reindex.py',\n     'decodescript.py',\n     'p2p-fullblocktest.py',\n+    'blockchain.py',\n ]\n testScriptsExt = [\n     'bipdersig-p2p.py',\n@@ -98,20 +99,20 @@\n     rpcTestDir = buildDir + '/qa/rpc-tests/'\n     #Run Tests\n     for i in range(len(testScripts)):\n-       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts \n+       if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts\n            or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-            print  \"Running testscript \" + testScripts[i] + \"...\" \n-            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+            print  \"Running testscript \" + testScripts[i] + \"...\"\n+            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n \t    #exit if help is called so we print just one set of instructions\n             p = re.compile(\" -h| --help\")\n             if p.match(passOn):\n                 sys.exit(0)\n \n     #Run Extended Tests\n     for i in range(len(testScriptsExt)):\n-        if ('-extended' in opts or testScriptsExt[i] in opts \n+        if ('-extended' in opts or testScriptsExt[i] in opts\n            or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n-            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\" \n-            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True) \n+            print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\"\n+            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n else:\n     print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "a5c98b777e0d42f900253dd68c614037f592b8c4",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caaf6ed22d052bae2b9552a7d2df529166664e8/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caaf6ed22d052bae2b9552a7d2df529166664e8/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test RPC calls related to blockchain state.\n+#\n+\n+import decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    initialize_chain,\n+    assert_equal,\n+    start_nodes,\n+    connect_nodes_bi,\n+)\n+\n+class BlockchainTest(BitcoinTestFramework):\n+    \"\"\"\n+    Test blockchain-related RPC calls:\n+\n+        - gettxoutsetinfo\n+\n+    \"\"\"\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \" + self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        node = self.nodes[0]\n+        res = node.gettxoutsetinfo()\n+\n+        assert_equal(res[u'total_amount'], decimal.Decimal('8725.00000000'))\n+        assert_equal(res[u'transactions'], 200)\n+        assert_equal(res[u'height'], 200)\n+        assert_equal(res[u'txouts'], 200)\n+        assert_equal(res[u'bytes_serialized'], 13000),\n+        assert_equal(len(res[u'bestblock']), 64)\n+        assert_equal(len(res[u'hash_serialized']), 64)\n+\n+\n+if __name__ == '__main__':\n+    BlockchainTest().main()"
      },
      {
        "sha": "32c9345be5c5e10c92c5183a91ef403a60877d19",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "patch": "@@ -131,7 +131,7 @@ std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n \n bool CLevelDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<leveldb::Iterator> it(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n@@ -145,3 +145,10 @@ std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n { \n     return HexStr(obfuscate_key); \n }\n+\n+CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n+bool CLevelDBIterator::Valid() { return piter->Valid(); }\n+void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n+void CLevelDBIterator::Next() { piter->Next(); }\n+void CLevelDBIterator::Prev() { piter->Prev(); }"
      },
      {
        "sha": "60101e18cc03e67aba6a4058fea0c8533c713902",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 73,
        "deletions": 9,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "patch": "@@ -32,13 +32,13 @@ class CLevelDBBatch\n \n private:\n     leveldb::WriteBatch batch;\n-    const std::vector<unsigned char> obfuscate_key;\n+    const std::vector<unsigned char> *obfuscate_key;\n \n public:\n     /**\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBBatch(const std::vector<unsigned char>& obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CLevelDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -51,7 +51,7 @@ class CLevelDBBatch\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(ssValue.GetSerializeSize(value));\n         ssValue << value;\n-        ssValue.Xor(obfuscate_key);\n+        ssValue.Xor(*obfuscate_key);\n         leveldb::Slice slValue(&ssValue[0], ssValue.size());\n \n         batch.Put(slKey, slValue);\n@@ -68,7 +68,72 @@ class CLevelDBBatch\n         batch.Delete(slKey);\n     }\n };\n+ \n+class CLevelDBIterator\n+{\n+private:\n+    leveldb::Iterator *piter;\n+    const std::vector<unsigned char> *obfuscate_key;\n+\n+public:\n+\n+    /**\n+     * @param[in] piterIn          The original leveldb iterator.\n+     * @param[in] obfuscate_key    If passed, XOR data with this key.\n+     */\n+    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n+        piter(piterIn), obfuscate_key(obfuscate_key) { };\n+    ~CLevelDBIterator();\n+\n+    bool Valid();\n \n+    void SeekToFirst();\n+    void SeekToLast();\n+\n+    template<typename K> void Seek(const K& key) {\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(ssKey.GetSerializeSize(key));\n+        ssKey << key;\n+        leveldb::Slice slKey(&ssKey[0], ssKey.size());\n+        piter->Seek(slKey);\n+    }\n+\n+    void Next();\n+    void Prev();\n+\n+    template<typename K> bool GetKey(K& key) {\n+        leveldb::Slice slKey = piter->key();\n+        try {\n+            CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n+            ssKey >> key;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetKeySize() {\n+        return piter->key().size();\n+    }\n+\n+    template<typename V> bool GetValue(V& value) {\n+        leveldb::Slice slValue = piter->value();\n+        try {\n+            CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n+            ssValue.Xor(*obfuscate_key);\n+            ssValue >> value;\n+        } catch(std::exception &e) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    unsigned int GetValueSize() {\n+        return piter->value().size();\n+    }\n+\n+};\n+ \n class CLevelDBWrapper\n {\n private:\n@@ -145,7 +210,7 @@ class CLevelDBWrapper\n     template <typename K, typename V>\n     bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n@@ -172,7 +237,7 @@ class CLevelDBWrapper\n     template <typename K>\n     bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n@@ -187,14 +252,13 @@ class CLevelDBWrapper\n \n     bool Sync() throw(leveldb_error)\n     {\n-        CLevelDBBatch batch(obfuscate_key);\n+        CLevelDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n-    // not exactly clean encapsulation, but it's easiest for now\n-    leveldb::Iterator* NewIterator()\n+    CLevelDBIterator *NewIterator() \n     {\n-        return pdb->NewIterator(iteroptions);\n+        return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }\n \n     /**"
      },
      {
        "sha": "606313b00453ff7e3b7c6e5f2f01d4fe366dcff6",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 1,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "patch": "@@ -46,7 +46,86 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper)\n         BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n     }\n }\n-                       \n+\n+// Test batch operations\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        char key = 'i';\n+        uint256 in = GetRandHash();\n+        char key2 = 'j';\n+        uint256 in2 = GetRandHash();\n+        char key3 = 'k';\n+        uint256 in3 = GetRandHash();\n+\n+        uint256 res;\n+        CLevelDBBatch batch(&dbw.GetObfuscateKey());\n+\n+        batch.Write(key, in);\n+        batch.Write(key2, in2);\n+        batch.Write(key3, in3);\n+\n+        // Remove key3 before it's even been written\n+        batch.Erase(key3);\n+\n+        dbw.WriteBatch(batch);\n+\n+        BOOST_CHECK(dbw.Read(key, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in.ToString());\n+        BOOST_CHECK(dbw.Read(key2, res));\n+        BOOST_CHECK_EQUAL(res.ToString(), in2.ToString());\n+\n+        // key3 never should've been written\n+        BOOST_CHECK(dbw.Read(key3, res) == false);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n+{\n+    // Perform tests both obfuscated and non-obfuscated.\n+    for (int i = 0; i < 2; i++) {\n+        bool obfuscate = (bool)i;\n+        path ph = temp_directory_path() / unique_path();\n+        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+\n+        // The two keys are intentionally chosen for ordering\n+        char key = 'j';\n+        uint256 in = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key, in));\n+        char key2 = 'k';\n+        uint256 in2 = GetRandHash();\n+        BOOST_CHECK(dbw.Write(key2, in2));\n+\n+        boost::scoped_ptr<CLevelDBIterator> it(const_cast<CLevelDBWrapper*>(&dbw)->NewIterator());\n+\n+        // Be sure to seek past the obfuscation key (if it exists)\n+        it->Seek(key);\n+\n+        char key_res;\n+        uint256 val_res;\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in.ToString());\n+\n+        it->Next();\n+\n+        it->GetKey(key_res);\n+        it->GetValue(val_res);\n+        BOOST_CHECK_EQUAL(key_res, key2);\n+        BOOST_CHECK_EQUAL(val_res.ToString(), in2.ToString());\n+\n+        it->Next();\n+        BOOST_CHECK_EQUAL(it->Valid(), false);\n+    }\n+}\n+\n // Test that we do not obfuscation if there is existing data.\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {"
      },
      {
        "sha": "5723c92440196a43447975e8537605428c4be7ca",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 43,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9caaf6ed22d052bae2b9552a7d2df529166664e8/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "patch": "@@ -49,7 +49,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch(db.GetObfuscateKey());\n+    CLevelDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -98,31 +98,19 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n-    pcursor->SeekToFirst();\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    pcursor->Seek('c');\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n     CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_COINS) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CCoins coins;\n-                ssValue >> coins;\n-                uint256 txhash;\n-                ssKey >> txhash;\n-                ss << txhash;\n-                ss << VARINT(coins.nVersion);\n-                ss << (coins.fCoinBase ? 'c' : 'n');\n-                ss << VARINT(coins.nHeight);\n+        std::pair<char, uint256> key;\n+        CCoins coins;\n+        if (pcursor->GetKey(key) && key.first == 'c') {\n+            if (pcursor->GetValue(coins)) {\n                 stats.nTransactions++;\n                 for (unsigned int i=0; i<coins.vout.size(); i++) {\n                     const CTxOut &out = coins.vout[i];\n@@ -133,13 +121,15 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + slValue.size();\n+                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n                 ss << VARINT(0);\n+            } else {\n+                return error(\"CCoinsViewDB::GetStats() : unable to read value\");\n             }\n-            pcursor->Next();\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n+        pcursor->Next();\n     }\n     {\n         LOCK(cs_main);\n@@ -151,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -167,7 +157,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch(GetObfuscateKey());\n+    CLevelDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n@@ -187,26 +177,17 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    boost::scoped_ptr<leveldb::Iterator> pcursor(NewIterator());\n+    boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n \n-    CDataStream ssKeySet(SER_DISK, CLIENT_VERSION);\n-    ssKeySet << make_pair(DB_BLOCK_INDEX, uint256());\n-    pcursor->Seek(ssKeySet.str());\n+    pcursor->Seek(make_pair('b', uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n-        try {\n-            leveldb::Slice slKey = pcursor->key();\n-            CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n-            char chType;\n-            ssKey >> chType;\n-            if (chType == DB_BLOCK_INDEX) {\n-                leveldb::Slice slValue = pcursor->value();\n-                CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n-                CDiskBlockIndex diskindex;\n-                ssValue >> diskindex;\n-\n+        std::pair<char, uint256> key;\n+        if (pcursor->GetKey(key) && key.first == 'b') {\n+            CDiskBlockIndex diskindex;\n+            if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object\n                 CBlockIndex* pindexNew = InsertBlockIndex(diskindex.GetBlockHash());\n                 pindexNew->pprev          = InsertBlockIndex(diskindex.hashPrev);\n@@ -227,10 +208,10 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n \n                 pcursor->Next();\n             } else {\n-                break; // if shutdown requested or finished loading block index\n+                return error(\"LoadBlockIndex() : failed to read value\");\n             }\n-        } catch (const std::exception& e) {\n-            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n+        } else {\n+            break;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWQ2MjNkYTNlYTRjNzM2MDVkMjc3MDNiYzk2NmVkODEwOWQyMzFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T10:31:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-13T10:31:50Z"
      },
      "message": "Merge pull request #6810\n\n7d325b9 zmq: point API link to 4.0 as that is what we are conforming to [Trivial] (Johnathan Corgan)",
      "tree": {
        "sha": "116be99543ebe8e9b1db44ebea2c021e05aa022e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/116be99543ebe8e9b1db44ebea2c021e05aa022e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWHN2WAAoJEHSBCwEjRsmm4nUH/0QcaUvSmGpzFSnQzHyzVWXv\nWvC9sn6H0BRhJ6bARHXhAKX1XhQBr2NLjajdeASY9RdYYabqjaxqCa/4gG6e1ryM\n+t2J9RQZpRmVaHy5DsWrLTuvFJLzkOnM6zyI1y0j7ukLfViuAi3hTi9tYYRJoTMe\nuImy0DY73+bKXQ67XmChYPHmnlRzB6A2wBVuw1llQZkD7XT9YL8/oRBN0ZFlI6Cg\nWsF/Xm7Pj/7ZMDvjcQ004KRv+P/x2mM+K/MMXAZy+V66N4Ve7ypgOYc068LBC5Ei\nMKzGOAulNgIdLNwejfI/ULZaM7qDxkw5oyIPmgTTIp3UL7WLuHeJ7VGdE7YAlP8=\n=Ys45\n-----END PGP SIGNATURE-----",
        "payload": "tree 116be99543ebe8e9b1db44ebea2c021e05aa022e\nparent 9caaf6ed22d052bae2b9552a7d2df529166664e8\nparent 7d325b9de7d6bb2a38ece738436e615588696010\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444732305 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444732310 +0200\n\nMerge pull request #6810\n\n7d325b9 zmq: point API link to 4.0 as that is what we are conforming to [Trivial] (Johnathan Corgan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9caaf6ed22d052bae2b9552a7d2df529166664e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9caaf6ed22d052bae2b9552a7d2df529166664e8"
      },
      {
        "sha": "7d325b9de7d6bb2a38ece738436e615588696010",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d325b9de7d6bb2a38ece738436e615588696010",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d325b9de7d6bb2a38ece738436e615588696010"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "53e557e3db191795535d779861afd8e25746179c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1d623da3ea4c73605d27703bc966ed8109d231e/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1d623da3ea4c73605d27703bc966ed8109d231e/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=a1d623da3ea4c73605d27703bc966ed8109d231e",
        "patch": "@@ -78,7 +78,7 @@ bytes).\n These options can also be provided in bitcoin.conf.\n \n ZeroMQ endpoint specifiers for TCP (and others) are documented in the\n-[ZeroMQ API](http://api.zeromq.org).\n+[ZeroMQ API](http://api.zeromq.org/4-0:_start).\n \n Client side, then, the ZeroMQ subscriber socket must have the\n ZMQ_SUBSCRIBE option set to one or either of these prefixes (for"
      }
    ]
  },
  {
    "sha": "60af755e56dc08f54c993ce0c044f3ff203b3f59",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGFmNzU1ZTU2ZGMwOGY1NGM5OTNjZTBjMDQ0ZjNmZjIwM2IzZjU5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-10-13T17:40:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-10-13T17:40:49Z"
      },
      "message": "build: univalue subdir build fixups\n\n- Force a rebuild if the headers change\n- Only build the lib target\n- Clean univalue on 'make clean'",
      "tree": {
        "sha": "d128b53877ffdd8c3543526268c3df294ace8d43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d128b53877ffdd8c3543526268c3df294ace8d43"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60af755e56dc08f54c993ce0c044f3ff203b3f59",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60af755e56dc08f54c993ce0c044f3ff203b3f59",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60af755e56dc08f54c993ce0c044f3ff203b3f59",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60af755e56dc08f54c993ce0c044f3ff203b3f59/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0a16a863eb5e647b7f11a8f419bbd675fd27640e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60af755e56dc08f54c993ce0c044f3ff203b3f59/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60af755e56dc08f54c993ce0c044f3ff203b3f59/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=60af755e56dc08f54c993ce0c044f3ff203b3f59",
        "patch": "@@ -36,8 +36,8 @@ LIBUNIVALUE=univalue/libunivalue.la\n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n   \n-$(LIBUNIVALUE): $(wildcard univalue/lib/*)\n-\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue/\n+$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n@@ -421,6 +421,7 @@ EXTRA_DIST = leveldb\n clean-local:\n \t-$(MAKE) -C leveldb clean\n \t-$(MAKE) -C secp256k1 clean\n+\t-$(MAKE) -C univalue clean\n \trm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n "
      }
    ]
  },
  {
    "sha": "f8f2aceadd5f406f8bc6f6029b032d00828e6256",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGYyYWNlYWRkNWY0MDZmOGJjNmY2MDI5YjAzMmQwMDgyOGU2MjU2",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-10-13T18:25:57Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-10-13T18:25:57Z"
      },
      "message": "trivial: use constants for db keys\n\nReplace literal occurances of the key \"prefixes\" 'c' and 'b' in txdb.cpp\nby the respective constants.",
      "tree": {
        "sha": "2268d2440e34c57c9cdf75edf1e42e651f1bab6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2268d2440e34c57c9cdf75edf1e42e651f1bab6e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8f2aceadd5f406f8bc6f6029b032d00828e6256",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8f2aceadd5f406f8bc6f6029b032d00828e6256",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8f2aceadd5f406f8bc6f6029b032d00828e6256",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8f2aceadd5f406f8bc6f6029b032d00828e6256/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a441aea688325b896f80039bf2839d9478a634fd",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8f2aceadd5f406f8bc6f6029b032d00828e6256/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8f2aceadd5f406f8bc6f6029b032d00828e6256/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=f8f2aceadd5f406f8bc6f6029b032d00828e6256",
        "patch": "@@ -99,7 +99,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n     boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n-    pcursor->Seek('c');\n+    pcursor->Seek(DB_COINS);\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n@@ -109,7 +109,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n         boost::this_thread::interruption_point();\n         std::pair<char, uint256> key;\n         CCoins coins;\n-        if (pcursor->GetKey(key) && key.first == 'c') {\n+        if (pcursor->GetKey(key) && key.first == DB_COINS) {\n             if (pcursor->GetValue(coins)) {\n                 stats.nTransactions++;\n                 for (unsigned int i=0; i<coins.vout.size(); i++) {\n@@ -179,13 +179,13 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n     boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair('b', uint256()));\n+    pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         std::pair<char, uint256> key;\n-        if (pcursor->GetKey(key) && key.first == 'b') {\n+        if (pcursor->GetKey(key) && key.first == DB_BLOCK_INDEX) {\n             CDiskBlockIndex diskindex;\n             if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object"
      }
    ]
  },
  {
    "sha": "a0d5e0d2f488a6249e01d00cbf864ca0e81894e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGQ1ZTBkMmY0ODhhNjI0OWUwMWQwMGNiZjg2NGNhMGU4MTg5NGUz",
    "commit": {
      "author": {
        "name": "Michael",
        "email": "fanquake@users.noreply.github.com",
        "date": "2015-10-13T11:11:17Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2015-10-13T23:54:29Z"
      },
      "message": "[doc] Cleanup release-process documentation",
      "tree": {
        "sha": "5b79e1a64f0117e047637a990d21cb43d5a47945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b79e1a64f0117e047637a990d21cb43d5a47945"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "a562c98dbe7c88e10c939b710342d2176df9be7b",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=a0d5e0d2f488a6249e01d00cbf864ca0e81894e3",
        "patch": "@@ -1,65 +1,67 @@\n Release Process\n ====================\n \n-* update translations (ping wumpus, Diapolo or tcatm on IRC)\n-* see https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#syncing-with-transifex\n+* Update translations (ping wumpus, Diapolo or tcatm on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#syncing-with-transifex)\n+* Update [bips.md](bips.md) to account for changes since the last release.\n \n * * *\n \n-###first time only or for new builders, check out the source in the following directory hierarchy\n+###First time / New builders \n+Check out the source code in the following directory hierarchy.\n \n \tcd /path/to/your/toplevel/build\n \tgit clone https://github.com/bitcoin/gitian.sigs.git\n+\tgit clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n \tgit clone https://github.com/devrandom/gitian-builder.git\n \tgit clone https://github.com/bitcoin/bitcoin.git\n \n-###for bitcoin maintainers/release engineers, update (commit) version in sources\n+###Bitcoin maintainers/release engineers, update (commit) version in sources\n \n \tpushd ./bitcoin\n \tcontrib/verifysfbinaries/verify.sh\n \tdoc/README*\n \tshare/setup.nsi\n \tsrc/clientversion.h (change CLIENT_VERSION_IS_RELEASE to true)\n \n-###for bitcoin maintainers/release engineers, tag version in git\n+\t# tag version in git\n \n \tgit tag -s v(new version, e.g. 0.8.0)\n \n-###for bitcoin maintainers/release engineers, write release notes. git shortlog helps a lot, for example:\n+\t# write release notes. git shortlog helps a lot, for example:\n \n \tgit shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n \tpopd\n \n * * *\n \n-###update gitian, gitian.sigs, checkout bitcoin version, and perform gitian builds\n+###Setup and perform gitian builds\n \n- To ensure your gitian descriptors are accurate for direct reference for gbuild, below, run the following from a directory containing the bitcoin source:\n+ Setup gitian descriptors:\n   \n \tpushd ./bitcoin\n \texport SIGNER=(your gitian key, ie bluematt, sipa, etc)\n \texport VERSION=(new version, e.g. 0.8.0)\n \tgit checkout v${VERSION}\n \tpopd\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other gitian signatures:\n+  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other gitian signatures.\n \n \tpushd ./gitian.sigs\n \tgit pull\n \tpopd\n \n-  Ensure your gitian-builder sources are up-to-date to take advantage of the new caching features of gitian (`e9741525c` or later is recommended)\n+  Ensure gitian-builder is up-to-date to take advantage of new caching features (`e9741525c` or later is recommended).\n \n \tpushd ./gitian-builder\n \tgit pull\n \n-###fetch and create inputs: (first time, or when dependency versions change)\n+###Fetch and create inputs: (first time, or when dependency versions change)\n  \n \tmkdir -p inputs\n \twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n \twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n \n- Register and download the Apple SDK: (see OSX Readme for details)\n+ Register and download the Apple SDK: see [OSX readme](README_osx.txt) for details.\n  \n  https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n  \n@@ -75,15 +77,11 @@ By default, gitian will fetch source files as needed. To cache them ahead of tim\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n-Clone the detached-sigs repository:\n-\n-\tpopd\n-\tgit clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n-\tpushd ./bitcoin-builder\n-\n-NOTE: Offline builds must use the --url flag to ensure gitian fetches only from local URLs.\n-For example: ./bin/bguild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n-The following gbuild invocations DO NOT DO THIS by default.\n+NOTE: Offline builds must use the --url flag to ensure gitian fetches only from local URLs. For example: \n+```\n+./bin/bguild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+```\n+The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n ###Build (and optionally verify) Bitcoin Core for Linux, Windows, and OS X:\n   \n@@ -126,8 +124,9 @@ Commit your signature to gitian.sigs:\n \tpopd\n \n   Wait for Windows/OSX detached signatures:\n+\n \tOnce the Windows/OSX builds each have 3 matching signatures, they will be signed with their respective release keys.\n-\tDetached signatures will then be committed to the bitcoin-detached-sigs repository, which can be combined with the unsigned apps to create signed binaries.\n+\tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n   Create (and optionally verify) the signed OSX binary:\n \n@@ -176,14 +175,14 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n - Update bitcoin.org version\n \n   - First, check to see if the Bitcoin.org maintainers have prepared a\n-    release: https://github.com/bitcoin/bitcoin.org/labels/Releases\n+    release: https://github.com/bitcoin-dot-org/bitcoin.org/labels/Releases\n \n       - If they have, it will have previously failed their Travis CI\n         checks because the final release files weren't uploaded.\n         Trigger a Travis CI rebuild---if it passes, merge.\n \n   - If they have not prepared a release, follow the Bitcoin.org release\n-    instructions: https://github.com/bitcoin/bitcoin.org#release-notes\n+    instructions: https://github.com/bitcoin-dot-org/bitcoin.org#release-notes\n \n   - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n     as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong"
      }
    ]
  },
  {
    "sha": "53b86d0de5440ffb94f6742e26dd1fd9e11952f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2I4NmQwZGU1NDQwZmZiOTRmNjc0MmUyNmRkMWZkOWUxMTk1MmYy",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-10-14T18:42:49Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-10-14T18:42:49Z"
      },
      "message": "doc: add comment explaining initial header request\n\nAdd a comment that explains why the initial \"getheader\" requests are\nmade starting from the block preceding the currently best one.\n\nThanks to sdaftuar for the explanation!",
      "tree": {
        "sha": "93a5132512a345078c6b017b2aee17b71eb4d379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93a5132512a345078c6b017b2aee17b71eb4d379"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b86d0de5440ffb94f6742e26dd1fd9e11952f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b86d0de5440ffb94f6742e26dd1fd9e11952f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b86d0de5440ffb94f6742e26dd1fd9e11952f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b86d0de5440ffb94f6742e26dd1fd9e11952f2/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e931d40c9462c74a180325f33e4f34ad8b0c4c1c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b86d0de5440ffb94f6742e26dd1fd9e11952f2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b86d0de5440ffb94f6742e26dd1fd9e11952f2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=53b86d0de5440ffb94f6742e26dd1fd9e11952f2",
        "patch": "@@ -4955,7 +4955,16 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n                 nSyncStarted++;\n-                CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n+                const CBlockIndex *pindexStart = pindexBestHeader;\n+                /* If possible, start at the block preceding the currently\n+                   best known header.  This ensures that we always get a\n+                   non-empty list of headers back as long as the peer\n+                   is up-to-date.  With a non-empty response, we can initialise\n+                   the peer's known best block.  This wouldn't be possible\n+                   if we requested starting at pindexBestHeader and\n+                   got back an empty response.  */\n+                if (pindexStart->pprev)\n+                    pindexStart = pindexStart->pprev;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256());\n             }"
      }
    ]
  },
  {
    "sha": "8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWJlMGY1NjU4NGZmNDlhZDI1MDExNWViMWYwYTlhYzhmOWNmMGNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:44:18Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:44:18Z"
      },
      "message": "Undo GetMinFee-requires-extra-call-to-hit-0",
      "tree": {
        "sha": "d73b44f802177659fb65ddb71b1316543adbcde0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d73b44f802177659fb65ddb71b1316543adbcde0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e93640be6c49fa1505ba5c5df8c89210da5a6e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e93640be6c49fa1505ba5c5df8c89210da5a6e4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0cf906a259e7b1fbdeefb655f5ced1fcc37b55ac",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "patch": "@@ -428,7 +428,6 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     // ... but feerate should never drop below 1000\n \n     SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    pool.GetMinFee(1);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n     // ... unless it has gone all the way to 0 (after getting past 1000/2)\n "
      },
      {
        "sha": "9a651049d5dc69aa4eddd055de7046585ee1b502",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "patch": "@@ -879,8 +879,10 @@ CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n         rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n         lastRollingFeeUpdate = time;\n \n-        if (rollingMinimumFeeRate < minReasonableRelayFee.GetFeePerK() / 2)\n+        if (rollingMinimumFeeRate < minReasonableRelayFee.GetFeePerK() / 2) {\n             rollingMinimumFeeRate = 0;\n+            return CFeeRate(0);\n+        }\n     }\n     return std::max(CFeeRate(rollingMinimumFeeRate), minReasonableRelayFee);\n }"
      }
    ]
  },
  {
    "sha": "2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmM1MDE4N2VlNmI2YTNlNGRmYWEyM2JmMjkyZDYzYWQyOTE1OTQ1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:46:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-14T19:46:20Z"
      },
      "message": "Fix comment formatting tabs",
      "tree": {
        "sha": "2d2ecb3c1613d156190db4e859d7835b39864753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d2ecb3c1613d156190db4e859d7835b39864753"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8abe0f56584ff49ad250115eb1f0a9ac8f9cf0ca"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "d44995eefe737b67e7557a125fc47d5aed34590d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
        "patch": "@@ -420,11 +420,11 @@ class CTxMemPool\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n-\t *  for larger-sized transactions.\n-\t *  The minReasonableRelayFee constructor arg is used to bound the time it\n-     *  takes the fee rate to go back down all the way to 0. When the feerate\n-     *  would otherwise be half of this, it is set to 0 instead.\n-\t */\n+      *  for larger-sized transactions.\n+      *  The minReasonableRelayFee constructor arg is used to bound the time it\n+      *  takes the fee rate to go back down all the way to 0. When the feerate\n+      *  would otherwise be half of this, it is set to 0 instead.\n+      */\n     CFeeRate GetMinFee(size_t sizelimit) const;\n \n     /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */"
      }
    ]
  },
  {
    "sha": "d57586f91c6cfe7480ae87b81a041009776a33af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTc1ODZmOTFjNmNmZTc0ODBhZTg3YjgxYTA0MTAwOTc3NmEzM2Fm",
    "commit": {
      "author": {
        "name": "Micha",
        "email": "michagogo@server.fake",
        "date": "2015-10-14T20:05:26Z"
      },
      "committer": {
        "name": "Micha",
        "email": "michagogo@server.fake",
        "date": "2015-10-14T20:14:13Z"
      },
      "message": "Add historical release notes for October 2015 bugfix releases\n\n[skip ci]",
      "tree": {
        "sha": "b89b1f6c6f2e23f1038064564d6eec13482b45d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b89b1f6c6f2e23f1038064564d6eec13482b45d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d57586f91c6cfe7480ae87b81a041009776a33af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unverified_email",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJWHrerAAoJEILFwAlijs8MtoEH/0qPfk2MlLg7mY04QhhHf2rt\nyYJcqR3MEBKhe/6m1bUIZXhRdtPCERd3JA7H6PfBRIgMEeDXJP+Q4Yloch7/Y71C\n/C/z2uV336aPceXdxTSl3JtBVP95Dj1RPB/26ggyuD0lUU46bLmJhTa0zlI0tj2O\nJ3ZigiA0ccqz5T6aF82bFAqUaMJEmqQRZHl25k0ibV690+xrKyN4d+o0FxF9ChJW\nFvJyM/I+0R13i4IwKk/KTM+bm8bNMgzjWAjApgqhoKTMudD0hxWug3Uu6x0nl31y\n2WC6hulontVXBkgUuPd8m939tQoz3H+eKF9H9JTzV9i25w55kzLdO3UffWh2drc=\n=9hqm\n-----END PGP SIGNATURE-----",
        "payload": "tree b89b1f6c6f2e23f1038064564d6eec13482b45d1\nparent a1d623da3ea4c73605d27703bc966ed8109d231e\nauthor Micha <michagogo@server.fake> 1444853126 +0300\ncommitter Micha <michagogo@server.fake> 1444853653 +0300\n\nAdd historical release notes for October 2015 bugfix releases\n\n[skip ci]\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d57586f91c6cfe7480ae87b81a041009776a33af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d57586f91c6cfe7480ae87b81a041009776a33af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d57586f91c6cfe7480ae87b81a041009776a33af/comments",
    "author": {
      "login": "Michagogo",
      "id": 2559390,
      "node_id": "MDQ6VXNlcjI1NTkzOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2559390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Michagogo",
      "html_url": "https://github.com/Michagogo",
      "followers_url": "https://api.github.com/users/Michagogo/followers",
      "following_url": "https://api.github.com/users/Michagogo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Michagogo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Michagogo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Michagogo/subscriptions",
      "organizations_url": "https://api.github.com/users/Michagogo/orgs",
      "repos_url": "https://api.github.com/users/Michagogo/repos",
      "events_url": "https://api.github.com/users/Michagogo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Michagogo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Michagogo",
      "id": 2559390,
      "node_id": "MDQ6VXNlcjI1NTkzOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2559390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Michagogo",
      "html_url": "https://github.com/Michagogo",
      "followers_url": "https://api.github.com/users/Michagogo/followers",
      "following_url": "https://api.github.com/users/Michagogo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Michagogo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Michagogo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Michagogo/subscriptions",
      "organizations_url": "https://api.github.com/users/Michagogo/orgs",
      "repos_url": "https://api.github.com/users/Michagogo/repos",
      "events_url": "https://api.github.com/users/Michagogo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Michagogo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 337,
      "additions": 337,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a110e562c45376daea69efcb0837dc879ada66a",
        "filename": "doc/release-notes/release-notes-0.10.3.md",
        "status": "added",
        "additions": 165,
        "deletions": 0,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d57586f91c6cfe7480ae87b81a041009776a33af/doc/release-notes/release-notes-0.10.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d57586f91c6cfe7480ae87b81a041009776a33af/doc/release-notes/release-notes-0.10.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.10.3.md?ref=d57586f91c6cfe7480ae87b81a041009776a33af",
        "patch": "@@ -0,0 +1,165 @@\n+Bitcoin Core version 0.10.3 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.10.3/>\n+\n+This is a new minor version release, bringing security fixes and translation \n+updates. It is recommended to upgrade to this version as soon as possible.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility.\n+\n+Notable changes\n+===============\n+\n+Fix buffer overflow in bundled upnp\n+------------------------------------\n+\n+Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\n+the XML parser during initial network discovery.\n+\n+Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n+\n+This applies to the distributed executables only, not when building from source or\n+using distribution provided packages.\n+\n+Additionally, upnp has been disabled by default. This may result in a lower\n+number of reachable nodes on IPv4, however this prevents future libupnpc\n+vulnerabilities from being a structural risk to the network\n+(see https://github.com/bitcoin/bitcoin/pull/6795).\n+\n+Test for LowS signatures before relaying\n+-----------------------------------------\n+\n+Make the node require the canonical 'low-s' encoding for ECDSA signatures when\n+relaying or mining.  This removes a nuisance malleability vector.\n+\n+Consensus behavior is unchanged.\n+\n+If widely deployed this change would eliminate the last remaining known vector\n+for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\n+it will block most transactions made by sufficiently out of date software.\n+\n+Unlike the other avenues to change txids on transactions this\n+one was randomly violated by all deployed bitcoin software prior to\n+its discovery. So, while other malleability vectors where made\n+non-standard as soon as they were discovered, this one has remained\n+permitted. Even BIP62 did not propose applying this rule to\n+old version transactions, but conforming implementations have become\n+much more common since BIP62 was initially written.\n+\n+Bitcoin Core has produced compatible signatures since a28fb70e in\n+September 2013, but this didn't make it into a release until 0.9\n+in March 2014; Bitcoinj has done so for a similar span of time.\n+Bitcoinjs and electrum have been more recently updated.\n+\n+This does not replace the need for BIP62 or similar, as miners can\n+still cooperate to break transactions.  Nor does it replace the\n+need for wallet software to handle malleability sanely[1]. This\n+only eliminates the cheap and irritating DOS attack.\n+\n+[1] On the Malleability of Bitcoin Transactions\n+Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\n+http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n+\n+Minimum relay fee default increase\n+-----------------------------------\n+\n+The default for the `-minrelaytxfee` setting has been increased from `0.00001`\n+to `0.00005`.\n+\n+This is necessitated by the current transaction flooding, causing\n+outrageous memory usage on nodes due to the mempool ballooning. This is a\n+temporary measure, bridging the time until a dynamic method for determining\n+this fee is merged (which will be in 0.12).\n+\n+(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11.0\n+release notes, in which this value was suggested)\n+\n+0.10.3 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect external\n+behavior, not code moves, refactors or string updates.\n+\n+- #6186 `e4a7d51` Fix two problems in CSubnet parsing\n+- #6153 `ebd7d8d` Parameter interaction: disable upnp if -proxy set\n+- #6203 `ecc96f5` Remove P2SH coinbase flag, no longer interesting\n+- #6226 `181771b` json: fail read_string if string contains trailing garbage\n+- #6244 `09334e0` configure: Detect (and reject) LibreSSL\n+- #6276 `0fd8464` Fix getbalance * 0\n+- #6274 `be64204` Add option `-alerts` to opt out of alert system\n+- #6319 `3f55638` doc: update mailing list address\n+- #6438 `7e66e9c` openssl: avoid config file load/race\n+- #6439 `255eced` Updated URL location of netinstall for Debian\n+- #6412 `0739e6e` Test whether created sockets are select()able\n+- #6694 `f696ea1` [QT] fix thin space word wrap line brake issue\n+- #6704 `743cc9e` Backport bugfixes to 0.10\n+- #6769 `1cea6b0` Test LowS in standardness, removes nuisance malleability vector.\n+- #6789 `093d7b5` Update miniupnpc to 1.9.20151008\n+- #6795 `f2778e0` net: Disable upnp by default\n+- #6797 `91ef4d9` Do not store more than 200 timedata samples\n+- #6793 `842c48d` Bump minrelaytxfee default\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Adam Weiss\n+- Alex Morcos\n+- Casey Rodarmor\n+- Cory Fields\n+- fanquake\n+- Gregory Maxwell\n+- Jonas Schnelli\n+- J Ross Nicoll\n+- Luke Dashjr\n+- Pavel Vasin\n+- Pieter Wuille\n+- randy-waterhouse\n+- \u0e3ftcDrak\n+- Tom Harding\n+- Veres Lajos\n+- Wladimir J. van der Laan\n+\n+And all those who contributed additional code review and/or security research:\n+\n+- timothy on IRC for reporting the issue\n+- Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "799205691ed0f26322923693c2cbf523f0b6751e",
        "filename": "doc/release-notes/release-notes-0.11.1.md",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d57586f91c6cfe7480ae87b81a041009776a33af/doc/release-notes/release-notes-0.11.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d57586f91c6cfe7480ae87b81a041009776a33af/doc/release-notes/release-notes-0.11.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.11.1.md?ref=d57586f91c6cfe7480ae87b81a041009776a33af",
        "patch": "@@ -0,0 +1,172 @@\n+Bitcoin Core version 0.11.1 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.11.1/>\n+\n+This is a new minor version release, bringing security fixes. It is recommended\n+to upgrade to this version as soon as possible.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility. There are no\n+known problems when downgrading from 0.11.x to 0.10.x.\n+\n+Notable changes\n+===============\n+\n+Fix buffer overflow in bundled upnp\n+------------------------------------\n+\n+Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\n+the XML parser during initial network discovery.\n+\n+Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n+\n+This applies to the distributed executables only, not when building from source or\n+using distribution provided packages.\n+\n+Additionally, upnp has been disabled by default. This may result in a lower\n+number of reachable nodes on IPv4, however this prevents future libupnpc\n+vulnerabilities from being a structural risk to the network\n+(see https://github.com/bitcoin/bitcoin/pull/6795).\n+\n+Test for LowS signatures before relaying\n+-----------------------------------------\n+\n+Make the node require the canonical 'low-s' encoding for ECDSA signatures when\n+relaying or mining.  This removes a nuisance malleability vector.\n+\n+Consensus behavior is unchanged.\n+\n+If widely deployed this change would eliminate the last remaining known vector\n+for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\n+it will block most transactions made by sufficiently out of date software.\n+\n+Unlike the other avenues to change txids on transactions this\n+one was randomly violated by all deployed bitcoin software prior to\n+its discovery. So, while other malleability vectors where made\n+non-standard as soon as they were discovered, this one has remained\n+permitted. Even BIP62 did not propose applying this rule to\n+old version transactions, but conforming implementations have become\n+much more common since BIP62 was initially written.\n+\n+Bitcoin Core has produced compatible signatures since a28fb70e in\n+September 2013, but this didn't make it into a release until 0.9\n+in March 2014; Bitcoinj has done so for a similar span of time.\n+Bitcoinjs and electrum have been more recently updated.\n+\n+This does not replace the need for BIP62 or similar, as miners can\n+still cooperate to break transactions.  Nor does it replace the\n+need for wallet software to handle malleability sanely[1]. This\n+only eliminates the cheap and irritating DOS attack.\n+\n+[1] On the Malleability of Bitcoin Transactions\n+Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\n+http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n+\n+Minimum relay fee default increase\n+-----------------------------------\n+\n+The default for the `-minrelaytxfee` setting has been increased from `0.00001`\n+to `0.00005`.\n+\n+This is necessitated by the current transaction flooding, causing\n+outrageous memory usage on nodes due to the mempool ballooning. This is a\n+temporary measure, bridging the time until a dynamic method for determining\n+this fee is merged (which will be in 0.12).\n+\n+(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11\n+release notes, in which this value was suggested)\n+\n+0.11.1 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+- #6438 `2531438` openssl: avoid config file load/race\n+- #6439 `980f820` Updated URL location of netinstall for Debian\n+- #6384 `8e5a969` qt: Force TLS1.0+ for SSL connections\n+- #6471 `92401c2` Depends: bump to qt 5.5\n+- #6224 `93b606a` Be even stricter in processing unrequested blocks\n+- #6571 `100ac4e` libbitcoinconsensus: avoid a crash in multi-threaded environments\n+- #6545 `649f5d9` Do not store more than 200 timedata samples.\n+- #6694 `834e299` [QT] fix thin space word wrap line break issue\n+- #6703 `1cd7952` Backport bugfixes to 0.11\n+- #6750 `5ed8d0b` Recent rejects backport to v0.11\n+- #6769 `71cc9d9` Test LowS in standardness, removes nuisance malleability vector.\n+- #6789 `b4ad73f` Update miniupnpc to 1.9.20151008\n+- #6785 `b4dc33e` Backport to v0.11: In (strCommand == \"tx\"), return if AlreadyHave()\n+- #6412 `0095b9a` Test whether created sockets are select()able\n+- #6795 `4dbcec0` net: Disable upnp by default\n+- #6793 `e7bcc4a` Bump minrelaytxfee default\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Adam Weiss\n+- Alex Morcos\n+- Casey Rodarmor\n+- Cory Fields\n+- fanquake\n+- Gregory Maxwell\n+- Jonas Schnelli\n+- J Ross Nicoll\n+- Luke Dashjr\n+- Pavel Jan\u00edk\n+- Pavel Vasin\n+- Peter Todd\n+- Pieter Wuille\n+- randy-waterhouse\n+- Ross Nicoll\n+- Suhas Daftuar\n+- tailsjoin\n+- \u0e3ftcDrak\n+- Tom Harding\n+- Veres Lajos\n+- Wladimir J. van der Laan\n+\n+And those who contributed additional code review and/or security research:\n+\n+- timothy on IRC for reporting the issue\n+- Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+"
      }
    ]
  },
  {
    "sha": "34f200d1404dcb93d45f43e249048f4b6eed0197",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGYyMDBkMTQwNGRjYjkzZDQ1ZjQzZTI0OTA0OGY0YjZlZWQwMTk3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:45:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:46:01Z"
      },
      "message": "Merge pull request #6830\n\nd57586f Add historical release notes for October 2015 bugfix releases (Micha)",
      "tree": {
        "sha": "b89b1f6c6f2e23f1038064564d6eec13482b45d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b89b1f6c6f2e23f1038064564d6eec13482b45d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34f200d1404dcb93d45f43e249048f4b6eed0197",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWH4PpAAoJEHSBCwEjRsmmSewIALkqamY7akk/ItsQO6g9/9bh\nIsUjcbyNG3DRH22wDv+3nHNhV0vd2tUYyyW7c4dTx6OfzGpAABmWPKXAr6qTCupd\noTDoISBy2tzO4D8SeX8wDGK7qoYF9PB3YcQ+0XcPVKziKo8FujrajZ35G5+IEYXq\nguqVH1lbGxr07UIYFzvKlboRgCmNFYKfPR5X2fUMLWbfj8nPdQl0MOf1FuT3aBn4\n4ic3tykXkaiv6jSK1YcpxCwLcdLkRmaKGiV8VonNE4a5eEnt/3Y7CKVqtcTYsCeY\n35oOmcxYwDeOXJTT1H9qj3SDJnM0eGfraoBj99mmWfrJ1QRvSvr/LqrJk6vp9uo=\n=mOqz\n-----END PGP SIGNATURE-----",
        "payload": "tree b89b1f6c6f2e23f1038064564d6eec13482b45d1\nparent a1d623da3ea4c73605d27703bc966ed8109d231e\nparent d57586f91c6cfe7480ae87b81a041009776a33af\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444905957 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444905961 +0200\n\nMerge pull request #6830\n\nd57586f Add historical release notes for October 2015 bugfix releases (Micha)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34f200d1404dcb93d45f43e249048f4b6eed0197",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34f200d1404dcb93d45f43e249048f4b6eed0197",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34f200d1404dcb93d45f43e249048f4b6eed0197/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      },
      {
        "sha": "d57586f91c6cfe7480ae87b81a041009776a33af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d57586f91c6cfe7480ae87b81a041009776a33af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d57586f91c6cfe7480ae87b81a041009776a33af"
      }
    ],
    "stats": {
      "total": 337,
      "additions": 337,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8a110e562c45376daea69efcb0837dc879ada66a",
        "filename": "doc/release-notes/release-notes-0.10.3.md",
        "status": "added",
        "additions": 165,
        "deletions": 0,
        "changes": 165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f200d1404dcb93d45f43e249048f4b6eed0197/doc/release-notes/release-notes-0.10.3.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f200d1404dcb93d45f43e249048f4b6eed0197/doc/release-notes/release-notes-0.10.3.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.10.3.md?ref=34f200d1404dcb93d45f43e249048f4b6eed0197",
        "patch": "@@ -0,0 +1,165 @@\n+Bitcoin Core version 0.10.3 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.10.3/>\n+\n+This is a new minor version release, bringing security fixes and translation \n+updates. It is recommended to upgrade to this version as soon as possible.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility.\n+\n+Notable changes\n+===============\n+\n+Fix buffer overflow in bundled upnp\n+------------------------------------\n+\n+Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\n+the XML parser during initial network discovery.\n+\n+Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n+\n+This applies to the distributed executables only, not when building from source or\n+using distribution provided packages.\n+\n+Additionally, upnp has been disabled by default. This may result in a lower\n+number of reachable nodes on IPv4, however this prevents future libupnpc\n+vulnerabilities from being a structural risk to the network\n+(see https://github.com/bitcoin/bitcoin/pull/6795).\n+\n+Test for LowS signatures before relaying\n+-----------------------------------------\n+\n+Make the node require the canonical 'low-s' encoding for ECDSA signatures when\n+relaying or mining.  This removes a nuisance malleability vector.\n+\n+Consensus behavior is unchanged.\n+\n+If widely deployed this change would eliminate the last remaining known vector\n+for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\n+it will block most transactions made by sufficiently out of date software.\n+\n+Unlike the other avenues to change txids on transactions this\n+one was randomly violated by all deployed bitcoin software prior to\n+its discovery. So, while other malleability vectors where made\n+non-standard as soon as they were discovered, this one has remained\n+permitted. Even BIP62 did not propose applying this rule to\n+old version transactions, but conforming implementations have become\n+much more common since BIP62 was initially written.\n+\n+Bitcoin Core has produced compatible signatures since a28fb70e in\n+September 2013, but this didn't make it into a release until 0.9\n+in March 2014; Bitcoinj has done so for a similar span of time.\n+Bitcoinjs and electrum have been more recently updated.\n+\n+This does not replace the need for BIP62 or similar, as miners can\n+still cooperate to break transactions.  Nor does it replace the\n+need for wallet software to handle malleability sanely[1]. This\n+only eliminates the cheap and irritating DOS attack.\n+\n+[1] On the Malleability of Bitcoin Transactions\n+Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\n+http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n+\n+Minimum relay fee default increase\n+-----------------------------------\n+\n+The default for the `-minrelaytxfee` setting has been increased from `0.00001`\n+to `0.00005`.\n+\n+This is necessitated by the current transaction flooding, causing\n+outrageous memory usage on nodes due to the mempool ballooning. This is a\n+temporary measure, bridging the time until a dynamic method for determining\n+this fee is merged (which will be in 0.12).\n+\n+(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11.0\n+release notes, in which this value was suggested)\n+\n+0.10.3 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect external\n+behavior, not code moves, refactors or string updates.\n+\n+- #6186 `e4a7d51` Fix two problems in CSubnet parsing\n+- #6153 `ebd7d8d` Parameter interaction: disable upnp if -proxy set\n+- #6203 `ecc96f5` Remove P2SH coinbase flag, no longer interesting\n+- #6226 `181771b` json: fail read_string if string contains trailing garbage\n+- #6244 `09334e0` configure: Detect (and reject) LibreSSL\n+- #6276 `0fd8464` Fix getbalance * 0\n+- #6274 `be64204` Add option `-alerts` to opt out of alert system\n+- #6319 `3f55638` doc: update mailing list address\n+- #6438 `7e66e9c` openssl: avoid config file load/race\n+- #6439 `255eced` Updated URL location of netinstall for Debian\n+- #6412 `0739e6e` Test whether created sockets are select()able\n+- #6694 `f696ea1` [QT] fix thin space word wrap line brake issue\n+- #6704 `743cc9e` Backport bugfixes to 0.10\n+- #6769 `1cea6b0` Test LowS in standardness, removes nuisance malleability vector.\n+- #6789 `093d7b5` Update miniupnpc to 1.9.20151008\n+- #6795 `f2778e0` net: Disable upnp by default\n+- #6797 `91ef4d9` Do not store more than 200 timedata samples\n+- #6793 `842c48d` Bump minrelaytxfee default\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Adam Weiss\n+- Alex Morcos\n+- Casey Rodarmor\n+- Cory Fields\n+- fanquake\n+- Gregory Maxwell\n+- Jonas Schnelli\n+- J Ross Nicoll\n+- Luke Dashjr\n+- Pavel Vasin\n+- Pieter Wuille\n+- randy-waterhouse\n+- \u0e3ftcDrak\n+- Tom Harding\n+- Veres Lajos\n+- Wladimir J. van der Laan\n+\n+And all those who contributed additional code review and/or security research:\n+\n+- timothy on IRC for reporting the issue\n+- Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "799205691ed0f26322923693c2cbf523f0b6751e",
        "filename": "doc/release-notes/release-notes-0.11.1.md",
        "status": "added",
        "additions": 172,
        "deletions": 0,
        "changes": 172,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34f200d1404dcb93d45f43e249048f4b6eed0197/doc/release-notes/release-notes-0.11.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34f200d1404dcb93d45f43e249048f4b6eed0197/doc/release-notes/release-notes-0.11.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.11.1.md?ref=34f200d1404dcb93d45f43e249048f4b6eed0197",
        "patch": "@@ -0,0 +1,172 @@\n+Bitcoin Core version 0.11.1 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.11.1/>\n+\n+This is a new minor version release, bringing security fixes. It is recommended\n+to upgrade to this version as soon as possible.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+Upgrading and downgrading\n+=========================\n+\n+How to Upgrade\n+--------------\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the\n+installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac) or\n+bitcoind/bitcoin-qt (on Linux).\n+\n+Downgrade warning\n+------------------\n+\n+Because release 0.10.0 and later makes use of headers-first synchronization and\n+parallel block download (see further), the block files and databases are not\n+backwards-compatible with pre-0.10 versions of Bitcoin Core or other software:\n+\n+* Blocks will be stored on disk out of order (in the order they are\n+received, really), which makes it incompatible with some tools or\n+other programs. Reindexing using earlier versions will also not work\n+anymore as a result of this.\n+\n+* The block index database will now hold headers for which no block is\n+stored on disk, which earlier versions won't support.\n+\n+If you want to be able to downgrade smoothly, make a backup of your entire data\n+directory. Without this your node will need start syncing (or importing from\n+bootstrap.dat) anew afterwards. It is possible that the data from a completely\n+synchronised 0.10 node may be usable in older versions as-is, but this is not\n+supported and may break as soon as the older version attempts to reindex.\n+\n+This does not affect wallet forward or backward compatibility. There are no\n+known problems when downgrading from 0.11.x to 0.10.x.\n+\n+Notable changes\n+===============\n+\n+Fix buffer overflow in bundled upnp\n+------------------------------------\n+\n+Bundled miniupnpc was updated to 1.9.20151008. This fixes a buffer overflow in\n+the XML parser during initial network discovery.\n+\n+Details can be found here: http://talosintel.com/reports/TALOS-2015-0035/\n+\n+This applies to the distributed executables only, not when building from source or\n+using distribution provided packages.\n+\n+Additionally, upnp has been disabled by default. This may result in a lower\n+number of reachable nodes on IPv4, however this prevents future libupnpc\n+vulnerabilities from being a structural risk to the network\n+(see https://github.com/bitcoin/bitcoin/pull/6795).\n+\n+Test for LowS signatures before relaying\n+-----------------------------------------\n+\n+Make the node require the canonical 'low-s' encoding for ECDSA signatures when\n+relaying or mining.  This removes a nuisance malleability vector.\n+\n+Consensus behavior is unchanged.\n+\n+If widely deployed this change would eliminate the last remaining known vector\n+for nuisance malleability on SIGHASH_ALL P2PKH transactions. On the down-side\n+it will block most transactions made by sufficiently out of date software.\n+\n+Unlike the other avenues to change txids on transactions this\n+one was randomly violated by all deployed bitcoin software prior to\n+its discovery. So, while other malleability vectors where made\n+non-standard as soon as they were discovered, this one has remained\n+permitted. Even BIP62 did not propose applying this rule to\n+old version transactions, but conforming implementations have become\n+much more common since BIP62 was initially written.\n+\n+Bitcoin Core has produced compatible signatures since a28fb70e in\n+September 2013, but this didn't make it into a release until 0.9\n+in March 2014; Bitcoinj has done so for a similar span of time.\n+Bitcoinjs and electrum have been more recently updated.\n+\n+This does not replace the need for BIP62 or similar, as miners can\n+still cooperate to break transactions.  Nor does it replace the\n+need for wallet software to handle malleability sanely[1]. This\n+only eliminates the cheap and irritating DOS attack.\n+\n+[1] On the Malleability of Bitcoin Transactions\n+Marcin Andrychowicz, Stefan Dziembowski, Daniel Malinowski, \u0141ukasz Mazurek\n+http://fc15.ifca.ai/preproceedings/bitcoin/paper_9.pdf\n+\n+Minimum relay fee default increase\n+-----------------------------------\n+\n+The default for the `-minrelaytxfee` setting has been increased from `0.00001`\n+to `0.00005`.\n+\n+This is necessitated by the current transaction flooding, causing\n+outrageous memory usage on nodes due to the mempool ballooning. This is a\n+temporary measure, bridging the time until a dynamic method for determining\n+this fee is merged (which will be in 0.12).\n+\n+(see https://github.com/bitcoin/bitcoin/pull/6793, as well as the 0.11\n+release notes, in which this value was suggested)\n+\n+0.11.1 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+- #6438 `2531438` openssl: avoid config file load/race\n+- #6439 `980f820` Updated URL location of netinstall for Debian\n+- #6384 `8e5a969` qt: Force TLS1.0+ for SSL connections\n+- #6471 `92401c2` Depends: bump to qt 5.5\n+- #6224 `93b606a` Be even stricter in processing unrequested blocks\n+- #6571 `100ac4e` libbitcoinconsensus: avoid a crash in multi-threaded environments\n+- #6545 `649f5d9` Do not store more than 200 timedata samples.\n+- #6694 `834e299` [QT] fix thin space word wrap line break issue\n+- #6703 `1cd7952` Backport bugfixes to 0.11\n+- #6750 `5ed8d0b` Recent rejects backport to v0.11\n+- #6769 `71cc9d9` Test LowS in standardness, removes nuisance malleability vector.\n+- #6789 `b4ad73f` Update miniupnpc to 1.9.20151008\n+- #6785 `b4dc33e` Backport to v0.11: In (strCommand == \"tx\"), return if AlreadyHave()\n+- #6412 `0095b9a` Test whether created sockets are select()able\n+- #6795 `4dbcec0` net: Disable upnp by default\n+- #6793 `e7bcc4a` Bump minrelaytxfee default\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Adam Weiss\n+- Alex Morcos\n+- Casey Rodarmor\n+- Cory Fields\n+- fanquake\n+- Gregory Maxwell\n+- Jonas Schnelli\n+- J Ross Nicoll\n+- Luke Dashjr\n+- Pavel Jan\u00edk\n+- Pavel Vasin\n+- Peter Todd\n+- Pieter Wuille\n+- randy-waterhouse\n+- Ross Nicoll\n+- Suhas Daftuar\n+- tailsjoin\n+- \u0e3ftcDrak\n+- Tom Harding\n+- Veres Lajos\n+- Wladimir J. van der Laan\n+\n+And those who contributed additional code review and/or security research:\n+\n+- timothy on IRC for reporting the issue\n+- Vulnerability in miniupnp discovered by Aleksandar Nikolic of Cisco Talos\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/).\n+"
      }
    ]
  },
  {
    "sha": "fa6b405f059444840eaa5022241cd29421bff994",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZiNDA1ZjA1OTQ0NDg0MGVhYTUwMjIyNDFjZDI5NDIxYmZmOTk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:52:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:52:34Z"
      },
      "message": "Merge pull request #6823\n\nf8f2ace trivial: use constants for db keys (Daniel Kraft)",
      "tree": {
        "sha": "3e201ae650784faa493504ca9411dddb7798acd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e201ae650784faa493504ca9411dddb7798acd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6b405f059444840eaa5022241cd29421bff994",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWH4VyAAoJEHSBCwEjRsmmK34H/3hIcBT9DscoogpJJZ5Zr+5B\nVL2aqITP/SZrq23OdzRQ5N/xEl3R0imo9jjEshjtYyxr5n9Il2iR7GEeAs3vdN8P\nCtGR4ylvCQnz0mLJnZSI16Uonkka3yzkbO5YifodorsnI3LyI5VnVLUdll+k/M5r\nO4NrlqqsfL5imPsO2lFP7oSxOo/GsvPOqu2L4M5iZG5hGM9xr+NGUq9dL9HnU/uH\nC6nUAFN0KS7ceZTjKVz2KcIhkvZBoBidGozN/YIT51/abg1sMae70ZNbCo5BDUF9\n8FdZogsMnUJGN0wfKqTktFWgrRKmDtUM+VAk7aQgsVTTR47jvnsFQOaP45hM7VI=\n=bYIX\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e201ae650784faa493504ca9411dddb7798acd1\nparent 34f200d1404dcb93d45f43e249048f4b6eed0197\nparent f8f2aceadd5f406f8bc6f6029b032d00828e6256\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444906347 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444906354 +0200\n\nMerge pull request #6823\n\nf8f2ace trivial: use constants for db keys (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6b405f059444840eaa5022241cd29421bff994",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6b405f059444840eaa5022241cd29421bff994",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6b405f059444840eaa5022241cd29421bff994/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34f200d1404dcb93d45f43e249048f4b6eed0197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34f200d1404dcb93d45f43e249048f4b6eed0197",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34f200d1404dcb93d45f43e249048f4b6eed0197"
      },
      {
        "sha": "f8f2aceadd5f406f8bc6f6029b032d00828e6256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8f2aceadd5f406f8bc6f6029b032d00828e6256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8f2aceadd5f406f8bc6f6029b032d00828e6256"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a441aea688325b896f80039bf2839d9478a634fd",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6b405f059444840eaa5022241cd29421bff994/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6b405f059444840eaa5022241cd29421bff994/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=fa6b405f059444840eaa5022241cd29421bff994",
        "patch": "@@ -99,7 +99,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n     boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n-    pcursor->Seek('c');\n+    pcursor->Seek(DB_COINS);\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n@@ -109,7 +109,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n         boost::this_thread::interruption_point();\n         std::pair<char, uint256> key;\n         CCoins coins;\n-        if (pcursor->GetKey(key) && key.first == 'c') {\n+        if (pcursor->GetKey(key) && key.first == DB_COINS) {\n             if (pcursor->GetValue(coins)) {\n                 stats.nTransactions++;\n                 for (unsigned int i=0; i<coins.vout.size(); i++) {\n@@ -179,13 +179,13 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n     boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n \n-    pcursor->Seek(make_pair('b', uint256()));\n+    pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         std::pair<char, uint256> key;\n-        if (pcursor->GetKey(key) && key.first == 'b') {\n+        if (pcursor->GetKey(key) && key.first == DB_BLOCK_INDEX) {\n             CDiskBlockIndex diskindex;\n             if (pcursor->GetValue(diskindex)) {\n                 // Construct block index object"
      }
    ]
  },
  {
    "sha": "8ce992063510b38fe7de89bec7af1d33aeeb5c93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2U5OTIwNjM1MTBiMzhmZTdkZTg5YmVjN2FmMWQzM2FlZWI1Yzkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:54:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:54:13Z"
      },
      "message": "Merge pull request #6817\n\na0d5e0d [doc] Cleanup release-process documentation (Michael)",
      "tree": {
        "sha": "77bf87aa3176253952993bc1d804d890e816bc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77bf87aa3176253952993bc1d804d890e816bc10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ce992063510b38fe7de89bec7af1d33aeeb5c93",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWH4XVAAoJEHSBCwEjRsmmyQoH/jd1MyWwTPy+BTLNT4xaRR0X\n1IZNl7D++9VmW9imgEP3mkmpOwEmgaWZ0E1uSMW95IgUNLClcSVbgx9nTAAyZPSU\nIikKsdbgtN8HVUl/HSKfyVFP860BcXvziClIu4aniocq1hINKO/1KQnw42Aranks\n5ewVWvaWJuGlOiS7nxsB+22zaCmfBYl+OpfdrVLLSda+MST5/UI4j97BPDitpz5i\npgIK9ZWsTWsYQt3o9r45gO4QXs5OBuWHhOMZPSW1yCc3ZQ0ah7ZwiIglhVavMvV6\nnAS3kPF3uutoTGwOMBlMAsLGjZbs+kYJhogX1UQC1LUSXzU6soW6O5T4//OqltI=\n=lHEn\n-----END PGP SIGNATURE-----",
        "payload": "tree 77bf87aa3176253952993bc1d804d890e816bc10\nparent fa6b405f059444840eaa5022241cd29421bff994\nparent a0d5e0d2f488a6249e01d00cbf864ca0e81894e3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444906446 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444906453 +0200\n\nMerge pull request #6817\n\na0d5e0d [doc] Cleanup release-process documentation (Michael)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce992063510b38fe7de89bec7af1d33aeeb5c93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ce992063510b38fe7de89bec7af1d33aeeb5c93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce992063510b38fe7de89bec7af1d33aeeb5c93/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6b405f059444840eaa5022241cd29421bff994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6b405f059444840eaa5022241cd29421bff994",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6b405f059444840eaa5022241cd29421bff994"
      },
      {
        "sha": "a0d5e0d2f488a6249e01d00cbf864ca0e81894e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d5e0d2f488a6249e01d00cbf864ca0e81894e3"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "a562c98dbe7c88e10c939b710342d2176df9be7b",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ce992063510b38fe7de89bec7af1d33aeeb5c93/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ce992063510b38fe7de89bec7af1d33aeeb5c93/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=8ce992063510b38fe7de89bec7af1d33aeeb5c93",
        "patch": "@@ -1,65 +1,67 @@\n Release Process\n ====================\n \n-* update translations (ping wumpus, Diapolo or tcatm on IRC)\n-* see https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#syncing-with-transifex\n+* Update translations (ping wumpus, Diapolo or tcatm on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#syncing-with-transifex)\n+* Update [bips.md](bips.md) to account for changes since the last release.\n \n * * *\n \n-###first time only or for new builders, check out the source in the following directory hierarchy\n+###First time / New builders \n+Check out the source code in the following directory hierarchy.\n \n \tcd /path/to/your/toplevel/build\n \tgit clone https://github.com/bitcoin/gitian.sigs.git\n+\tgit clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n \tgit clone https://github.com/devrandom/gitian-builder.git\n \tgit clone https://github.com/bitcoin/bitcoin.git\n \n-###for bitcoin maintainers/release engineers, update (commit) version in sources\n+###Bitcoin maintainers/release engineers, update (commit) version in sources\n \n \tpushd ./bitcoin\n \tcontrib/verifysfbinaries/verify.sh\n \tdoc/README*\n \tshare/setup.nsi\n \tsrc/clientversion.h (change CLIENT_VERSION_IS_RELEASE to true)\n \n-###for bitcoin maintainers/release engineers, tag version in git\n+\t# tag version in git\n \n \tgit tag -s v(new version, e.g. 0.8.0)\n \n-###for bitcoin maintainers/release engineers, write release notes. git shortlog helps a lot, for example:\n+\t# write release notes. git shortlog helps a lot, for example:\n \n \tgit shortlog --no-merges v(current version, e.g. 0.7.2)..v(new version, e.g. 0.8.0)\n \tpopd\n \n * * *\n \n-###update gitian, gitian.sigs, checkout bitcoin version, and perform gitian builds\n+###Setup and perform gitian builds\n \n- To ensure your gitian descriptors are accurate for direct reference for gbuild, below, run the following from a directory containing the bitcoin source:\n+ Setup gitian descriptors:\n   \n \tpushd ./bitcoin\n \texport SIGNER=(your gitian key, ie bluematt, sipa, etc)\n \texport VERSION=(new version, e.g. 0.8.0)\n \tgit checkout v${VERSION}\n \tpopd\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other gitian signatures:\n+  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other gitian signatures.\n \n \tpushd ./gitian.sigs\n \tgit pull\n \tpopd\n \n-  Ensure your gitian-builder sources are up-to-date to take advantage of the new caching features of gitian (`e9741525c` or later is recommended)\n+  Ensure gitian-builder is up-to-date to take advantage of new caching features (`e9741525c` or later is recommended).\n \n \tpushd ./gitian-builder\n \tgit pull\n \n-###fetch and create inputs: (first time, or when dependency versions change)\n+###Fetch and create inputs: (first time, or when dependency versions change)\n  \n \tmkdir -p inputs\n \twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n \twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n \n- Register and download the Apple SDK: (see OSX Readme for details)\n+ Register and download the Apple SDK: see [OSX readme](README_osx.txt) for details.\n  \n  https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n  \n@@ -75,15 +77,11 @@ By default, gitian will fetch source files as needed. To cache them ahead of tim\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n-Clone the detached-sigs repository:\n-\n-\tpopd\n-\tgit clone https://github.com/bitcoin/bitcoin-detached-sigs.git\n-\tpushd ./bitcoin-builder\n-\n-NOTE: Offline builds must use the --url flag to ensure gitian fetches only from local URLs.\n-For example: ./bin/bguild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n-The following gbuild invocations DO NOT DO THIS by default.\n+NOTE: Offline builds must use the --url flag to ensure gitian fetches only from local URLs. For example: \n+```\n+./bin/bguild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+```\n+The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n ###Build (and optionally verify) Bitcoin Core for Linux, Windows, and OS X:\n   \n@@ -126,8 +124,9 @@ Commit your signature to gitian.sigs:\n \tpopd\n \n   Wait for Windows/OSX detached signatures:\n+\n \tOnce the Windows/OSX builds each have 3 matching signatures, they will be signed with their respective release keys.\n-\tDetached signatures will then be committed to the bitcoin-detached-sigs repository, which can be combined with the unsigned apps to create signed binaries.\n+\tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n   Create (and optionally verify) the signed OSX binary:\n \n@@ -176,14 +175,14 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n - Update bitcoin.org version\n \n   - First, check to see if the Bitcoin.org maintainers have prepared a\n-    release: https://github.com/bitcoin/bitcoin.org/labels/Releases\n+    release: https://github.com/bitcoin-dot-org/bitcoin.org/labels/Releases\n \n       - If they have, it will have previously failed their Travis CI\n         checks because the final release files weren't uploaded.\n         Trigger a Travis CI rebuild---if it passes, merge.\n \n   - If they have not prepared a release, follow the Bitcoin.org release\n-    instructions: https://github.com/bitcoin/bitcoin.org#release-notes\n+    instructions: https://github.com/bitcoin-dot-org/bitcoin.org#release-notes\n \n   - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n     as update the OS download links. Ping @saivann/@harding (saivann/harding on Freenode) in case anything goes wrong"
      }
    ]
  },
  {
    "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzhhODgwOTAwYzE1YzdhMjhhZTgxZTY2MzIwOTBmMjVmZWE3ZmNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:55:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-15T10:55:25Z"
      },
      "message": "Merge pull request #6820\n\n60af755 build: univalue subdir build fixups (Cory Fields)",
      "tree": {
        "sha": "f40bd5e37cbec02730e9d7689bfee1dabd914347",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f40bd5e37cbec02730e9d7689bfee1dabd914347"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWH4YdAAoJEHSBCwEjRsmmfdgIAIDawVMU9I8GdFhl+jYabv+w\nWgVU0kfdQOhI9iu/F6XDzjZZQboVNlFbmPCOUeMbdEIG67x5jD5/ZwxPuYg3gTaY\nI4HrIClha7EguqhutzRPHB+/Sh8mzOSI9WJZSPqVZ/TFwEnKcS+kTkB89a/Wv5FR\n1auurP0DLnA/Sg82T4bfG0ClYQiE2RqWSvd1WayPa20galq8kb2SEGzSxkTge+6H\n0O/z4/YC5ott8mSyTmBAild7BbVmMrZYY11LgkFHJIBj14IUmbrJU0k+/8dpK2zS\n/VeEQStke+UAYwiC6ELU0dpV6TbZfMuVM6NsyTR9N47AZkzJhCZlT2XbSBBnynI=\n=5YLF\n-----END PGP SIGNATURE-----",
        "payload": "tree f40bd5e37cbec02730e9d7689bfee1dabd914347\nparent 8ce992063510b38fe7de89bec7af1d33aeeb5c93\nparent 60af755e56dc08f54c993ce0c044f3ff203b3f59\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1444906521 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1444906525 +0200\n\nMerge pull request #6820\n\n60af755 build: univalue subdir build fixups (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ce992063510b38fe7de89bec7af1d33aeeb5c93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ce992063510b38fe7de89bec7af1d33aeeb5c93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ce992063510b38fe7de89bec7af1d33aeeb5c93"
      },
      {
        "sha": "60af755e56dc08f54c993ce0c044f3ff203b3f59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60af755e56dc08f54c993ce0c044f3ff203b3f59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60af755e56dc08f54c993ce0c044f3ff203b3f59"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0a16a863eb5e647b7f11a8f419bbd675fd27640e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d78a880900c15c7a28ae81e6632090f25fea7fce/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d78a880900c15c7a28ae81e6632090f25fea7fce/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d78a880900c15c7a28ae81e6632090f25fea7fce",
        "patch": "@@ -36,8 +36,8 @@ LIBUNIVALUE=univalue/libunivalue.la\n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n   \n-$(LIBUNIVALUE): $(wildcard univalue/lib/*)\n-\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue/\n+$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n@@ -421,6 +421,7 @@ EXTRA_DIST = leveldb\n clean-local:\n \t-$(MAKE) -C leveldb clean\n \t-$(MAKE) -C secp256k1 clean\n+\t-$(MAKE) -C univalue clean\n \trm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n "
      }
    ]
  },
  {
    "sha": "b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDhkYTVjMTg5NGE3MGY4ZmEyYTUwZGViMmUwNTZjMzhlZDI3ZWNi",
    "commit": {
      "author": {
        "name": "David Hill",
        "email": "dhill@mindcry.org",
        "date": "2015-10-13T13:56:45Z"
      },
      "committer": {
        "name": "David Hill",
        "email": "dhill@mindcry.org",
        "date": "2015-10-15T13:48:15Z"
      },
      "message": "script:  Remove magic numbers\n\nThis adds two new constants, MAX_OPS_PER_SCRIPT and\nMAX_PUBKEYS_PER_MULTISIG.",
      "tree": {
        "sha": "39578acf78c9cfd4029d8b98bf1d05863058abcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39578acf78c9cfd4029d8b98bf1d05863058abcd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb/comments",
    "author": {
      "login": "dajohi",
      "id": 3308193,
      "node_id": "MDQ6VXNlcjMzMDgxOTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3308193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dajohi",
      "html_url": "https://github.com/dajohi",
      "followers_url": "https://api.github.com/users/dajohi/followers",
      "following_url": "https://api.github.com/users/dajohi/following{/other_user}",
      "gists_url": "https://api.github.com/users/dajohi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dajohi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dajohi/subscriptions",
      "organizations_url": "https://api.github.com/users/dajohi/orgs",
      "repos_url": "https://api.github.com/users/dajohi/repos",
      "events_url": "https://api.github.com/users/dajohi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dajohi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dajohi",
      "id": 3308193,
      "node_id": "MDQ6VXNlcjMzMDgxOTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3308193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dajohi",
      "html_url": "https://github.com/dajohi",
      "followers_url": "https://api.github.com/users/dajohi/followers",
      "following_url": "https://api.github.com/users/dajohi/following{/other_user}",
      "gists_url": "https://api.github.com/users/dajohi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dajohi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dajohi/subscriptions",
      "organizations_url": "https://api.github.com/users/dajohi/orgs",
      "repos_url": "https://api.github.com/users/dajohi/repos",
      "events_url": "https://api.github.com/users/dajohi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dajohi/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6a20d497c0492c5b1ff74eaae9fdcb4d506bbb50",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
        "patch": "@@ -273,7 +273,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n \n             // Note how OP_RESERVED does not count towards the opcode limit.\n-            if (opcode > OP_16 && ++nOpCount > 201)\n+            if (opcode > OP_16 && ++nOpCount > MAX_OPS_PER_SCRIPT)\n                 return set_error(serror, SCRIPT_ERR_OP_COUNT);\n \n             if (opcode == OP_CAT ||\n@@ -869,10 +869,10 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n \n                     int nKeysCount = CScriptNum(stacktop(-i), fRequireMinimal).getint();\n-                    if (nKeysCount < 0 || nKeysCount > 20)\n+                    if (nKeysCount < 0 || nKeysCount > MAX_PUBKEYS_PER_MULTISIG)\n                         return set_error(serror, SCRIPT_ERR_PUBKEY_COUNT);\n                     nOpCount += nKeysCount;\n-                    if (nOpCount > 201)\n+                    if (nOpCount > MAX_OPS_PER_SCRIPT)\n                         return set_error(serror, SCRIPT_ERR_OP_COUNT);\n                     int ikey = ++i;\n                     i += nKeysCount;"
      },
      {
        "sha": "263c89defe58309da0c8c5e9d063f1985d80247a",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
        "patch": "@@ -170,7 +170,7 @@ unsigned int CScript::GetSigOpCount(bool fAccurate) const\n             if (fAccurate && lastOpcode >= OP_1 && lastOpcode <= OP_16)\n                 n += DecodeOP_N(lastOpcode);\n             else\n-                n += 20;\n+                n += MAX_PUBKEYS_PER_MULTISIG;\n         }\n         lastOpcode = opcode;\n     }"
      },
      {
        "sha": "a38d33a1894ad57052b7e0bb56d560300f49d87c",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
        "patch": "@@ -17,7 +17,14 @@\n #include <string>\n #include <vector>\n \n-static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n+// Maximum number of bytes pushable to the stack\n+static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;\n+\n+// Maximum number of non-push operations per script\n+static const int MAX_OPS_PER_SCRIPT = 201;\n+\n+// Maximum number of public keys per multisig\n+static const int MAX_PUBKEYS_PER_MULTISIG = 20;\n \n // Threshold for nLockTime: below this value it is interpreted as block number,\n // otherwise as UNIX timestamp."
      }
    ]
  },
  {
    "sha": "338f62f701169a241221f4195d78d51d98b59ba8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzhmNjJmNzAxMTY5YTI0MTIyMWY0MTk1ZDc4ZDUxZDk4YjU5YmE4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-09T13:49:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-15T17:43:16Z"
      },
      "message": "[devtools] add clang-format.py",
      "tree": {
        "sha": "85f27c56fe45742571689e4c10a8d637e1f5fccc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85f27c56fe45742571689e4c10a8d637e1f5fccc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/338f62f701169a241221f4195d78d51d98b59ba8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338f62f701169a241221f4195d78d51d98b59ba8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/338f62f701169a241221f4195d78d51d98b59ba8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338f62f701169a241221f4195d78d51d98b59ba8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cf73b0cd4cf510aafc37719c68e6634c1719502",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cf73b0cd4cf510aafc37719c68e6634c1719502"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cee99047ac67e69fe767a910ac56811e574cfc8d",
        "filename": "contrib/devtools/clang-format.py",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/338f62f701169a241221f4195d78d51d98b59ba8/contrib/devtools/clang-format.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/338f62f701169a241221f4195d78d51d98b59ba8/contrib/devtools/clang-format.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format.py?ref=338f62f701169a241221f4195d78d51d98b59ba8",
        "patch": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python\n+'''\n+Wrapper script for clang-format\n+\n+Copyright (c) 2015 MarcoFalke\n+Copyright (c) 2015 The Bitcoin Core developers\n+Distributed under the MIT software license, see the accompanying\n+file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+\n+import os\n+import sys\n+import subprocess\n+\n+tested_versions = ['3.6.0', '3.6.1', '3.6.2'] # A set of versions known to produce the same output\n+accepted_file_extensions = ('.h', '.cpp') # Files to format\n+\n+def check_clang_format_version(clang_format_exe):\n+    try:\n+        output = subprocess.check_output([clang_format_exe, '-version'])\n+        for ver in tested_versions:\n+            if ver in output:\n+                print \"Detected clang-format version \" + ver\n+                return\n+        raise RuntimeError(\"Untested version: \" + output)\n+    except Exception as e:\n+        print 'Could not verify version of ' + clang_format_exe + '.'\n+        raise e\n+\n+def check_command_line_args(argv):\n+    required_args = ['{clang-format-exe}', '{files}']\n+    example_args = ['clang-format-3.x', 'src/main.cpp', 'src/wallet/*']\n+\n+    if(len(argv) < len(required_args) + 1):\n+        for word in (['Usage:', argv[0]] + required_args):\n+            print word,\n+        print ''\n+        for word in (['E.g:', argv[0]] + example_args):\n+            print word,\n+        print ''\n+        sys.exit(1)\n+\n+def run_clang_format(clang_format_exe, files):\n+    for target in files:\n+        if os.path.isdir(target):\n+            for path, dirs, files in os.walk(target):\n+                run_clang_format(clang_format_exe, (os.path.join(path, f) for f in files))\n+        elif target.endswith(accepted_file_extensions):\n+            print \"Format \" + target\n+            subprocess.check_call([clang_format_exe, '-i', '-style=file', target], stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)\n+        else:\n+            print \"Skip \" + target\n+\n+def main(argv):\n+    check_command_line_args(argv)\n+    clang_format_exe = argv[1]\n+    files = argv[2:]\n+    check_clang_format_version(clang_format_exe)\n+    run_clang_format(clang_format_exe, files)\n+\n+if __name__ == \"__main__\":\n+    main(sys.argv)"
      }
    ]
  },
  {
    "sha": "8c15f33d15fddd984946b56a257049e15ddf4038",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzE1ZjMzZDE1ZmRkZDk4NDk0NmI1NmEyNTcwNDllMTVkZGY0MDM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-15T17:42:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-15T18:28:29Z"
      },
      "message": "[trivial] Update contrib/devtools/README.md",
      "tree": {
        "sha": "f118dd5d49a4fc92d6a046969bdf88d73eae812c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f118dd5d49a4fc92d6a046969bdf88d73eae812c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c15f33d15fddd984946b56a257049e15ddf4038",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c15f33d15fddd984946b56a257049e15ddf4038",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c15f33d15fddd984946b56a257049e15ddf4038",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c15f33d15fddd984946b56a257049e15ddf4038/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "338f62f701169a241221f4195d78d51d98b59ba8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/338f62f701169a241221f4195d78d51d98b59ba8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/338f62f701169a241221f4195d78d51d98b59ba8"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "278794f14cadcfd035ddda6f42d1358cdb487504",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c15f33d15fddd984946b56a257049e15ddf4038/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c15f33d15fddd984946b56a257049e15ddf4038/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=8c15f33d15fddd984946b56a257049e15ddf4038",
        "patch": "@@ -1,9 +1,14 @@\n Contents\n-===========\n+========\n This directory contains tools for developers working on this repository.\n \n+clang-format.py\n+===============\n+\n+A script to format cpp source code according to [.clang-format](../../src/.clang-format). This should only be applied to new files or files which are currently not actively developed on. Also, git subtrees are not subject to formatting.\n+\n github-merge.sh\n-==================\n+===============\n \n A small script to automate merging pull-requests securely and sign them with GPG.\n \n@@ -37,23 +42,31 @@ Configuring the github-merge tool for the bitcoin repository is done in the foll\n     git config --global user.signingkey mykeyid (if you want to GPG sign)\n \n fix-copyright-headers.py\n-===========================\n+========================\n \n Every year newly updated files need to have its copyright headers updated to reflect the current year.\n If you run this script from src/ it will automatically update the year on the copyright header for all\n .cpp and .h files if these have a git commit from the current year.\n \n For example a file changed in 2014 (with 2014 being the current year):\n+\n ```// Copyright (c) 2009-2013 The Bitcoin Core developers```\n \n would be changed to:\n+\n ```// Copyright (c) 2009-2014 The Bitcoin Core developers```\n \n+optimize-pngs.py\n+================\n+\n+A script to optimize png files in the bitcoin\n+repository (requires pngcrush).\n+\n symbol-check.py\n-==================\n+===============\n \n A script to check that the (Linux) executables produced by gitian only contain\n-allowed gcc, glibc and libstdc++ version symbols.  This makes sure they are\n+allowed gcc, glibc and libstdc++ version symbols. This makes sure they are\n still compatible with the minimum supported Linux distribution versions.\n \n Example usage after a gitian build:\n@@ -70,7 +83,7 @@ If there are 'unsupported' symbols, the return value will be 1 a list like this\n     .../64/test_bitcoin: symbol _ZNSt8__detail15_List_nod from unsupported version GLIBCXX_3.4.15\n \n update-translations.py\n-=======================\n+======================\n \n Run this script from the root of the repository to update all translations from transifex.\n It will do the following automatically:\n@@ -93,4 +106,5 @@ maintained:\n * for sec/leveldb: https://github.com/bitcoin/leveldb.git (branch bitcoin-fork)\n \n Usage: git-subtree-check.sh DIR COMMIT\n+\n COMMIT may be omitted, in which case HEAD is used."
      }
    ]
  },
  {
    "sha": "0658d0ba8262a51c30278389cf0c1204934db9f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjU4ZDBiYTgyNjJhNTFjMzAyNzgzODljZjBjMTIwNDkzNGRiOWYz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-15T18:37:59Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-16T14:27:03Z"
      },
      "message": "temporarily comment out rpcbind.py\n\nuntil libevent is fixed.  also remove duplicate commented-out forknotify.py.",
      "tree": {
        "sha": "6eea254cead596af2826e7954622929b77cdbfc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6eea254cead596af2826e7954622929b77cdbfc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0658d0ba8262a51c30278389cf0c1204934db9f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0658d0ba8262a51c30278389cf0c1204934db9f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0658d0ba8262a51c30278389cf0c1204934db9f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0658d0ba8262a51c30278389cf0c1204934db9f3/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "65a021bbc21b4266c85b93541889a5c083843309",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0658d0ba8262a51c30278389cf0c1204934db9f3/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0658d0ba8262a51c30278389cf0c1204934db9f3/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=0658d0ba8262a51c30278389cf0c1204934db9f3",
        "patch": "@@ -81,12 +81,11 @@\n     'invalidateblock.py',\n     'keypool.py',\n     'receivedby.py',\n-    'rpcbind_test.py',\n-#   'script_test.py',\n+#    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n+#   'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'invalidblockrequest.py',\n-#    'forknotify.py',\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n ]"
      }
    ]
  },
  {
    "sha": "b6d5e32e0e5b038c6ff7e2ab5221b10727722341",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmQ1ZTMyZTBlNWIwMzhjNmZmN2UyYWI1MjIxYjEwNzI3NzIyMzQx",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-16T20:54:03Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-17T19:52:40Z"
      },
      "message": "Make fee aware of min relay in pruning.py RPC test",
      "tree": {
        "sha": "ff99390949cb6bc92ad71fc1eb2ac00dd444faf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff99390949cb6bc92ad71fc1eb2ac00dd444faf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6d5e32e0e5b038c6ff7e2ab5221b10727722341",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6d5e32e0e5b038c6ff7e2ab5221b10727722341",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6d5e32e0e5b038c6ff7e2ab5221b10727722341",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6d5e32e0e5b038c6ff7e2ab5221b10727722341/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "21f8d69382d02055141f1a57829b8e6aaf217d9f",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6d5e32e0e5b038c6ff7e2ab5221b10727722341/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6d5e32e0e5b038c6ff7e2ab5221b10727722341/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=b6d5e32e0e5b038c6ff7e2ab5221b10727722341",
        "patch": "@@ -61,6 +61,9 @@ def setup_network(self):\n         self.address[0] = self.nodes[0].getnewaddress()\n         self.address[1] = self.nodes[1].getnewaddress()\n \n+        # Determine default relay fee\n+        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n         connect_nodes(self.nodes[2], 0)\n@@ -239,7 +242,7 @@ def mine_full_block(self, node, address):\n             outputs = {}\n             t = self.utxo.pop()\n             inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n-            remchange = t[\"amount\"] - Decimal(\"0.001000\")\n+            remchange = t[\"amount\"] - 100*self.relayfee # Fee must be above min relay rate for 66kb tx\n             outputs[address]=remchange\n             # Create a basic transaction that will send change back to ourself after account for a fee\n             # And then insert the 128 generated transaction outs in the middle rawtx[92] is where the #"
      }
    ]
  },
  {
    "sha": "99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTk2M2I5MzhmZmI0YWQzN2Y0YTlkMjc1OTk4YmYxYTlkYzExZTY0",
    "commit": {
      "author": {
        "name": "Mitchell Cash",
        "email": "mitchell.cash@gmail.com",
        "date": "2015-10-17T10:10:45Z"
      },
      "committer": {
        "name": "Mitchell Cash",
        "email": "mitchell.cash@gmail.com",
        "date": "2015-10-17T20:25:43Z"
      },
      "message": "Correct spelling mistakes in doc folder\n\n- OSX \u2014> OS X\n- XCode \u2014> Xcode\n- github \u2014> GitHub\n- homebrew \u2014> Homebrew\n- gitian \u2014> Gitian\n- Other miscellaneous obvious spelling fixes and whitespace removal",
      "tree": {
        "sha": "8d14d5301951a96d682b404e0ea0b247fd0eded1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d14d5301951a96d682b404e0ea0b247fd0eded1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/comments",
    "author": {
      "login": "MitchellCash",
      "id": 8009243,
      "node_id": "MDQ6VXNlcjgwMDkyNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8009243?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MitchellCash",
      "html_url": "https://github.com/MitchellCash",
      "followers_url": "https://api.github.com/users/MitchellCash/followers",
      "following_url": "https://api.github.com/users/MitchellCash/following{/other_user}",
      "gists_url": "https://api.github.com/users/MitchellCash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MitchellCash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MitchellCash/subscriptions",
      "organizations_url": "https://api.github.com/users/MitchellCash/orgs",
      "repos_url": "https://api.github.com/users/MitchellCash/repos",
      "events_url": "https://api.github.com/users/MitchellCash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MitchellCash/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MitchellCash",
      "id": 8009243,
      "node_id": "MDQ6VXNlcjgwMDkyNDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8009243?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MitchellCash",
      "html_url": "https://github.com/MitchellCash",
      "followers_url": "https://api.github.com/users/MitchellCash/followers",
      "following_url": "https://api.github.com/users/MitchellCash/following{/other_user}",
      "gists_url": "https://api.github.com/users/MitchellCash/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MitchellCash/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MitchellCash/subscriptions",
      "organizations_url": "https://api.github.com/users/MitchellCash/orgs",
      "repos_url": "https://api.github.com/users/MitchellCash/repos",
      "events_url": "https://api.github.com/users/MitchellCash/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MitchellCash/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 99,
      "deletions": 103
    },
    "files": [
      {
        "sha": "08fd724355b6099dd7747b33beadd26ea0ddf667",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -7,7 +7,7 @@ Setup\n \n Running\n ---------------------\n-The following are some helpful notes on how to run Bitcoin on your native platform. \n+The following are some helpful notes on how to run Bitcoin on your native platform.\n \n ### Unix\n \n@@ -26,7 +26,7 @@ Unpack the files into a directory and run:\n \n Unpack the files into a directory, and then run bitcoin-qt.exe.\n \n-### OSX\n+### OS X\n \n Drag Bitcoin-Qt to your applications folder, and then run Bitcoin-Qt.\n \n@@ -41,7 +41,7 @@ Building\n ---------------------\n The following are developer notes on how to build Bitcoin on your native platform. They are not complete guides, but include notes on the necessary libraries, compile flags, etc.\n \n-- [OSX Build Notes](build-osx.md)\n+- [OS X Build Notes](build-osx.md)\n - [Unix Build Notes](build-unix.md)\n - [Gitian Building Guide](gitian-building.md)\n "
      },
      {
        "sha": "f589bfc676f5c313e68403cd1948915fd852f23b",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,12 +1,12 @@\n-Deterministic OSX Dmg Notes.\n+Deterministic OS X Dmg Notes.\n \n-Working OSX DMGs are created in Linux by combining a recent clang,\n+Working OS X DMGs are created in Linux by combining a recent clang,\n the Apple's binutils (ld, ar, etc), and DMG authoring tools.\n \n Apple uses clang extensively for development and has upstreamed the necessary\n functionality so that a vanilla clang can take advantage. It supports the use\n of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for OSX. A pre-compiled version of 3.2 is used because it was not\n+when building for OS X. A pre-compiled version of 3.2 is used because it was not\n available in the Precise repositories at the time this work was started. In the\n future, it can be switched to use system packages instead.\n \n@@ -29,18 +29,18 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the XCode 6.1.1 dmg:\n+To obtain it, register for a developer account, then download the Xcode 6.1.1 dmg:\n https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n \n This file is several gigabytes in size, but only a single directory inside is\n needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n-To create a tarball suitable for gitian input, mount the dmg in OSX, then create it with:\n+To create a tarball suitable for Gitian input, mount the dmg in OS X, then create it with:\n   $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n \n-The gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n which are created using these tools. The build process has been designed to\n avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n fully deterministic and may be freely redistributed.\n@@ -64,20 +64,20 @@ Ideally, the creation could be fixed and genisoimage would no longer be necessar\n \n Background images and other features can be added to DMG files by inserting a\n .DS_Store before creation. The easiest way to create this file is to build a\n-DMG without one, move it to a device running OSX, customize the layout, then\n+DMG without one, move it to a device running OS X, customize the layout, then\n grab the .DS_Store file for later use. That is the approach taken here.\n \n-As of OSX Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n+As of OS X Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n requirement in order to satisfy the new Gatekeeper requirements. Because this\n private key cannot be shared, we'll have to be a bit creative in order for the\n build process to remain somewhat deterministic. Here's how it works:\n \n-- Builders use gitian to create an unsigned release. This outputs an unsigned\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned\n   dmg which users may choose to bless and run. It also outputs an unsigned app\n   structure in the form of a tarball, which also contains all of the tools\n   that have been previously (deterministically) built in order to create a\n   final dmg.\n - The Apple keyholder uses this unsigned app to create a detached signature,\n   using the script that is also included there.\n-- Builders feed the unsigned app + detached signature back into gitian. It\n+- Builders feed the unsigned app + detached signature back into Gitian. It\n   uses the pre-built tools to recombine the pieces into a deterministic dmg."
      },
      {
        "sha": "d923301467a7f0ae394accd19cd7362feff3120a",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -38,7 +38,7 @@ Do not use `pkg_add boost`! The boost version installed thus is compiled using t\n \n     test_bitcoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n     ...\n-    Segmentation fault (core dumped) \n+    Segmentation fault (core dumped)\n \n This makes it necessary to build boost, or at least the parts used by Bitcoin Core, manually:\n \n@@ -57,7 +57,7 @@ tar -xjf boost_1_59_0.tar.bz2\n # Boost 1.59 needs two small patches for OpenBSD\n cd boost_1_59_0\n # Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n-patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp \n+patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n # https://github.com/boostorg/filesystem/commit/90517e459681790a091566dce27ca3acabf9a70c\n sed 's/__OPEN_BSD__/__OpenBSD__/g' < libs/filesystem/src/path.cpp > libs/filesystem/src/path.cpp.tmp\n mv libs/filesystem/src/path.cpp.tmp libs/filesystem/src/path.cpp\n@@ -92,7 +92,7 @@ tar -xzf db-4.8.30.NC.tar.gz\n # Build the library and install to specified prefix\n cd db-4.8.30.NC/build_unix/\n #  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp \n+../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n make install\n ```\n \n@@ -160,4 +160,3 @@ version installed by OpenBSD 5.7:\n - https://llvm.org/bugs/show_bug.cgi?id=9758\n \n There is no known workaround for this.\n-"
      },
      {
        "sha": "69c401b751ee9ef8538c9191993b8a9a3ea7e35d",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,6 +1,6 @@\n Mac OS X Build Instructions and Notes\n ====================================\n-This guide will show you how to build bitcoind (headless client) for OSX.\n+This guide will show you how to build bitcoind (headless client) for OS X.\n \n Notes\n -----\n@@ -13,8 +13,8 @@ built-in one is located in `/Applications/Utilities`.\n Preparation\n -----------\n \n-You need to install XCode with all the options checked so that the compiler\n-and everything is available in /usr not just /Developer. XCode should be\n+You need to install Xcode with all the options checked so that the compiler\n+and everything is available in /usr not just /Developer. Xcode should be\n available on your OS X installation media, but if not, you can get the\n current version from https://developer.apple.com/xcode/. If you install\n Xcode 4.3 or later, you'll need to install its command line tools. This can\n@@ -38,7 +38,7 @@ NOTE: Building with Qt4 is still supported, however, could result in a broken UI\n \n ### Building `bitcoind`\n \n-1. Clone the github tree to get the source code and go into the directory.\n+1. Clone the GitHub tree to get the source code and go into the directory.\n \n         git clone https://github.com/bitcoin/bitcoin.git\n         cd bitcoin\n@@ -62,7 +62,7 @@ Use Qt Creator as IDE\n You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n \n-1. Make sure you installed everything through homebrew mentioned above \n+1. Make sure you installed everything through Homebrew mentioned above\n 2. Do a proper ./configure --with-gui=qt5 --enable-debug\n 3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n 4. Enter \"bitcoin-qt\" as project name, enter src/qt as location"
      },
      {
        "sha": "4189d221878bee2d58ff9c6cf2327d31a0d53dff",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -57,7 +57,7 @@ As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this cas\n \n To describe a class use the same construct above the class definition:\n ```c++\n-/** \n+/**\n  * Alerts are for notifying old versions if they become too obsolete and\n  * need to upgrade. The message is displayed in the status bar.\n  * @see GetWarnings()"
      },
      {
        "sha": "55a5c28258c67704fb926e0ad71d448440babdaa",
        "filename": "doc/dnsseed-policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/dnsseed-policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/dnsseed-policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dnsseed-policy.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -7,7 +7,7 @@ As such, DNS seeds must be run by entities which have some minimum\n level of trust within the Bitcoin community.\n \n Other implementations of Bitcoin software may also use the same\n-seeds and may be more exposed. In light of this exposure, this \n+seeds and may be more exposed. In light of this exposure, this\n document establishes some basic expectations for operating dnsseeds.\n \n 0. A DNS seed operating organization or person is expected to follow good"
      },
      {
        "sha": "00fdce82e81a1886f2ac3f8846c8e4c2900d0c92",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,7 +1,7 @@\n Gitian building\n ================\n \n-*Setup instructions for a gitian build of Bitcoin using a Debian VM or physical system.*\n+*Setup instructions for a Gitian build of Bitcoin using a Debian VM or physical system.*\n \n Gitian is the deterministic build process that is used to build the Bitcoin\n Core executables. It provides a way to be reasonably sure that the\n@@ -13,7 +13,7 @@ Multiple developers build the source code by following a specific descriptor\n These results are compared and only if they match, the build is accepted and uploaded\n to bitcoin.org.\n \n-More independent gitian builders are needed, which is why this guide exists. \n+More independent Gitian builders are needed, which is why this guide exists.\n It is preferred you follow these steps yourself instead of using someone else's\n VM image to avoid 'contaminating' the build.\n \n@@ -22,9 +22,9 @@ Table of Contents\n \n - [Create a new VirtualBox VM](#create-a-new-virtualbox-vm)\n - [Connecting to the VM](#connecting-to-the-vm)\n-- [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n-- [Installing gitian](#installing-gitian)\n-- [Setting up the gitian image](#setting-up-the-gitian-image)\n+- [Setting up Debian for Gitian building](#setting-up-debian-for-gitian-building)\n+- [Installing Gitian](#installing-gitian)\n+- [Setting up the Gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -43,7 +43,7 @@ Any kind of virtualization can be used, for example:\n - [KVM](http://www.linux-kvm.org/page/Main_Page)\n - [LXC](https://linuxcontainers.org/), see also [Gitian host docker container](https://github.com/gdm85/tenku/tree/master/docker/gitian-bitcoin-host/README.md).\n \n-You can also install gitian on actual hardware instead of using virtualization.\n+You can also install Gitian on actual hardware instead of using virtualization.\n \n Create a new VirtualBox VM\n ---------------------------\n@@ -60,18 +60,18 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n ![](gitian-building/create_vm_hard_disk.png)\n \n - Hard Disk: Create a virtual hard disk now\n-    \n+\n ![](gitian-building/create_vm_hard_disk_file_type.png)\n \n-- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image) \n+- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image)\n \n ![](gitian-building/create_vm_storage_physical_hard_disk.png)\n-    \n-- Storage on physical hard disk: Dynamically Allocated \n-    \n+\n+- Storage on physical hard disk: Dynamically Allocated\n+\n ![](gitian-building/create_vm_file_location_size.png)\n \n-- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n+- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side\n - Click `Create`\n \n Get the [Debian 8.x net installer](http://cdimage.debian.org/debian-cd/8.2.0/amd64/iso-cd/debian-8.2.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n@@ -81,7 +81,7 @@ Unixy OSes by entering the following in a terminal:\n     echo \"d393d17ac6b3113c81186e545c416a00f28ed6e05774284bb5e8f0df39fcbcb9  debian-8.2.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n-After creating the VM, we need to configure it. \n+After creating the VM, we need to configure it.\n \n - Click the `Settings` button, then go to the `Network` tab. Adapter 1 should be attached to `NAT`.\n \n@@ -115,8 +115,8 @@ This section will explain how to install Debian on the newly created VM.\n \n ![](gitian-building/debian_install_1_boot_menu.png)\n \n-**Note**: Navigating in the Debian installer: \n-To keep a setting at the default and proceed, just press `Enter`. \n+**Note**: Navigating in the Debian installer:\n+To keep a setting at the default and proceed, just press `Enter`.\n To select a different button, press `Tab`.\n \n - Choose locale and keyboard settings (doesn't matter, you can just go with the defaults or select your own information)\n@@ -126,23 +126,23 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_4_configure_keyboard.png)\n \n - The VM will detect network settings using DHCP, this should all proceed automatically\n-- Configure the network: \n+- Configure the network:\n   - Hostname `debian`.\n   - Leave domain name empty.\n \n ![](gitian-building/debian_install_5_configure_the_network.png)\n \n-- Choose a root password and enter it twice (remember it for later) \n+- Choose a root password and enter it twice (remember it for later)\n \n ![](gitian-building/debian_install_6a_set_up_root_password.png)\n \n-- Name the new user `debian` (the full name doesn't matter, you can leave it empty) \n+- Name the new user `debian` (the full name doesn't matter, you can leave it empty)\n - Set the account username as `debian`\n \n ![](gitian-building/debian_install_7_set_up_user_fullname.png)\n ![](gitian-building/debian_install_8_set_up_username.png)\n \n-- Choose a user password and enter it twice (remember it for later) \n+- Choose a user password and enter it twice (remember it for later)\n \n ![](gitian-building/debian_install_9_user_password.png)\n \n@@ -152,11 +152,11 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_10_configure_clock.png)\n \n - Disk setup\n-  - Partitioning method: Guided - Use the entire disk \n-  \n+  - Partitioning method: Guided - Use the entire disk\n+\n ![](gitian-building/debian_install_11_partition_disks.png)\n \n-  - Select disk to partition: SCSI1 (0,0,0) \n+  - Select disk to partition: SCSI1 (0,0,0)\n \n ![](gitian-building/debian_install_12_choose_disk.png)\n \n@@ -166,7 +166,7 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_15_write_changes.png)\n \n - The base system will be installed, this will take a minute or so\n-- Choose a mirror (any will do) \n+- Choose a mirror (any will do)\n \n ![](gitian-building/debian_install_16_choose_a_mirror.png)\n \n@@ -201,7 +201,7 @@ After Installation\n The next step in the guide involves logging in as root via SSH.\n SSH login for root users is disabled by default, so we'll enable that now.\n \n-Login to the VM using username `root` and the root password you choose earlier.\n+Login to the VM using username `root` and the root password you chose earlier.\n You'll be presented with a screen similar to this.\n \n ![](gitian-building/debian_root_login.png)\n@@ -243,7 +243,7 @@ For example, to connect as `root` from a Linux command prompt use\n \n Replace `root` with `debian` to log in as user.\n \n-Setting up Debian for gitian building\n+Setting up Debian for Gitian building\n --------------------------------------\n \n In this section we will be setting up the Debian installation for Gitian building.\n@@ -260,7 +260,7 @@ Then set up LXC and the rest with the following, which is a complex jumble of se\n \n ```bash\n # the version of lxc-start in Debian 7.4 needs to run as root, so make sure\n-# that the build script can exectute it without providing a password\n+# that the build script can execute it without providing a password\n echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-start\" > /etc/sudoers.d/gitian-lxc\n # add cgroup for LXC\n echo \"cgroup  /sys/fs/cgroup  cgroup  defaults  0   0\" >> /etc/fstab\n@@ -280,7 +280,7 @@ reboot\n At the end the VM is rebooted to make sure that the changes take effect. The steps in this\n section only need to be performed once.\n \n-Installing gitian\n+Installing Gitian\n ------------------\n \n Re-login as the user `debian` that was created during installation.\n@@ -300,14 +300,14 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian.\n+Clone the git repositories for bitcoin and Gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n ```\n \n-Setting up the gitian image\n+Setting up the Gitian image\n -------------------------\n \n Gitian needs a virtual image of the operating system to build in.\n@@ -333,14 +333,14 @@ Getting and building the inputs\n Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-build-inputs-first-time-or-when-dependency-versions-change)\n in the bitcoin repository under 'Fetch and build inputs' to install sources which require\n manual intervention. Also optionally follow the next step: 'Seed the Gitian sources cache\n-and offline git repositories' which will fetch the remaining files required for building \n+and offline git repositories' which will fetch the remaining files required for building\n offline.\n \n Building Bitcoin\n ----------------\n \n-To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perform\n-gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n+To build Bitcoin (for Linux, OS X and Windows) just follow the steps under 'perform\n+Gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n \n This may take some time as it will build all the dependencies needed for each descriptor.\n These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n@@ -380,7 +380,7 @@ Building an alternative repository\n -----------------------------------\n \n If you want to do a test build of a pull on GitHub it can be useful to point\n-the gitian builder at an alternative repository, using the same descriptors\n+the Gitian builder at an alternative repository, using the same descriptors\n and inputs.\n \n For example:\n@@ -395,9 +395,9 @@ COMMIT=2014_03_windows_unicode_path\n Building fully offline\n -----------------------\n \n-For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository \n+For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository\n and the bitcoin git repository with the desired tag must both be available locally, and then gbuild must be\n-told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or \n+told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or\n manually disabling gitian-builder's use of apt-get to update the VM build environment.\n \n To configure apt-cacher-ng as an offline cacher, you will need to first populate its cache with the relevant\n@@ -417,7 +417,7 @@ LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root \\\n   -e DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n   $( sed -ne '/^packages:/,/[^-] .*/ {/^- .*/{s/\"//g;s/- //;p}}' ../bitcoin/contrib/gitian-descriptors/*|sort|uniq )\n LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root apt-get -q -y purge grub\n-LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade \n+LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\n ```\n \n And then set offline mode for apt-cacher-ng:\n@@ -431,7 +431,7 @@ Offlinemode: 1\n service apt-cacher-ng restart\n ```\n \n-Then when building, override the remote URLs that gbuild would otherwise pull from the gitian descriptors::\n+Then when building, override the remote URLs that gbuild would otherwise pull from the Gitian descriptors::\n ```bash\n \n cd /some/root/path/\n@@ -461,7 +461,7 @@ in `gitian.sigs` to your signing machine and do\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your\n-gitian build.\n+Gitian build.\n \n Uploading signatures\n ---------------------"
      },
      {
        "sha": "d24c2d1dbf49cbf7108df1e99d3261215ae253be",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -29,20 +29,20 @@ file, however it is recommended that a strong and secure password be used\n as this password is security critical to securing the wallet should the\n wallet be enabled.\n \n-If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set, \n-it will use a special cookie file for authentication. The cookie is generated with random \n+If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set,\n+it will use a special cookie file for authentication. The cookie is generated with random\n content when the daemon starts, and deleted when it exits. Read access to this file\n-controls who can access it through RPC. \n+controls who can access it through RPC.\n \n-By default the cookie is stored in the data directory, but it's location can be overridden \n+By default the cookie is stored in the data directory, but it's location can be overridden\n with the option '-rpccookiefile'.\n \n This allows for running bitcoind without having to do any manual configuration.\n \n-`conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n+`conf`, `pid`, and `wallet` accept relative paths which are interpreted as\n relative to the data directory. `wallet` *only* supports relative paths.\n \n-For an example configuration file that describes the configuration settings, \n+For an example configuration file that describes the configuration settings,\n see `contrib/debian/examples/bitcoin.conf`.\n \n 3. Paths\n@@ -93,13 +93,12 @@ use old versions of Upstart and do not supply the start-stop-daemon utility.\n \n Copy bitcoind.init to /etc/init.d/bitcoind. Test by running `service bitcoind start`.\n \n-Using this script, you can adjust the path and flags to the bitcoind program by \n-setting the BITCOIND and FLAGS environment variables in the file \n+Using this script, you can adjust the path and flags to the bitcoind program by\n+setting the BITCOIND and FLAGS environment variables in the file\n /etc/sysconfig/bitcoind. You can also use the DAEMONOPTS environment variable here.\n \n 5. Auto-respawn\n -----------------------------------\n \n Auto respawning is currently only configured for Upstart and systemd.\n Reasonable defaults have been chosen but YMMV.\n-"
      },
      {
        "sha": "e9b2d75a760ce734d789dd7d3452310dabeca2cb",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -181,7 +181,7 @@ configured specifically to process scriptPubKey and not scriptSig scripts.\n \n - Removed bitrpc.py from contrib\n \n-Addition of ZMQ-based Notifcations\n+Addition of ZMQ-based Notifications\n ==================================\n \n Bitcoind can now (optionally) asynchronously notify clients through a"
      },
      {
        "sha": "9a2362cb8506884c43a3791c92fe94e8bd2d4f01",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -6,7 +6,7 @@ Release Process\n \n * * *\n \n-###First time / New builders \n+###First time / New builders\n Check out the source code in the following directory hierarchy.\n \n \tcd /path/to/your/toplevel/build\n@@ -34,17 +34,17 @@ Check out the source code in the following directory hierarchy.\n \n * * *\n \n-###Setup and perform gitian builds\n+###Setup and perform Gitian builds\n+\n+ Setup Gitian descriptors:\n \n- Setup gitian descriptors:\n-  \n \tpushd ./bitcoin\n-\texport SIGNER=(your gitian key, ie bluematt, sipa, etc)\n+\texport SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n \texport VERSION=(new version, e.g. 0.8.0)\n \tgit checkout v${VERSION}\n \tpopd\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other gitian signatures.\n+  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n \n \tpushd ./gitian.sigs\n \tgit pull\n@@ -56,35 +56,35 @@ Check out the source code in the following directory hierarchy.\n \tgit pull\n \n ###Fetch and create inputs: (first time, or when dependency versions change)\n- \n+\n \tmkdir -p inputs\n \twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n \twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n \n- Register and download the Apple SDK: see [OSX readme](README_osx.txt) for details.\n- \n+ Register and download the Apple SDK: see [OS X readme](README_osx.txt) for details.\n+\n  https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n- \n+\n  Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n- \n+\n \ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n ###Optional: Seed the Gitian sources cache and offline git repositories\n \n-By default, gitian will fetch source files as needed. To cache them ahead of time:\n+By default, Gitian will fetch source files as needed. To cache them ahead of time:\n \n \tmake -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n-NOTE: Offline builds must use the --url flag to ensure gitian fetches only from local URLs. For example: \n+NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n ```\n-./bin/bguild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n ```\n The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n ###Build (and optionally verify) Bitcoin Core for Linux, Windows, and OS X:\n-  \n+\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n@@ -108,8 +108,8 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n   1. source tarball (bitcoin-${VERSION}.tar.gz)\n   2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n   3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OSX unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your gitian key)/\n+  4. OS X unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n+  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/\n \n ###Next steps:\n \n@@ -123,12 +123,12 @@ Commit your signature to gitian.sigs:\n \tgit push  # Assuming you can push to the gitian.sigs tree\n \tpopd\n \n-  Wait for Windows/OSX detached signatures:\n+  Wait for Windows/OS X detached signatures:\n \n-\tOnce the Windows/OSX builds each have 3 matching signatures, they will be signed with their respective release keys.\n+\tOnce the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n \tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-  Create (and optionally verify) the signed OSX binary:\n+  Create (and optionally verify) the signed OS X binary:\n \n \tpushd ./gitian-builder\n \t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n@@ -147,7 +147,7 @@ Commit your signature to gitian.sigs:\n \tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n \tpopd\n \n-Commit your signature for the signed OSX/Windows binaries:\n+Commit your signature for the signed OS X/Windows binaries:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-osx-signed/${SIGNER}"
      },
      {
        "sha": "594897f89670716ad845596dccd5cc7ff6253586",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -15,15 +15,15 @@ outgoing connections be anonymized, but more is possible.\n \n \t-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n \t                server will be used to try to reach .onion addresses as well.\n-\t\n+\n \t-onion=ip:port  Set the proxy server to use for tor hidden services. You do not\n \t                need to set this if it's the same as -proxy. You can use -noonion\n \t                to explicitly disable access to hidden service.\n-\t\n+\n \t-listen         When using -proxy, listening is disabled by default. If you want\n \t                to run a hidden service (see next section), you'll need to enable\n \t                it explicitly.\n-\t\n+\n \t-connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n \t-addnode=X      of IP addresses or hostnames in these parameters. It requires\n \t-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n@@ -55,10 +55,10 @@ your bitcoind's P2P listen port (8333 by default).\n \t                preference for your node to advertize itself with, for connections\n \t                coming from unroutable addresses (such as 127.0.0.1, where the\n \t                Tor proxy typically runs).\n-\t\n+\n \t-listen         You'll need to enable listening for incoming connections, as this\n \t                is off by default behind a proxy.\n-\t\n+\n \t-discover       When -externalip is specified, no attempt is made to discover local\n \t                IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n \t                from both Tor and IPv4 (or IPv6), you'll need to either pass your\n@@ -87,4 +87,3 @@ If you only want to use Tor to reach onion addresses, but not use it as a proxy\n for normal IPv4/IPv6 communication, use:\n \n \t./bitcoin -onion=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n-"
      },
      {
        "sha": "6389c5acedf7929598892c879efc1855e8ae096e",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,7 +1,7 @@\n Translations\n ============\n \n-The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool. \n+The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface."
      },
      {
        "sha": "936a6112c65f83956a0dc8260d96f65b56b847ec",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -1,7 +1,7 @@\n Translation Strings Policy\n ===========================\n \n-This document provides guidelines for internationalization of the Bitcoin Core software. \n+This document provides guidelines for internationalization of the Bitcoin Core software.\n \n How to translate?\n ------------------\n@@ -107,4 +107,3 @@ The second example reduces the number of pluralized words that translators have\n During a string freeze (often before a major release), no translation strings are to be added, modified or removed.\n \n This can be checked by executing `make translate` in the `src` directory, then verifying that `bitcoin_en.ts` remains unchanged.\n-"
      },
      {
        "sha": "902d1124c766de4e51ffc14f37a84e88f0624b1c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99963b938ffb4ad37f4a9d275998bf1a9dc11e64/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "patch": "@@ -2,7 +2,7 @@\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n-providing various message-oriented semantics such as publish/subcribe,\n+providing various message-oriented semantics such as publish/subscribe,\n request/reply, and push/pull.\n \n The Bitcoin Core daemon can be configured to act as a trusted \"border"
      }
    ]
  },
  {
    "sha": "c6824f8a90e33277de4db826bf1c65692a67be47",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjgyNGY4YTkwZTMzMjc3ZGU0ZGI4MjZiZjFjNjU2OTJhNjdiZTQ3",
    "commit": {
      "author": {
        "name": "J Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-10-18T16:27:41Z"
      },
      "committer": {
        "name": "J Ross Nicoll",
        "email": "jrn@jrn.me.uk",
        "date": "2015-10-18T16:27:41Z"
      },
      "message": "Add DERSIG transaction test cases\n\nAdd test cases for DERSIG flag enforcement against transactions.",
      "tree": {
        "sha": "04c84bdd38a721326dd3e13e576c01f41740b6b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04c84bdd38a721326dd3e13e576c01f41740b6b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6824f8a90e33277de4db826bf1c65692a67be47",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6824f8a90e33277de4db826bf1c65692a67be47",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6824f8a90e33277de4db826bf1c65692a67be47",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6824f8a90e33277de4db826bf1c65692a67be47/comments",
    "author": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rnicoll",
      "id": 3513077,
      "node_id": "MDQ6VXNlcjM1MTMwNzc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3513077?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rnicoll",
      "html_url": "https://github.com/rnicoll",
      "followers_url": "https://api.github.com/users/rnicoll/followers",
      "following_url": "https://api.github.com/users/rnicoll/following{/other_user}",
      "gists_url": "https://api.github.com/users/rnicoll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rnicoll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rnicoll/subscriptions",
      "organizations_url": "https://api.github.com/users/rnicoll/orgs",
      "repos_url": "https://api.github.com/users/rnicoll/repos",
      "events_url": "https://api.github.com/users/rnicoll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rnicoll/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d3c859434255bc626c744986e4fb066b64813faa",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6824f8a90e33277de4db826bf1c65692a67be47/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6824f8a90e33277de4db826bf1c65692a67be47/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=c6824f8a90e33277de4db826bf1c65692a67be47",
        "patch": "@@ -193,5 +193,9 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH,DERSIG\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "0dfef73ae5e2bf3c2adf38fbe88184ebb4171424",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6824f8a90e33277de4db826bf1c65692a67be47/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6824f8a90e33277de4db826bf1c65692a67be47/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=c6824f8a90e33277de4db826bf1c65692a67be47",
        "patch": "@@ -229,5 +229,9 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "d2e3fbc620550d133f7569c32927b889c3a4953b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMmUzZmJjNjIwNTUwZDEzM2Y3NTY5YzMyOTI3Yjg4OWMzYTQ5NTNi",
    "commit": {
      "author": {
        "name": "Thomas Kerin",
        "email": "afk11@users.noreply.github.com",
        "date": "2015-10-18T18:04:14Z"
      },
      "committer": {
        "name": "Thomas Kerin",
        "email": "afk11@users.noreply.github.com",
        "date": "2015-10-18T18:04:14Z"
      },
      "message": "Mention PHP bindings to libbitcoinconsensus",
      "tree": {
        "sha": "86c3e3513a59b5aeb67e6125f26e283b934edcda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86c3e3513a59b5aeb67e6125f26e283b934edcda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2e3fbc620550d133f7569c32927b889c3a4953b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "bad_email",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJWI98eAAoJEAiDZR291eTltpwP/002Us48Fld71KzdEi2F3sZs\nOZXh1jBCadxSn2eK0ThDg0YCCn9lAn06ic83IyCkGuBjUizxuvenYY6soXQHXOu7\nzBZFi2/Ne5QDItW3QBOEwgtHYwInPji1BBla1TmNWEIzilrgnSJnd53PwBwufmkC\nDTgX9KqgIkshoal80o+QV20hHNFukI6rZQcnHZUkuq6RR3k+MT+/vlHLJUARbfql\nX36HG9+p+Yjrc0QHmZPKPx1eBp8anIbPyw9DmUilKvO+OLK83ciqhiVh27gcfodK\ny4T9htr1IgmuLE4lcGzQWp0jYSNrUraD/Cm+R3k5e++S9ndFEP4NxDhCHf11plln\nm4MxxTm6vuQq6fhEoOURmU+sWlJ3Cwh1JoDhaHVvx/jijYDq6Ca+mxALMyBmWumC\nmxZq4PhYaxx54WbmBLBzKussHUPqAleLrDo3JPDkIjOYoMgQ0NMQffN8Jdxk4jQ6\nmNw6a5UrQXn75KLnnz0Ux5hVuv2i6hsKa4wi/MF2qz2Gogqf43f6+lXUxv19o5Pn\nxAlQNefLMLpLFevacZurNHuQ1eCkx2L/tC4lofCtRQx9FayXE6gxIBk0+CQo/56f\nPdQh6wYgjh2xcw1WxpnZWN94c7S4RqHFluNjWndveQPOfrd2X/ut7I235fSjFAC7\nKDh4lH/sbMYw7oLpjtQ9\n=on9x\n-----END PGP SIGNATURE-----",
        "payload": "tree 86c3e3513a59b5aeb67e6125f26e283b934edcda\nparent d78a880900c15c7a28ae81e6632090f25fea7fce\nauthor Thomas Kerin <afk11@users.noreply.github.com> 1445191454 +0100\ncommitter Thomas Kerin <afk11@users.noreply.github.com> 1445191454 +0100\n\nMention PHP bindings to libbitcoinconsensus\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e3fbc620550d133f7569c32927b889c3a4953b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2e3fbc620550d133f7569c32927b889c3a4953b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e3fbc620550d133f7569c32927b889c3a4953b/comments",
    "author": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "afk11",
      "id": 5617245,
      "node_id": "MDQ6VXNlcjU2MTcyNDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5617245?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/afk11",
      "html_url": "https://github.com/afk11",
      "followers_url": "https://api.github.com/users/afk11/followers",
      "following_url": "https://api.github.com/users/afk11/following{/other_user}",
      "gists_url": "https://api.github.com/users/afk11/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/afk11/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/afk11/subscriptions",
      "organizations_url": "https://api.github.com/users/afk11/orgs",
      "repos_url": "https://api.github.com/users/afk11/repos",
      "events_url": "https://api.github.com/users/afk11/events{/privacy}",
      "received_events_url": "https://api.github.com/users/afk11/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f4ff53d6e925948fc08eb55aff2fb7e713556dcd",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2e3fbc620550d133f7569c32927b889c3a4953b/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2e3fbc620550d133f7569c32927b889c3a4953b/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=d2e3fbc620550d133f7569c32927b889c3a4953b",
        "patch": "@@ -41,3 +41,4 @@ The interface is defined in the C header `bitcoinconsensus.h` located in  `src/s\n - [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)\n - [node-libbitcoinconsensus](https://github.com/bitpay/node-libbitcoinconsensus) (Node.js Bindings)\n - [java-libbitcoinconsensus](https://github.com/dexX7/java-libbitcoinconsensus) (Java Bindings)\n+- [bitcoinconsensus-php](https://github.com/Bit-Wasp/bitcoinconsensus-php) (PHP Bindings)"
      }
    ]
  },
  {
    "sha": "5888046323dd867fb1eec7e616bb26eef964733e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODg4MDQ2MzIzZGQ4NjdmYjFlZWM3ZTYxNmJiMjZlZWY5NjQ3MzNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T09:28:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T09:29:25Z"
      },
      "message": "Merge pull request #6849\n\nd2e3fbc Mention PHP bindings to libbitcoinconsensus (Thomas Kerin)",
      "tree": {
        "sha": "86c3e3513a59b5aeb67e6125f26e283b934edcda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86c3e3513a59b5aeb67e6125f26e283b934edcda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5888046323dd867fb1eec7e616bb26eef964733e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJLf1AAoJEHSBCwEjRsmm3tMIALPTm1isaGVTTFyQXSIfZu/c\no2yDKcqD3kUrnXy2weXBJVY+MVeqRpcWXgs8A9eUVlrUecKduXvuiXV4FBxCPl5O\nI+jmzT6DqupdbY4O4WwgyuSfg5gWbWLuKPg8thuO2gS3fwVytrJhX5zJ/y2Vji3K\nUM6vG6uNXkQZgqGUxtjWky0XEQxL83XeX/klWf0vFqkLSEBATO5rRg9IqzuhVy8w\nbMsDi9GKrQDa0s8iWbft69ekH5OxbM60JJf43N8MMFPQ1+cd80eppmf5qwlcRoMe\nWC21Y5d9SSVY5Dc3XBW5mwzZOIEV/IqRUwwti1uA/mnXcf3p+Iy4YUZXZJcHLC4=\n=7mCz\n-----END PGP SIGNATURE-----",
        "payload": "tree 86c3e3513a59b5aeb67e6125f26e283b934edcda\nparent d78a880900c15c7a28ae81e6632090f25fea7fce\nparent d2e3fbc620550d133f7569c32927b889c3a4953b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445246904 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445246965 +0200\n\nMerge pull request #6849\n\nd2e3fbc Mention PHP bindings to libbitcoinconsensus (Thomas Kerin)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5888046323dd867fb1eec7e616bb26eef964733e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5888046323dd867fb1eec7e616bb26eef964733e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5888046323dd867fb1eec7e616bb26eef964733e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      },
      {
        "sha": "d2e3fbc620550d133f7569c32927b889c3a4953b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2e3fbc620550d133f7569c32927b889c3a4953b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2e3fbc620550d133f7569c32927b889c3a4953b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f4ff53d6e925948fc08eb55aff2fb7e713556dcd",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5888046323dd867fb1eec7e616bb26eef964733e/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5888046323dd867fb1eec7e616bb26eef964733e/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=5888046323dd867fb1eec7e616bb26eef964733e",
        "patch": "@@ -41,3 +41,4 @@ The interface is defined in the C header `bitcoinconsensus.h` located in  `src/s\n - [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)\n - [node-libbitcoinconsensus](https://github.com/bitpay/node-libbitcoinconsensus) (Node.js Bindings)\n - [java-libbitcoinconsensus](https://github.com/dexX7/java-libbitcoinconsensus) (Java Bindings)\n+- [bitcoinconsensus-php](https://github.com/Bit-Wasp/bitcoinconsensus-php) (PHP Bindings)"
      }
    ]
  },
  {
    "sha": "58254aa3bc2e92840679183cc884eb76670af525",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODI1NGFhM2JjMmU5Mjg0MDY3OTE4M2NjODg0ZWI3NjY3MGFmNTI1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-19T09:40:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-19T09:41:52Z"
      },
      "message": "Fix stale comment in CTxMemPool::TrimToSize.",
      "tree": {
        "sha": "db223b51f357eaf8c9aba7b14e1e675f8fcd9124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db223b51f357eaf8c9aba7b14e1e675f8fcd9124"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58254aa3bc2e92840679183cc884eb76670af525",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58254aa3bc2e92840679183cc884eb76670af525",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58254aa3bc2e92840679183cc884eb76670af525",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58254aa3bc2e92840679183cc884eb76670af525/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc50187ee6b6a3e4dfaa23bf292d63ad2915945"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "bb148005cd274de57d0888a7b8d20497ef5aa79d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58254aa3bc2e92840679183cc884eb76670af525/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58254aa3bc2e92840679183cc884eb76670af525/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=58254aa3bc2e92840679183cc884eb76670af525",
        "patch": "@@ -903,10 +903,10 @@ void CTxMemPool::TrimToSize(size_t sizelimit) {\n     while (DynamicMemoryUsage() > sizelimit) {\n         indexed_transaction_set::nth_index<1>::type::iterator it = mapTx.get<1>().begin();\n \n-        // We set the new mempool min fee to either the feerate of the removed set,\n-        // or the \"minimum reasonable fee rate\" (ie some value under which we consider\n-        // txn to have 0 fee). This way, if the mempool reaches its full size on free\n-        // txn, we will simply disable free txn until there is a block, and some time.\n+        // We set the new mempool min fee to the feerate of the removed set, plus the\n+        // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n+        // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n+        // equal to txn which were removed with no block in between.\n         CFeeRate removed(it->GetFeesWithDescendants(), it->GetSizeWithDescendants());\n         removed += minReasonableRelayFee;\n         trackPackageRemoved(removed);"
      }
    ]
  },
  {
    "sha": "fc41278e96890473c14916e2f7e0aa61e99c9849",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzQxMjc4ZTk2ODkwNDczYzE0OTE2ZTJmN2UwYWE2MWU5OWM5ODQ5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T10:00:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T10:01:07Z"
      },
      "message": "Merge pull request #6843\n\n99963b9 Correct spelling mistakes in doc folder (Mitchell Cash)",
      "tree": {
        "sha": "31596dc3908032a5eaa4eb9de5faf681f6ccccd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31596dc3908032a5eaa4eb9de5faf681f6ccccd7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc41278e96890473c14916e2f7e0aa61e99c9849",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJL9jAAoJEHSBCwEjRsmmkcgH/ArFJf0ecCfThU4ytR02cldH\nvNNRsQIS84OIpOPDAc63yqZk5ppTohKshth4updhTzgOU1KDqiHgRsm25TExun7K\nx/uy2dHIosLX+Jdp080O8zvYmUghc1fDAPmpSzzEfTP1ARWVFNIvEzRHsH3DtOYJ\nTYNCVqVqxauj/Z2O+Sa9p5Xm5vXvLg4YTrQLJYQrrRBHcZv1VDtlwom7il9lCGLa\nPQ91j19ZRrklvMUeTfejR07uES4bi8zCegcTD2yROc9E6RWFh+utD6jJIkG/SBVj\noen/qENTKAsFSvENpi9hRhalEFXJXLsj0JEHv3SGQUg/9zWAAtHOEesBQ+6V5X4=\n=Vh/N\n-----END PGP SIGNATURE-----",
        "payload": "tree 31596dc3908032a5eaa4eb9de5faf681f6ccccd7\nparent 5888046323dd867fb1eec7e616bb26eef964733e\nparent 99963b938ffb4ad37f4a9d275998bf1a9dc11e64\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445248858 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445248867 +0200\n\nMerge pull request #6843\n\n99963b9 Correct spelling mistakes in doc folder (Mitchell Cash)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc41278e96890473c14916e2f7e0aa61e99c9849",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc41278e96890473c14916e2f7e0aa61e99c9849",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc41278e96890473c14916e2f7e0aa61e99c9849/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5888046323dd867fb1eec7e616bb26eef964733e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5888046323dd867fb1eec7e616bb26eef964733e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5888046323dd867fb1eec7e616bb26eef964733e"
      },
      {
        "sha": "99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99963b938ffb4ad37f4a9d275998bf1a9dc11e64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99963b938ffb4ad37f4a9d275998bf1a9dc11e64"
      }
    ],
    "stats": {
      "total": 202,
      "additions": 99,
      "deletions": 103
    },
    "files": [
      {
        "sha": "08fd724355b6099dd7747b33beadd26ea0ddf667",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -7,7 +7,7 @@ Setup\n \n Running\n ---------------------\n-The following are some helpful notes on how to run Bitcoin on your native platform. \n+The following are some helpful notes on how to run Bitcoin on your native platform.\n \n ### Unix\n \n@@ -26,7 +26,7 @@ Unpack the files into a directory and run:\n \n Unpack the files into a directory, and then run bitcoin-qt.exe.\n \n-### OSX\n+### OS X\n \n Drag Bitcoin-Qt to your applications folder, and then run Bitcoin-Qt.\n \n@@ -41,7 +41,7 @@ Building\n ---------------------\n The following are developer notes on how to build Bitcoin on your native platform. They are not complete guides, but include notes on the necessary libraries, compile flags, etc.\n \n-- [OSX Build Notes](build-osx.md)\n+- [OS X Build Notes](build-osx.md)\n - [Unix Build Notes](build-unix.md)\n - [Gitian Building Guide](gitian-building.md)\n "
      },
      {
        "sha": "f589bfc676f5c313e68403cd1948915fd852f23b",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -1,12 +1,12 @@\n-Deterministic OSX Dmg Notes.\n+Deterministic OS X Dmg Notes.\n \n-Working OSX DMGs are created in Linux by combining a recent clang,\n+Working OS X DMGs are created in Linux by combining a recent clang,\n the Apple's binutils (ld, ar, etc), and DMG authoring tools.\n \n Apple uses clang extensively for development and has upstreamed the necessary\n functionality so that a vanilla clang can take advantage. It supports the use\n of -F, -target, -mmacosx-version-min, and --sysroot, which are all necessary\n-when building for OSX. A pre-compiled version of 3.2 is used because it was not\n+when building for OS X. A pre-compiled version of 3.2 is used because it was not\n available in the Precise repositories at the time this work was started. In the\n future, it can be switched to use system packages instead.\n \n@@ -29,18 +29,18 @@ originally done in toolchain4.\n \n To complicate things further, all builds must target an Apple SDK. These SDKs\n are free to download, but not redistributable.\n-To obtain it, register for a developer account, then download the XCode 6.1.1 dmg:\n+To obtain it, register for a developer account, then download the Xcode 6.1.1 dmg:\n https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n \n This file is several gigabytes in size, but only a single directory inside is\n needed: Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk\n \n Unfortunately, the usual linux tools (7zip, hpmount, loopback mount) are incapable of opening this file.\n-To create a tarball suitable for gitian input, mount the dmg in OSX, then create it with:\n+To create a tarball suitable for Gitian input, mount the dmg in OS X, then create it with:\n   $ tar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n \n-The gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries\n which are created using these tools. The build process has been designed to\n avoid including the SDK's files in Gitian's outputs. All interim tarballs are\n fully deterministic and may be freely redistributed.\n@@ -64,20 +64,20 @@ Ideally, the creation could be fixed and genisoimage would no longer be necessar\n \n Background images and other features can be added to DMG files by inserting a\n .DS_Store before creation. The easiest way to create this file is to build a\n-DMG without one, move it to a device running OSX, customize the layout, then\n+DMG without one, move it to a device running OS X, customize the layout, then\n grab the .DS_Store file for later use. That is the approach taken here.\n \n-As of OSX Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n+As of OS X Mavericks (10.9), using an Apple-blessed key to sign binaries is a\n requirement in order to satisfy the new Gatekeeper requirements. Because this\n private key cannot be shared, we'll have to be a bit creative in order for the\n build process to remain somewhat deterministic. Here's how it works:\n \n-- Builders use gitian to create an unsigned release. This outputs an unsigned\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned\n   dmg which users may choose to bless and run. It also outputs an unsigned app\n   structure in the form of a tarball, which also contains all of the tools\n   that have been previously (deterministically) built in order to create a\n   final dmg.\n - The Apple keyholder uses this unsigned app to create a detached signature,\n   using the script that is also included there.\n-- Builders feed the unsigned app + detached signature back into gitian. It\n+- Builders feed the unsigned app + detached signature back into Gitian. It\n   uses the pre-built tools to recombine the pieces into a deterministic dmg."
      },
      {
        "sha": "d923301467a7f0ae394accd19cd7362feff3120a",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -38,7 +38,7 @@ Do not use `pkg_add boost`! The boost version installed thus is compiled using t\n \n     test_bitcoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n     ...\n-    Segmentation fault (core dumped) \n+    Segmentation fault (core dumped)\n \n This makes it necessary to build boost, or at least the parts used by Bitcoin Core, manually:\n \n@@ -57,7 +57,7 @@ tar -xjf boost_1_59_0.tar.bz2\n # Boost 1.59 needs two small patches for OpenBSD\n cd boost_1_59_0\n # Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n-patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp \n+patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n # https://github.com/boostorg/filesystem/commit/90517e459681790a091566dce27ca3acabf9a70c\n sed 's/__OPEN_BSD__/__OpenBSD__/g' < libs/filesystem/src/path.cpp > libs/filesystem/src/path.cpp.tmp\n mv libs/filesystem/src/path.cpp.tmp libs/filesystem/src/path.cpp\n@@ -92,7 +92,7 @@ tar -xzf db-4.8.30.NC.tar.gz\n # Build the library and install to specified prefix\n cd db-4.8.30.NC/build_unix/\n #  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n-../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp \n+../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX CC=egcc CXX=eg++ CPP=ecpp\n make install\n ```\n \n@@ -160,4 +160,3 @@ version installed by OpenBSD 5.7:\n - https://llvm.org/bugs/show_bug.cgi?id=9758\n \n There is no known workaround for this.\n-"
      },
      {
        "sha": "69c401b751ee9ef8538c9191993b8a9a3ea7e35d",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -1,6 +1,6 @@\n Mac OS X Build Instructions and Notes\n ====================================\n-This guide will show you how to build bitcoind (headless client) for OSX.\n+This guide will show you how to build bitcoind (headless client) for OS X.\n \n Notes\n -----\n@@ -13,8 +13,8 @@ built-in one is located in `/Applications/Utilities`.\n Preparation\n -----------\n \n-You need to install XCode with all the options checked so that the compiler\n-and everything is available in /usr not just /Developer. XCode should be\n+You need to install Xcode with all the options checked so that the compiler\n+and everything is available in /usr not just /Developer. Xcode should be\n available on your OS X installation media, but if not, you can get the\n current version from https://developer.apple.com/xcode/. If you install\n Xcode 4.3 or later, you'll need to install its command line tools. This can\n@@ -38,7 +38,7 @@ NOTE: Building with Qt4 is still supported, however, could result in a broken UI\n \n ### Building `bitcoind`\n \n-1. Clone the github tree to get the source code and go into the directory.\n+1. Clone the GitHub tree to get the source code and go into the directory.\n \n         git clone https://github.com/bitcoin/bitcoin.git\n         cd bitcoin\n@@ -62,7 +62,7 @@ Use Qt Creator as IDE\n You can use Qt Creator as IDE, for debugging and for manipulating forms, etc.\n Download Qt Creator from http://www.qt.io/download/. Download the \"community edition\" and only install Qt Creator (uncheck the rest during the installation process).\n \n-1. Make sure you installed everything through homebrew mentioned above \n+1. Make sure you installed everything through Homebrew mentioned above\n 2. Do a proper ./configure --with-gui=qt5 --enable-debug\n 3. In Qt Creator do \"New Project\" -> Import Project -> Import Existing Project\n 4. Enter \"bitcoin-qt\" as project name, enter src/qt as location"
      },
      {
        "sha": "4189d221878bee2d58ff9c6cf2327d31a0d53dff",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -57,7 +57,7 @@ As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this cas\n \n To describe a class use the same construct above the class definition:\n ```c++\n-/** \n+/**\n  * Alerts are for notifying old versions if they become too obsolete and\n  * need to upgrade. The message is displayed in the status bar.\n  * @see GetWarnings()"
      },
      {
        "sha": "55a5c28258c67704fb926e0ad71d448440babdaa",
        "filename": "doc/dnsseed-policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/dnsseed-policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/dnsseed-policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dnsseed-policy.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -7,7 +7,7 @@ As such, DNS seeds must be run by entities which have some minimum\n level of trust within the Bitcoin community.\n \n Other implementations of Bitcoin software may also use the same\n-seeds and may be more exposed. In light of this exposure, this \n+seeds and may be more exposed. In light of this exposure, this\n document establishes some basic expectations for operating dnsseeds.\n \n 0. A DNS seed operating organization or person is expected to follow good"
      },
      {
        "sha": "00fdce82e81a1886f2ac3f8846c8e4c2900d0c92",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 38,
        "deletions": 38,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -1,7 +1,7 @@\n Gitian building\n ================\n \n-*Setup instructions for a gitian build of Bitcoin using a Debian VM or physical system.*\n+*Setup instructions for a Gitian build of Bitcoin using a Debian VM or physical system.*\n \n Gitian is the deterministic build process that is used to build the Bitcoin\n Core executables. It provides a way to be reasonably sure that the\n@@ -13,7 +13,7 @@ Multiple developers build the source code by following a specific descriptor\n These results are compared and only if they match, the build is accepted and uploaded\n to bitcoin.org.\n \n-More independent gitian builders are needed, which is why this guide exists. \n+More independent Gitian builders are needed, which is why this guide exists.\n It is preferred you follow these steps yourself instead of using someone else's\n VM image to avoid 'contaminating' the build.\n \n@@ -22,9 +22,9 @@ Table of Contents\n \n - [Create a new VirtualBox VM](#create-a-new-virtualbox-vm)\n - [Connecting to the VM](#connecting-to-the-vm)\n-- [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n-- [Installing gitian](#installing-gitian)\n-- [Setting up the gitian image](#setting-up-the-gitian-image)\n+- [Setting up Debian for Gitian building](#setting-up-debian-for-gitian-building)\n+- [Installing Gitian](#installing-gitian)\n+- [Setting up the Gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -43,7 +43,7 @@ Any kind of virtualization can be used, for example:\n - [KVM](http://www.linux-kvm.org/page/Main_Page)\n - [LXC](https://linuxcontainers.org/), see also [Gitian host docker container](https://github.com/gdm85/tenku/tree/master/docker/gitian-bitcoin-host/README.md).\n \n-You can also install gitian on actual hardware instead of using virtualization.\n+You can also install Gitian on actual hardware instead of using virtualization.\n \n Create a new VirtualBox VM\n ---------------------------\n@@ -60,18 +60,18 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n ![](gitian-building/create_vm_hard_disk.png)\n \n - Hard Disk: Create a virtual hard disk now\n-    \n+\n ![](gitian-building/create_vm_hard_disk_file_type.png)\n \n-- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image) \n+- Hard Disk file type: Use the default, VDI (VirtualBox Disk Image)\n \n ![](gitian-building/create_vm_storage_physical_hard_disk.png)\n-    \n-- Storage on physical hard disk: Dynamically Allocated \n-    \n+\n+- Storage on physical hard disk: Dynamically Allocated\n+\n ![](gitian-building/create_vm_file_location_size.png)\n \n-- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n+- File location and size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side\n - Click `Create`\n \n Get the [Debian 8.x net installer](http://cdimage.debian.org/debian-cd/8.2.0/amd64/iso-cd/debian-8.2.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n@@ -81,7 +81,7 @@ Unixy OSes by entering the following in a terminal:\n     echo \"d393d17ac6b3113c81186e545c416a00f28ed6e05774284bb5e8f0df39fcbcb9  debian-8.2.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n-After creating the VM, we need to configure it. \n+After creating the VM, we need to configure it.\n \n - Click the `Settings` button, then go to the `Network` tab. Adapter 1 should be attached to `NAT`.\n \n@@ -115,8 +115,8 @@ This section will explain how to install Debian on the newly created VM.\n \n ![](gitian-building/debian_install_1_boot_menu.png)\n \n-**Note**: Navigating in the Debian installer: \n-To keep a setting at the default and proceed, just press `Enter`. \n+**Note**: Navigating in the Debian installer:\n+To keep a setting at the default and proceed, just press `Enter`.\n To select a different button, press `Tab`.\n \n - Choose locale and keyboard settings (doesn't matter, you can just go with the defaults or select your own information)\n@@ -126,23 +126,23 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_4_configure_keyboard.png)\n \n - The VM will detect network settings using DHCP, this should all proceed automatically\n-- Configure the network: \n+- Configure the network:\n   - Hostname `debian`.\n   - Leave domain name empty.\n \n ![](gitian-building/debian_install_5_configure_the_network.png)\n \n-- Choose a root password and enter it twice (remember it for later) \n+- Choose a root password and enter it twice (remember it for later)\n \n ![](gitian-building/debian_install_6a_set_up_root_password.png)\n \n-- Name the new user `debian` (the full name doesn't matter, you can leave it empty) \n+- Name the new user `debian` (the full name doesn't matter, you can leave it empty)\n - Set the account username as `debian`\n \n ![](gitian-building/debian_install_7_set_up_user_fullname.png)\n ![](gitian-building/debian_install_8_set_up_username.png)\n \n-- Choose a user password and enter it twice (remember it for later) \n+- Choose a user password and enter it twice (remember it for later)\n \n ![](gitian-building/debian_install_9_user_password.png)\n \n@@ -152,11 +152,11 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_10_configure_clock.png)\n \n - Disk setup\n-  - Partitioning method: Guided - Use the entire disk \n-  \n+  - Partitioning method: Guided - Use the entire disk\n+\n ![](gitian-building/debian_install_11_partition_disks.png)\n \n-  - Select disk to partition: SCSI1 (0,0,0) \n+  - Select disk to partition: SCSI1 (0,0,0)\n \n ![](gitian-building/debian_install_12_choose_disk.png)\n \n@@ -166,7 +166,7 @@ To select a different button, press `Tab`.\n ![](gitian-building/debian_install_15_write_changes.png)\n \n - The base system will be installed, this will take a minute or so\n-- Choose a mirror (any will do) \n+- Choose a mirror (any will do)\n \n ![](gitian-building/debian_install_16_choose_a_mirror.png)\n \n@@ -201,7 +201,7 @@ After Installation\n The next step in the guide involves logging in as root via SSH.\n SSH login for root users is disabled by default, so we'll enable that now.\n \n-Login to the VM using username `root` and the root password you choose earlier.\n+Login to the VM using username `root` and the root password you chose earlier.\n You'll be presented with a screen similar to this.\n \n ![](gitian-building/debian_root_login.png)\n@@ -243,7 +243,7 @@ For example, to connect as `root` from a Linux command prompt use\n \n Replace `root` with `debian` to log in as user.\n \n-Setting up Debian for gitian building\n+Setting up Debian for Gitian building\n --------------------------------------\n \n In this section we will be setting up the Debian installation for Gitian building.\n@@ -260,7 +260,7 @@ Then set up LXC and the rest with the following, which is a complex jumble of se\n \n ```bash\n # the version of lxc-start in Debian 7.4 needs to run as root, so make sure\n-# that the build script can exectute it without providing a password\n+# that the build script can execute it without providing a password\n echo \"%sudo ALL=NOPASSWD: /usr/bin/lxc-start\" > /etc/sudoers.d/gitian-lxc\n # add cgroup for LXC\n echo \"cgroup  /sys/fs/cgroup  cgroup  defaults  0   0\" >> /etc/fstab\n@@ -280,7 +280,7 @@ reboot\n At the end the VM is rebooted to make sure that the changes take effect. The steps in this\n section only need to be performed once.\n \n-Installing gitian\n+Installing Gitian\n ------------------\n \n Re-login as the user `debian` that was created during installation.\n@@ -300,14 +300,14 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian.\n+Clone the git repositories for bitcoin and Gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n ```\n \n-Setting up the gitian image\n+Setting up the Gitian image\n -------------------------\n \n Gitian needs a virtual image of the operating system to build in.\n@@ -333,14 +333,14 @@ Getting and building the inputs\n Follow the instructions in [doc/release-process.md](release-process.md#fetch-and-build-inputs-first-time-or-when-dependency-versions-change)\n in the bitcoin repository under 'Fetch and build inputs' to install sources which require\n manual intervention. Also optionally follow the next step: 'Seed the Gitian sources cache\n-and offline git repositories' which will fetch the remaining files required for building \n+and offline git repositories' which will fetch the remaining files required for building\n offline.\n \n Building Bitcoin\n ----------------\n \n-To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perform\n-gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n+To build Bitcoin (for Linux, OS X and Windows) just follow the steps under 'perform\n+Gitian builds' in [doc/release-process.md](release-process.md#perform-gitian-builds) in the bitcoin repository.\n \n This may take some time as it will build all the dependencies needed for each descriptor.\n These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n@@ -380,7 +380,7 @@ Building an alternative repository\n -----------------------------------\n \n If you want to do a test build of a pull on GitHub it can be useful to point\n-the gitian builder at an alternative repository, using the same descriptors\n+the Gitian builder at an alternative repository, using the same descriptors\n and inputs.\n \n For example:\n@@ -395,9 +395,9 @@ COMMIT=2014_03_windows_unicode_path\n Building fully offline\n -----------------------\n \n-For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository \n+For building fully offline including attaching signatures to unsigned builds, the detached-sigs repository\n and the bitcoin git repository with the desired tag must both be available locally, and then gbuild must be\n-told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or \n+told where to find them. It also requires an apt-cacher-ng which is fully-populated but set to offline mode, or\n manually disabling gitian-builder's use of apt-get to update the VM build environment.\n \n To configure apt-cacher-ng as an offline cacher, you will need to first populate its cache with the relevant\n@@ -417,7 +417,7 @@ LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root \\\n   -e DEBIAN_FRONTEND=noninteractive apt-get --no-install-recommends -y install \\\n   $( sed -ne '/^packages:/,/[^-] .*/ {/^- .*/{s/\"//g;s/- //;p}}' ../bitcoin/contrib/gitian-descriptors/*|sort|uniq )\n LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root apt-get -q -y purge grub\n-LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade \n+LXC_ARCH=amd64 LXC_SUITE=precise on-target -u root -e DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade\n ```\n \n And then set offline mode for apt-cacher-ng:\n@@ -431,7 +431,7 @@ Offlinemode: 1\n service apt-cacher-ng restart\n ```\n \n-Then when building, override the remote URLs that gbuild would otherwise pull from the gitian descriptors::\n+Then when building, override the remote URLs that gbuild would otherwise pull from the Gitian descriptors::\n ```bash\n \n cd /some/root/path/\n@@ -461,7 +461,7 @@ in `gitian.sigs` to your signing machine and do\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your\n-gitian build.\n+Gitian build.\n \n Uploading signatures\n ---------------------"
      },
      {
        "sha": "d24c2d1dbf49cbf7108df1e99d3261215ae253be",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -29,20 +29,20 @@ file, however it is recommended that a strong and secure password be used\n as this password is security critical to securing the wallet should the\n wallet be enabled.\n \n-If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set, \n-it will use a special cookie file for authentication. The cookie is generated with random \n+If bitcoind is run with the \"-server\" flag (set by default), and no rpcpassword is set,\n+it will use a special cookie file for authentication. The cookie is generated with random\n content when the daemon starts, and deleted when it exits. Read access to this file\n-controls who can access it through RPC. \n+controls who can access it through RPC.\n \n-By default the cookie is stored in the data directory, but it's location can be overridden \n+By default the cookie is stored in the data directory, but it's location can be overridden\n with the option '-rpccookiefile'.\n \n This allows for running bitcoind without having to do any manual configuration.\n \n-`conf`, `pid`, and `wallet` accept relative paths which are interpreted as \n+`conf`, `pid`, and `wallet` accept relative paths which are interpreted as\n relative to the data directory. `wallet` *only* supports relative paths.\n \n-For an example configuration file that describes the configuration settings, \n+For an example configuration file that describes the configuration settings,\n see `contrib/debian/examples/bitcoin.conf`.\n \n 3. Paths\n@@ -93,13 +93,12 @@ use old versions of Upstart and do not supply the start-stop-daemon utility.\n \n Copy bitcoind.init to /etc/init.d/bitcoind. Test by running `service bitcoind start`.\n \n-Using this script, you can adjust the path and flags to the bitcoind program by \n-setting the BITCOIND and FLAGS environment variables in the file \n+Using this script, you can adjust the path and flags to the bitcoind program by\n+setting the BITCOIND and FLAGS environment variables in the file\n /etc/sysconfig/bitcoind. You can also use the DAEMONOPTS environment variable here.\n \n 5. Auto-respawn\n -----------------------------------\n \n Auto respawning is currently only configured for Upstart and systemd.\n Reasonable defaults have been chosen but YMMV.\n-"
      },
      {
        "sha": "e9b2d75a760ce734d789dd7d3452310dabeca2cb",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -181,7 +181,7 @@ configured specifically to process scriptPubKey and not scriptSig scripts.\n \n - Removed bitrpc.py from contrib\n \n-Addition of ZMQ-based Notifcations\n+Addition of ZMQ-based Notifications\n ==================================\n \n Bitcoind can now (optionally) asynchronously notify clients through a"
      },
      {
        "sha": "9a2362cb8506884c43a3791c92fe94e8bd2d4f01",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -6,7 +6,7 @@ Release Process\n \n * * *\n \n-###First time / New builders \n+###First time / New builders\n Check out the source code in the following directory hierarchy.\n \n \tcd /path/to/your/toplevel/build\n@@ -34,17 +34,17 @@ Check out the source code in the following directory hierarchy.\n \n * * *\n \n-###Setup and perform gitian builds\n+###Setup and perform Gitian builds\n+\n+ Setup Gitian descriptors:\n \n- Setup gitian descriptors:\n-  \n \tpushd ./bitcoin\n-\texport SIGNER=(your gitian key, ie bluematt, sipa, etc)\n+\texport SIGNER=(your Gitian key, ie bluematt, sipa, etc)\n \texport VERSION=(new version, e.g. 0.8.0)\n \tgit checkout v${VERSION}\n \tpopd\n \n-  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other gitian signatures.\n+  Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n \n \tpushd ./gitian.sigs\n \tgit pull\n@@ -56,35 +56,35 @@ Check out the source code in the following directory hierarchy.\n \tgit pull\n \n ###Fetch and create inputs: (first time, or when dependency versions change)\n- \n+\n \tmkdir -p inputs\n \twget -P inputs https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n \twget -P inputs http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n \n- Register and download the Apple SDK: see [OSX readme](README_osx.txt) for details.\n- \n+ Register and download the Apple SDK: see [OS X readme](README_osx.txt) for details.\n+\n  https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/xcode_6.1.1/xcode_6.1.1.dmg\n- \n+\n  Using a Mac, create a tarball for the 10.9 SDK and copy it to the inputs directory:\n- \n+\n \ttar -C /Volumes/Xcode/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.9.sdk.tar.gz MacOSX10.9.sdk\n \n ###Optional: Seed the Gitian sources cache and offline git repositories\n \n-By default, gitian will fetch source files as needed. To cache them ahead of time:\n+By default, Gitian will fetch source files as needed. To cache them ahead of time:\n \n \tmake -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n-NOTE: Offline builds must use the --url flag to ensure gitian fetches only from local URLs. For example: \n+NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n ```\n-./bin/bguild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n ```\n The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n \n ###Build (and optionally verify) Bitcoin Core for Linux, Windows, and OS X:\n-  \n+\n \t./bin/gbuild --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t./bin/gsign --signer $SIGNER --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n \t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n@@ -108,8 +108,8 @@ The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n   1. source tarball (bitcoin-${VERSION}.tar.gz)\n   2. linux 32-bit and 64-bit dist tarballs (bitcoin-${VERSION}-linux[32|64].tar.gz)\n   3. windows 32-bit and 64-bit unsigned installers and dist zips (bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe, bitcoin-${VERSION}-win[32|64].zip)\n-  4. OSX unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n-  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your gitian key)/\n+  4. OS X unsigned installer and dist tarball (bitcoin-${VERSION}-osx-unsigned.dmg, bitcoin-${VERSION}-osx64.tar.gz)\n+  5. Gitian signatures (in gitian.sigs/${VERSION}-<linux|{win,osx}-unsigned>/(your Gitian key)/\n \n ###Next steps:\n \n@@ -123,12 +123,12 @@ Commit your signature to gitian.sigs:\n \tgit push  # Assuming you can push to the gitian.sigs tree\n \tpopd\n \n-  Wait for Windows/OSX detached signatures:\n+  Wait for Windows/OS X detached signatures:\n \n-\tOnce the Windows/OSX builds each have 3 matching signatures, they will be signed with their respective release keys.\n+\tOnce the Windows/OS X builds each have 3 matching signatures, they will be signed with their respective release keys.\n \tDetached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n \n-  Create (and optionally verify) the signed OSX binary:\n+  Create (and optionally verify) the signed OS X binary:\n \n \tpushd ./gitian-builder\n \t./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n@@ -147,7 +147,7 @@ Commit your signature to gitian.sigs:\n \tmv build/out/bitcoin-*win32-setup.exe ../bitcoin-${VERSION}-win32-setup.exe\n \tpopd\n \n-Commit your signature for the signed OSX/Windows binaries:\n+Commit your signature for the signed OS X/Windows binaries:\n \n \tpushd gitian.sigs\n \tgit add ${VERSION}-osx-signed/${SIGNER}"
      },
      {
        "sha": "594897f89670716ad845596dccd5cc7ff6253586",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -15,15 +15,15 @@ outgoing connections be anonymized, but more is possible.\n \n \t-proxy=ip:port  Set the proxy server. If SOCKS5 is selected (default), this proxy\n \t                server will be used to try to reach .onion addresses as well.\n-\t\n+\n \t-onion=ip:port  Set the proxy server to use for tor hidden services. You do not\n \t                need to set this if it's the same as -proxy. You can use -noonion\n \t                to explicitly disable access to hidden service.\n-\t\n+\n \t-listen         When using -proxy, listening is disabled by default. If you want\n \t                to run a hidden service (see next section), you'll need to enable\n \t                it explicitly.\n-\t\n+\n \t-connect=X      When behind a Tor proxy, you can specify .onion addresses instead\n \t-addnode=X      of IP addresses or hostnames in these parameters. It requires\n \t-seednode=X     SOCKS5. In Tor mode, such addresses can also be exchanged with\n@@ -55,10 +55,10 @@ your bitcoind's P2P listen port (8333 by default).\n \t                preference for your node to advertize itself with, for connections\n \t                coming from unroutable addresses (such as 127.0.0.1, where the\n \t                Tor proxy typically runs).\n-\t\n+\n \t-listen         You'll need to enable listening for incoming connections, as this\n \t                is off by default behind a proxy.\n-\t\n+\n \t-discover       When -externalip is specified, no attempt is made to discover local\n \t                IPv4 or IPv6 addresses. If you want to run a dual stack, reachable\n \t                from both Tor and IPv4 (or IPv6), you'll need to either pass your\n@@ -87,4 +87,3 @@ If you only want to use Tor to reach onion addresses, but not use it as a proxy\n for normal IPv4/IPv6 communication, use:\n \n \t./bitcoin -onion=127.0.0.1:9050 -externalip=57qr3yd1nyntf5k.onion -discover\n-"
      },
      {
        "sha": "6389c5acedf7929598892c879efc1855e8ae096e",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -1,7 +1,7 @@\n Translations\n ============\n \n-The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool. \n+The Bitcoin-Core project has been designed to support multiple localisations. This makes adding new phrases, and completely new languages easily achievable. For managing all application translations, Bitcoin-Core makes use of the Transifex online translation management tool.\n \n ### Helping to translate (using Transifex)\n Transifex is setup to monitor the Github repo for updates, and when code containing new translations is found, Transifex will process any changes. It may take several hours after a pull-request has been merged, to appear in the Transifex web interface."
      },
      {
        "sha": "936a6112c65f83956a0dc8260d96f65b56b847ec",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -1,7 +1,7 @@\n Translation Strings Policy\n ===========================\n \n-This document provides guidelines for internationalization of the Bitcoin Core software. \n+This document provides guidelines for internationalization of the Bitcoin Core software.\n \n How to translate?\n ------------------\n@@ -107,4 +107,3 @@ The second example reduces the number of pluralized words that translators have\n During a string freeze (often before a major release), no translation strings are to be added, modified or removed.\n \n This can be checked by executing `make translate` in the `src` directory, then verifying that `bitcoin_en.ts` remains unchanged.\n-"
      },
      {
        "sha": "902d1124c766de4e51ffc14f37a84e88f0624b1c",
        "filename": "doc/zmq.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/zmq.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc41278e96890473c14916e2f7e0aa61e99c9849/doc/zmq.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/zmq.md?ref=fc41278e96890473c14916e2f7e0aa61e99c9849",
        "patch": "@@ -2,7 +2,7 @@\n \n [ZeroMQ](http://zeromq.org/) is a lightweight wrapper around TCP\n connections, inter-process communication, and shared-memory,\n-providing various message-oriented semantics such as publish/subcribe,\n+providing various message-oriented semantics such as publish/subscribe,\n request/reply, and push/pull.\n \n The Bitcoin Core daemon can be configured to act as a trusted \"border"
      }
    ]
  },
  {
    "sha": "bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmNkYzIxYTVkYTI1ZWMxYWE0YWVjYzRjZDg5NjBkZmExYzExNzgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T10:03:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T10:03:29Z"
      },
      "message": "build: make sure OpenSSL heeds noexecstack\n\nThis passes `-Wa,--noexecstack` to the assembler when building\nplatform-specific assembly files, to signal that a non-executable stack\ncan be used. This is the same approach as used by Debian\n(see https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=430583)",
      "tree": {
        "sha": "b7db1a03f655cc326bd98403e1a754970db56520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7db1a03f655cc326bd98403e1a754970db56520"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "687aae6682c01374639026f97bba2966d63b7669",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781",
        "patch": "@@ -10,7 +10,7 @@ $(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/o\n $(package)_config_opts+=no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2\n $(package)_config_opts+=no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl2 no-ssl3\n $(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags)\n-$(package)_config_opts_linux=-fPIC\n+$(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64\n $(package)_config_opts_i686_linux=linux-generic32\n $(package)_config_opts_arm_linux=linux-generic32"
      }
    ]
  },
  {
    "sha": "5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjVlZTBmM2NlNmJmZThjMGIxZDE1YjVhNDk4MDc3ZjdhNTllZTAz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T10:15:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T10:15:26Z"
      },
      "message": "Merge pull request #6837\n\n0658d0b temporarily comment out rpcbind.py (Alex Morcos)",
      "tree": {
        "sha": "067a53d2497afe7b4a08f1de141a0bc222e2a720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/067a53d2497afe7b4a08f1de141a0bc222e2a720"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJMK+AAoJEHSBCwEjRsmm9OIH/022QddQEkvlteQsO9jwTsTF\n2yTunua10RwC8MDcqZUHLYej/992qruSKvPpN4FZIj8MVf7rySHTnHz0grdfeoNT\ni6OO33xBmmWAyEgvws9A9//OGsoh1hI0A6SeU7KeSBPftrtI6c6iDqTXdKD9yjgF\njknhdi2ahVEmrl4QCZqet/Hentqpl+42l9OR/ulI/w1HR8sqiAuhzKK5dNtj+zAl\nzZGaTHbF1U3SSKXo2Ndg+dhw/EAkMvv68vRxvrQHNmz1/fEZyXAYNAguEPXnA4mF\nmVrUq70hoGRUrvsimxaf7UOOSnInWSMgw6Fz+rOPBMRacCfr1iNlkFeceb1F9do=\n=zeEq\n-----END PGP SIGNATURE-----",
        "payload": "tree 067a53d2497afe7b4a08f1de141a0bc222e2a720\nparent fc41278e96890473c14916e2f7e0aa61e99c9849\nparent 0658d0ba8262a51c30278389cf0c1204934db9f3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445249714 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445249726 +0200\n\nMerge pull request #6837\n\n0658d0b temporarily comment out rpcbind.py (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc41278e96890473c14916e2f7e0aa61e99c9849",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc41278e96890473c14916e2f7e0aa61e99c9849",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc41278e96890473c14916e2f7e0aa61e99c9849"
      },
      {
        "sha": "0658d0ba8262a51c30278389cf0c1204934db9f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0658d0ba8262a51c30278389cf0c1204934db9f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0658d0ba8262a51c30278389cf0c1204934db9f3"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "65a021bbc21b4266c85b93541889a5c083843309",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
        "patch": "@@ -81,12 +81,11 @@\n     'invalidateblock.py',\n     'keypool.py',\n     'receivedby.py',\n-    'rpcbind_test.py',\n-#   'script_test.py',\n+#    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n+#   'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'invalidblockrequest.py',\n-#    'forknotify.py',\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n ]"
      }
    ]
  },
  {
    "sha": "da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTdkNTdmYjk1MDFhZDg5MzlhMjkyM2YyYTYwZmE1NDBlYWU4Y2Zh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T13:02:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T13:02:57Z"
      },
      "message": "Merge pull request #6852\n\nbfcdc21 build: make sure OpenSSL heeds noexecstack (Wladimir J. van der Laan)",
      "tree": {
        "sha": "76237081f9b40daf57100b526081b48baa89d925",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76237081f9b40daf57100b526081b48baa89d925"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJOoBAAoJEHSBCwEjRsmmergIAKI06vdQ1etXLjNyF0blMxTT\nqVsMKrWOY0fgw0OLGN7tr9EYZLks5LY3PBc9URoiDsbRpWZLxx1KH69zSsv09VLi\nJ6cmNiPefvXJbeOalF9qmJg9w/7+ncOYzlyxlQoiMIYMxapwrSAJJkuAn/mkxS5n\nhOMakMx10unfDPnihcQb21evq1F8mLLG0YDVlArNQkX5OYMfRY3awx9uv96u6AlI\nu4NITk53ne7THronK0D12WmJqvtee2+TNIkSVSY0UI2xhvic/02TB52g103T7MO0\nhUe1HKjA1przEqJYIOC7F+s94/qoSouMcwUiMp6iBBKedsr9riLUSsApKHzHKlI=\n=fofN\n-----END PGP SIGNATURE-----",
        "payload": "tree 76237081f9b40daf57100b526081b48baa89d925\nparent 5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03\nparent bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445259768 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445259777 +0200\n\nMerge pull request #6852\n\nbfcdc21 build: make sure OpenSSL heeds noexecstack (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da7d57fb9501ad8939a2923f2a60fa540eae8cfa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03"
      },
      {
        "sha": "bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfcdc21a5da25ec1aa4aecc4cd8960dfa1c11781"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "687aae6682c01374639026f97bba2966d63b7669",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da7d57fb9501ad8939a2923f2a60fa540eae8cfa/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da7d57fb9501ad8939a2923f2a60fa540eae8cfa/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
        "patch": "@@ -10,7 +10,7 @@ $(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/o\n $(package)_config_opts+=no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2\n $(package)_config_opts+=no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl2 no-ssl3\n $(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags)\n-$(package)_config_opts_linux=-fPIC\n+$(package)_config_opts_linux=-fPIC -Wa,--noexecstack\n $(package)_config_opts_x86_64_linux=linux-x86_64\n $(package)_config_opts_i686_linux=linux-generic32\n $(package)_config_opts_arm_linux=linux-generic32"
      }
    ]
  },
  {
    "sha": "7801f4387d96c19de6dedc518e45d3037d9c53fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODAxZjQzODdkOTZjMTlkZTZkZWRjNTE4ZTQ1ZDMwMzdkOWM1M2Zh",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-19T12:25:29Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-19T18:25:21Z"
      },
      "message": "Added fPowNoRetargeting field to Consensus::Params that disables nBits recalculation.",
      "tree": {
        "sha": "ada41d5bdb2ddfc03233b58fe9fa0bca51f72edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ada41d5bdb2ddfc03233b58fe9fa0bca51f72edf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7801f4387d96c19de6dedc518e45d3037d9c53fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7801f4387d96c19de6dedc518e45d3037d9c53fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7801f4387d96c19de6dedc518e45d3037d9c53fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7801f4387d96c19de6dedc518e45d3037d9c53fa/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f5ee0f3ce6bfe8c0b1d15b5a498077f7a59ee03"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52d818059e98c942c4a2be153d4503a97ab9e967",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7801f4387d96c19de6dedc518e45d3037d9c53fa/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7801f4387d96c19de6dedc518e45d3037d9c53fa/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=7801f4387d96c19de6dedc518e45d3037d9c53fa",
        "patch": "@@ -76,6 +76,7 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.fPowNoRetargeting = false;\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -155,6 +156,7 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = false;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -217,6 +219,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = true;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "efbbbed352581bac43836cac43f179fda348a1dc",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7801f4387d96c19de6dedc518e45d3037d9c53fa/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7801f4387d96c19de6dedc518e45d3037d9c53fa/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=7801f4387d96c19de6dedc518e45d3037d9c53fa",
        "patch": "@@ -22,6 +22,7 @@ struct Params {\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;\n+    bool fPowNoRetargeting;\n     int64_t nPowTargetSpacing;\n     int64_t nPowTargetTimespan;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }"
      },
      {
        "sha": "5ace3fbc9b5bcd5126312a347eb90a2da4494203",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7801f4387d96c19de6dedc518e45d3037d9c53fa/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7801f4387d96c19de6dedc518e45d3037d9c53fa/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=7801f4387d96c19de6dedc518e45d3037d9c53fa",
        "patch": "@@ -52,6 +52,9 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n+    if (params.fPowNoRetargeting)\n+        return pindexLast->nBits;\n+\n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);"
      }
    ]
  },
  {
    "sha": "d3b09f6bac738958b6bf5711bcb5291049b7466d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2IwOWY2YmFjNzM4OTU4YjZiZjU3MTFiY2I1MjkxMDQ5Yjc0NjZk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-19T18:43:04Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-10-19T18:43:04Z"
      },
      "message": "Do not allow blockfile pruning during reindex.\n\nAlso clarify startup message.",
      "tree": {
        "sha": "73b6fdec569a2480f366ee7dc036bbe7165ba8ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73b6fdec569a2480f366ee7dc036bbe7165ba8ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3b09f6bac738958b6bf5711bcb5291049b7466d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b09f6bac738958b6bf5711bcb5291049b7466d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b09f6bac738958b6bf5711bcb5291049b7466d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b09f6bac738958b6bf5711bcb5291049b7466d/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da7d57fb9501ad8939a2923f2a60fa540eae8cfa"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4460ecb1fa03b71b61cf7c325ae4a1e8c1bffb0c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b09f6bac738958b6bf5711bcb5291049b7466d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b09f6bac738958b6bf5711bcb5291049b7466d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d3b09f6bac738958b6bf5711bcb5291049b7466d",
        "patch": "@@ -1498,10 +1498,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // if pruning, unset the service bit and perform the initial blockstore prune\n     // after any wallet rescanning has taken place.\n     if (fPruneMode) {\n-        uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n         nLocalServices &= ~NODE_NETWORK;\n         if (!fReindex) {\n+            uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n             PruneAndFlush();\n         }\n     }"
      },
      {
        "sha": "95c71b9cc05957a2cb48f735a69d530d45b0dc76",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3b09f6bac738958b6bf5711bcb5291049b7466d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3b09f6bac738958b6bf5711bcb5291049b7466d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d3b09f6bac738958b6bf5711bcb5291049b7466d",
        "patch": "@@ -1881,7 +1881,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     std::set<int> setFilesToPrune;\n     bool fFlushForPrune = false;\n     try {\n-    if (fPruneMode && fCheckForPruning) {\n+    if (fPruneMode && fCheckForPruning && !fReindex) {\n         FindFilesToPrune(setFilesToPrune);\n         fCheckForPruning = false;\n         if (!setFilesToPrune.empty()) {"
      }
    ]
  },
  {
    "sha": "0d8b1759d21ac8db02627553d4b9c63d859bb0a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDhiMTc1OWQyMWFjOGRiMDI2Mjc1NTNkNGI5YzYzZDg1OWJiMGE1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-14T12:27:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-20T08:25:45Z"
      },
      "message": "[rpc-tests] fundrawtransaction: Update fee after minRelayTxFee increase",
      "tree": {
        "sha": "735b4e3c306ceff8bfe0d71a0f69a64b033a24fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/735b4e3c306ceff8bfe0d71a0f69a64b033a24fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d8b1759d21ac8db02627553d4b9c63d859bb0a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8b1759d21ac8db02627553d4b9c63d859bb0a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d8b1759d21ac8db02627553d4b9c63d859bb0a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8b1759d21ac8db02627553d4b9c63d859bb0a5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "93d13faa06d3c26e836ffed1fc7498836fecedb5",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d8b1759d21ac8db02627553d4b9c63d859bb0a5/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d8b1759d21ac8db02627553d4b9c63d859bb0a5/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=0d8b1759d21ac8db02627553d4b9c63d859bb0a5",
        "patch": "@@ -28,7 +28,15 @@ def setup_network(self, split=False):\n \n     def run_test(self):\n         print \"Mining blocks...\"\n-        feeTolerance = Decimal(0.00000002) #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n+\n+        min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n+        # if the fee's positive delta is higher than this value tests will fail,\n+        # neg. delta always fail the tests.\n+        # The size of the signature of every input may be at most 2 bytes larger\n+        # than a minimum sized signature.\n+\n+        #            = 2 bytes * minRelayTxFeePerByte\n+        feeTolerance = 2 * min_relay_tx_fee/1000\n \n         self.nodes[2].generate(1)\n         self.sync_all()"
      }
    ]
  },
  {
    "sha": "bd4c22ed5629962334f66669a90b44bca3ff4845",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDRjMjJlZDU2Mjk5NjIzMzRmNjY2NjlhOTBiNDRiY2EzZmY0ODQ1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-14T11:15:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-20T08:28:42Z"
      },
      "message": "[rpc-tests] Check return code",
      "tree": {
        "sha": "ecd236ed370c22193af40b7cd52a3bc90c9effef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecd236ed370c22193af40b7cd52a3bc90c9effef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd4c22ed5629962334f66669a90b44bca3ff4845",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd4c22ed5629962334f66669a90b44bca3ff4845",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd4c22ed5629962334f66669a90b44bca3ff4845",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd4c22ed5629962334f66669a90b44bca3ff4845/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d8b1759d21ac8db02627553d4b9c63d859bb0a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d8b1759d21ac8db02627553d4b9c63d859bb0a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d8b1759d21ac8db02627553d4b9c63d859bb0a5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9ba04ade01b5e755500b913ec134000f8aa86f5d",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd4c22ed5629962334f66669a90b44bca3ff4845/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd4c22ed5629962334f66669a90b44bca3ff4845/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=bd4c22ed5629962334f66669a90b44bca3ff4845",
        "patch": "@@ -102,7 +102,7 @@\n        if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts\n            or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n             print  \"Running testscript \" + testScripts[i] + \"...\"\n-            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n+            subprocess.check_call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n \t    #exit if help is called so we print just one set of instructions\n             p = re.compile(\" -h| --help\")\n             if p.match(passOn):\n@@ -113,6 +113,6 @@\n         if ('-extended' in opts or testScriptsExt[i] in opts\n            or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n             print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\"\n-            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n+            subprocess.check_call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n else:\n     print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      }
    ]
  },
  {
    "sha": "488f8517a15403d48c91dda01f740c82aa64ca63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODhmODUxN2ExNTQwM2Q0OGM5MWRkYTAxZjc0MGM4MmFhNjRjYTYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:06:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:06:44Z"
      },
      "message": "Merge pull request #6829\n\n53b86d0 doc: add comment explaining initial header request (Daniel Kraft)",
      "tree": {
        "sha": "d6c84c6750a369b899980e0759ea8b0c0b09b579",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6c84c6750a369b899980e0759ea8b0c0b09b579"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/488f8517a15403d48c91dda01f740c82aa64ca63",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJhI0AAoJEHSBCwEjRsmmx+AIAK4za//blzZ1wACMObYKkREE\n0c+HLRFMfHk2x/SddWsDZK+a+YZYQuQQaw1tKWwbfFkHXeew1VsKQVMWLFxQx4iw\npi1+SeuNwfquPkYlJToFZZ4AjyPlLlHOxjMek3yzOVUbCDezvKOJ1l6b3Zb/oS0V\nwzHMJzOzCxbIeoPGzDIhDQbPTmA+4xf8MlY4Ui8BqyrrWwebvdS3DgJqasr/2SaV\nuHKka3/SYOjYWREdrE+QIIts6h2hVkfMeh8c8zhTFLskVFYSJexdJWC9dDEss1vh\n6AvORzfpt37Z8kZMPqL2wGB6q9rBiH4z8X1l1PMZNUUSHy1UwOG6yKobnHmY5cc=\n=Og9/\n-----END PGP SIGNATURE-----",
        "payload": "tree d6c84c6750a369b899980e0759ea8b0c0b09b579\nparent da7d57fb9501ad8939a2923f2a60fa540eae8cfa\nparent 53b86d0de5440ffb94f6742e26dd1fd9e11952f2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445335602 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445335604 +0200\n\nMerge pull request #6829\n\n53b86d0 doc: add comment explaining initial header request (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/488f8517a15403d48c91dda01f740c82aa64ca63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/488f8517a15403d48c91dda01f740c82aa64ca63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/488f8517a15403d48c91dda01f740c82aa64ca63/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da7d57fb9501ad8939a2923f2a60fa540eae8cfa"
      },
      {
        "sha": "53b86d0de5440ffb94f6742e26dd1fd9e11952f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b86d0de5440ffb94f6742e26dd1fd9e11952f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53b86d0de5440ffb94f6742e26dd1fd9e11952f2"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e931d40c9462c74a180325f33e4f34ad8b0c4c1c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/488f8517a15403d48c91dda01f740c82aa64ca63/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/488f8517a15403d48c91dda01f740c82aa64ca63/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=488f8517a15403d48c91dda01f740c82aa64ca63",
        "patch": "@@ -4955,7 +4955,16 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;\n                 nSyncStarted++;\n-                CBlockIndex *pindexStart = pindexBestHeader->pprev ? pindexBestHeader->pprev : pindexBestHeader;\n+                const CBlockIndex *pindexStart = pindexBestHeader;\n+                /* If possible, start at the block preceding the currently\n+                   best known header.  This ensures that we always get a\n+                   non-empty list of headers back as long as the peer\n+                   is up-to-date.  With a non-empty response, we can initialise\n+                   the peer's known best block.  This wouldn't be possible\n+                   if we requested starting at pindexBestHeader and\n+                   got back an empty response.  */\n+                if (pindexStart->pprev)\n+                    pindexStart = pindexStart->pprev;\n                 LogPrint(\"net\", \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->id, pto->nStartingHeight);\n                 pto->PushMessage(\"getheaders\", chainActive.GetLocator(pindexStart), uint256());\n             }"
      }
    ]
  },
  {
    "sha": "c834f568693bfae2ce32a2532ac846a868bbee50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODM0ZjU2ODY5M2JmYWUyY2UzMmEyNTMyYWM4NDZhODY4YmJlZTUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:07:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:07:44Z"
      },
      "message": "Merge pull request #6853\n\n7801f43 Added fPowNoRetargeting field to Consensus::Params that disables nBits recalculation. (Eric Lombrozo)",
      "tree": {
        "sha": "a32ec35716248b674890437fe7abb806e15f0bae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a32ec35716248b674890437fe7abb806e15f0bae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c834f568693bfae2ce32a2532ac846a868bbee50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJhJwAAoJEHSBCwEjRsmmIHEH/0/MPAtgv8VmYiWn3RPNo8L5\nh9j99uf1Y4bzBq4NQiiGcREm+Vj14HnQJn8yATyX4AbMhcLR6ti2SVFl4yIHfG+A\nbtye1SBM1qWj5VJb1WoShelSFiWztONPf3tvErGlTdgFwiEsExBjur4ojnsL+uSa\nmVV28kMyGoJSUlGNOds01CukoQvPju8gk712zywAZOISh2mZzSfRYLtbVxgOlVI5\nIgznDlV8/jCV/N1VijLCqWXkftnXVLNrTXRMEs4UwyKQy/nfcNnIXBpzv1LG43GN\nU3CvwQYmvFXVPKDWpQNiDYErH/UfN1waXLhnlXNl7ECHP/KRjD4eWjsaoosTrQQ=\n=9D8H\n-----END PGP SIGNATURE-----",
        "payload": "tree a32ec35716248b674890437fe7abb806e15f0bae\nparent 488f8517a15403d48c91dda01f740c82aa64ca63\nparent 7801f4387d96c19de6dedc518e45d3037d9c53fa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445335626 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445335664 +0200\n\nMerge pull request #6853\n\n7801f43 Added fPowNoRetargeting field to Consensus::Params that disables nBits recalculation. (Eric Lombrozo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c834f568693bfae2ce32a2532ac846a868bbee50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c834f568693bfae2ce32a2532ac846a868bbee50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c834f568693bfae2ce32a2532ac846a868bbee50/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "488f8517a15403d48c91dda01f740c82aa64ca63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/488f8517a15403d48c91dda01f740c82aa64ca63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/488f8517a15403d48c91dda01f740c82aa64ca63"
      },
      {
        "sha": "7801f4387d96c19de6dedc518e45d3037d9c53fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7801f4387d96c19de6dedc518e45d3037d9c53fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7801f4387d96c19de6dedc518e45d3037d9c53fa"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "52d818059e98c942c4a2be153d4503a97ab9e967",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c834f568693bfae2ce32a2532ac846a868bbee50/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c834f568693bfae2ce32a2532ac846a868bbee50/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c834f568693bfae2ce32a2532ac846a868bbee50",
        "patch": "@@ -76,6 +76,7 @@ class CMainParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = false;\n+        consensus.fPowNoRetargeting = false;\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -155,6 +156,7 @@ class CTestNetParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = false;\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -217,6 +219,7 @@ class CRegTestParams : public CChainParams {\n         consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n         consensus.nPowTargetSpacing = 10 * 60;\n         consensus.fPowAllowMinDifficultyBlocks = true;\n+        consensus.fPowNoRetargeting = true;\n \n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;"
      },
      {
        "sha": "efbbbed352581bac43836cac43f179fda348a1dc",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c834f568693bfae2ce32a2532ac846a868bbee50/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c834f568693bfae2ce32a2532ac846a868bbee50/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=c834f568693bfae2ce32a2532ac846a868bbee50",
        "patch": "@@ -22,6 +22,7 @@ struct Params {\n     /** Proof of work parameters */\n     uint256 powLimit;\n     bool fPowAllowMinDifficultyBlocks;\n+    bool fPowNoRetargeting;\n     int64_t nPowTargetSpacing;\n     int64_t nPowTargetTimespan;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }"
      },
      {
        "sha": "5ace3fbc9b5bcd5126312a347eb90a2da4494203",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c834f568693bfae2ce32a2532ac846a868bbee50/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c834f568693bfae2ce32a2532ac846a868bbee50/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=c834f568693bfae2ce32a2532ac846a868bbee50",
        "patch": "@@ -52,6 +52,9 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n unsigned int CalculateNextWorkRequired(const CBlockIndex* pindexLast, int64_t nFirstBlockTime, const Consensus::Params& params)\n {\n+    if (params.fPowNoRetargeting)\n+        return pindexLast->nBits;\n+\n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - nFirstBlockTime;\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);"
      }
    ]
  },
  {
    "sha": "87e5539e9c500028afd6f9ba101d9f04dbd325e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2U1NTM5ZTljNTAwMDI4YWZkNmY5YmExMDFkOWYwNGRiZDMyNWU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:21:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:21:25Z"
      },
      "message": "Merge pull request #6827\n\nbd4c22e [rpc-tests] Check return code (MarcoFalke)\n0d8b175 [rpc-tests] fundrawtransaction: Update fee after minRelayTxFee increase (MarcoFalke)",
      "tree": {
        "sha": "5658595f5ca4ee5a73da935f0d40433e9e05040a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5658595f5ca4ee5a73da935f0d40433e9e05040a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87e5539e9c500028afd6f9ba101d9f04dbd325e8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJhWlAAoJEHSBCwEjRsmm0NoH/A9hNqd/0NIvQYv6tghr/NFe\nwLtkqNG5zjQ3Nsxc91/R02XUe3zU1gtrIbH2GJGXvyu1v/oNbtFwVjAV94XxfHIr\n4rW4FfHZ0JNoBU/LnzGw+Wmx2MJ2DrNFhpcw3zMxiPlGrnPCoUbF05kQjEK6Sq9p\nzxOrJqkr0SoaQw+fw90mKlPt91876/ktxrjkpJlumEUpZATmPEiDOT9DbZ/AevFc\nCCi+gp1y2QaDyTk2A/dR2d0wIkh3BxIPCN6qdOWfl0qe9N9PdSe99s1QOQFwRSLm\neXij3GEs/CBZPxBVCGJmoFse3f3rQYaUFOFs/GaMu0swP4AhnvVMl5O4k2IV8gc=\n=yhmt\n-----END PGP SIGNATURE-----",
        "payload": "tree 5658595f5ca4ee5a73da935f0d40433e9e05040a\nparent c834f568693bfae2ce32a2532ac846a868bbee50\nparent bd4c22ed5629962334f66669a90b44bca3ff4845\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445336464 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445336485 +0200\n\nMerge pull request #6827\n\nbd4c22e [rpc-tests] Check return code (MarcoFalke)\n0d8b175 [rpc-tests] fundrawtransaction: Update fee after minRelayTxFee increase (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e5539e9c500028afd6f9ba101d9f04dbd325e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87e5539e9c500028afd6f9ba101d9f04dbd325e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e5539e9c500028afd6f9ba101d9f04dbd325e8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c834f568693bfae2ce32a2532ac846a868bbee50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c834f568693bfae2ce32a2532ac846a868bbee50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c834f568693bfae2ce32a2532ac846a868bbee50"
      },
      {
        "sha": "bd4c22ed5629962334f66669a90b44bca3ff4845",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd4c22ed5629962334f66669a90b44bca3ff4845",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd4c22ed5629962334f66669a90b44bca3ff4845"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8a431d718db53a9ddb110da2d37004edfa4c8069",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e5539e9c500028afd6f9ba101d9f04dbd325e8/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e5539e9c500028afd6f9ba101d9f04dbd325e8/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=87e5539e9c500028afd6f9ba101d9f04dbd325e8",
        "patch": "@@ -101,7 +101,7 @@\n        if (len(opts) == 0 or (len(opts) == 1 and \"-win\" in opts ) or '-extended' in opts\n            or testScripts[i] in opts or  re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n             print  \"Running testscript \" + testScripts[i] + \"...\"\n-            subprocess.call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n+            subprocess.check_call(rpcTestDir + testScripts[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n \t    #exit if help is called so we print just one set of instructions\n             p = re.compile(\" -h| --help\")\n             if p.match(passOn):\n@@ -112,6 +112,6 @@\n         if ('-extended' in opts or testScriptsExt[i] in opts\n            or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n             print  \"Running 2nd level testscript \" + testScriptsExt[i] + \"...\"\n-            subprocess.call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n+            subprocess.check_call(rpcTestDir + testScriptsExt[i] + \" --srcdir \" + buildDir + '/src ' + passOn,shell=True)\n else:\n     print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "93d13faa06d3c26e836ffed1fc7498836fecedb5",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e5539e9c500028afd6f9ba101d9f04dbd325e8/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e5539e9c500028afd6f9ba101d9f04dbd325e8/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=87e5539e9c500028afd6f9ba101d9f04dbd325e8",
        "patch": "@@ -28,7 +28,15 @@ def setup_network(self, split=False):\n \n     def run_test(self):\n         print \"Mining blocks...\"\n-        feeTolerance = Decimal(0.00000002) #if the fee's positive delta is higher than this value tests will fail, neg. delta always fail the tests\n+\n+        min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n+        # if the fee's positive delta is higher than this value tests will fail,\n+        # neg. delta always fail the tests.\n+        # The size of the signature of every input may be at most 2 bytes larger\n+        # than a minimum sized signature.\n+\n+        #            = 2 bytes * minRelayTxFeePerByte\n+        feeTolerance = 2 * min_relay_tx_fee/1000\n \n         self.nodes[2].generate(1)\n         self.sync_all()"
      }
    ]
  },
  {
    "sha": "ae69a75c554f98c82bd71775526dd0da0b84b4b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTY5YTc1YzU1NGY5OGM4MmJkNzE3NzU1MjZkZDBkYTBiODRiNGI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:35:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:35:54Z"
      },
      "message": "Merge pull request #6801\n\ne76d9e4 [depends] Latest config.guess and config.sub (fanquake)",
      "tree": {
        "sha": "67ad3091b408007725269a4f89ab8105dff254c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67ad3091b408007725269a4f89ab8105dff254c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae69a75c554f98c82bd71775526dd0da0b84b4b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJhkKAAoJEHSBCwEjRsmmzkEH/1v82HhrwQgdStsIoSIn40HT\nDmgyEvn6Rty1wPCrdjxg6og/t31r+SQrZ4jeX1n2Z2fnlJTU1kk2W5LF2HFoKvYZ\nEr6Pzx+wp6ZJCi/3b6nw774dpDi7PQNFUjPjwHokBnhc/uPNUUvRmSd2otmKo7wv\nLCY2F/gWsG2VRO+WA88XRmd36gvixVK347bt6jgP+sVNdUIWAxNM+VmPLV53KExE\nPH7XNQxHUS7raCSduS54LRuQHP6tMkvDjFykXrUCU3S2NPa+ToiuJUP1mEVx7+w5\nscVpkMfFcZD0tVEPIPXYEb52pPg8w5wxt11bnhhy/xAUgXqkI/I0HY8m9nYJaNk=\n=RTy+\n-----END PGP SIGNATURE-----",
        "payload": "tree 67ad3091b408007725269a4f89ab8105dff254c8\nparent 87e5539e9c500028afd6f9ba101d9f04dbd325e8\nparent e76d9e4c15bed7e1fa876b4c69c35c8d1712b503\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445337349 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445337354 +0200\n\nMerge pull request #6801\n\ne76d9e4 [depends] Latest config.guess and config.sub (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae69a75c554f98c82bd71775526dd0da0b84b4b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae69a75c554f98c82bd71775526dd0da0b84b4b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae69a75c554f98c82bd71775526dd0da0b84b4b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87e5539e9c500028afd6f9ba101d9f04dbd325e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e5539e9c500028afd6f9ba101d9f04dbd325e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87e5539e9c500028afd6f9ba101d9f04dbd325e8"
      },
      {
        "sha": "e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e76d9e4c15bed7e1fa876b4c69c35c8d1712b503"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 17,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3c022c5bb8b3ae3737c3b28f7e77bcab98d790d9",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae69a75c554f98c82bd71775526dd0da0b84b4b5/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae69a75c554f98c82bd71775526dd0da0b84b4b5/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=ae69a75c554f98c82bd71775526dd0da0b84b4b5",
        "patch": "@@ -2,7 +2,7 @@\n # Attempt to guess a canonical system name.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-03-04'\n+timestamp='2015-09-14'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -221,7 +221,7 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n \t\trelease='-gnu'\n \t\t;;\n \t    *)\n-\t\trelease=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\\./'`\n+\t\trelease=`echo ${UNAME_RELEASE} | sed -e 's/[-_].*//' | cut -d. -f1,2`\n \t\t;;\n \tesac\n \t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n@@ -249,6 +249,9 @@ case \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n     *:MirBSD:*:*)\n \techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n \texit ;;\n+    *:Sortix:*:*)\n+\techo ${UNAME_MACHINE}-unknown-sortix\n+\texit ;;\n     alpha:OSF1:*:*)\n \tcase $UNAME_RELEASE in\n \t*4.0)\n@@ -962,6 +965,9 @@ EOF\n     ia64:Linux:*:*)\n \techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n+    k1om:Linux:*:*)\n+\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\texit ;;\n     m32r*:Linux:*:*)\n \techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n \texit ;;\n@@ -1038,7 +1044,7 @@ EOF\n \techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n \texit ;;\n     x86_64:Linux:*:*)\n-\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n+\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n \texit ;;\n     xtensa*:Linux:*:*)\n \techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n@@ -1117,7 +1123,7 @@ EOF\n \t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n \t# the processor, so we play safe by assuming i586.\n \t# Note: whatever this is, it MUST be the same as what config.sub\n-\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n+\t# prints for the \"djgpp\" host, or else GDB configury will decide that\n \t# this is a cross-build.\n \techo i586-pc-msdosdjgpp\n \texit ;;"
      },
      {
        "sha": "1acc966a33bf509f7c50f87d7678fbb813089ca6",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae69a75c554f98c82bd71775526dd0da0b84b4b5/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae69a75c554f98c82bd71775526dd0da0b84b4b5/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=ae69a75c554f98c82bd71775526dd0da0b84b4b5",
        "patch": "@@ -2,7 +2,7 @@\n # Configuration validation subroutine script.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-03-08'\n+timestamp='2015-08-20'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -255,6 +255,7 @@ case $basic_machine in\n \t| arc | arceb \\\n \t| arm | arm[bl]e | arme[lb] | armv[2-8] | armv[3-8][lb] | armv7[arm] \\\n \t| avr | avr32 \\\n+\t| ba \\\n \t| be32 | be64 \\\n \t| bfin \\\n \t| c4x | c8051 | clipper \\\n@@ -305,7 +306,7 @@ case $basic_machine in\n \t| riscv32 | riscv64 \\\n \t| rl78 | rx \\\n \t| score \\\n-\t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n+\t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[234]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n \t| sh64 | sh64le \\\n \t| sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet | sparclite \\\n \t| sparcv8 | sparcv9 | sparcv9b | sparcv9v \\\n@@ -376,6 +377,7 @@ case $basic_machine in\n \t| alphapca5[67]-* | alpha64pca5[67]-* | arc-* | arceb-* \\\n \t| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \\\n \t| avr-* | avr32-* \\\n+\t| ba-* \\\n \t| be32-* | be64-* \\\n \t| bfin-* | bs2000-* \\\n \t| c[123]* | c30-* | [cjt]90-* | c4x-* \\\n@@ -428,12 +430,13 @@ case $basic_machine in\n \t| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \\\n \t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* \\\n \t| pyramid-* \\\n+\t| riscv32-* | riscv64-* \\\n \t| rl78-* | romp-* | rs6000-* | rx-* \\\n \t| sh-* | sh[1234]-* | sh[24]a-* | sh[24]aeb-* | sh[23]e-* | sh[34]eb-* | sheb-* | shbe-* \\\n \t| shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \\\n \t| sparc-* | sparc64-* | sparc64b-* | sparc64v-* | sparc86x-* | sparclet-* \\\n \t| sparclite-* \\\n-\t| sparcv8-* | sparcv9-* | sparcv9b-* | sparcv9v-* | sv1-* | sx?-* \\\n+\t| sparcv8-* | sparcv9-* | sparcv9b-* | sparcv9v-* | sv1-* | sx*-* \\\n \t| tahoe-* \\\n \t| tic30-* | tic4x-* | tic54x-* | tic55x-* | tic6x-* | tic80-* \\\n \t| tile*-* \\\n@@ -1376,7 +1379,7 @@ case $os in\n \t      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -auroraux* | -solaris* \\\n \t      | -sym* | -kopensolaris* | -plan9* \\\n \t      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \\\n-\t      | -aos* | -aros* | -cloudabi* \\\n+\t      | -aos* | -aros* | -cloudabi* | -sortix* \\\n \t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n \t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n \t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\"
      }
    ]
  },
  {
    "sha": "020c4073a03a69709ed6b33d10e163ab86d65f4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjBjNDA3M2EwM2E2OTcwOWVkNmIzM2QxMGUxNjNhYjg2ZDY1ZjRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:41:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T10:53:45Z"
      },
      "message": "Merge pull request #6841\n\nb6d5e32 Make fee aware of min relay in pruning.py RPC test (Alex Morcos)",
      "tree": {
        "sha": "71e75f2864b636cbbd66347b1a7a8f7cec0076a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71e75f2864b636cbbd66347b1a7a8f7cec0076a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/020c4073a03a69709ed6b33d10e163ab86d65f4f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJh05AAoJEHSBCwEjRsmmPiwIALe7IuW+B2pKcTjaYkZYU79l\ngF2OQvJIgFYfEDctdElE19mV9IinV1O1wJSyUOj9ri3JeFsL1VlDPKQ7wlNSBwbs\nA/Xoq97SToyNIpeC0J4NxsUYvdDVl5N9dTO0QgRKAlKXDRcUrbmt9rxEKSD196bm\nZ7kpn2ZXS2ssf3+jRFqY0ZDPtsc4UJppOZSCLqfsVbxp+xaOabwnRvJvbu41YmbM\ng3mcejJPe9VyRF3rZvt3aPufqXzs2uKHPOySJS/swA9zUv0Ng/4YqRP/7jxS/46w\nFrDgvvPwB4qq/janXDIVSIL7YM/9xolGlEy1cJW0xTNF4JVvZf2mDZx2oOEY7cM=\n=9ZEB\n-----END PGP SIGNATURE-----",
        "payload": "tree 71e75f2864b636cbbd66347b1a7a8f7cec0076a1\nparent ae69a75c554f98c82bd71775526dd0da0b84b4b5\nparent b6d5e32e0e5b038c6ff7e2ab5221b10727722341\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445337662 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445338425 +0200\n\nMerge pull request #6841\n\nb6d5e32 Make fee aware of min relay in pruning.py RPC test (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020c4073a03a69709ed6b33d10e163ab86d65f4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/020c4073a03a69709ed6b33d10e163ab86d65f4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020c4073a03a69709ed6b33d10e163ab86d65f4f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae69a75c554f98c82bd71775526dd0da0b84b4b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae69a75c554f98c82bd71775526dd0da0b84b4b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae69a75c554f98c82bd71775526dd0da0b84b4b5"
      },
      {
        "sha": "b6d5e32e0e5b038c6ff7e2ab5221b10727722341",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6d5e32e0e5b038c6ff7e2ab5221b10727722341",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6d5e32e0e5b038c6ff7e2ab5221b10727722341"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "21f8d69382d02055141f1a57829b8e6aaf217d9f",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/020c4073a03a69709ed6b33d10e163ab86d65f4f/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/020c4073a03a69709ed6b33d10e163ab86d65f4f/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=020c4073a03a69709ed6b33d10e163ab86d65f4f",
        "patch": "@@ -61,6 +61,9 @@ def setup_network(self):\n         self.address[0] = self.nodes[0].getnewaddress()\n         self.address[1] = self.nodes[1].getnewaddress()\n \n+        # Determine default relay fee\n+        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n         connect_nodes(self.nodes[2], 0)\n@@ -239,7 +242,7 @@ def mine_full_block(self, node, address):\n             outputs = {}\n             t = self.utxo.pop()\n             inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n-            remchange = t[\"amount\"] - Decimal(\"0.001000\")\n+            remchange = t[\"amount\"] - 100*self.relayfee # Fee must be above min relay rate for 66kb tx\n             outputs[address]=remchange\n             # Create a basic transaction that will send change back to ourself after account for a fee\n             # And then insert the 128 generated transaction outs in the middle rawtx[92] is where the #"
      }
    ]
  },
  {
    "sha": "f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzUyNWUyNGUzYTE1NmVhYTAwNGNhMjhhNTlmZTJkNDQ5ZGMxZjll",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-06-30T19:39:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-20T12:22:44Z"
      },
      "message": "Chainparams: Replace CBaseChainParams::Network enum with string constants (suggested by Wladimir)",
      "tree": {
        "sha": "6fceee33ff5c9efff9e97ea0045f4726239714b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fceee33ff5c9efff9e97ea0045f4726239714b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 48,
      "deletions": 45
    },
    "files": [
      {
        "sha": "02c417c38dc618c8683a94dc78cf87b3b2cd4448",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparams.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -260,28 +261,27 @@ const CChainParams &Params() {\n     return *pCurrentParams;\n }\n \n-CChainParams &Params(CBaseChainParams::Network network) {\n-    switch (network) {\n-        case CBaseChainParams::MAIN:\n+CChainParams& Params(const std::string& chain)\n+{\n+    if (chain == CBaseChainParams::MAIN)\n             return mainParams;\n-        case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n-        case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n-        default:\n-            assert(false && \"Unimplemented network\");\n-            return mainParams;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-void SelectParams(CBaseChainParams::Network network) {\n+void SelectParams(const std::string& network)\n+{\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n \n bool SelectParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n+    std::string network = ChainNameFromCommandLine();\n     if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n "
      },
      {
        "sha": "71e2ad861e81174f286792535008d019df7e2bd8",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -103,11 +103,16 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-/** Return parameters for the given network. */\n-CChainParams &Params(CBaseChainParams::Network network);\n+/**\n+ * @returns CChainParams for the given BIP70 chain name.\n+ */\n+CChainParams& Params(const std::string& chain);\n \n-/** Sets the params returned by Params() to those for the given network. */\n-void SelectParams(CBaseChainParams::Network network);\n+/**\n+ * Sets the params returned by Params() to those for the given BIP70 chain name.\n+ * @throws std::runtime_error when the chain is not supported.\n+ */\n+void SelectParams(const std::string& chain);\n \n /**\n  * Looks for -regtest or -testnet and then calls SelectParams as appropriate."
      },
      {
        "sha": "e46212279fe66e07f36498c6dc5b7baa8453a4cc",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -5,10 +5,16 @@\n \n #include \"chainparamsbase.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n \n #include <assert.h>\n \n+const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::REGTEST = \"regtest\";\n+const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n+\n /**\n  * Main network\n  */\n@@ -71,25 +77,19 @@ const CBaseChainParams& BaseParams()\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network)\n+void SelectBaseParams(const std::string& chain)\n {\n-    switch (network) {\n-    case CBaseChainParams::MAIN:\n+    if (chain == CBaseChainParams::MAIN)\n         pCurrentBaseParams = &mainParams;\n-        break;\n-    case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n         pCurrentBaseParams = &testNetParams;\n-        break;\n-    case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n         pCurrentBaseParams = &regTestParams;\n-        break;\n-    default:\n-        assert(false && \"Unimplemented network\");\n-        return;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-CBaseChainParams::Network NetworkIdFromCommandLine()\n+std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n@@ -105,7 +105,7 @@ CBaseChainParams::Network NetworkIdFromCommandLine()\n \n bool SelectBaseParamsFromCommandLine()\n {\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n+    std::string network = ChainNameFromCommandLine();\n     if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n         return false;\n "
      },
      {
        "sha": "25a5b3450bdc83a6054bc96b869c1859b3bf2059",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -15,13 +15,11 @@\n class CBaseChainParams\n {\n public:\n-    enum Network {\n-        MAIN,\n-        TESTNET,\n-        REGTEST,\n-\n-        MAX_NETWORK_TYPES\n-    };\n+    /** BIP70 chain name strings (main, test or regtest) */\n+    static const std::string MAIN;\n+    static const std::string TESTNET;\n+    static const std::string REGTEST;\n+    static const std::string MAX_NETWORK_TYPES;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n@@ -40,13 +38,13 @@ class CBaseChainParams\n const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(CBaseChainParams::Network network);\n+void SelectBaseParams(const std::string& chain);\n \n /**\n- * Looks for -regtest or -testnet and returns the appropriate Network ID.\n- * Returns MAX_NETWORK_TYPES if an invalid combination is given.\n+ * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+ * @return CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given. CBaseChainParams::MAIN by default.\n  */\n-CBaseChainParams::Network NetworkIdFromCommandLine();\n+std::string ChainNameFromCommandLine();\n \n /**\n  * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate."
      },
      {
        "sha": "a74fbfc0d713a8fa1581f765cfbdd753f162a919",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -32,13 +32,13 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-BasicTestingSetup::BasicTestingSetup(CBaseChainParams::Network network)\n+BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n         ECC_Start();\n         SetupEnvironment();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n-        SelectParams(network);\n+        SelectParams(chainName);\n         noui_connect();\n }\n \n@@ -47,7 +47,7 @@ BasicTestingSetup::~BasicTestingSetup()\n         ECC_Stop();\n }\n \n-TestingSetup::TestingSetup(CBaseChainParams::Network network) : BasicTestingSetup(network)\n+TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      },
      {
        "sha": "0bab4b68319e108b645f4aad9b53386f3f4f7f2a",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "patch": "@@ -12,7 +12,7 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n-    BasicTestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n+    BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -25,7 +25,7 @@ struct TestingSetup: public BasicTestingSetup {\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n \n-    TestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n+    TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n "
      }
    ]
  },
  {
    "sha": "55a89751faaada5598771d10401030e9e86eecbd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWE4OTc1MWZhYWFkYTU1OTg3NzFkMTA0MDEwMzBlOWU4NmVlY2Jk",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-05-25T07:00:17Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-10-20T12:28:43Z"
      },
      "message": "Chainparams: Translations: DRY: options and error strings\n\nAlso remove SelectBaseParamsFromCommandLine and SelectParamsFromCommandLine",
      "tree": {
        "sha": "87607d31265c50db8955f805d280faeb8e82ab03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87607d31265c50db8955f805d280faeb8e82ab03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55a89751faaada5598771d10401030e9e86eecbd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a89751faaada5598771d10401030e9e86eecbd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55a89751faaada5598771d10401030e9e86eecbd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a89751faaada5598771d10401030e9e86eecbd/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3525e24e3a156eaa004ca28a59fe2d449dc1f9e"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 37,
      "deletions": 51
    },
    "files": [
      {
        "sha": "44b1586c18a979d70a0335124c890a7de321b7c2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -23,9 +23,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n-    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n@@ -88,8 +86,10 @@ static bool AppInitRPC(int argc, char* argv[])\n         return false;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n-    if (!SelectBaseParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectBaseParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "5cd5b6657dfb4bf88bf46263828343b208924eb0",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -35,8 +35,10 @@ static bool AppInitRawTx(int argc, char* argv[])\n     ParseParameters(argc, argv);\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n \n@@ -58,8 +60,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n         strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n         strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n-        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n-        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+        AppendParamsHelpMessages(strUsage);\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n "
      },
      {
        "sha": "d8fa473473c6e8c43f8f460d166845c33315ea6c",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -102,8 +102,10 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-        if (!SelectParamsFromCommandLine()) {\n-            fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        try {\n+            SelectParams(ChainNameFromCommandLine());\n+        } catch(std::exception &e) {\n+            fprintf(stderr, \"Error: %s\\n\", e.what());\n             return false;\n         }\n "
      },
      {
        "sha": "09881ee8e7c9ae50c3f7c2c2e61d1a7a0aae1947",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -278,13 +278,3 @@ void SelectParams(const std::string& network)\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n-\n-bool SelectParamsFromCommandLine()\n-{\n-    std::string network = ChainNameFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectParams(network);\n-    return true;\n-}"
      },
      {
        "sha": "fd7a840d21b2aa534df51c7a7d7f647f1354686e",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -114,10 +114,4 @@ CChainParams& Params(const std::string& chain);\n  */\n void SelectParams(const std::string& chain);\n \n-/**\n- * Looks for -regtest or -testnet and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n- */\n-bool SelectParamsFromCommandLine();\n-\n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "db2dc751f5985187f9f548b50cd11ce215c22634",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -13,7 +13,16 @@\n const std::string CBaseChainParams::MAIN = \"main\";\n const std::string CBaseChainParams::TESTNET = \"test\";\n const std::string CBaseChainParams::REGTEST = \"regtest\";\n-const std::string CBaseChainParams::MAX_NETWORK_TYPES = \"unknown_chain\";\n+\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n+{\n+    strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n+    if (debugHelp) {\n+        strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n+                                   \"This is intended for regression testing tools and app development.\");\n+    }\n+}\n \n /**\n  * Main network\n@@ -95,24 +104,14 @@ std::string ChainNameFromCommandLine()\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n     if (fTestNet && fRegTest)\n-        return CBaseChainParams::MAX_NETWORK_TYPES;\n+        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n     return CBaseChainParams::MAIN;\n }\n \n-bool SelectBaseParamsFromCommandLine()\n-{\n-    std::string network = ChainNameFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectBaseParams(network);\n-    return true;\n-}\n-\n bool AreBaseParamsConfigured()\n {\n     return pCurrentBaseParams != NULL;"
      },
      {
        "sha": "095c4cbdcbfa841305e657b657a90ac637276df4",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -19,7 +19,6 @@ class CBaseChainParams\n     static const std::string MAIN;\n     static const std::string TESTNET;\n     static const std::string REGTEST;\n-    static const std::string MAX_NETWORK_TYPES;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n@@ -31,6 +30,12 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Append the help messages for the chainparams options to the\n+ * parameter string.\n+ */\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n@@ -46,12 +51,6 @@ void SelectBaseParams(const std::string& chain);\n  */\n std::string ChainNameFromCommandLine();\n \n-/**\n- * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n- */\n-bool SelectBaseParamsFromCommandLine();\n-\n /**\n  * Return true if SelectBaseParamsFromCommandLine() has been called to select\n  * a network."
      },
      {
        "sha": "9bf21cfa37079e1802870d9bdbe7d910053e8e7c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -396,11 +396,10 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-            \"This is intended for regression testing tools and app development.\");\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    AppendParamsHelpMessages(strUsage, showDebug);\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)"
      },
      {
        "sha": "c6bb7112e1b31deeb2dd84711f323f0d62c9d113",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55a89751faaada5598771d10401030e9e86eecbd/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55a89751faaada5598771d10401030e9e86eecbd/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=55a89751faaada5598771d10401030e9e86eecbd",
        "patch": "@@ -604,8 +604,10 @@ int main(int argc, char *argv[])\n     // - Needs to be done before createOptionsModel\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: Invalid combination of -regtest and -testnet.\"));\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: %1\").arg(e.what()));\n         return 1;\n     }\n #ifdef ENABLE_WALLET"
      }
    ]
  },
  {
    "sha": "41db8c4733b34d56834162c4d054823c240ffc92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWRiOGM0NzMzYjM0ZDU2ODM0MTYyYzRkMDU0ODIzYzI0MGZmYzky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T09:35:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T12:31:40Z"
      },
      "message": "http: Restrict maximum size of request line + headers\n\nPrevent memory exhaustion by sending lots of data.\nAlso add a test to `httpbasics.py`.\n\nCloses #6425",
      "tree": {
        "sha": "07b3417f8fc0ff7760be7534a6df349f951b5529",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07b3417f8fc0ff7760be7534a6df349f951b5529"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41db8c4733b34d56834162c4d054823c240ffc92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41db8c4733b34d56834162c4d054823c240ffc92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41db8c4733b34d56834162c4d054823c240ffc92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41db8c4733b34d56834162c4d054823c240ffc92/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da7d57fb9501ad8939a2923f2a60fa540eae8cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da7d57fb9501ad8939a2923f2a60fa540eae8cfa"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7888114c54df4a30b133feb48e1f197f583517db",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41db8c4733b34d56834162c4d054823c240ffc92/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41db8c4733b34d56834162c4d054823c240ffc92/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=41db8c4733b34d56834162c4d054823c240ffc92",
        "patch": "@@ -97,5 +97,19 @@ def run_test(self):\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n \n+        # Check excessive request size\n+        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request('GET', '/' + ('x'*1000), '', headers)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, httplib.NOT_FOUND)\n+\n+        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request('GET', '/' + ('x'*10000), '', headers)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, httplib.BAD_REQUEST)\n+\n+\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "8698abb900e074c086995af3e5edd8195f5bc750",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41db8c4733b34d56834162c4d054823c240ffc92/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41db8c4733b34d56834162c4d054823c240ffc92/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=41db8c4733b34d56834162c4d054823c240ffc92",
        "patch": "@@ -38,6 +38,9 @@\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>\n \n+/** Maximum size of http request (request line + headers) */\n+static const size_t MAX_HEADERS_SIZE = 8192;\n+\n /** HTTP request work item */\n class HTTPWorkItem : public HTTPClosure\n {\n@@ -414,6 +417,7 @@ bool InitHTTPServer()\n     }\n \n     evhttp_set_timeout(http, GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, NULL);\n "
      }
    ]
  },
  {
    "sha": "e26a3f6713f8f12640cdb75aad48676e901e0c75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjZhM2Y2NzEzZjhmMTI2NDBjZGI3NWFhZDQ4Njc2ZTkwMWUwYzc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T14:59:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T15:06:28Z"
      },
      "message": "Merge pull request #6235\n\n55a8975 Chainparams: Translations: DRY: options and error strings (Jorge Tim\u00f3n)\nf3525e2 Chainparams: Replace CBaseChainParams::Network enum with string constants (suggested by Wladimir) (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "d661b5d59dc32e59570910adf494155c4093faf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d661b5d59dc32e59570910adf494155c4093faf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e26a3f6713f8f12640cdb75aad48676e901e0c75",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJlh0AAoJEHSBCwEjRsmmtDcH/jRZfEDCCKaj7licIInuYtB+\nSa4KRMU4swTE45/zSa3XKyQ18yw7l39YTT9bMmbd2QPH4YCUDSMFHfWJqLlnf9+V\nZfg9O9fYE5SzDlXBHRFkRnYlZNYdnW2S4yNt2kMmMvS05O3piTfSDp5Z6X5lVBSB\nuHjSWH1cWLM4/aqhZOLin9ZWNwA3emSYXVps5UI5BdpxYq9biaBAlS6Bkz5rXD82\n+POKLUOsL7d8AHzFQh26YhzQL8pW1k0KWRQXT6oTzvQhJgUPGdt2MZLNON8t4FMD\nGL36Z64O3BZQQx1mWSsN0FnptPOqyYmG+RoSJ5J6lihXbTazJHS+uQ2b8owmLtY=\n=tMgA\n-----END PGP SIGNATURE-----",
        "payload": "tree d661b5d59dc32e59570910adf494155c4093faf6\nparent 020c4073a03a69709ed6b33d10e163ab86d65f4f\nparent 55a89751faaada5598771d10401030e9e86eecbd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445353173 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445353588 +0200\n\nMerge pull request #6235\n\n55a8975 Chainparams: Translations: DRY: options and error strings (Jorge Tim\u00f3n)\nf3525e2 Chainparams: Replace CBaseChainParams::Network enum with string constants (suggested by Wladimir) (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e26a3f6713f8f12640cdb75aad48676e901e0c75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e26a3f6713f8f12640cdb75aad48676e901e0c75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e26a3f6713f8f12640cdb75aad48676e901e0c75/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "020c4073a03a69709ed6b33d10e163ab86d65f4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/020c4073a03a69709ed6b33d10e163ab86d65f4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/020c4073a03a69709ed6b33d10e163ab86d65f4f"
      },
      {
        "sha": "55a89751faaada5598771d10401030e9e86eecbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55a89751faaada5598771d10401030e9e86eecbd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55a89751faaada5598771d10401030e9e86eecbd"
      }
    ],
    "stats": {
      "total": 169,
      "additions": 79,
      "deletions": 90
    },
    "files": [
      {
        "sha": "364baf9d1395e9849c0f89dd35e7b1f938e457c1",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -31,9 +31,7 @@ std::string HelpMessageCli()\n     strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n-    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    AppendParamsHelpMessages(strUsage);\n     strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n@@ -94,8 +92,10 @@ static bool AppInitRPC(int argc, char* argv[])\n         return false;\n     }\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n-    if (!SelectBaseParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectBaseParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n     if (GetBoolArg(\"-rpcssl\", false))"
      },
      {
        "sha": "5630d20cc5a9e7ed68172e0ac02cf499cb9f9689",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -35,8 +35,10 @@ static bool AppInitRawTx(int argc, char* argv[])\n     ParseParameters(argc, argv);\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }\n \n@@ -58,8 +60,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n         strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n         strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n         strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n-        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n-        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+        AppendParamsHelpMessages(strUsage);\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n "
      },
      {
        "sha": "284a42b32659f5805310fd43262a9e971be0316b",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -107,8 +107,10 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-        if (!SelectParamsFromCommandLine()) {\n-            fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        try {\n+            SelectParams(ChainNameFromCommandLine());\n+        } catch(std::exception &e) {\n+            fprintf(stderr, \"Error: %s\\n\", e.what());\n             return false;\n         }\n "
      },
      {
        "sha": "dd26c3b31a359f84b6c4ed6d09fb071ad86fcfa6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 20,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -5,6 +5,7 @@\n \n #include \"chainparams.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n@@ -266,31 +267,20 @@ const CChainParams &Params() {\n     return *pCurrentParams;\n }\n \n-CChainParams &Params(CBaseChainParams::Network network) {\n-    switch (network) {\n-        case CBaseChainParams::MAIN:\n+CChainParams& Params(const std::string& chain)\n+{\n+    if (chain == CBaseChainParams::MAIN)\n             return mainParams;\n-        case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n             return testNetParams;\n-        case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n             return regTestParams;\n-        default:\n-            assert(false && \"Unimplemented network\");\n-            return mainParams;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-void SelectParams(CBaseChainParams::Network network) {\n+void SelectParams(const std::string& network)\n+{\n     SelectBaseParams(network);\n     pCurrentParams = &Params(network);\n }\n-\n-bool SelectParamsFromCommandLine()\n-{\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectParams(network);\n-    return true;\n-}"
      },
      {
        "sha": "cb061d596ed989cfcac124c25aa656129e145f27",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -105,16 +105,15 @@ class CChainParams\n  */\n const CChainParams &Params();\n \n-/** Return parameters for the given network. */\n-CChainParams &Params(CBaseChainParams::Network network);\n-\n-/** Sets the params returned by Params() to those for the given network. */\n-void SelectParams(CBaseChainParams::Network network);\n+/**\n+ * @returns CChainParams for the given BIP70 chain name.\n+ */\n+CChainParams& Params(const std::string& chain);\n \n /**\n- * Looks for -regtest or -testnet and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n+ * Sets the params returned by Params() to those for the given BIP70 chain name.\n+ * @throws std::runtime_error when the chain is not supported.\n  */\n-bool SelectParamsFromCommandLine();\n+void SelectParams(const std::string& chain);\n \n #endif // BITCOIN_CHAINPARAMS_H"
      },
      {
        "sha": "db2dc751f5985187f9f548b50cd11ce215c22634",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -5,10 +5,25 @@\n \n #include \"chainparamsbase.h\"\n \n+#include \"tinyformat.h\"\n #include \"util.h\"\n \n #include <assert.h>\n \n+const std::string CBaseChainParams::MAIN = \"main\";\n+const std::string CBaseChainParams::TESTNET = \"test\";\n+const std::string CBaseChainParams::REGTEST = \"regtest\";\n+\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp)\n+{\n+    strUsage += HelpMessageGroup(_(\"Chain selection options:\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test chain\"));\n+    if (debugHelp) {\n+        strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n+                                   \"This is intended for regression testing tools and app development.\");\n+    }\n+}\n+\n /**\n  * Main network\n  */\n@@ -71,48 +86,32 @@ const CBaseChainParams& BaseParams()\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network)\n+void SelectBaseParams(const std::string& chain)\n {\n-    switch (network) {\n-    case CBaseChainParams::MAIN:\n+    if (chain == CBaseChainParams::MAIN)\n         pCurrentBaseParams = &mainParams;\n-        break;\n-    case CBaseChainParams::TESTNET:\n+    else if (chain == CBaseChainParams::TESTNET)\n         pCurrentBaseParams = &testNetParams;\n-        break;\n-    case CBaseChainParams::REGTEST:\n+    else if (chain == CBaseChainParams::REGTEST)\n         pCurrentBaseParams = &regTestParams;\n-        break;\n-    default:\n-        assert(false && \"Unimplemented network\");\n-        return;\n-    }\n+    else\n+        throw std::runtime_error(strprintf(\"%s: Unknown chain %s.\", __func__, chain));\n }\n \n-CBaseChainParams::Network NetworkIdFromCommandLine()\n+std::string ChainNameFromCommandLine()\n {\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n     if (fTestNet && fRegTest)\n-        return CBaseChainParams::MAX_NETWORK_TYPES;\n+        throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");\n     if (fRegTest)\n         return CBaseChainParams::REGTEST;\n     if (fTestNet)\n         return CBaseChainParams::TESTNET;\n     return CBaseChainParams::MAIN;\n }\n \n-bool SelectBaseParamsFromCommandLine()\n-{\n-    CBaseChainParams::Network network = NetworkIdFromCommandLine();\n-    if (network == CBaseChainParams::MAX_NETWORK_TYPES)\n-        return false;\n-\n-    SelectBaseParams(network);\n-    return true;\n-}\n-\n bool AreBaseParamsConfigured()\n {\n     return pCurrentBaseParams != NULL;"
      },
      {
        "sha": "095c4cbdcbfa841305e657b657a90ac637276df4",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -15,13 +15,10 @@\n class CBaseChainParams\n {\n public:\n-    enum Network {\n-        MAIN,\n-        TESTNET,\n-        REGTEST,\n-\n-        MAX_NETWORK_TYPES\n-    };\n+    /** BIP70 chain name strings (main, test or regtest) */\n+    static const std::string MAIN;\n+    static const std::string TESTNET;\n+    static const std::string REGTEST;\n \n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n@@ -33,26 +30,26 @@ class CBaseChainParams\n     std::string strDataDir;\n };\n \n+/**\n+ * Append the help messages for the chainparams options to the\n+ * parameter string.\n+ */\n+void AppendParamsHelpMessages(std::string& strUsage, bool debugHelp=true);\n+\n /**\n  * Return the currently selected parameters. This won't change after app\n  * startup, except for unit tests.\n  */\n const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n-void SelectBaseParams(CBaseChainParams::Network network);\n-\n-/**\n- * Looks for -regtest or -testnet and returns the appropriate Network ID.\n- * Returns MAX_NETWORK_TYPES if an invalid combination is given.\n- */\n-CBaseChainParams::Network NetworkIdFromCommandLine();\n+void SelectBaseParams(const std::string& chain);\n \n /**\n- * Calls NetworkIdFromCommandLine() and then calls SelectParams as appropriate.\n- * Returns false if an invalid combination is given.\n+ * Looks for -regtest, -testnet and returns the appropriate BIP70 chain name.\n+ * @return CBaseChainParams::MAX_NETWORK_TYPES if an invalid combination is given. CBaseChainParams::MAIN by default.\n  */\n-bool SelectBaseParamsFromCommandLine();\n+std::string ChainNameFromCommandLine();\n \n /**\n  * Return true if SelectBaseParamsFromCommandLine() has been called to select"
      },
      {
        "sha": "75c76e32586a34a39d96857677b4fbea6c08284a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -439,11 +439,10 @@ std::string HelpMessage(HelpMessageMode mode)\n     {\n         strUsage += HelpMessageOpt(\"-printpriority\", strprintf(\"Log transaction priority and fee per kB when mining blocks (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-regtest\", \"Enter regression test mode, which uses a special chain in which blocks can be solved instantly. \"\n-            \"This is intended for regression testing tools and app development.\");\n     }\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n-    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    AppendParamsHelpMessages(strUsage, showDebug);\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)"
      },
      {
        "sha": "89d2d44fd71ce3229c66492eb0eb6f15757ba466",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -597,8 +597,10 @@ int main(int argc, char *argv[])\n     // - Needs to be done before createOptionsModel\n \n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: Invalid combination of -regtest and -testnet.\"));\n+    try {\n+        SelectParams(ChainNameFromCommandLine());\n+    } catch(std::exception &e) {\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin Core\"), QObject::tr(\"Error: %1\").arg(e.what()));\n         return 1;\n     }\n #ifdef ENABLE_WALLET"
      },
      {
        "sha": "a74fbfc0d713a8fa1581f765cfbdd753f162a919",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -32,13 +32,13 @@ CWallet* pwalletMain;\n extern bool fPrintToConsole;\n extern void noui_connect();\n \n-BasicTestingSetup::BasicTestingSetup(CBaseChainParams::Network network)\n+BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n         ECC_Start();\n         SetupEnvironment();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n-        SelectParams(network);\n+        SelectParams(chainName);\n         noui_connect();\n }\n \n@@ -47,7 +47,7 @@ BasicTestingSetup::~BasicTestingSetup()\n         ECC_Stop();\n }\n \n-TestingSetup::TestingSetup(CBaseChainParams::Network network) : BasicTestingSetup(network)\n+TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n {\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      },
      {
        "sha": "0bab4b68319e108b645f4aad9b53386f3f4f7f2a",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e26a3f6713f8f12640cdb75aad48676e901e0c75/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "patch": "@@ -12,7 +12,7 @@\n  * This just configures logging and chain parameters.\n  */\n struct BasicTestingSetup {\n-    BasicTestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n+    BasicTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~BasicTestingSetup();\n };\n \n@@ -25,7 +25,7 @@ struct TestingSetup: public BasicTestingSetup {\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n \n-    TestingSetup(CBaseChainParams::Network network = CBaseChainParams::MAIN);\n+    TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();\n };\n "
      }
    ]
  },
  {
    "sha": "c6de5cc88614f587ae2d0e360536412407e02836",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmRlNWNjODg2MTRmNTg3YWUyZDBlMzYwNTM2NDEyNDA3ZTAyODM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T15:08:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-20T15:09:22Z"
      },
      "message": "Merge pull request #6796\n\nc7b36cc Change URLs to https in debian/control (Matt Corallo)\ne253e83 Update debian/changelog and slight tweak to debian/control (Matt Corallo)",
      "tree": {
        "sha": "675f24615021ff2317f11c7ed89768a323d0cbff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/675f24615021ff2317f11c7ed89768a323d0cbff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6de5cc88614f587ae2d0e360536412407e02836",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJlkiAAoJEHSBCwEjRsmmxzYH/Rq206XSJna3Z9hKa6Di2UHK\nhYf+3HQczaYe0TFtH/QlYgI80SmFhhqjbFXGNjKtrxg8qh2Xjga+7o8Ihk8wv7S4\nA6twMK+BZqySNs6LpXXtV+/A/DmaeWxHr46FuiAeQSKwmeD54iVZwRLb9La7qsqI\niIpDl9Gam5OESCJNiCejqsxF2xXEA6l1c/YvY4xBhLqlXnJiE8+iEOI7tPAjV2eI\nIEtPsazOKXIDIzB0EeSKehBfiE3cWuLDdqMmXqr8I5LaDrDElWM1RHjMhOuPALAt\nfDY7jt0FgbxRUkJk78TPyhOngMBL1YDg3UfpRga/Jbey63Is/ILvGSFYcHDc2bU=\n=NWtj\n-----END PGP SIGNATURE-----",
        "payload": "tree 675f24615021ff2317f11c7ed89768a323d0cbff\nparent e26a3f6713f8f12640cdb75aad48676e901e0c75\nparent c7b36ccf4a9a71864d850d1c6f597351ba20430f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445353728 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445353762 +0200\n\nMerge pull request #6796\n\nc7b36cc Change URLs to https in debian/control (Matt Corallo)\ne253e83 Update debian/changelog and slight tweak to debian/control (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6de5cc88614f587ae2d0e360536412407e02836",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6de5cc88614f587ae2d0e360536412407e02836",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6de5cc88614f587ae2d0e360536412407e02836/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e26a3f6713f8f12640cdb75aad48676e901e0c75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e26a3f6713f8f12640cdb75aad48676e901e0c75"
      },
      {
        "sha": "c7b36ccf4a9a71864d850d1c6f597351ba20430f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7b36ccf4a9a71864d850d1c6f597351ba20430f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7b36ccf4a9a71864d850d1c6f597351ba20430f"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 34,
      "deletions": 3
    },
    "files": [
      {
        "sha": "110bfe03effcdad2f353ff9746ab9589e4a7c08e",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6de5cc88614f587ae2d0e360536412407e02836/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6de5cc88614f587ae2d0e360536412407e02836/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=c6de5cc88614f587ae2d0e360536412407e02836",
        "patch": "@@ -1,3 +1,33 @@\n+bitcoin (0.11.0-precise1) precise; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 14 Jul 2015 14:39:00 -1000\n+\n+bitcoin (0.10.2-precise1) precise; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Mon, 29 Jun 2015 17:33:00 -1000\n+\n+bitcoin (0.10.1-precise3) precise; urgency=medium\n+\n+  * Fix build dep (include python).\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 5 May 2015 09:28:00 -1000\n+\n+bitcoin (0.10.1-precise2) precise; urgency=medium\n+\n+  * Fix miniupnpc dep.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 5 May 2015 00:33:00 -1000\n+\n+bitcoin (0.10.1-precise1) precise; urgency=medium\n+\n+  * New upstream release.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Tue, 5 May 2015 00:07:00 -1000\n+\n bitcoin (0.10.0-precise1) precise; urgency=medium\n \n   * New upstream releases."
      },
      {
        "sha": "2fd68583cecee6907b1e09bbe381aa11cf5e040b",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6de5cc88614f587ae2d0e360536412407e02836/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6de5cc88614f587ae2d0e360536412407e02836/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=c6de5cc88614f587ae2d0e360536412407e02836",
        "patch": "@@ -20,11 +20,12 @@ Build-Depends: debhelper,\n  qt4-qmake,\n  libqt4-dev,\n  libqrencode-dev,\n- libprotobuf-dev, protobuf-compiler\n+ libprotobuf-dev, protobuf-compiler,\n+ python\n Standards-Version: 3.9.2\n-Homepage: http://www.bitcoin.org/\n+Homepage: https://www.bitcoin.org/\n Vcs-Git: git://github.com/bitcoin/bitcoin.git\n-Vcs-Browser: http://github.com/bitcoin/bitcoin\n+Vcs-Browser: https://github.com/bitcoin/bitcoin\n \n Package: bitcoind\n Architecture: any"
      }
    ]
  },
  {
    "sha": "ab1f56072a796b0ff039d6690c6ac929dbcbf243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjFmNTYwNzJhNzk2YjBmZjAzOWQ2NjkwYzZhYzkyOWRiY2JmMjQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-07T21:34:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-20T16:59:08Z"
      },
      "message": "Support -checkmempool=N, which runs checks on average once every N transactions",
      "tree": {
        "sha": "bd16f4d42d3a075a41879dbaef2674a25a7442e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd16f4d42d3a075a41879dbaef2674a25a7442e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab1f56072a796b0ff039d6690c6ac929dbcbf243",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1f56072a796b0ff039d6690c6ac929dbcbf243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1f56072a796b0ff039d6690c6ac929dbcbf243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1f56072a796b0ff039d6690c6ac929dbcbf243/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6de5cc88614f587ae2d0e360536412407e02836",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6de5cc88614f587ae2d0e360536412407e02836",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6de5cc88614f587ae2d0e360536412407e02836"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "d899a1cf9817df66e88921e71f9e412533426845",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1f56072a796b0ff039d6690c6ac929dbcbf243/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1f56072a796b0ff039d6690c6ac929dbcbf243/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ab1f56072a796b0ff039d6690c6ac929dbcbf243",
        "patch": "@@ -836,7 +836,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         InitWarning(_(\"Warning: Unsupported argument -benchmark ignored, use -debug=bench.\"));\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n-    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks()));\n+    int ratio = std::min<int>(std::max<int>(GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    if (ratio != 0) {\n+        mempool.setSanityCheck(1.0 / ratio);\n+    }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n "
      },
      {
        "sha": "c379a45b4833bcbf2c4a4b4bf25f8e4ba3ccaed5",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1f56072a796b0ff039d6690c6ac929dbcbf243/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1f56072a796b0ff039d6690c6ac929dbcbf243/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ab1f56072a796b0ff039d6690c6ac929dbcbf243",
        "patch": "@@ -311,7 +311,7 @@ CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n-    fSanityCheck = false;\n+    nCheckFrequency = 0;\n \n     minerPolicyEstimator = new CBlockPolicyEstimator(_minRelayFee);\n }\n@@ -483,7 +483,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n             if (it2 != mapTx.end())\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-            if (fSanityCheck) assert(coins);\n+            if (nCheckFrequency != 0) assert(coins);\n             if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n                 transactionsToRemove.push_back(tx);\n                 break;\n@@ -553,7 +553,10 @@ void CTxMemPool::clear()\n \n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n-    if (!fSanityCheck)\n+    if (nCheckFrequency == 0)\n+        return;\n+\n+    if (insecure_rand() >= nCheckFrequency)\n         return;\n \n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());"
      },
      {
        "sha": "7d83decb5539a945c78a1463768c89a8c7a5627b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab1f56072a796b0ff039d6690c6ac929dbcbf243/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab1f56072a796b0ff039d6690c6ac929dbcbf243/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=ab1f56072a796b0ff039d6690c6ac929dbcbf243",
        "patch": "@@ -277,7 +277,7 @@ class CInPoint\n class CTxMemPool\n {\n private:\n-    bool fSanityCheck; //! Normally false, true if -checkmempool or -regtest\n+    uint32_t nCheckFrequency; //! Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated;\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n@@ -338,7 +338,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n+    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967296.0; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjIwZTIzOWM2MDJkZDdkM2FiODU5MzVlZjlkMWY2YzVlMTkwN2Qy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-21T06:49:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-21T06:50:16Z"
      },
      "message": "Merge pull request #6722\n\n58254aa Fix stale comment in CTxMemPool::TrimToSize. (Matt Corallo)\n2bc5018 Fix comment formatting tabs (Matt Corallo)\n8abe0f5 Undo GetMinFee-requires-extra-call-to-hit-0 (Matt Corallo)\n9e93640 Drop minRelayTxFee to 1000 (Matt Corallo)\n074cb15 Add reasonable test case for mempool trimming (Matt Corallo)\nd355cf4 Only call TrimToSize once per reorg/blocks disconnect (Matt Corallo)\n794a8ce Implement on-the-fly mempool size limitation. (Matt Corallo)\ne6c7b36 Print mempool size in KB when adding txn (Matt Corallo)\n241d607 Add CFeeRate += operator (Matt Corallo)\ne8bcdce Track (and define) ::minRelayTxFee in CTxMemPool (Matt Corallo)\n9c9b66f Fix calling mempool directly, instead of pool, in ATMP (Matt Corallo)\n49b6fd5 Add Mempool Expire function to remove old transactions (Pieter Wuille)\n78b82f4 Reverse the sort on the mempool's feerate index (Suhas Daftuar)",
      "tree": {
        "sha": "2705a5810ce71e9f382fc2bf073dccd6d8cd6e8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2705a5810ce71e9f382fc2bf073dccd6d8cd6e8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJzWoAAoJEHSBCwEjRsmmmEEH/jVc/jnhJPGSgLDCSelp55WK\njtOwkrRcVA5fa9y7FokpD7H6CxRVsK//i87DHrWGfUm2zIg4DUwdORabPWaJX3r0\n9HmhyVkr0OimT66uGieKypvq+E2uFTkpKiKw7vnTtIizjNHXjZP/zcLENWyvVpgh\n4IALGPyIwOUn6d/uo3rIYPPrHAgHXbFVdxrpOCJk01OnlKnsWEA5Fj8ACu+SymbC\nqQrD+STU/bBSkFoKWpQj1sgVl814IePrVYGZF7qwGc4Hl+FNm1l2RpBjOZIOF8RS\ngBQAg1Mmti4cAMO0kt77fkxwajO/nTGsBNanv6AemH7vHOHJ71/cnnIVngFbFrY=\n=mqie\n-----END PGP SIGNATURE-----",
        "payload": "tree 2705a5810ce71e9f382fc2bf073dccd6d8cd6e8c\nparent c6de5cc88614f587ae2d0e360536412407e02836\nparent 58254aa3bc2e92840679183cc884eb76670af525\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445410165 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445410216 +0200\n\nMerge pull request #6722\n\n58254aa Fix stale comment in CTxMemPool::TrimToSize. (Matt Corallo)\n2bc5018 Fix comment formatting tabs (Matt Corallo)\n8abe0f5 Undo GetMinFee-requires-extra-call-to-hit-0 (Matt Corallo)\n9e93640 Drop minRelayTxFee to 1000 (Matt Corallo)\n074cb15 Add reasonable test case for mempool trimming (Matt Corallo)\nd355cf4 Only call TrimToSize once per reorg/blocks disconnect (Matt Corallo)\n794a8ce Implement on-the-fly mempool size limitation. (Matt Corallo)\ne6c7b36 Print mempool size in KB when adding txn (Matt Corallo)\n241d607 Add CFeeRate += operator (Matt Corallo)\ne8bcdce Track (and define) ::minRelayTxFee in CTxMemPool (Matt Corallo)\n9c9b66f Fix calling mempool directly, instead of pool, in ATMP (Matt Corallo)\n49b6fd5 Add Mempool Expire function to remove old transactions (Pieter Wuille)\n78b82f4 Reverse the sort on the mempool's feerate index (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6de5cc88614f587ae2d0e360536412407e02836",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6de5cc88614f587ae2d0e360536412407e02836",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6de5cc88614f587ae2d0e360536412407e02836"
      },
      {
        "sha": "58254aa3bc2e92840679183cc884eb76670af525",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58254aa3bc2e92840679183cc884eb76670af525",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58254aa3bc2e92840679183cc884eb76670af525"
      }
    ],
    "stats": {
      "total": 418,
      "additions": 361,
      "deletions": 57
    },
    "files": [
      {
        "sha": "a4c7764cda2bfd3a7afcc4ffa9a286eb0a42a4c3",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -51,6 +51,7 @@ class CFeeRate\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n     friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n     friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n     std::string ToString() const;\n \n     ADD_SERIALIZE_METHODS;"
      },
      {
        "sha": "5c961a3ad9df601082768380c56ba2227d30ddaf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -320,6 +320,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n+    strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n@@ -840,6 +842,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n \n+    // -mempoollimit limits\n+    int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n+    if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n+        return InitError(strprintf(_(\"Error: -maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n+\n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n     if (nScriptCheckThreads <= 0)"
      },
      {
        "sha": "d870280e993c78157d2e80fd69d6e68e5c4dc346",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 20,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -75,7 +75,7 @@ uint64_t nPruneTarget = 0;\n bool fAlerts = DEFAULT_ALERTS;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n-CFeeRate minRelayTxFee = CFeeRate(5000);\n+CFeeRate minRelayTxFee = CFeeRate(1000);\n \n CTxMemPool mempool(::minRelayTxFee);\n \n@@ -740,17 +740,14 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n+CAmount GetMinRelayFee(const CTransaction& tx, const CTxMemPool& pool, unsigned int nBytes, bool fAllowFree)\n {\n-    {\n-        LOCK(mempool.cs);\n-        uint256 hash = tx.GetHash();\n-        double dPriorityDelta = 0;\n-        CAmount nFeeDelta = 0;\n-        mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n-        if (dPriorityDelta > 0 || nFeeDelta > 0)\n-            return 0;\n-    }\n+    uint256 hash = tx.GetHash();\n+    double dPriorityDelta = 0;\n+    CAmount nFeeDelta = 0;\n+    pool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n+    if (dPriorityDelta > 0 || nFeeDelta > 0)\n+        return 0;\n \n     CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n \n@@ -779,7 +776,7 @@ static std::string FormatStateMessage(const CValidationState &state)\n }\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectAbsurdFee)\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, bool fRejectAbsurdFee)\n {\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -879,17 +876,20 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), mempool.HasNoInputsOf(tx));\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx));\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, pool, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                 strprintf(\"%d < %d\", nFees, txMinFee));\n \n-        // Require that free transactions have sufficient priority to be mined in the next block.\n-        if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+        CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        if (mempoolRejectFee > 0 && nFees < mempoolRejectFee) {\n+            return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n+        } else if (GetBoolArg(\"-relaypriority\", true) && nFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(view.GetPriority(tx, chainActive.Height() + 1))) {\n+            // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n@@ -954,6 +954,17 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Store transaction in memory\n         pool.addUnchecked(hash, entry, setAncestors, !IsInitialBlockDownload());\n+\n+        // trim mempool and check if tx was trimmed\n+        if (!fOverrideMempoolLimit) {\n+            int expired = pool.Expire(GetTime() - GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n+            if (expired != 0)\n+                LogPrint(\"mempool\", \"Expired %i transactions from the memory pool\\n\", expired);\n+\n+            pool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+            if (!pool.exists(tx.GetHash()))\n+                return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool full\");\n+        }\n     }\n \n     SyncWithWallets(tx, NULL);\n@@ -2020,7 +2031,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     }\n }\n \n-/** Disconnect chainActive's tip. */\n+/** Disconnect chainActive's tip. You want to manually re-limit mempool size after this */\n bool static DisconnectTip(CValidationState &state) {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n@@ -2047,7 +2058,7 @@ bool static DisconnectTip(CValidationState &state) {\n         // ignore validation errors in resurrected transactions\n         list<CTransaction> removed;\n         CValidationState stateDummy;\n-        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL)) {\n+        if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n             mempool.remove(tx, removed, true);\n         } else if (mempool.exists(tx.GetHash())) {\n             vHashUpdate.push_back(tx.GetHash());\n@@ -2220,9 +2231,11 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n     // Disconnect active blocks which are no longer in the best chain.\n+    bool fBlocksDisconnected = false;\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n         if (!DisconnectTip(state))\n             return false;\n+        fBlocksDisconnected = true;\n     }\n \n     // Build list of new blocks to connect.\n@@ -2268,6 +2281,9 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     }\n     }\n \n+    if (fBlocksDisconnected)\n+        mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+\n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n         CheckForkWarningConditionsOnNewFork(vpindexToConnect.back());\n@@ -2354,6 +2370,8 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n         }\n     }\n \n+    mempool.TrimToSize(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+\n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n     // add it again.\n     BlockMap::iterator it = mapBlockIndex.begin();\n@@ -4290,10 +4308,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             RelayTransaction(tx);\n             vWorkQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),\n-                mempool.size());\n+                mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n \n             // Recursively process any orphan transactions that depended on this one\n             set<NodeId> setMisbehaving;"
      },
      {
        "sha": "202d2c772ba896b3f9f71cba6d1e6121ddd53594",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -51,6 +51,10 @@ static const unsigned int DEFAULT_ANCESTOR_SIZE_LIMIT = 900;\n static const unsigned int DEFAULT_DESCENDANT_LIMIT = 1000;\n /** Default for -limitdescendantsize, maximum kilobytes of in-mempool descendants */\n static const unsigned int DEFAULT_DESCENDANT_SIZE_LIMIT = 2500;\n+/** Default for -maxmempool, maximum megabytes of mempool memory usage */\n+static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n+/** Default for -mempoolexpiry, expiration time for mempool transactions in hours */\n+static const unsigned int DEFAULT_MEMPOOL_EXPIRY = 72;\n /** The maximum size of a blk?????.dat file (since 0.8) */\n static const unsigned int MAX_BLOCKFILE_SIZE = 0x8000000; // 128 MiB\n /** The pre-allocation chunk size for blk?????.dat files (since 0.8) */\n@@ -225,7 +229,7 @@ void PruneAndFlush();\n \n /** (try to) add transaction to memory pool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fRejectAbsurdFee=false);\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit=false, bool fRejectAbsurdFee=false);\n \n \n struct CNodeStateStats {"
      },
      {
        "sha": "4b964735042dabbffcc4bcc266942a28b99b5833",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -809,7 +809,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, !fOverrideFees)) {\n+        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, !fOverrideFees)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "0cf906a259e7b1fbdeefb655f5ced1fcc37b55ac",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 176,
        "deletions": 23,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -153,11 +153,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     std::vector<std::string> sortedOrder;\n     sortedOrder.resize(5);\n-    sortedOrder[0] = tx2.GetHash().ToString(); // 20000\n-    sortedOrder[1] = tx4.GetHash().ToString(); // 15000\n+    sortedOrder[0] = tx3.GetHash().ToString(); // 0\n+    sortedOrder[1] = tx5.GetHash().ToString(); // 10000\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n-    sortedOrder[3] = tx5.GetHash().ToString(); // 10000\n-    sortedOrder[4] = tx3.GetHash().ToString(); // 0\n+    sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n+    sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n     CheckSort(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -169,7 +169,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 0LL, 1, 10.0, 1, true));\n     BOOST_CHECK_EQUAL(pool.size(), 6);\n     // Check that at this point, tx6 is sorted low\n-    sortedOrder.push_back(tx6.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     CTxMemPool::setEntries setAncestors;\n@@ -194,9 +194,9 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 7);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n-    sortedOrder.erase(sortedOrder.end()-1);\n-    sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n-    sortedOrder.insert(sortedOrder.begin(), tx7.GetHash().ToString());\n+    sortedOrder.erase(sortedOrder.begin());\n+    sortedOrder.push_back(tx6.GetHash().ToString());\n+    sortedOrder.push_back(tx7.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n@@ -211,7 +211,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(tx8.GetHash(), CTxMemPoolEntry(tx8, 0LL, 2, 10.0, 1, true), setAncestors);\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n-    sortedOrder.push_back(tx8.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     /* low fee child of tx7 */\n@@ -226,7 +226,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9);\n-    sortedOrder.push_back(tx9.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n     CheckSort(pool, sortedOrder);\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n@@ -255,21 +255,21 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n      *  tx8 and tx9 should both now be sorted higher\n      *  Final order after tx10 is added:\n      *\n-     *  tx7 = 2.2M (4 txs)\n-     *  tx6 = 2.2M (5 txs)\n-     *  tx10 = 200k (1 tx)\n-     *  tx8 = 200k (2 txs)\n-     *  tx9 = 200k (2 txs)\n-     *  tx2 = 20000 (1)\n-     *  tx4 = 15000 (1)\n-     *  tx1 = 10000 (1)\n-     *  tx5 = 10000 (1)\n      *  tx3 = 0 (1)\n+     *  tx5 = 10000 (1)\n+     *  tx1 = 10000 (1)\n+     *  tx4 = 15000 (1)\n+     *  tx2 = 20000 (1)\n+     *  tx9 = 200k (2 txs)\n+     *  tx8 = 200k (2 txs)\n+     *  tx10 = 200k (1 tx)\n+     *  tx6 = 2.2M (5 txs)\n+     *  tx7 = 2.2M (4 txs)\n      */\n-    sortedOrder.erase(sortedOrder.end()-2, sortedOrder.end()); // take out tx8, tx9 from the end\n-    sortedOrder.insert(sortedOrder.begin()+2, tx10.GetHash().ToString()); // tx10 is after tx6\n-    sortedOrder.insert(sortedOrder.begin()+3, tx9.GetHash().ToString());\n-    sortedOrder.insert(sortedOrder.begin()+3, tx8.GetHash().ToString());\n+    sortedOrder.erase(sortedOrder.begin(), sortedOrder.begin()+2); // take out tx9, tx8 from the beginning\n+    sortedOrder.insert(sortedOrder.begin()+5, tx9.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin()+6, tx8.GetHash().ToString());\n+    sortedOrder.insert(sortedOrder.begin()+7, tx10.GetHash().ToString()); // tx10 is just before tx6\n     CheckSort(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool\n@@ -281,4 +281,157 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     CheckSort(pool, snapshotOrder);\n }\n \n+BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n+{\n+    CTxMemPool pool(CFeeRate(1000));\n+\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vin.resize(1);\n+    tx1.vin[0].scriptSig = CScript() << OP_1;\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx1.GetHash(), CTxMemPoolEntry(tx1, 10000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx1)));\n+\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vin.resize(1);\n+    tx2.vin[0].scriptSig = CScript() << OP_2;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n+    tx2.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage()); // should do nothing\n+    BOOST_CHECK(pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // should remove the lower-feerate transaction\n+    BOOST_CHECK(pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+\n+    pool.addUnchecked(tx2.GetHash(), CTxMemPoolEntry(tx2, 5000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx2)));\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vin.resize(1);\n+    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n+    tx3.vin[0].scriptSig = CScript() << OP_2;\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n+    tx3.vout[0].nValue = 10 * COIN;\n+    pool.addUnchecked(tx3.GetHash(), CTxMemPoolEntry(tx3, 20000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx3)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4); // tx3 should pay for tx2 (CPFP)\n+    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(pool.exists(tx3.GetHash()));\n+\n+    pool.TrimToSize(::GetSerializeSize(CTransaction(tx1), SER_NETWORK, PROTOCOL_VERSION)); // mempool is limited to tx1's size in memory usage, so nothing fits\n+    BOOST_CHECK(!pool.exists(tx1.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx2.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx3.GetHash()));\n+\n+    CFeeRate maxFeeRateRemoved(25000, ::GetSerializeSize(CTransaction(tx3), SER_NETWORK, PROTOCOL_VERSION) + ::GetSerializeSize(CTransaction(tx2), SER_NETWORK, PROTOCOL_VERSION));\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vin.resize(2);\n+    tx4.vin[0].prevout.SetNull();\n+    tx4.vin[0].scriptSig = CScript() << OP_4;\n+    tx4.vin[1].prevout.SetNull();\n+    tx4.vin[1].scriptSig = CScript() << OP_4;\n+    tx4.vout.resize(2);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[0].nValue = 10 * COIN;\n+    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vin.resize(2);\n+    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n+    tx5.vin[0].scriptSig = CScript() << OP_4;\n+    tx5.vin[1].prevout.SetNull();\n+    tx5.vin[1].scriptSig = CScript() << OP_5;\n+    tx5.vout.resize(2);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[0].nValue = 10 * COIN;\n+    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx6 = CMutableTransaction();\n+    tx6.vin.resize(2);\n+    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n+    tx6.vin[0].scriptSig = CScript() << OP_4;\n+    tx6.vin[1].prevout.SetNull();\n+    tx6.vin[1].scriptSig = CScript() << OP_6;\n+    tx6.vout.resize(2);\n+    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[0].nValue = 10 * COIN;\n+    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx7 = CMutableTransaction();\n+    tx7.vin.resize(2);\n+    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n+    tx7.vin[0].scriptSig = CScript() << OP_5;\n+    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n+    tx7.vin[1].scriptSig = CScript() << OP_6;\n+    tx7.vout.resize(2);\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+\n+    pool.addUnchecked(tx4.GetHash(), CTxMemPoolEntry(tx4, 7000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx4)));\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx6.GetHash(), CTxMemPoolEntry(tx6, 1100LL, 0, 10.0, 1, pool.HasNoInputsOf(tx6)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    // we only require this remove, at max, 2 txn, because its not clear what we're really optimizing for aside from that\n+    pool.TrimToSize(pool.DynamicMemoryUsage() - 1);\n+    BOOST_CHECK(pool.exists(tx4.GetHash()));\n+    BOOST_CHECK(pool.exists(tx6.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+\n+    if (!pool.exists(tx5.GetHash()))\n+        pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    pool.TrimToSize(pool.DynamicMemoryUsage() / 2); // should maximize mempool size by only removing 5/7\n+    BOOST_CHECK(pool.exists(tx4.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx5.GetHash()));\n+    BOOST_CHECK(pool.exists(tx6.GetHash()));\n+    BOOST_CHECK(!pool.exists(tx7.GetHash()));\n+\n+    pool.addUnchecked(tx5.GetHash(), CTxMemPoolEntry(tx5, 1000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx5)));\n+    pool.addUnchecked(tx7.GetHash(), CTxMemPoolEntry(tx7, 9000LL, 0, 10.0, 1, pool.HasNoInputsOf(tx7)));\n+\n+    std::vector<CTransaction> vtx;\n+    std::list<CTransaction> conflicts;\n+    SetMockTime(42);\n+    SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n+    // ... we should keep the same min fee until we get a block\n+    pool.removeForBlock(vtx, 1, conflicts);\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n+    // ... then feerate should drop 1/2 each halflife\n+\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 5 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/4);\n+    // ... with a 1/2 halflife when mempool is < 1/2 its target size\n+\n+    SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n+    // ... with a 1/4 halflife when mempool is < 1/4 its target size\n+\n+    SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n+    // ... but feerate should never drop below 1000\n+\n+    SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n+    // ... unless it has gone all the way to 0 (after getting past 1000/2)\n+\n+    SetMockTime(0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9b8e1c088b2d386986d23580d8efdaefaa40c0c9",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -23,7 +23,7 @@ ToMemPool(CMutableTransaction& tx)\n     LOCK(cs_main);\n \n     CValidationState state;\n-    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, true, false);\n }\n \n BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)"
      },
      {
        "sha": "bb148005cd274de57d0888a7b8d20497ef5aa79d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 88,
        "deletions": 4,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -13,6 +13,7 @@\n #include \"streams.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n+#include \"utiltime.h\"\n #include \"version.h\"\n \n using namespace std;\n@@ -305,15 +306,18 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n     }\n }\n \n-CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n+CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n+    clear();\n+\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n     fSanityCheck = false;\n \n-    minerPolicyEstimator = new CBlockPolicyEstimator(_minRelayFee);\n+    minerPolicyEstimator = new CBlockPolicyEstimator(_minReasonableRelayFee);\n+    minReasonableRelayFee = _minReasonableRelayFee;\n }\n \n CTxMemPool::~CTxMemPool()\n@@ -538,6 +542,8 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     }\n     // After the txs in the new block have been removed from the mempool, update policy estimates\n     minerPolicyEstimator->processBlock(nBlockHeight, entries, fCurrentEstimate);\n+    lastRollingFeeUpdate = GetTime();\n+    blockSinceLastRollingFeeBump = true;\n }\n \n void CTxMemPool::clear()\n@@ -548,6 +554,9 @@ void CTxMemPool::clear()\n     mapNextTx.clear();\n     totalTxSize = 0;\n     cachedInnerUsage = 0;\n+    lastRollingFeeUpdate = GetTime();\n+    blockSinceLastRollingFeeBump = false;\n+    rollingMinimumFeeRate = 0;\n     ++nTransactionsUpdated;\n }\n \n@@ -735,10 +744,10 @@ void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash,\n     LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n+void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, std::pair<double, CAmount> >::const_iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n     const std::pair<double, CAmount> &deltas = pos->second;\n@@ -792,6 +801,22 @@ void CTxMemPool::RemoveStaged(setEntries &stage) {\n     }\n }\n \n+int CTxMemPool::Expire(int64_t time) {\n+    LOCK(cs);\n+    indexed_transaction_set::nth_index<2>::type::iterator it = mapTx.get<2>().begin();\n+    setEntries toremove;\n+    while (it != mapTx.get<2>().end() && it->GetTime() < time) {\n+        toremove.insert(mapTx.project<0>(it));\n+        it++;\n+    }\n+    setEntries stage;\n+    BOOST_FOREACH(txiter removeit, toremove) {\n+        CalculateDescendants(removeit, stage);\n+    }\n+    RemoveStaged(stage);\n+    return stage.size();\n+}\n+\n bool CTxMemPool::addUnchecked(const uint256&hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate)\n {\n     LOCK(cs);\n@@ -837,3 +862,62 @@ const CTxMemPool::setEntries & CTxMemPool::GetMemPoolChildren(txiter entry) cons\n     assert(it != mapLinks.end());\n     return it->second.children;\n }\n+\n+CFeeRate CTxMemPool::GetMinFee(size_t sizelimit) const {\n+    LOCK(cs);\n+    if (!blockSinceLastRollingFeeBump || rollingMinimumFeeRate == 0)\n+        return CFeeRate(rollingMinimumFeeRate);\n+\n+    int64_t time = GetTime();\n+    if (time > lastRollingFeeUpdate + 10) {\n+        double halflife = ROLLING_FEE_HALFLIFE;\n+        if (DynamicMemoryUsage() < sizelimit / 4)\n+            halflife /= 4;\n+        else if (DynamicMemoryUsage() < sizelimit / 2)\n+            halflife /= 2;\n+\n+        rollingMinimumFeeRate = rollingMinimumFeeRate / pow(2.0, (time - lastRollingFeeUpdate) / halflife);\n+        lastRollingFeeUpdate = time;\n+\n+        if (rollingMinimumFeeRate < minReasonableRelayFee.GetFeePerK() / 2) {\n+            rollingMinimumFeeRate = 0;\n+            return CFeeRate(0);\n+        }\n+    }\n+    return std::max(CFeeRate(rollingMinimumFeeRate), minReasonableRelayFee);\n+}\n+\n+void CTxMemPool::trackPackageRemoved(const CFeeRate& rate) {\n+    AssertLockHeld(cs);\n+    if (rate.GetFeePerK() > rollingMinimumFeeRate) {\n+        rollingMinimumFeeRate = rate.GetFeePerK();\n+        blockSinceLastRollingFeeBump = false;\n+    }\n+}\n+\n+void CTxMemPool::TrimToSize(size_t sizelimit) {\n+    LOCK(cs);\n+\n+    unsigned nTxnRemoved = 0;\n+    CFeeRate maxFeeRateRemoved(0);\n+    while (DynamicMemoryUsage() > sizelimit) {\n+        indexed_transaction_set::nth_index<1>::type::iterator it = mapTx.get<1>().begin();\n+\n+        // We set the new mempool min fee to the feerate of the removed set, plus the\n+        // \"minimum reasonable fee rate\" (ie some value under which we consider txn\n+        // to have 0 fee). This way, we don't allow txn to enter mempool with feerate\n+        // equal to txn which were removed with no block in between.\n+        CFeeRate removed(it->GetFeesWithDescendants(), it->GetSizeWithDescendants());\n+        removed += minReasonableRelayFee;\n+        trackPackageRemoved(removed);\n+        maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n+\n+        setEntries stage;\n+        CalculateDescendants(mapTx.project<0>(it), stage);\n+        RemoveStaged(stage);\n+        nTxnRemoved += stage.size();\n+    }\n+\n+    if (maxFeeRateRemoved > CFeeRate(0))\n+        LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n+}"
      },
      {
        "sha": "d44995eefe737b67e7557a125fc47d5aed34590d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 42,
        "deletions": 6,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -83,7 +83,7 @@ class CTxMemPoolEntry\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    CAmount GetFee() const { return nFee; }\n+    const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n@@ -160,9 +160,9 @@ class CompareTxMemPoolEntryByFee\n         double f2 = aSize * bFees;\n \n         if (f1 == f2) {\n-            return a.GetTime() < b.GetTime();\n+            return a.GetTime() >= b.GetTime();\n         }\n-        return f1 > f2;\n+        return f1 < f2;\n     }\n \n     // Calculate which feerate to use for an entry (avoiding division).\n@@ -211,9 +211,10 @@ class CInPoint\n  *\n  * CTxMemPool::mapTx, and CTxMemPoolEntry bookkeeping:\n  *\n- * mapTx is a boost::multi_index that sorts the mempool on 2 criteria:\n+ * mapTx is a boost::multi_index that sorts the mempool on 3 criteria:\n  * - transaction hash\n  * - feerate [we use max(feerate of tx, feerate of tx with all descendants)]\n+ * - time in mempool\n  *\n  * Note: the term \"descendant\" refers to in-mempool transactions that depend on\n  * this one, while \"ancestor\" refers to in-mempool transactions that a given\n@@ -284,7 +285,18 @@ class CTxMemPool\n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n     uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n+    CFeeRate minReasonableRelayFee;\n+\n+    mutable int64_t lastRollingFeeUpdate;\n+    mutable bool blockSinceLastRollingFeeBump;\n+    mutable double rollingMinimumFeeRate; //! minimum fee to get into the pool, decreases exponentially\n+\n+    void trackPackageRemoved(const CFeeRate& rate);\n+\n public:\n+\n+    static const int ROLLING_FEE_HALFLIFE = 60 * 60 * 12; // public only for testing\n+\n     typedef boost::multi_index_container<\n         CTxMemPoolEntry,\n         boost::multi_index::indexed_by<\n@@ -294,6 +306,11 @@ class CTxMemPool\n             boost::multi_index::ordered_non_unique<\n                 boost::multi_index::identity<CTxMemPoolEntry>,\n                 CompareTxMemPoolEntryByFee\n+            >,\n+            // sorted by entry time\n+            boost::multi_index::ordered_non_unique<\n+                boost::multi_index::identity<CTxMemPoolEntry>,\n+                CompareTxMemPoolEntryByEntryTime\n             >\n         >\n     > indexed_transaction_set;\n@@ -328,7 +345,12 @@ class CTxMemPool\n     std::map<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n-    CTxMemPool(const CFeeRate& _minRelayFee);\n+    /** Create a new CTxMemPool.\n+     *  minReasonableRelayFee should be a feerate which is, roughly, somewhere\n+     *  around what it \"costs\" to relay a transaction around the network and\n+     *  below which we would reasonably say a transaction has 0-effective-fee.\n+     */\n+    CTxMemPool(const CFeeRate& _minReasonableRelayFee);\n     ~CTxMemPool();\n \n     /**\n@@ -365,7 +387,7 @@ class CTxMemPool\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n     void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n+    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta) const;\n     void ClearPrioritisation(const uint256 hash);\n \n public:\n@@ -397,6 +419,20 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n+    /** The minimum fee to get into the mempool, which may itself not be enough\n+      *  for larger-sized transactions.\n+      *  The minReasonableRelayFee constructor arg is used to bound the time it\n+      *  takes the fee rate to go back down all the way to 0. When the feerate\n+      *  would otherwise be half of this, it is set to 0 instead.\n+      */\n+    CFeeRate GetMinFee(size_t sizelimit) const;\n+\n+    /** Remove transactions from the mempool until its dynamic size is <= sizelimit. */\n+    void TrimToSize(size_t sizelimit);\n+\n+    /** Expire all transaction (and their dependencies) in the mempool older than time. Return the number of removed transactions. */\n+    int Expire(int64_t time);\n+\n     unsigned long size()\n     {\n         LOCK(cs);"
      },
      {
        "sha": "3f2d5a05f698d7da7e8d70f61ec2f1cda71a449d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "patch": "@@ -2863,6 +2863,6 @@ int CMerkleTx::GetBlocksToMaturity() const\n bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, bool fRejectAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, fRejectAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, fRejectAbsurdFee);\n }\n "
      }
    ]
  },
  {
    "sha": "0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmJmYzUxMDZjZDk4NjYzMjViNGExYWIzYjlkYjhlOTFlNTRmMDcw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-21T09:19:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-21T09:19:25Z"
      },
      "message": "Merge pull request #6859\n\n41db8c4 http: Restrict maximum size of request line + headers (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e6230f51d9d6f753b6d1f8242fa3ef70cdd9330a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6230f51d9d6f753b6d1f8242fa3ef70cdd9330a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWJ1idAAoJEHSBCwEjRsmmIIYH+gOwBJexkUAAJL6HAB67TlUJ\noajKmxoFN9Der5chyIbDCshvJUL3o8SXUXhXMyhqyNEmeTZrButQ0Z6dbhz396VN\nMxBiotUvLxVVB8iPhGNvVclDCme5XiUwXRxqIDZ8zQbar21uNOmXvqSaTPlisimY\nPUkOH9lirUKUSuiqkC7QNE24NPzAimpG24EpWtGkBGxjDXDIq7oTyazuzmmGW5O0\nykY5ddQeIC0A4fBQs3CCR1kCRotmUpM6rspufmjvSx9D/DGDwL+4AKX+LEfpFBvp\n2q2BzTfPOPi9bGl8wVXWprTXiBbcMN13KGmnB9X6Bmi3Ro+wLAJLeJTWhSQEqzk=\n=7sio\n-----END PGP SIGNATURE-----",
        "payload": "tree e6230f51d9d6f753b6d1f8242fa3ef70cdd9330a\nparent 3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2\nparent 41db8c4733b34d56834162c4d054823c240ffc92\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445419153 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445419165 +0200\n\nMerge pull request #6859\n\n41db8c4 http: Restrict maximum size of request line + headers (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b20e239c602dd7d3ab85935ef9d1f6c5e1907d2"
      },
      {
        "sha": "41db8c4733b34d56834162c4d054823c240ffc92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41db8c4733b34d56834162c4d054823c240ffc92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41db8c4733b34d56834162c4d054823c240ffc92"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7888114c54df4a30b133feb48e1f197f583517db",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
        "patch": "@@ -97,5 +97,19 @@ def run_test(self):\n         assert_equal('\"error\":null' in out1, True)\n         assert_equal(conn.sock!=None, True) #connection must be closed because bitcoind should use keep-alive by default\n \n+        # Check excessive request size\n+        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request('GET', '/' + ('x'*1000), '', headers)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, httplib.NOT_FOUND)\n+\n+        conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n+        conn.connect()\n+        conn.request('GET', '/' + ('x'*10000), '', headers)\n+        out1 = conn.getresponse()\n+        assert_equal(out1.status, httplib.BAD_REQUEST)\n+\n+\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "8698abb900e074c086995af3e5edd8195f5bc750",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
        "patch": "@@ -38,6 +38,9 @@\n #include <boost/foreach.hpp>\n #include <boost/scoped_ptr.hpp>\n \n+/** Maximum size of http request (request line + headers) */\n+static const size_t MAX_HEADERS_SIZE = 8192;\n+\n /** HTTP request work item */\n class HTTPWorkItem : public HTTPClosure\n {\n@@ -414,6 +417,7 @@ bool InitHTTPServer()\n     }\n \n     evhttp_set_timeout(http, GetArg(\"-rpcservertimeout\", DEFAULT_HTTP_SERVER_TIMEOUT));\n+    evhttp_set_max_headers_size(http, MAX_HEADERS_SIZE);\n     evhttp_set_max_body_size(http, MAX_SIZE);\n     evhttp_set_gencb(http, http_request_cb, NULL);\n "
      }
    ]
  },
  {
    "sha": "3cb56f37780854bf26650e0872a556da25897a0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2I1NmYzNzc4MDg1NGJmMjY2NTBlMDg3MmE1NTZkYTI1ODk3YTBh",
    "commit": {
      "author": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-10-18T10:02:36Z"
      },
      "committer": {
        "name": "Daniel Cousens",
        "email": "github@dcousens.com",
        "date": "2015-10-21T13:07:30Z"
      },
      "message": "*: alias -h for --help",
      "tree": {
        "sha": "96f6d3088a5205aeb5d181a8e80d43305dc3bc82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96f6d3088a5205aeb5d181a8e80d43305dc3bc82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cb56f37780854bf26650e0872a556da25897a0a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb56f37780854bf26650e0872a556da25897a0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb56f37780854bf26650e0872a556da25897a0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb56f37780854bf26650e0872a556da25897a0a/comments",
    "author": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dcousens",
      "id": 413395,
      "node_id": "MDQ6VXNlcjQxMzM5NQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/413395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dcousens",
      "html_url": "https://github.com/dcousens",
      "followers_url": "https://api.github.com/users/dcousens/followers",
      "following_url": "https://api.github.com/users/dcousens/following{/other_user}",
      "gists_url": "https://api.github.com/users/dcousens/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dcousens/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dcousens/subscriptions",
      "organizations_url": "https://api.github.com/users/dcousens/orgs",
      "repos_url": "https://api.github.com/users/dcousens/repos",
      "events_url": "https://api.github.com/users/dcousens/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dcousens/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "229dad7b3fc7a2b0c0e07eb50e0bd73e48320706",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb56f37780854bf26650e0872a556da25897a0a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb56f37780854bf26650e0872a556da25897a0a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=3cb56f37780854bf26650e0872a556da25897a0a",
        "patch": "@@ -69,7 +69,7 @@ static bool AppInitRPC(int argc, char* argv[])\n     // Parameters\n     //\n     ParseParameters(argc, argv);\n-    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\")) {\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\")) {\n         std::string strUsage = _(\"Bitcoin Core RPC client version\") + \" \" + FormatFullVersion() + \"\\n\";\n         if (!mapArgs.count(\"-version\")) {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +"
      },
      {
        "sha": "eb36435de644c3cd933430c39247a1e089e80886",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb56f37780854bf26650e0872a556da25897a0a/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb56f37780854bf26650e0872a556da25897a0a/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3cb56f37780854bf26650e0872a556da25897a0a",
        "patch": "@@ -42,7 +42,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n \n     fCreateBlank = GetBoolArg(\"-create\", false);\n \n-    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-help\"))\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\"))\n     {\n         // First part of help message is specific to this utility\n         std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +"
      },
      {
        "sha": "ca05fefb77e8b21168fec56ff191c70b3fb1a5c6",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb56f37780854bf26650e0872a556da25897a0a/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb56f37780854bf26650e0872a556da25897a0a/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=3cb56f37780854bf26650e0872a556da25897a0a",
        "patch": "@@ -72,7 +72,7 @@ bool AppInit(int argc, char* argv[])\n     ParseParameters(argc, argv);\n \n     // Process help and version before taking care about datadir\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n+    if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") ||  mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n         std::string strUsage = _(\"Bitcoin Core Daemon\") + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n "
      },
      {
        "sha": "86c820cd0f15a12d7c5e98f141293453e42410a1",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb56f37780854bf26650e0872a556da25897a0a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb56f37780854bf26650e0872a556da25897a0a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3cb56f37780854bf26650e0872a556da25897a0a",
        "patch": "@@ -563,7 +563,7 @@ int main(int argc, char *argv[])\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n+    if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n         HelpMessageDialog help(NULL, mapArgs.count(\"-version\"));\n         help.showOrPrint();"
      }
    ]
  },
  {
    "sha": "579b863cd7586b98974484ad55e19be2a54d241d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzliODYzY2Q3NTg2Yjk4OTc0NDg0YWQ1NWUxOWJlMmE1NGQyNDFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-19T12:53:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-22T01:35:38Z"
      },
      "message": "devtools: Add security-check.py\n\nPerform the following ELF security checks:\n\n- PIE: Check for position independent executable (PIE), allowing for address space randomization\n- NX: Check that no sections are writable and executable (including the stack)\n- RELRO: Check for read-only relocations, binding at startup\n- Canary: Check for use of stack canary\n\nAlso add a check to symbol-check.py that checks that only the subset of\nallowed libraries is imported (to avoid incompatibilities).",
      "tree": {
        "sha": "0a5e4661d767cd45c7c3bfb7d2cf75bb6bc5d831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a5e4661d767cd45c7c3bfb7d2cf75bb6bc5d831"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/579b863cd7586b98974484ad55e19be2a54d241d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/579b863cd7586b98974484ad55e19be2a54d241d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/579b863cd7586b98974484ad55e19be2a54d241d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/579b863cd7586b98974484ad55e19be2a54d241d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1d623da3ea4c73605d27703bc966ed8109d231e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1d623da3ea4c73605d27703bc966ed8109d231e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1d623da3ea4c73605d27703bc966ed8109d231e"
      }
    ],
    "stats": {
      "total": 271,
      "additions": 268,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e96eaa9c387e0540514c701425befd6904973443",
        "filename": "contrib/devtools/security-check.py",
        "status": "added",
        "additions": 181,
        "deletions": 0,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/579b863cd7586b98974484ad55e19be2a54d241d/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/579b863cd7586b98974484ad55e19be2a54d241d/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=579b863cd7586b98974484ad55e19be2a54d241d",
        "patch": "@@ -0,0 +1,181 @@\n+#!/usr/bin/python2\n+'''\n+Perform basic ELF security checks on a series of executables.\n+Exit status will be 0 if succesful, and the program will be silent.\n+Otherwise the exit status will be 1 and it will log which executables failed which checks.\n+Needs `readelf` (for ELF) and `objdump` (for PE).\n+'''\n+from __future__ import division,print_function\n+import subprocess\n+import sys\n+import os\n+\n+READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n+OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n+\n+def check_ELF_PIE(executable):\n+    '''\n+    Check for position independent executable (PIE), allowing for address space randomization.\n+    '''\n+    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+\n+    ok = False\n+    for line in stdout.split('\\n'):\n+        line = line.split()\n+        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+            ok = True\n+    return ok\n+\n+def get_ELF_program_headers(executable):\n+    '''Return type and flags for ELF program headers'''\n+    p = subprocess.Popen([READELF_CMD, '-l', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    in_headers = False\n+    count = 0\n+    headers = []\n+    for line in stdout.split('\\n'):\n+        if line.startswith('Program Headers:'):\n+            in_headers = True\n+        if line == '':\n+            in_headers = False\n+        if in_headers:\n+            if count == 1: # header line\n+                ofs_typ = line.find('Type')\n+                ofs_offset = line.find('Offset')\n+                ofs_flags = line.find('Flg')\n+                ofs_align = line.find('Align')\n+                if ofs_typ == -1 or ofs_offset == -1 or ofs_flags == -1 or ofs_align  == -1:\n+                    raise ValueError('Cannot parse elfread -lW output')\n+            elif count > 1:\n+                typ = line[ofs_typ:ofs_offset].rstrip()\n+                flags = line[ofs_flags:ofs_align].rstrip()\n+                headers.append((typ, flags))\n+            count += 1\n+    return headers\n+\n+def check_ELF_NX(executable):\n+    '''\n+    Check that no sections are writable and executable (including the stack)\n+    '''\n+    have_wx = False\n+    have_gnu_stack = False\n+    for (typ, flags) in get_ELF_program_headers(executable):\n+        if typ == 'GNU_STACK':\n+            have_gnu_stack = True\n+        if 'W' in flags and 'E' in flags: # section is both writable and executable\n+            have_wx = True\n+    return have_gnu_stack and not have_wx\n+\n+def check_ELF_RELRO(executable):\n+    '''\n+    Check for read-only relocations.\n+    GNU_RELRO program header must exist\n+    Dynamic section must have BIND_NOW flag\n+    '''\n+    have_gnu_relro = False\n+    for (typ, flags) in get_ELF_program_headers(executable):\n+        # Note: not checking flags == 'R': here as linkers set the permission differently\n+        # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n+        # However, the dynamic linker need to write to this area so these are RW.\n+        # Glibc itself takes care of mprotecting this area R after relocations are finished.\n+        # See also http://permalink.gmane.org/gmane.comp.gnu.binutils/71347\n+        if typ == 'GNU_RELRO':\n+            have_gnu_relro = True\n+\n+    have_bindnow = False\n+    p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    for line in stdout.split('\\n'):\n+        tokens = line.split()\n+        if len(tokens)>1 and tokens[1] == '(BIND_NOW)':\n+            have_bindnow = True\n+    return have_gnu_relro and have_bindnow\n+\n+def check_ELF_Canary(executable):\n+    '''\n+    Check for use of stack canary\n+    '''\n+    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    ok = False\n+    for line in stdout.split('\\n'):\n+        if '__stack_chk_fail' in line:\n+            ok = True\n+    return ok\n+\n+def get_PE_dll_characteristics(executable):\n+    '''\n+    Get PE DllCharacteristics bits\n+    '''\n+    p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    for line in stdout.split('\\n'):\n+        tokens = line.split()\n+        if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n+            return int(tokens[1],16)\n+    return 0\n+\n+\n+def check_PE_PIE(executable):\n+    '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n+    return bool(get_PE_dll_characteristics(executable) & 0x40)\n+\n+def check_PE_NX(executable):\n+    '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n+    return bool(get_PE_dll_characteristics(executable) & 0x100)\n+\n+CHECKS = {\n+'ELF': [\n+    ('PIE', check_ELF_PIE),\n+    ('NX', check_ELF_NX),\n+    ('RELRO', check_ELF_RELRO),\n+    ('Canary', check_ELF_Canary)\n+],\n+'PE': [\n+    ('PIE', check_PE_PIE),\n+    ('NX', check_PE_NX)\n+]\n+}\n+\n+def identify_executable(executable):\n+    with open(filename, 'rb') as f:\n+        magic = f.read(4)\n+    if magic.startswith(b'MZ'):\n+        return 'PE'\n+    elif magic.startswith(b'\\x7fELF'):\n+        return 'ELF'\n+    return None\n+\n+if __name__ == '__main__':\n+    retval = 0\n+    for filename in sys.argv[1:]:\n+        try:\n+            etype = identify_executable(filename)\n+            if etype is None:\n+                print('%s: unknown format' % filename)\n+                retval = 1\n+                continue\n+\n+            failed = []\n+            for (name, func) in CHECKS[etype]:\n+                if not func(filename):\n+                    failed.append(name)\n+            if failed:\n+                print('%s: failed %s' % (filename, ' '.join(failed)))\n+                retval = 1\n+        except IOError:\n+            print('%s: cannot open' % filename)\n+            retval = 1\n+    exit(retval)\n+"
      },
      {
        "sha": "34f1ed2d17b147adbff0ba2e978d5eb46f8f4398",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/579b863cd7586b98974484ad55e19be2a54d241d/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/579b863cd7586b98974484ad55e19be2a54d241d/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=579b863cd7586b98974484ad55e19be2a54d241d",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/python2\n # Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -15,6 +15,7 @@\n import subprocess\n import re\n import sys\n+import os\n \n # Debian 6.0.9 (Squeeze) has:\n #\n@@ -45,8 +46,10 @@\n IGNORE_EXPORTS = {\n '_edata', '_end', '_init', '__bss_start', '_fini'\n }\n-READELF_CMD = '/usr/bin/readelf'\n-CPPFILT_CMD = '/usr/bin/c++filt'\n+READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n+CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n+# Allowed NEEDED libraries\n+ALLOWED_LIBRARIES = {'librt.so.1','libpthread.so.0','libanl.so.1','libm.so.6','libgcc_s.so.1','libc.so.6','ld-linux-x86-64.so.2'}\n \n class CPPFilt(object):\n     '''\n@@ -98,6 +101,22 @@ def check_version(max_versions, version):\n         return False\n     return ver <= max_versions[lib]\n \n+def read_libraries(filename):\n+    p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.split('\\n'):\n+        tokens = line.split()\n+        if len(tokens)>2 and tokens[1] == '(NEEDED)':\n+            match = re.match('^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n+            if match:\n+                libraries.append(match.group(1))\n+            else:\n+                raise ValueError('Unparseable (NEEDED) specification')\n+    return libraries\n+\n if __name__ == '__main__':\n     cppfilt = CPPFilt()\n     retval = 0\n@@ -113,6 +132,11 @@ def check_version(max_versions, version):\n                 continue\n             print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n             retval = 1\n+        # Check dependency libraries\n+        for library_name in read_libraries(filename):\n+            if library_name not in ALLOWED_LIBRARIES:\n+                print('%s: NEEDED library %s is not allowed' % (filename, library_name))\n+                retval = 1\n \n     exit(retval)\n "
      },
      {
        "sha": "fed7626aabaaf34a7ab4ed1e13a7b5e47769f950",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/579b863cd7586b98974484ad55e19be2a54d241d/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/579b863cd7586b98974484ad55e19be2a54d241d/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=579b863cd7586b98974484ad55e19be2a54d241d",
        "patch": "@@ -0,0 +1,60 @@\n+#!/usr/bin/python2\n+'''\n+Test script for security-check.py\n+'''\n+from __future__ import division,print_function\n+import subprocess\n+import sys\n+import unittest\n+\n+def write_testcode(filename):\n+    with open(filename, 'w') as f:\n+        f.write('''\n+    #include <stdio.h>\n+    int main()\n+    {\n+        printf(\"the quick brown fox jumps over the lazy god\\\\n\");\n+        return 0;\n+    }\n+    ''')\n+\n+def call_security_check(cc, source, executable, options):\n+    subprocess.check_call([cc,source,'-o',executable] + options)\n+    p = subprocess.Popen(['./security-check.py',executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    return (p.returncode, stdout.rstrip())\n+\n+class TestSecurityChecks(unittest.TestCase):\n+    def test_ELF(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = 'gcc'\n+        write_testcode(source)\n+\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro']), \n+                (1, executable+': failed PIE NX RELRO Canary'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro']), \n+                (1, executable+': failed PIE RELRO Canary'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro']), \n+                (1, executable+': failed PIE RELRO'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE']), \n+                (1, executable+': failed RELRO'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE']), \n+                (0, ''))\n+\n+    def test_PE(self):\n+        source = 'test1.c'\n+        executable = 'test1.exe'\n+        cc = 'i686-w64-mingw32-gcc'\n+        write_testcode(source)\n+\n+        self.assertEqual(call_security_check(cc, source, executable, []), \n+                (1, executable+': failed PIE NX'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat']), \n+                (1, executable+': failed PIE'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase']), \n+                (0, ''))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n+"
      }
    ]
  },
  {
    "sha": "a09297010e171af28a7a3fcad65a4e0aefea53ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDkyOTcwMTBlMTcxYWYyOGE3YTNmY2FkNjVhNGUwYWVmZWE1M2Jh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-22T08:23:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-22T08:23:42Z"
      },
      "message": "Merge pull request #6854\n\n579b863 devtools: Add security-check.py (Wladimir J. van der Laan)",
      "tree": {
        "sha": "8dbc5a8ba29909f6832d7bbb456e7cc70b67c7d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dbc5a8ba29909f6832d7bbb456e7cc70b67c7d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a09297010e171af28a7a3fcad65a4e0aefea53ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKJ0OAAoJEHSBCwEjRsmmq2YH/A/T9ElqSScgBOFt/QPqDA2l\nfKnuZrlKMufM2bOjadWpDkkaCqnOdq/eadzmi9Us5gAXvIgkQIBxUDNF029uNCoP\nKL/VX2oJV8ySYBqmNippVjhuuP+ngsmoyJ/2f2XOExAhh7JhXeFjpkDf/1x7gsJI\nEF6o96kNBxWVzuKiKeiS1fcMgeFS+XiLBz511OUDJercgzGptkGxbsLUs/qZwOqJ\nKwqyeo/twa6MKGStGyJ7tSqCwaYv82D222Cg4ZGUVRcXRjQHr7CEZbvQvrKYJ0oo\nmrTEtRpoOTWqpXsHudW2MfrbmJS3DJ2HjqlKm5mn7ram8yeewqiQqUUw/88wPSY=\n=cZem\n-----END PGP SIGNATURE-----",
        "payload": "tree 8dbc5a8ba29909f6832d7bbb456e7cc70b67c7d8\nparent 0fbfc5106cd9866325b4a1ab3b9db8e91e54f070\nparent 579b863cd7586b98974484ad55e19be2a54d241d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445502198 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445502222 +0200\n\nMerge pull request #6854\n\n579b863 devtools: Add security-check.py (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a09297010e171af28a7a3fcad65a4e0aefea53ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a09297010e171af28a7a3fcad65a4e0aefea53ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a09297010e171af28a7a3fcad65a4e0aefea53ba/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070"
      },
      {
        "sha": "579b863cd7586b98974484ad55e19be2a54d241d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/579b863cd7586b98974484ad55e19be2a54d241d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/579b863cd7586b98974484ad55e19be2a54d241d"
      }
    ],
    "stats": {
      "total": 271,
      "additions": 268,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e96eaa9c387e0540514c701425befd6904973443",
        "filename": "contrib/devtools/security-check.py",
        "status": "added",
        "additions": 181,
        "deletions": 0,
        "changes": 181,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a09297010e171af28a7a3fcad65a4e0aefea53ba/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a09297010e171af28a7a3fcad65a4e0aefea53ba/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "patch": "@@ -0,0 +1,181 @@\n+#!/usr/bin/python2\n+'''\n+Perform basic ELF security checks on a series of executables.\n+Exit status will be 0 if succesful, and the program will be silent.\n+Otherwise the exit status will be 1 and it will log which executables failed which checks.\n+Needs `readelf` (for ELF) and `objdump` (for PE).\n+'''\n+from __future__ import division,print_function\n+import subprocess\n+import sys\n+import os\n+\n+READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n+OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n+\n+def check_ELF_PIE(executable):\n+    '''\n+    Check for position independent executable (PIE), allowing for address space randomization.\n+    '''\n+    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+\n+    ok = False\n+    for line in stdout.split('\\n'):\n+        line = line.split()\n+        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+            ok = True\n+    return ok\n+\n+def get_ELF_program_headers(executable):\n+    '''Return type and flags for ELF program headers'''\n+    p = subprocess.Popen([READELF_CMD, '-l', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    in_headers = False\n+    count = 0\n+    headers = []\n+    for line in stdout.split('\\n'):\n+        if line.startswith('Program Headers:'):\n+            in_headers = True\n+        if line == '':\n+            in_headers = False\n+        if in_headers:\n+            if count == 1: # header line\n+                ofs_typ = line.find('Type')\n+                ofs_offset = line.find('Offset')\n+                ofs_flags = line.find('Flg')\n+                ofs_align = line.find('Align')\n+                if ofs_typ == -1 or ofs_offset == -1 or ofs_flags == -1 or ofs_align  == -1:\n+                    raise ValueError('Cannot parse elfread -lW output')\n+            elif count > 1:\n+                typ = line[ofs_typ:ofs_offset].rstrip()\n+                flags = line[ofs_flags:ofs_align].rstrip()\n+                headers.append((typ, flags))\n+            count += 1\n+    return headers\n+\n+def check_ELF_NX(executable):\n+    '''\n+    Check that no sections are writable and executable (including the stack)\n+    '''\n+    have_wx = False\n+    have_gnu_stack = False\n+    for (typ, flags) in get_ELF_program_headers(executable):\n+        if typ == 'GNU_STACK':\n+            have_gnu_stack = True\n+        if 'W' in flags and 'E' in flags: # section is both writable and executable\n+            have_wx = True\n+    return have_gnu_stack and not have_wx\n+\n+def check_ELF_RELRO(executable):\n+    '''\n+    Check for read-only relocations.\n+    GNU_RELRO program header must exist\n+    Dynamic section must have BIND_NOW flag\n+    '''\n+    have_gnu_relro = False\n+    for (typ, flags) in get_ELF_program_headers(executable):\n+        # Note: not checking flags == 'R': here as linkers set the permission differently\n+        # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n+        # However, the dynamic linker need to write to this area so these are RW.\n+        # Glibc itself takes care of mprotecting this area R after relocations are finished.\n+        # See also http://permalink.gmane.org/gmane.comp.gnu.binutils/71347\n+        if typ == 'GNU_RELRO':\n+            have_gnu_relro = True\n+\n+    have_bindnow = False\n+    p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    for line in stdout.split('\\n'):\n+        tokens = line.split()\n+        if len(tokens)>1 and tokens[1] == '(BIND_NOW)':\n+            have_bindnow = True\n+    return have_gnu_relro and have_bindnow\n+\n+def check_ELF_Canary(executable):\n+    '''\n+    Check for use of stack canary\n+    '''\n+    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    ok = False\n+    for line in stdout.split('\\n'):\n+        if '__stack_chk_fail' in line:\n+            ok = True\n+    return ok\n+\n+def get_PE_dll_characteristics(executable):\n+    '''\n+    Get PE DllCharacteristics bits\n+    '''\n+    p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    for line in stdout.split('\\n'):\n+        tokens = line.split()\n+        if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n+            return int(tokens[1],16)\n+    return 0\n+\n+\n+def check_PE_PIE(executable):\n+    '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n+    return bool(get_PE_dll_characteristics(executable) & 0x40)\n+\n+def check_PE_NX(executable):\n+    '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n+    return bool(get_PE_dll_characteristics(executable) & 0x100)\n+\n+CHECKS = {\n+'ELF': [\n+    ('PIE', check_ELF_PIE),\n+    ('NX', check_ELF_NX),\n+    ('RELRO', check_ELF_RELRO),\n+    ('Canary', check_ELF_Canary)\n+],\n+'PE': [\n+    ('PIE', check_PE_PIE),\n+    ('NX', check_PE_NX)\n+]\n+}\n+\n+def identify_executable(executable):\n+    with open(filename, 'rb') as f:\n+        magic = f.read(4)\n+    if magic.startswith(b'MZ'):\n+        return 'PE'\n+    elif magic.startswith(b'\\x7fELF'):\n+        return 'ELF'\n+    return None\n+\n+if __name__ == '__main__':\n+    retval = 0\n+    for filename in sys.argv[1:]:\n+        try:\n+            etype = identify_executable(filename)\n+            if etype is None:\n+                print('%s: unknown format' % filename)\n+                retval = 1\n+                continue\n+\n+            failed = []\n+            for (name, func) in CHECKS[etype]:\n+                if not func(filename):\n+                    failed.append(name)\n+            if failed:\n+                print('%s: failed %s' % (filename, ' '.join(failed)))\n+                retval = 1\n+        except IOError:\n+            print('%s: cannot open' % filename)\n+            retval = 1\n+    exit(retval)\n+"
      },
      {
        "sha": "34f1ed2d17b147adbff0ba2e978d5eb46f8f4398",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a09297010e171af28a7a3fcad65a4e0aefea53ba/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a09297010e171af28a7a3fcad65a4e0aefea53ba/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "patch": "@@ -1,4 +1,4 @@\n-#!/usr/bin/python\n+#!/usr/bin/python2\n # Copyright (c) 2014 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n@@ -15,6 +15,7 @@\n import subprocess\n import re\n import sys\n+import os\n \n # Debian 6.0.9 (Squeeze) has:\n #\n@@ -45,8 +46,10 @@\n IGNORE_EXPORTS = {\n '_edata', '_end', '_init', '__bss_start', '_fini'\n }\n-READELF_CMD = '/usr/bin/readelf'\n-CPPFILT_CMD = '/usr/bin/c++filt'\n+READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n+CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n+# Allowed NEEDED libraries\n+ALLOWED_LIBRARIES = {'librt.so.1','libpthread.so.0','libanl.so.1','libm.so.6','libgcc_s.so.1','libc.so.6','ld-linux-x86-64.so.2'}\n \n class CPPFilt(object):\n     '''\n@@ -98,6 +101,22 @@ def check_version(max_versions, version):\n         return False\n     return ver <= max_versions[lib]\n \n+def read_libraries(filename):\n+    p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.split('\\n'):\n+        tokens = line.split()\n+        if len(tokens)>2 and tokens[1] == '(NEEDED)':\n+            match = re.match('^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n+            if match:\n+                libraries.append(match.group(1))\n+            else:\n+                raise ValueError('Unparseable (NEEDED) specification')\n+    return libraries\n+\n if __name__ == '__main__':\n     cppfilt = CPPFilt()\n     retval = 0\n@@ -113,6 +132,11 @@ def check_version(max_versions, version):\n                 continue\n             print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n             retval = 1\n+        # Check dependency libraries\n+        for library_name in read_libraries(filename):\n+            if library_name not in ALLOWED_LIBRARIES:\n+                print('%s: NEEDED library %s is not allowed' % (filename, library_name))\n+                retval = 1\n \n     exit(retval)\n "
      },
      {
        "sha": "fed7626aabaaf34a7ab4ed1e13a7b5e47769f950",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a09297010e171af28a7a3fcad65a4e0aefea53ba/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a09297010e171af28a7a3fcad65a4e0aefea53ba/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "patch": "@@ -0,0 +1,60 @@\n+#!/usr/bin/python2\n+'''\n+Test script for security-check.py\n+'''\n+from __future__ import division,print_function\n+import subprocess\n+import sys\n+import unittest\n+\n+def write_testcode(filename):\n+    with open(filename, 'w') as f:\n+        f.write('''\n+    #include <stdio.h>\n+    int main()\n+    {\n+        printf(\"the quick brown fox jumps over the lazy god\\\\n\");\n+        return 0;\n+    }\n+    ''')\n+\n+def call_security_check(cc, source, executable, options):\n+    subprocess.check_call([cc,source,'-o',executable] + options)\n+    p = subprocess.Popen(['./security-check.py',executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)\n+    (stdout, stderr) = p.communicate()\n+    return (p.returncode, stdout.rstrip())\n+\n+class TestSecurityChecks(unittest.TestCase):\n+    def test_ELF(self):\n+        source = 'test1.c'\n+        executable = 'test1'\n+        cc = 'gcc'\n+        write_testcode(source)\n+\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro']), \n+                (1, executable+': failed PIE NX RELRO Canary'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro']), \n+                (1, executable+': failed PIE RELRO Canary'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro']), \n+                (1, executable+': failed PIE RELRO'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE']), \n+                (1, executable+': failed RELRO'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE']), \n+                (0, ''))\n+\n+    def test_PE(self):\n+        source = 'test1.c'\n+        executable = 'test1.exe'\n+        cc = 'i686-w64-mingw32-gcc'\n+        write_testcode(source)\n+\n+        self.assertEqual(call_security_check(cc, source, executable, []), \n+                (1, executable+': failed PIE NX'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat']), \n+                (1, executable+': failed PIE'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase']), \n+                (0, ''))\n+\n+if __name__ == '__main__':\n+    unittest.main()\n+"
      }
    ]
  },
  {
    "sha": "95f429118585fdbe89b4e48a224d195e304f33a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWY0MjkxMTg1ODVmZGJlODliNGU0OGEyMjRkMTk1ZTMwNGYzM2E4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-11T10:47:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-22T15:01:53Z"
      },
      "message": "[trivial] Rewrite help text for feature enabled by default\n\nc.f #6748",
      "tree": {
        "sha": "7abd36ec8074121bf17425cbc2b0b9977215939e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7abd36ec8074121bf17425cbc2b0b9977215939e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95f429118585fdbe89b4e48a224d195e304f33a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f429118585fdbe89b4e48a224d195e304f33a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95f429118585fdbe89b4e48a224d195e304f33a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f429118585fdbe89b4e48a224d195e304f33a8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a09297010e171af28a7a3fcad65a4e0aefea53ba"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6cdc675e7dabe67ed73e6b28c52e7a83abcca167",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95f429118585fdbe89b4e48a224d195e304f33a8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95f429118585fdbe89b4e48a224d195e304f33a8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=95f429118585fdbe89b4e48a224d195e304f33a8",
        "patch": "@@ -92,7 +92,7 @@ AC_ARG_ENABLE(tests,\n     [use_tests=yes])\n \n AC_ARG_ENABLE(bench,\n-    AS_HELP_STRING([--enable-bench],[compile benchmarks (default is yes)]),\n+    AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n     [use_bench=yes])\n "
      }
    ]
  },
  {
    "sha": "2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2QwMjBkMDU0ZDZlYzRiNTBlYjQ0ZmZhNDAwMGI0MDU0MGE0ZGIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-22T15:51:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-22T15:53:07Z"
      },
      "message": "Merge pull request #6846\n\n3cb56f3 *: alias -h for --help (Daniel Cousens)",
      "tree": {
        "sha": "21f35c08c8199f44974b5a3edc6f7c737fd09625",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21f35c08c8199f44974b5a3edc6f7c737fd09625"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKQZjAAoJEHSBCwEjRsmmuqwIAMrwvii5BQcMj9evHmTgNDZc\nQ9gnF3stvrI7nD3Aj9KnNwTUf/ETBPXzXTq/VfI7eCatf+hr83Sz+Nr7C5r4iXDr\nhQnuotgF/Fiv4PqTmnWPDDNAM0PDfGAHUfQzBwkabKdB9pgeSs3R2b1x1ri4iexh\nw7wT21a4E0Ve10Y+3ms0qVktpD+Cha3ui++BV0a4xt5dflDdxxL7nY3Y4lrmmRYv\n9ABE0Ig1V82FdZXEARQg9Pt3cNcE+C6V2B+3ESp3+/sxCrH4ckYO+h2ANJYVbXu4\nQeTqaClntB+KzCZBvl7bPfBgxZpdgl2FarEno0qqs84XdJ4K9vm/xetPXKPrkGw=\n=DFfZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 21f35c08c8199f44974b5a3edc6f7c737fd09625\nparent a09297010e171af28a7a3fcad65a4e0aefea53ba\nparent 3cb56f37780854bf26650e0872a556da25897a0a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445529073 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445529187 +0200\n\nMerge pull request #6846\n\n3cb56f3 *: alias -h for --help (Daniel Cousens)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a09297010e171af28a7a3fcad65a4e0aefea53ba"
      },
      {
        "sha": "3cb56f37780854bf26650e0872a556da25897a0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb56f37780854bf26650e0872a556da25897a0a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb56f37780854bf26650e0872a556da25897a0a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6f22c7049488610d40de6e808bbc081dd56ab1a5",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
        "patch": "@@ -67,7 +67,7 @@ static bool AppInitRPC(int argc, char* argv[])\n     // Parameters\n     //\n     ParseParameters(argc, argv);\n-    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\")) {\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\")) {\n         std::string strUsage = _(\"Bitcoin Core RPC client version\") + \" \" + FormatFullVersion() + \"\\n\";\n         if (!mapArgs.count(\"-version\")) {\n             strUsage += \"\\n\" + _(\"Usage:\") + \"\\n\" +"
      },
      {
        "sha": "3330fe5d12e3e38c603d700739ca2d146cbda3ce",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
        "patch": "@@ -44,7 +44,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n \n     fCreateBlank = GetBoolArg(\"-create\", false);\n \n-    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-help\"))\n+    if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\"))\n     {\n         // First part of help message is specific to this utility\n         std::string strUsage = _(\"Bitcoin Core bitcoin-tx utility version\") + \" \" + FormatFullVersion() + \"\\n\\n\" +"
      },
      {
        "sha": "d2af897242a3ad20fea18763624934a598d1470f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
        "patch": "@@ -72,7 +72,7 @@ bool AppInit(int argc, char* argv[])\n     ParseParameters(argc, argv);\n \n     // Process help and version before taking care about datadir\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n+    if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") ||  mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n         std::string strUsage = _(\"Bitcoin Core Daemon\") + \" \" + _(\"version\") + \" \" + FormatFullVersion() + \"\\n\";\n "
      },
      {
        "sha": "bda8acff1596fc017e1573cbc425c5d339a36bce",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cd020d054d6ec4b50eb44ffa4000b40540a4db0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
        "patch": "@@ -563,7 +563,7 @@ int main(int argc, char *argv[])\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n     // but before showing splash screen.\n-    if (mapArgs.count(\"-?\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n+    if (mapArgs.count(\"-?\") || mapArgs.count(\"-h\") || mapArgs.count(\"-help\") || mapArgs.count(\"-version\"))\n     {\n         HelpMessageDialog help(NULL, mapArgs.count(\"-version\"));\n         help.showOrPrint();"
      }
    ]
  },
  {
    "sha": "f2c869aef2e717ba61b9335f198322f6a4d1a12d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmM4NjlhZWYyZTcxN2JhNjFiOTMzNWYxOTgzMjJmNmE0ZDFhMTJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-22T16:01:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-22T16:02:17Z"
      },
      "message": "Merge pull request #6848\n\nc6824f8 Add DERSIG transaction test cases (J Ross Nicoll)",
      "tree": {
        "sha": "aa95013b466e3ad6b996d85c2929e1379d8a962b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa95013b466e3ad6b996d85c2929e1379d8a962b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2c869aef2e717ba61b9335f198322f6a4d1a12d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKQiJAAoJEHSBCwEjRsmmZmMIAL87ayReBsE2FqZLaAuHtglw\n7oaxUlBlGrsIpPnvu/H9uxf9SoeRDcCmLy42NUeMVV3agBkuUeuc0k/AWFFzqZ8S\nzWBE6SeuTg+84+y8uVRgbS3uIW0qWnCgaLfUDom4CGQr6p0mvU7IQ91UcyN5uQzO\nfbE44pm4wPte50rjruZVz/QSQQ001dcwQKVE1p0SWkYkthgM2NfC/8KXzFDYdNxl\nzECvrL4wr4Q++qbwH/cFn7pzfp2G6Ugh3XcVsq5ojiVhcbYPxFaIALNw7pz9cRSo\nsAuSNowVRdx6lEqzsFbzW6kH2OlKnpv5kSA2oe8ID2qiIZKhFhHthKrVg0wokTw=\n=ZOto\n-----END PGP SIGNATURE-----",
        "payload": "tree aa95013b466e3ad6b996d85c2929e1379d8a962b\nparent 2cd020d054d6ec4b50eb44ffa4000b40540a4db0\nparent c6824f8a90e33277de4db826bf1c65692a67be47\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445529684 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445529737 +0200\n\nMerge pull request #6848\n\nc6824f8 Add DERSIG transaction test cases (J Ross Nicoll)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2c869aef2e717ba61b9335f198322f6a4d1a12d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2c869aef2e717ba61b9335f198322f6a4d1a12d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2c869aef2e717ba61b9335f198322f6a4d1a12d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cd020d054d6ec4b50eb44ffa4000b40540a4db0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cd020d054d6ec4b50eb44ffa4000b40540a4db0"
      },
      {
        "sha": "c6824f8a90e33277de4db826bf1c65692a67be47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6824f8a90e33277de4db826bf1c65692a67be47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6824f8a90e33277de4db826bf1c65692a67be47"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d3c859434255bc626c744986e4fb066b64813faa",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2c869aef2e717ba61b9335f198322f6a4d1a12d/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2c869aef2e717ba61b9335f198322f6a4d1a12d/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "patch": "@@ -193,5 +193,9 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000000000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH,DERSIG\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "0dfef73ae5e2bf3c2adf38fbe88184ebb4171424",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2c869aef2e717ba61b9335f198322f6a4d1a12d/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2c869aef2e717ba61b9335f198322f6a4d1a12d/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "patch": "@@ -229,5 +229,9 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"HASH160 0x14 0xc5b93064159b3b2d6ab506a41b1f50463771b988 EQUAL\"]],\n \"0100000001000100000000000000000000000000000000000000000000000000000000000000000000030251b1000000000100000000000000000001000000\", \"P2SH,CHECKLOCKTIMEVERIFY\"],\n \n+[\"A transaction with a non-standard DER signature.\"],\n+[[[\"b1dbc81696c8a9c0fccd0693ab66d7c368dbc38c0def4e800685560ddd1b2132\", 0, \"DUP HASH160 0x14 0x4b3bd7eba3bc0284fd3007be7f3be275e94f5826 EQUALVERIFY CHECKSIG\"]],\n+\"010000000132211bdd0d568506804eef0d8cc3db68c3d766ab9306cdfcc0a9c89616c8dbb1000000006c493045022100c7bb0faea0522e74ff220c20c022d2cb6033f8d167fb89e75a50e237a35fd6d202203064713491b1f8ad5f79e623d0219ad32510bfaa1009ab30cbee77b59317d6e30001210237af13eb2d84e4545af287b919c2282019c9691cc509e78e196a9d8274ed1be0ffffffff0100000000000000001976a914f1b3ed2eda9a2ebe5a9374f692877cdf87c0f95b88ac00000000\", \"P2SH\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGUyOGIzZDFlNWM5NWViMGM4N2YxNDQ4NTFjZDY1MDQ4YzNlMGJj",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-21T23:52:29Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-22T17:57:48Z"
      },
      "message": "Set TCP_NODELAY on P2P sockets.\n\nNagle appears to be a significant contributor to latency now that the static\n sleeps are gone.  Most of our messages are relatively large compared to\n IP + TCP so I do not expect this to create enormous overhead.\n\nThis may also reduce traffic burstyness somewhat.",
      "tree": {
        "sha": "75863cc33e53fef354777cb7b9f206736c805201",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75863cc33e53fef354777cb7b9f206736c805201"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fbfc5106cd9866325b4a1ab3b9db8e91e54f070"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "20c2a25143bf99d317b73a26b3f3493515a1c7c3",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
        "patch": "@@ -38,6 +38,7 @@\n #include <sys/types.h>\n #include <net/if.h>\n #include <netinet/in.h>\n+#include <netinet/tcp.h>\n #include <arpa/inet.h>\n #include <ifaddrs.h>\n #include <limits.h>"
      },
      {
        "sha": "58b946f4a13078d98ce254c9c86db672e80f15e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
        "patch": "@@ -963,6 +963,15 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n         return;\n     }\n \n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.\n+    int set = 1;\n+#ifdef WIN32\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&set, sizeof(int));\n+#else\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&set, sizeof(int));\n+#endif\n+\n     if (CNode::IsBanned(addr) && !whitelisted)\n     {\n         LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n@@ -1790,8 +1799,11 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted.\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n+    // Disable Nagle's algorithm\n+    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&nOne, sizeof(int));\n #else\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nOne, sizeof(int));\n+    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&nOne, sizeof(int));\n #endif\n \n     // Set to non-blocking, incoming connections will also inherit this"
      },
      {
        "sha": "f5316965ce7fc7a13ba11f1482c0f7471967726d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
        "patch": "@@ -444,12 +444,19 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     if (hSocket == INVALID_SOCKET)\n         return false;\n \n-#ifdef SO_NOSIGPIPE\n     int set = 1;\n+#ifdef SO_NOSIGPIPE\n     // Different way of disabling SIGPIPE on BSD\n     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n \n+    //Disable Nagle's algorithm\n+#ifdef WIN32\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&set, sizeof(int));\n+#else\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&set, sizeof(int));\n+#endif\n+\n     // Set to non-blocking\n     if (!SetSocketNonBlocking(hSocket, true))\n         return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));"
      }
    ]
  },
  {
    "sha": "6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWM0YjdlYjIwYWJmMDVkZDZlM2MwODg1NjQ0NjE2YTJjMmFjZmQ3",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-23T00:49:02Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T00:49:02Z"
      },
      "message": "leveldbwrapper: Remove unused .Prev(), .SeekToLast() methods\n\nAlso, trim trailing whitespace.",
      "tree": {
        "sha": "ca06e01a98dcf368d18ac796498a9d581f9ef308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca06e01a98dcf368d18ac796498a9d581f9ef308"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a09297010e171af28a7a3fcad65a4e0aefea53ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a09297010e171af28a7a3fcad65a4e0aefea53ba"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 14,
      "deletions": 18
    },
    "files": [
      {
        "sha": "641d25152d6a7c6dfac3b8e56086e8bb471e7831",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "patch": "@@ -76,7 +76,7 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     bool key_exists = Read(OBFUSCATE_KEY_KEY, obfuscate_key);\n \n     if (!key_exists && obfuscate && IsEmpty()) {\n-        // Initialize non-degenerate obfuscation if it won't upset \n+        // Initialize non-degenerate obfuscation if it won't upset\n         // existing, non-obfuscated data.\n         std::vector<unsigned char> new_key = CreateObfuscateKey();\n \n@@ -118,10 +118,10 @@ const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n \n /**\n- * Returns a string (consisting of 8 random bytes) suitable for use as an \n- * obfuscating XOR key. \n+ * Returns a string (consisting of 8 random bytes) suitable for use as an\n+ * obfuscating XOR key.\n  */\n-std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const \n+std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n {\n     unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n     GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n@@ -136,19 +136,17 @@ bool CLevelDBWrapper::IsEmpty()\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const \n-{ \n-    return obfuscate_key; \n+const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const\n+{\n+    return obfuscate_key;\n }\n \n std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n-{ \n-    return HexStr(obfuscate_key); \n+{\n+    return HexStr(obfuscate_key);\n }\n \n CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n bool CLevelDBIterator::Valid() { return piter->Valid(); }\n void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n void CLevelDBIterator::Next() { piter->Next(); }\n-void CLevelDBIterator::Prev() { piter->Prev(); }"
      },
      {
        "sha": "0effea407acd3e2c112ff183138ddc06f70963f0",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "patch": "@@ -68,7 +68,7 @@ class CLevelDBBatch\n         batch.Delete(slKey);\n     }\n };\n- \n+\n class CLevelDBIterator\n {\n private:\n@@ -88,7 +88,6 @@ class CLevelDBIterator\n     bool Valid();\n \n     void SeekToFirst();\n-    void SeekToLast();\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n@@ -99,7 +98,6 @@ class CLevelDBIterator\n     }\n \n     void Next();\n-    void Prev();\n \n     template<typename K> bool GetKey(K& key) {\n         leveldb::Slice slKey = piter->key();\n@@ -133,7 +131,7 @@ class CLevelDBIterator\n     }\n \n };\n- \n+\n class CLevelDBWrapper\n {\n private:\n@@ -163,10 +161,10 @@ class CLevelDBWrapper\n \n     //! the key under which the obfuscation key is stored\n     static const std::string OBFUSCATE_KEY_KEY;\n-    \n+\n     //! the length of the obfuscate key in number of bytes\n     static const unsigned int OBFUSCATE_KEY_NUM_BYTES;\n-    \n+\n     std::vector<unsigned char> CreateObfuscateKey() const;\n \n public:\n@@ -256,7 +254,7 @@ class CLevelDBWrapper\n         return WriteBatch(batch, true);\n     }\n \n-    CLevelDBIterator *NewIterator() \n+    CLevelDBIterator *NewIterator()\n     {\n         return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }"
      }
    ]
  },
  {
    "sha": "8587b23038b88340ec64253ea4282afe90187a69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTg3YjIzMDM4Yjg4MzQwZWM2NDI1M2VhNDI4MmFmZTkwMTg3YTY5",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-23T01:02:20Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T01:02:20Z"
      },
      "message": "leveldbwrapper symbol rename: Remove \"Level\" from class, etc. names",
      "tree": {
        "sha": "50b7b71777325fae5397f2ba144968309c1a0c94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50b7b71777325fae5397f2ba144968309c1a0c94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8587b23038b88340ec64253ea4282afe90187a69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8587b23038b88340ec64253ea4282afe90187a69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8587b23038b88340ec64253ea4282afe90187a69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8587b23038b88340ec64253ea4282afe90187a69/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ec4b7eb20abf05dd6e3c0885644616a2c2acfd7"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 65,
      "deletions": 65
    },
    "files": [
      {
        "sha": "6ecf7c7f0ed4e54c872ea2cb933dbb0023e3646f",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -15,18 +15,18 @@\n #include <memenv.h>\n #include <stdint.h>\n \n-void HandleError(const leveldb::Status& status) throw(leveldb_error)\n+void HandleError(const leveldb::Status& status) throw(dbwrapper_error)\n {\n     if (status.ok())\n         return;\n     LogPrintf(\"%s\\n\", status.ToString());\n     if (status.IsCorruption())\n-        throw leveldb_error(\"Database corrupted\");\n+        throw dbwrapper_error(\"Database corrupted\");\n     if (status.IsIOError())\n-        throw leveldb_error(\"Database I/O error\");\n+        throw dbwrapper_error(\"Database I/O error\");\n     if (status.IsNotFound())\n-        throw leveldb_error(\"Database entry missing\");\n-    throw leveldb_error(\"Unknown database error\");\n+        throw dbwrapper_error(\"Database entry missing\");\n+    throw dbwrapper_error(\"Unknown database error\");\n }\n \n static leveldb::Options GetOptions(size_t nCacheSize)\n@@ -45,7 +45,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n@@ -90,7 +90,7 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n }\n \n-CLevelDBWrapper::~CLevelDBWrapper()\n+CDBWrapper::~CDBWrapper()\n {\n     delete pdb;\n     pdb = NULL;\n@@ -102,7 +102,7 @@ CLevelDBWrapper::~CLevelDBWrapper()\n     options.env = NULL;\n }\n \n-bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb_error)\n+bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n {\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     HandleError(status);\n@@ -113,40 +113,40 @@ bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb\n //\n // We must use a string constructor which specifies length so that we copy\n // past the null-terminator.\n-const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n+const std::string CDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n \n-const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n+const unsigned int CDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n \n /**\n  * Returns a string (consisting of 8 random bytes) suitable for use as an\n  * obfuscating XOR key.\n  */\n-std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const\n+std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const\n {\n     unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n     GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n     return std::vector<unsigned char>(&buff[0], &buff[OBFUSCATE_KEY_NUM_BYTES]);\n \n }\n \n-bool CLevelDBWrapper::IsEmpty()\n+bool CDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<CLevelDBIterator> it(NewIterator());\n+    boost::scoped_ptr<CDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const\n+const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n {\n     return obfuscate_key;\n }\n \n-std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n+std::string CDBWrapper::GetObfuscateKeyHex() const\n {\n     return HexStr(obfuscate_key);\n }\n \n-CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n-bool CLevelDBIterator::Valid() { return piter->Valid(); }\n-void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CLevelDBIterator::Next() { piter->Next(); }\n+CDBIterator::~CDBIterator() { delete piter; }\n+bool CDBIterator::Valid() { return piter->Valid(); }\n+void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CDBIterator::Next() { piter->Next(); }"
      },
      {
        "sha": "c8fc457d9037e8d86cd3d2c5edf08e5e7992688b",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -17,18 +17,18 @@\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n-class leveldb_error : public std::runtime_error\n+class dbwrapper_error : public std::runtime_error\n {\n public:\n-    leveldb_error(const std::string& msg) : std::runtime_error(msg) {}\n+    dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status) throw(leveldb_error);\n+void HandleError(const leveldb::Status& status) throw(dbwrapper_error);\n \n-/** Batch of changes queued to be written to a CLevelDBWrapper */\n-class CLevelDBBatch\n+/** Batch of changes queued to be written to a CDBWrapper */\n+class CDBBatch\n {\n-    friend class CLevelDBWrapper;\n+    friend class CDBWrapper;\n \n private:\n     leveldb::WriteBatch batch;\n@@ -38,7 +38,7 @@ class CLevelDBBatch\n     /**\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -69,7 +69,7 @@ class CLevelDBBatch\n     }\n };\n \n-class CLevelDBIterator\n+class CDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n@@ -81,9 +81,9 @@ class CLevelDBIterator\n      * @param[in] piterIn          The original leveldb iterator.\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n+    CDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n         piter(piterIn), obfuscate_key(obfuscate_key) { };\n-    ~CLevelDBIterator();\n+    ~CDBIterator();\n \n     bool Valid();\n \n@@ -132,7 +132,7 @@ class CLevelDBIterator\n \n };\n \n-class CLevelDBWrapper\n+class CDBWrapper\n {\n private:\n     //! custom environment this database is using (may be NULL in case of default environment)\n@@ -176,11 +176,11 @@ class CLevelDBWrapper\n      * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n      *                        with a zero'd byte array.\n      */\n-    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n-    ~CLevelDBWrapper();\n+    CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n+    ~CDBWrapper();\n \n     template <typename K, typename V>\n-    bool Read(const K& key, V& value) const throw(leveldb_error)\n+    bool Read(const K& key, V& value) const throw(dbwrapper_error)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -206,15 +206,15 @@ class CLevelDBWrapper\n     }\n \n     template <typename K, typename V>\n-    bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n+    bool Write(const K& key, const V& value, bool fSync = false) throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n     template <typename K>\n-    bool Exists(const K& key) const throw(leveldb_error)\n+    bool Exists(const K& key) const throw(dbwrapper_error)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -233,30 +233,30 @@ class CLevelDBWrapper\n     }\n \n     template <typename K>\n-    bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n+    bool Erase(const K& key, bool fSync = false) throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CLevelDBBatch& batch, bool fSync = false) throw(leveldb_error);\n+    bool WriteBatch(CDBBatch& batch, bool fSync = false) throw(dbwrapper_error);\n \n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {\n         return true;\n     }\n \n-    bool Sync() throw(leveldb_error)\n+    bool Sync() throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n-    CLevelDBIterator *NewIterator()\n+    CDBIterator *NewIterator()\n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n+        return new CDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }\n \n     /**"
      },
      {
        "sha": "8defb8a8ffe9a0e74b22b4ebf44121b2eab1efc3",
        "filename": "src/test/leveldbwrapper_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/test/leveldbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/test/leveldbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/leveldbwrapper_tests.cpp?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -25,15 +25,15 @@ bool is_null_key(const vector<unsigned char>& key) {\n     return isnull;\n }\n  \n-BOOST_FIXTURE_TEST_SUITE(leveldbwrapper_tests, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n                        \n-BOOST_AUTO_TEST_CASE(leveldbwrapper)\n+BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = GetRandHash();\n         uint256 res;\n@@ -48,13 +48,13 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper)\n }\n \n // Test batch operations\n-BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n+BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n         uint256 in = GetRandHash();\n@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n         uint256 in3 = GetRandHash();\n \n         uint256 res;\n-        CLevelDBBatch batch(&dbw.GetObfuscateKey());\n+        CDBBatch batch(&dbw.GetObfuscateKey());\n \n         batch.Write(key, in);\n         batch.Write(key2, in2);\n@@ -85,13 +85,13 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n+BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n         char key = 'j';\n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n         uint256 in2 = GetRandHash();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n-        boost::scoped_ptr<CLevelDBIterator> it(const_cast<CLevelDBWrapper*>(&dbw)->NewIterator());\n+        boost::scoped_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n \n         // Be sure to seek past the obfuscation key (if it exists)\n         it->Seek(key);\n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = GetRandHash();\n     uint256 res;\n@@ -147,7 +147,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     delete dbw;\n \n     // Now, set up another wrapper that wants to obfuscate the same directory\n-    CLevelDBWrapper odbw(ph, (1 << 10), false, false, true);\n+    CDBWrapper odbw(ph, (1 << 10), false, false, true);\n \n     // Check that the key/val we wrote with unobfuscated wrapper exists and \n     // is readable.\n@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = GetRandHash();\n     uint256 res;\n@@ -188,7 +188,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     delete dbw;\n \n     // Simulate a -reindex by wiping the existing data store\n-    CLevelDBWrapper odbw(ph, (1 << 10), false, true, true);\n+    CDBWrapper odbw(ph, (1 << 10), false, true, true);\n \n     // Check that the key/val we wrote with unobfuscated wrapper doesn't exist\n     uint256 res2;"
      },
      {
        "sha": "f0868a1ebfbde4c978955eac581572a2f533b47f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -49,7 +49,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch(&db.GetObfuscateKey());\n+    CDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -71,7 +71,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     return db.WriteBatch(batch);\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n@@ -98,7 +98,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    boost::scoped_ptr<CDBIterator> pcursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n     pcursor->Seek(DB_COINS);\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -157,7 +157,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n@@ -177,7 +177,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n+    boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n \n     pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n "
      },
      {
        "sha": "1e8fccea45878253f121cf92d54c767205f9c99a",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8587b23038b88340ec64253ea4282afe90187a69/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=8587b23038b88340ec64253ea4282afe90187a69",
        "patch": "@@ -26,11 +26,11 @@ static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache in (MiB)\n static const int64_t nMinDbCache = 4;\n \n-/** CCoinsView backed by the LevelDB coin database (chainstate/) */\n+/** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n {\n protected:\n-    CLevelDBWrapper db;\n+    CDBWrapper db;\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n@@ -42,7 +42,7 @@ class CCoinsViewDB : public CCoinsView\n };\n \n /** Access to the block database (blocks/index/) */\n-class CBlockTreeDB : public CLevelDBWrapper\n+class CBlockTreeDB : public CDBWrapper\n {\n public:\n     CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);"
      }
    ]
  },
  {
    "sha": "3795e8152b678b9f805a395b144190a9f2fa2af4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzk1ZTgxNTJiNjc4YjlmODA1YTM5NWIxNDQxOTBhOWYyZmEyYWY0",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@bloq.com",
        "date": "2015-10-23T01:33:06Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T01:33:06Z"
      },
      "message": "leveldbwrapper file rename to dbwrapper.*",
      "tree": {
        "sha": "2d714bcb45c42b93c4efc911c886ab238b451605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d714bcb45c42b93c4efc911c886ab238b451605"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3795e8152b678b9f805a395b144190a9f2fa2af4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3795e8152b678b9f805a395b144190a9f2fa2af4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3795e8152b678b9f805a395b144190a9f2fa2af4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3795e8152b678b9f805a395b144190a9f2fa2af4/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8587b23038b88340ec64253ea4282afe90187a69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8587b23038b88340ec64253ea4282afe90187a69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8587b23038b88340ec64253ea4282afe90187a69"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "312643cec36e38c0aee5164f304404d08270c37d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -110,7 +110,7 @@ BITCOIN_CORE_H = \\\n   init.h \\\n   key.h \\\n   keystore.h \\\n-  leveldbwrapper.h \\\n+  dbwrapper.h \\\n   limitedmap.h \\\n   main.h \\\n   memusage.h \\\n@@ -188,7 +188,7 @@ libbitcoin_server_a_SOURCES = \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\\n-  leveldbwrapper.cpp \\\n+  dbwrapper.cpp \\\n   main.cpp \\\n   merkleblock.cpp \\\n   miner.cpp \\"
      },
      {
        "sha": "f23a8f41fc42d8a97d5a65be7dad268883ef501d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -54,7 +54,7 @@ BITCOIN_TESTS =\\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n-  test/leveldbwrapper_tests.cpp \\\n+  test/dbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\"
      },
      {
        "sha": "b6307cf0bf37a98c76e5be6b97c4658de894b222",
        "filename": "src/dbwrapper.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n \n #include \"util.h\"\n #include \"random.h\"",
        "previous_filename": "src/leveldbwrapper.cpp"
      },
      {
        "sha": "aa287675086bb98f48804115a392e7358ec865a7",
        "filename": "src/dbwrapper.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_LEVELDBWRAPPER_H\n-#define BITCOIN_LEVELDBWRAPPER_H\n+#ifndef BITCOIN_DBWRAPPER_H\n+#define BITCOIN_DBWRAPPER_H\n \n #include \"clientversion.h\"\n #include \"serialize.h\"\n@@ -276,5 +276,5 @@ class CDBWrapper\n \n };\n \n-#endif // BITCOIN_LEVELDBWRAPPER_H\n+#endif // BITCOIN_DBWRAPPER_H\n ",
        "previous_filename": "src/leveldbwrapper.h"
      },
      {
        "sha": "8b6b0697ab1d0848c322a48f2ce73d823d910011",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n #include \"uint256.h\"\n #include \"random.h\"\n #include \"test/test_bitcoin.h\"",
        "previous_filename": "src/test/leveldbwrapper_tests.cpp"
      },
      {
        "sha": "586ab55d0d5501754a7f25d021705b33307454a8",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3795e8152b678b9f805a395b144190a9f2fa2af4/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3795e8152b678b9f805a395b144190a9f2fa2af4/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=3795e8152b678b9f805a395b144190a9f2fa2af4",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_TXDB_H\n \n #include \"coins.h\"\n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n \n #include <map>\n #include <string>"
      }
    ]
  },
  {
    "sha": "27252b73894d00f9dbe27b664159b2a999683069",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzI1MmI3Mzg5NGQwMGY5ZGJlMjdiNjY0MTU5YjJhOTk5NjgzMDY5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-23T02:50:01Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-23T02:50:01Z"
      },
      "message": "Fix pre-push-hook regexes",
      "tree": {
        "sha": "ae6de034486e9a3b01c058a998b56474238c3752",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae6de034486e9a3b01c058a998b56474238c3752"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27252b73894d00f9dbe27b664159b2a999683069",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27252b73894d00f9dbe27b664159b2a999683069",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27252b73894d00f9dbe27b664159b2a999683069",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27252b73894d00f9dbe27b664159b2a999683069/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2c869aef2e717ba61b9335f198322f6a4d1a12d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c57222818ab8a3deb8a78a338e6792f204f97c91",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27252b73894d00f9dbe27b664159b2a999683069/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27252b73894d00f9dbe27b664159b2a999683069/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=27252b73894d00f9dbe27b664159b2a999683069",
        "patch": "@@ -1,5 +1,5 @@\n #!/bin/bash\n-if ! [[ \"$2\" =~ [git@]?[www.]?github.com[:|/]bitcoin/bitcoin[.git]? ]]; then\n+if ! [[ \"$2\" =~ ^(git@)?(www.)?github.com(:|/)bitcoin/bitcoin(.git)?$ ]]; then\n     exit 0\n fi\n "
      }
    ]
  },
  {
    "sha": "bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjY4MTkxOGQ3ZWY1YzRiYzZmOTI0NjVhZTc5MjJjOWY0YjAzZDkz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-22T15:00:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-23T06:35:05Z"
      },
      "message": "[trivial] rpcnet: fix typo",
      "tree": {
        "sha": "1d40f10cdf33f86e5f5d64bf3e3388faaec07d9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d40f10cdf33f86e5f5d64bf3e3388faaec07d9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95f429118585fdbe89b4e48a224d195e304f33a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95f429118585fdbe89b4e48a224d195e304f33a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95f429118585fdbe89b4e48a224d195e304f33a8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5f094069e52f2b329965d279f7220df344a280cc",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
        "patch": "@@ -29,7 +29,7 @@ UniValue getconnectioncount(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getconnectioncount\\n\"\n             \"\\nReturns the number of connections to other nodes.\\n\"\n-            \"\\nbResult:\\n\"\n+            \"\\nResult:\\n\"\n             \"n          (numeric) The connection count\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getconnectioncount\", \"\")\n@@ -83,7 +83,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getpeerinfo\\n\"\n             \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n-            \"\\nbResult:\\n\"\n+            \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\""
      }
    ]
  },
  {
    "sha": "6782f58368af09a3507004edc761fb233a95bfae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzgyZjU4MzY4YWYwOWEzNTA3MDA0ZWRjNzYxZmIyMzNhOTViZmFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-21T06:33:39Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-23T06:35:05Z"
      },
      "message": "[trivial] Latest config.guess\n\nupstream commit 1e80063123b47b97d25dfeded8dd92a19dafab66",
      "tree": {
        "sha": "03929afb5cf71791acd46156d7ede8022956561d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03929afb5cf71791acd46156d7ede8022956561d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6782f58368af09a3507004edc761fb233a95bfae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6782f58368af09a3507004edc761fb233a95bfae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6782f58368af09a3507004edc761fb233a95bfae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6782f58368af09a3507004edc761fb233a95bfae/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf681918d7ef5c4bc6f92465ae7922c9f4b03d93"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b3f905370ac63a60097a2d83dded1dee3387581f",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6782f58368af09a3507004edc761fb233a95bfae/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6782f58368af09a3507004edc761fb233a95bfae/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=6782f58368af09a3507004edc761fb233a95bfae",
        "patch": "@@ -2,7 +2,7 @@\n # Attempt to guess a canonical system name.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-09-14'\n+timestamp='2015-10-21'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -1123,7 +1123,7 @@ EOF\n \t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n \t# the processor, so we play safe by assuming i586.\n \t# Note: whatever this is, it MUST be the same as what config.sub\n-\t# prints for the \"djgpp\" host, or else GDB configury will decide that\n+\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n \t# this is a cross-build.\n \techo i586-pc-msdosdjgpp\n \texit ;;"
      }
    ]
  },
  {
    "sha": "b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmIxNzNhY2FiZWE3OGY1ZTYxM2RiM2QwY2RmNWUyM2FlZWQxZTlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T07:29:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T07:29:49Z"
      },
      "message": "Merge pull request #6867\n\na4e28b3 Set TCP_NODELAY on P2P sockets. (Gregory Maxwell)",
      "tree": {
        "sha": "270790adb3840c7e29587cdaf9e6f44bfd1beaa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/270790adb3840c7e29587cdaf9e6f44bfd1beaa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKeHtAAoJEHSBCwEjRsmmESAH/j6JLgsOUT2CBPDTncmczVv2\nE2k4xetnbxSiibHWOgSrZLwA5URVIxxnBq+8Mb1XWhwmXGalDpod3TSaI3GPX9ro\ncP6WlKonrSfYXb2hojEGCIpq1Nv3aFoffjYAHzDpmmNyPA4EWnlGSAoMLY11Cdaz\ne+IQBSl8Ld6aGvwBFp3DX1qwAwp+JUwO6LbkNCCq8zqbL+I3D3GoMIscb6Irkf7u\nouRVSuMDr/ikXPHJkgKYiuthPPRABMVBiGCno3CQog9MUiWd134YXZjc+ZK5CuOD\nEDTs8idMRXLJN5m9++IBOxha90DPVqBcpsoFwrLKUI3wfhYyG2fieES18cPNEew=\n=43Cx\n-----END PGP SIGNATURE-----",
        "payload": "tree 270790adb3840c7e29587cdaf9e6f44bfd1beaa3\nparent f2c869aef2e717ba61b9335f198322f6a4d1a12d\nparent a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445585360 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445585389 +0200\n\nMerge pull request #6867\n\na4e28b3 Set TCP_NODELAY on P2P sockets. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2c869aef2e717ba61b9335f198322f6a4d1a12d"
      },
      {
        "sha": "a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4e28b3d1e5c95eb0c87f144851cd65048c3e0bc"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "20c2a25143bf99d317b73a26b3f3493515a1c7c3",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
        "patch": "@@ -38,6 +38,7 @@\n #include <sys/types.h>\n #include <net/if.h>\n #include <netinet/in.h>\n+#include <netinet/tcp.h>\n #include <arpa/inet.h>\n #include <ifaddrs.h>\n #include <limits.h>"
      },
      {
        "sha": "58b946f4a13078d98ce254c9c86db672e80f15e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
        "patch": "@@ -963,6 +963,15 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n         return;\n     }\n \n+    // According to the internet TCP_NODELAY is not carried into accepted sockets\n+    // on all platforms.  Set it again here just to be sure.\n+    int set = 1;\n+#ifdef WIN32\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&set, sizeof(int));\n+#else\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&set, sizeof(int));\n+#endif\n+\n     if (CNode::IsBanned(addr) && !whitelisted)\n     {\n         LogPrintf(\"connection from %s dropped (banned)\\n\", addr.ToString());\n@@ -1790,8 +1799,11 @@ bool BindListenPort(const CService &addrBind, string& strError, bool fWhiteliste\n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted.\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (void*)&nOne, sizeof(int));\n+    // Disable Nagle's algorithm\n+    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&nOne, sizeof(int));\n #else\n     setsockopt(hListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&nOne, sizeof(int));\n+    setsockopt(hListenSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&nOne, sizeof(int));\n #endif\n \n     // Set to non-blocking, incoming connections will also inherit this"
      },
      {
        "sha": "f5316965ce7fc7a13ba11f1482c0f7471967726d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
        "patch": "@@ -444,12 +444,19 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     if (hSocket == INVALID_SOCKET)\n         return false;\n \n-#ifdef SO_NOSIGPIPE\n     int set = 1;\n+#ifdef SO_NOSIGPIPE\n     // Different way of disabling SIGPIPE on BSD\n     setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n \n+    //Disable Nagle's algorithm\n+#ifdef WIN32\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&set, sizeof(int));\n+#else\n+    setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (void*)&set, sizeof(int));\n+#endif\n+\n     // Set to non-blocking\n     if (!SetSocketNonBlocking(hSocket, true))\n         return error(\"ConnectSocketDirectly: Setting socket to non-blocking failed, error %s\\n\", NetworkErrorString(WSAGetLastError()));"
      }
    ]
  },
  {
    "sha": "fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFkMjUyZTgyYThlYTc2ZmQ2NjkxOTU1ZWFlNWNhZTZlYzhiYzVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T08:45:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T08:45:50Z"
      },
      "message": "Merge pull request #6790\n\n8c15f33 [trivial] Update contrib/devtools/README.md (MarcoFalke)\n338f62f [devtools] add clang-format.py (MarcoFalke)",
      "tree": {
        "sha": "a97e9c88240526c456bfd2065a9f1113380facb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a97e9c88240526c456bfd2065a9f1113380facb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKfO+AAoJEHSBCwEjRsmmEGAH/jl5EkDwprDjBdGYyD1FlTs8\nGHintAsq/wKafkd7wXnuwuI3cle55gVV5sGeWcy/907kfNllsZfGNiAPKtPE60+/\nNCuWabCScS9sqkTrlnLc3ws8uGkaUuqT1bYxFl/Xx3jQJ3JiBvaMksB1xD7ywqvu\n+2mxvQW/f0+bQqHDbE1ZJ6IUHQPQHJNNKD1BEubG74cSFHkH90hiAdbFDo1z1L6h\naYEEOTOde2/ZG5vGKWqJM68xjktgdUe27ix6lCS7RMaZes0z7aPe+aRyz2zsovDX\ncyGwK3PA2UvD51OnusdZ9LFt+GPENj8h18y0GcV1BN9iiXM5O+jJE+NOY1B9Rkw=\n=s4kq\n-----END PGP SIGNATURE-----",
        "payload": "tree a97e9c88240526c456bfd2065a9f1113380facb6\nparent b2b173acabea78f5e613db3d0cdf5e23aeed1e9a\nparent 8c15f33d15fddd984946b56a257049e15ddf4038\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445589948 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445589950 +0200\n\nMerge pull request #6790\n\n8c15f33 [trivial] Update contrib/devtools/README.md (MarcoFalke)\n338f62f [devtools] add clang-format.py (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2b173acabea78f5e613db3d0cdf5e23aeed1e9a"
      },
      {
        "sha": "8c15f33d15fddd984946b56a257049e15ddf4038",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c15f33d15fddd984946b56a257049e15ddf4038",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c15f33d15fddd984946b56a257049e15ddf4038"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 82,
      "deletions": 6
    },
    "files": [
      {
        "sha": "278794f14cadcfd035ddda6f42d1358cdb487504",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
        "patch": "@@ -1,9 +1,14 @@\n Contents\n-===========\n+========\n This directory contains tools for developers working on this repository.\n \n+clang-format.py\n+===============\n+\n+A script to format cpp source code according to [.clang-format](../../src/.clang-format). This should only be applied to new files or files which are currently not actively developed on. Also, git subtrees are not subject to formatting.\n+\n github-merge.sh\n-==================\n+===============\n \n A small script to automate merging pull-requests securely and sign them with GPG.\n \n@@ -37,23 +42,31 @@ Configuring the github-merge tool for the bitcoin repository is done in the foll\n     git config --global user.signingkey mykeyid (if you want to GPG sign)\n \n fix-copyright-headers.py\n-===========================\n+========================\n \n Every year newly updated files need to have its copyright headers updated to reflect the current year.\n If you run this script from src/ it will automatically update the year on the copyright header for all\n .cpp and .h files if these have a git commit from the current year.\n \n For example a file changed in 2014 (with 2014 being the current year):\n+\n ```// Copyright (c) 2009-2013 The Bitcoin Core developers```\n \n would be changed to:\n+\n ```// Copyright (c) 2009-2014 The Bitcoin Core developers```\n \n+optimize-pngs.py\n+================\n+\n+A script to optimize png files in the bitcoin\n+repository (requires pngcrush).\n+\n symbol-check.py\n-==================\n+===============\n \n A script to check that the (Linux) executables produced by gitian only contain\n-allowed gcc, glibc and libstdc++ version symbols.  This makes sure they are\n+allowed gcc, glibc and libstdc++ version symbols. This makes sure they are\n still compatible with the minimum supported Linux distribution versions.\n \n Example usage after a gitian build:\n@@ -70,7 +83,7 @@ If there are 'unsupported' symbols, the return value will be 1 a list like this\n     .../64/test_bitcoin: symbol _ZNSt8__detail15_List_nod from unsupported version GLIBCXX_3.4.15\n \n update-translations.py\n-=======================\n+======================\n \n Run this script from the root of the repository to update all translations from transifex.\n It will do the following automatically:\n@@ -93,4 +106,5 @@ maintained:\n * for sec/leveldb: https://github.com/bitcoin/leveldb.git (branch bitcoin-fork)\n \n Usage: git-subtree-check.sh DIR COMMIT\n+\n COMMIT may be omitted, in which case HEAD is used."
      },
      {
        "sha": "cee99047ac67e69fe767a910ac56811e574cfc8d",
        "filename": "contrib/devtools/clang-format.py",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a/contrib/devtools/clang-format.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a/contrib/devtools/clang-format.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/clang-format.py?ref=fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
        "patch": "@@ -0,0 +1,62 @@\n+#!/usr/bin/env python\n+'''\n+Wrapper script for clang-format\n+\n+Copyright (c) 2015 MarcoFalke\n+Copyright (c) 2015 The Bitcoin Core developers\n+Distributed under the MIT software license, see the accompanying\n+file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+\n+import os\n+import sys\n+import subprocess\n+\n+tested_versions = ['3.6.0', '3.6.1', '3.6.2'] # A set of versions known to produce the same output\n+accepted_file_extensions = ('.h', '.cpp') # Files to format\n+\n+def check_clang_format_version(clang_format_exe):\n+    try:\n+        output = subprocess.check_output([clang_format_exe, '-version'])\n+        for ver in tested_versions:\n+            if ver in output:\n+                print \"Detected clang-format version \" + ver\n+                return\n+        raise RuntimeError(\"Untested version: \" + output)\n+    except Exception as e:\n+        print 'Could not verify version of ' + clang_format_exe + '.'\n+        raise e\n+\n+def check_command_line_args(argv):\n+    required_args = ['{clang-format-exe}', '{files}']\n+    example_args = ['clang-format-3.x', 'src/main.cpp', 'src/wallet/*']\n+\n+    if(len(argv) < len(required_args) + 1):\n+        for word in (['Usage:', argv[0]] + required_args):\n+            print word,\n+        print ''\n+        for word in (['E.g:', argv[0]] + example_args):\n+            print word,\n+        print ''\n+        sys.exit(1)\n+\n+def run_clang_format(clang_format_exe, files):\n+    for target in files:\n+        if os.path.isdir(target):\n+            for path, dirs, files in os.walk(target):\n+                run_clang_format(clang_format_exe, (os.path.join(path, f) for f in files))\n+        elif target.endswith(accepted_file_extensions):\n+            print \"Format \" + target\n+            subprocess.check_call([clang_format_exe, '-i', '-style=file', target], stdout=open(os.devnull, 'wb'), stderr=subprocess.STDOUT)\n+        else:\n+            print \"Skip \" + target\n+\n+def main(argv):\n+    check_command_line_args(argv)\n+    clang_format_exe = argv[1]\n+    files = argv[2:]\n+    check_clang_format_version(clang_format_exe)\n+    run_clang_format(clang_format_exe, files)\n+\n+if __name__ == \"__main__\":\n+    main(sys.argv)"
      }
    ]
  },
  {
    "sha": "1d94b72019e31066b33947af5709383b8075e43a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDk0YjcyMDE5ZTMxMDY2YjMzOTQ3YWY1NzA5MzgzYjgwNzVlNDNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-23T09:05:42Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-10-23T09:05:42Z"
      },
      "message": "Whitelist commits signed with Pieter's now-revoked key",
      "tree": {
        "sha": "e83ac333adc4b84830cc4482bcee2abde9a15e26",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e83ac333adc4b84830cc4482bcee2abde9a15e26"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d94b72019e31066b33947af5709383b8075e43a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d94b72019e31066b33947af5709383b8075e43a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d94b72019e31066b33947af5709383b8075e43a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d94b72019e31066b33947af5709383b8075e43a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27252b73894d00f9dbe27b664159b2a999683069",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27252b73894d00f9dbe27b664159b2a999683069",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27252b73894d00f9dbe27b664159b2a999683069"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 34,
      "deletions": 2
    },
    "files": [
      {
        "sha": "31aeb8f3d38bb6004a891cea0aa04ed51a4a5973",
        "filename": "contrib/verify-commits/allow-revsig-commits",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d94b72019e31066b33947af5709383b8075e43a/contrib/verify-commits/allow-revsig-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d94b72019e31066b33947af5709383b8075e43a/contrib/verify-commits/allow-revsig-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-revsig-commits?ref=1d94b72019e31066b33947af5709383b8075e43a",
        "patch": "@@ -0,0 +1,2 @@\n+586a29253dabec3ca0f1ccba9091daabd16b8411\n+eddaba7b5692288087a926da5733e86b47274e4e"
      },
      {
        "sha": "0218b82e11dd3bf8cc1fb8f5d24f4704c9a2cfc0",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d94b72019e31066b33947af5709383b8075e43a/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d94b72019e31066b33947af5709383b8075e43a/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=1d94b72019e31066b33947af5709383b8075e43a",
        "patch": "@@ -1,15 +1,33 @@\n #!/bin/sh\n INPUT=$(</dev/stdin)\n VALID=false\n+REVSIG=false\n IFS=$'\\n'\n for LINE in $(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null); do\n-\tcase \"$LINE\" in \"[GNUPG:] VALIDSIG\"*)\n+\tcase \"$LINE\" in\n+\t\"[GNUPG:] VALIDSIG \"*)\n \t\twhile read KEY; do\n \t\t\tcase \"$LINE\" in \"[GNUPG:] VALIDSIG $KEY \"*) VALID=true;; esac\n \t\tdone < ./contrib/verify-commits/trusted-keys\n+\t\t;;\n+\t\"[GNUPG:] REVKEYSIG \"*)\n+\t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n+\t\twhile read KEY; do\n+\t\t\tcase \"$LINE\" in \"[GNUPG:] REVKEYSIG ${KEY:24:40} \"*)\n+\t\t\t\tREVSIG=true\n+\t\t\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${KEY:24:40} \"\n+\t\t\t\t;;\n+\t\t\tesac\n+\t\tdone < ./contrib/verify-commits/trusted-keys\n+\t\t;;\n \tesac\n done\n if ! $VALID; then\n \texit 1\n fi\n-echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n+if $VALID && $REVSIG; then\n+\techo \"$INPUT\" | gpg --trust-model always \"$@\" | grep \"\\[GNUPG:\\] \\(NEWSIG\\|SIG_ID\\|VALIDSIG\\)\" 2>/dev/null\n+\techo \"$GOODREVSIG\"\n+else\n+\techo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n+fi"
      },
      {
        "sha": "9ba781008a6585699bdf515a52e340f9c56d10a8",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d94b72019e31066b33947af5709383b8075e43a/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d94b72019e31066b33947af5709383b8075e43a/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=1d94b72019e31066b33947af5709383b8075e43a",
        "patch": "@@ -7,11 +7,23 @@ git log \"$DIR\"\n \n VERIFIED_ROOT=$(cat \"${DIR}/trusted-git-root\")\n \n+IS_REVSIG_ALLOWED () {\n+\twhile read LINE; do\n+\t\t[ \"$LINE\" = \"$1\" ] && return 0\n+\tdone < \"${DIR}/allow-revsig-commits\"\n+\treturn 1\n+}\n+\n HAVE_FAILED=false\n IS_SIGNED () {\n \tif [ $1 = $VERIFIED_ROOT ]; then\n \t\treturn 0;\n \tfi\n+\tif IS_REVSIG_ALLOWED \"$1\"; then\n+\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=1\n+\telse\n+\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=0\n+\tfi\n \tif ! git -c \"gpg.program=${DIR}/gpg.sh\" verify-commit $1 > /dev/null 2>&1; then\n \t\treturn 1;\n \tfi"
      }
    ]
  },
  {
    "sha": "923c5e93a90a6eddde3ab8589fc393da95bbc489",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjNjNWU5M2E5MGE2ZWRkZGUzYWI4NTg5ZmMzOTNkYTk1YmJjNDg5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T09:22:00Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T09:50:10Z"
      },
      "message": "Merge pull request #6818\n\nb48da5c script:  Remove magic numbers (David Hill)",
      "tree": {
        "sha": "1138bc84e9c0c8fa16cf9f9e067c276c0daee4cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1138bc84e9c0c8fa16cf9f9e067c276c0daee4cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/923c5e93a90a6eddde3ab8589fc393da95bbc489",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKgLSAAoJEHSBCwEjRsmmlzQH/io0KEZUC8wxd5TLnVVjDSnL\nI+geHJYUrsAk9WfgOBi4UXLqpaair7b53KHDadrENWO7sZoiki0SYnOQ06Zri57+\ne3pZR9Pn/TSP+5+CnJ4SKbAzdEMG5qxRWPqPQ7uSF/DUamZl9O8cgozQ4dMmOrcm\nwllP0JmfhWcWWjQJSF/8h74IOYTHq8Ea40NuFeOYHRx06U8tbDpSmrsN1tfUzA3b\nWbRLzydARs6bW8Yr18lT6bvh8Yw9idJRCTxuTjxCOB81Xlrc73K3zfm8jyf6uvGq\nIm8h8rehtYdvkm79HDfOo0pd272y8qqrIQpq9xb0aNChLXVOmkQil8psMhiZvhc=\n=1ihj\n-----END PGP SIGNATURE-----",
        "payload": "tree 1138bc84e9c0c8fa16cf9f9e067c276c0daee4cf\nparent fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a\nparent b48da5c1894a70f8fa2a50deb2e056c38ed27ecb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445592120 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445593810 +0200\n\nMerge pull request #6818\n\nb48da5c script:  Remove magic numbers (David Hill)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923c5e93a90a6eddde3ab8589fc393da95bbc489",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/923c5e93a90a6eddde3ab8589fc393da95bbc489",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923c5e93a90a6eddde3ab8589fc393da95bbc489/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1d252e82a8ea76fd6691955eae5cae6ec8bc5a"
      },
      {
        "sha": "b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b48da5c1894a70f8fa2a50deb2e056c38ed27ecb"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6a20d497c0492c5b1ff74eaae9fdcb4d506bbb50",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/923c5e93a90a6eddde3ab8589fc393da95bbc489/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/923c5e93a90a6eddde3ab8589fc393da95bbc489/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=923c5e93a90a6eddde3ab8589fc393da95bbc489",
        "patch": "@@ -273,7 +273,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                 return set_error(serror, SCRIPT_ERR_PUSH_SIZE);\n \n             // Note how OP_RESERVED does not count towards the opcode limit.\n-            if (opcode > OP_16 && ++nOpCount > 201)\n+            if (opcode > OP_16 && ++nOpCount > MAX_OPS_PER_SCRIPT)\n                 return set_error(serror, SCRIPT_ERR_OP_COUNT);\n \n             if (opcode == OP_CAT ||\n@@ -869,10 +869,10 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         return set_error(serror, SCRIPT_ERR_INVALID_STACK_OPERATION);\n \n                     int nKeysCount = CScriptNum(stacktop(-i), fRequireMinimal).getint();\n-                    if (nKeysCount < 0 || nKeysCount > 20)\n+                    if (nKeysCount < 0 || nKeysCount > MAX_PUBKEYS_PER_MULTISIG)\n                         return set_error(serror, SCRIPT_ERR_PUBKEY_COUNT);\n                     nOpCount += nKeysCount;\n-                    if (nOpCount > 201)\n+                    if (nOpCount > MAX_OPS_PER_SCRIPT)\n                         return set_error(serror, SCRIPT_ERR_OP_COUNT);\n                     int ikey = ++i;\n                     i += nKeysCount;"
      },
      {
        "sha": "263c89defe58309da0c8c5e9d063f1985d80247a",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/923c5e93a90a6eddde3ab8589fc393da95bbc489/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/923c5e93a90a6eddde3ab8589fc393da95bbc489/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=923c5e93a90a6eddde3ab8589fc393da95bbc489",
        "patch": "@@ -170,7 +170,7 @@ unsigned int CScript::GetSigOpCount(bool fAccurate) const\n             if (fAccurate && lastOpcode >= OP_1 && lastOpcode <= OP_16)\n                 n += DecodeOP_N(lastOpcode);\n             else\n-                n += 20;\n+                n += MAX_PUBKEYS_PER_MULTISIG;\n         }\n         lastOpcode = opcode;\n     }"
      },
      {
        "sha": "a38d33a1894ad57052b7e0bb56d560300f49d87c",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/923c5e93a90a6eddde3ab8589fc393da95bbc489/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/923c5e93a90a6eddde3ab8589fc393da95bbc489/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=923c5e93a90a6eddde3ab8589fc393da95bbc489",
        "patch": "@@ -17,7 +17,14 @@\n #include <string>\n #include <vector>\n \n-static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n+// Maximum number of bytes pushable to the stack\n+static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520;\n+\n+// Maximum number of non-push operations per script\n+static const int MAX_OPS_PER_SCRIPT = 201;\n+\n+// Maximum number of public keys per multisig\n+static const int MAX_PUBKEYS_PER_MULTISIG = 20;\n \n // Threshold for nLockTime: below this value it is interpreted as block number,\n // otherwise as UNIX timestamp."
      }
    ]
  },
  {
    "sha": "bf7c1958d1994c497387f8a2de678a06348f7874",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjdjMTk1OGQxOTk0YzQ5NzM4N2Y4YTJkZTY3OGEwNjM0OGY3ODc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T10:39:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T10:47:19Z"
      },
      "message": "Merge pull request #5936\n\n212bcca Add optional locktime to createrawtransaction (Tom Harding)",
      "tree": {
        "sha": "f2ec5e87fd0a449230a0e2585ae3129b7d5612c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2ec5e87fd0a449230a0e2585ae3129b7d5612c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf7c1958d1994c497387f8a2de678a06348f7874",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKhA3AAoJEHSBCwEjRsmmrDMH/0ISM8f7PDX5ij9M5mumCNG9\nuxzG8UcGr+SwUcwKz4NBROz+CDope8WsSbukA4bJm8ueoWp+6tPP17KqMK+ac65t\nlCzg71z6Cyc61gYdDqcgAKcouwgndFh+YCxiGBq1JVzU2htDWBroZ3lQuR4jiLvw\nVUB7i/gYzDA7QoX5OaaeQX0LJFIM9q4qWRub5YE5FusLNK/E2quyjmsOQqgNknVp\ntTAAScxMBmL2Lb0fJ1IUrYaSQRNZZjkAAO+tnImgwCaLl5Nivk42YdBmjnJmj/0L\noqXMlMh+bxc+xxmyEM0RdlGMm+UZMnQGmaRXdtbiJedQD3IXZGA4s3gPQcX32DQ=\n=kN8u\n-----END PGP SIGNATURE-----",
        "payload": "tree f2ec5e87fd0a449230a0e2585ae3129b7d5612c4\nparent 923c5e93a90a6eddde3ab8589fc393da95bbc489\nparent 212bcca92089f406d9313dbe6d0e1d25143d61ff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445596781 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445597239 +0200\n\nMerge pull request #5936\n\n212bcca Add optional locktime to createrawtransaction (Tom Harding)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7c1958d1994c497387f8a2de678a06348f7874",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7c1958d1994c497387f8a2de678a06348f7874",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7c1958d1994c497387f8a2de678a06348f7874/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "923c5e93a90a6eddde3ab8589fc393da95bbc489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923c5e93a90a6eddde3ab8589fc393da95bbc489",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/923c5e93a90a6eddde3ab8589fc393da95bbc489"
      },
      {
        "sha": "212bcca92089f406d9313dbe6d0e1d25143d61ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/212bcca92089f406d9313dbe6d0e1d25143d61ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/212bcca92089f406d9313dbe6d0e1d25143d61ff"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 17,
      "deletions": 4
    },
    "files": [
      {
        "sha": "343b6234d4dd7a07ecf64d331554265773c525da",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7c1958d1994c497387f8a2de678a06348f7874/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7c1958d1994c497387f8a2de678a06348f7874/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=bf7c1958d1994c497387f8a2de678a06348f7874",
        "patch": "@@ -76,6 +76,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },\n+    { \"createrawtransaction\", 2 },\n     { \"signrawtransaction\", 1 },\n     { \"signrawtransaction\", 2 },\n     { \"sendrawtransaction\", 1 },"
      },
      {
        "sha": "5f3363d097cc4f6ad3fb834925e9ea8e5b8add37",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7c1958d1994c497387f8a2de678a06348f7874/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7c1958d1994c497387f8a2de678a06348f7874/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=bf7c1958d1994c497387f8a2de678a06348f7874",
        "patch": "@@ -316,9 +316,9 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n \n UniValue createrawtransaction(const UniValue& params, bool fHelp)\n {\n-    if (fHelp || params.size() != 2)\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n         throw runtime_error(\n-            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...}\\n\"\n+            \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n             \"Outputs can be addresses or data.\\n\"\n             \"Returns hex-encoded raw transaction.\\n\"\n@@ -340,6 +340,7 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             \"      \\\"data\\\": \\\"hex\\\",     (string, required) The key is \\\"data\\\", the value is hex encoded data\\n\"\n             \"      ...\\n\"\n             \"    }\\n\"\n+            \"3. locktime                (numeric, optional, default=0) Raw locktime. Non-0 value also locktime-activates inputs\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"transaction\\\"            (string) hex string of the transaction\\n\"\n \n@@ -351,13 +352,22 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n+    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n+    if (params[0].isNull() || params[1].isNull())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n     UniValue inputs = params[0].get_array();\n     UniValue sendTo = params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n+    if (params.size() > 2 && !params[2].isNull()) {\n+        int64_t nLockTime = params[2].get_int64();\n+        if (nLockTime < 0 || nLockTime > std::numeric_limits<uint32_t>::max())\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n+        rawTx.nLockTime = nLockTime;\n+    }\n+\n     for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n         const UniValue& input = inputs[idx];\n         const UniValue& o = input.get_obj();\n@@ -371,7 +381,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n         if (nOutput < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, vout must be positive\");\n \n-        CTxIn in(COutPoint(txid, nOutput));\n+        uint32_t nSequence = (rawTx.nLockTime ? std::numeric_limits<uint32_t>::max() - 1 : std::numeric_limits<uint32_t>::max());\n+        CTxIn in(COutPoint(txid, nOutput), CScript(), nSequence);\n+\n         rawTx.vin.push_back(in);\n     }\n "
      }
    ]
  },
  {
    "sha": "2a1090d4f55c307ddf50639cdedf329de1f5a02a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTEwOTBkNGY1NWMzMDdkZGY1MDYzOWNkZWRmMzI5ZGUxZjVhMDJh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T11:32:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T11:33:13Z"
      },
      "message": "Merge pull request #6351\n\n65ef372 Add BIP65 to getblockchaininfo softforks list (Peter Todd)\ncde7ab2 Add RPC tests for the CHECKLOCKTIMEVERIFY (BIP65) soft-fork (Peter Todd)\n287f54f Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic (Peter Todd)",
      "tree": {
        "sha": "5ffda2b4acac63c6ae9dad3785e7d0c312643eea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ffda2b4acac63c6ae9dad3785e7d0c312643eea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a1090d4f55c307ddf50639cdedf329de1f5a02a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKhr5AAoJEHSBCwEjRsmmswkH/R12LuIVzzFN0uqcjYIC9E3x\nXz0N9MPg7Th/l90kqIdh1Cf3fRXAPyrrxQ+ddrN6NucvUoU7gUhVj3oKghGnWtmQ\n2EAHqS4ozEVXjA0thYSa93MD8qhsToDGMNtlkTk4PToc7T3JSxF1J2AHILVB2cj7\nQdET6hLE0+tUryI7lShOdykaSBl9HiUYtp+RqvEi6ubn82S5qEQlQD0UpdE98h7V\nJvXltFM860kDG55OQJbH++uCRvf4u/SYh8P+6t/PlqZaQAmch/G/mvtlW2783JiS\n6NfAzmab1VQF6NGB9OCc/Tg1GZU8r4XxbhkthZ5M3umKpBncT+OKYBbidnAVrEs=\n=z0zJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ffda2b4acac63c6ae9dad3785e7d0c312643eea\nparent bf7c1958d1994c497387f8a2de678a06348f7874\nparent 65ef3723024881b7b21597bb784503094a323fb4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445599962 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445599993 +0200\n\nMerge pull request #6351\n\n65ef372 Add BIP65 to getblockchaininfo softforks list (Peter Todd)\ncde7ab2 Add RPC tests for the CHECKLOCKTIMEVERIFY (BIP65) soft-fork (Peter Todd)\n287f54f Add CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a1090d4f55c307ddf50639cdedf329de1f5a02a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a1090d4f55c307ddf50639cdedf329de1f5a02a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a1090d4f55c307ddf50639cdedf329de1f5a02a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf7c1958d1994c497387f8a2de678a06348f7874",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7c1958d1994c497387f8a2de678a06348f7874",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7c1958d1994c497387f8a2de678a06348f7874"
      },
      {
        "sha": "65ef3723024881b7b21597bb784503094a323fb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ef3723024881b7b21597bb784503094a323fb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65ef3723024881b7b21597bb784503094a323fb4"
      }
    ],
    "stats": {
      "total": 290,
      "additions": 285,
      "deletions": 5
    },
    "files": [
      {
        "sha": "7e682d530af7e955b2c7d56a320e0bab848201c2",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1090d4f55c307ddf50639cdedf329de1f5a02a/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1090d4f55c307ddf50639cdedf329de1f5a02a/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "patch": "@@ -70,6 +70,8 @@\n     'blockchain.py',\n ]\n testScriptsExt = [\n+    'bip65-cltv.py',\n+    'bip65-cltv-p2p.py',\n     'bipdersig-p2p.py',\n     'bipdersig.py',\n     'getblocktemplate_longpoll.py',"
      },
      {
        "sha": "1f8548c21933eab8ece7565787bba51f39aeb055",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1090d4f55c307ddf50639cdedf329de1f5a02a/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1090d4f55c307ddf50639cdedf329de1f5a02a/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "patch": "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.script import CScript, OP_1NEGATE, OP_NOP2, OP_DROP\n+from binascii import hexlify, unhexlify\n+import cStringIO\n+import time\n+\n+def cltv_invalidate(tx):\n+    '''Modify the signature in vin 0 of the tx to fail CLTV\n+\n+    Prepends -1 CLTV DROP in the scriptSig itself.\n+    '''\n+    tx.vin[0].scriptSig = CScript([OP_1NEGATE, OP_NOP2, OP_DROP] +\n+                                  list(CScript(tx.vin[0].scriptSig)))\n+\n+'''\n+This test is meant to exercise BIP65 (CHECKLOCKTIMEVERIFY)\n+Connect to a single node.\n+Mine 2 (version 3) blocks (save the coinbases for later).\n+Generate 98 more version 3 blocks, verify the node accepts.\n+Mine 749 version 4 blocks, verify the node accepts.\n+Check that the new CLTV rules are not enforced on the 750th version 4 block.\n+Check that the new CLTV rules are enforced on the 751st version 4 block.\n+Mine 199 new version blocks.\n+Mine 1 old-version block.\n+Mine 1 new version block.\n+Mine 1 old version block, see that the node rejects.\n+'''\n+\n+class BIP65Test(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(1, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=3']],\n+                                 binary=[self.options.testbinary])\n+\n+    def run_test(self):\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        test.run()\n+\n+    def create_transaction(self, node, coinbase, to_address, amount):\n+        from_txid = node.getblock(coinbase)['tx'][0]\n+        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = cStringIO.StringIO(unhexlify(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+    def get_tests(self):\n+\n+        self.coinbase_blocks = self.nodes[0].generate(2)\n+        self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.last_block_time = time.time()\n+\n+        ''' 98 more version 3 blocks '''\n+        test_blocks = []\n+        for i in xrange(98):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 3\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 749 version 4 blocks '''\n+        test_blocks = []\n+        for i in xrange(749):\n+            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        '''\n+        Check that the new CLTV rules are not enforced in the 750th\n+        version 3 block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[0], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        '''\n+        Check that the new CLTV rules are enforced in the 751st version 4\n+        block.\n+        '''\n+        spendtx = self.create_transaction(self.nodes[0],\n+                self.coinbase_blocks[1], self.nodeaddress, 1.0)\n+        cltv_invalidate(spendtx)\n+        spendtx.rehash()\n+\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+        ''' Mine 199 new version blocks on last valid tip '''\n+        test_blocks = []\n+        for i in xrange(199):\n+            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block.nVersion = 4\n+            block.rehash()\n+            block.solve()\n+            test_blocks.append([block, True])\n+            self.last_block_time += 1\n+            self.tip = block.sha256\n+        yield TestInstance(test_blocks, sync_every_block=False)\n+\n+        ''' Mine 1 old version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 new version block '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        self.tip = block.sha256\n+        yield TestInstance([[block, True]])\n+\n+        ''' Mine 1 old version block, should be invalid '''\n+        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block.nVersion = 3\n+        block.rehash()\n+        block.solve()\n+        self.last_block_time += 1\n+        yield TestInstance([[block, False]])\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      },
      {
        "sha": "e90e11e6a75a8960e3aa403e67ad4249ab646f24",
        "filename": "qa/rpc-tests/bip65-cltv.py",
        "status": "added",
        "additions": 89,
        "deletions": 0,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1090d4f55c307ddf50639cdedf329de1f5a02a/qa/rpc-tests/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1090d4f55c307ddf50639cdedf329de1f5a02a/qa/rpc-tests/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv.py?ref=2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "patch": "@@ -0,0 +1,89 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test the CHECKLOCKTIMEVERIFY (BIP65) soft-fork logic\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+class BIP65Test(BitcoinTestFramework):\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[2], 0)\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        cnt = self.nodes[0].getblockcount()\n+\n+        # Mine some old-version blocks\n+        self.nodes[1].generate(100)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 100):\n+            raise AssertionError(\"Failed to mine 100 version=3 blocks\")\n+\n+        # Mine 750 new-version blocks\n+        for i in xrange(15):\n+            self.nodes[2].generate(50)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 850):\n+            raise AssertionError(\"Failed to mine 750 version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are not enforced\n+\n+        # Mine 1 new-version block\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 851):\n+            raise AssertionFailure(\"Failed to mine a version=4 blocks\")\n+\n+        # TODO: check that new CHECKLOCKTIMEVERIFY rules are enforced\n+\n+        # Mine 198 new-version blocks\n+        for i in xrange(2):\n+            self.nodes[2].generate(99)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1049):\n+            raise AssertionError(\"Failed to mine 198 version=4 blocks\")\n+\n+        # Mine 1 old-version block\n+        self.nodes[1].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1050):\n+            raise AssertionError(\"Failed to mine a version=3 block after 949 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+        # Mine 1 old-version blocks\n+        try:\n+            self.nodes[1].generate(1)\n+            raise AssertionError(\"Succeeded to mine a version=3 block after 950 version=4 blocks\")\n+        except JSONRPCException:\n+            pass\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1051):\n+            raise AssertionError(\"Accepted a version=3 block after 950 version=4 blocks\")\n+\n+        # Mine 1 new-version blocks\n+        self.nodes[2].generate(1)\n+        self.sync_all()\n+        if (self.nodes[0].getblockcount() != cnt + 1052):\n+            raise AssertionError(\"Failed to mine a version=4 block\")\n+\n+if __name__ == '__main__':\n+    BIP65Test().main()"
      },
      {
        "sha": "2bcb5530985eb2317ca0b440fe567ff494a6af50",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "patch": "@@ -1751,11 +1751,18 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n-    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks, when 75% of the network has upgraded:\n+    // Start enforcing the DERSIG (BIP66) rules, for block.nVersion=3 blocks,\n+    // when 75% of the network has upgraded:\n     if (block.nVersion >= 3 && IsSuperMajority(3, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_DERSIG;\n     }\n \n+    // Start enforcing CHECKLOCKTIMEVERIFY, (BIP65) for block.nVersion=4\n+    // blocks, when 75% of the network has upgraded:\n+    if (block.nVersion >= 4 && IsSuperMajority(4, pindex->pprev, chainparams.GetConsensus().nMajorityEnforceBlockUpgrade, chainparams.GetConsensus())) {\n+        flags |= SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY;\n+    }\n+\n     CBlockUndo blockundo;\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n@@ -2702,6 +2709,11 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n         return state.Invalid(error(\"%s : rejected nVersion=2 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n \n+    // Reject block.nVersion=3 blocks when 95% (75% on testnet) of the network has upgraded:\n+    if (block.nVersion < 4 && IsSuperMajority(4, pindexPrev, consensusParams.nMajorityRejectBlockOutdated, consensusParams))\n+        return state.Invalid(error(\"%s : rejected nVersion=3 block\", __func__),\n+                             REJECT_OBSOLETE, \"bad-version\");\n+\n     return true;\n }\n "
      },
      {
        "sha": "54731ff55736332161b24052f6838dcf348c41ae",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "patch": "@@ -21,7 +21,7 @@ class CBlockHeader\n {\n public:\n     // header\n-    static const int32_t CURRENT_VERSION=3;\n+    static const int32_t CURRENT_VERSION=4;\n     int32_t nVersion;\n     uint256 hashPrevBlock;\n     uint256 hashMerkleRoot;"
      },
      {
        "sha": "20c0c1fb2f2e46b0be7c554ba294b0fbc2364117",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "patch": "@@ -648,6 +648,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n     UniValue softforks(UniValue::VARR);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n     softforks.push_back(SoftForkDesc(\"bip66\", 3, tip, consensusParams));\n+    softforks.push_back(SoftForkDesc(\"bip65\", 4, tip, consensusParams));\n     obj.push_back(Pair(\"softforks\",             softforks));\n \n     if (fPruneMode)"
      },
      {
        "sha": "a48ff1e18d3a41c89ccf4b4686be51844a135635",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a1090d4f55c307ddf50639cdedf329de1f5a02a/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "patch": "@@ -44,9 +44,10 @@ typedef enum bitcoinconsensus_error_t\n /** Script verification flags */\n enum\n {\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE      = 0,\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG    = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n };\n \n /// Returns 1 if the input nIn of the serialized transaction pointed to by"
      }
    ]
  },
  {
    "sha": "dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkY2E3YmQzMTUyYzVjMjFhYTBhMmIxNGFhMDlkNDA0NWFlNTFkY2M1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T10:32:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T12:24:08Z"
      },
      "message": "doc: Add developer notes about gitignore\n\n- Add developer notes about `.gitignore.`\n- Remove qt creator specific files from gitignore, to be consistent.",
      "tree": {
        "sha": "1741e84a79817c6f2d2210bf707406aec0fe8465",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1741e84a79817c6f2d2210bf707406aec0fe8465"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "923c5e93a90a6eddde3ab8589fc393da95bbc489",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/923c5e93a90a6eddde3ab8589fc393da95bbc489",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/923c5e93a90a6eddde3ab8589fc393da95bbc489"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 33,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8ad862d84ccd4dcd2e81afbf12a793667b6bbc07",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
        "patch": "@@ -85,9 +85,6 @@ src/test/buildenv.py\n # Resources cpp\n qrc_*.cpp\n \n-# Qt creator\n-*.pro.user\n-\n # Mac specific\n .DS_Store\n build"
      },
      {
        "sha": "7fe292f1f8549ab6ddfdfdf2959c87c536a12375",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
        "patch": "@@ -171,3 +171,36 @@ Threads\n - BitcoinMiner : Generates bitcoins (if wallet is enabled).\n \n - Shutdown : Does an orderly shutdown of everything.\n+\n+Ignoring IDE/editor files\n+--------------------------\n+\n+In closed-source environments in which everyone uses the same IDE it is common\n+to add temporary files it produces to the project-wide `.gitignore` file.\n+\n+However, in open source software such as Bitcoin Core, where everyone uses\n+their own editors/IDE/tools, it is less common. Only you know what files your\n+editor produces and this may change from version to version. The canonical way\n+to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n+\n+```\n+[core]\n+        excludesfile = /home/.../.gitignore_global\n+```\n+\n+(alternatively, type the command `git config --global core.excludesfile ~/.gitignore_global`\n+on a terminal)\n+\n+Then put your favourite tool's temporary filenames in that file, e.g.\n+```\n+# NetBeans\n+nbproject/\n+```\n+\n+Another option is to create a per-repository excludes file `.git/info/exclude`.\n+These are not committed but apply only to one repository.\n+\n+If a set of tools is used by the build system or scripts the repository (for\n+example, lcov) it is perfectly acceptable to add its files to `.gitignore`\n+and commit them.\n+"
      }
    ]
  },
  {
    "sha": "c719cefc417cc578f48b33069b764339a61054ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzE5Y2VmYzQxN2NjNTc4ZjQ4YjMzMDY5Yjc2NDMzOWE2MTA1NGNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T12:41:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T12:41:30Z"
      },
      "message": "Merge pull request #6856\n\nd3b09f6 Do not allow blockfile pruning during reindex. (Alex Morcos)",
      "tree": {
        "sha": "9d637db7808526596c4409d9ba6cc9aca9004b76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d637db7808526596c4409d9ba6cc9aca9004b76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c719cefc417cc578f48b33069b764339a61054ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWKir6AAoJEHSBCwEjRsmmixIH/iRmh/MhJIcm56oHThJtcX9l\nMeO2PsKmfSU/nv/S7yut26s0eNgD7DbTvO5UCNjLwchiKhA31kZRNGtNzv3uH3pp\nT/0HD4kMaFaEp9HOXx34JadMfHvFTdKAsuNYpfjyyypE1Jk6oOGLfgpDSmQrP9DP\nBT5sF6O2FZ9r8R22iY9vp3wZPdsYdBuVwfk9sq01XE9SJ5OVwocACyNEReVchHLs\nhkOfEs8uEpNB2OzYmNMc+5gw4pjuDNdEG+RJI2U4b34/DRsNb9/iSdO1emF3DCSo\nVxvRAqRxWsgDHMrQz2Hr1AMgeaD+qfBhhh2lIzaI7XyIj1H7lj0oEpjFtsfIaBI=\n=E8+p\n-----END PGP SIGNATURE-----",
        "payload": "tree 9d637db7808526596c4409d9ba6cc9aca9004b76\nparent 2a1090d4f55c307ddf50639cdedf329de1f5a02a\nparent d3b09f6bac738958b6bf5711bcb5291049b7466d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445604077 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445604090 +0200\n\nMerge pull request #6856\n\nd3b09f6 Do not allow blockfile pruning during reindex. (Alex Morcos)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c719cefc417cc578f48b33069b764339a61054ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c719cefc417cc578f48b33069b764339a61054ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c719cefc417cc578f48b33069b764339a61054ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a1090d4f55c307ddf50639cdedf329de1f5a02a"
      },
      {
        "sha": "d3b09f6bac738958b6bf5711bcb5291049b7466d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3b09f6bac738958b6bf5711bcb5291049b7466d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3b09f6bac738958b6bf5711bcb5291049b7466d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dd9259d4c9a417b64c2689481b2fce8eb707ec80",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c719cefc417cc578f48b33069b764339a61054ce/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c719cefc417cc578f48b33069b764339a61054ce/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c719cefc417cc578f48b33069b764339a61054ce",
        "patch": "@@ -1505,10 +1505,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // if pruning, unset the service bit and perform the initial blockstore prune\n     // after any wallet rescanning has taken place.\n     if (fPruneMode) {\n-        uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n         LogPrintf(\"Unsetting NODE_NETWORK on prune mode\\n\");\n         nLocalServices &= ~NODE_NETWORK;\n         if (!fReindex) {\n+            uiInterface.InitMessage(_(\"Pruning blockstore...\"));\n             PruneAndFlush();\n         }\n     }"
      },
      {
        "sha": "30df2744a3271a212073a1bd45c92c026186f377",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c719cefc417cc578f48b33069b764339a61054ce/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c719cefc417cc578f48b33069b764339a61054ce/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c719cefc417cc578f48b33069b764339a61054ce",
        "patch": "@@ -1899,7 +1899,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     std::set<int> setFilesToPrune;\n     bool fFlushForPrune = false;\n     try {\n-    if (fPruneMode && fCheckForPruning) {\n+    if (fPruneMode && fCheckForPruning && !fReindex) {\n         FindFilesToPrune(setFilesToPrune);\n         fCheckForPruning = false;\n         if (!setFilesToPrune.empty()) {"
      }
    ]
  },
  {
    "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmY3NDM3OWI4NmJlOTgyYjEyMWJjYjhjM2NmZTA3ZmE4MGJmZmQw",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T13:01:22Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@pobox.com",
        "date": "2015-10-23T13:01:22Z"
      },
      "message": "Merge pull request #6873",
      "tree": {
        "sha": "125eafb36c1f1e82aff53ded928bd4f3a16eeee7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/125eafb36c1f1e82aff53ded928bd4f3a16eeee7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIVAwUAViovtSWzCDIBeCsvAQKrAA/+P8TtH9EZxoDTlYt+q/d9aZBPCUDBEWYM\nRJGgZM6B6dGWT1GEq5H39DBEKHTlC/SQAhOsSIcgbNShmsmFtuW3BfR+50M/fyzh\nHFCDjF3n7WG3utfi+8CDnJdbGavUqt798SEEmviksP/s4EgQznSccibSavnW8+i5\n0sglsuyvwhn8QVvlkYt3ZfofgF7TwazMFyI96OkSPG2kXIEoVRSigLTmRba0HUcl\nVjMcc/iGjPwHgR+AOK3qKo+e5qLeSzvxVXb64kUFcf5tYmtCNyvSRiSi/jcVDlqX\nIYicy0Xx1JUjPib5oIK9yyTsSzvj6X8r5Je+92fVT+nL3uyt7P3415j6pfqMalQa\n7Tcoqt4GWgvYCwkZ1T8nLk2VQX766s7nRgm6OxQhR7XzITbaKib0RMBgwwKlZ1xw\nRZLlBTyySqr93D5FqUlmLhtIFZXv6aKtXTGRjA6WSjwn+UMA/UfV6zP+ICO56xER\nAe3TkgX7BiTpjcMiLYbLBinbUZe+k/HjpQFWUeSQr24VEH7Tdj531/B5iFH1cZLg\nKhd1uzTQ+UToQfTi1RXcYc2bmWJN2Sl3Cw1bRzEagoLzZV8ygwfVb9BXuMHUEtb9\nDFhe6g09fM5MdxPKGoARfdYtYkHH+VzUZB+f7TY0jXTg4n+qD64zFugVgwSXlkN+\neo3O9UxIt8c=\n=J3tM\n-----END PGP SIGNATURE-----",
        "payload": "tree 125eafb36c1f1e82aff53ded928bd4f3a16eeee7\nparent c719cefc417cc578f48b33069b764339a61054ce\nparent 3795e8152b678b9f805a395b144190a9f2fa2af4\nauthor Jeff Garzik <jgarzik@pobox.com> 1445605282 -0400\ncommitter Jeff Garzik <jgarzik@pobox.com> 1445605282 -0400\n\nMerge pull request #6873\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0/comments",
    "author": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jgarzik",
      "id": 494411,
      "node_id": "MDQ6VXNlcjQ5NDQxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/494411?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jgarzik",
      "html_url": "https://github.com/jgarzik",
      "followers_url": "https://api.github.com/users/jgarzik/followers",
      "following_url": "https://api.github.com/users/jgarzik/following{/other_user}",
      "gists_url": "https://api.github.com/users/jgarzik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jgarzik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jgarzik/subscriptions",
      "organizations_url": "https://api.github.com/users/jgarzik/orgs",
      "repos_url": "https://api.github.com/users/jgarzik/repos",
      "events_url": "https://api.github.com/users/jgarzik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jgarzik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c719cefc417cc578f48b33069b764339a61054ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c719cefc417cc578f48b33069b764339a61054ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c719cefc417cc578f48b33069b764339a61054ce"
      },
      {
        "sha": "3795e8152b678b9f805a395b144190a9f2fa2af4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3795e8152b678b9f805a395b144190a9f2fa2af4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3795e8152b678b9f805a395b144190a9f2fa2af4"
      }
    ],
    "stats": {
      "total": 174,
      "additions": 85,
      "deletions": 89
    },
    "files": [
      {
        "sha": "312643cec36e38c0aee5164f304404d08270c37d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "patch": "@@ -110,7 +110,7 @@ BITCOIN_CORE_H = \\\n   init.h \\\n   key.h \\\n   keystore.h \\\n-  leveldbwrapper.h \\\n+  dbwrapper.h \\\n   limitedmap.h \\\n   main.h \\\n   memusage.h \\\n@@ -188,7 +188,7 @@ libbitcoin_server_a_SOURCES = \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   init.cpp \\\n-  leveldbwrapper.cpp \\\n+  dbwrapper.cpp \\\n   main.cpp \\\n   merkleblock.cpp \\\n   miner.cpp \\"
      },
      {
        "sha": "f23a8f41fc42d8a97d5a65be7dad268883ef501d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "patch": "@@ -54,7 +54,7 @@ BITCOIN_TESTS =\\\n   test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n-  test/leveldbwrapper_tests.cpp \\\n+  test/dbwrapper_tests.cpp \\\n   test/main_tests.cpp \\\n   test/mempool_tests.cpp \\\n   test/miner_tests.cpp \\"
      },
      {
        "sha": "b6307cf0bf37a98c76e5be6b97c4658de894b222",
        "filename": "src/dbwrapper.cpp",
        "status": "renamed",
        "additions": 27,
        "deletions": 29,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n \n #include \"util.h\"\n #include \"random.h\"\n@@ -15,18 +15,18 @@\n #include <memenv.h>\n #include <stdint.h>\n \n-void HandleError(const leveldb::Status& status) throw(leveldb_error)\n+void HandleError(const leveldb::Status& status) throw(dbwrapper_error)\n {\n     if (status.ok())\n         return;\n     LogPrintf(\"%s\\n\", status.ToString());\n     if (status.IsCorruption())\n-        throw leveldb_error(\"Database corrupted\");\n+        throw dbwrapper_error(\"Database corrupted\");\n     if (status.IsIOError())\n-        throw leveldb_error(\"Database I/O error\");\n+        throw dbwrapper_error(\"Database I/O error\");\n     if (status.IsNotFound())\n-        throw leveldb_error(\"Database entry missing\");\n-    throw leveldb_error(\"Unknown database error\");\n+        throw dbwrapper_error(\"Database entry missing\");\n+    throw dbwrapper_error(\"Unknown database error\");\n }\n \n static leveldb::Options GetOptions(size_t nCacheSize)\n@@ -45,7 +45,7 @@ static leveldb::Options GetOptions(size_t nCacheSize)\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n+CDBWrapper::CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe, bool obfuscate)\n {\n     penv = NULL;\n     readoptions.verify_checksums = true;\n@@ -76,7 +76,7 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     bool key_exists = Read(OBFUSCATE_KEY_KEY, obfuscate_key);\n \n     if (!key_exists && obfuscate && IsEmpty()) {\n-        // Initialize non-degenerate obfuscation if it won't upset \n+        // Initialize non-degenerate obfuscation if it won't upset\n         // existing, non-obfuscated data.\n         std::vector<unsigned char> new_key = CreateObfuscateKey();\n \n@@ -90,7 +90,7 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCa\n     LogPrintf(\"Using obfuscation key for %s: %s\\n\", path.string(), GetObfuscateKeyHex());\n }\n \n-CLevelDBWrapper::~CLevelDBWrapper()\n+CDBWrapper::~CDBWrapper()\n {\n     delete pdb;\n     pdb = NULL;\n@@ -102,7 +102,7 @@ CLevelDBWrapper::~CLevelDBWrapper()\n     options.env = NULL;\n }\n \n-bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb_error)\n+bool CDBWrapper::WriteBatch(CDBBatch& batch, bool fSync) throw(dbwrapper_error)\n {\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     HandleError(status);\n@@ -113,42 +113,40 @@ bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb\n //\n // We must use a string constructor which specifies length so that we copy\n // past the null-terminator.\n-const std::string CLevelDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n+const std::string CDBWrapper::OBFUSCATE_KEY_KEY(\"\\000obfuscate_key\", 14);\n \n-const unsigned int CLevelDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n+const unsigned int CDBWrapper::OBFUSCATE_KEY_NUM_BYTES = 8;\n \n /**\n- * Returns a string (consisting of 8 random bytes) suitable for use as an \n- * obfuscating XOR key. \n+ * Returns a string (consisting of 8 random bytes) suitable for use as an\n+ * obfuscating XOR key.\n  */\n-std::vector<unsigned char> CLevelDBWrapper::CreateObfuscateKey() const \n+std::vector<unsigned char> CDBWrapper::CreateObfuscateKey() const\n {\n     unsigned char buff[OBFUSCATE_KEY_NUM_BYTES];\n     GetRandBytes(buff, OBFUSCATE_KEY_NUM_BYTES);\n     return std::vector<unsigned char>(&buff[0], &buff[OBFUSCATE_KEY_NUM_BYTES]);\n \n }\n \n-bool CLevelDBWrapper::IsEmpty()\n+bool CDBWrapper::IsEmpty()\n {\n-    boost::scoped_ptr<CLevelDBIterator> it(NewIterator());\n+    boost::scoped_ptr<CDBIterator> it(NewIterator());\n     it->SeekToFirst();\n     return !(it->Valid());\n }\n \n-const std::vector<unsigned char>& CLevelDBWrapper::GetObfuscateKey() const \n-{ \n-    return obfuscate_key; \n+const std::vector<unsigned char>& CDBWrapper::GetObfuscateKey() const\n+{\n+    return obfuscate_key;\n }\n \n-std::string CLevelDBWrapper::GetObfuscateKeyHex() const\n-{ \n-    return HexStr(obfuscate_key); \n+std::string CDBWrapper::GetObfuscateKeyHex() const\n+{\n+    return HexStr(obfuscate_key);\n }\n \n-CLevelDBIterator::~CLevelDBIterator() { delete piter; }\n-bool CLevelDBIterator::Valid() { return piter->Valid(); }\n-void CLevelDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n-void CLevelDBIterator::SeekToLast() { piter->SeekToLast(); }\n-void CLevelDBIterator::Next() { piter->Next(); }\n-void CLevelDBIterator::Prev() { piter->Prev(); }\n+CDBIterator::~CDBIterator() { delete piter; }\n+bool CDBIterator::Valid() { return piter->Valid(); }\n+void CDBIterator::SeekToFirst() { piter->SeekToFirst(); }\n+void CDBIterator::Next() { piter->Next(); }",
        "previous_filename": "src/leveldbwrapper.cpp"
      },
      {
        "sha": "aa287675086bb98f48804115a392e7358ec865a7",
        "filename": "src/dbwrapper.h",
        "status": "renamed",
        "additions": 31,
        "deletions": 33,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_LEVELDBWRAPPER_H\n-#define BITCOIN_LEVELDBWRAPPER_H\n+#ifndef BITCOIN_DBWRAPPER_H\n+#define BITCOIN_DBWRAPPER_H\n \n #include \"clientversion.h\"\n #include \"serialize.h\"\n@@ -17,18 +17,18 @@\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n-class leveldb_error : public std::runtime_error\n+class dbwrapper_error : public std::runtime_error\n {\n public:\n-    leveldb_error(const std::string& msg) : std::runtime_error(msg) {}\n+    dbwrapper_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status& status) throw(leveldb_error);\n+void HandleError(const leveldb::Status& status) throw(dbwrapper_error);\n \n-/** Batch of changes queued to be written to a CLevelDBWrapper */\n-class CLevelDBBatch\n+/** Batch of changes queued to be written to a CDBWrapper */\n+class CDBBatch\n {\n-    friend class CLevelDBWrapper;\n+    friend class CDBWrapper;\n \n private:\n     leveldb::WriteBatch batch;\n@@ -38,7 +38,7 @@ class CLevelDBBatch\n     /**\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n+    CDBBatch(const std::vector<unsigned char> *obfuscate_key) : obfuscate_key(obfuscate_key) { };\n \n     template <typename K, typename V>\n     void Write(const K& key, const V& value)\n@@ -68,8 +68,8 @@ class CLevelDBBatch\n         batch.Delete(slKey);\n     }\n };\n- \n-class CLevelDBIterator\n+\n+class CDBIterator\n {\n private:\n     leveldb::Iterator *piter;\n@@ -81,14 +81,13 @@ class CLevelDBIterator\n      * @param[in] piterIn          The original leveldb iterator.\n      * @param[in] obfuscate_key    If passed, XOR data with this key.\n      */\n-    CLevelDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n+    CDBIterator(leveldb::Iterator *piterIn, const std::vector<unsigned char>* obfuscate_key) :\n         piter(piterIn), obfuscate_key(obfuscate_key) { };\n-    ~CLevelDBIterator();\n+    ~CDBIterator();\n \n     bool Valid();\n \n     void SeekToFirst();\n-    void SeekToLast();\n \n     template<typename K> void Seek(const K& key) {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n@@ -99,7 +98,6 @@ class CLevelDBIterator\n     }\n \n     void Next();\n-    void Prev();\n \n     template<typename K> bool GetKey(K& key) {\n         leveldb::Slice slKey = piter->key();\n@@ -133,8 +131,8 @@ class CLevelDBIterator\n     }\n \n };\n- \n-class CLevelDBWrapper\n+\n+class CDBWrapper\n {\n private:\n     //! custom environment this database is using (may be NULL in case of default environment)\n@@ -163,10 +161,10 @@ class CLevelDBWrapper\n \n     //! the key under which the obfuscation key is stored\n     static const std::string OBFUSCATE_KEY_KEY;\n-    \n+\n     //! the length of the obfuscate key in number of bytes\n     static const unsigned int OBFUSCATE_KEY_NUM_BYTES;\n-    \n+\n     std::vector<unsigned char> CreateObfuscateKey() const;\n \n public:\n@@ -178,11 +176,11 @@ class CLevelDBWrapper\n      * @param[in] obfuscate   If true, store data obfuscated via simple XOR. If false, XOR\n      *                        with a zero'd byte array.\n      */\n-    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n-    ~CLevelDBWrapper();\n+    CDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false, bool obfuscate = false);\n+    ~CDBWrapper();\n \n     template <typename K, typename V>\n-    bool Read(const K& key, V& value) const throw(leveldb_error)\n+    bool Read(const K& key, V& value) const throw(dbwrapper_error)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -208,15 +206,15 @@ class CLevelDBWrapper\n     }\n \n     template <typename K, typename V>\n-    bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n+    bool Write(const K& key, const V& value, bool fSync = false) throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n     template <typename K>\n-    bool Exists(const K& key) const throw(leveldb_error)\n+    bool Exists(const K& key) const throw(dbwrapper_error)\n     {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n@@ -235,30 +233,30 @@ class CLevelDBWrapper\n     }\n \n     template <typename K>\n-    bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n+    bool Erase(const K& key, bool fSync = false) throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CLevelDBBatch& batch, bool fSync = false) throw(leveldb_error);\n+    bool WriteBatch(CDBBatch& batch, bool fSync = false) throw(dbwrapper_error);\n \n     // not available for LevelDB; provide for compatibility with BDB\n     bool Flush()\n     {\n         return true;\n     }\n \n-    bool Sync() throw(leveldb_error)\n+    bool Sync() throw(dbwrapper_error)\n     {\n-        CLevelDBBatch batch(&obfuscate_key);\n+        CDBBatch batch(&obfuscate_key);\n         return WriteBatch(batch, true);\n     }\n \n-    CLevelDBIterator *NewIterator() \n+    CDBIterator *NewIterator()\n     {\n-        return new CLevelDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n+        return new CDBIterator(pdb->NewIterator(iteroptions), &obfuscate_key);\n     }\n \n     /**\n@@ -278,5 +276,5 @@ class CLevelDBWrapper\n \n };\n \n-#endif // BITCOIN_LEVELDBWRAPPER_H\n+#endif // BITCOIN_DBWRAPPER_H\n ",
        "previous_filename": "src/leveldbwrapper.h"
      },
      {
        "sha": "8b6b0697ab1d0848c322a48f2ce73d823d910011",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "renamed",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n #include \"uint256.h\"\n #include \"random.h\"\n #include \"test/test_bitcoin.h\"\n@@ -25,15 +25,15 @@ bool is_null_key(const vector<unsigned char>& key) {\n     return isnull;\n }\n  \n-BOOST_FIXTURE_TEST_SUITE(leveldbwrapper_tests, BasicTestingSetup)\n+BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n                        \n-BOOST_AUTO_TEST_CASE(leveldbwrapper)\n+BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = GetRandHash();\n         uint256 res;\n@@ -48,13 +48,13 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper)\n }\n \n // Test batch operations\n-BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n+BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n         uint256 in = GetRandHash();\n@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n         uint256 in3 = GetRandHash();\n \n         uint256 res;\n-        CLevelDBBatch batch(&dbw.GetObfuscateKey());\n+        CDBBatch batch(&dbw.GetObfuscateKey());\n \n         batch.Write(key, in);\n         batch.Write(key2, in2);\n@@ -85,13 +85,13 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_batch)\n     }\n }\n \n-BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n+BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (int i = 0; i < 2; i++) {\n         bool obfuscate = (bool)i;\n         path ph = temp_directory_path() / unique_path();\n-        CLevelDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n+        CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n         char key = 'j';\n@@ -101,7 +101,7 @@ BOOST_AUTO_TEST_CASE(leveldbwrapper_iterator)\n         uint256 in2 = GetRandHash();\n         BOOST_CHECK(dbw.Write(key2, in2));\n \n-        boost::scoped_ptr<CLevelDBIterator> it(const_cast<CLevelDBWrapper*>(&dbw)->NewIterator());\n+        boost::scoped_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n \n         // Be sure to seek past the obfuscation key (if it exists)\n         it->Seek(key);\n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = GetRandHash();\n     uint256 res;\n@@ -147,7 +147,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     delete dbw;\n \n     // Now, set up another wrapper that wants to obfuscate the same directory\n-    CLevelDBWrapper odbw(ph, (1 << 10), false, false, true);\n+    CDBWrapper odbw(ph, (1 << 10), false, false, true);\n \n     // Check that the key/val we wrote with unobfuscated wrapper exists and \n     // is readable.\n@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n-    CLevelDBWrapper* dbw = new CLevelDBWrapper(ph, (1 << 10), false, false, false);\n+    CDBWrapper* dbw = new CDBWrapper(ph, (1 << 10), false, false, false);\n     char key = 'k';\n     uint256 in = GetRandHash();\n     uint256 res;\n@@ -188,7 +188,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     delete dbw;\n \n     // Simulate a -reindex by wiping the existing data store\n-    CLevelDBWrapper odbw(ph, (1 << 10), false, true, true);\n+    CDBWrapper odbw(ph, (1 << 10), false, true, true);\n \n     // Check that the key/val we wrote with unobfuscated wrapper doesn't exist\n     uint256 res2;",
        "previous_filename": "src/test/leveldbwrapper_tests.cpp"
      },
      {
        "sha": "f0868a1ebfbde4c978955eac581572a2f533b47f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "patch": "@@ -49,7 +49,7 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    CLevelDBBatch batch(&db.GetObfuscateKey());\n+    CDBBatch batch(&db.GetObfuscateKey());\n     size_t count = 0;\n     size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n@@ -71,7 +71,7 @@ bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     return db.WriteBatch(batch);\n }\n \n-CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CLevelDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n+CBlockTreeDB::CBlockTreeDB(size_t nCacheSize, bool fMemory, bool fWipe) : CDBWrapper(GetDataDir() / \"blocks\" / \"index\", nCacheSize, fMemory, fWipe) {\n }\n \n bool CBlockTreeDB::ReadBlockFileInfo(int nFile, CBlockFileInfo &info) {\n@@ -98,7 +98,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     /* It seems that there are no \"const iterators\" for LevelDB.  Since we\n        only need read operations on it, use a const-cast to get around\n        that restriction.  */\n-    boost::scoped_ptr<CLevelDBIterator> pcursor(const_cast<CLevelDBWrapper*>(&db)->NewIterator());\n+    boost::scoped_ptr<CDBIterator> pcursor(const_cast<CDBWrapper*>(&db)->NewIterator());\n     pcursor->Seek(DB_COINS);\n \n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n }\n \n bool CBlockTreeDB::WriteBatchSync(const std::vector<std::pair<int, const CBlockFileInfo*> >& fileInfo, int nLastFile, const std::vector<const CBlockIndex*>& blockinfo) {\n-    CLevelDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<int, const CBlockFileInfo*> >::const_iterator it=fileInfo.begin(); it != fileInfo.end(); it++) {\n         batch.Write(make_pair(DB_BLOCK_FILES, it->first), *it->second);\n     }\n@@ -157,7 +157,7 @@ bool CBlockTreeDB::ReadTxIndex(const uint256 &txid, CDiskTxPos &pos) {\n }\n \n bool CBlockTreeDB::WriteTxIndex(const std::vector<std::pair<uint256, CDiskTxPos> >&vect) {\n-    CLevelDBBatch batch(&GetObfuscateKey());\n+    CDBBatch batch(&GetObfuscateKey());\n     for (std::vector<std::pair<uint256,CDiskTxPos> >::const_iterator it=vect.begin(); it!=vect.end(); it++)\n         batch.Write(make_pair(DB_TXINDEX, it->first), it->second);\n     return WriteBatch(batch);\n@@ -177,7 +177,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n \n bool CBlockTreeDB::LoadBlockIndexGuts()\n {\n-    boost::scoped_ptr<CLevelDBIterator> pcursor(NewIterator());\n+    boost::scoped_ptr<CDBIterator> pcursor(NewIterator());\n \n     pcursor->Seek(make_pair(DB_BLOCK_INDEX, uint256()));\n "
      },
      {
        "sha": "586ab55d0d5501754a7f25d021705b33307454a8",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46f74379b86be982b121bcb8c3cfe07fa80bffd0/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "patch": "@@ -7,7 +7,7 @@\n #define BITCOIN_TXDB_H\n \n #include \"coins.h\"\n-#include \"leveldbwrapper.h\"\n+#include \"dbwrapper.h\"\n \n #include <map>\n #include <string>\n@@ -26,11 +26,11 @@ static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache in (MiB)\n static const int64_t nMinDbCache = 4;\n \n-/** CCoinsView backed by the LevelDB coin database (chainstate/) */\n+/** CCoinsView backed by the coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView\n {\n protected:\n-    CLevelDBWrapper db;\n+    CDBWrapper db;\n public:\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n@@ -42,7 +42,7 @@ class CCoinsViewDB : public CCoinsView\n };\n \n /** Access to the block database (blocks/index/) */\n-class CBlockTreeDB : public CLevelDBWrapper\n+class CBlockTreeDB : public CDBWrapper\n {\n public:\n     CBlockTreeDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);"
      }
    ]
  },
  {
    "sha": "9d55050773d57c0e12005e524f2e54d9e622c6e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDU1MDUwNzczZDU3YzBlMTIwMDVlNTI0ZjJlNTRkOWU2MjJjNmUy",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-06-03T19:55:45Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-10-23T16:02:24Z"
      },
      "message": "Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\n\nThe lock-time code currently uses CBlock::nTime as the cutoff point for time based locked transactions. This has the unfortunate outcome of creating a perverse incentive for miners to lie about the time of a block in order to collect more fees by including transactions that by wall clock determination have not yet matured. By using CBlockIndex::GetMedianTimePast from the prior block instead, the self-interested miner no longer gains from generating blocks with fraudulent timestamps. Users can compensate for this change by simply adding an hour (3600 seconds) to their time-based lock times.\n\nIf enforced, this would be a soft-fork change. This commit only adds the functionality on an unexecuted code path, without changing the behaviour of Bitcoin Core.",
      "tree": {
        "sha": "5e07889ff64f153d39b0a4b06d5e2ac29621153f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e07889ff64f153d39b0a4b06d5e2ac29621153f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d55050773d57c0e12005e524f2e54d9e622c6e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 54,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6d6ce7e0998e9248b65f4ee7fb47bb36216ed76a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -13,4 +13,10 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+/** Flags for LockTime() */\n+enum {\n+    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n+    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n+};\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "499f2c3f767b65f9c282043727ba24f5635eacf1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 5,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -650,10 +650,35 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx)\n+bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n-    return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n+\n+    // By convention a negative value for flags indicates that the\n+    // current network-enforced consensus rules should be used. In\n+    // a future soft-fork scenario that would mean checking which\n+    // rules would be enforced for the next block and setting the\n+    // appropriate flags. At the present time no soft-forks are\n+    // scheduled, so no flags are set.\n+    flags = std::max(flags, 0);\n+\n+    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n+    // nLockTime because when IsFinalTx() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // IsFinalTx() with one more than chainActive.Height().\n+    const int nBlockHeight = chainActive.Height() + 1;\n+\n+    // Timestamps on the other hand don't get any special treatment,\n+    // because we can't know what timestamp the next block will have,\n+    // and there aren't timestamp applications where it matters.\n+    // However this changes once median past time-locks are enforced:\n+    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n+                             ? chainActive.Tip()->GetMedianTimePast()\n+                             : GetAdjustedTime();\n+\n+    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -797,7 +822,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx))\n+    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -2723,10 +2748,15 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+        int nLockTimeFlags = 0;\n+        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? pindexPrev->GetMedianTimePast()\n+                                : block.GetBlockTime();\n+        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n+    }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):"
      },
      {
        "sha": "65732d770f8811d9143764f9bf39f319002e3ab3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -308,8 +308,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n+ *\n+ * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "053d9cdbc4ecca4fb22f747fb3d2551206f64d3b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -148,6 +148,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n+        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n@@ -162,7 +163,12 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->GetTx();\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n+\n+            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                    ? nMedianTimePast\n+                                    : pblock->GetBlockTime();\n+\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n             COrphan* porphan = NULL;"
      },
      {
        "sha": "cfe6a4052675fb4c2f6cd4b2ae7b50cf2bd1c5c0",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -43,6 +43,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n+/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n+\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types"
      }
    ]
  },
  {
    "sha": "dea8d21fc63e9f442299c97010e4740558f4f037",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWE4ZDIxZmM2M2U5ZjQ0MjI5OWM5NzAxMGU0NzQwNTU4ZjRmMDM3",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-06-03T22:01:47Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-10-23T16:02:24Z"
      },
      "message": "Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\n\nTransactions are not allowed in the memory pool or selected for inclusion in a block until their lock times exceed chainActive.Tip()->GetMedianTimePast(). However blocks including transactions which are only mature under the old rules are still accepted; this is *not* the soft-fork required to actually rely on the new constraint in production.",
      "tree": {
        "sha": "a8a524a4a9f925d263400720a34cbfe4edd4b218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8a524a4a9f925d263400720a34cbfe4edd4b218"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dea8d21fc63e9f442299c97010e4740558f4f037",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea8d21fc63e9f442299c97010e4740558f4f037",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dea8d21fc63e9f442299c97010e4740558f4f037",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea8d21fc63e9f442299c97010e4740558f4f037/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d55050773d57c0e12005e524f2e54d9e622c6e2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7027f1402f41a634a51c041f669fb1e21810384f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea8d21fc63e9f442299c97010e4740558f4f037/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea8d21fc63e9f442299c97010e4740558f4f037/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=dea8d21fc63e9f442299c97010e4740558f4f037",
        "patch": "@@ -44,7 +44,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**"
      },
      {
        "sha": "827525783a36913a3d241804d4f746243032f84c",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea8d21fc63e9f442299c97010e4740558f4f037/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea8d21fc63e9f442299c97010e4740558f4f037/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=dea8d21fc63e9f442299c97010e4740558f4f037",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -229,7 +230,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -243,7 +244,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2));\n+    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n@@ -261,7 +262,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "4d2a926cb40995e483846cc125e42bdbcc1f5918",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDJhOTI2Y2I0MDk5NWU0ODM4NDZjYzEyNWU0MmJkYmNjMWY1OTE4",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-05-27T23:28:39Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-23T20:08:07Z"
      },
      "message": "Ignore coverage data related and temporary test files",
      "tree": {
        "sha": "dfb073df5df66c413feb9c6cd197d51d890996d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfb073df5df66c413feb9c6cd197d51d890996d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d2a926cb40995e483846cc125e42bdbcc1f5918",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWKpO7AAoJEHZ14xz1cZgyl90P/iOm/jmhOSMCjCBjGSxIvkwm\nY2DKu7lERUJlXhjpCTpV3ctyp5e554z9/t9vX+OniPYOypwKsn0bj1JbplHEIYmA\nG3t+RItu9eF+77ofpnHvHQ8UDLRGiBLKSTV6Hy/CRzPrDbkrGc7gPjP1Qp2fg80p\nBDE6CN+cHL5t/2nDO988r3nHN7FqpUyY+EqLvfrx4uXRrqMsc0yeg3oPZk7wnBYL\nKMAvtDFwJ3r6oVT6oJdSWYQDbkT60fZrn+Hf/yQfzhZdTJqt4FU2jzuAJTVdOqFF\nh4iUHxZgpS9YlMhY8f/A1qgJiVnnir9J5rlBGtB7S2EZUEhCTNA92xxbMghBR1G1\nNmJQEHB+Wcq7NXyK4asQjzREnq2FLXNsLUCMhwrRfHBjEEacrQO3S/c5GKpQ4vWi\n6VCb6Nve6LmFBflJD+PASYPRl4N0CTDxOtUDGNz8M0blQYRAkdj969DST2rFRwlr\n0mEK1VOSem9WL2iH5/HQ0CAsBgdNthOHrHIl1beqkFME3I7dr61TfwFxKkLimYcE\nSJtjeZn4E6vDfWK2D/59NYrxBVud/flfFeLn9RfFDX0lA+BRkEK9hAkkkNfrmVXH\nBUoOenXW6N46wTbTj4WAaQBHkv73KpvAL68Fj7fv8fGxRtYhujIgWI48PKKQRyXU\nFpM1HTwVpWCXAjWdOMGS\n=aAsy\n-----END PGP SIGNATURE-----",
        "payload": "tree dfb073df5df66c413feb9c6cd197d51d890996d1\nparent 46f74379b86be982b121bcb8c3cfe07fa80bffd0\nauthor dexX7 <dexx@bitwatch.co> 1432769319 +0200\ncommitter dexX7 <dexx@bitwatch.co> 1445630887 +0200\n\nIgnore coverage data related and temporary test files\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2a926cb40995e483846cc125e42bdbcc1f5918",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2a926cb40995e483846cc125e42bdbcc1f5918",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2a926cb40995e483846cc125e42bdbcc1f5918/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2b6b19883d3fd859548c292ac7e6cbe4d7bc5ffb",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d2a926cb40995e483846cc125e42bdbcc1f5918/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d2a926cb40995e483846cc125e42bdbcc1f5918/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=4d2a926cb40995e483846cc125e42bdbcc1f5918",
        "patch": "@@ -94,6 +94,7 @@ build\n \n #lcov\n *.gcno\n+*.gcda\n /*.info\n test_bitcoin.coverage/\n total.coverage/\n@@ -107,6 +108,9 @@ qa/pull-tester/run-bitcoind-for-test.sh\n qa/pull-tester/tests_config.py\n qa/pull-tester/cache/*\n qa/pull-tester/test.*/*\n+qa/tmp\n+cache/\n+share/BitcoindComparisonTool.jar\n \n !src/leveldb*/Makefile\n "
      }
    ]
  },
  {
    "sha": "d425877557037b063c5cadcc49ef0582706cff77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDI1ODc3NTU3MDM3YjA2M2M1Y2FkY2M0OWVmMDU4MjcwNmNmZjc3",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-05-28T00:47:53Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-23T20:09:14Z"
      },
      "message": "Remove coverage and test related files, when cleaning up\n\nUntil now there were quite a few leftovers, and only the coverage\nrelated files in `src/` were cleaned, while the ones in the other dirs\nremained. `qa/tmp/` is related to the BitcoinJ tests, and `cache/` is\nrelated to RPC tests.",
      "tree": {
        "sha": "66a92d7cf3a7d538409e7d28670ab98ed8f64553",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/66a92d7cf3a7d538409e7d28670ab98ed8f64553"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d425877557037b063c5cadcc49ef0582706cff77",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWKpPqAAoJEHZ14xz1cZgyVWgP/i2djhcrV9J+0guOkXSdv2lV\n4cylmN+F/yL8TTIH883DLf42G2LCrI4yZ9tyAHf9OK71eDCSxnbUqgf5/IBHLyJ4\n7lRQ3VTY6y6OCUkttNt3vkpwygj5INiT/CuRqP4NFP0/rrMbg6Ha4VoUFJqCw+dt\n7TeGFt4JsGuV9zvIJdMdErbEZJhytMcubvN9Vwg+OPPE6cM4va+zAjtY32eH7uc8\nrcPgPrzfPSbsoJSG0dlgc/FYrwGLbqU5LfKNrSvpiUHPeYCRYO4QT6IORT9icB/u\naL2P37oCuVwJ4SxMZgVWlj5wnutsMn8ixhVmOGcr74/q0nC6oiSQ4mSHzOotzdER\nN3RW/RyaWnRnoDJ5x18nphmVjqodJBd7QNp4HcSMznojh4l8hogJRTR1s3/P2xE6\nydszliHIJprPMsmkcIoC1Qjh+jQDKA5dML1w19v4pKAQpJiAS3b7ONNfLfPDJmHS\nnQj/wHwaedGHYW8U9Zy6Lwf3p4NnRjPOfXtG4p+twEzdt1P17PQXVhr5TDfVtNop\nBieXsVRudnL5Xw5UBYWHnkavUoDU+j00Z9PObHTgw3KU6TmW7lvGvH2bOmBGoA2a\nqErg4/OTbme3mAa5RibQNKxT28gUQ3TqhmndP9JTpec11vcbZLDz+0UcecrJhxYt\nHxKQtgGwkl2jqCNSRont\n=85nD\n-----END PGP SIGNATURE-----",
        "payload": "tree 66a92d7cf3a7d538409e7d28670ab98ed8f64553\nparent 4d2a926cb40995e483846cc125e42bdbcc1f5918\nauthor dexX7 <dexx@bitwatch.co> 1432774073 +0200\ncommitter dexX7 <dexx@bitwatch.co> 1445630954 +0200\n\nRemove coverage and test related files, when cleaning up\n\nUntil now there were quite a few leftovers, and only the coverage\nrelated files in `src/` were cleaned, while the ones in the other dirs\nremained. `qa/tmp/` is related to the BitcoinJ tests, and `cache/` is\nrelated to RPC tests.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d425877557037b063c5cadcc49ef0582706cff77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d425877557037b063c5cadcc49ef0582706cff77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d425877557037b063c5cadcc49ef0582706cff77/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d2a926cb40995e483846cc125e42bdbcc1f5918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d2a926cb40995e483846cc125e42bdbcc1f5918",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d2a926cb40995e483846cc125e42bdbcc1f5918"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "93a768b1c191d354c81f6c01f808f26cc48f338d",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d425877557037b063c5cadcc49ef0582706cff77/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d425877557037b063c5cadcc49ef0582706cff77/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=d425877557037b063c5cadcc49ef0582706cff77",
        "patch": "@@ -211,4 +211,4 @@ CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n clean-local:\n-\trm -rf test_bitcoin.coverage/ total.coverage/ $(OSX_APP)\n+\trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ qa/tmp/ cache/ $(OSX_APP)"
      },
      {
        "sha": "f35b9dc898143443d2678d30a1d81d47fc68ec1d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d425877557037b063c5cadcc49ef0582706cff77/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d425877557037b063c5cadcc49ef0582706cff77/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d425877557037b063c5cadcc49ef0582706cff77",
        "patch": "@@ -412,7 +412,19 @@ libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BIT\n endif\n #\n \n-CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n+CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a\n+CLEANFILES += *.gcda *.gcno\n+CLEANFILES += compat/*.gcda compat/*.gcno\n+CLEANFILES += consensus/*.gcda consensus/*.gcno\n+CLEANFILES += crypto/*.gcda crypto/*.gcno\n+CLEANFILES += policy/*.gcda policy/*.gcno\n+CLEANFILES += primitives/*.gcda primitives/*.gcno\n+CLEANFILES += script/*.gcda script/*.gcno\n+CLEANFILES += support/*.gcda support/*.gcno\n+CLEANFILES += univalue/*.gcda univalue/*.gcno\n+CLEANFILES += wallet/*.gcda wallet/*.gcno\n+CLEANFILES += wallet/test/*.gcda wallet/test/*.gcno\n+CLEANFILES += zmq/*.gcda zmq/*.gcno\n \n DISTCLEANFILES = obj/build.h\n \n@@ -422,7 +434,7 @@ clean-local:\n \t-$(MAKE) -C leveldb clean\n \t-$(MAKE) -C secp256k1 clean\n \t-$(MAKE) -C univalue clean\n-\trm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno\n+\t-rm -f leveldb/*/*.gcda leveldb/*/*.gcno leveldb/helpers/memenv/*.gcda leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n \n .rc.o:"
      }
    ]
  },
  {
    "sha": "8e3a27bbbfc8d453877bf6521044c64dfbf64610",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTNhMjdiYmJmYzhkNDUzODc3YmY2NTIxMDQ0YzY0ZGZiZjY0NjEw",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-11T20:05:20Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-23T20:09:17Z"
      },
      "message": "Require Python for RPC tests, when using lcov\n\nBecause Python is (going to be) used to run the RPC tests, when\ngathering coverage data with lcov, it is explicitly checked, whether\nPython is really available.",
      "tree": {
        "sha": "05f6baeabb6834656e0f306f2540064f90130fa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05f6baeabb6834656e0f306f2540064f90130fa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e3a27bbbfc8d453877bf6521044c64dfbf64610",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWKpPuAAoJEHZ14xz1cZgyP2oP/0ITdMG6goatpSrbumgUI5N6\nDSmQoTHWV8VufbUcrOQukConM+WELeF+nYFI9MqFk6FXumkXWpA9V7Qm4FxfzSU1\nCOFqWej0irgYGMNwUAcF+sjp95Ecx/qG1+BYAPTTzOcWAWOsohEMlbu0OYHxSGUM\nRiE/j8CiAxOrXMPR30ebhPi3n8OmBc0zUHFiXgpc1CMOQl7UsdaHw3BMSjOCG/65\nmCJYBPI3vMnue/kfssKcU/XrgEwXdb622jMbdW749QT44rKoHzqMiCqbUFCe1bzq\nEVuR2KeHbYFClhLCp8R43PgHa/v46+cPC3qJizzJMyDXbNC+JI8kTrI8vN+JJpru\nMEWHLPFBrPsKvV32jTsvKLZPZsIfhr7N7p5JQmQH9t7HBJHRy+xRDEq9JN7yPdDs\nZF/Rws62PgYYJ8wqv4PDVQfGkFqBldOUDQ1nHhXOK0qySf7KLkTwemif+9Bz0nEQ\nijkCHYTSI7a6v6MAdibek6+bWcvcklGwpPcjE7eAaF6e9U8x2JuoAm+11D2CVMxy\nTrB1zh9Kf4cI9XnuQEPEr/5tU/8iogloolUEu7qstKC2lLbwQlE5JQuotu5I0qNq\n+JJvAi/jUDvm77nlKzbqz76CQtCtDm9YaYHuSdgFP9TYAJ/v2O12fAqqOysGs8SK\nAjnsKkQVESUGHgRLfzMk\n=RXIP\n-----END PGP SIGNATURE-----",
        "payload": "tree 05f6baeabb6834656e0f306f2540064f90130fa3\nparent d425877557037b063c5cadcc49ef0582706cff77\nauthor dexX7 <dexx@bitwatch.co> 1444593920 +0200\ncommitter dexX7 <dexx@bitwatch.co> 1445630957 +0200\n\nRequire Python for RPC tests, when using lcov\n\nBecause Python is (going to be) used to run the RPC tests, when\ngathering coverage data with lcov, it is explicitly checked, whether\nPython is really available.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e3a27bbbfc8d453877bf6521044c64dfbf64610",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e3a27bbbfc8d453877bf6521044c64dfbf64610",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e3a27bbbfc8d453877bf6521044c64dfbf64610/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d425877557037b063c5cadcc49ef0582706cff77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d425877557037b063c5cadcc49ef0582706cff77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d425877557037b063c5cadcc49ef0582706cff77"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "13598acd2f159bd9aa83eb3b088dccdb46bdd2c5",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e3a27bbbfc8d453877bf6521044c64dfbf64610/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e3a27bbbfc8d453877bf6521044c64dfbf64610/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8e3a27bbbfc8d453877bf6521044c64dfbf64610",
        "patch": "@@ -58,6 +58,7 @@ AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_PROG(LCOV, lcov)\n AC_PATH_PROG(JAVA, java)\n+AC_PATH_PROG(PYTHON, python)\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n@@ -351,6 +352,9 @@ if test x$use_lcov = xyes; then\n   if test x$JAVA = x; then\n     AC_MSG_ERROR(\"lcov testing requested but java not found\")\n   fi\n+  if test x$PYTHON = x; then\n+    AC_MSG_ERROR(\"lcov testing requested but python not found\")\n+  fi\n   if test x$GENHTML = x; then\n     AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n   fi"
      }
    ]
  },
  {
    "sha": "45d4ff0c2094813e8a1c5446e728449157a289b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWQ0ZmYwYzIwOTQ4MTNlOGExYzU0NDZlNzI4NDQ5MTU3YTI4OWI4",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-12T12:37:57Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-23T20:09:19Z"
      },
      "message": "Add config option to enable extended RPC tests for code coverage\n\nWhen using lcov to gather code coverage data, the configuration option\n`--enable-extended-rpc-tests` may be used to enable extended RPC tests.",
      "tree": {
        "sha": "9f94fc2714ca7d7ea201f9341fa82ecccaee50a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f94fc2714ca7d7ea201f9341fa82ecccaee50a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45d4ff0c2094813e8a1c5446e728449157a289b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWKpPvAAoJEHZ14xz1cZgydXEP/06sE3WwIWFmG4wseHL+aluZ\nhEYGvEO+Ro6/scaNZ70Q+b15GjKVWwbocpHWu/IuxQvEwI0Zw9LJ2J/QoOLR94VM\nhzjHDk4mVhcv8U+GnOIlF5qo5nik9ECnxdO58r9fiiZnjK7fxGst09eaEOZzN9P+\nl43FkLmjaW5/YZufOMxhy9psOvXFU1Deqyfq/qikv+ZrL5/SE3OnSNDqDa0a7CLl\n8RyG51796KHrattJ6tYUCxwqVyBkpBCw4IKUNEvmqMkQeEpEqvZaxoqCqVT9BJ7I\nu8rPbh2SwwTsYFA350vzq2U6mcqnjBlj6GEKlixUSrspbqO6vkUEJNZsmsz37vUx\n5Deuov8ls1/0+kPbDrEHwbUuMgRlP/F+N2DpOTkQ5lQlG3PusQEXCXqdHYdqI3G/\nTZkRUfH2YlmAs4cOs+MWbvRhaLG7NLUU5krMlP8fDkkF2Tda8+WsWL3mFtxmkQV2\nA5gVjmYm7XqX2315pbefgQbAXsOStKR1dyjzuaVvheLwQGYMDKL0CNTBG1JoLm3x\nvQ+uZ7xcpot9C30O9x3r324a3zHWrX+DetQpPwliKQqnIWBIJTcsDz8UNcw1eZNq\nSG8ICnt4MhxHpu8F7FYfdJHoXcKFhNmdb68OxUbHwIuEnHAB0uo4ytphxG6O+2uX\nE8BAXeuapVS9JSqGwSVv\n=ra9Z\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f94fc2714ca7d7ea201f9341fa82ecccaee50a5\nparent 8e3a27bbbfc8d453877bf6521044c64dfbf64610\nauthor dexX7 <dexx@bitwatch.co> 1444653477 +0200\ncommitter dexX7 <dexx@bitwatch.co> 1445630959 +0200\n\nAdd config option to enable extended RPC tests for code coverage\n\nWhen using lcov to gather code coverage data, the configuration option\n`--enable-extended-rpc-tests` may be used to enable extended RPC tests.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d4ff0c2094813e8a1c5446e728449157a289b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45d4ff0c2094813e8a1c5446e728449157a289b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d4ff0c2094813e8a1c5446e728449157a289b8/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e3a27bbbfc8d453877bf6521044c64dfbf64610",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e3a27bbbfc8d453877bf6521044c64dfbf64610",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e3a27bbbfc8d453877bf6521044c64dfbf64610"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "25ace88f3270cd69ea545fbc853185cdd9178e24",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45d4ff0c2094813e8a1c5446e728449157a289b8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45d4ff0c2094813e8a1c5446e728449157a289b8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=45d4ff0c2094813e8a1c5446e728449157a289b8",
        "patch": "@@ -107,6 +107,11 @@ AC_ARG_ENABLE([comparison-tool-reorg-tests],\n     [use_comparison_tool_reorg_tests=$enableval],\n     [use_comparison_tool_reorg_tests=no])\n \n+AC_ARG_ENABLE([extended-rpc-tests],\n+    AS_HELP_STRING([--enable-extended-rpc-tests],[enable expensive RPC tests when using lcov (default no)]),\n+    [use_extended_rpc_tests=$enableval],\n+    [use_extended_rpc_tests=no])\n+\n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n   [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n@@ -342,6 +347,10 @@ else\n   AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 0)\n fi\n \n+if test x$use_extended_rpc_tests != xno; then\n+  AC_SUBST(EXTENDED_RPC_TESTS, -extended)\n+fi\n+\n if test x$use_lcov = xyes; then\n   if test x$LCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but lcov not found\")"
      }
    ]
  },
  {
    "sha": "e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2I1ZTZjMzljNWE2ZTU2YmRjMjFkMzA3YWM1Y2I2YzgwYjczN2Rk",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-12T12:29:44Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-23T20:09:20Z"
      },
      "message": "Run extended BitcoinJ tests for coverage based on config\n\nThe configuration option `--enable-comparison-tool-reorg-tests` may be\nused to enable extended tests via BitcoinJ also for coverage testing.",
      "tree": {
        "sha": "5b7526c264da7733d7e178d36316bfae0aa66cf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b7526c264da7733d7e178d36316bfae0aa66cf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWKpPzAAoJEHZ14xz1cZgyywgP/A/UYekRU+HxzNUfF5mnyi6x\nlEflPJtJw01YRRDugULmXS4ESoWZUdQab5aiyoicMysI7TH4db6u0JqAOLmfnkVB\nGNVOcuvwurLsgYydq4cVyaO3POSQsyFyQk3UoWXqL9XHpYma6hm+Xnjpq4oxU5tG\na+cX+mumwFaDX9ZkvdHq1vlu3YlUi9VGS1wwRgzEQB7ks1ZbDLaMVOCNoc6A1LFl\niFIY94WzqhxqVw+7vhZCM6fEaysU6c29D6MsIZV5WqL9L39sDKGGL5fKXiEehlZw\nCJOSh9e3yU32hD5UXnskzFS98ZUxaUofI5w9O8Tc61Cx3FlCUYh9Q9UY+66AikNe\nN3L5c4pGNviDdgLygvRzqr3D50rgvdcP1xKl77RcwPtZ6ry+WptIQNRKClMhq8aB\n34Ml7YwypFHWO0e8BKtbVXko8VrPumpnki6NmT+0wwkZHArvx0jamfYdN5bDfqIM\nntP4eBF0nHjptCwLwrmlpNRJdq1uXYFSADkMRXWh7P0ypkB0nPMWzQq7cMe0YG1B\nolIRMuVdOtoTW9t9ZkNhN46/L/VKonWJ2++nSZHCdjkVmWq2c3EMYDLZcl1DeT/Q\nXhoQe9S7HcwNSHltctZbeXS90nDbH24lGU6Z4W09YSoZpms7PVR5keSHKEcpvHOR\ndg2bbGAHfrKgXKtrfD4Y\n=Csgf\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b7526c264da7733d7e178d36316bfae0aa66cf1\nparent 45d4ff0c2094813e8a1c5446e728449157a289b8\nauthor dexX7 <dexx@bitwatch.co> 1444652984 +0200\ncommitter dexX7 <dexx@bitwatch.co> 1445630960 +0200\n\nRun extended BitcoinJ tests for coverage based on config\n\nThe configuration option `--enable-comparison-tool-reorg-tests` may be\nused to enable extended tests via BitcoinJ also for coverage testing.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45d4ff0c2094813e8a1c5446e728449157a289b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45d4ff0c2094813e8a1c5446e728449157a289b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45d4ff0c2094813e8a1c5446e728449157a289b8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8b298619f72b5512b633886a219cb8029b601d56",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd",
        "patch": "@@ -170,7 +170,7 @@ test_bitcoin_filtered.info: test_bitcoin.info\n \n block_test.info: test_bitcoin_filtered.info\n \t$(MKDIR_P) qa/tmp\n-\t-@TIMEOUT=15 qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool 0\n+\t-@TIMEOUT=15 qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool $(COMPARISON_TOOL_REORG_TESTS)\n \t$(LCOV) -c -d $(abs_builddir)/src --t BitcoinJBlockTest -o $@\n \t$(LCOV) -z -d $(abs_builddir)/src\n \t$(LCOV) -z -d $(abs_builddir)/src/leveldb"
      }
    ]
  },
  {
    "sha": "d80e3cbece857b293a4903ef49c4d543bb2cfb7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODBlM2NiZWNlODU3YjI5M2E0OTAzZWY0OWM0ZDU0M2JiMmNmYjdm",
    "commit": {
      "author": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-11T16:29:42Z"
      },
      "committer": {
        "name": "dexX7",
        "email": "dexx@bitwatch.co",
        "date": "2015-10-23T20:09:24Z"
      },
      "message": "Support gathering of code coverage data for RPC tests\n\nThe RPC tests (via `qa/pull-tester/rpc-tests.py`) are now executed,\nwhen gathering code coverage data, for example with `make cov`.\n\nGenerating coverage data requires `lcov`, which can installed with:\n\n    sudo apt-get install lcov\n\nTo also use the BitcoinJ tests, get the test tool:\n\n    TOOL_URL=https://github.com/theuni/bitcoind-comparisontool/raw/master/pull-tests-8c6666f.jar\n    TOOL_HASH=a865332b3827abcde684ab79f5f43c083b0b6a4c97ff5508c79f29fee24f11cd\n    wget $TOOL_URL -O ./share/BitcoindComparisonTool.jar\n    echo \"$TOOL_HASH  ./share/BitcoindComparisonTool.jar\" | shasum --algorithm 256 --check\n\nThe coverage data can be generated with:\n\n    ./autogen.sh\n    ./configure --enable-lcov --with-comparison-tool=./share/BitcoindComparisonTool.jar\n    make\n    make cov\n\nOptionally the options `--enable-extended-rpc-tests` and\n`--enable-comparison-tool-reorg-tests` may be used to enable more time\nconsuming tests.\n\nIt then runs the tests and generates two HTML reports:\n\n - test_bitcoin.coverage/index.html\n - total.coverage/index.html",
      "tree": {
        "sha": "fd7b4b18ce0f93ee84cbdbc3bd20b5768bba4162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd7b4b18ce0f93ee84cbdbc3bd20b5768bba4162"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d80e3cbece857b293a4903ef49c4d543bb2cfb7f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWKpP0AAoJEHZ14xz1cZgyu8cP/Ar1s7iRvmP5cOZ5LaOrCTM0\npRBBUbe9YNDmgCI4tOEsx46BZrqDIxdaJosi+rjw74PPlgp8s3y8LsMmpzSdanfY\nRhEVbpgCNYMYgnoszk7hFDvxcJbLhBEYk4X1O8ahIgSa6J+MfVvGVFGX1+cqlSJS\nM1hXzt2M26YH50qtM7+xBuUjAF+3Uok+gHAOqOvsiXGJVd1p1MeYfDQDZn31Vu+R\n6WJOAm3BbwKPoZisGZYPggVQFIPI8GnP3IYTXtYUSsskEhZkR0u0ZOH3LHXuEJZy\ncCIuUlrZ3HSrXYRAI+K3E5XItyAuYjiMmPYrdOPWKu9CcW4x1XbSNk3gtYDIkp9k\nMWeO83Bp/UD+e0dhkLtJtNjIESQb2Hz6XsMGRiq5xy6m6O4PN9f4AznZvAD1D85k\npnuxpbOUXihv3mfFxAQb5o0S39i/UBEfe+HNQS7wBJZZwjfqwNk177TMPQP2shy1\nsvSQovgM6VULki+wBJs+IE3aM/F/FINlIVIxkfc/946QkFunZ3F94hGZhZoOsbm1\nMGqVkTniZEZ7bxg5KT/xqlObHQRZWkuGVS193JBR9WqB4BqFUWV7llWADzIsaqgv\nMZFwtgYfZPzoz39tYdh/piqnGgaPojMg3btFpeVF8zYtb+NOPC8uQVkp7czecsaH\np5qlT4ubwW9UxqUiY4Iy\n=MrRf\n-----END PGP SIGNATURE-----",
        "payload": "tree fd7b4b18ce0f93ee84cbdbc3bd20b5768bba4162\nparent e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd\nauthor dexX7 <dexx@bitwatch.co> 1444580982 +0200\ncommitter dexX7 <dexx@bitwatch.co> 1445630964 +0200\n\nSupport gathering of code coverage data for RPC tests\n\nThe RPC tests (via `qa/pull-tester/rpc-tests.py`) are now executed,\nwhen gathering code coverage data, for example with `make cov`.\n\nGenerating coverage data requires `lcov`, which can installed with:\n\n    sudo apt-get install lcov\n\nTo also use the BitcoinJ tests, get the test tool:\n\n    TOOL_URL=https://github.com/theuni/bitcoind-comparisontool/raw/master/pull-tests-8c6666f.jar\n    TOOL_HASH=a865332b3827abcde684ab79f5f43c083b0b6a4c97ff5508c79f29fee24f11cd\n    wget $TOOL_URL -O ./share/BitcoindComparisonTool.jar\n    echo \"$TOOL_HASH  ./share/BitcoindComparisonTool.jar\" | shasum --algorithm 256 --check\n\nThe coverage data can be generated with:\n\n    ./autogen.sh\n    ./configure --enable-lcov --with-comparison-tool=./share/BitcoindComparisonTool.jar\n    make\n    make cov\n\nOptionally the options `--enable-extended-rpc-tests` and\n`--enable-comparison-tool-reorg-tests` may be used to enable more time\nconsuming tests.\n\nIt then runs the tests and generates two HTML reports:\n\n - test_bitcoin.coverage/index.html\n - total.coverage/index.html\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80e3cbece857b293a4903ef49c4d543bb2cfb7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d80e3cbece857b293a4903ef49c4d543bb2cfb7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80e3cbece857b293a4903ef49c4d543bb2cfb7f/comments",
    "author": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dexX7",
      "id": 5836089,
      "node_id": "MDQ6VXNlcjU4MzYwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5836089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dexX7",
      "html_url": "https://github.com/dexX7",
      "followers_url": "https://api.github.com/users/dexX7/followers",
      "following_url": "https://api.github.com/users/dexX7/following{/other_user}",
      "gists_url": "https://api.github.com/users/dexX7/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dexX7/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dexX7/subscriptions",
      "organizations_url": "https://api.github.com/users/dexX7/orgs",
      "repos_url": "https://api.github.com/users/dexX7/repos",
      "events_url": "https://api.github.com/users/dexX7/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dexX7/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3b5e6c39c5a6e56bdc21d307ac5cb6c80b737dd"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f0961c64ec04c697275a02b6cfec6f51b5345315",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d80e3cbece857b293a4903ef49c4d543bb2cfb7f/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d80e3cbece857b293a4903ef49c4d543bb2cfb7f/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=d80e3cbece857b293a4903ef49c4d543bb2cfb7f",
        "patch": "@@ -39,7 +39,7 @@ OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) $\n \n COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n   leveldb_baseline.info test_bitcoin_filtered.info total_coverage.info \\\n-  baseline_filtered.info block_test_filtered.info \\\n+  baseline_filtered.info block_test_filtered.info rpc_test.info rpc_test_filtered.info \\\n   leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n \n dist-hook:\n@@ -178,11 +178,20 @@ block_test.info: test_bitcoin_filtered.info\n block_test_filtered.info: block_test.info\n \t$(LCOV) -r $< \"/usr/include/*\" -o $@\n \n+rpc_test.info: test_bitcoin_filtered.info\n+\t-@TIMEOUT=15 python qa/pull-tester/rpc-tests.py $(EXTENDED_RPC_TESTS)\n+\t$(LCOV) -c -d $(abs_builddir)/src --t rpc-tests -o $@\n+\t$(LCOV) -z -d $(abs_builddir)/src\n+\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n+\n+rpc_test_filtered.info: rpc_test.info\n+\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\n test_bitcoin_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info\n \t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n \n-total_coverage.info:  baseline_filtered_combined.info test_bitcoin_filtered.info block_test_filtered.info\n-\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a block_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n+total_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info block_test_filtered.info rpc_test_filtered.info\n+\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a block_test_filtered.info -a rpc_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n \n test_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n \t$(GENHTML) -s $< -o $(@D)"
      }
    ]
  },
  {
    "sha": "c939792baaaa5f34ee4079b871d56054e36fb26b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTM5NzkyYmFhYWE1ZjM0ZWU0MDc5Yjg3MWQ1NjA1NGUzNmZiMjZi",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-23T20:16:07Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2015-10-23T20:19:49Z"
      },
      "message": "Add BIP65 CHECKLOCKTIMEVERIFY to release notes",
      "tree": {
        "sha": "1679b42104555e7db0a1e5d2f9e7eb1f37c93894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1679b42104555e7db0a1e5d2f9e7eb1f37c93894"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c939792baaaa5f34ee4079b871d56054e36fb26b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJWKpZmXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwZmI4NzliZGU0NWJhYjgxYjQ4MTgxYjQ1MWI3NWM2MWM5\nMjhjYjU0MDdiY2E1NjkvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQwIXyHOf0udzN8gf/WoJSQmfU2zFOBVCBZinlPOCi\nfY+hfZodEVw2RSPleDRb5qslqSnVT2FwZ7L08xngCBnzz9AleNurXheyZygVKSjl\nfgWKK2q/heh5c3aWWo3rWZbCGwv6HSnornUVoNBg9chae1yJuO+C/PVWxdEvyr+H\nDIFOWTIzxN8UqqisHmcwX7AsS5Is2uB7goq5GX4rScEO/YmWXJiMJ2QFPl6YxsS5\nmL0/6ytRiUFXk3+BPu0SSL+w89NqcsDstZ8x6fDkL2aAP0CzuFbI1IF9I64mcjpc\nBbblpdt6qsI/tZjCU1mpFgu9KFtSSDk3U92svI0oS/5BoVaxU6TfKJd2bBp1Bw==\n=IDWL\n-----END PGP SIGNATURE-----",
        "payload": "tree 1679b42104555e7db0a1e5d2f9e7eb1f37c93894\nparent 46f74379b86be982b121bcb8c3cfe07fa80bffd0\nauthor Peter Todd <pete@petertodd.org> 1445631367 -0400\ncommitter Peter Todd <pete@petertodd.org> 1445631589 -0400\n\nAdd BIP65 CHECKLOCKTIMEVERIFY to release notes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c939792baaaa5f34ee4079b871d56054e36fb26b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c939792baaaa5f34ee4079b871d56054e36fb26b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c939792baaaa5f34ee4079b871d56054e36fb26b/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd034743e62151cac5383044f59b1ec82f87f2d1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c939792baaaa5f34ee4079b871d56054e36fb26b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c939792baaaa5f34ee4079b871d56054e36fb26b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=c939792baaaa5f34ee4079b871d56054e36fb26b",
        "patch": "@@ -124,6 +124,33 @@ sanity check. Since 0.12, these are no longer stored. When loading a\n 0.12 wallet into an older version, it will automatically rescan to avoid\n failed checks.\n \n+BIP65 - CHECKLOCKTIMEVERIFY\n+---------------------------\n+\n+Previously it was impossible to create a transaction output that was guaranteed\n+to be unspendable until a specific date in the future. CHECKLOCKTIMEVERIFY is a\n+new opcode that allows a script to check if a specific block height or time has\n+been reached, failing the script otherwise. This enables a wide variety of new\n+functionality such as time-locked escrows, secure payment channels, etc.\n+\n+BIP65 implements CHECKLOCKTIMEVERIFY by introducing block version 4, which adds\n+additional restrictions to the NOP2 opcode. The same miner-voting mechanism as\n+in BIP34 and BIP66 is used: when 751 out of a sequence of 1001 blocks have\n+version number 4 or higher, the new consensus rule becomes active for those\n+blocks. When 951 out of a sequence of 1001 blocks have version number 4 or\n+higher, it becomes mandatory for all blocks and blocks with versions less than\n+4 are rejected.\n+\n+Bitcoin Core's block templates are now for version 4 blocks only, and any\n+mining software relying on its `getblocktemplate` must be updated in parallel\n+to use either libblkmaker version FIXME or any version from 0.5.1 onward. If\n+you are solo mining, this will affect you the moment you upgrade Bitcoin Core,\n+which must be done prior to BIP65 achieving its 951/1001 status.  If you are\n+mining with the stratum mining protocol: this does not affect you.  If you are\n+mining with the getblocktemplate protocol to a pool: this will affect you at\n+the pool operator's discretion, which must be no later than BIP65 achieving its\n+951/1001 status.\n+\n 0.12.0 Change log\n =================\n "
      }
    ]
  },
  {
    "sha": "e04b0b6b835483e7052a24b0224a6023e233d049",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDRiMGI2YjgzNTQ4M2U3MDUyYTI0YjAyMjRhNjAyM2UyMzNkMDQ5",
    "commit": {
      "author": {
        "name": "Kevin Cooper",
        "email": "k.coopr@gmail.com",
        "date": "2015-10-25T01:28:02Z"
      },
      "committer": {
        "name": "Kevin Cooper",
        "email": "k.coopr@gmail.com",
        "date": "2015-10-25T01:28:02Z"
      },
      "message": "added OS X documentation to doc/init.md",
      "tree": {
        "sha": "111020a09344c4eaceea0be1eca50fab61992379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/111020a09344c4eaceea0be1eca50fab61992379"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e04b0b6b835483e7052a24b0224a6023e233d049",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04b0b6b835483e7052a24b0224a6023e233d049",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e04b0b6b835483e7052a24b0224a6023e233d049",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04b0b6b835483e7052a24b0224a6023e233d049/comments",
    "author": {
      "login": "kevcooper",
      "id": 6468064,
      "node_id": "MDQ6VXNlcjY0NjgwNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6468064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevcooper",
      "html_url": "https://github.com/kevcooper",
      "followers_url": "https://api.github.com/users/kevcooper/followers",
      "following_url": "https://api.github.com/users/kevcooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevcooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevcooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevcooper/subscriptions",
      "organizations_url": "https://api.github.com/users/kevcooper/orgs",
      "repos_url": "https://api.github.com/users/kevcooper/repos",
      "events_url": "https://api.github.com/users/kevcooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevcooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kevcooper",
      "id": 6468064,
      "node_id": "MDQ6VXNlcjY0NjgwNjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6468064?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kevcooper",
      "html_url": "https://github.com/kevcooper",
      "followers_url": "https://api.github.com/users/kevcooper/followers",
      "following_url": "https://api.github.com/users/kevcooper/following{/other_user}",
      "gists_url": "https://api.github.com/users/kevcooper/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kevcooper/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kevcooper/subscriptions",
      "organizations_url": "https://api.github.com/users/kevcooper/orgs",
      "repos_url": "https://api.github.com/users/kevcooper/repos",
      "events_url": "https://api.github.com/users/kevcooper/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kevcooper/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4aa54c5af925bd0ed81c7a9ffab457149e5d682",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4aa54c5af925bd0ed81c7a9ffab457149e5d682",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4aa54c5af925bd0ed81c7a9ffab457149e5d682"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 22,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1bbfed4380136bf632c9b60d39270f9cb851b44f",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e04b0b6b835483e7052a24b0224a6023e233d049/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e04b0b6b835483e7052a24b0224a6023e233d049/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=e04b0b6b835483e7052a24b0224a6023e233d049",
        "patch": "@@ -13,8 +13,9 @@ can be found in the contrib/init folder.\n 1. Service User\n ---------------------------------\n \n-All three startup configurations assume the existence of a \"bitcoin\" user\n+All three Linux startup configurations assume the existence of a \"bitcoin\" user\n and group.  They must be created before attempting to use these scripts.\n+The OS X configuration assumes bitcoind will be set up for the current user.\n \n 2. Configuration\n ---------------------------------\n@@ -48,6 +49,8 @@ see `contrib/debian/examples/bitcoin.conf`.\n 3. Paths\n ---------------------------------\n \n+3a) Linux\n+\n All three configurations assume several paths that might need to be adjusted.\n \n Binary:              `/usr/bin/bitcoind`  \n@@ -62,6 +65,13 @@ reasons to make the configuration file and data directory only readable by the\n bitcoin user and group.  Access to bitcoin-cli and other bitcoind rpc clients\n can then be controlled by group membership.\n \n+3b) Mac OS X\n+\n+Binary:              `/usr/local/bin/bitcoind`  \n+Configuration file:  `~/Library/Application Support/Bitcoin/bitcoin.conf`  \n+Data directory:      `~/Library/Application Support/Bitcoin`\n+Lock file:           `~/Library/Application Support/Bitcoin/.lock`\n+\n 4. Installing Service Configuration\n -----------------------------------\n \n@@ -97,6 +107,17 @@ Using this script, you can adjust the path and flags to the bitcoind program by\n setting the BITCOIND and FLAGS environment variables in the file \n /etc/sysconfig/bitcoind. You can also use the DAEMONOPTS environment variable here.\n \n+4e) Mac OS X\n+\n+Copy org.bitcoin.bitcoind.plist into ~/Library/LaunchAgents. Load the launch agent by\n+running `launchctl load ~/Library/LaunchAgents/org.bitcoin.bitcoind.plist`.\n+\n+This Launch Agent will cause bitcoind to start whenever the user logs in.\n+\n+NOTE: This approach is intended for those wanting to run bitcoind as the current user.\n+You will need to modify org.bitcoin.bitcoind.plist if you intend to use it as a\n+Launch Daemon with a dedicated bitcoin user.\n+\n 5. Auto-respawn\n -----------------------------------\n "
      }
    ]
  },
  {
    "sha": "143d17396906835c3a3ccd59e202f5327c05f63f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNDNkMTczOTY5MDY4MzVjM2EzY2NkNTllMjAyZjUzMjdjMDVmNjNm",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-25T08:19:21Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2015-10-25T09:47:02Z"
      },
      "message": "Use BOOST_CHECK_MESSAGE() rather than BOOST_CHECK() in alerts_tests.cpp and initialize strMiscWarning before calling PartitionCheck().\"",
      "tree": {
        "sha": "bbc1c03c6d4af8563f1ee3cdacf04991b70ccfe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbc1c03c6d4af8563f1ee3cdacf04991b70ccfe1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/143d17396906835c3a3ccd59e202f5327c05f63f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143d17396906835c3a3ccd59e202f5327c05f63f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/143d17396906835c3a3ccd59e202f5327c05f63f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143d17396906835c3a3ccd59e202f5327c05f63f/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "468eda1c9bbee675d1be6186e7a218966a6bc4e3",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/143d17396906835c3a3ccd59e202f5327c05f63f/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/143d17396906835c3a3ccd59e202f5327c05f63f/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=143d17396906835c3a3ccd59e202f5327c05f63f",
        "patch": "@@ -217,10 +217,12 @@ BOOST_AUTO_TEST_CASE(PartitionAlert)\n         // use them\n     }\n \n+    strMiscWarning = \"\";\n+\n     // Test 1: chain with blocks every nPowTargetSpacing seconds,\n     // as normal, no worries:\n     PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(strMiscWarning.empty());\n+    BOOST_CHECK_MESSAGE(strMiscWarning.empty(), strMiscWarning);\n \n     // Test 2: go 3.5 hours without a block, expect a warning:\n     now += 3*60*60+30*60;"
      }
    ]
  },
  {
    "sha": "ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWIyYTljM2UxOTBhODUyNDgyYzBkMmE4YThmZThjZjYxOTdkNzAx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T11:53:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T07:05:43Z"
      },
      "message": "doc: mention BIP65 softfork in bips.md",
      "tree": {
        "sha": "ec496fb27a9178cfb9790f89f4a8a767e567e105",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec496fb27a9178cfb9790f89f4a8a767e567e105"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a1090d4f55c307ddf50639cdedf329de1f5a02a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a1090d4f55c307ddf50639cdedf329de1f5a02a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c780e2dde05ff38ff7a5ad0dc82879f59ba11caf",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701",
        "patch": "@@ -14,6 +14,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n * [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n * [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n+* [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, but only enforced for peer versions `>=70011` as of **v0.12.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579))."
      }
    ]
  },
  {
    "sha": "450893769f7af89fa985c02a8723be43176e60b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTA4OTM3NjlmN2FmODlmYTk4NWMwMmE4NzIzYmU0MzE3NmU2MGIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T07:06:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T07:06:19Z"
      },
      "message": "Merge pull request #6879\n\nceb2a9c doc: mention BIP65 softfork in bips.md (Wladimir J. van der Laan)",
      "tree": {
        "sha": "038240b93ae322b0036ef9d84cce4a65422ea1a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/038240b93ae322b0036ef9d84cce4a65422ea1a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/450893769f7af89fa985c02a8723be43176e60b2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLdDrAAoJEHSBCwEjRsmmgnQIAJHNLO6XBuOj8yIZVhof7SfG\n7hdH4VoZYuLQRYFtyMqn6yr2GX3vX7voJ+W8dfAlA4qs35wzf/Lqj0GAHL5+FEIu\nAWxXidslHCZE4w1ghxqQ4pu6yRbQIaSbuv0MEteWZ8W2Alv0vmyObe3CmEBVW/dQ\nCemBJ0JVfoSbcD1f0jt0rKXBVT3Kdo9aQ7+G9Q7e1kG/elG27tfaBrkDvJLcZ4+B\nB7jtOsnAM0ddIaOg3huA0lPl3h4hm8FL6MP8EfwtkHlsHZvS0xN+GHNEyMrKQai7\nylGiwS5CraRjMKF9uLI0DmC7pSBZKEgFy6DAPpUW/AuRhvzuD1lYyR8tF1iSETU=\n=Bocr\n-----END PGP SIGNATURE-----",
        "payload": "tree 038240b93ae322b0036ef9d84cce4a65422ea1a8\nparent 46f74379b86be982b121bcb8c3cfe07fa80bffd0\nparent ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445843172 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445843179 +0100\n\nMerge pull request #6879\n\nceb2a9c doc: mention BIP65 softfork in bips.md (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/450893769f7af89fa985c02a8723be43176e60b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/450893769f7af89fa985c02a8723be43176e60b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/450893769f7af89fa985c02a8723be43176e60b2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      },
      {
        "sha": "ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb2a9c3e190a852482c0d2a8a8fe8cf6197d701"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c780e2dde05ff38ff7a5ad0dc82879f59ba11caf",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/450893769f7af89fa985c02a8723be43176e60b2/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/450893769f7af89fa985c02a8723be43176e60b2/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=450893769f7af89fa985c02a8723be43176e60b2",
        "patch": "@@ -14,6 +14,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.12.0**):\n * [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n * [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n+* [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 70`](https://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki) [`71`](https://github.com/bitcoin/bips/blob/master/bip-0071.mediawiki) [`72`](https://github.com/bitcoin/bips/blob/master/bip-0072.mediawiki): Payment Protocol support has been available in Bitcoin Core GUI since **v0.9.0** ([PR #5216](https://github.com/bitcoin/bitcoin/pull/5216)).\n * [`BIP 111`](https://github.com/bitcoin/bips/blob/master/bip-0111.mediawiki): `NODE_BLOOM` service bit added, but only enforced for peer versions `>=70011` as of **v0.12.0** ([PR #6579](https://github.com/bitcoin/bitcoin/pull/6579))."
      }
    ]
  },
  {
    "sha": "867d6c90b85070644c3458e3e7ed168765523361",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjdkNmM5MGI4NTA3MDY0NGMzNDU4ZTNlN2VkMTY4NzY1NTIzMzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T07:20:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T07:21:03Z"
      },
      "message": "Merge pull request #6878\n\ndca7bd3 doc: Add developer notes about gitignore (Wladimir J. van der Laan)",
      "tree": {
        "sha": "983a507c7b64d16dec06cfb3b6c77906ac2dc5f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/983a507c7b64d16dec06cfb3b6c77906ac2dc5f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/867d6c90b85070644c3458e3e7ed168765523361",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLdRfAAoJEHSBCwEjRsmmyg4H/3gUWNtuq4W65zx7gQQPfVyI\nvS0FtdcGRiZxav6mFSauBzKYbhVsvikB2TX/8+4ULeTzuc5BXt750BlsN+GHi+bq\nVm83KLlOlCG+QtQLsWkDvabDuczIdwCBIZ2EDD50apc3WVgn54+UEO9XTVwxlBVV\n8k8YFvyJIkuNKz+0o7aCzlwfJZjv/Czeh4zi9OnHV0Jb5AXU14HKLI6ta+VfAF5W\nxJHjXN8i8mafPFlbxxp9ID1aXrKlqXkuXUk5tvyDTdBrKMqFTKY5+mdrjOBPNyNd\nkJIxfNeQLoTTbwQz2KOYxhT3DlhZWOfmJAnxkpiv2dc/E3V+rrsmAZYnT2V01xs=\n=wJ//\n-----END PGP SIGNATURE-----",
        "payload": "tree 983a507c7b64d16dec06cfb3b6c77906ac2dc5f3\nparent 450893769f7af89fa985c02a8723be43176e60b2\nparent dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445844032 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445844063 +0100\n\nMerge pull request #6878\n\ndca7bd3 doc: Add developer notes about gitignore (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867d6c90b85070644c3458e3e7ed168765523361",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/867d6c90b85070644c3458e3e7ed168765523361",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867d6c90b85070644c3458e3e7ed168765523361/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "450893769f7af89fa985c02a8723be43176e60b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/450893769f7af89fa985c02a8723be43176e60b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/450893769f7af89fa985c02a8723be43176e60b2"
      },
      {
        "sha": "dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dca7bd3152c5c21aa0a2b14aa09d4045ae51dcc5"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 33,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8ad862d84ccd4dcd2e81afbf12a793667b6bbc07",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867d6c90b85070644c3458e3e7ed168765523361/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867d6c90b85070644c3458e3e7ed168765523361/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=867d6c90b85070644c3458e3e7ed168765523361",
        "patch": "@@ -85,9 +85,6 @@ src/test/buildenv.py\n # Resources cpp\n qrc_*.cpp\n \n-# Qt creator\n-*.pro.user\n-\n # Mac specific\n .DS_Store\n build"
      },
      {
        "sha": "7fe292f1f8549ab6ddfdfdf2959c87c536a12375",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/867d6c90b85070644c3458e3e7ed168765523361/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/867d6c90b85070644c3458e3e7ed168765523361/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=867d6c90b85070644c3458e3e7ed168765523361",
        "patch": "@@ -171,3 +171,36 @@ Threads\n - BitcoinMiner : Generates bitcoins (if wallet is enabled).\n \n - Shutdown : Does an orderly shutdown of everything.\n+\n+Ignoring IDE/editor files\n+--------------------------\n+\n+In closed-source environments in which everyone uses the same IDE it is common\n+to add temporary files it produces to the project-wide `.gitignore` file.\n+\n+However, in open source software such as Bitcoin Core, where everyone uses\n+their own editors/IDE/tools, it is less common. Only you know what files your\n+editor produces and this may change from version to version. The canonical way\n+to do this is thus to create your local gitignore. Add this to `~/.gitconfig`:\n+\n+```\n+[core]\n+        excludesfile = /home/.../.gitignore_global\n+```\n+\n+(alternatively, type the command `git config --global core.excludesfile ~/.gitignore_global`\n+on a terminal)\n+\n+Then put your favourite tool's temporary filenames in that file, e.g.\n+```\n+# NetBeans\n+nbproject/\n+```\n+\n+Another option is to create a per-repository excludes file `.git/info/exclude`.\n+These are not committed but apply only to one repository.\n+\n+If a set of tools is used by the build system or scripts the repository (for\n+example, lcov) it is perfectly acceptable to add its files to `.gitignore`\n+and commit them.\n+"
      }
    ]
  },
  {
    "sha": "5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjQyYmIzMmM3MjMxZDMxMTBiZmEyZmUyZjY4M2U5ZWExOGE3NDQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T08:09:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T08:09:33Z"
      },
      "message": "Merge pull request #6813\n\nd80e3cb Support gathering of code coverage data for RPC tests (dexX7)\ne3b5e6c Run extended BitcoinJ tests for coverage based on config (dexX7)\n45d4ff0 Add config option to enable extended RPC tests for code coverage (dexX7)\n8e3a27b Require Python for RPC tests, when using lcov (dexX7)\nd425877 Remove coverage and test related files, when cleaning up (dexX7)\n4d2a926 Ignore coverage data related and temporary test files (dexX7)",
      "tree": {
        "sha": "2fdfba98e157f600e09e7926ff260778d6ba5e64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fdfba98e157f600e09e7926ff260778d6ba5e64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLd+9AAoJEHSBCwEjRsmmjkkH/13oqKA0xJTK2xo+VTbzZNUo\nFuGxGWpcZ1sBVxfmZfzqyUfH4GBriL6c9jS/ORPSp7ojv6FMAbzKOfWSALDDbxnZ\nfMIg69praqIDGEHUtlxB9R3a+IpvEB8JS7XL7Lml6RxeHqSlWCP2CHCdvcT3ny9p\n9xI0aysZeDsCcfE0V+UmOLhb9NeEhpQGyvhqgiItpydQZ6cxXlJKeAdhUtCCUFAU\niScWgsGN1CPzw1YyU6h43fOGX81VVTNvWEuh3PSS74LTrcxBeVh5YsX/JWg775bH\nP2Xa8hwzdLoH5TcAxYId0n6I2FEid31wGguU9EKAF5TBt82lU1hk569XXI2Fj/Y=\n=/t5r\n-----END PGP SIGNATURE-----",
        "payload": "tree 2fdfba98e157f600e09e7926ff260778d6ba5e64\nparent 867d6c90b85070644c3458e3e7ed168765523361\nparent d80e3cbece857b293a4903ef49c4d543bb2cfb7f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445846956 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445846973 +0100\n\nMerge pull request #6813\n\nd80e3cb Support gathering of code coverage data for RPC tests (dexX7)\ne3b5e6c Run extended BitcoinJ tests for coverage based on config (dexX7)\n45d4ff0 Add config option to enable extended RPC tests for code coverage (dexX7)\n8e3a27b Require Python for RPC tests, when using lcov (dexX7)\nd425877 Remove coverage and test related files, when cleaning up (dexX7)\n4d2a926 Ignore coverage data related and temporary test files (dexX7)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "867d6c90b85070644c3458e3e7ed168765523361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867d6c90b85070644c3458e3e7ed168765523361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/867d6c90b85070644c3458e3e7ed168765523361"
      },
      {
        "sha": "d80e3cbece857b293a4903ef49c4d543bb2cfb7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80e3cbece857b293a4903ef49c4d543bb2cfb7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d80e3cbece857b293a4903ef49c4d543bb2cfb7f"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 45,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a8722aa593ac379dea5f29f9f11aabb6442d9d7f",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
        "patch": "@@ -91,6 +91,7 @@ build\n \n #lcov\n *.gcno\n+*.gcda\n /*.info\n test_bitcoin.coverage/\n total.coverage/\n@@ -104,6 +105,9 @@ qa/pull-tester/run-bitcoind-for-test.sh\n qa/pull-tester/tests_config.py\n qa/pull-tester/cache/*\n qa/pull-tester/test.*/*\n+qa/tmp\n+cache/\n+share/BitcoindComparisonTool.jar\n \n !src/leveldb*/Makefile\n "
      },
      {
        "sha": "f0961c64ec04c697275a02b6cfec6f51b5345315",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 14,
        "deletions": 5,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
        "patch": "@@ -39,7 +39,7 @@ OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) $\n \n COVERAGE_INFO = baseline_filtered_combined.info baseline.info block_test.info \\\n   leveldb_baseline.info test_bitcoin_filtered.info total_coverage.info \\\n-  baseline_filtered.info block_test_filtered.info \\\n+  baseline_filtered.info block_test_filtered.info rpc_test.info rpc_test_filtered.info \\\n   leveldb_baseline_filtered.info test_bitcoin_coverage.info test_bitcoin.info\n \n dist-hook:\n@@ -170,19 +170,28 @@ test_bitcoin_filtered.info: test_bitcoin.info\n \n block_test.info: test_bitcoin_filtered.info\n \t$(MKDIR_P) qa/tmp\n-\t-@TIMEOUT=15 qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool 0\n+\t-@TIMEOUT=15 qa/pull-tester/run-bitcoind-for-test.sh $(JAVA) -jar $(JAVA_COMPARISON_TOOL) qa/tmp/compTool $(COMPARISON_TOOL_REORG_TESTS)\n \t$(LCOV) -c -d $(abs_builddir)/src --t BitcoinJBlockTest -o $@\n \t$(LCOV) -z -d $(abs_builddir)/src\n \t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n \n block_test_filtered.info: block_test.info\n \t$(LCOV) -r $< \"/usr/include/*\" -o $@\n \n+rpc_test.info: test_bitcoin_filtered.info\n+\t-@TIMEOUT=15 python qa/pull-tester/rpc-tests.py $(EXTENDED_RPC_TESTS)\n+\t$(LCOV) -c -d $(abs_builddir)/src --t rpc-tests -o $@\n+\t$(LCOV) -z -d $(abs_builddir)/src\n+\t$(LCOV) -z -d $(abs_builddir)/src/leveldb\n+\n+rpc_test_filtered.info: rpc_test.info\n+\t$(LCOV) -r $< \"/usr/include/*\" -o $@\n+\n test_bitcoin_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info\n \t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -o $@\n \n-total_coverage.info:  baseline_filtered_combined.info test_bitcoin_filtered.info block_test_filtered.info\n-\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a block_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n+total_coverage.info: baseline_filtered_combined.info test_bitcoin_filtered.info block_test_filtered.info rpc_test_filtered.info\n+\t$(LCOV) -a baseline_filtered.info -a leveldb_baseline_filtered.info -a test_bitcoin_filtered.info -a block_test_filtered.info -a rpc_test_filtered.info -o $@ | $(GREP) \"\\%\" | $(AWK) '{ print substr($$3,2,50) \"/\" $$5 }' > coverage_percent.txt\n \n test_bitcoin.coverage/.dirstamp:  test_bitcoin_coverage.info\n \t$(GENHTML) -s $< -o $(@D)\n@@ -211,4 +220,4 @@ CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n .INTERMEDIATE: $(COVERAGE_INFO)\n \n clean-local:\n-\trm -rf test_bitcoin.coverage/ total.coverage/ $(OSX_APP)\n+\trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ qa/tmp/ cache/ $(OSX_APP)"
      },
      {
        "sha": "25ace88f3270cd69ea545fbc853185cdd9178e24",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
        "patch": "@@ -58,6 +58,7 @@ AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_PROG(LCOV, lcov)\n AC_PATH_PROG(JAVA, java)\n+AC_PATH_PROG(PYTHON, python)\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n@@ -106,6 +107,11 @@ AC_ARG_ENABLE([comparison-tool-reorg-tests],\n     [use_comparison_tool_reorg_tests=$enableval],\n     [use_comparison_tool_reorg_tests=no])\n \n+AC_ARG_ENABLE([extended-rpc-tests],\n+    AS_HELP_STRING([--enable-extended-rpc-tests],[enable expensive RPC tests when using lcov (default no)]),\n+    [use_extended_rpc_tests=$enableval],\n+    [use_extended_rpc_tests=no])\n+\n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n   [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n@@ -341,6 +347,10 @@ else\n   AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 0)\n fi\n \n+if test x$use_extended_rpc_tests != xno; then\n+  AC_SUBST(EXTENDED_RPC_TESTS, -extended)\n+fi\n+\n if test x$use_lcov = xyes; then\n   if test x$LCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n@@ -351,6 +361,9 @@ if test x$use_lcov = xyes; then\n   if test x$JAVA = x; then\n     AC_MSG_ERROR(\"lcov testing requested but java not found\")\n   fi\n+  if test x$PYTHON = x; then\n+    AC_MSG_ERROR(\"lcov testing requested but python not found\")\n+  fi\n   if test x$GENHTML = x; then\n     AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n   fi"
      },
      {
        "sha": "f35b9dc898143443d2678d30a1d81d47fc68ec1d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5242bb32c7231d3110bfa2fe2f683e9ea18a7444/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
        "patch": "@@ -412,7 +412,19 @@ libbitcoinconsensus_la_CPPFLAGS = $(CRYPTO_CFLAGS) -I$(builddir)/obj -DBUILD_BIT\n endif\n #\n \n-CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a *.gcda *.gcno\n+CLEANFILES = leveldb/libleveldb.a leveldb/libmemenv.a\n+CLEANFILES += *.gcda *.gcno\n+CLEANFILES += compat/*.gcda compat/*.gcno\n+CLEANFILES += consensus/*.gcda consensus/*.gcno\n+CLEANFILES += crypto/*.gcda crypto/*.gcno\n+CLEANFILES += policy/*.gcda policy/*.gcno\n+CLEANFILES += primitives/*.gcda primitives/*.gcno\n+CLEANFILES += script/*.gcda script/*.gcno\n+CLEANFILES += support/*.gcda support/*.gcno\n+CLEANFILES += univalue/*.gcda univalue/*.gcno\n+CLEANFILES += wallet/*.gcda wallet/*.gcno\n+CLEANFILES += wallet/test/*.gcda wallet/test/*.gcno\n+CLEANFILES += zmq/*.gcda zmq/*.gcno\n \n DISTCLEANFILES = obj/build.h\n \n@@ -422,7 +434,7 @@ clean-local:\n \t-$(MAKE) -C leveldb clean\n \t-$(MAKE) -C secp256k1 clean\n \t-$(MAKE) -C univalue clean\n-\trm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno\n+\t-rm -f leveldb/*/*.gcda leveldb/*/*.gcno leveldb/helpers/memenv/*.gcda leveldb/helpers/memenv/*.gcno\n \t-rm -f config.h\n \n .rc.o:"
      }
    ]
  },
  {
    "sha": "10e2eae35c65b7551618a24e15cf068ce215beef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGUyZWFlMzVjNjViNzU1MTYxOGEyNGUxNWNmMDY4Y2UyMTViZWVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-23T06:31:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T08:59:07Z"
      },
      "message": "rpc: Add maxmempool and effective min fee to getmempoolinfo",
      "tree": {
        "sha": "cc2683a07683849a2f5687c622da74bdd6cf1022",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc2683a07683849a2f5687c622da74bdd6cf1022"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10e2eae35c65b7551618a24e15cf068ce215beef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e2eae35c65b7551618a24e15cf068ce215beef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10e2eae35c65b7551618a24e15cf068ce215beef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e2eae35c65b7551618a24e15cf068ce215beef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2c869aef2e717ba61b9335f198322f6a4d1a12d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2c869aef2e717ba61b9335f198322f6a4d1a12d"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0a267e1a161ae3a2dc2bf2ca852523ac56285f5d",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10e2eae35c65b7551618a24e15cf068ce215beef/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10e2eae35c65b7551618a24e15cf068ce215beef/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=10e2eae35c65b7551618a24e15cf068ce215beef",
        "patch": "@@ -772,6 +772,9 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n+    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n \n     return ret;\n }"
      }
    ]
  },
  {
    "sha": "26f5b34e88387a6aabbb886e16532ddbe7dcca92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmY1YjM0ZTg4Mzg3YTZhYWJiYjg4NmUxNjUzMmRkYmU3ZGNjYTky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T09:06:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T09:07:04Z"
      },
      "message": "Merge pull request #6877\n\n10e2eae rpc: Add maxmempool and effective min fee to getmempoolinfo (Wladimir J. van der Laan)",
      "tree": {
        "sha": "7dc72bf51bfbd5d9ec04df549ef047ccd69003f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dc72bf51bfbd5d9ec04df549ef047ccd69003f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26f5b34e88387a6aabbb886e16532ddbe7dcca92",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLe04AAoJEHSBCwEjRsmmt/8IAMS2YaFonDLODNIEeLs6qrX2\n0vveUJnRrvmiUDQ/WrhAY14RCbKuhpJB49MMColEOHlL/k4I3/Ehs8ZYKG/C2Vyf\nUqaiV7nG0f5g6t/VOolVQ5HlrXAlgROH3raW9hcj93qfvAqtNhDFrhNbFTdc4Fyq\nFDkCkiCYy9WVWXoM0zh9JLM/f9Qg4QOPJJ1tQmIm4/Nl/tFrSlKCIiCa9uOg6hk8\nle4DF2QUe3KMxp2D2DJ1vlIM5YRLDeoqVTKDVPXQLUNjrJSfIAIxTvn1tlJwCi9s\n5i03mmRiymXS70gP28HrNTlgHB7JdnAymu/ClsWPYiLOVgz4K9tIb8qcBtVKcmA=\n=XYny\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dc72bf51bfbd5d9ec04df549ef047ccd69003f8\nparent 5242bb32c7231d3110bfa2fe2f683e9ea18a7444\nparent 10e2eae35c65b7551618a24e15cf068ce215beef\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445850406 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445850424 +0100\n\nMerge pull request #6877\n\n10e2eae rpc: Add maxmempool and effective min fee to getmempoolinfo (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26f5b34e88387a6aabbb886e16532ddbe7dcca92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26f5b34e88387a6aabbb886e16532ddbe7dcca92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26f5b34e88387a6aabbb886e16532ddbe7dcca92/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5242bb32c7231d3110bfa2fe2f683e9ea18a7444",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5242bb32c7231d3110bfa2fe2f683e9ea18a7444"
      },
      {
        "sha": "10e2eae35c65b7551618a24e15cf068ce215beef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10e2eae35c65b7551618a24e15cf068ce215beef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10e2eae35c65b7551618a24e15cf068ce215beef"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4786d72a3f2b336ba0594d9be8daec7fd151da79",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26f5b34e88387a6aabbb886e16532ddbe7dcca92/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26f5b34e88387a6aabbb886e16532ddbe7dcca92/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=26f5b34e88387a6aabbb886e16532ddbe7dcca92",
        "patch": "@@ -773,6 +773,9 @@ UniValue mempoolInfoToJSON()\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n     ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n+    size_t maxmempool = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n+    ret.push_back(Pair(\"maxmempool\", (int64_t) maxmempool));\n+    ret.push_back(Pair(\"mempoolminfee\", ValueFromAmount(mempool.GetMinFee(maxmempool).GetFeePerK())));\n \n     return ret;\n }"
      }
    ]
  },
  {
    "sha": "ff057f41aa14fcedc40dd14d70242cf6b88601dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjA1N2Y0MWFhMTRmY2VkYzQwZGQxNGQ3MDI0MmNmNmI4ODYwMWRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T10:32:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T10:32:46Z"
      },
      "message": "Merge pull request #6566\n\ndea8d21 Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints (Mark Friedenbach)\n9d55050 Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations (Mark Friedenbach)",
      "tree": {
        "sha": "825ab51f6d1a3a4246a444a2d05ab815cd6e0d15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/825ab51f6d1a3a4246a444a2d05ab815cd6e0d15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff057f41aa14fcedc40dd14d70242cf6b88601dc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLgFOAAoJEHSBCwEjRsmmShEH/iBLhZYtsqH3JawFkToht+KL\n400ZPAmQH/YyBYt4+d94HpBHI/PCGbFR8vafVmk73H261VLXL7/7m7B/lr0Gsurb\nw4KDiZTuXtB7XAC70yPq3YQnWiRKoyHS6l/+J42MiPXRK9SIYszJF6plWEpbztro\nA5+q8e8JBkISIUQ7/E8T0njntLL5z2s6+g1JKJhazYhzRQvsKddVndSnZG05RcEo\nX32WxnKGlTIomdlwIUdgg7j2rUPCbJ44d53Ne69eO74kADqf87r/lLMQCZ0wVYxH\n7mKKNPENZzB4qvmi9PhNwqhz3giGgjRjt6GQOjwIQDViOvzNQ/fld26bdGEymBk=\n=QJtP\n-----END PGP SIGNATURE-----",
        "payload": "tree 825ab51f6d1a3a4246a444a2d05ab815cd6e0d15\nparent 26f5b34e88387a6aabbb886e16532ddbe7dcca92\nparent dea8d21fc63e9f442299c97010e4740558f4f037\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445855563 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445855566 +0100\n\nMerge pull request #6566\n\ndea8d21 Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints (Mark Friedenbach)\n9d55050 Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations (Mark Friedenbach)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff057f41aa14fcedc40dd14d70242cf6b88601dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff057f41aa14fcedc40dd14d70242cf6b88601dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff057f41aa14fcedc40dd14d70242cf6b88601dc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26f5b34e88387a6aabbb886e16532ddbe7dcca92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26f5b34e88387a6aabbb886e16532ddbe7dcca92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26f5b34e88387a6aabbb886e16532ddbe7dcca92"
      },
      {
        "sha": "dea8d21fc63e9f442299c97010e4740558f4f037",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea8d21fc63e9f442299c97010e4740558f4f037",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dea8d21fc63e9f442299c97010e4740558f4f037"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 58,
      "deletions": 10
    },
    "files": [
      {
        "sha": "6d6ce7e0998e9248b65f4ee7fb47bb36216ed76a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "patch": "@@ -13,4 +13,10 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+/** Flags for LockTime() */\n+enum {\n+    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n+    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n+};\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "499f2c3f767b65f9c282043727ba24f5635eacf1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 5,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "patch": "@@ -650,10 +650,35 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx)\n+bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n-    return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n+\n+    // By convention a negative value for flags indicates that the\n+    // current network-enforced consensus rules should be used. In\n+    // a future soft-fork scenario that would mean checking which\n+    // rules would be enforced for the next block and setting the\n+    // appropriate flags. At the present time no soft-forks are\n+    // scheduled, so no flags are set.\n+    flags = std::max(flags, 0);\n+\n+    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n+    // nLockTime because when IsFinalTx() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // IsFinalTx() with one more than chainActive.Height().\n+    const int nBlockHeight = chainActive.Height() + 1;\n+\n+    // Timestamps on the other hand don't get any special treatment,\n+    // because we can't know what timestamp the next block will have,\n+    // and there aren't timestamp applications where it matters.\n+    // However this changes once median past time-locks are enforced:\n+    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n+                             ? chainActive.Tip()->GetMedianTimePast()\n+                             : GetAdjustedTime();\n+\n+    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -797,7 +822,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx))\n+    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -2723,10 +2748,15 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+        int nLockTimeFlags = 0;\n+        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? pindexPrev->GetMedianTimePast()\n+                                : block.GetBlockTime();\n+        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n+    }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):"
      },
      {
        "sha": "65732d770f8811d9143764f9bf39f319002e3ab3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "patch": "@@ -308,8 +308,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n+ *\n+ * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "053d9cdbc4ecca4fb22f747fb3d2551206f64d3b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "patch": "@@ -148,6 +148,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n+        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n@@ -162,7 +163,12 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->GetTx();\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n+\n+            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                    ? nMedianTimePast\n+                                    : pblock->GetBlockTime();\n+\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n             COrphan* porphan = NULL;"
      },
      {
        "sha": "7027f1402f41a634a51c041f669fb1e21810384f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "patch": "@@ -43,6 +43,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n+/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types"
      },
      {
        "sha": "827525783a36913a3d241804d4f746243032f84c",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff057f41aa14fcedc40dd14d70242cf6b88601dc/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -229,7 +230,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -243,7 +244,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2));\n+    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n@@ -261,7 +262,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDY5OWZjODIxMDQ4YWI5MzE2YjAwMDRlNjU1MmM4ZjFkYzVlNWY0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-26T13:55:17Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-26T13:58:17Z"
      },
      "message": "fix locking issue with new mempool limiting\n\nCurrent master crashes on OSX with an exception: \"boost: mutex lock failed in pthread_mutex_lock: Invalid argument\"",
      "tree": {
        "sha": "96c6d0c6903133255916e568729a5a398d0ce032",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96c6d0c6903133255916e568729a5a398d0ce032"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWLjF5AAoJECnUvLZBb1PsdOkQAKj99j5Ybiedd1meM6rMz9oQ\nIkSR64JPlrX2c24uac3EDOyzsmvYKzC/PoxOhtwpMjAXGf9o1HkhPTh8FO3zOn3h\njrQi/MIJ+eiZM+a5ceIJ7PbI2T1YdGvNSrYPQH9mliqjy1PsBrX/apPxsnOP1EwU\nHrakiu0jR18M1nXWGiz9ehMyZxSz4PKBcFtpvezI9iu1phfoiN9sAs19it8johuP\nUqa6zh1CS0nyZEM4kSweT265L3DktmLzMNwQqSJAMgW3jofCWSU6BwiqP1lHpDer\nIt4vJCNFRn9InwJwC6AfvFnemU24brsDOvfSPRWSDkDZd2BqJemnEaQIi4hRNzNm\naJmr1XRp/AJieiJFLKXTS8lO+e271BhDMHIhu8AxkLLBCE58dLPbm8R75/r40mb+\nJVthnrwcj+B0szv8UuikxH6R+JnqTj4jrai/8thf7MCwuTLhcRx5zBJT+7vu8s/3\n29JI82eFWvO8WosuCMK8h4sRpwF6Uu1ApYgAI7VAYdq4Z3PuL9FPqp6MoGEeJaaL\n5/fMGVfM/X21YJ1FH2uuq5B36cdTa/cNGmoKW/Qp/E5jPnU6Ieaqxjg+rVbgTucz\nybxxtJeg4x/33V2S6ieVsYH02JFwouaAZyhZ0FyFAT6NUFAiilJNM1wZ/5/oySyw\nC2AFxiUxo8LYANzjTSkJ\n=7ZJ7\n-----END PGP SIGNATURE-----",
        "payload": "tree 96c6d0c6903133255916e568729a5a398d0ce032\nparent 867d6c90b85070644c3458e3e7ed168765523361\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1445867717 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1445867897 +0100\n\nfix locking issue with new mempool limiting\n\nCurrent master crashes on OSX with an exception: \"boost: mutex lock failed in pthread_mutex_lock: Invalid argument\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d699fc821048ab9316b0004e6552c8f1dc5e5f4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "867d6c90b85070644c3458e3e7ed168765523361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867d6c90b85070644c3458e3e7ed168765523361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/867d6c90b85070644c3458e3e7ed168765523361"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "efa5c8f7a3eb2742324e3a8932f2183de6be1fef",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d699fc821048ab9316b0004e6552c8f1dc5e5f4/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d699fc821048ab9316b0004e6552c8f1dc5e5f4/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
        "patch": "@@ -309,7 +309,7 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n-    clear();\n+    _clear(); //lock free clear\n \n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n@@ -546,9 +546,8 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     blockSinceLastRollingFeeBump = true;\n }\n \n-void CTxMemPool::clear()\n+void CTxMemPool::_clear()\n {\n-    LOCK(cs);\n     mapLinks.clear();\n     mapTx.clear();\n     mapNextTx.clear();\n@@ -560,6 +559,12 @@ void CTxMemPool::clear()\n     ++nTransactionsUpdated;\n }\n \n+void CTxMemPool::clear()\n+{\n+    LOCK(cs);\n+    _clear();\n+}\n+\n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n     if (!fSanityCheck)"
      },
      {
        "sha": "dedc7ba72c567c938e5023a59ccf35da9f6b8f80",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d699fc821048ab9316b0004e6552c8f1dc5e5f4/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d699fc821048ab9316b0004e6552c8f1dc5e5f4/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
        "patch": "@@ -375,6 +375,7 @@ class CTxMemPool\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n     void clear();\n+    void _clear(); //lock free\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n     unsigned int GetTransactionsUpdated() const;"
      }
    ]
  },
  {
    "sha": "872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzJmZWUzZmNjYzhiMzNiOWFmMGE0MDFiNWY4NWFjNTUwNGI1N2Vi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-02T15:03:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-26T14:37:30Z"
      },
      "message": "Introduce -maxuploadtarget\n\n* -maxuploadtarget can be set in MiB\n* if <limit> - ( time-left-in-24h-cycle / 600 * MAX_BLOCK_SIZE ) has reach, stop serve blocks older than one week and filtered blocks\n* no action if limit has reached, no guarantee that the target will not be  surpassed\n* add outbound limit informations to rpc getnettotals",
      "tree": {
        "sha": "d868b4a0a6b9f9b55882c324afb362d5a1914e20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d868b4a0a6b9f9b55882c324afb362d5a1914e20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWLjqqAAoJECnUvLZBb1PsZWwQAJZQ+5tcBcUYVeO6VlI1sOP0\nnGjew7tzZMtJKJ/6EQeRt861TS8uFdgq2r7ijx+6dzlKe9A/p7QVq1Z/3XksddDO\n5c2nlKLyZtPoBsqQDPLxYLhT0ZRiGwkcx6FRkHwdpT2DLrsOky+eQ0y3tHbZzhYu\nNDPDxAFezYhRlRordlNS0rMFTwyqF1/YxVsUuSjVc8ItMPZskhW/ORV5T8i4Rpej\n0gTthidwd/E2ajbCDMu5HUrlE0g7lWURSbhnzMKU+uAgfwcrvLvV6iqU0nt4MfjC\nPsT7vX3+Ei3teHPrMlgKxTDFeleS7OfaVYgv3ZhY016o8LyQyl0FSrc5G+nMkqLs\nsoviyB7w9QydYqvBzvcqtNcp0o3ALJhyGy5myH4+ZS1IXEjXGsSQoYYdAKJsM7+i\nCV7VWz1jYuZN4Q+sjHAj5qMcObItSUa24K/qy0QycUS3q74JjSBfvQRu7XWdmips\nC44lPIE7LAUx+Fb84wZ1I7k9eJC3jqLr6SgNuuI3xx6YWT0PLvTsRhoDG1OWPQy5\nna185ik7Dlwv2QOAcWsmGEiCu8K/JtoOIb7iZ9Tm+KpiGVg2lS20C2sEG6W/XZ8M\nsvC+Iow7NSi0l4McioofxYVlnYg4hMiuPP21YwqZWT+N1HoskbVdyNS6yvcnJ+vq\n/v2D6s8exGlh8HA1zKlo\n=thWL\n-----END PGP SIGNATURE-----",
        "payload": "tree d868b4a0a6b9f9b55882c324afb362d5a1914e20\nparent 867d6c90b85070644c3458e3e7ed168765523361\nauthor Jonas Schnelli <jonas.schnelli@include7.ch> 1441206207 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1445870250 +0100\n\nIntroduce -maxuploadtarget\n\n* -maxuploadtarget can be set in MiB\n* if <limit> - ( time-left-in-24h-cycle / 600 * MAX_BLOCK_SIZE ) has reach, stop serve blocks older than one week and filtered blocks\n* no action if limit has reached, no guarantee that the target will not be  surpassed\n* add outbound limit informations to rpc getnettotals\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "867d6c90b85070644c3458e3e7ed168765523361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/867d6c90b85070644c3458e3e7ed168765523361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/867d6c90b85070644c3458e3e7ed168765523361"
      }
    ],
    "stats": {
      "total": 144,
      "additions": 144,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0210ac1135d53d36e2aabc0ce79656f941bc0e14",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
        "patch": "@@ -369,6 +369,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -1174,6 +1175,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         RegisterValidationInterface(pzmqNotificationInterface);\n     }\n #endif\n+    if (mapArgs.count(\"-maxuploadtarget\")) {\n+        CNode::SetMaxOutboundTarget(GetArg(\"-maxuploadtarget\", 0)*1024*1024);\n+    }\n \n     // ********************************************************* Step 7: load block chain\n "
      },
      {
        "sha": "26a22ae6fd7cfd7d618410c6a03a6022b22d01ee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
        "patch": "@@ -3805,6 +3805,16 @@ void static ProcessGetData(CNode* pfrom)\n                         }\n                     }\n                 }\n+                // disconnect node in case we have reached the outbound limit for serving historical blocks\n+                static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n+                if (send && CNode::OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) )\n+                {\n+                    LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+\n+                    //disconnect node\n+                    pfrom->fDisconnect = true;\n+                    send = false;\n+                }\n                 // Pruned nodes may have deleted the block, so check whether\n                 // it's available before trying to send.\n                 if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))"
      },
      {
        "sha": "e18e8d0e29aa30a46b931b223137b5b1ab57465d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
        "patch": "@@ -12,6 +12,7 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"crypto/common.h\"\n #include \"hash.h\"\n #include \"primitives/transaction.h\"\n@@ -326,6 +327,11 @@ uint64_t CNode::nTotalBytesSent = 0;\n CCriticalSection CNode::cs_totalBytesRecv;\n CCriticalSection CNode::cs_totalBytesSent;\n \n+uint64_t CNode::nMaxOutboundLimit = 0;\n+uint64_t CNode::nMaxOutboundTotalBytesSentInCycle = 0;\n+uint64_t CNode::nMaxOutboundTimeframe = 60*60*24; //1 day\n+uint64_t CNode::nMaxOutboundCycleStartTime = 0;\n+\n CNode* FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n@@ -2083,6 +2089,94 @@ void CNode::RecordBytesSent(uint64_t bytes)\n {\n     LOCK(cs_totalBytesSent);\n     nTotalBytesSent += bytes;\n+\n+    uint64_t now = GetTime();\n+    if (nMaxOutboundCycleStartTime + nMaxOutboundTimeframe < now)\n+    {\n+        // timeframe expired, reset cycle\n+        nMaxOutboundCycleStartTime = now;\n+        nMaxOutboundTotalBytesSentInCycle = 0;\n+    }\n+\n+    // TODO, exclude whitebind peers\n+    nMaxOutboundTotalBytesSentInCycle += bytes;\n+}\n+\n+void CNode::SetMaxOutboundTarget(uint64_t limit)\n+{\n+    LOCK(cs_totalBytesSent);\n+    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SIZE;\n+    nMaxOutboundLimit = limit;\n+\n+    if (limit < recommendedMinimum)\n+        LogPrintf(\"Max outbound target is very small (%s) and will be overshot. Recommended minimum is %s\\n.\", nMaxOutboundLimit, recommendedMinimum);\n+}\n+\n+uint64_t CNode::GetMaxOutboundTarget()\n+{\n+    LOCK(cs_totalBytesSent);\n+    return nMaxOutboundLimit;\n+}\n+\n+uint64_t CNode::GetMaxOutboundTimeframe()\n+{\n+    LOCK(cs_totalBytesSent);\n+    return nMaxOutboundTimeframe;\n+}\n+\n+uint64_t CNode::GetMaxOutboundTimeLeftInCycle()\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundLimit == 0)\n+        return 0;\n+\n+    if (nMaxOutboundCycleStartTime == 0)\n+        return nMaxOutboundTimeframe;\n+\n+    uint64_t cycleEndTime = nMaxOutboundCycleStartTime + nMaxOutboundTimeframe;\n+    uint64_t now = GetTime();\n+    return (cycleEndTime < now) ? 0 : cycleEndTime - GetTime();\n+}\n+\n+void CNode::SetMaxOutboundTimeframe(uint64_t timeframe)\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundTimeframe != timeframe)\n+    {\n+        // reset measure-cycle in case of changing\n+        // the timeframe\n+        nMaxOutboundCycleStartTime = GetTime();\n+    }\n+    nMaxOutboundTimeframe = timeframe;\n+}\n+\n+bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundLimit == 0)\n+        return false;\n+\n+    if (historicalBlockServingLimit)\n+    {\n+        // keep a large enought buffer to at least relay each block once\n+        uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n+        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SIZE;\n+        if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)\n+            return true;\n+    }\n+    else if (nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit)\n+        return true;\n+\n+    return false;\n+}\n+\n+uint64_t CNode::GetOutboundTargetBytesLeft()\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundLimit == 0)\n+        return 0;\n+\n+    return (nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit) ? 0 : nMaxOutboundLimit - nMaxOutboundTotalBytesSentInCycle;\n }\n \n uint64_t CNode::GetTotalBytesRecv()"
      },
      {
        "sha": "f90b3385afea1f1358d161cd8623c52f938992e0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
        "patch": "@@ -400,6 +400,12 @@ class CNode\n     static uint64_t nTotalBytesRecv;\n     static uint64_t nTotalBytesSent;\n \n+    // outbound limit & stats\n+    static uint64_t nMaxOutboundTotalBytesSentInCycle;\n+    static uint64_t nMaxOutboundCycleStartTime;\n+    static uint64_t nMaxOutboundLimit;\n+    static uint64_t nMaxOutboundTimeframe;\n+\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n@@ -701,6 +707,27 @@ class CNode\n \n     static uint64_t GetTotalBytesRecv();\n     static uint64_t GetTotalBytesSent();\n+\n+    //!set the max outbound target in bytes\n+    static void SetMaxOutboundTarget(uint64_t limit);\n+    static uint64_t GetMaxOutboundTarget();\n+\n+    //!set the timeframe for the max outbound target\n+    static void SetMaxOutboundTimeframe(uint64_t timeframe);\n+    static uint64_t GetMaxOutboundTimeframe();\n+\n+    //!check if the outbound target is reached\n+    // if param historicalBlockServingLimit is set true, the function will\n+    // response true if the limit for serving historical blocks has been reached\n+    static bool OutboundTargetReached(bool historicalBlockServingLimit);\n+\n+    //!response the bytes left in the current max outbound cycle\n+    // in case of no limit, it will always response 0\n+    static uint64_t GetOutboundTargetBytesLeft();\n+\n+    //!response the time in second left in the current max outbound cycle\n+    // in case of no limit, it will always response 0\n+    static uint64_t GetMaxOutboundTimeLeftInCycle();\n };\n \n "
      },
      {
        "sha": "6b4815ebd8fa763a5b4b435c840aa6c54abd6d77",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/872fee3fccc8b33b9af0a401b5f85ac5504b57eb/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
        "patch": "@@ -379,6 +379,15 @@ UniValue getnettotals(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"totalbytesrecv\", CNode::GetTotalBytesRecv()));\n     obj.push_back(Pair(\"totalbytessent\", CNode::GetTotalBytesSent()));\n     obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n+\n+    UniValue outboundLimit(UniValue::VOBJ);\n+    outboundLimit.push_back(Pair(\"timeframe\", CNode::GetMaxOutboundTimeframe()));\n+    outboundLimit.push_back(Pair(\"target\", CNode::GetMaxOutboundTarget()));\n+    outboundLimit.push_back(Pair(\"target_reached\", CNode::OutboundTargetReached(false)));\n+    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !CNode::OutboundTargetReached(true)));\n+    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", CNode::GetOutboundTargetBytesLeft()));\n+    outboundLimit.push_back(Pair(\"time_left_in_cycle\", CNode::GetMaxOutboundTimeLeftInCycle()));\n+    obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "17a073ae0692fe378827e3c4dae01294509e19e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxN2EwNzNhZTA2OTJmZTM3ODgyN2UzYzRkYWUwMTI5NDUwOWUxOWU5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-09-18T19:59:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-26T14:40:38Z"
      },
      "message": "Add RPC test for -maxuploadtarget",
      "tree": {
        "sha": "4560ef6836a8e1556ec4e65aedf573af4e7f3f79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4560ef6836a8e1556ec4e65aedf573af4e7f3f79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/17a073ae0692fe378827e3c4dae01294509e19e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWLjtmAAoJECnUvLZBb1Ps7i8P/1b2BxoAYvAFo3OkjCohF5Qn\nmZUlrbBuimVrFx9vlu7i1/rMH/nwjjkxAugxn5ZG3b4io4/SnCZHyP8uXbsMyM/B\n7km1hDmB6gw4iPSwtbdya2s1ouIc4b7gbw5Dfga2hqX3FUcnHWAf0bVSOa6zs8Bf\nimNtqVodG8MeU1SBa/r04q2fBUP8xMIqraxqURhgXgwowr6iLUHZ3DzXKSI6fB1T\nzegvx43U3mpUzmSRJhq7K/77k82CevATlpKmXjc4mRdg4ijuJCxWmzH4Lgkmtazm\n44wHc5LrDS8uOzEO3tzt0BF5gRar475UFIuSgCkZ83U2nV7zD11tfL+lekXR8EID\na6515mvsA6b+kLqQb2poaEyuNC1UT/kDUxTwNmKfbAiH2Jjhe0krYQyGPIeyLB3p\nnxvbN2x1eLOBYlxYWkbCguIxRe3lGBQYElHowODJwHKrAF7lHL3z7nnRC6ZAQzwZ\n816ynCCAdRSnyLoj0b0gynxcGsmphCQh9QhLaQ+3ZDdunWYoq8h7hXPLB1meUWwB\nstBAsJfO7myaHEZiDskjVyOn+jBKZCfRrlamvQary8IR0mA+FEALDINlKlzfgMyk\nVwP2Rh9+ztsMdZtR/vN1ROx0l6pYulrjn0Wubg9ZMYjz4DsH+Xp8x/UgqB4Fiw85\n6+p4r1WqMCOdua48xL05\n=7HiY\n-----END PGP SIGNATURE-----",
        "payload": "tree 4560ef6836a8e1556ec4e65aedf573af4e7f3f79\nparent 872fee3fccc8b33b9af0a401b5f85ac5504b57eb\nauthor Suhas Daftuar <sdaftuar@chaincode.com> 1442606395 -0400\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1445870438 +0100\n\nAdd RPC test for -maxuploadtarget\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17a073ae0692fe378827e3c4dae01294509e19e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/17a073ae0692fe378827e3c4dae01294509e19e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17a073ae0692fe378827e3c4dae01294509e19e9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/872fee3fccc8b33b9af0a401b5f85ac5504b57eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/872fee3fccc8b33b9af0a401b5f85ac5504b57eb"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 250,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3059fee42662e6010e9056ffcc2894afdaaab38e",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17a073ae0692fe378827e3c4dae01294509e19e9/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17a073ae0692fe378827e3c4dae01294509e19e9/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=17a073ae0692fe378827e3c4dae01294509e19e9",
        "patch": "@@ -84,12 +84,13 @@\n     'keypool.py',\n     'receivedby.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n-#   'script_test.py', #used for manual comparison of 2 binaries\n+#    'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'invalidblockrequest.py',\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n+    'maxuploadtarget.py',\n ]\n \n #Enable ZMQ tests"
      },
      {
        "sha": "67c4a509854c84c487761868c82c5ed5fac0c680",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "added",
        "additions": 248,
        "deletions": 0,
        "changes": 248,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17a073ae0692fe378827e3c4dae01294509e19e9/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17a073ae0692fe378827e3c4dae01294509e19e9/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=17a073ae0692fe378827e3c4dae01294509e19e9",
        "patch": "@@ -0,0 +1,248 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.comptool import wait_until\n+import time\n+\n+'''\n+Test behavior of -maxuploadtarget.\n+\n+* Verify that getdata requests for old blocks (>1week) are dropped\n+if uploadtarget has been reached.\n+* Verify that getdata requests for recent blocks are respecteved even\n+if uploadtarget has been reached.\n+* Verify that the upload counters are reset after 24 hours.\n+'''\n+\n+# TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n+# p2p messages to a node, generating the messages in the main testing logic.\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.create_callback_map()\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n+        self.block_receive_map = {}\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+        self.peer_disconnected = False\n+\n+    def on_inv(self, conn, message):\n+        pass\n+\n+    # Track the last getdata message we receive (used in the test)\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_block(self, conn, message):\n+        message.block.calc_sha256()\n+        try:\n+            self.block_receive_map[message.block.sha256] += 1\n+        except KeyError as e:\n+            self.block_receive_map[message.block.sha256] = 1\n+\n+    # Spin until verack message is received from the node.\n+    # We use this to signal that our test can begin. This\n+    # is called from the testing thread, so it needs to acquire\n+    # the global lock.\n+    def wait_for_verack(self):\n+        def veracked():\n+            return self.verack_received\n+        return wait_until(veracked, timeout=10)\n+\n+    def wait_for_disconnect(self):\n+        def disconnected():\n+            return self.peer_disconnected\n+        return wait_until(disconnected, timeout=10)\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_close(self, conn):\n+        self.peer_disconnected = True\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        def received_pong():\n+            return (self.last_pong.nonce == self.ping_counter)\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        success = wait_until(received_pong, timeout)\n+        self.ping_counter += 1\n+        return success\n+\n+class MaxUploadTest(BitcoinTestFramework):\n+    def __init__(self):\n+        self.utxo = []\n+\n+        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n+        # So we have big transactions and full blocks to fill up our block files\n+        # create one script_pubkey\n+        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n+        for i in xrange (512):\n+            script_pubkey = script_pubkey + \"01\"\n+        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n+        self.txouts = \"81\"\n+        for k in xrange(128):\n+            # add txout value\n+            self.txouts = self.txouts + \"0000000000000000\"\n+            # add length of script_pubkey\n+            self.txouts = self.txouts + \"fd0402\"\n+            # add script_pubkey\n+            self.txouts = self.txouts + script_pubkey\n+ \n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"bitcoind binary to test\")\n+\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self):\n+        # Start a node with maxuploadtarget of 200 MB (/24h)\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-maxuploadtarget=200\", \"-blockmaxsize=999000\"]))\n+\n+    def mine_full_block(self, node, address):\n+        # Want to create a full block\n+        # We'll generate a 66k transaction below, and 14 of them is close to the 1MB block limit\n+        for j in xrange(14):\n+            if len(self.utxo) < 14:\n+                self.utxo = node.listunspent()\n+            inputs=[]\n+            outputs = {}\n+            t = self.utxo.pop()\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            remchange = t[\"amount\"] - Decimal(\"0.001000\")\n+            outputs[address]=remchange\n+            # Create a basic transaction that will send change back to ourself after account for a fee\n+            # And then insert the 128 generated transaction outs in the middle rawtx[92] is where the #\n+            # of txouts is stored and is the only thing we overwrite from the original transaction\n+            rawtx = node.createrawtransaction(inputs, outputs)\n+            newtx = rawtx[0:92]\n+            newtx = newtx + self.txouts\n+            newtx = newtx + rawtx[94:]\n+            # Appears to be ever so slightly faster to sign with SIGHASH_NONE\n+            signresult = node.signrawtransaction(newtx,None,None,\"NONE\")\n+            txid = node.sendrawtransaction(signresult[\"hex\"], True)\n+        # Mine a full sized block which will be these transactions we just created\n+        node.generate(1)\n+\n+    def run_test(self):\n+        # Before we connect anything, we first set the time on the node\n+        # to be in the past, otherwise things break because the CNode\n+        # time counters can't be reset backward after initialization\n+        old_time = int(time.time() - 2*60*60*24*7)\n+        self.nodes[0].setmocktime(old_time)\n+\n+        # Generate some old blocks\n+        self.nodes[0].generate(130)\n+\n+        # test_nodes[0] will only request old blocks\n+        # test_nodes[1] will only request new blocks\n+        # test_nodes[2] will test resetting the counters\n+        test_nodes = []\n+        connections = []\n+\n+        for i in xrange(3):\n+            test_nodes.append(TestNode())\n+            connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n+            test_nodes[i].add_connection(connections[i])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+        [x.wait_for_verack() for x in test_nodes]\n+\n+        # Test logic begins here\n+\n+        # Now mine a big block\n+        self.mine_full_block(self.nodes[0], self.nodes[0].getnewaddress())\n+\n+        # Store the hash; we'll request this later\n+        big_old_block = self.nodes[0].getbestblockhash()\n+        old_block_size = self.nodes[0].getblock(big_old_block, True)['size']\n+        big_old_block = int(big_old_block, 16)\n+\n+        # Advance to two days ago\n+        self.nodes[0].setmocktime(int(time.time()) - 2*60*60*24)\n+\n+        # Mine one more block, so that the prior block looks old\n+        self.mine_full_block(self.nodes[0], self.nodes[0].getnewaddress())\n+\n+        # We'll be requesting this new block too\n+        big_new_block = self.nodes[0].getbestblockhash()\n+        new_block_size = self.nodes[0].getblock(big_new_block)['size']\n+        big_new_block = int(big_new_block, 16)\n+\n+        # test_nodes[0] will test what happens if we just keep requesting the\n+        # the same big old block too many times (expect: disconnect)\n+\n+        getdata_request = msg_getdata()\n+        getdata_request.inv.append(CInv(2, big_old_block))\n+\n+        max_bytes_per_day = 200*1024*1024\n+        max_bytes_available = max_bytes_per_day - 144*1000000\n+        success_count = max_bytes_available / old_block_size\n+        \n+        # 144MB will be reserved for relaying new blocks, so expect this to\n+        # succeed for ~70 tries.\n+        for i in xrange(success_count):\n+            test_nodes[0].send_message(getdata_request)\n+            test_nodes[0].sync_with_ping()\n+            assert_equal(test_nodes[0].block_receive_map[big_old_block], i+1)\n+\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 3)\n+        # At most a couple more tries should succeed (depending on how long \n+        # the test has been running so far).\n+        for i in xrange(3):\n+            test_nodes[0].send_message(getdata_request)\n+        test_nodes[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n+        print \"Peer 0 disconnected after downloading old block too many times\"\n+\n+        # Requesting the current block on test_nodes[1] should succeed indefinitely,\n+        # even when over the max upload target.\n+        # We'll try 200 times\n+        getdata_request.inv = [CInv(2, big_new_block)]\n+        for i in xrange(200):\n+            test_nodes[1].send_message(getdata_request)\n+            test_nodes[1].sync_with_ping()\n+            assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n+\n+        print \"Peer 1 able to repeatedly download new block\"\n+\n+        # But if test_nodes[1] tries for an old block, it gets disconnected too.\n+        getdata_request.inv = [CInv(2, big_old_block)]\n+        test_nodes[1].send_message(getdata_request)\n+        test_nodes[1].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n+        \n+        print \"Peer 1 disconnected after trying to download old block\"\n+\n+        print \"Advancing system time on node to clear counters...\"\n+\n+        # If we advance the time by 24 hours, then the counters should reset,\n+        # and test_nodes[2] should be able to retrieve the old block.\n+        self.nodes[0].setmocktime(int(time.time()))\n+        test_nodes[2].sync_with_ping()\n+        test_nodes[2].send_message(getdata_request)\n+        test_nodes[2].sync_with_ping()\n+        assert_equal(test_nodes[2].block_receive_map[big_old_block], 1)\n+\n+        print \"Peer 2 able to download old block\"\n+\n+        [c.disconnect_node() for c in connections]\n+\n+if __name__ == '__main__':\n+    MaxUploadTest().main()"
      }
    ]
  },
  {
    "sha": "c8322ff7f7544ac38cdc8df89058f434bb1498e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODMyMmZmN2Y3NTQ0YWMzOGNkYzhkZjg5MDU4ZjQzNGJiMTQ5OGU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T16:24:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T16:25:19Z"
      },
      "message": "Merge pull request #6888\n\n143d173 Use BOOST_CHECK_MESSAGE() rather than BOOST_CHECK() in alerts_tests.cpp and initialize strMiscWarning before calling PartitionCheck().\" (Eric Lombrozo)",
      "tree": {
        "sha": "f8e27f0bdda73b79a88877f5ac6f18a8f0fd6008",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8e27f0bdda73b79a88877f5ac6f18a8f0fd6008"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8322ff7f7544ac38cdc8df89058f434bb1498e6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLlPvAAoJEHSBCwEjRsmmJqgIAL8fYsH8whSg31/W9ST1ps6B\nn7MiEdL0fXnzRLO2C68ejVH/oxF0zGANjlo37slEvGTN0XX+cCbldDawyum3DaJw\nCFSwuvroLRkQ1/STas3kTfCg3m6ZHz2tYxm52Q2eEQliFcv48UhcsMckcrXteOCV\n11H8W7+0x6ARMM24nGQsDGu8t+u4AHqvbpBXQJC4c2Afc/BZ178cr1QDF4T0ZiUf\nDxc67+zu4zWGSNLk/0KTlGVmlHRgpc/1TIbsXkCnCIh7eetvKIUWjqqwQdNeMar4\nV2AziZqboCT2vsT9fJW+a1AadWSbUTI4lnmfvTTVWSFN2K6s073NdVYwW1EuDfc=\n=gd+Q\n-----END PGP SIGNATURE-----",
        "payload": "tree f8e27f0bdda73b79a88877f5ac6f18a8f0fd6008\nparent ff057f41aa14fcedc40dd14d70242cf6b88601dc\nparent 143d17396906835c3a3ccd59e202f5327c05f63f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445876690 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445876719 +0100\n\nMerge pull request #6888\n\n143d173 Use BOOST_CHECK_MESSAGE() rather than BOOST_CHECK() in alerts_tests.cpp and initialize strMiscWarning before calling PartitionCheck().\" (Eric Lombrozo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8322ff7f7544ac38cdc8df89058f434bb1498e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8322ff7f7544ac38cdc8df89058f434bb1498e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8322ff7f7544ac38cdc8df89058f434bb1498e6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff057f41aa14fcedc40dd14d70242cf6b88601dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff057f41aa14fcedc40dd14d70242cf6b88601dc"
      },
      {
        "sha": "143d17396906835c3a3ccd59e202f5327c05f63f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/143d17396906835c3a3ccd59e202f5327c05f63f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/143d17396906835c3a3ccd59e202f5327c05f63f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "468eda1c9bbee675d1be6186e7a218966a6bc4e3",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8322ff7f7544ac38cdc8df89058f434bb1498e6/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8322ff7f7544ac38cdc8df89058f434bb1498e6/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=c8322ff7f7544ac38cdc8df89058f434bb1498e6",
        "patch": "@@ -217,10 +217,12 @@ BOOST_AUTO_TEST_CASE(PartitionAlert)\n         // use them\n     }\n \n+    strMiscWarning = \"\";\n+\n     // Test 1: chain with blocks every nPowTargetSpacing seconds,\n     // as normal, no worries:\n     PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n-    BOOST_CHECK(strMiscWarning.empty());\n+    BOOST_CHECK_MESSAGE(strMiscWarning.empty(), strMiscWarning);\n \n     // Test 2: go 3.5 hours without a block, expect a warning:\n     now += 3*60*60+30*60;"
      }
    ]
  },
  {
    "sha": "dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmM1ZWU4MjFlY2RkNzIwYjRkOGVmOWRjOGI2OGQ3Y2QxYjg3ODM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T16:41:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T16:42:00Z"
      },
      "message": "Merge pull request #6621\n\ne04b0b6 added OS X documentation to doc/init.md (Kevin Cooper)\nd4aa54c added org.bitcoin.bitcoind.plist for launchd (OS X) (Kevin Cooper)",
      "tree": {
        "sha": "cf6d863ae51fbce2b1a4fb4411bae41f6cfe53fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf6d863ae51fbce2b1a4fb4411bae41f6cfe53fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLlfYAAoJEHSBCwEjRsmmuJsIAKbvlK/q5mMx3V00Xb7WFYMd\nUaNIcHZaVTKyXl4G1z4goyLKP/ueL6/rer7EOpz91IeGO1KVOSJ7suzxVGXvizkf\n+wyOWDDFQl9ltVBfJPEEe1ZdXsOe7TJ8XuC/92dmoLSg6ZX7cZxFiBS4J33Mfpo8\n6FRCU37B3OW9xJ6xJy2S085Sh/+fCnwhHV34LUuhMhjcPYRUeRqPR4cemrubNkIq\nudh4UakYLyV/nSUifYSLGSGJCpItTRrsJvBqsQTOd0+dALnnqk/X2tqDu2tmgCf4\npFvQP6KL6zEejywJaxGjTXo1GLHZz9jXiDvkUncVeLmKmRSxnDkMZOR/mKNYjvc=\n=QmhN\n-----END PGP SIGNATURE-----",
        "payload": "tree cf6d863ae51fbce2b1a4fb4411bae41f6cfe53fe\nparent c8322ff7f7544ac38cdc8df89058f434bb1498e6\nparent e04b0b6b835483e7052a24b0224a6023e233d049\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445877708 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445877720 +0100\n\nMerge pull request #6621\n\ne04b0b6 added OS X documentation to doc/init.md (Kevin Cooper)\nd4aa54c added org.bitcoin.bitcoind.plist for launchd (OS X) (Kevin Cooper)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8322ff7f7544ac38cdc8df89058f434bb1498e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8322ff7f7544ac38cdc8df89058f434bb1498e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8322ff7f7544ac38cdc8df89058f434bb1498e6"
      },
      {
        "sha": "e04b0b6b835483e7052a24b0224a6023e233d049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e04b0b6b835483e7052a24b0224a6023e233d049",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e04b0b6b835483e7052a24b0224a6023e233d049"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 38,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eb5d30accef8bfc9dfbf7e4b38b0ca5b924fa508",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
        "patch": "@@ -5,6 +5,7 @@ Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n CentOS:  bitcoind.init\n+OS X:    org.bitcoin.bitcoind.plist\n \n have been made available to assist packagers in creating node packages here.\n "
      },
      {
        "sha": "e94cd4466d226a992e2bb2e24d594dcb49b58dac",
        "filename": "contrib/init/org.bitcoin.bitcoind.plist",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839/contrib/init/org.bitcoin.bitcoind.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839/contrib/init/org.bitcoin.bitcoind.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/org.bitcoin.bitcoind.plist?ref=dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
        "patch": "@@ -0,0 +1,15 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>Label</key>\n+\t<string>org.bitcoin.bitcoind</string>\n+\t<key>ProgramArguments</key>\n+\t<array>\n+\t\t<string>/usr/local/bin/bitcoind</string>\n+\t\t<string>-daemon</string>\n+\t</array>\n+\t<key>RunAtLoad</key>\n+\t<true/>\n+</dict>\n+</plist>"
      },
      {
        "sha": "e3db5b05efcd6f93eaf114d731cf090a4882d07f",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 22,
        "deletions": 1,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
        "patch": "@@ -13,8 +13,9 @@ can be found in the contrib/init folder.\n 1. Service User\n ---------------------------------\n \n-All three startup configurations assume the existence of a \"bitcoin\" user\n+All three Linux startup configurations assume the existence of a \"bitcoin\" user\n and group.  They must be created before attempting to use these scripts.\n+The OS X configuration assumes bitcoind will be set up for the current user.\n \n 2. Configuration\n ---------------------------------\n@@ -48,6 +49,8 @@ see `contrib/debian/examples/bitcoin.conf`.\n 3. Paths\n ---------------------------------\n \n+3a) Linux\n+\n All three configurations assume several paths that might need to be adjusted.\n \n Binary:              `/usr/bin/bitcoind`  \n@@ -62,6 +65,13 @@ reasons to make the configuration file and data directory only readable by the\n bitcoin user and group.  Access to bitcoin-cli and other bitcoind rpc clients\n can then be controlled by group membership.\n \n+3b) Mac OS X\n+\n+Binary:              `/usr/local/bin/bitcoind`  \n+Configuration file:  `~/Library/Application Support/Bitcoin/bitcoin.conf`  \n+Data directory:      `~/Library/Application Support/Bitcoin`\n+Lock file:           `~/Library/Application Support/Bitcoin/.lock`\n+\n 4. Installing Service Configuration\n -----------------------------------\n \n@@ -97,6 +107,17 @@ Using this script, you can adjust the path and flags to the bitcoind program by\n setting the BITCOIND and FLAGS environment variables in the file\n /etc/sysconfig/bitcoind. You can also use the DAEMONOPTS environment variable here.\n \n+4e) Mac OS X\n+\n+Copy org.bitcoin.bitcoind.plist into ~/Library/LaunchAgents. Load the launch agent by\n+running `launchctl load ~/Library/LaunchAgents/org.bitcoin.bitcoind.plist`.\n+\n+This Launch Agent will cause bitcoind to start whenever the user logs in.\n+\n+NOTE: This approach is intended for those wanting to run bitcoind as the current user.\n+You will need to modify org.bitcoin.bitcoind.plist if you intend to use it as a\n+Launch Daemon with a dedicated bitcoin user.\n+\n 5. Auto-respawn\n -----------------------------------\n "
      }
    ]
  },
  {
    "sha": "7939164d8985a499f710db2c7ce6aa80cc92d819",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTM5MTY0ZDg5ODVhNDk5ZjcxMGRiMmM3Y2U2YWE4MGNjOTJkODE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T16:46:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T16:54:00Z"
      },
      "message": "Merge pull request #6622\n\n17a073a Add RPC test for -maxuploadtarget (Suhas Daftuar)\n872fee3 Introduce -maxuploadtarget (Jonas Schnelli)",
      "tree": {
        "sha": "b5d423e947f62142d46dcd3b8db09400a5407770",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5d423e947f62142d46dcd3b8db09400a5407770"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7939164d8985a499f710db2c7ce6aa80cc92d819",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLlqoAAoJEHSBCwEjRsmm6eQIALlomwkHknO2U6y4Ug9jGyR2\nAURXF87KTGmsydOLA/d1VddaE/TA3HMLrMR+21jfAJ41uxrkBEb1cwj25msvoIPS\ngoeXKsfmgsycPP67I2m4DWeg7yNBazxiJWv2XQj5icCVTzjR5CAxcdn81e209UAd\nSrWbfDGSa1uRv6FTp6sXYlL2AvspbhEnaT+y0PRvF1VKO3ZTaRybns+Q0EBgN69F\nLzLVobD00yQ4G/8zzwjHEhlfazGm0tLoN8Qa7lfOouqItxNtcJT0ax3v3Ldkfj9o\nM0NvqzSzCRnoSy1QtDsb20Rnv5CBhn2WIIuRuFaLuSOIrpqHYyZ21qd1CoSNcrY=\n=lVzv\n-----END PGP SIGNATURE-----",
        "payload": "tree b5d423e947f62142d46dcd3b8db09400a5407770\nparent dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839\nparent 17a073ae0692fe378827e3c4dae01294509e19e9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445877980 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445878440 +0100\n\nMerge pull request #6622\n\n17a073a Add RPC test for -maxuploadtarget (Suhas Daftuar)\n872fee3 Introduce -maxuploadtarget (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7939164d8985a499f710db2c7ce6aa80cc92d819",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7939164d8985a499f710db2c7ce6aa80cc92d819",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7939164d8985a499f710db2c7ce6aa80cc92d819/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbc5ee821ecdd720b4d8ef9dc8b68d7cd1b87839"
      },
      {
        "sha": "17a073ae0692fe378827e3c4dae01294509e19e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17a073ae0692fe378827e3c4dae01294509e19e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17a073ae0692fe378827e3c4dae01294509e19e9"
      }
    ],
    "stats": {
      "total": 395,
      "additions": 394,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3059fee42662e6010e9056ffcc2894afdaaab38e",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7939164d8985a499f710db2c7ce6aa80cc92d819/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7939164d8985a499f710db2c7ce6aa80cc92d819/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7939164d8985a499f710db2c7ce6aa80cc92d819",
        "patch": "@@ -84,12 +84,13 @@\n     'keypool.py',\n     'receivedby.py',\n #    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n-#   'script_test.py', #used for manual comparison of 2 binaries\n+#    'script_test.py', #used for manual comparison of 2 binaries\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'invalidblockrequest.py',\n     'p2p-acceptblock.py',\n     'mempool_packages.py',\n+    'maxuploadtarget.py',\n ]\n \n #Enable ZMQ tests"
      },
      {
        "sha": "67c4a509854c84c487761868c82c5ed5fac0c680",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "added",
        "additions": 248,
        "deletions": 0,
        "changes": 248,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7939164d8985a499f710db2c7ce6aa80cc92d819/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7939164d8985a499f710db2c7ce6aa80cc92d819/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=7939164d8985a499f710db2c7ce6aa80cc92d819",
        "patch": "@@ -0,0 +1,248 @@\n+#!/usr/bin/env python2\n+#\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+\n+from test_framework.mininode import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+from test_framework.comptool import wait_until\n+import time\n+\n+'''\n+Test behavior of -maxuploadtarget.\n+\n+* Verify that getdata requests for old blocks (>1week) are dropped\n+if uploadtarget has been reached.\n+* Verify that getdata requests for recent blocks are respecteved even\n+if uploadtarget has been reached.\n+* Verify that the upload counters are reset after 24 hours.\n+'''\n+\n+# TestNode: bare-bones \"peer\".  Used mostly as a conduit for a test to sending\n+# p2p messages to a node, generating the messages in the main testing logic.\n+class TestNode(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.create_callback_map()\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n+        self.block_receive_map = {}\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+        self.peer_disconnected = False\n+\n+    def on_inv(self, conn, message):\n+        pass\n+\n+    # Track the last getdata message we receive (used in the test)\n+    def on_getdata(self, conn, message):\n+        self.last_getdata = message\n+\n+    def on_block(self, conn, message):\n+        message.block.calc_sha256()\n+        try:\n+            self.block_receive_map[message.block.sha256] += 1\n+        except KeyError as e:\n+            self.block_receive_map[message.block.sha256] = 1\n+\n+    # Spin until verack message is received from the node.\n+    # We use this to signal that our test can begin. This\n+    # is called from the testing thread, so it needs to acquire\n+    # the global lock.\n+    def wait_for_verack(self):\n+        def veracked():\n+            return self.verack_received\n+        return wait_until(veracked, timeout=10)\n+\n+    def wait_for_disconnect(self):\n+        def disconnected():\n+            return self.peer_disconnected\n+        return wait_until(disconnected, timeout=10)\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    def on_close(self, conn):\n+        self.peer_disconnected = True\n+\n+    # Sync up with the node after delivery of a block\n+    def sync_with_ping(self, timeout=30):\n+        def received_pong():\n+            return (self.last_pong.nonce == self.ping_counter)\n+        self.connection.send_message(msg_ping(nonce=self.ping_counter))\n+        success = wait_until(received_pong, timeout)\n+        self.ping_counter += 1\n+        return success\n+\n+class MaxUploadTest(BitcoinTestFramework):\n+    def __init__(self):\n+        self.utxo = []\n+\n+        # Some pre-processing to create a bunch of OP_RETURN txouts to insert into transactions we create\n+        # So we have big transactions and full blocks to fill up our block files\n+        # create one script_pubkey\n+        script_pubkey = \"6a4d0200\" #OP_RETURN OP_PUSH2 512 bytes\n+        for i in xrange (512):\n+            script_pubkey = script_pubkey + \"01\"\n+        # concatenate 128 txouts of above script_pubkey which we'll insert before the txout for change\n+        self.txouts = \"81\"\n+        for k in xrange(128):\n+            # add txout value\n+            self.txouts = self.txouts + \"0000000000000000\"\n+            # add length of script_pubkey\n+            self.txouts = self.txouts + \"fd0402\"\n+            # add script_pubkey\n+            self.txouts = self.txouts + script_pubkey\n+ \n+    def add_options(self, parser):\n+        parser.add_option(\"--testbinary\", dest=\"testbinary\",\n+                          default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n+                          help=\"bitcoind binary to test\")\n+\n+    def setup_chain(self):\n+        initialize_chain_clean(self.options.tmpdir, 2)\n+\n+    def setup_network(self):\n+        # Start a node with maxuploadtarget of 200 MB (/24h)\n+        self.nodes = []\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\", \"-maxuploadtarget=200\", \"-blockmaxsize=999000\"]))\n+\n+    def mine_full_block(self, node, address):\n+        # Want to create a full block\n+        # We'll generate a 66k transaction below, and 14 of them is close to the 1MB block limit\n+        for j in xrange(14):\n+            if len(self.utxo) < 14:\n+                self.utxo = node.listunspent()\n+            inputs=[]\n+            outputs = {}\n+            t = self.utxo.pop()\n+            inputs.append({ \"txid\" : t[\"txid\"], \"vout\" : t[\"vout\"]})\n+            remchange = t[\"amount\"] - Decimal(\"0.001000\")\n+            outputs[address]=remchange\n+            # Create a basic transaction that will send change back to ourself after account for a fee\n+            # And then insert the 128 generated transaction outs in the middle rawtx[92] is where the #\n+            # of txouts is stored and is the only thing we overwrite from the original transaction\n+            rawtx = node.createrawtransaction(inputs, outputs)\n+            newtx = rawtx[0:92]\n+            newtx = newtx + self.txouts\n+            newtx = newtx + rawtx[94:]\n+            # Appears to be ever so slightly faster to sign with SIGHASH_NONE\n+            signresult = node.signrawtransaction(newtx,None,None,\"NONE\")\n+            txid = node.sendrawtransaction(signresult[\"hex\"], True)\n+        # Mine a full sized block which will be these transactions we just created\n+        node.generate(1)\n+\n+    def run_test(self):\n+        # Before we connect anything, we first set the time on the node\n+        # to be in the past, otherwise things break because the CNode\n+        # time counters can't be reset backward after initialization\n+        old_time = int(time.time() - 2*60*60*24*7)\n+        self.nodes[0].setmocktime(old_time)\n+\n+        # Generate some old blocks\n+        self.nodes[0].generate(130)\n+\n+        # test_nodes[0] will only request old blocks\n+        # test_nodes[1] will only request new blocks\n+        # test_nodes[2] will test resetting the counters\n+        test_nodes = []\n+        connections = []\n+\n+        for i in xrange(3):\n+            test_nodes.append(TestNode())\n+            connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n+            test_nodes[i].add_connection(connections[i])\n+\n+        NetworkThread().start() # Start up network handling in another thread\n+        [x.wait_for_verack() for x in test_nodes]\n+\n+        # Test logic begins here\n+\n+        # Now mine a big block\n+        self.mine_full_block(self.nodes[0], self.nodes[0].getnewaddress())\n+\n+        # Store the hash; we'll request this later\n+        big_old_block = self.nodes[0].getbestblockhash()\n+        old_block_size = self.nodes[0].getblock(big_old_block, True)['size']\n+        big_old_block = int(big_old_block, 16)\n+\n+        # Advance to two days ago\n+        self.nodes[0].setmocktime(int(time.time()) - 2*60*60*24)\n+\n+        # Mine one more block, so that the prior block looks old\n+        self.mine_full_block(self.nodes[0], self.nodes[0].getnewaddress())\n+\n+        # We'll be requesting this new block too\n+        big_new_block = self.nodes[0].getbestblockhash()\n+        new_block_size = self.nodes[0].getblock(big_new_block)['size']\n+        big_new_block = int(big_new_block, 16)\n+\n+        # test_nodes[0] will test what happens if we just keep requesting the\n+        # the same big old block too many times (expect: disconnect)\n+\n+        getdata_request = msg_getdata()\n+        getdata_request.inv.append(CInv(2, big_old_block))\n+\n+        max_bytes_per_day = 200*1024*1024\n+        max_bytes_available = max_bytes_per_day - 144*1000000\n+        success_count = max_bytes_available / old_block_size\n+        \n+        # 144MB will be reserved for relaying new blocks, so expect this to\n+        # succeed for ~70 tries.\n+        for i in xrange(success_count):\n+            test_nodes[0].send_message(getdata_request)\n+            test_nodes[0].sync_with_ping()\n+            assert_equal(test_nodes[0].block_receive_map[big_old_block], i+1)\n+\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 3)\n+        # At most a couple more tries should succeed (depending on how long \n+        # the test has been running so far).\n+        for i in xrange(3):\n+            test_nodes[0].send_message(getdata_request)\n+        test_nodes[0].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n+        print \"Peer 0 disconnected after downloading old block too many times\"\n+\n+        # Requesting the current block on test_nodes[1] should succeed indefinitely,\n+        # even when over the max upload target.\n+        # We'll try 200 times\n+        getdata_request.inv = [CInv(2, big_new_block)]\n+        for i in xrange(200):\n+            test_nodes[1].send_message(getdata_request)\n+            test_nodes[1].sync_with_ping()\n+            assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n+\n+        print \"Peer 1 able to repeatedly download new block\"\n+\n+        # But if test_nodes[1] tries for an old block, it gets disconnected too.\n+        getdata_request.inv = [CInv(2, big_old_block)]\n+        test_nodes[1].send_message(getdata_request)\n+        test_nodes[1].wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n+        \n+        print \"Peer 1 disconnected after trying to download old block\"\n+\n+        print \"Advancing system time on node to clear counters...\"\n+\n+        # If we advance the time by 24 hours, then the counters should reset,\n+        # and test_nodes[2] should be able to retrieve the old block.\n+        self.nodes[0].setmocktime(int(time.time()))\n+        test_nodes[2].sync_with_ping()\n+        test_nodes[2].send_message(getdata_request)\n+        test_nodes[2].sync_with_ping()\n+        assert_equal(test_nodes[2].block_receive_map[big_old_block], 1)\n+\n+        print \"Peer 2 able to download old block\"\n+\n+        [c.disconnect_node() for c in connections]\n+\n+if __name__ == '__main__':\n+    MaxUploadTest().main()"
      },
      {
        "sha": "0210ac1135d53d36e2aabc0ce79656f941bc0e14",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7939164d8985a499f710db2c7ce6aa80cc92d819/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7939164d8985a499f710db2c7ce6aa80cc92d819/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7939164d8985a499f710db2c7ce6aa80cc92d819",
        "patch": "@@ -369,6 +369,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n     strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n         \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+    strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), 0));\n \n #ifdef ENABLE_WALLET\n     strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n@@ -1174,6 +1175,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         RegisterValidationInterface(pzmqNotificationInterface);\n     }\n #endif\n+    if (mapArgs.count(\"-maxuploadtarget\")) {\n+        CNode::SetMaxOutboundTarget(GetArg(\"-maxuploadtarget\", 0)*1024*1024);\n+    }\n \n     // ********************************************************* Step 7: load block chain\n "
      },
      {
        "sha": "e038fe3663f1a0d2673dee4f9991e3f268eb42ec",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7939164d8985a499f710db2c7ce6aa80cc92d819/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7939164d8985a499f710db2c7ce6aa80cc92d819/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7939164d8985a499f710db2c7ce6aa80cc92d819",
        "patch": "@@ -3835,6 +3835,16 @@ void static ProcessGetData(CNode* pfrom)\n                         }\n                     }\n                 }\n+                // disconnect node in case we have reached the outbound limit for serving historical blocks\n+                static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n+                if (send && CNode::OutboundTargetReached(true) && ( ((pindexBestHeader != NULL) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) )\n+                {\n+                    LogPrint(\"net\", \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n+\n+                    //disconnect node\n+                    pfrom->fDisconnect = true;\n+                    send = false;\n+                }\n                 // Pruned nodes may have deleted the block, so check whether\n                 // it's available before trying to send.\n                 if (send && (mi->second->nStatus & BLOCK_HAVE_DATA))"
      },
      {
        "sha": "e18e8d0e29aa30a46b931b223137b5b1ab57465d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7939164d8985a499f710db2c7ce6aa80cc92d819/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7939164d8985a499f710db2c7ce6aa80cc92d819/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7939164d8985a499f710db2c7ce6aa80cc92d819",
        "patch": "@@ -12,6 +12,7 @@\n #include \"addrman.h\"\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n+#include \"consensus/consensus.h\"\n #include \"crypto/common.h\"\n #include \"hash.h\"\n #include \"primitives/transaction.h\"\n@@ -326,6 +327,11 @@ uint64_t CNode::nTotalBytesSent = 0;\n CCriticalSection CNode::cs_totalBytesRecv;\n CCriticalSection CNode::cs_totalBytesSent;\n \n+uint64_t CNode::nMaxOutboundLimit = 0;\n+uint64_t CNode::nMaxOutboundTotalBytesSentInCycle = 0;\n+uint64_t CNode::nMaxOutboundTimeframe = 60*60*24; //1 day\n+uint64_t CNode::nMaxOutboundCycleStartTime = 0;\n+\n CNode* FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n@@ -2083,6 +2089,94 @@ void CNode::RecordBytesSent(uint64_t bytes)\n {\n     LOCK(cs_totalBytesSent);\n     nTotalBytesSent += bytes;\n+\n+    uint64_t now = GetTime();\n+    if (nMaxOutboundCycleStartTime + nMaxOutboundTimeframe < now)\n+    {\n+        // timeframe expired, reset cycle\n+        nMaxOutboundCycleStartTime = now;\n+        nMaxOutboundTotalBytesSentInCycle = 0;\n+    }\n+\n+    // TODO, exclude whitebind peers\n+    nMaxOutboundTotalBytesSentInCycle += bytes;\n+}\n+\n+void CNode::SetMaxOutboundTarget(uint64_t limit)\n+{\n+    LOCK(cs_totalBytesSent);\n+    uint64_t recommendedMinimum = (nMaxOutboundTimeframe / 600) * MAX_BLOCK_SIZE;\n+    nMaxOutboundLimit = limit;\n+\n+    if (limit < recommendedMinimum)\n+        LogPrintf(\"Max outbound target is very small (%s) and will be overshot. Recommended minimum is %s\\n.\", nMaxOutboundLimit, recommendedMinimum);\n+}\n+\n+uint64_t CNode::GetMaxOutboundTarget()\n+{\n+    LOCK(cs_totalBytesSent);\n+    return nMaxOutboundLimit;\n+}\n+\n+uint64_t CNode::GetMaxOutboundTimeframe()\n+{\n+    LOCK(cs_totalBytesSent);\n+    return nMaxOutboundTimeframe;\n+}\n+\n+uint64_t CNode::GetMaxOutboundTimeLeftInCycle()\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundLimit == 0)\n+        return 0;\n+\n+    if (nMaxOutboundCycleStartTime == 0)\n+        return nMaxOutboundTimeframe;\n+\n+    uint64_t cycleEndTime = nMaxOutboundCycleStartTime + nMaxOutboundTimeframe;\n+    uint64_t now = GetTime();\n+    return (cycleEndTime < now) ? 0 : cycleEndTime - GetTime();\n+}\n+\n+void CNode::SetMaxOutboundTimeframe(uint64_t timeframe)\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundTimeframe != timeframe)\n+    {\n+        // reset measure-cycle in case of changing\n+        // the timeframe\n+        nMaxOutboundCycleStartTime = GetTime();\n+    }\n+    nMaxOutboundTimeframe = timeframe;\n+}\n+\n+bool CNode::OutboundTargetReached(bool historicalBlockServingLimit)\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundLimit == 0)\n+        return false;\n+\n+    if (historicalBlockServingLimit)\n+    {\n+        // keep a large enought buffer to at least relay each block once\n+        uint64_t timeLeftInCycle = GetMaxOutboundTimeLeftInCycle();\n+        uint64_t buffer = timeLeftInCycle / 600 * MAX_BLOCK_SIZE;\n+        if (buffer >= nMaxOutboundLimit || nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit - buffer)\n+            return true;\n+    }\n+    else if (nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit)\n+        return true;\n+\n+    return false;\n+}\n+\n+uint64_t CNode::GetOutboundTargetBytesLeft()\n+{\n+    LOCK(cs_totalBytesSent);\n+    if (nMaxOutboundLimit == 0)\n+        return 0;\n+\n+    return (nMaxOutboundTotalBytesSentInCycle >= nMaxOutboundLimit) ? 0 : nMaxOutboundLimit - nMaxOutboundTotalBytesSentInCycle;\n }\n \n uint64_t CNode::GetTotalBytesRecv()"
      },
      {
        "sha": "f90b3385afea1f1358d161cd8623c52f938992e0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7939164d8985a499f710db2c7ce6aa80cc92d819/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7939164d8985a499f710db2c7ce6aa80cc92d819/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7939164d8985a499f710db2c7ce6aa80cc92d819",
        "patch": "@@ -400,6 +400,12 @@ class CNode\n     static uint64_t nTotalBytesRecv;\n     static uint64_t nTotalBytesSent;\n \n+    // outbound limit & stats\n+    static uint64_t nMaxOutboundTotalBytesSentInCycle;\n+    static uint64_t nMaxOutboundCycleStartTime;\n+    static uint64_t nMaxOutboundLimit;\n+    static uint64_t nMaxOutboundTimeframe;\n+\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n@@ -701,6 +707,27 @@ class CNode\n \n     static uint64_t GetTotalBytesRecv();\n     static uint64_t GetTotalBytesSent();\n+\n+    //!set the max outbound target in bytes\n+    static void SetMaxOutboundTarget(uint64_t limit);\n+    static uint64_t GetMaxOutboundTarget();\n+\n+    //!set the timeframe for the max outbound target\n+    static void SetMaxOutboundTimeframe(uint64_t timeframe);\n+    static uint64_t GetMaxOutboundTimeframe();\n+\n+    //!check if the outbound target is reached\n+    // if param historicalBlockServingLimit is set true, the function will\n+    // response true if the limit for serving historical blocks has been reached\n+    static bool OutboundTargetReached(bool historicalBlockServingLimit);\n+\n+    //!response the bytes left in the current max outbound cycle\n+    // in case of no limit, it will always response 0\n+    static uint64_t GetOutboundTargetBytesLeft();\n+\n+    //!response the time in second left in the current max outbound cycle\n+    // in case of no limit, it will always response 0\n+    static uint64_t GetMaxOutboundTimeLeftInCycle();\n };\n \n "
      },
      {
        "sha": "6b4815ebd8fa763a5b4b435c840aa6c54abd6d77",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7939164d8985a499f710db2c7ce6aa80cc92d819/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7939164d8985a499f710db2c7ce6aa80cc92d819/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=7939164d8985a499f710db2c7ce6aa80cc92d819",
        "patch": "@@ -379,6 +379,15 @@ UniValue getnettotals(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"totalbytesrecv\", CNode::GetTotalBytesRecv()));\n     obj.push_back(Pair(\"totalbytessent\", CNode::GetTotalBytesSent()));\n     obj.push_back(Pair(\"timemillis\", GetTimeMillis()));\n+\n+    UniValue outboundLimit(UniValue::VOBJ);\n+    outboundLimit.push_back(Pair(\"timeframe\", CNode::GetMaxOutboundTimeframe()));\n+    outboundLimit.push_back(Pair(\"target\", CNode::GetMaxOutboundTarget()));\n+    outboundLimit.push_back(Pair(\"target_reached\", CNode::OutboundTargetReached(false)));\n+    outboundLimit.push_back(Pair(\"serve_historical_blocks\", !CNode::OutboundTargetReached(true)));\n+    outboundLimit.push_back(Pair(\"bytes_left_in_cycle\", CNode::GetOutboundTargetBytesLeft()));\n+    outboundLimit.push_back(Pair(\"time_left_in_cycle\", CNode::GetMaxOutboundTimeLeftInCycle()));\n+    obj.push_back(Pair(\"uploadtarget\", outboundLimit));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmJjN2MzMTRmNGViYjFlN2ZlODgyYTBhMmFhZTVhNTY1NWYyOTcy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-10-23T17:07:36Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-10-26T19:05:37Z"
      },
      "message": "Add option for microsecond precision in debug.log",
      "tree": {
        "sha": "962a5af7cb1251b5166915474c80d4b54277fc52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/962a5af7cb1251b5166915474c80d4b54277fc52"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d78a880900c15c7a28ae81e6632090f25fea7fce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d78a880900c15c7a28ae81e6632090f25fea7fce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d78a880900c15c7a28ae81e6632090f25fea7fce"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 22,
      "deletions": 3
    },
    "files": [
      {
        "sha": "bfa9c95e3bc63761d9d9aa2063a729ad53eeb53f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
        "patch": "@@ -428,6 +428,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n     if (showDebug)\n     {\n+        strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n         strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", 15));\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n@@ -726,6 +727,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Set this early so that parameter interactions go to console\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");"
      },
      {
        "sha": "e8514a2ef0ea6902cfbee58b579dc40dbc1d9e0b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
        "patch": "@@ -108,6 +108,7 @@ bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n bool fLogTimestamps = false;\n+bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n bool fLogIPs = false;\n volatile bool fReopenDebugLog = false;\n CTranslationInterface translationInterface;\n@@ -263,9 +264,13 @@ static std::string LogTimestampStr(const std::string &str, bool *fStartedNewLine\n     if (!fLogTimestamps)\n         return str;\n \n-    if (*fStartedNewLine)\n-        strStamped =  DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()) + ' ' + str;\n-    else\n+    if (*fStartedNewLine) {\n+        int64_t nTimeMicros = GetLogTimeMicros();\n+        strStamped = DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nTimeMicros/1000000);\n+        if (fLogTimeMicros)\n+            strStamped += strprintf(\".%06d\", nTimeMicros%1000000);\n+        strStamped += ' ' + str;\n+    } else\n         strStamped = str;\n \n     if (!str.empty() && str[str.size()-1] == '\\n')"
      },
      {
        "sha": "b2779fe782d0dedddc34380972ad230a6b11a73c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
        "patch": "@@ -28,6 +28,8 @@\n #include <boost/signals2/signal.hpp>\n #include <boost/thread/exceptions.hpp>\n \n+static const bool DEFAULT_LOGTIMEMICROS = false;\n+\n /** Signals for translation. */\n class CTranslationInterface\n {\n@@ -44,6 +46,7 @@ extern bool fPrintToDebugLog;\n extern bool fServer;\n extern std::string strMiscWarning;\n extern bool fLogTimestamps;\n+extern bool fLogTimeMicros;\n extern bool fLogIPs;\n extern volatile bool fReopenDebugLog;\n extern CTranslationInterface translationInterface;"
      },
      {
        "sha": "3202c47f1dc92ce9bc596957fe0d020af0c5b4da",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
        "patch": "@@ -40,6 +40,14 @@ int64_t GetTimeMicros()\n             boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n }\n \n+/** Return a time useful for the debug log */\n+int64_t GetLogTimeMicros()\n+{\n+    if (nMockTime) return nMockTime*1000000;\n+\n+    return GetTimeMicros();\n+}\n+\n void MilliSleep(int64_t n)\n {\n "
      },
      {
        "sha": "241b5211e90526c466127f7afc79a19af864c9b1",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
        "patch": "@@ -12,6 +12,7 @@\n int64_t GetTime();\n int64_t GetTimeMillis();\n int64_t GetTimeMicros();\n+int64_t GetLogTimeMicros();\n void SetMockTime(int64_t nMockTimeIn);\n void MilliSleep(int64_t n);\n "
      }
    ]
  },
  {
    "sha": "2b625510d37471d4eaf5f99c2311afbdcae448c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjYyNTUxMGQzNzQ3MWQ0ZWFmNWY5OWMyMzExYWZiZGNhZTQ0OGMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T20:04:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-26T20:04:41Z"
      },
      "message": "Merge pull request #6881\n\n7bbc7c3 Add option for microsecond precision in debug.log (Suhas Daftuar)",
      "tree": {
        "sha": "77cd9b5aaeefcd75409dab1811a7b6985744276b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77cd9b5aaeefcd75409dab1811a7b6985744276b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b625510d37471d4eaf5f99c2311afbdcae448c2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLodZAAoJEHSBCwEjRsmmNyIH/j54h9Vjp22jHvcC8O0pN+2X\nkGcRB+EDwY8rm7zKvWIAIVRT5lp3VwlBMsOPLfpthy2TLB4esAMJ4rJIvjBWo2AL\nj+lHtU8YGrFqjCMWDLfKzS4w9LbzJ171E4KvY4HehBS91Jko/RmvBU9A3/F6eKYU\n3xzApqZpR+NGgbxCMJ4m23k9fxQhG4KWWrYEBfakJcK6ZemOgFP+g6ir/xNwpT30\nWNG9hE/9e4Ds/UbpI39plHUMPrVe931/WNFjglcreBPXy2tDz4fiAP0Z7R63mCCr\nRAxfvie64mMvjalE+vaMZLFNpY9qQgp3SOjQOlPi3pt+7ggTnqkgJIuUud4NJSM=\n=H4sY\n-----END PGP SIGNATURE-----",
        "payload": "tree 77cd9b5aaeefcd75409dab1811a7b6985744276b\nparent 7939164d8985a499f710db2c7ce6aa80cc92d819\nparent 7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445889873 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445889881 +0100\n\nMerge pull request #6881\n\n7bbc7c3 Add option for microsecond precision in debug.log (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b625510d37471d4eaf5f99c2311afbdcae448c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b625510d37471d4eaf5f99c2311afbdcae448c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b625510d37471d4eaf5f99c2311afbdcae448c2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7939164d8985a499f710db2c7ce6aa80cc92d819",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7939164d8985a499f710db2c7ce6aa80cc92d819",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7939164d8985a499f710db2c7ce6aa80cc92d819"
      },
      {
        "sha": "7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bbc7c314f4ebb1e7fe882a0a2aae5a5655f2972"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 22,
      "deletions": 3
    },
    "files": [
      {
        "sha": "920fc3069ecd87f00cb46540cd845baec45ec480",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2b625510d37471d4eaf5f99c2311afbdcae448c2",
        "patch": "@@ -431,6 +431,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n     if (showDebug)\n     {\n+        strUsage += HelpMessageOpt(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS));\n         strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default: %u)\", 15));\n         strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(\"Require high priority for relaying free or low-fee transactions (default: %u)\", 1));\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> entries (default: %u)\", 50000));\n@@ -728,6 +729,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     // Set this early so that parameter interactions go to console\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\", true);\n+    fLogTimeMicros = GetBoolArg(\"-logtimemicros\", DEFAULT_LOGTIMEMICROS);\n     fLogIPs = GetBoolArg(\"-logips\", false);\n \n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");"
      },
      {
        "sha": "e8514a2ef0ea6902cfbee58b579dc40dbc1d9e0b",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=2b625510d37471d4eaf5f99c2311afbdcae448c2",
        "patch": "@@ -108,6 +108,7 @@ bool fDaemon = false;\n bool fServer = false;\n string strMiscWarning;\n bool fLogTimestamps = false;\n+bool fLogTimeMicros = DEFAULT_LOGTIMEMICROS;\n bool fLogIPs = false;\n volatile bool fReopenDebugLog = false;\n CTranslationInterface translationInterface;\n@@ -263,9 +264,13 @@ static std::string LogTimestampStr(const std::string &str, bool *fStartedNewLine\n     if (!fLogTimestamps)\n         return str;\n \n-    if (*fStartedNewLine)\n-        strStamped =  DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()) + ' ' + str;\n-    else\n+    if (*fStartedNewLine) {\n+        int64_t nTimeMicros = GetLogTimeMicros();\n+        strStamped = DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nTimeMicros/1000000);\n+        if (fLogTimeMicros)\n+            strStamped += strprintf(\".%06d\", nTimeMicros%1000000);\n+        strStamped += ' ' + str;\n+    } else\n         strStamped = str;\n \n     if (!str.empty() && str[str.size()-1] == '\\n')"
      },
      {
        "sha": "b2779fe782d0dedddc34380972ad230a6b11a73c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=2b625510d37471d4eaf5f99c2311afbdcae448c2",
        "patch": "@@ -28,6 +28,8 @@\n #include <boost/signals2/signal.hpp>\n #include <boost/thread/exceptions.hpp>\n \n+static const bool DEFAULT_LOGTIMEMICROS = false;\n+\n /** Signals for translation. */\n class CTranslationInterface\n {\n@@ -44,6 +46,7 @@ extern bool fPrintToDebugLog;\n extern bool fServer;\n extern std::string strMiscWarning;\n extern bool fLogTimestamps;\n+extern bool fLogTimeMicros;\n extern bool fLogIPs;\n extern volatile bool fReopenDebugLog;\n extern CTranslationInterface translationInterface;"
      },
      {
        "sha": "3202c47f1dc92ce9bc596957fe0d020af0c5b4da",
        "filename": "src/utiltime.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/utiltime.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/utiltime.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.cpp?ref=2b625510d37471d4eaf5f99c2311afbdcae448c2",
        "patch": "@@ -40,6 +40,14 @@ int64_t GetTimeMicros()\n             boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n }\n \n+/** Return a time useful for the debug log */\n+int64_t GetLogTimeMicros()\n+{\n+    if (nMockTime) return nMockTime*1000000;\n+\n+    return GetTimeMicros();\n+}\n+\n void MilliSleep(int64_t n)\n {\n "
      },
      {
        "sha": "241b5211e90526c466127f7afc79a19af864c9b1",
        "filename": "src/utiltime.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/utiltime.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b625510d37471d4eaf5f99c2311afbdcae448c2/src/utiltime.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utiltime.h?ref=2b625510d37471d4eaf5f99c2311afbdcae448c2",
        "patch": "@@ -12,6 +12,7 @@\n int64_t GetTime();\n int64_t GetTimeMillis();\n int64_t GetTimeMicros();\n+int64_t GetLogTimeMicros();\n void SetMockTime(int64_t nMockTimeIn);\n void MilliSleep(int64_t n);\n "
      }
    ]
  },
  {
    "sha": "38369dda325d704041e7eb43222cdd5c23daa7c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODM2OWRkYTMyNWQ3MDQwNDFlN2ViNDMyMjJjZGQ1YzIzZGFhN2Mz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-27T07:42:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-27T07:48:12Z"
      },
      "message": "Merge pull request #6889\n\n0d699fc fix locking issue with new mempool limiting (Jonas Schnelli)",
      "tree": {
        "sha": "06e7c2f32145e6620c61f9a504436efbf99969b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06e7c2f32145e6620c61f9a504436efbf99969b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/38369dda325d704041e7eb43222cdd5c23daa7c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWLyw8AAoJEHSBCwEjRsmmC8AH/R8OlrWb/v4jJ15CjsYXVBhg\nQxBkuM8myeMYJyLXygE6Ap1VeFaTvpXCai2uM3yfFVHQO9tcnIGCstccyVd8geFl\njERWjCbBBr47alT1WfDCkYb/EBiCNxaVt9s151j+Qiw9Y8Qmj0e0K3rSi1Q30zI8\nzEMsPMBYYuZ2hMRezT5Xzae2oYX6wsZglejadqOvCtlgt8i4GEs5t7aEZu9UzxkP\npoqMVFjQdLlxQ17aLwekM0ihmo/1mE5/t1jqmJHYZmIBKjTotPs9KM60NolDJ2EO\nGcbhQJrmnOeVKe6idiULutrNeN79p8v7yOSvQgqv7u+0DBu+4Q9BQ+9w3RfX3Tc=\n=n7ZU\n-----END PGP SIGNATURE-----",
        "payload": "tree 06e7c2f32145e6620c61f9a504436efbf99969b5\nparent 2b625510d37471d4eaf5f99c2311afbdcae448c2\nparent 0d699fc821048ab9316b0004e6552c8f1dc5e5f4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445931744 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445932092 +0100\n\nMerge pull request #6889\n\n0d699fc fix locking issue with new mempool limiting (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38369dda325d704041e7eb43222cdd5c23daa7c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/38369dda325d704041e7eb43222cdd5c23daa7c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38369dda325d704041e7eb43222cdd5c23daa7c3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b625510d37471d4eaf5f99c2311afbdcae448c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b625510d37471d4eaf5f99c2311afbdcae448c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b625510d37471d4eaf5f99c2311afbdcae448c2"
      },
      {
        "sha": "0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d699fc821048ab9316b0004e6552c8f1dc5e5f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d699fc821048ab9316b0004e6552c8f1dc5e5f4"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 9,
      "deletions": 3
    },
    "files": [
      {
        "sha": "efa5c8f7a3eb2742324e3a8932f2183de6be1fef",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38369dda325d704041e7eb43222cdd5c23daa7c3/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38369dda325d704041e7eb43222cdd5c23daa7c3/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=38369dda325d704041e7eb43222cdd5c23daa7c3",
        "patch": "@@ -309,7 +309,7 @@ void CTxMemPoolEntry::UpdateState(int64_t modifySize, CAmount modifyFee, int64_t\n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     nTransactionsUpdated(0)\n {\n-    clear();\n+    _clear(); //lock free clear\n \n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n@@ -546,9 +546,8 @@ void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned i\n     blockSinceLastRollingFeeBump = true;\n }\n \n-void CTxMemPool::clear()\n+void CTxMemPool::_clear()\n {\n-    LOCK(cs);\n     mapLinks.clear();\n     mapTx.clear();\n     mapNextTx.clear();\n@@ -560,6 +559,12 @@ void CTxMemPool::clear()\n     ++nTransactionsUpdated;\n }\n \n+void CTxMemPool::clear()\n+{\n+    LOCK(cs);\n+    _clear();\n+}\n+\n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n     if (!fSanityCheck)"
      },
      {
        "sha": "dedc7ba72c567c938e5023a59ccf35da9f6b8f80",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/38369dda325d704041e7eb43222cdd5c23daa7c3/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/38369dda325d704041e7eb43222cdd5c23daa7c3/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=38369dda325d704041e7eb43222cdd5c23daa7c3",
        "patch": "@@ -375,6 +375,7 @@ class CTxMemPool\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n     void clear();\n+    void _clear(); //lock free\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n     unsigned int GetTransactionsUpdated() const;"
      }
    ]
  },
  {
    "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjNiM2NkZWU0OTdiOGExZDdjNmE3Mjc5ZTdiYjEzNDM1NTI3YjYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-27T10:57:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-27T10:58:35Z"
      },
      "message": "Merge pull request #6464\n\n2d8c49d Clean up tx prioritization when conflict mined (Casey Rodarmor)",
      "tree": {
        "sha": "0300f0b3a5d31e5e963025b1caf27c480bd69871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0300f0b3a5d31e5e963025b1caf27c480bd69871"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWL1jbAAoJEHSBCwEjRsmm2VwH/joO+Bppjgv6ydZOBGGq3MUn\n09klaZh3RBm3PuWMnmMJYJzBELABbq1cZ+aTfAH50xzIOBTRjLb3hYQy1AIpbCn+\nU+yF5DzpOz63/Z36ArZbBWHeL5nJoExqpV3bOY2sbFGiT74jWhKpd2yoXwKiBX8a\nfmtIpJqCQqNx0pBSt8IMW9u7fdJ9xZ3Rz2Rna7Fq01ubcIPdRDcExvxgbbvnKhcW\nUrC0m/Ou7Ytb1GsiYhwIFFGJQtKdXkgt+aDDh9B8pUIchU91Q8Fp8L3xbk8giTvC\nX0Co8toMSndOEWonjjhWdr/950p3HL/1cW3XQKPCfJO/ptefATgMbxqjavAw7xs=\n=W+/p\n-----END PGP SIGNATURE-----",
        "payload": "tree 0300f0b3a5d31e5e963025b1caf27c480bd69871\nparent 38369dda325d704041e7eb43222cdd5c23daa7c3\nparent 2d8c49d126bf2551ef0268f314ab75932fa96510\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1445943441 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1445943515 +0100\n\nMerge pull request #6464\n\n2d8c49d Clean up tx prioritization when conflict mined (Casey Rodarmor)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38369dda325d704041e7eb43222cdd5c23daa7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38369dda325d704041e7eb43222cdd5c23daa7c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38369dda325d704041e7eb43222cdd5c23daa7c3"
      },
      {
        "sha": "2d8c49d126bf2551ef0268f314ab75932fa96510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d8c49d126bf2551ef0268f314ab75932fa96510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d8c49d126bf2551ef0268f314ab75932fa96510"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "47e8de5361705c9e01e498ab7e015d2f424af72d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "patch": "@@ -512,6 +512,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n             if (txConflict != tx)\n             {\n                 remove(txConflict, removed, true);\n+                ClearPrioritisation(txConflict.GetHash());\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "ad5aae15b40dcbdbfc08221e615f06b030b92334",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDVhYWUxNWI0MGRjYmRiZmMwODIyMWU2MTVmMDZiMDMwYjkyMzM0",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-27T16:39:42Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-27T16:39:42Z"
      },
      "message": "constify missing catch cases\n\n- ensure all missing catch cases are constant where possible",
      "tree": {
        "sha": "731356d063c6e597c24b9a877e8f9dcff92af31e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/731356d063c6e597c24b9a877e8f9dcff92af31e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad5aae15b40dcbdbfc08221e615f06b030b92334",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad5aae15b40dcbdbfc08221e615f06b030b92334",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad5aae15b40dcbdbfc08221e615f06b030b92334",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad5aae15b40dcbdbfc08221e615f06b030b92334/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9564573657e11a941b69f7d567b6141f5ad01089",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=ad5aae15b40dcbdbfc08221e615f06b030b92334",
        "patch": "@@ -94,7 +94,7 @@ static bool AppInitRPC(int argc, char* argv[])\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(ChainNameFromCommandLine());\n-    } catch(std::exception &e) {\n+    } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }"
      },
      {
        "sha": "48033cd8ad9323663ac18c660167c38dff4ee3f1",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=ad5aae15b40dcbdbfc08221e615f06b030b92334",
        "patch": "@@ -37,7 +37,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n-    } catch(std::exception &e) {\n+    } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }"
      },
      {
        "sha": "addf0e6a26b4041d40de38c0e33ba45da162d9f1",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=ad5aae15b40dcbdbfc08221e615f06b030b92334",
        "patch": "@@ -109,7 +109,7 @@ bool AppInit(int argc, char* argv[])\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(ChainNameFromCommandLine());\n-        } catch(std::exception &e) {\n+        } catch (const std::exception& e) {\n             fprintf(stderr, \"Error: %s\\n\", e.what());\n             return false;\n         }"
      },
      {
        "sha": "1d31ab8ae5c879a9d545b850f327c55932606636",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad5aae15b40dcbdbfc08221e615f06b030b92334/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=ad5aae15b40dcbdbfc08221e615f06b030b92334",
        "patch": "@@ -104,7 +104,7 @@ class CDBIterator\n         try {\n             CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n             ssKey >> key;\n-        } catch(std::exception &e) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n         return true;\n@@ -120,7 +120,7 @@ class CDBIterator\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n             ssValue.Xor(*obfuscate_key);\n             ssValue >> value;\n-        } catch(std::exception &e) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n         return true;"
      }
    ]
  },
  {
    "sha": "214de7e54c282f7d452d9b628baaa94e6af51727",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTRkZTdlNTRjMjgyZjdkNDUyZDliNjI4YmFhYTk0ZTZhZjUxNzI3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-27T16:44:13Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2015-10-27T16:44:13Z"
      },
      "message": "[Trivial] ensure minimal header conventions\n\n- ensure header namespaces and end comments are correct\n- add missing header end comments\n- ensure minimal formatting (add newlines etc.)",
      "tree": {
        "sha": "50cefc7b0e721304ce1094063f3b2384f8219b02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50cefc7b0e721304ce1094063f3b2384f8219b02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/214de7e54c282f7d452d9b628baaa94e6af51727",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/214de7e54c282f7d452d9b628baaa94e6af51727",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/214de7e54c282f7d452d9b628baaa94e6af51727",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/214de7e54c282f7d452d9b628baaa94e6af51727/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6ee3cdc27a49e82622defb77dd2f35106b76c162",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/214de7e54c282f7d452d9b628baaa94e6af51727/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/214de7e54c282f7d452d9b628baaa94e6af51727/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=214de7e54c282f7d452d9b628baaa94e6af51727",
        "patch": "@@ -1,7 +1,9 @@\n // Copyright (c) 2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"bench.h\"\n+\n #include <iostream>\n #include <sys/time.h>\n "
      },
      {
        "sha": "5ce13c642b59b9528c47145e3215bc5f754b16f8",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/214de7e54c282f7d452d9b628baaa94e6af51727/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/214de7e54c282f7d452d9b628baaa94e6af51727/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=214de7e54c282f7d452d9b628baaa94e6af51727",
        "patch": "@@ -1,8 +1,16 @@\n // Copyright (c) 2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef BITCOIN_BENCH_H\n-#define BITCOIN_BENCH_H\n+\n+#ifndef BITCOIN_BENCH_BENCH_H\n+#define BITCOIN_BENCH_BENCH_H\n+\n+#include <map>\n+#include <string>\n+\n+#include <boost/function.hpp>\n+#include <boost/preprocessor/cat.hpp>\n+#include <boost/preprocessor/stringize.hpp>\n \n // Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n // framework (see https://github.com/google/benchmark)\n@@ -25,14 +33,7 @@ static void CODE_TO_TIME(benchmark::State& state)\n BENCHMARK(CODE_TO_TIME);\n \n  */\n-\n-\n-#include <boost/function.hpp>\n-#include <boost/preprocessor/cat.hpp>\n-#include <boost/preprocessor/stringize.hpp>\n-#include <map>\n-#include <string>\n-\n+ \n namespace benchmark {\n \n     class State {\n@@ -68,4 +69,4 @@ namespace benchmark {\n #define BENCHMARK(n) \\\n     benchmark::BenchRunner BOOST_PP_CAT(bench_, BOOST_PP_CAT(__LINE__, n))(BOOST_PP_STRINGIZE(n), n);\n \n-#endif // BITCOIN_BENCH_H\n+#endif // BITCOIN_BENCH_BENCH_H"
      },
      {
        "sha": "e96c5bf0383a0be5c6b8a8e1fc8b733f6964fa71",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/214de7e54c282f7d452d9b628baaa94e6af51727/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/214de7e54c282f7d452d9b628baaa94e6af51727/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=214de7e54c282f7d452d9b628baaa94e6af51727",
        "patch": "@@ -121,4 +121,4 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n \n }\n \n-#endif\n+#endif // BITCOIN_MEMUSAGE_H"
      },
      {
        "sha": "f269e8d4762e441f5c73134ddfee6b044070f307",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/214de7e54c282f7d452d9b628baaa94e6af51727/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/214de7e54c282f7d452d9b628baaa94e6af51727/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=214de7e54c282f7d452d9b628baaa94e6af51727",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_POLICY_H\n-#define BITCOIN_POLICY_H\n+#ifndef BITCOIN_POLICY_POLICY_H\n+#define BITCOIN_POLICY_POLICY_H\n \n #include \"consensus/consensus.h\"\n #include \"script/interpreter.h\"\n@@ -59,4 +59,4 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-#endif // BITCOIN_POLICY_H\n+#endif // BITCOIN_POLICY_POLICY_H"
      }
    ]
  },
  {
    "sha": "0be387a536f03a1dd0df66176fc354fb0895be48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmUzODdhNTM2ZjAzYTFkZDBkZjY2MTc2ZmMzNTRmYjA4OTViZTQ4",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-10-27T19:11:56Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2015-10-27T19:11:56Z"
      },
      "message": "unittest: fix test for null tx input\n\nUpdate the unittest that is meant to catch a transaction that is invalid\nbecause it has a null input.  The old test failed not because of that\nbut because it was considered a coinbase with too large script.  This is\nalready checked with a different test, though.\n\nThe new test is *not* a coinbase since it has two inputs, but one of\nthem is null.  This really checks the corresponding code path in\nCheckTransaction.",
      "tree": {
        "sha": "367ba013479e7fb457f28458a49008ae777bc67f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/367ba013479e7fb457f28458a49008ae777bc67f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0be387a536f03a1dd0df66176fc354fb0895be48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be387a536f03a1dd0df66176fc354fb0895be48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0be387a536f03a1dd0df66176fc354fb0895be48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be387a536f03a1dd0df66176fc354fb0895be48/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cc059e814fdf1100b6277636727fc9400f0e54d1",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be387a536f03a1dd0df66176fc354fb0895be48/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be387a536f03a1dd0df66176fc354fb0895be48/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=0be387a536f03a1dd0df66176fc354fb0895be48",
        "patch": "@@ -64,9 +64,13 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"]],\n \"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff655151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Null txin\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"HASH160 0x14 0x02dae7dbbda56097959cba59b1989dd3e47937bf EQUAL\"]],\n-\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6e49304602210086f39e028e46dafa8e1e3be63906465f4cf038fbe5ed6403dc3e74ae876e6431022100c4625c675cfc5c7e3a0e0d7eaec92ac24da20c73a88eb40d09253e51ac6def5201232103a183ddc41e84753aca47723c965d1b5c8b0e2b537963518355e6dd6cf8415e50acffffffff010000000000000000015100000000\", \"P2SH\"],\n+[\"Null txin, but without being a coinbase (because there are two inputs)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"],\n+  [\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000020000000000000000000000000000000000000000000000000000000000000000ffffffff00ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015100000000\", \"P2SH\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"],\n+  [\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff00ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n [\"Same as the transactions in valid with one input SIGHASH_ALL and one SIGHASH_ANYONECANPAY, but we set the _ANYONECANPAY sequence number, invalidating the SIGHASH_ALL signature\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x21 0x035e7f0d4d0841bcd56c39337ed086b1a633ee770c1ffdd94ac552a95ac2ce0efc CHECKSIG\"],"
      }
    ]
  },
  {
    "sha": "3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTE4N2YyYWNkYjY5Y2ViOTdhODc1ZjhmM2JmMzYxYzExZWY1NDNj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-10-27T19:36:06Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-10-27T19:36:06Z"
      },
      "message": "Fix BIP65 p2p test\n\ncreate_coinbase() was being called with the wrong arguments",
      "tree": {
        "sha": "bc3fa71d91511896b7acbbd8bcf1235c77d95991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc3fa71d91511896b7acbbd8bcf1235c77d95991"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e187f2acdb69ceb97a875f8f3bf361c11ef543c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9ca5c69f162d23752337d0408996b3d54df90751",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e187f2acdb69ceb97a875f8f3bf361c11ef543c/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e187f2acdb69ceb97a875f8f3bf361c11ef543c/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
        "patch": "@@ -67,32 +67,35 @@ def create_transaction(self, node, coinbase, to_address, amount):\n     def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n+        height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = time.time()\n \n         ''' 98 more version 3 blocks '''\n         test_blocks = []\n         for i in xrange(98):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 749 version 4 blocks '''\n         test_blocks = []\n         for i in xrange(749):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         '''\n@@ -104,7 +107,7 @@ def get_tests(self):\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -113,6 +116,7 @@ def get_tests(self):\n \n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         '''\n@@ -124,7 +128,7 @@ def get_tests(self):\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -136,35 +140,38 @@ def get_tests(self):\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in xrange(199):\n-            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 old version block, should be invalid '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()"
      }
    ]
  },
  {
    "sha": "298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOThlMDQwYmNhMGFhZDYyYjYxNmExZDNlNjZlMWU0NGQyYjliZDNh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-21T21:23:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T00:05:32Z"
      },
      "message": "Fix chainstate serialized_size computation",
      "tree": {
        "sha": "4057b56ca2f37870d9897beb978fc127bf236d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4057b56ca2f37870d9897beb978fc127bf236d13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7bfe362855cadcfc9ea8801167eb1cf099f5d5d",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         assert_equal(res[u'transactions'], 200)\n         assert_equal(res[u'height'], 200)\n         assert_equal(res[u'txouts'], 200)\n-        assert_equal(res[u'bytes_serialized'], 13000),\n+        assert_equal(res[u'bytes_serialized'], 13924),\n         assert_equal(len(res[u'bestblock']), 64)\n         assert_equal(len(res[u'hash_serialized']), 64)\n "
      },
      {
        "sha": "cd76c0155cfd25be8c9dc5c59257cef514bb8875",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
        "patch": "@@ -121,7 +121,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n+                stats.nSerializedSize += 32 + pcursor->GetValueSize();\n                 ss << VARINT(0);\n             } else {\n                 return error(\"CCoinsViewDB::GetStats() : unable to read value\");"
      }
    ]
  },
  {
    "sha": "6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTgwMGMyYjQxYWNhN2U0YTIyZDM0MWYxZTZkY2Y3MjJkOTRlNmUx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "matt@mattcorallo.com",
        "date": "2015-10-28T00:06:13Z"
      },
      "committer": {
        "name": "Matt Corallo (laptop - only while traveling)",
        "email": "matt@mattcorallo.com",
        "date": "2015-10-28T00:06:13Z"
      },
      "message": "Add Pieter's new PGP key to verify-commits/trusted-keys",
      "tree": {
        "sha": "d3b3943fb5a30ffd7415c5cccc2b7e406e195f5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3b3943fb5a30ffd7415c5cccc2b7e406e195f5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "no_user",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCAAGBQJWMBF1AAoJECr+by8oF5mAPi0H/0GzoykiSYLtKvv0YApZrcv2\nGrnM6lLCzwkdyEpNRrHu4GaiWsSzbzhXgWtZ9ads3XmLC3/xp3RZLyHr906HO7zS\nUVJbhaHQSm5mb35U2nsTOHAn8M8Pl+0IvTl32aIFg/gdzc4iG9sYNmWUzzqTumPS\noc2l7b2wyCJ6uHWKtiUvPeiqf/+7bUzx4nBtDAmuvWH4TD4+0EPNrtZGKQFqEDXB\nrgfO4Fv/WWSpAaA5uHy6SSPfrqqUFrMTwhgqXEwNoE8gYslUlXfcbEtxIb9nDAkm\n6O2w/EHYE2/qrn7TF1Ft0O7G2oN+SROJvV88dGD165g209eFpa2UeDdcxt1qCEU=\n=0A5Z\n-----END PGP SIGNATURE-----",
        "payload": "tree d3b3943fb5a30ffd7415c5cccc2b7e406e195f5e\nparent 1d94b72019e31066b33947af5709383b8075e43a\nauthor Matt Corallo <matt@mattcorallo.com> 1445990773 -0700\ncommitter Matt Corallo (laptop - only while traveling) <matt@mattcorallo.com> 1445990773 -0700\n\nAdd Pieter's new PGP key to verify-commits/trusted-keys\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "1d94b72019e31066b33947af5709383b8075e43a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d94b72019e31066b33947af5709383b8075e43a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d94b72019e31066b33947af5709383b8075e43a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a0dce7a8a527303445fc530a64e327b697006a6a",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1",
        "patch": "@@ -3,3 +3,4 @@\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8\n AF8BE07C7049F3A26B239D5325B3083201782B2F\n 81291FA67D2C379A006A053FEAB5AF94D9E9ABE7\n+133EAC179436F14A5CF1B794860FEB804E669320"
      }
    ]
  },
  {
    "sha": "4252cd09fd729b0d8a9d53c0308f54b3a798c372",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjUyY2QwOWZkNzI5YjBkOGE5ZDUzYzAzMDhmNTRiM2E3OThjMzcy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T00:19:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:03:15Z"
      },
      "message": "Update to my new key",
      "tree": {
        "sha": "0ba333f7851fd2fd6ba97c86779620b4ba0c0955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ba333f7851fd2fd6ba97c86779620b4ba0c0955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4252cd09fd729b0d8a9d53c0308f54b3a798c372",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4252cd09fd729b0d8a9d53c0308f54b3a798c372",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4252cd09fd729b0d8a9d53c0308f54b3a798c372",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4252cd09fd729b0d8a9d53c0308f54b3a798c372/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a1930ddee905f688dcb3a189a88e1317e7006a0f",
        "filename": "contrib/gitian-downloader/sipa-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4252cd09fd729b0d8a9d53c0308f54b3a798c372/contrib/gitian-downloader/sipa-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4252cd09fd729b0d8a9d53c0308f54b3a798c372/contrib/gitian-downloader/sipa-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/sipa-key.pgp?ref=4252cd09fd729b0d8a9d53c0308f54b3a798c372"
      }
    ]
  },
  {
    "sha": "d0badb916e511da158c3626142745dfb14bd68e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGJhZGI5MTZlNTExZGExNThjMzYyNjE0Mjc0NWRmYjE0YmQ2OGUw",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-28T01:06:47Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-28T01:07:03Z"
      },
      "message": "Merge pull request #6865\n\n298e040 Fix chainstate serialized_size computation (Pieter Wuille)",
      "tree": {
        "sha": "4057b56ca2f37870d9897beb978fc127bf236d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4057b56ca2f37870d9897beb978fc127bf236d13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0badb916e511da158c3626142745dfb14bd68e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCAAGBQJWMB+3AAoJEOq1r5TZ6avnL3UQAJhP1JjCtYonaNEtsHNSjyJn\nZYb/H0kwtfxsytFWoSOG4zov0Ih1UZpNEHo5JQ/3ALfWo4b84i5gVTabBI2RRdpR\nIIjy0X7GZWHkzddOFs3IMfpbH3LWfgqvc9Uikxoy+XGbWZ/SEqVqFR66fUnK7vu+\npcF2zwGW9JYvVSA7OQnz4R4xUvrBIHpQ9wGpaWZwNnr7o32T23UqY+L60YYnkHZc\nyy3KyrnwQsBE3LjEETBNKy7ruSIGRnOthk/tbR0HNtOJE/jLCPyqkheaU87MIkYU\n/c85ADXwislYzi+01ajt0rx5UU2QB3TVNzXwCQEVAI6CfjIfNtYIJwZyJfL9Ip6l\n565PNXi9gyZsi7I7L++k2O3H/TLneM6+xYoT7q42cG5P2no7yDbfqX19/Diygq6l\nvGie6Ib/lr0tiPg18XS3WJmRqoQSNpjYAuTH+d8RxJmVkLOR3/O8AEt+8JZIVKq/\nUoq+nj7NGgLs/CbnDL7rV8FKm0dbHSZn2/rQAmGXMSjTB8nHCMmh2KmszYdvPX4J\nPFg1dYcbEJEJeTdqciqvvQGVC8DRw+jncwdjSvnKvSUU4QuMoskOWqImaJzEmDFT\n6x6TzpwCYN0TQZJpaAbfbblJgwj69NvzHcjEHwp2lDlhyrytf1MpyHwk2fB3s4dP\nDET6nlYJg+cXGxP40HSU\n=mPpO\n-----END PGP SIGNATURE-----",
        "payload": "tree 4057b56ca2f37870d9897beb978fc127bf236d13\nparent 8f3b3cdee497b8a1d7c6a7279e7bb13435527b60\nparent 298e040bca0aad62b616a1d3e66e1e44d2b9bd3a\nauthor Gregory Maxwell <greg@xiph.org> 1445994407 -0700\ncommitter Gregory Maxwell <greg@xiph.org> 1445994423 -0700\n\nMerge pull request #6865\n\n298e040 Fix chainstate serialized_size computation (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0badb916e511da158c3626142745dfb14bd68e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0badb916e511da158c3626142745dfb14bd68e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0badb916e511da158c3626142745dfb14bd68e0/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      },
      {
        "sha": "298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/298e040bca0aad62b616a1d3e66e1e44d2b9bd3a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "b7bfe362855cadcfc9ea8801167eb1cf099f5d5d",
        "filename": "qa/rpc-tests/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0badb916e511da158c3626142745dfb14bd68e0/qa/rpc-tests/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0badb916e511da158c3626142745dfb14bd68e0/qa/rpc-tests/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/blockchain.py?ref=d0badb916e511da158c3626142745dfb14bd68e0",
        "patch": "@@ -43,7 +43,7 @@ def run_test(self):\n         assert_equal(res[u'transactions'], 200)\n         assert_equal(res[u'height'], 200)\n         assert_equal(res[u'txouts'], 200)\n-        assert_equal(res[u'bytes_serialized'], 13000),\n+        assert_equal(res[u'bytes_serialized'], 13924),\n         assert_equal(len(res[u'bestblock']), 64)\n         assert_equal(len(res[u'hash_serialized']), 64)\n "
      },
      {
        "sha": "cd76c0155cfd25be8c9dc5c59257cef514bb8875",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0badb916e511da158c3626142745dfb14bd68e0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0badb916e511da158c3626142745dfb14bd68e0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d0badb916e511da158c3626142745dfb14bd68e0",
        "patch": "@@ -121,7 +121,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n                         nTotalAmount += out.nValue;\n                     }\n                 }\n-                stats.nSerializedSize += 32 + pcursor->GetKeySize();\n+                stats.nSerializedSize += 32 + pcursor->GetValueSize();\n                 ss << VARINT(0);\n             } else {\n                 return error(\"CCoinsViewDB::GetStats() : unable to read value\");"
      }
    ]
  },
  {
    "sha": "93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzUyMWE0ZjU2Y2U3NTBmM2Q4ZmQ4OWUxMjQxYzk5NDRhZDUzZDdj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:19:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:21:47Z"
      },
      "message": "Merge pull request #6875\n\n6e800c2 Add Pieter's new PGP key to verify-commits/trusted-keys (Matt Corallo)\n1d94b72 Whitelist commits signed with Pieter's now-revoked key (Matt Corallo)\n27252b7 Fix pre-push-hook regexes (Matt Corallo)",
      "tree": {
        "sha": "9f1ab7d75ae55176ff0cd53876f19393891b0dd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f1ab7d75ae55176ff0cd53876f19393891b0dd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWMCMrAAoJENuhpnN5oakx/y0QAIQ8sRdA95STQ7SCTFbrSdJ1\nGRyOdCqbfkOKSBA9h/VjnZz3zhJUORAWMuvpWK73coRV3U+TxGy6RS/y+Z7MhdhI\n3YFGYRSVC+r0QljO7jewXzLcck1xlUCRsMimPH4tKlcWt89c6VPWy7Jsfwfxv82v\nDJNlKqcqJkwRJnpiKE13Gl7tNDCKZ23PVlj2W9pGVCtjzr1+KIe1kERnUfaPnnSV\nVjQ4Zg038uJBlAqzAX1bXx4/QmduxGQNQPzDK5LZAHmhPK9aNH2setEjSbP9Wgw2\n4Sv7HCe4VricyvzH3SoY4SahynfWObBwxqM44ibXRVjyLMGbOo4cxDZ3xC+hAVmZ\njICOs2fIMFgwMRYkHaNSOzNx3CoZwmZkjj2+g9YWZinXzZlTpsRCIBVjJPUfJA5w\nelI2Ehgrgwga0swAN0N10C1+qrJQb25rOc15XqfqFkRbCMTlO7xVAuAmkIhbVJMO\nk5R0ShlrX3KlWOO3yXjsMP5lasIJg4JNBHM+f3+nQ+ldhJR/6ypgHo2uVCno7qcw\nYd+ApIhsAInNs1uIml3x60GJtCAa542Q7TQWOSTxCnqOqFXaF1oPWlLwDhPZB2XZ\nGUotdHzpEOg9uOyruwXjWjNBQd/063Hx2s6svbo+cT5jaDOpJudNnsaCEleghk6W\nEJGyc+V1tWgZRwBoNuTp\n=T+2l\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f1ab7d75ae55176ff0cd53876f19393891b0dd4\nparent d0badb916e511da158c3626142745dfb14bd68e0\nparent 6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1445995182 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1445995307 +0100\n\nMerge pull request #6875\n\n6e800c2 Add Pieter's new PGP key to verify-commits/trusted-keys (Matt Corallo)\n1d94b72 Whitelist commits signed with Pieter's now-revoked key (Matt Corallo)\n27252b7 Fix pre-push-hook regexes (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0badb916e511da158c3626142745dfb14bd68e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0badb916e511da158c3626142745dfb14bd68e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0badb916e511da158c3626142745dfb14bd68e0"
      },
      {
        "sha": "6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e800c2b41aca7e4a22d341f1e6dcf722d94e6e1"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 36,
      "deletions": 3
    },
    "files": [
      {
        "sha": "31aeb8f3d38bb6004a891cea0aa04ed51a4a5973",
        "filename": "contrib/verify-commits/allow-revsig-commits",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/allow-revsig-commits",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/allow-revsig-commits",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/allow-revsig-commits?ref=93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
        "patch": "@@ -0,0 +1,2 @@\n+586a29253dabec3ca0f1ccba9091daabd16b8411\n+eddaba7b5692288087a926da5733e86b47274e4e"
      },
      {
        "sha": "0218b82e11dd3bf8cc1fb8f5d24f4704c9a2cfc0",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
        "patch": "@@ -1,15 +1,33 @@\n #!/bin/sh\n INPUT=$(</dev/stdin)\n VALID=false\n+REVSIG=false\n IFS=$'\\n'\n for LINE in $(echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null); do\n-\tcase \"$LINE\" in \"[GNUPG:] VALIDSIG\"*)\n+\tcase \"$LINE\" in\n+\t\"[GNUPG:] VALIDSIG \"*)\n \t\twhile read KEY; do\n \t\t\tcase \"$LINE\" in \"[GNUPG:] VALIDSIG $KEY \"*) VALID=true;; esac\n \t\tdone < ./contrib/verify-commits/trusted-keys\n+\t\t;;\n+\t\"[GNUPG:] REVKEYSIG \"*)\n+\t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n+\t\twhile read KEY; do\n+\t\t\tcase \"$LINE\" in \"[GNUPG:] REVKEYSIG ${KEY:24:40} \"*)\n+\t\t\t\tREVSIG=true\n+\t\t\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${KEY:24:40} \"\n+\t\t\t\t;;\n+\t\t\tesac\n+\t\tdone < ./contrib/verify-commits/trusted-keys\n+\t\t;;\n \tesac\n done\n if ! $VALID; then\n \texit 1\n fi\n-echo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n+if $VALID && $REVSIG; then\n+\techo \"$INPUT\" | gpg --trust-model always \"$@\" | grep \"\\[GNUPG:\\] \\(NEWSIG\\|SIG_ID\\|VALIDSIG\\)\" 2>/dev/null\n+\techo \"$GOODREVSIG\"\n+else\n+\techo \"$INPUT\" | gpg --trust-model always \"$@\" 2>/dev/null\n+fi"
      },
      {
        "sha": "c57222818ab8a3deb8a78a338e6792f204f97c91",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
        "patch": "@@ -1,5 +1,5 @@\n #!/bin/bash\n-if ! [[ \"$2\" =~ [git@]?[www.]?github.com[:|/]bitcoin/bitcoin[.git]? ]]; then\n+if ! [[ \"$2\" =~ ^(git@)?(www.)?github.com(:|/)bitcoin/bitcoin(.git)?$ ]]; then\n     exit 0\n fi\n "
      },
      {
        "sha": "a0dce7a8a527303445fc530a64e327b697006a6a",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
        "patch": "@@ -3,3 +3,4 @@\n 01CDF4627A3B88AAE4A571C87588242FBE38D3A8\n AF8BE07C7049F3A26B239D5325B3083201782B2F\n 81291FA67D2C379A006A053FEAB5AF94D9E9ABE7\n+133EAC179436F14A5CF1B794860FEB804E669320"
      },
      {
        "sha": "9ba781008a6585699bdf515a52e340f9c56d10a8",
        "filename": "contrib/verify-commits/verify-commits.sh",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/verify-commits.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93521a4f56ce750f3d8fd89e1241c9944ad53d7c/contrib/verify-commits/verify-commits.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/verify-commits.sh?ref=93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
        "patch": "@@ -7,11 +7,23 @@ git log \"$DIR\"\n \n VERIFIED_ROOT=$(cat \"${DIR}/trusted-git-root\")\n \n+IS_REVSIG_ALLOWED () {\n+\twhile read LINE; do\n+\t\t[ \"$LINE\" = \"$1\" ] && return 0\n+\tdone < \"${DIR}/allow-revsig-commits\"\n+\treturn 1\n+}\n+\n HAVE_FAILED=false\n IS_SIGNED () {\n \tif [ $1 = $VERIFIED_ROOT ]; then\n \t\treturn 0;\n \tfi\n+\tif IS_REVSIG_ALLOWED \"$1\"; then\n+\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=1\n+\telse\n+\t\texport BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG=0\n+\tfi\n \tif ! git -c \"gpg.program=${DIR}/gpg.sh\" verify-commit $1 > /dev/null 2>&1; then\n \t\treturn 1;\n \tfi"
      }
    ]
  },
  {
    "sha": "8756c986420ccd8302c396e0db8f5434dd41c57a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzU2Yzk4NjQyMGNjZDgzMDJjMzk2ZTBkYjhmNTQzNGRkNDFjNTdh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:22:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:23:20Z"
      },
      "message": "Merge pull request #6895\n\n4252cd0 Update to my new key (Pieter Wuille)",
      "tree": {
        "sha": "bd233a750d3a8ed3d54798fe7b2e34068aba50d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd233a750d3a8ed3d54798fe7b2e34068aba50d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8756c986420ccd8302c396e0db8f5434dd41c57a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWMCOIAAoJENuhpnN5oakxxFMQAJEM/4SItRhxbXOrYCYUAjS1\ni2jgy+aJZeoSQfU3jqPMODGVVbm0MTVk7JQukReGtOUlIm4fzMO21iJkwbZDAD1B\n/EvWlOAMzf+v9nv4qozKjbMQNpghGmrRIC6LdQTjM2MrsHbBNNr+aUgK/U4MyPmh\noyKD0ayxlUB17LMVCdyc3A6pEpsKdBYoSrPJn3BIqpLLxnZj+8m3RIM2t//3AU6O\nn8n4/f92hYC8kzBf2P1+AbHyFQaf39WXRBjebe2afIaMOcKjao51lVikBuCw0q+4\nXD4AfrNV15Kg2JBU+FbcTR+G//DJHGQzUaBl399ntuNnp3FZO5RwZklAMyn+gQK2\nhv5+8n1unkGKrGImr2g8EUAnkTKwLIXupVDQsRX0zzbgXyDkz6Q8q43ZZJfR1qep\nGMana7KC5kNe9CUoWnLcHFQBWenEYysQA4oNtLP9uNLjGiMnlEhVy/csa4chG9kD\nHyHy4SLcq03woU2EVn9qUW6zqXr/EoEi8/2UegA3HxiJirlNsmC8tJsqJfw4sJRs\niiigfA2jMMM68v3/q5a089/IYlUFwv+Q8bkyhj/XXJ5BSJhB0Zrj6sHgicu3HSfc\ncUx2Y9zU+yZjltN7sC3dBb79keTQXC/gUQZ4ZDP4MXbZBAkiuDVysX9rphDS4cqt\nKBhaKUFjRB0zyuj7S8dx\n=ykhB\n-----END PGP SIGNATURE-----",
        "payload": "tree bd233a750d3a8ed3d54798fe7b2e34068aba50d0\nparent 93521a4f56ce750f3d8fd89e1241c9944ad53d7c\nparent 4252cd09fd729b0d8a9d53c0308f54b3a798c372\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1445995342 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1445995400 +0100\n\nMerge pull request #6895\n\n4252cd0 Update to my new key (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8756c986420ccd8302c396e0db8f5434dd41c57a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8756c986420ccd8302c396e0db8f5434dd41c57a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8756c986420ccd8302c396e0db8f5434dd41c57a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93521a4f56ce750f3d8fd89e1241c9944ad53d7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93521a4f56ce750f3d8fd89e1241c9944ad53d7c"
      },
      {
        "sha": "4252cd09fd729b0d8a9d53c0308f54b3a798c372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4252cd09fd729b0d8a9d53c0308f54b3a798c372",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4252cd09fd729b0d8a9d53c0308f54b3a798c372"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a1930ddee905f688dcb3a189a88e1317e7006a0f",
        "filename": "contrib/gitian-downloader/sipa-key.pgp",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8756c986420ccd8302c396e0db8f5434dd41c57a/contrib/gitian-downloader/sipa-key.pgp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8756c986420ccd8302c396e0db8f5434dd41c57a/contrib/gitian-downloader/sipa-key.pgp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-downloader/sipa-key.pgp?ref=8756c986420ccd8302c396e0db8f5434dd41c57a"
      }
    ]
  },
  {
    "sha": "e06c14fb59ee493da5283819420d949a14304ca7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDZjMTRmYjU5ZWU0OTNkYTUyODM4MTk0MjBkOTQ5YTE0MzA0Y2E3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:24:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:25:06Z"
      },
      "message": "Merge pull request #6776\n\nab1f560 Support -checkmempool=N, which runs checks on average once every N transactions (Pieter Wuille)",
      "tree": {
        "sha": "2d1b41bd1895a3e59001f44b6eda249bdf5c2712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d1b41bd1895a3e59001f44b6eda249bdf5c2712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e06c14fb59ee493da5283819420d949a14304ca7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWMCPyAAoJENuhpnN5oakxlssQAMJy8oYS5IuNwZUYMb9bqWeA\nhxf/8bIJC/b0dzp/QGsctFgmPirf4RfAL+1mxXzfo0WtJWBxirKMtRN9jL+coYqB\nO1gMvWU4h0LjBVj46RtHoYYHng8g3DQMa8YJIqDfqnFXc8Mpe9J/9W9dekEh3iil\nYbzNhH/zKQ06uwSY/aWHcVAkorxyv1f8TGx6W+SXkGL2r6WxqA5b/ZRDGLfoyf6x\nvdVjr/gg1StcJX8e5th+YyqxD5av+j9YDu650gW7veoshLGiIQ9J0B0CUPOsKNRy\nOMLGC29EifrnLKG6Ft9fZc0p2LlsF/W6d4YOcHmBkVi3k0B8h6K1yj4YWWX4ZSIM\n5Y63/+BZOIfatPrPxDdU+5DdFsohiK5MAKC0VuH1PSn6CTmqshGWiPaphBorg66t\npYnqloWyIR+DLLG//8qSeqAdqJm7voAYKYTQZn/YDRFiGW79DdBwDjfARfaGVsq4\nCf1fMnRR8WSICqhr8DiZLHfP46K0kCJKLkRJBhfX30XC/ckCD99nBAriLTqG8YIN\nXeQ8LO6amvmewaTRNzvqvffemw33yyLr7nG7kO1/G/GewZ7g4v/jGCSYqEsFkRwG\nvn4zoVpmRIBko0P3d9PSwWDlgj5E2bncws0RL5PwYQgt9e4GcXFvB+4xj38GwYs+\nDiLvv8paGEBplDkKemOs\n=8UVw\n-----END PGP SIGNATURE-----",
        "payload": "tree 2d1b41bd1895a3e59001f44b6eda249bdf5c2712\nparent 8756c986420ccd8302c396e0db8f5434dd41c57a\nparent ab1f56072a796b0ff039d6690c6ac929dbcbf243\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1445995484 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1445995506 +0100\n\nMerge pull request #6776\n\nab1f560 Support -checkmempool=N, which runs checks on average once every N transactions (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e06c14fb59ee493da5283819420d949a14304ca7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e06c14fb59ee493da5283819420d949a14304ca7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e06c14fb59ee493da5283819420d949a14304ca7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8756c986420ccd8302c396e0db8f5434dd41c57a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8756c986420ccd8302c396e0db8f5434dd41c57a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8756c986420ccd8302c396e0db8f5434dd41c57a"
      },
      {
        "sha": "ab1f56072a796b0ff039d6690c6ac929dbcbf243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab1f56072a796b0ff039d6690c6ac929dbcbf243",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab1f56072a796b0ff039d6690c6ac929dbcbf243"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4189907b9fb478d8fa9d1bd7d07475322ed0671b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e06c14fb59ee493da5283819420d949a14304ca7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e06c14fb59ee493da5283819420d949a14304ca7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e06c14fb59ee493da5283819420d949a14304ca7",
        "patch": "@@ -841,7 +841,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         InitWarning(_(\"Warning: Unsupported argument -benchmark ignored, use -debug=bench.\"));\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n-    mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks()));\n+    int ratio = std::min<int>(std::max<int>(GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n+    if (ratio != 0) {\n+        mempool.setSanityCheck(1.0 / ratio);\n+    }\n     fCheckBlockIndex = GetBoolArg(\"-checkblockindex\", chainparams.DefaultConsistencyChecks());\n     fCheckpointsEnabled = GetBoolArg(\"-checkpoints\", true);\n "
      },
      {
        "sha": "a772e7adeaf940d3a7911ae937aaf63a03155322",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e06c14fb59ee493da5283819420d949a14304ca7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e06c14fb59ee493da5283819420d949a14304ca7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e06c14fb59ee493da5283819420d949a14304ca7",
        "patch": "@@ -314,7 +314,7 @@ CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :\n     // Sanity checks off by default for performance, because otherwise\n     // accepting transactions becomes O(N^2) where N is the number\n     // of transactions in the pool\n-    fSanityCheck = false;\n+    nCheckFrequency = 0;\n \n     minerPolicyEstimator = new CBlockPolicyEstimator(_minReasonableRelayFee);\n     minReasonableRelayFee = _minReasonableRelayFee;\n@@ -487,7 +487,7 @@ void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned in\n             if (it2 != mapTx.end())\n                 continue;\n             const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-            if (fSanityCheck) assert(coins);\n+            if (nCheckFrequency != 0) assert(coins);\n             if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n                 transactionsToRemove.push_back(tx);\n                 break;\n@@ -568,7 +568,10 @@ void CTxMemPool::clear()\n \n void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n {\n-    if (!fSanityCheck)\n+    if (nCheckFrequency == 0)\n+        return;\n+\n+    if (insecure_rand() >= nCheckFrequency)\n         return;\n \n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());"
      },
      {
        "sha": "6aa5f6d77c48a48ff97cc3493db21a5bf8a8dd11",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e06c14fb59ee493da5283819420d949a14304ca7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e06c14fb59ee493da5283819420d949a14304ca7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e06c14fb59ee493da5283819420d949a14304ca7",
        "patch": "@@ -278,7 +278,7 @@ class CInPoint\n class CTxMemPool\n {\n private:\n-    bool fSanityCheck; //! Normally false, true if -checkmempool or -regtest\n+    uint32_t nCheckFrequency; //! Value n means that n times in 2^32 we check.\n     unsigned int nTransactionsUpdated;\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n@@ -360,7 +360,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(bool _fSanityCheck) { fSanityCheck = _fSanityCheck; }\n+    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967296.0; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "4764f5db9d2c68e517fe2ba1d67dde39987a525c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzY0ZjVkYjlkMmM2OGU1MTdmZTJiYTFkNjdkZGUzOTk4N2E1MjVj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:25:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:30:31Z"
      },
      "message": "Merge pull request #6892\n\n214de7e [Trivial] ensure minimal header conventions (Philip Kaufmann)",
      "tree": {
        "sha": "7b4ab6474a2043d0f10ee10f5429580534342697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b4ab6474a2043d0f10ee10f5429580534342697"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4764f5db9d2c68e517fe2ba1d67dde39987a525c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWMCU3AAoJENuhpnN5oakx/5cQANxMEZzo8WPj/PN5fAGWHQGD\nqDsQOvj+bFgLqD6R85sSkRWbHn1Vi72zxnyWBdHwrNoVZAM+5c+o3URRhIcgNwOi\nOtuun9DcJfW2rvvzGgqvEHC9dvTamtmsIF2ZVhfltD74z4UeuSsFgeodRInIY+Hn\nQO4OLwC0lH8ud/3mYcIi+Er/jfpqxJMrNKaPI4QNujNL0yee1TncnkN9iagkc5lN\nXohnskyY20RsvbnvWrWg+NWSihc7jmQA0NvlfkdHIFwoV4FmoV6prMzsoVjFPYYG\n2gH0n8vbB+R/RmM2jqLQao1ZwOLeXPpLCU0XPip6xX3TAkgceLwmflNE8jDGHTYs\nMjG/OLcdThc+ThlIv8vQlXIiW7caImYFze4XNkKwty8GgHdt6iQRx5b3GQuqIjeF\nZu0xHTHRPzHU/rf36yv3UrBJzIYYngAAIGVyv5nMg+akD2ygGbGCAARGVpofXc+S\nZRp0aRUuJOGnVAFlMDm6qXkd+lk1OCCAt7anGiDphD9qe5CMguul23ejbHQznuYL\n2Iiy4dm2vgwF69AMTuyhQohGzDxtZcDkIMPcYcZ/Fi7khWzxtOy2hCYhH8egsFJt\nvxxUwWS4nSvIKkhRXng/3H8ITBDSUKEUVteAou5/AP25jUyREgcEOmIp3W+/BG/p\nCMNQ5DyQDEwC5lHoxNLl\n=MujE\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b4ab6474a2043d0f10ee10f5429580534342697\nparent e06c14fb59ee493da5283819420d949a14304ca7\nparent 214de7e54c282f7d452d9b628baaa94e6af51727\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1445995545 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1445995831 +0100\n\nMerge pull request #6892\n\n214de7e [Trivial] ensure minimal header conventions (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4764f5db9d2c68e517fe2ba1d67dde39987a525c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4764f5db9d2c68e517fe2ba1d67dde39987a525c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4764f5db9d2c68e517fe2ba1d67dde39987a525c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e06c14fb59ee493da5283819420d949a14304ca7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e06c14fb59ee493da5283819420d949a14304ca7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e06c14fb59ee493da5283819420d949a14304ca7"
      },
      {
        "sha": "214de7e54c282f7d452d9b628baaa94e6af51727",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/214de7e54c282f7d452d9b628baaa94e6af51727",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/214de7e54c282f7d452d9b628baaa94e6af51727"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "6ee3cdc27a49e82622defb77dd2f35106b76c162",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=4764f5db9d2c68e517fe2ba1d67dde39987a525c",
        "patch": "@@ -1,7 +1,9 @@\n // Copyright (c) 2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"bench.h\"\n+\n #include <iostream>\n #include <sys/time.h>\n "
      },
      {
        "sha": "5ce13c642b59b9528c47145e3215bc5f754b16f8",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 12,
        "deletions": 11,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=4764f5db9d2c68e517fe2ba1d67dde39987a525c",
        "patch": "@@ -1,8 +1,16 @@\n // Copyright (c) 2015 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef BITCOIN_BENCH_H\n-#define BITCOIN_BENCH_H\n+\n+#ifndef BITCOIN_BENCH_BENCH_H\n+#define BITCOIN_BENCH_BENCH_H\n+\n+#include <map>\n+#include <string>\n+\n+#include <boost/function.hpp>\n+#include <boost/preprocessor/cat.hpp>\n+#include <boost/preprocessor/stringize.hpp>\n \n // Simple micro-benchmarking framework; API mostly matches a subset of the Google Benchmark\n // framework (see https://github.com/google/benchmark)\n@@ -25,14 +33,7 @@ static void CODE_TO_TIME(benchmark::State& state)\n BENCHMARK(CODE_TO_TIME);\n \n  */\n-\n-\n-#include <boost/function.hpp>\n-#include <boost/preprocessor/cat.hpp>\n-#include <boost/preprocessor/stringize.hpp>\n-#include <map>\n-#include <string>\n-\n+ \n namespace benchmark {\n \n     class State {\n@@ -68,4 +69,4 @@ namespace benchmark {\n #define BENCHMARK(n) \\\n     benchmark::BenchRunner BOOST_PP_CAT(bench_, BOOST_PP_CAT(__LINE__, n))(BOOST_PP_STRINGIZE(n), n);\n \n-#endif // BITCOIN_BENCH_H\n+#endif // BITCOIN_BENCH_BENCH_H"
      },
      {
        "sha": "e96c5bf0383a0be5c6b8a8e1fc8b733f6964fa71",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=4764f5db9d2c68e517fe2ba1d67dde39987a525c",
        "patch": "@@ -121,4 +121,4 @@ static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n \n }\n \n-#endif\n+#endif // BITCOIN_MEMUSAGE_H"
      },
      {
        "sha": "f269e8d4762e441f5c73134ddfee6b044070f307",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4764f5db9d2c68e517fe2ba1d67dde39987a525c/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=4764f5db9d2c68e517fe2ba1d67dde39987a525c",
        "patch": "@@ -3,8 +3,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_POLICY_H\n-#define BITCOIN_POLICY_H\n+#ifndef BITCOIN_POLICY_POLICY_H\n+#define BITCOIN_POLICY_POLICY_H\n \n #include \"consensus/consensus.h\"\n #include \"script/interpreter.h\"\n@@ -59,4 +59,4 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-#endif // BITCOIN_POLICY_H\n+#endif // BITCOIN_POLICY_POLICY_H"
      }
    ]
  },
  {
    "sha": "8daffe227bc67706d6640b67776f7711a6a98607",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGFmZmUyMjdiYzY3NzA2ZDY2NDBiNjc3NzZmNzcxMWE2YTk4NjA3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:31:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T01:34:09Z"
      },
      "message": "Merge pull request #6891\n\nad5aae1 constify missing catch cases (Philip Kaufmann)",
      "tree": {
        "sha": "8a5df80256d7a19cae49e483d3f087849cdb0e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a5df80256d7a19cae49e483d3f087849cdb0e9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8daffe227bc67706d6640b67776f7711a6a98607",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJWMCYRAAoJENuhpnN5oakxoPoQAJtu+Zk128/sm1HTBa5nkrrp\nD8bcOC7QqvVgNQBZ02kRg4ec0hM+NQR/HkZjryWwrD5fNvIZd3y0nUBEFGHn9ypR\n1DhlNFRoGF56SQG11CpBk3XYoZfV9HQiBlv3OC1SiP1PV/7cJ5BYjLgu0o8jKNnL\npVuUKnuGCAmj5UAKhNTr537UMSLZF/qyGGzkDcslIP+mFWdyP5wiaB5neILOcJhg\noj0u3oDDMt0CS8UF9BYIB+ksS9eWD61PjXbbe70ppwZ/d5l5T8ORQZUha8Fwh2PA\nsnY9GUbkXU0UpdYQOxTbTOGlMz1ZY1FG1BsYUYFh8pwIWM/b+KTIUqd25WxnihO6\nX9oU0gVelqBBRUIeW0JQYUabUC7qVvtfHDiRKC9t31pxMA5+fXgo2cOiWkGQaaPL\njUX883EMdk6g5T06FIidHV6zpOPPgE4t0Injt6X0BptjSVGRX+VEnYF3kkF7F0Un\n8Lj/TOG3rJdf+X8sns0ycDiq8VSxAlNiZzRGxXrKjo+1DkT6puP+vN80WP45Xch9\neL2PwTdfx3jZiJPORK9EotStut0QMwAdZB04SMpjSPMPjwhg0hU6wLuHJJT8E8A0\nI1gWL6fJro87y57FxANMAlSt5nysqEuFpoXfCmvx7hNni234NcDn2gSffpikJRWp\nGpwNKvFDVAM8HZECd2w0\n=2nkq\n-----END PGP SIGNATURE-----",
        "payload": "tree 8a5df80256d7a19cae49e483d3f087849cdb0e9e\nparent 4764f5db9d2c68e517fe2ba1d67dde39987a525c\nparent ad5aae15b40dcbdbfc08221e615f06b030b92334\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1445995882 +0100\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1445996049 +0100\n\nMerge pull request #6891\n\nad5aae1 constify missing catch cases (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8daffe227bc67706d6640b67776f7711a6a98607",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8daffe227bc67706d6640b67776f7711a6a98607",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8daffe227bc67706d6640b67776f7711a6a98607/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4764f5db9d2c68e517fe2ba1d67dde39987a525c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4764f5db9d2c68e517fe2ba1d67dde39987a525c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4764f5db9d2c68e517fe2ba1d67dde39987a525c"
      },
      {
        "sha": "ad5aae15b40dcbdbfc08221e615f06b030b92334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad5aae15b40dcbdbfc08221e615f06b030b92334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad5aae15b40dcbdbfc08221e615f06b030b92334"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9564573657e11a941b69f7d567b6141f5ad01089",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8daffe227bc67706d6640b67776f7711a6a98607/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8daffe227bc67706d6640b67776f7711a6a98607/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=8daffe227bc67706d6640b67776f7711a6a98607",
        "patch": "@@ -94,7 +94,7 @@ static bool AppInitRPC(int argc, char* argv[])\n     // Check for -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n     try {\n         SelectBaseParams(ChainNameFromCommandLine());\n-    } catch(std::exception &e) {\n+    } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }"
      },
      {
        "sha": "48033cd8ad9323663ac18c660167c38dff4ee3f1",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8daffe227bc67706d6640b67776f7711a6a98607/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8daffe227bc67706d6640b67776f7711a6a98607/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=8daffe227bc67706d6640b67776f7711a6a98607",
        "patch": "@@ -37,7 +37,7 @@ static bool AppInitRawTx(int argc, char* argv[])\n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n     try {\n         SelectParams(ChainNameFromCommandLine());\n-    } catch(std::exception &e) {\n+    } catch (const std::exception& e) {\n         fprintf(stderr, \"Error: %s\\n\", e.what());\n         return false;\n     }"
      },
      {
        "sha": "addf0e6a26b4041d40de38c0e33ba45da162d9f1",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8daffe227bc67706d6640b67776f7711a6a98607/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8daffe227bc67706d6640b67776f7711a6a98607/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8daffe227bc67706d6640b67776f7711a6a98607",
        "patch": "@@ -109,7 +109,7 @@ bool AppInit(int argc, char* argv[])\n         // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n         try {\n             SelectParams(ChainNameFromCommandLine());\n-        } catch(std::exception &e) {\n+        } catch (const std::exception& e) {\n             fprintf(stderr, \"Error: %s\\n\", e.what());\n             return false;\n         }"
      },
      {
        "sha": "1d31ab8ae5c879a9d545b850f327c55932606636",
        "filename": "src/dbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8daffe227bc67706d6640b67776f7711a6a98607/src/dbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8daffe227bc67706d6640b67776f7711a6a98607/src/dbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.h?ref=8daffe227bc67706d6640b67776f7711a6a98607",
        "patch": "@@ -104,7 +104,7 @@ class CDBIterator\n         try {\n             CDataStream ssKey(slKey.data(), slKey.data() + slKey.size(), SER_DISK, CLIENT_VERSION);\n             ssKey >> key;\n-        } catch(std::exception &e) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n         return true;\n@@ -120,7 +120,7 @@ class CDBIterator\n             CDataStream ssValue(slValue.data(), slValue.data() + slValue.size(), SER_DISK, CLIENT_VERSION);\n             ssValue.Xor(*obfuscate_key);\n             ssValue >> value;\n-        } catch(std::exception &e) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n         return true;"
      }
    ]
  },
  {
    "sha": "e9e616323bc44daf61f4358f5b2de58e90b5c602",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWU2MTYzMjNiYzQ0ZGFmNjFmNDM1OGY1YjJkZTU4ZTkwYjVjNjAy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T02:07:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-10-28T02:07:59Z"
      },
      "message": "Make -checkmempool=1 not fail through int32 overflow",
      "tree": {
        "sha": "767da987b19111036f305867500b0d22d3e4d442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/767da987b19111036f305867500b0d22d3e4d442"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9e616323bc44daf61f4358f5b2de58e90b5c602",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e616323bc44daf61f4358f5b2de58e90b5c602",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9e616323bc44daf61f4358f5b2de58e90b5c602",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e616323bc44daf61f4358f5b2de58e90b5c602/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8daffe227bc67706d6640b67776f7711a6a98607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8daffe227bc67706d6640b67776f7711a6a98607",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8daffe227bc67706d6640b67776f7711a6a98607"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b5843a8d0d0fd4c1ef116841344552c8a656ddc",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9e616323bc44daf61f4358f5b2de58e90b5c602/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9e616323bc44daf61f4358f5b2de58e90b5c602/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e9e616323bc44daf61f4358f5b2de58e90b5c602",
        "patch": "@@ -360,7 +360,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967296.0; }\n+    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjBlNjIyYzI1ZGRiYTY1NjE0OWRlMGY5ZjhiN2YyYTBhYTBkZWJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-13T21:23:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-28T09:52:46Z"
      },
      "message": "[wallet] Refactor to use new MIN_CHANGE\n\n* Introduce new constant MIN_CHANGE and use it instead of the\nhardcoded \"CENT\"\n* Add test case for MIN_CHANGE\n* Introduce new constant for -mintxfee default:\n  DEFAULT_TRANSACTION_MINFEE = 1000",
      "tree": {
        "sha": "5e4f6bc4931e4d687174c742ec5cb3112755b261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e4f6bc4931e4d687174c742ec5cb3112755b261"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0143a1f228c3447ae2e025c697b0ad53a0d8d306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0143a1f228c3447ae2e025c697b0ad53a0d8d306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0143a1f228c3447ae2e025c697b0ad53a0d8d306"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 85,
      "deletions": 56
    },
    "files": [
      {
        "sha": "74bc8dbec9b7df1e6300bc572e3364425ddf0747",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -567,7 +567,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nChange -= nPayFee;\n \n             // Never create dust outputs; if we would, just add the dust to the fee.\n-            if (nChange > 0 && nChange < CENT)\n+            if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))"
      },
      {
        "sha": "8b9292bd14d7f91a37298283182924263c1c2241",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 46,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -117,7 +117,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n         BOOST_CHECK( wallet.SelectCoinsMinConf(34 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_GT(nValueRet, 34 * CENT);         // but should get more than 34 cents\n+        BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n@@ -185,33 +185,34 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        // empty the wallet and start again, now with fractions of a cent, to test sub-cent change avoidance\n+        // empty the wallet and start again, now with fractions of a cent, to test small change avoidance\n+\n         empty_wallet();\n-        add_coin(0.1*CENT);\n-        add_coin(0.2*CENT);\n-        add_coin(0.3*CENT);\n-        add_coin(0.4*CENT);\n-        add_coin(0.5*CENT);\n-\n-        // try making 1 cent from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 = 1.5 cents\n-        // we'll get sub-cent change whatever happens, so can expect 1.0 exactly\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+        add_coin(0.1*MIN_CHANGE);\n+        add_coin(0.2*MIN_CHANGE);\n+        add_coin(0.3*MIN_CHANGE);\n+        add_coin(0.4*MIN_CHANGE);\n+        add_coin(0.5*MIN_CHANGE);\n+\n+        // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n+        // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n-        // but if we add a bigger coin, making it possible to avoid sub-cent change, things change:\n-        add_coin(1111*CENT);\n+        // but if we add a bigger coin, small change is avoided\n+        add_coin(1111*MIN_CHANGE);\n \n-        // try making 1 cent from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5 cents\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT); // we should get the exact amount\n+        // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n-        // if we add more sub-cent coins:\n-        add_coin(0.6*CENT);\n-        add_coin(0.7*CENT);\n+        // if we add more small coins:\n+        add_coin(0.6*MIN_CHANGE);\n+        add_coin(0.7*MIN_CHANGE);\n \n-        // and try again to make 1.0 cents, we can still make 1.0 cents\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT); // we should get the exact amount\n+        // and try again to make 1.0 * MIN_CHANGE\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n         // they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change\n@@ -223,45 +224,65 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n-        // if there's not enough in the smaller coins to make at least 1 cent change (0.5+0.6+0.7 < 1.0+1.0),\n+        // if there's not enough in the smaller coins to make at least 1 * MIN_CHANGE change (0.5+0.6+0.7 < 1.0+1.0),\n         // we need to try finding an exact subset anyway\n \n         // sometimes it will fail, and so we use the next biggest coin:\n         empty_wallet();\n-        add_coin(0.5 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.7 * CENT);\n-        add_coin(1111 * CENT);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1111 * CENT); // we get the bigger coin\n+        add_coin(0.5 * MIN_CHANGE);\n+        add_coin(0.6 * MIN_CHANGE);\n+        add_coin(0.7 * MIN_CHANGE);\n+        add_coin(1111 * MIN_CHANGE);\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         empty_wallet();\n-        add_coin(0.4 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.8 * CENT);\n-        add_coin(1111 * CENT);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);   // we should get the exact amount\n+        add_coin(0.4 * MIN_CHANGE);\n+        add_coin(0.6 * MIN_CHANGE);\n+        add_coin(0.8 * MIN_CHANGE);\n+        add_coin(1111 * MIN_CHANGE);\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n-        // test avoiding sub-cent change\n+        // test avoiding small change\n         empty_wallet();\n-        add_coin(0.0005 * COIN);\n-        add_coin(0.01 * COIN);\n-        add_coin(1 * COIN);\n+        add_coin(0.05 * MIN_CHANGE);\n+        add_coin(1    * MIN_CHANGE);\n+        add_coin(100  * MIN_CHANGE);\n \n-        // trying to make 1.0001 from these three coins\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1.0001 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.0105 * COIN);   // we should get all coins\n+        // trying to make 100.01 from these three coins\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(100.01 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 101.05 * MIN_CHANGE);   // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n-        // but if we try to make 0.999, we should take the bigger of the two small coins to avoid sub-cent change\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(0.999 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.01 * COIN);   // we should get 1 + 0.01\n+        // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(99.9 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n+        // test with many inputs\n+        for (CAmount amt=1500; amt < COIN; amt*=10) {\n+             empty_wallet();\n+             // Create 676 inputs (= MAX_STANDARD_TX_SIZE / 148 bytes per input)\n+             for (uint16_t j = 0; j < 676; j++)\n+                 add_coin(amt);\n+             BOOST_CHECK(wallet.SelectCoinsMinConf(2000, 1, 1, vCoins, setCoinsRet, nValueRet));\n+             if (amt - 2000 < MIN_CHANGE) {\n+                 // needs more than one input:\n+                 uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n+                 CAmount returnValue = amt * returnSize;\n+                 BOOST_CHECK_EQUAL(nValueRet, returnValue);\n+                 BOOST_CHECK_EQUAL(setCoinsRet.size(), returnSize);\n+             } else {\n+                 // one input is sufficient:\n+                 BOOST_CHECK_EQUAL(nValueRet, amt);\n+                 BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+             }\n+        }\n+\n         // test randomness\n         {\n             empty_wallet();"
      },
      {
        "sha": "2414532f7539243e2fd135b758226709f03d78c7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -47,7 +47,7 @@ bool fPayAtLeastCustomFee = true;\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n  * Override with -mintxfee\n  */\n-CFeeRate CWallet::minTxFee = CFeeRate(1000);\n+CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);\n \n /** @defgroup mapWallet\n  *\n@@ -1498,9 +1498,6 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-/**\n- * populate vCoins with vector of available COutputs.\n- */\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue) const\n {\n     vCoins.clear();\n@@ -1620,7 +1617,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n             nValueRet += coin.first;\n             return true;\n         }\n-        else if (n < nTargetValue + CENT)\n+        else if (n < nTargetValue + MIN_CHANGE)\n         {\n             vValue.push_back(coin);\n             nTotalLower += n;\n@@ -1655,14 +1652,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     vector<char> vfBest;\n     CAmount nBest;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + CENT, vfBest, nBest, 1000);\n+    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n+    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n+        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (coinLowestLarger.second.first &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + CENT) || coinLowestLarger.first <= nBest))\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n     {\n         setCoinsRet.insert(coinLowestLarger.second);\n         nValueRet += coinLowestLarger.first;"
      },
      {
        "sha": "143ca22bdcd2f61c842e2a457fd8ef7367a7b46d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -41,8 +41,12 @@ extern bool fPayAtLeastCustomFee;\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n+//! -mintxfee default\n+static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n //! -maxtxfee default\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n+//! minimum change amount\n+static const CAmount MIN_CHANGE = CENT;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n@@ -544,7 +548,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n+    /**\n+     * populate vCoins with vector of available COutputs.\n+     */\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n+    /**\n+     * Select coins until nTargetValue is reached. Return the actual value\n+     * and the corresponding coin set.\n+     */\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;"
      }
    ]
  },
  {
    "sha": "a9c73a130ebf2369381241d0053c8fa0a301e0fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWM3M2ExMzBlYmYyMzY5MzgxMjQxZDAwNTNjOGZhMGEzMDFlMGZj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-14T12:49:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-28T10:15:48Z"
      },
      "message": "[wallet] Add comments for doxygen",
      "tree": {
        "sha": "90a453e9451ee7b35ecf0d59c34b01491fce977b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90a453e9451ee7b35ecf0d59c34b01491fce977b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4e05f519cc2b0f626d728028cf2ad6ee15ad65d3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "patch": "@@ -1842,6 +1842,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n         LOCK2(cs_main, cs_wallet);\n         {\n             nFeeRet = 0;\n+            // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n                 txNew.vin.clear();"
      },
      {
        "sha": "cb2c09b8923b853b2d6ece42f574891706c1a01a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "patch": "@@ -451,6 +451,11 @@ class CWalletKey\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n+    /**\n+     * Select a set of coins such that nValueRet >= nTargetValue and at least\n+     * all coins from coinControl are selected; Never select unconfirmed coins\n+     * if they are not ours\n+     */\n     bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n@@ -552,9 +557,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * populate vCoins with vector of available COutputs.\n      */\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n+\n     /**\n-     * Select coins until nTargetValue is reached. Return the actual value\n-     * and the corresponding coin set.\n+     * Shuffle and select coins until nTargetValue is reached while avoiding\n+     * small change; This method is stochastic for some inputs and upon\n+     * completion the coin set and corresponding actual target value is\n+     * assembled\n      */\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n@@ -638,7 +646,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n+\n+    /**\n+     * Insert additional inputs into the transaction by\n+     * calling CreateTransaction();\n+     */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n+\n+    /**\n+     * Create a new transaction paying the recipients with a set of coins\n+     * selected by SelectCoins(); Also create the change output, when needed\n+     */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);"
      }
    ]
  },
  {
    "sha": "040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDBjMGVhMDkzNWZmYTBhMjM5NzIyNTBjMjNjZDBkN2I2YjFiNzAy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-22T16:09:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-28T21:11:43Z"
      },
      "message": "Init: Cleanup error and warning strings\n\nAlso update doc/translation_strings_policy.md",
      "tree": {
        "sha": "909f7fcc87ae78c17de9c4f36ebca500619a8c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/909f7fcc87ae78c17de9c4f36ebca500619a8c6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/040c0ea0935ffa0a23972250c23cd0d7b6b1b702/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6782f58368af09a3507004edc761fb233a95bfae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6782f58368af09a3507004edc761fb233a95bfae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6782f58368af09a3507004edc761fb233a95bfae"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "b95259cdc9debc0285239406396f175ea7d0f3bb",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/040c0ea0935ffa0a23972250c23cd0d7b6b1b702/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/040c0ea0935ffa0a23972250c23cd0d7b6b1b702/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
        "patch": "@@ -52,7 +52,7 @@ Try to write translation strings in an understandable way, for both the user and\n ### Do not translate internal errors\n \n Do not translate internal errors, or log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n-use a generic message, then log the detailed message to the log. E.g. \"Error: A fatal internal error occurred, see debug.log for details\".\n+use a translatable generic message, then log the detailed message to the log. E.g. \"A fatal internal error occurred, see debug.log for details\".\n This helps troubleshooting; if the error is the same for everyone, the likelihood is increased that it can be found using a search engine.\n \n ### Avoid fragments"
      },
      {
        "sha": "3ef51019a4fef34aa85e4dc2a68edfd4bb97c6b7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/040c0ea0935ffa0a23972250c23cd0d7b6b1b702/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/040c0ea0935ffa0a23972250c23cd0d7b6b1b702/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
        "patch": "@@ -690,13 +690,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n \n     if (!SetupNetworking())\n-        return InitError(\"Error: Initializing networking failed\");\n+        return InitError(\"Initializing networking failed\");\n \n #ifndef WIN32\n     if (GetBoolArg(\"-sysperms\", false)) {\n #ifdef ENABLE_WALLET\n         if (!GetBoolArg(\"-disablewallet\", false))\n-            return InitError(\"Error: -sysperms is not allowed in combination with enabled wallet functionality\");\n+            return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n #endif\n     } else {\n         umask(077);\n@@ -826,16 +826,16 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Check for -debugnet\n     if (GetBoolArg(\"-debugnet\", false))\n-        InitWarning(_(\"Warning: Unsupported argument -debugnet ignored, use -debug=net.\"));\n+        InitWarning(_(\"Unsupported argument -debugnet ignored, use -debug=net.\"));\n     // Check for -socks - as this is a privacy risk to continue, exit here\n     if (mapArgs.count(\"-socks\"))\n-        return InitError(_(\"Error: Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n+        return InitError(_(\"Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n     // Check for -tor - as this is a privacy risk to continue, exit here\n     if (GetBoolArg(\"-tor\", false))\n-        return InitError(_(\"Error: Unsupported argument -tor found, use -onion.\"));\n+        return InitError(_(\"Unsupported argument -tor found, use -onion.\"));\n \n     if (GetBoolArg(\"-benchmark\", false))\n-        InitWarning(_(\"Warning: Unsupported argument -benchmark ignored, use -debug=bench.\"));\n+        InitWarning(_(\"Unsupported argument -benchmark ignored, use -debug=bench.\"));\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n     mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks()));\n@@ -846,7 +846,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n     if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n-        return InitError(strprintf(_(\"Error: -maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n@@ -915,7 +915,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n         if (nFeePerK > nHighTransactionFeeWarning)\n-            InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n+            InitWarning(_(\"-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n         if (payTxFee < ::minRelayTxFee)\n         {\n@@ -929,7 +929,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]));\n         if (nMaxFee > nHighTransactionMaxFeeWarning)\n-            InitWarning(_(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n         if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n         {\n@@ -1056,12 +1056,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     BOOST_FOREACH(string cmt, mapMultiArgs[\"-uacomment\"])\n     {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(\"User Agent comment (%s) contains unsafe characters.\", cmt));\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n         uacomments.push_back(SanitizeString(cmt, SAFE_CHARS_UA_COMMENT));\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n+        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n@@ -1382,9 +1382,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n             else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n             {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n+                InitWarning(_(\"Error reading wallet.dat! All keys read correctly, but transaction data\"\n                              \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n             }\n             else if (nLoadWalletRet == DB_TOO_NEW)\n                 strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";"
      }
    ]
  },
  {
    "sha": "a83f3c2426429ddf3e38cfc26204398c097a23d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODNmM2MyNDI2NDI5ZGRmM2UzOGNmYzI2MjA0Mzk4YzA5N2EyM2Q0",
    "commit": {
      "author": {
        "name": "Bob McElrath",
        "email": "bob@mcelrath.org",
        "date": "2015-10-29T02:25:32Z"
      },
      "committer": {
        "name": "Bob McElrath",
        "email": "bob@mcelrath.org",
        "date": "2015-10-29T02:25:32Z"
      },
      "message": "Add explicit shared_ptr constructor due to C++11 error",
      "tree": {
        "sha": "8c259be06cfe90d76057d466fda75bc441645946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c259be06cfe90d76057d466fda75bc441645946"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a83f3c2426429ddf3e38cfc26204398c097a23d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83f3c2426429ddf3e38cfc26204398c097a23d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a83f3c2426429ddf3e38cfc26204398c097a23d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83f3c2426429ddf3e38cfc26204398c097a23d4/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3b3cdee497b8a1d7c6a7279e7bb13435527b60"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8bda5a037360c8476a1dd0fd77099d80090405b6",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a83f3c2426429ddf3e38cfc26204398c097a23d4/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a83f3c2426429ddf3e38cfc26204398c097a23d4/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a83f3c2426429ddf3e38cfc26204398c097a23d4",
        "patch": "@@ -563,7 +563,7 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n     deadlineTimers.erase(name);\n     RPCTimerInterface* timerInterface = timerInterfaces[0];\n     LogPrint(\"rpc\", \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n-    deadlineTimers.insert(std::make_pair(name, timerInterface->NewTimer(func, nSeconds*1000)));\n+    deadlineTimers.insert(std::make_pair(name, boost::shared_ptr<RPCTimerBase>(timerInterface->NewTimer(func, nSeconds*1000))));\n }\n \n const CRPCTable tableRPC;"
      }
    ]
  },
  {
    "sha": "26752767df451f710e1ad592bc80e8ab89116735",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjc1Mjc2N2RmNDUxZjcxMGUxYWQ1OTJiYzgwZThhYjg5MTE2NzM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:12:34Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:12:47Z"
      },
      "message": "Merge pull request #6894\n\n3e187f2 Fix BIP65 p2p test (Suhas Daftuar)",
      "tree": {
        "sha": "5071608c4417660d2043276d7568b9b75e2c84ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5071608c4417660d2043276d7568b9b75e2c84ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26752767df451f710e1ad592bc80e8ab89116735",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWMg0/AAoJEHSBCwEjRsmmpn4H/0km5DVIsIHo2kH0pP6S8ZJz\n5gi7sLZRQcujtLKnPo4Bt20JkgtIIxeAPU7MLmlXpAPxMrphn8m5ccuNH5pHt/kp\ni/RpBtrleSlENHEIkFgjVGwWFV3BAFjaYSTxF3tlSrSTx7/xI5OeDoQ/F0UxNnHL\nYVtI20UJSTQgx8sdqDjl7w9uMpm+WQJPd5RGQrrkM/Vn+AwV7agrPA5w9zRFUZZ7\n0R4r26u6w569yom+hYE2qpTPvKtSmSLqIudqq3NRrOQ+0KQ7yoJYAhjrTL9e6O1a\noCD/YI6P4figMIzrqi9wS5pIQAdQU8sYPu4d0ijwUpFTwRsPjAUdUdp1GHenE3Q=\n=hQ5q\n-----END PGP SIGNATURE-----",
        "payload": "tree 5071608c4417660d2043276d7568b9b75e2c84ba\nparent 8daffe227bc67706d6640b67776f7711a6a98607\nparent 3e187f2acdb69ceb97a875f8f3bf361c11ef543c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446120754 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446120767 +0100\n\nMerge pull request #6894\n\n3e187f2 Fix BIP65 p2p test (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26752767df451f710e1ad592bc80e8ab89116735",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26752767df451f710e1ad592bc80e8ab89116735",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26752767df451f710e1ad592bc80e8ab89116735/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8daffe227bc67706d6640b67776f7711a6a98607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8daffe227bc67706d6640b67776f7711a6a98607",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8daffe227bc67706d6640b67776f7711a6a98607"
      },
      {
        "sha": "3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e187f2acdb69ceb97a875f8f3bf361c11ef543c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e187f2acdb69ceb97a875f8f3bf361c11ef543c"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "9ca5c69f162d23752337d0408996b3d54df90751",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26752767df451f710e1ad592bc80e8ab89116735/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26752767df451f710e1ad592bc80e8ab89116735/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=26752767df451f710e1ad592bc80e8ab89116735",
        "patch": "@@ -67,32 +67,35 @@ def create_transaction(self, node, coinbase, to_address, amount):\n     def get_tests(self):\n \n         self.coinbase_blocks = self.nodes[0].generate(2)\n+        height = 3  # height of the next block to build\n         self.tip = int (\"0x\" + self.nodes[0].getbestblockhash() + \"L\", 0)\n         self.nodeaddress = self.nodes[0].getnewaddress()\n         self.last_block_time = time.time()\n \n         ''' 98 more version 3 blocks '''\n         test_blocks = []\n         for i in xrange(98):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 3\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 749 version 4 blocks '''\n         test_blocks = []\n         for i in xrange(749):\n-            block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         '''\n@@ -104,7 +107,7 @@ def get_tests(self):\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(2), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -113,6 +116,7 @@ def get_tests(self):\n \n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         '''\n@@ -124,7 +128,7 @@ def get_tests(self):\n         cltv_invalidate(spendtx)\n         spendtx.rehash()\n \n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.vtx.append(spendtx)\n         block.hashMerkleRoot = block.calc_merkle_root()\n@@ -136,35 +140,38 @@ def get_tests(self):\n         ''' Mine 199 new version blocks on last valid tip '''\n         test_blocks = []\n         for i in xrange(199):\n-            block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+            block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n             block.nVersion = 4\n             block.rehash()\n             block.solve()\n             test_blocks.append([block, True])\n             self.last_block_time += 1\n             self.tip = block.sha256\n+            height += 1\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         ''' Mine 1 old version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 new version block '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 4\n         block.rehash()\n         block.solve()\n         self.last_block_time += 1\n         self.tip = block.sha256\n+        height += 1\n         yield TestInstance([[block, True]])\n \n         ''' Mine 1 old version block, should be invalid '''\n-        block = create_block(self.tip, create_coinbase(1), self.last_block_time + 1)\n+        block = create_block(self.tip, create_coinbase(height), self.last_block_time + 1)\n         block.nVersion = 3\n         block.rehash()\n         block.solve()"
      }
    ]
  },
  {
    "sha": "b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmNlMmMxZjBmYjEyYWY4MmYzZmY5ZjIwYzY2NDkyYjkyNjNmYTEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:26:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:30:42Z"
      },
      "message": "Merge pull request #6870\n\n040c0ea Init: Cleanup error and warning strings (MarcoFalke)\n6782f58 [trivial] Latest config.guess (MarcoFalke)\nbf68191 [trivial] rpcnet: fix typo (MarcoFalke)\n95f4291 [trivial] Rewrite help text for feature enabled by default (MarcoFalke)",
      "tree": {
        "sha": "6c5e35f1587f438d2f0af1e9f5bb58d3100dee29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c5e35f1587f438d2f0af1e9f5bb58d3100dee29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWMhFyAAoJEHSBCwEjRsmmk24H/iaHLs+eSkx1rZYkH+Y/UMb8\nWylNV/fTsX8bOEqXQHId/fjK3TwbdF5wKm9drpCPoLVi51dWWNuDBldHw7ZkAXYq\naidHhOTI8VKPIqACYuJq0nQIZony9NTgvvY1U4XOfQ8m9+91p+kRegNKlbljuCcV\n4s01gctDLt3IZjoH8Hoz5NZrzXvg3zf0qK8lBrs9NdSYdXOpD0KFB6LUiScaFWsr\nWye23nld/SBn7UN7SInRskfQ8/VYiVbvg+jGmlVE/BwLZKaLjm/sJAHrKuhedtEL\n0fXpaeMKp7TipuSwl7GRKAUHFoYmAuNz9u7TWiBWuhrtEbG+RK2QHJ+NoQWOkuY=\n=05YI\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c5e35f1587f438d2f0af1e9f5bb58d3100dee29\nparent 26752767df451f710e1ad592bc80e8ab89116735\nparent 040c0ea0935ffa0a23972250c23cd0d7b6b1b702\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446121597 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446121842 +0100\n\nMerge pull request #6870\n\n040c0ea Init: Cleanup error and warning strings (MarcoFalke)\n6782f58 [trivial] Latest config.guess (MarcoFalke)\nbf68191 [trivial] rpcnet: fix typo (MarcoFalke)\n95f4291 [trivial] Rewrite help text for feature enabled by default (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26752767df451f710e1ad592bc80e8ab89116735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26752767df451f710e1ad592bc80e8ab89116735",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26752767df451f710e1ad592bc80e8ab89116735"
      },
      {
        "sha": "040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/040c0ea0935ffa0a23972250c23cd0d7b6b1b702",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/040c0ea0935ffa0a23972250c23cd0d7b6b1b702"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 18,
      "deletions": 19
    },
    "files": [
      {
        "sha": "1669ec03ce82aa862bf1e59defa53e30258af763",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
        "patch": "@@ -93,7 +93,7 @@ AC_ARG_ENABLE(tests,\n     [use_tests=yes])\n \n AC_ARG_ENABLE(bench,\n-    AS_HELP_STRING([--enable-bench],[compile benchmarks (default is yes)]),\n+    AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n     [use_bench=yes])\n "
      },
      {
        "sha": "b3f905370ac63a60097a2d83dded1dee3387581f",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
        "patch": "@@ -2,7 +2,7 @@\n # Attempt to guess a canonical system name.\n #   Copyright 1992-2015 Free Software Foundation, Inc.\n \n-timestamp='2015-09-14'\n+timestamp='2015-10-21'\n \n # This file is free software; you can redistribute it and/or modify it\n # under the terms of the GNU General Public License as published by\n@@ -1123,7 +1123,7 @@ EOF\n \t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n \t# the processor, so we play safe by assuming i586.\n \t# Note: whatever this is, it MUST be the same as what config.sub\n-\t# prints for the \"djgpp\" host, or else GDB configury will decide that\n+\t# prints for the \"djgpp\" host, or else GDB configure will decide that\n \t# this is a cross-build.\n \techo i586-pc-msdosdjgpp\n \texit ;;"
      },
      {
        "sha": "b95259cdc9debc0285239406396f175ea7d0f3bb",
        "filename": "doc/translation_strings_policy.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/doc/translation_strings_policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/doc/translation_strings_policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_strings_policy.md?ref=b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
        "patch": "@@ -52,7 +52,7 @@ Try to write translation strings in an understandable way, for both the user and\n ### Do not translate internal errors\n \n Do not translate internal errors, or log messages, or messages that appear on the RPC interface. If an error is to be shown to the user,\n-use a generic message, then log the detailed message to the log. E.g. \"Error: A fatal internal error occurred, see debug.log for details\".\n+use a translatable generic message, then log the detailed message to the log. E.g. \"A fatal internal error occurred, see debug.log for details\".\n This helps troubleshooting; if the error is the same for everyone, the likelihood is increased that it can be found using a search engine.\n \n ### Avoid fragments"
      },
      {
        "sha": "76adca76923c6f406c28c41c1d0fb3c478f9326e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
        "patch": "@@ -692,13 +692,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n #endif\n \n     if (!SetupNetworking())\n-        return InitError(\"Error: Initializing networking failed\");\n+        return InitError(\"Initializing networking failed\");\n \n #ifndef WIN32\n     if (GetBoolArg(\"-sysperms\", false)) {\n #ifdef ENABLE_WALLET\n         if (!GetBoolArg(\"-disablewallet\", false))\n-            return InitError(\"Error: -sysperms is not allowed in combination with enabled wallet functionality\");\n+            return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n #endif\n     } else {\n         umask(077);\n@@ -829,16 +829,16 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // Check for -debugnet\n     if (GetBoolArg(\"-debugnet\", false))\n-        InitWarning(_(\"Warning: Unsupported argument -debugnet ignored, use -debug=net.\"));\n+        InitWarning(_(\"Unsupported argument -debugnet ignored, use -debug=net.\"));\n     // Check for -socks - as this is a privacy risk to continue, exit here\n     if (mapArgs.count(\"-socks\"))\n-        return InitError(_(\"Error: Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n+        return InitError(_(\"Unsupported argument -socks found. Setting SOCKS version isn't possible anymore, only SOCKS5 proxies are supported.\"));\n     // Check for -tor - as this is a privacy risk to continue, exit here\n     if (GetBoolArg(\"-tor\", false))\n-        return InitError(_(\"Error: Unsupported argument -tor found, use -onion.\"));\n+        return InitError(_(\"Unsupported argument -tor found, use -onion.\"));\n \n     if (GetBoolArg(\"-benchmark\", false))\n-        InitWarning(_(\"Warning: Unsupported argument -benchmark ignored, use -debug=bench.\"));\n+        InitWarning(_(\"Unsupported argument -benchmark ignored, use -debug=bench.\"));\n \n     // Checkmempool and checkblockindex default to true in regtest mode\n     int ratio = std::min<int>(std::max<int>(GetArg(\"-checkmempool\", chainparams.DefaultConsistencyChecks() ? 1 : 0), 0), 1000000);\n@@ -852,7 +852,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int64_t nMempoolSizeLimit = GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolDescendantSizeLimit = GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000;\n     if (nMempoolSizeLimit < 0 || nMempoolSizeLimit < nMempoolDescendantSizeLimit * 40)\n-        return InitError(strprintf(_(\"Error: -maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n+        return InitError(strprintf(_(\"-maxmempool must be at least %d MB\"), GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) / 25));\n \n     // -par=0 means autodetect, but nScriptCheckThreads==0 means no concurrency\n     nScriptCheckThreads = GetArg(\"-par\", DEFAULT_SCRIPTCHECK_THREADS);\n@@ -921,7 +921,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n         if (nFeePerK > nHighTransactionFeeWarning)\n-            InitWarning(_(\"Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n+            InitWarning(_(\"-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n         if (payTxFee < ::minRelayTxFee)\n         {\n@@ -935,7 +935,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (!ParseMoney(mapArgs[\"-maxtxfee\"], nMaxFee))\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s'\"), mapArgs[\"-maptxfee\"]));\n         if (nMaxFee > nHighTransactionMaxFeeWarning)\n-            InitWarning(_(\"Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n         if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n         {\n@@ -1062,12 +1062,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     BOOST_FOREACH(string cmt, mapMultiArgs[\"-uacomment\"])\n     {\n         if (cmt != SanitizeString(cmt, SAFE_CHARS_UA_COMMENT))\n-            return InitError(strprintf(\"User Agent comment (%s) contains unsafe characters.\", cmt));\n+            return InitError(strprintf(_(\"User Agent comment (%s) contains unsafe characters.\"), cmt));\n         uacomments.push_back(SanitizeString(cmt, SAFE_CHARS_UA_COMMENT));\n     }\n     strSubVersion = FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, uacomments);\n     if (strSubVersion.size() > MAX_SUBVERSION_LENGTH) {\n-        return InitError(strprintf(\"Total length of network version string %i exceeds maximum of %i characters. Reduce the number and/or size of uacomments.\",\n+        return InitError(strprintf(_(\"Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.\"),\n             strSubVersion.size(), MAX_SUBVERSION_LENGTH));\n     }\n \n@@ -1391,9 +1391,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n             else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n             {\n-                string msg(_(\"Warning: error reading wallet.dat! All keys read correctly, but transaction data\"\n+                InitWarning(_(\"Error reading wallet.dat! All keys read correctly, but transaction data\"\n                              \" or address book entries might be missing or incorrect.\"));\n-                InitWarning(msg);\n             }\n             else if (nLoadWalletRet == DB_TOO_NEW)\n                 strErrors << _(\"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\") << \"\\n\";"
      },
      {
        "sha": "9bf017e385fb2921941b81499463cc8a484ee2bc",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
        "patch": "@@ -29,7 +29,7 @@ UniValue getconnectioncount(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getconnectioncount\\n\"\n             \"\\nReturns the number of connections to other nodes.\\n\"\n-            \"\\nbResult:\\n\"\n+            \"\\nResult:\\n\"\n             \"n          (numeric) The connection count\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getconnectioncount\", \"\")\n@@ -83,7 +83,7 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         throw runtime_error(\n             \"getpeerinfo\\n\"\n             \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n-            \"\\nbResult:\\n\"\n+            \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n             \"    \\\"id\\\": n,                   (numeric) Peer index\\n\""
      }
    ]
  },
  {
    "sha": "b28c229324d02963d79d66df85efe6bd78db451e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjhjMjI5MzI0ZDAyOTYzZDc5ZDY2ZGY4NWVmZTZiZDc4ZGI0NTFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:39:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:39:56Z"
      },
      "message": "Merge pull request #6899\n\na83f3c2 Add explicit shared_ptr constructor due to C++11 error (Bob McElrath)",
      "tree": {
        "sha": "c84982f99e7c4d9f12673e3c4b0bf532d37de696",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c84982f99e7c4d9f12673e3c4b0bf532d37de696"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b28c229324d02963d79d66df85efe6bd78db451e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWMhOcAAoJEHSBCwEjRsmmBfgIAJ6Vxj45XzihuJMWJsyE+Yl/\nK6XBVytXuVZFAWmnAk+TP5TLuDju+sc39Ik0+xCkcbTxGeTqqsFX4m/cLY/XPGgA\np0eImHTye/EQKuV8mI8tUmNKLnEQPs5qrePwsxEAiCT4lut9Ob5dhpzpltC4v+QX\nW5pCP+Fk9XCO7YZsjHQA9PnTUxYDYoOsumUofWnTYbRfByYrPEhOxGwGegUe8vuE\nduNFE7XaqNdGEwR0dha4jWH0tstLjbO+EdPevblw0QSqD/GurLngD0E7vAzwSo8s\nKB1WJgSM+k4jLuH+Nk/L3QJb3G09RUTj4UnSdius6miPUzvb25f0dVihSzw3Lx0=\n=mOJZ\n-----END PGP SIGNATURE-----",
        "payload": "tree c84982f99e7c4d9f12673e3c4b0bf532d37de696\nparent b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10\nparent a83f3c2426429ddf3e38cfc26204398c097a23d4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446122391 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446122396 +0100\n\nMerge pull request #6899\n\na83f3c2 Add explicit shared_ptr constructor due to C++11 error (Bob McElrath)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28c229324d02963d79d66df85efe6bd78db451e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b28c229324d02963d79d66df85efe6bd78db451e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28c229324d02963d79d66df85efe6bd78db451e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2ce2c1f0fb12af82f3ff9f20c66492b9263fa10"
      },
      {
        "sha": "a83f3c2426429ddf3e38cfc26204398c097a23d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83f3c2426429ddf3e38cfc26204398c097a23d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a83f3c2426429ddf3e38cfc26204398c097a23d4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8bda5a037360c8476a1dd0fd77099d80090405b6",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28c229324d02963d79d66df85efe6bd78db451e/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28c229324d02963d79d66df85efe6bd78db451e/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=b28c229324d02963d79d66df85efe6bd78db451e",
        "patch": "@@ -563,7 +563,7 @@ void RPCRunLater(const std::string& name, boost::function<void(void)> func, int6\n     deadlineTimers.erase(name);\n     RPCTimerInterface* timerInterface = timerInterfaces[0];\n     LogPrint(\"rpc\", \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n-    deadlineTimers.insert(std::make_pair(name, timerInterface->NewTimer(func, nSeconds*1000)));\n+    deadlineTimers.insert(std::make_pair(name, boost::shared_ptr<RPCTimerBase>(timerInterface->NewTimer(func, nSeconds*1000))));\n }\n \n const CRPCTable tableRPC;"
      }
    ]
  },
  {
    "sha": "725539ea03769416d3502feeb4dfcbec3fbb7ae0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjU1MzllYTAzNzY5NDE2ZDM1MDJmZWViNGRmY2JlYzNmYmI3YWUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:40:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-29T12:40:33Z"
      },
      "message": "Merge pull request #6863\n\n0be387a unittest: fix test for null tx input (Daniel Kraft)",
      "tree": {
        "sha": "a1d0d30e7b6defd2559b90c180edb0978d75b070",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1d0d30e7b6defd2559b90c180edb0978d75b070"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/725539ea03769416d3502feeb4dfcbec3fbb7ae0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWMhPBAAoJEHSBCwEjRsmmIdIIAMtkwbSgdtzxWtK2upqclSxB\npPZdL/clklLd81dMdSIEKQypsg7/wTkQWeedVQnKMvtWbQkTG2jXy8+/8ItFupCa\nceQSKs/anSnnffRAg1gt6esWiyTOlaJ6yKfgNj4Y7A+yqS+M2MSo4vo9jYVoKxKC\nWnQMsHOP1cR3Je1JgBw5zWZrzyOKJeaWdjIyjnAm+p9PfzBOeLpYmb4rtNH1X/6W\n2Ugn71/zpEGHI9/780QbIDQ5QeTGnuxvG3WIOKG/7E3nFRozApBRrriSjJzVvafD\nAFM3R7kwDiwXWyhBC920CkqKinPEHOGdG8HXhWjr5a9F5zQaA6/EbPlSocJtTTk=\n=DBmn\n-----END PGP SIGNATURE-----",
        "payload": "tree a1d0d30e7b6defd2559b90c180edb0978d75b070\nparent b28c229324d02963d79d66df85efe6bd78db451e\nparent 0be387a536f03a1dd0df66176fc354fb0895be48\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446122428 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446122433 +0100\n\nMerge pull request #6863\n\n0be387a unittest: fix test for null tx input (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725539ea03769416d3502feeb4dfcbec3fbb7ae0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/725539ea03769416d3502feeb4dfcbec3fbb7ae0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725539ea03769416d3502feeb4dfcbec3fbb7ae0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b28c229324d02963d79d66df85efe6bd78db451e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28c229324d02963d79d66df85efe6bd78db451e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b28c229324d02963d79d66df85efe6bd78db451e"
      },
      {
        "sha": "0be387a536f03a1dd0df66176fc354fb0895be48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be387a536f03a1dd0df66176fc354fb0895be48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0be387a536f03a1dd0df66176fc354fb0895be48"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cc059e814fdf1100b6277636727fc9400f0e54d1",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/725539ea03769416d3502feeb4dfcbec3fbb7ae0/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/725539ea03769416d3502feeb4dfcbec3fbb7ae0/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "patch": "@@ -64,9 +64,13 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"]],\n \"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff655151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n-[\"Null txin\"],\n-[[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"HASH160 0x14 0x02dae7dbbda56097959cba59b1989dd3e47937bf EQUAL\"]],\n-\"01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff6e49304602210086f39e028e46dafa8e1e3be63906465f4cf038fbe5ed6403dc3e74ae876e6431022100c4625c675cfc5c7e3a0e0d7eaec92ac24da20c73a88eb40d09253e51ac6def5201232103a183ddc41e84753aca47723c965d1b5c8b0e2b537963518355e6dd6cf8415e50acffffffff010000000000000000015100000000\", \"P2SH\"],\n+[\"Null txin, but without being a coinbase (because there are two inputs)\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"],\n+  [\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"]],\n+\"01000000020000000000000000000000000000000000000000000000000000000000000000ffffffff00ffffffff00010000000000000000000000000000000000000000000000000000000000000000000000ffffffff010000000000000000015100000000\", \"P2SH\"],\n+[[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"1\"],\n+  [\"0000000000000000000000000000000000000000000000000000000000000000\", -1, \"1\"]],\n+\"010000000200010000000000000000000000000000000000000000000000000000000000000000000000ffffffff0000000000000000000000000000000000000000000000000000000000000000ffffffff00ffffffff010000000000000000015100000000\", \"P2SH\"],\n \n [\"Same as the transactions in valid with one input SIGHASH_ALL and one SIGHASH_ANYONECANPAY, but we set the _ANYONECANPAY sequence number, invalidating the SIGHASH_ALL signature\"],\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x21 0x035e7f0d4d0841bcd56c39337ed086b1a633ee770c1ffdd94ac552a95ac2ce0efc CHECKSIG\"],"
      }
    ]
  },
  {
    "sha": "6342a4889bc4add42c270e1e0aee246a7f0692dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzQyYTQ4ODliYzRhZGQ0MmMyNzBlMWUwYWVlMjQ2YTdmMDY5MmRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-29T15:52:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-29T15:52:40Z"
      },
      "message": "Init: Use DEFAULT_TRANSACTION_MINFEE in help message",
      "tree": {
        "sha": "31f04f5dba3b802ad901aac945c08af538f76f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31f04f5dba3b802ad901aac945c08af538f76f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6342a4889bc4add42c270e1e0aee246a7f0692dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6342a4889bc4add42c270e1e0aee246a7f0692dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6342a4889bc4add42c270e1e0aee246a7f0692dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6342a4889bc4add42c270e1e0aee246a7f0692dc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c73a130ebf2369381241d0053c8fa0a301e0fc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48680edc2428e7f0d0b8e503a42c29145e0c1ef4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6342a4889bc4add42c270e1e0aee246a7f0692dc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6342a4889bc4add42c270e1e0aee246a7f0692dc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6342a4889bc4add42c270e1e0aee246a7f0692dc",
        "patch": "@@ -374,7 +374,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));"
      }
    ]
  },
  {
    "sha": "28313b83fc1a16b5e6da2b868b5f297050ce8b05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODMxM2I4M2ZjMWExNmI1ZTZkYTJiODY4YjVmMjk3MDUwY2U4YjA1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-22T11:33:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-29T17:01:39Z"
      },
      "message": "[qt] Use fixed pitch font for the rpc console\n\nAlso:\n* Preserve white space\n* Make fixed font as large as default font",
      "tree": {
        "sha": "f0362697b3de238017fb38565bf3208537e34abb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0362697b3de238017fb38565bf3208537e34abb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28313b83fc1a16b5e6da2b868b5f297050ce8b05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28313b83fc1a16b5e6da2b868b5f297050ce8b05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28313b83fc1a16b5e6da2b868b5f297050ce8b05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28313b83fc1a16b5e6da2b868b5f297050ce8b05/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8daffe227bc67706d6640b67776f7711a6a98607",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8daffe227bc67706d6640b67776f7711a6a98607",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8daffe227bc67706d6640b67776f7711a6a98607"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 18,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a488d298c46a7e53604bad84b07ba71f4824e291",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "patch": "@@ -218,7 +218,7 @@ QVariant AddressTableModel::data(const QModelIndex &index, int role) const\n         QFont font;\n         if(index.column() == Address)\n         {\n-            font = GUIUtil::bitcoinAddressFont();\n+            font = GUIUtil::fixedPitchFont();\n         }\n         return font;\n     }"
      },
      {
        "sha": "1c0056a7bd074bfa7bcba2337eec652800339114",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "patch": "@@ -88,7 +88,7 @@ QString dateTimeStr(qint64 nTime)\n     return dateTimeStr(QDateTime::fromTime_t((qint32)nTime));\n }\n \n-QFont bitcoinAddressFont()\n+QFont fixedPitchFont()\n {\n     QFont font(\"Monospace\");\n #if QT_VERSION >= 0x040800\n@@ -103,7 +103,7 @@ void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)\n {\n     parent->setFocusProxy(widget);\n \n-    widget->setFont(bitcoinAddressFont());\n+    widget->setFont(fixedPitchFont());\n #if QT_VERSION >= 0x040700\n     // We don't want translators to use own addresses in translations\n     // and this is the only place, where this address is supplied."
      },
      {
        "sha": "ec678c4af2277a3bd32982cca92a14bad30ab903",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "patch": "@@ -37,8 +37,8 @@ namespace GUIUtil\n     QString dateTimeStr(const QDateTime &datetime);\n     QString dateTimeStr(qint64 nTime);\n \n-    // Render Bitcoin addresses in monospace font\n-    QFont bitcoinAddressFont();\n+    // Return a monospace font\n+    QFont fixedPitchFont();\n \n     // Set up widgets for address and amounts\n     void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent);"
      },
      {
        "sha": "5be750772f273220e74bf2323ce986027e8c9390",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "patch": "@@ -462,13 +462,19 @@ void RPCConsole::clear()\n     }\n \n     // Set default style sheet\n+    QFontInfo fixedFontInfo(GUIUtil::fixedPitchFont());\n+    // Try to make font equally large on different OS.\n+    QString ptSize = QString(\"%1pt\").arg(QFontInfo(QFont()).pointSize());\n     ui->messagesWidget->document()->setDefaultStyleSheet(\n+        QString(\n                 \"table { }\"\n                 \"td.time { color: #808080; padding-top: 3px; } \"\n+                \"td.message { font-family: %1; font-size: %2; white-space:pre-wrap; } \"\n                 \"td.cmd-request { color: #006060; } \"\n                 \"td.cmd-error { color: red; } \"\n                 \"b { color: #006060; } \"\n-                );\n+            ).arg(fixedFontInfo.family(), ptSize)\n+        );\n \n     message(CMD_REPLY, (tr(\"Welcome to the Bitcoin Core RPC console.\") + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and <b>Ctrl-L</b> to clear screen.\") + \"<br>\" +\n@@ -494,7 +500,7 @@ void RPCConsole::message(int category, const QString &message, bool html)\n     if(html)\n         out += message;\n     else\n-        out += GUIUtil::HtmlEscape(message, true);\n+        out += GUIUtil::HtmlEscape(message, false);\n     out += \"</td></tr></table>\";\n     ui->messagesWidget->append(out);\n }\n@@ -849,4 +855,4 @@ void RPCConsole::showOrHideBanTableIfRequired()\n     bool visible = clientModel->getBanTableModel()->shouldShow();\n     ui->banlistWidget->setVisible(visible);\n     ui->banHeading->setVisible(visible);\n-}\n\\ No newline at end of file\n+}"
      },
      {
        "sha": "d5932ff149ca00338e0bd81d3f714dbb2c38aaa2",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "patch": "@@ -71,6 +71,7 @@ private Q_SLOTS:\n \n public Q_SLOTS:\n     void clear();\n+    /** Append the message to the message widget */\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);"
      },
      {
        "sha": "4f4b5b70d50e6eea5340af81f613f1df7e605e71",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "patch": "@@ -40,7 +40,7 @@ SendCoinsEntry::SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *pare\n     // normal bitcoin address field\n     GUIUtil::setupAddressWidget(ui->payTo, this);\n     // just a label for displaying bitcoin address(es)\n-    ui->payTo_is->setFont(GUIUtil::bitcoinAddressFont());\n+    ui->payTo_is->setFont(GUIUtil::fixedPitchFont());\n \n     // Connect signals\n     connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));"
      },
      {
        "sha": "96f50a26563ff53db27eb315bfa13e8c21bfcc6d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28313b83fc1a16b5e6da2b868b5f297050ce8b05/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "patch": "@@ -51,8 +51,8 @@ SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *platformSt\n     ui->messageIn_VM->installEventFilter(this);\n     ui->signatureIn_VM->installEventFilter(this);\n \n-    ui->signatureOut_SM->setFont(GUIUtil::bitcoinAddressFont());\n-    ui->signatureIn_VM->setFont(GUIUtil::bitcoinAddressFont());\n+    ui->signatureOut_SM->setFont(GUIUtil::fixedPitchFont());\n+    ui->signatureIn_VM->setFont(GUIUtil::fixedPitchFont());\n }\n \n SignVerifyMessageDialog::~SignVerifyMessageDialog()"
      }
    ]
  },
  {
    "sha": "30d9662bd780e298516d514984ced1f88ec5bc3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGQ5NjYyYmQ3ODBlMjk4NTE2ZDUxNDk4NGNlZDFmODhlYzViYzNi",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-29T18:24:49Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-10-29T18:24:49Z"
      },
      "message": "Reject invalid pubkeys when reading ckey items from the wallet.\n\nThis makes the behavior more consistent with key objects and will\n reject some corrupted pubkeys (e.g. zero length).",
      "tree": {
        "sha": "a0836c96114e13b28dc4cbd46d4a3ef875212866",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0836c96114e13b28dc4cbd46d4a3ef875212866"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30d9662bd780e298516d514984ced1f88ec5bc3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30d9662bd780e298516d514984ced1f88ec5bc3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30d9662bd780e298516d514984ced1f88ec5bc3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30d9662bd780e298516d514984ced1f88ec5bc3b/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/725539ea03769416d3502feeb4dfcbec3fbb7ae0"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea8a4eb043cc56876dda668fcce43425f179ec6a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30d9662bd780e298516d514984ced1f88ec5bc3b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30d9662bd780e298516d514984ced1f88ec5bc3b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=30d9662bd780e298516d514984ced1f88ec5bc3b",
        "patch": "@@ -512,8 +512,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"ckey\")\n         {\n-            vector<unsigned char> vchPubKey;\n+            CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n             vector<unsigned char> vchPrivKey;\n             ssValue >> vchPrivKey;\n             wss.nCKeys++;"
      }
    ]
  },
  {
    "sha": "a6efc019085fd70790ad7fa97078ce02d8f8dec3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmVmYzAxOTA4NWZkNzA3OTBhZDdmYTk3MDc4Y2UwMmQ4ZjhkZWMz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-06-30T23:22:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-29T23:32:08Z"
      },
      "message": "Bugfix: Omit wallet-related options from -help when wallet is disabled",
      "tree": {
        "sha": "7fa3e8a3a97b7eea99ab6dda743e6064cbcf4eba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fa3e8a3a97b7eea99ab6dda743e6064cbcf4eba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6efc019085fd70790ad7fa97078ce02d8f8dec3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6efc019085fd70790ad7fa97078ce02d8f8dec3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6efc019085fd70790ad7fa97078ce02d8f8dec3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6efc019085fd70790ad7fa97078ce02d8f8dec3/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f9260f45843e5b0e1f4156af0f7b6d6c2d93a76"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c8a9a08ffce5119b24ece897ed24790964eec8c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6efc019085fd70790ad7fa97078ce02d8f8dec3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6efc019085fd70790ad7fa97078ce02d8f8dec3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a6efc019085fd70790ad7fa97078ce02d8f8dec3",
        "patch": "@@ -404,12 +404,16 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n+#endif\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+#endif\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));"
      }
    ]
  },
  {
    "sha": "d482c0a7b246aa935595678a0c0e2f5ad530665b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDgyYzBhN2IyNDZhYTkzNTU5NTY3OGEwYzBlMmY1YWQ1MzA2NjVi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-30T23:38:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-30T23:38:31Z"
      },
      "message": "Merge pull request #6896\n\ne9e6163 Make -checkmempool=1 not fail through int32 overflow (Pieter Wuille)",
      "tree": {
        "sha": "70ef1c12005b1ad98e3cff8c9bdadbf959743f89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70ef1c12005b1ad98e3cff8c9bdadbf959743f89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d482c0a7b246aa935595678a0c0e2f5ad530665b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWM/93AAoJEHSBCwEjRsmmkE0IAIidh76/EPl0e9RtIOjKCYVJ\n0PFjPn+VJBTaFwEhOPeEdX/QlMA4umihABRbpF2T8SAnBZf/Pg0JglBSNelx1ZHq\nX8TbD6aGVrTAfVSp1wGtH54Rd9gdeTbkPE2ha1CVZvRHq7LMg3oIWeLnYOWspovF\nuVVs70C6eAoGyB89VxQGOkqaU1/Na65ngfpguWDeRMHQtJEBXpTmD0GWU0ujFwH3\na5bSRpGHw0G9lawCy7PgJS0DGzGQPTFcgrPaHWjBtgxDv06NY8TaXLnuaehotjux\nLVCbKnIwri3A5FkPb7SgkzhWTOFWgTTGqldfyBgxSZrm24S2mHyxD41FkA3Hef4=\n=2q7o\n-----END PGP SIGNATURE-----",
        "payload": "tree 70ef1c12005b1ad98e3cff8c9bdadbf959743f89\nparent 725539ea03769416d3502feeb4dfcbec3fbb7ae0\nparent e9e616323bc44daf61f4358f5b2de58e90b5c602\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446248293 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446248311 +0100\n\nMerge pull request #6896\n\ne9e6163 Make -checkmempool=1 not fail through int32 overflow (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d482c0a7b246aa935595678a0c0e2f5ad530665b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d482c0a7b246aa935595678a0c0e2f5ad530665b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d482c0a7b246aa935595678a0c0e2f5ad530665b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725539ea03769416d3502feeb4dfcbec3fbb7ae0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/725539ea03769416d3502feeb4dfcbec3fbb7ae0"
      },
      {
        "sha": "e9e616323bc44daf61f4358f5b2de58e90b5c602",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9e616323bc44daf61f4358f5b2de58e90b5c602",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9e616323bc44daf61f4358f5b2de58e90b5c602"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7b5843a8d0d0fd4c1ef116841344552c8a656ddc",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d482c0a7b246aa935595678a0c0e2f5ad530665b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d482c0a7b246aa935595678a0c0e2f5ad530665b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d482c0a7b246aa935595678a0c0e2f5ad530665b",
        "patch": "@@ -360,7 +360,7 @@ class CTxMemPool\n      * check does nothing.\n      */\n     void check(const CCoinsViewCache *pcoins) const;\n-    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967296.0; }\n+    void setSanityCheck(double dFrequency = 1.0) { nCheckFrequency = dFrequency * 4294967295.0; }\n \n     // addUnchecked must updated state for all ancestors of a given transaction,\n     // to track size/count of descendant transactions.  First version of"
      }
    ]
  },
  {
    "sha": "48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGI1Yjg0ZWU1MTFkNWNjZDBkNDdiYjAwMThjMWIzYzlkZGViZWZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-30T23:39:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-30T23:39:50Z"
      },
      "message": "Merge pull request #6906\n\n30d9662 Reject invalid pubkeys when reading ckey items from the wallet. (Gregory Maxwell)",
      "tree": {
        "sha": "c41db909f64474f51a2210cfec2a67f7f5dde062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c41db909f64474f51a2210cfec2a67f7f5dde062"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWM//GAAoJEHSBCwEjRsmmYKYH/0p6axrlq0Ps7R2gXCYR09pP\nypMj6corr5tqSmySRTxSscfBP2+8WaIGjf0rZSgYUUIM2MTO3pr/HRXiBFG1yLe0\nUvHIYg0xUZxHhEmEK4qjE7rJKhHQ5LXaKhejt25FTCLSbWavVqljAkdbevx88/kX\ng5xFuiZsx6aC+6os5lv1nXx/6jSjmalc5LnNEh0Fi9/2BKrgjnPDOEA2wg861b8w\n4abHIgsOQpzjpzgvKnCHLjNQLxRY7wZkF99KAiqHHTOtAMmGSWWSO1OS+rc9tWjm\n7Hx5Eys0r7hEAQfb64Jsfdb9hfb5T0a7JUSO4TemJSto1gy9NHU9adurSmz7kz4=\n=2LZ5\n-----END PGP SIGNATURE-----",
        "payload": "tree c41db909f64474f51a2210cfec2a67f7f5dde062\nparent d482c0a7b246aa935595678a0c0e2f5ad530665b\nparent 30d9662bd780e298516d514984ced1f88ec5bc3b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446248385 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446248390 +0100\n\nMerge pull request #6906\n\n30d9662 Reject invalid pubkeys when reading ckey items from the wallet. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d482c0a7b246aa935595678a0c0e2f5ad530665b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d482c0a7b246aa935595678a0c0e2f5ad530665b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d482c0a7b246aa935595678a0c0e2f5ad530665b"
      },
      {
        "sha": "30d9662bd780e298516d514984ced1f88ec5bc3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30d9662bd780e298516d514984ced1f88ec5bc3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30d9662bd780e298516d514984ced1f88ec5bc3b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea8a4eb043cc56876dda668fcce43425f179ec6a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
        "patch": "@@ -512,8 +512,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"ckey\")\n         {\n-            vector<unsigned char> vchPubKey;\n+            CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n+            if (!vchPubKey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n             vector<unsigned char> vchPrivKey;\n             ssValue >> vchPrivKey;\n             wss.nCKeys++;"
      }
    ]
  },
  {
    "sha": "a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmU4MGU0MDE3MTZiMGFjMTViMmJmM2M1M2ZkMDc1NzFkZTJiM2Q3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T10:07:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-10-31T10:07:24Z"
      },
      "message": "Merge pull request #6883\n\nc939792 Add BIP65 CHECKLOCKTIMEVERIFY to release notes (Peter Todd)",
      "tree": {
        "sha": "b25d1a00d5db5683ce65cc435c33a2ca5b5e93f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b25d1a00d5db5683ce65cc435c33a2ca5b5e93f6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
      "comment_count": 1,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWNJLcAAoJEHSBCwEjRsmmHXkH/3yG9N6Sz73nT2YeqSJnM1dT\nllRssKCOBKFMxodBMpT756n4ALEf0kNik50VlXtrWO79+hQ3zaEdyYiAVym3JFDa\n2e/yeUU5/Plyxm2c1HNfxq57x7iy+gH9o9h1KbycWE0tGWtupxsYdgTVy3AXP5JJ\no9fm4+TZUUkMPJ3yTfqKgo8kYkHbgtNijjqYaVVggztyOfxq1dx+BdorNkcZHj6O\nHwtmUdX/PCxyryCTTQOCo+WArdXvo+h48N9fmMjz9+hcau9kFL2Qkf3HtQTN5TjB\nO2DASVxU0oWzxhUyZSWdwWTVc7LJO6qrlL8JZntgBqdDDqjQ4MNDWgXjz7BiVOI=\n=irVz\n-----END PGP SIGNATURE-----",
        "payload": "tree b25d1a00d5db5683ce65cc435c33a2ca5b5e93f6\nparent 48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff\nparent c939792baaaa5f34ee4079b871d56054e36fb26b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446286039 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446286044 +0100\n\nMerge pull request #6883\n\nc939792 Add BIP65 CHECKLOCKTIMEVERIFY to release notes (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48b5b84ee511d5ccd0d47bb0018c1b3c9ddebeff"
      },
      {
        "sha": "c939792baaaa5f34ee4079b871d56054e36fb26b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c939792baaaa5f34ee4079b871d56054e36fb26b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c939792baaaa5f34ee4079b871d56054e36fb26b"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd034743e62151cac5383044f59b1ec82f87f2d1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
        "patch": "@@ -124,6 +124,33 @@ sanity check. Since 0.12, these are no longer stored. When loading a\n 0.12 wallet into an older version, it will automatically rescan to avoid\n failed checks.\n \n+BIP65 - CHECKLOCKTIMEVERIFY\n+---------------------------\n+\n+Previously it was impossible to create a transaction output that was guaranteed\n+to be unspendable until a specific date in the future. CHECKLOCKTIMEVERIFY is a\n+new opcode that allows a script to check if a specific block height or time has\n+been reached, failing the script otherwise. This enables a wide variety of new\n+functionality such as time-locked escrows, secure payment channels, etc.\n+\n+BIP65 implements CHECKLOCKTIMEVERIFY by introducing block version 4, which adds\n+additional restrictions to the NOP2 opcode. The same miner-voting mechanism as\n+in BIP34 and BIP66 is used: when 751 out of a sequence of 1001 blocks have\n+version number 4 or higher, the new consensus rule becomes active for those\n+blocks. When 951 out of a sequence of 1001 blocks have version number 4 or\n+higher, it becomes mandatory for all blocks and blocks with versions less than\n+4 are rejected.\n+\n+Bitcoin Core's block templates are now for version 4 blocks only, and any\n+mining software relying on its `getblocktemplate` must be updated in parallel\n+to use either libblkmaker version FIXME or any version from 0.5.1 onward. If\n+you are solo mining, this will affect you the moment you upgrade Bitcoin Core,\n+which must be done prior to BIP65 achieving its 951/1001 status.  If you are\n+mining with the stratum mining protocol: this does not affect you.  If you are\n+mining with the getblocktemplate protocol to a pool: this will affect you at\n+the pool operator's discretion, which must be no later than BIP65 achieving its\n+951/1001 status.\n+\n 0.12.0 Change log\n =================\n "
      }
    ]
  },
  {
    "sha": "7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDk3ZTgwNWJkNDM3YjA3ZmMzZTU5MjBmMGMxZjg0YmYxMGIwZWJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-01T10:43:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-01T10:45:06Z"
      },
      "message": "tests: Initialize networking on windows",
      "tree": {
        "sha": "a5dcedb3c52b5c2974e1445a32df30708e108b9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5dcedb3c52b5c2974e1445a32df30708e108b9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "23e5e66d8443778a3043954ee7350f1ac61b0cda",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
        "patch": "@@ -36,6 +36,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n         ECC_Start();\n         SetupEnvironment();\n+        SetupNetworking();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(chainName);"
      }
    ]
  },
  {
    "sha": "02a95be97759e70d9e7537775c95eec219c8333e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmE5NWJlOTc3NTllNzBkOWU3NTM3Nzc1Yzk1ZWVjMjE5YzgzMzNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-01T15:03:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-01T15:11:50Z"
      },
      "message": "qt: translation update prior to opening 0.12 translations\n\nAlso update transifex slug for new version.",
      "tree": {
        "sha": "856fa428dc081f2b610d69634075f937d5eb7cd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/856fa428dc081f2b610d69634075f937d5eb7cd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02a95be97759e70d9e7537775c95eec219c8333e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWNivQAAoJEHSBCwEjRsmmLIkH/33X881f3GTSEL/bk8s8jnd9\nOEs8gvDl74edbUfFf/3KxpTgCIfa47wzs3b9u2NjQlKkHwvmeATnMdBJroCBvdnk\nKKl83j6zQEGShOS4PNe55uI2NlhhTbXd94b6lXyHYfsEcLET0uH49IF/d3kXI9ee\nEXEz0AC6Jl7D+FIBKmJailUVgHPijjorjmioXSNvvU9zMcZtqUbDq7PeBV+2HP4Y\nR0t5/kRV73bzS/HF7o2Xayw//jZnyW4x2QTMTahbngqPeaxbxk/hG9EhqbTBCJMP\n2sNzcO4NJy+Ja2N0MLaScMfqXq7/OZ7UshkDaDYO5j9v12Bu9kzQiPcrR78GT9I=\n=iU3E\n-----END PGP SIGNATURE-----",
        "payload": "tree 856fa428dc081f2b610d69634075f937d5eb7cd4\nparent a6e80e401716b0ac15b2bf3c53fd07571de2b3d7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446390203 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446390710 +0100\n\nqt: translation update prior to opening 0.12 translations\n\nAlso update transifex slug for new version.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a95be97759e70d9e7537775c95eec219c8333e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02a95be97759e70d9e7537775c95eec219c8333e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a95be97759e70d9e7537775c95eec219c8333e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6e80e401716b0ac15b2bf3c53fd07571de2b3d7"
      }
    ],
    "stats": {
      "total": 223,
      "additions": 129,
      "deletions": 94
    },
    "files": [
      {
        "sha": "d6cc3aab8879ce3af16c8fa1b5ab5f5d3df5839b",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02a95be97759e70d9e7537775c95eec219c8333e/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02a95be97759e70d9e7537775c95eec219c8333e/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=02a95be97759e70d9e7537775c95eec219c8333e",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-011x]\n+[bitcoin.qt-translation-012x]\n file_filter = src/qt/locale/bitcoin_<lang>.ts\n source_file = src/qt/locale/bitcoin_en.ts\n source_lang = en"
      },
      {
        "sha": "538b8912abc0b0682831e7f3eec15ce53d2d70af",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 16,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02a95be97759e70d9e7537775c95eec219c8333e/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02a95be97759e70d9e7537775c95eec219c8333e/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=02a95be97759e70d9e7537775c95eec219c8333e",
        "patch": "@@ -13,6 +13,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"(1 = keep tx meta data e.g. account owner and payment request information, 2 \"\n \"= drop tx meta data)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"-maxtxfee is set very high! Fees this large could be paid on a single \"\n+\"transaction.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"-paytxfee is set very high! This is the transaction fee you will pay if you \"\n+\"send a transaction.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Allow JSON-RPC connections from specified source. Valid for <ip> are a \"\n \"single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or \"\n \"a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"),\n@@ -42,10 +48,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Distributed under the MIT software license, see the accompanying file \"\n \"COPYING or <http://www.opensource.org/licenses/mit-license.php>.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Error: Listening for incoming connections failed (listen returned error %s)\"),\n+\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Error: Unsupported argument -socks found. Setting SOCKS version isn't \"\n-\"possible anymore, only SOCKS5 proxies are supported.\"),\n+\"Error reading wallet.dat! All keys read correctly, but transaction data or \"\n+\"address book entries might be missing or incorrect.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Error: Listening for incoming connections failed (listen returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Execute command when a relevant alert is received or we see a really long \"\n \"fork (%s in cmd is replaced by message)\"),\n@@ -127,9 +135,18 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"the OpenSSL Toolkit <https://www.openssl.org/> and cryptographic software \"\n \"written by Eric Young and UPnP software written by Thomas Bernard.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Total length of network version string (%i) exceeds maximum length (%i). \"\n+\"Reduce the number or size of uacomments.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = \"\n+\"no limit (default: %d)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Unable to bind to %s on this computer. Bitcoin Core is probably already \"\n \"running.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n+\"Unsupported argument -socks found. Setting SOCKS version isn't possible \"\n+\"anymore, only SOCKS5 proxies are supported.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Use UPnP to map the listening port (default: 1 when listening and no -proxy)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: \"\n@@ -141,21 +158,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"WARNING: check your network connection, %d blocks received in the last %d \"\n \"hours (%d expected)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Warning: -maxtxfee is set very high! Fees this large could be paid on a \"\n-\"single transaction.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Warning: -paytxfee is set very high! This is the transaction fee you will \"\n-\"pay if you send a transaction.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: The network does not appear to fully agree! Some miners appear to \"\n \"be experiencing issues.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: We do not appear to fully agree with our peers! You may need to \"\n \"upgrade, or other nodes may need to upgrade.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"Warning: error reading wallet.dat! All keys read correctly, but transaction \"\n-\"data or address book entries might be missing or incorrect.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as \"\n \"wallet.{timestamp}.bak in %s; if your balance or transactions are incorrect \"\n \"you should restore from a backup.\"),\n@@ -171,6 +179,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"(default: 1)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"-maxmempool must be at least %d MB\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"<category> can be:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept command line and JSON-RPC commands\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\"),\n@@ -212,7 +221,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error reading from database, shutting down.\")\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occurred, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unsupported argument -tor found, use -onion.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Generate coins (default: %u)\"),\n@@ -233,6 +241,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s' (\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid netmask specified in -whitelist: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable transactions in memory (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep the transaction memory pool below <n> megabytes (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for connections on <port> (default: %u or testnet: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading addresses...\"),\n@@ -294,9 +303,12 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"UI Options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to bind to %s on this computer (bind returned error %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unable to start HTTP server. See debug log for details.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unknown network specified in -onlynet: '%s'\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -benchmark ignored, use -debug=bench.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -debugnet ignored, use -debug=net.\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Unsupported argument -tor found, use -onion.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Upgrade wallet to latest format\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use UPnP to map the listening port (default: %u)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Use the test network\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"User Agent comment (%s) contains unsafe characters.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Username for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying blocks...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Verifying wallet...\"),\n@@ -305,8 +317,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet needed to be rewritten: restart Bitcoi\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: This version is obsolete; upgrade required!\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: Unsupported argument -benchmark ignored, use -debug=bench.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: Unsupported argument -debugnet ignored, use -debug=net.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"You need to rebuild the database using -reindex to change -txindex\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Zapping all transactions from wallet...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"ZeroMQ notification options:\"),"
      },
      {
        "sha": "58921a9f8b1dc9ce0e3b90c0c3ffa0f010210fb4",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 102,
        "deletions": 77,
        "changes": 179,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02a95be97759e70d9e7537775c95eec219c8333e/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02a95be97759e70d9e7537775c95eec219c8333e/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=02a95be97759e70d9e7537775c95eec219c8333e",
        "patch": "@@ -3706,7 +3706,7 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+249\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+258\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3731,7 +3731,7 @@\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"-117\"/>\n+        <location line=\"-118\"/>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3771,17 +3771,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+109\"/>\n+        <location line=\"+110\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+3\"/>\n         <source>Fee (in %s/kB) to add to transactions you send (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+38\"/>\n         <source>Pruning blockstore...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3796,17 +3796,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n-        <source>Use the test network</source>\n-        <translation>Use the test network</translation>\n-    </message>\n-    <message>\n-        <location line=\"-123\"/>\n+        <location line=\"-119\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accept connections from outside (default: 1 if no -proxy or -connect)</translation>\n     </message>\n     <message>\n-        <location line=\"-157\"/>\n+        <location line=\"-160\"/>\n         <source>Bind to given address and always listen on it. Use [host]:port notation for IPv6</source>\n         <translation>Bind to given address and always listen on it. Use [host]:port notation for IPv6</translation>\n     </message>\n@@ -3821,7 +3816,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+13\"/>\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</translation>\n     </message>\n@@ -3841,12 +3836,12 @@\n         <translation>This is a pre-release test build - use at your own risk - do not use for mining or merchant applications</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+13\"/>\n         <source>Unable to bind to %s on this computer. Bitcoin Core is probably already running.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+6\"/>\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3860,11 +3855,6 @@\n         <source>WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n-    <message>\n-        <location line=\"+6\"/>\n-        <source>Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.</source>\n-        <translation>Warning: -paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.</translation>\n-    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues.</source>\n@@ -3875,11 +3865,6 @@\n         <source>Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.</source>\n         <translation>Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade.</translation>\n     </message>\n-    <message>\n-        <location line=\"+3\"/>\n-        <source>Warning: error reading wallet.dat! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n-        <translation>Warning: error reading wallet.dat! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</translation>\n-    </message>\n     <message>\n         <location line=\"+3\"/>\n         <source>Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as wallet.{timestamp}.bak in %s; if your balance or transactions are incorrect you should restore from a backup.</source>\n@@ -3895,6 +3880,11 @@\n         <source>(default: 1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>-maxmempool must be at least %d MB</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>&lt;category&gt; can be:</source>\n@@ -3986,7 +3976,7 @@\n         <translation>Error: Disk space is low!</translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+1\"/>\n         <source>Failed to listen on any port. Use -listen=0 if you want this.</source>\n         <translation>Failed to listen on any port. Use -listen=0 if you want this.</translation>\n     </message>\n@@ -4006,7 +3996,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+20\"/>\n+        <location line=\"+9\"/>\n+        <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+12\"/>\n         <source>Not enough file descriptors available.</source>\n         <translation>Not enough file descriptors available.</translation>\n     </message>\n@@ -4041,12 +4036,32 @@\n         <translation>Specify wallet file (within data directory)</translation>\n     </message>\n     <message>\n-        <location line=\"+17\"/>\n+        <location line=\"+16\"/>\n+        <source>Unsupported argument -benchmark ignored, use -debug=bench.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unsupported argument -debugnet ignored, use -debug=net.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Unsupported argument -tor found, use -onion.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>Use UPnP to map the listening port (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+1\"/>\n+        <source>User Agent comment (%s) contains unsafe characters.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n         <source>Verifying blocks...</source>\n         <translation>Verifying blocks...</translation>\n     </message>\n@@ -4071,17 +4086,17 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+3\"/>\n+        <location line=\"+1\"/>\n         <source>You need to rebuild the database using -reindex to change -txindex</source>\n         <translation>You need to rebuild the database using -reindex to change -txindex</translation>\n     </message>\n     <message>\n-        <location line=\"-89\"/>\n+        <location line=\"-91\"/>\n         <source>Imports blocks from external blk000??.dat file</source>\n         <translation>Imports blocks from external blk000??.dat file</translation>\n     </message>\n     <message>\n-        <location line=\"-206\"/>\n+        <location line=\"-208\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4111,17 +4126,12 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+11\"/>\n         <source>Error: Listening for incoming connections failed (listen returned error %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n         <location line=\"+2\"/>\n-        <source>Error: Unsupported argument -socks found. Setting SOCKS version isn&apos;t possible anymore, only SOCKS5 proxies are supported.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+3\"/>\n         <source>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</source>\n         <translation>Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)</translation>\n     </message>\n@@ -4171,12 +4181,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+18\"/>\n-        <source>Warning: -maxtxfee is set very high! Fees this large could be paid on a single transaction.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+40\"/>\n         <source>Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4191,7 +4196,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+6\"/>\n         <source>Accept public REST requests (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4231,12 +4236,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n-        <source>Error: Unsupported argument -tor found, use -onion.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+12\"/>\n         <source>Information</source>\n         <translation>Information</translation>\n     </message>\n@@ -4276,7 +4276,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+11\"/>\n         <source>Need to specify a port with -whitebind: &apos;%s&apos;</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4391,7 +4391,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+6\"/>\n+        <location line=\"+9\"/>\n         <source>Username for JSON-RPC connections</source>\n         <translation>Username for JSON-RPC connections</translation>\n     </message>\n@@ -4406,17 +4406,7 @@\n         <translation>Warning</translation>\n     </message>\n     <message>\n-        <location line=\"+2\"/>\n-        <source>Warning: Unsupported argument -benchmark ignored, use -debug=bench.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Warning: Unsupported argument -debugnet ignored, use -debug=net.</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+3\"/>\n         <source>Zapping all transactions from wallet...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4436,22 +4426,22 @@\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n     <message>\n-        <location line=\"-64\"/>\n+        <location line=\"-65\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-195\"/>\n+        <location line=\"-196\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+242\"/>\n+        <location line=\"+246\"/>\n         <source>Upgrade wallet to latest format</source>\n         <translation>Upgrade wallet to latest format</translation>\n     </message>\n     <message>\n-        <location line=\"-36\"/>\n+        <location line=\"-39\"/>\n         <source>Rescan the block chain for missing wallet transactions</source>\n         <translation>Rescan the block chain for missing wallet transactions</translation>\n     </message>\n@@ -4476,12 +4466,32 @@\n         <translation>Error loading wallet.dat: Wallet corrupted</translation>\n     </message>\n     <message>\n-        <location line=\"-196\"/>\n+        <location line=\"-205\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+49\"/>\n+        <location line=\"+3\"/>\n+        <source>-maxtxfee is set very high! Fees this large could be paid on a single transaction.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+32\"/>\n+        <source>Do not keep transactions in the mempool longer than &lt;n&gt; hours (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Error reading wallet.dat! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+17\"/>\n         <source>How thorough the block verification of -checkblocks is (0-4, default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4501,17 +4511,32 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+51\"/>\n+        <location line=\"+46\"/>\n+        <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n+        <source>Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+6\"/>\n+        <source>Unsupported argument -socks found. Setting SOCKS version isn&apos;t possible anymore, only SOCKS5 proxies are supported.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+5\"/>\n         <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+37\"/>\n+        <location line=\"+28\"/>\n         <source>(default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+11\"/>\n         <source>Always query for peer addresses via DNS lookup (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4521,7 +4546,7 @@\n         <translation>Error loading wallet.dat</translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+10\"/>\n         <source>Generate coins (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4541,7 +4566,7 @@\n         <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+8\"/>\n+        <location line=\"+9\"/>\n         <source>Listen for JSON-RPC connections on &lt;port&gt; (default: %u or testnet: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4641,7 +4666,7 @@\n         <translation>Cannot resolve -externalip address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+47\"/>\n+        <location line=\"+46\"/>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</translation>\n     </message>\n@@ -4651,7 +4676,7 @@\n         <translation>Insufficient funds</translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+14\"/>\n         <source>Loading block index...</source>\n         <translation>Loading block index...</translation>\n     </message>"
      }
    ]
  },
  {
    "sha": "8537ecdfc40181249ec37556015a99cfae4b21fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTM3ZWNkZmM0MDE4MTI0OWVjMzc1NTYwMTVhOTljZmFlNGIyMWZk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:16Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:16Z"
      },
      "message": "Revert \"Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\"\n\nThis reverts commit dea8d21fc63e9f442299c97010e4740558f4f037.",
      "tree": {
        "sha": "e7a5c3815bcfd33247cd1195d248f13767517c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7a5c3815bcfd33247cd1195d248f13767517c2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8537ecdfc40181249ec37556015a99cfae4b21fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8537ecdfc40181249ec37556015a99cfae4b21fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8537ecdfc40181249ec37556015a99cfae4b21fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8537ecdfc40181249ec37556015a99cfae4b21fd/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a95be97759e70d9e7537775c95eec219c8333e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a95be97759e70d9e7537775c95eec219c8333e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a95be97759e70d9e7537775c95eec219c8333e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fdc54a70a1bcd3730038fbc6fb1346ebee3ae419",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8537ecdfc40181249ec37556015a99cfae4b21fd/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8537ecdfc40181249ec37556015a99cfae4b21fd/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=8537ecdfc40181249ec37556015a99cfae4b21fd",
        "patch": "@@ -44,7 +44,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**"
      },
      {
        "sha": "91a3a5738ef298526c762d2f85ebdf3f5ca135cc",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8537ecdfc40181249ec37556015a99cfae4b21fd/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8537ecdfc40181249ec37556015a99cfae4b21fd/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8537ecdfc40181249ec37556015a99cfae4b21fd",
        "patch": "@@ -4,7 +4,6 @@\n \n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -230,7 +229,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(!CheckFinalTx(tx));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -244,7 +243,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(!CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n@@ -262,7 +261,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "40cd32e835092c3158175511da5193193ec54939",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGNkMzJlODM1MDkyYzMxNTgxNzU1MTFkYTUxOTMxOTNlYzU0OTM5",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:18Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:18Z"
      },
      "message": "Revert \"Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\"\n\nThis reverts commit 9d55050773d57c0e12005e524f2e54d9e622c6e2.\n\nAs noted by Luke-Jr, under some conditions this will accept transactions which are invalid by the network\n rules.  This happens when the current block time is head of the median time past and a transaction's\n locktime is in the middle.\n\nThis could be addressed by changing the rule to MAX(this_block_time, MTP+offset) but this solution and\n the particular offset used deserve some consideration.",
      "tree": {
        "sha": "a277d4f0514dc26c86c8fa86ab831acd6ed3e63f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a277d4f0514dc26c86c8fa86ab831acd6ed3e63f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40cd32e835092c3158175511da5193193ec54939",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40cd32e835092c3158175511da5193193ec54939",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40cd32e835092c3158175511da5193193ec54939",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40cd32e835092c3158175511da5193193ec54939/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8537ecdfc40181249ec37556015a99cfae4b21fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8537ecdfc40181249ec37556015a99cfae4b21fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8537ecdfc40181249ec37556015a99cfae4b21fd"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 7,
      "deletions": 54
    },
    "files": [
      {
        "sha": "f937844e9f7e15391537db3aea9cdfadd1a94617",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -13,10 +13,4 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n-/** Flags for LockTime() */\n-enum {\n-    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n-    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n-};\n-\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "26a22ae6fd7cfd7d618410c6a03a6022b22d01ee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 35,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -650,35 +650,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n+bool CheckFinalTx(const CTransaction &tx)\n {\n     AssertLockHeld(cs_main);\n-\n-    // By convention a negative value for flags indicates that the\n-    // current network-enforced consensus rules should be used. In\n-    // a future soft-fork scenario that would mean checking which\n-    // rules would be enforced for the next block and setting the\n-    // appropriate flags. At the present time no soft-forks are\n-    // scheduled, so no flags are set.\n-    flags = std::max(flags, 0);\n-\n-    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n-    // nLockTime because when IsFinalTx() is called within\n-    // CBlock::AcceptBlock(), the height of the block *being*\n-    // evaluated is what is used. Thus if we want to know if a\n-    // transaction can be part of the *next* block, we need to call\n-    // IsFinalTx() with one more than chainActive.Height().\n-    const int nBlockHeight = chainActive.Height() + 1;\n-\n-    // Timestamps on the other hand don't get any special treatment,\n-    // because we can't know what timestamp the next block will have,\n-    // and there aren't timestamp applications where it matters.\n-    // However this changes once median past time-locks are enforced:\n-    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? chainActive.Tip()->GetMedianTimePast()\n-                             : GetAdjustedTime();\n-\n-    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n+    return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -822,7 +797,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(tx))\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -2748,15 +2723,10 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n-        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n-    }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):"
      },
      {
        "sha": "202d2c772ba896b3f9f71cba6d1e6121ddd53594",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -308,10 +308,8 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n- *\n- * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "42c8bb970b9b5aa051af5b280944b9895a67f114",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -148,7 +148,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n-        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n@@ -163,12 +162,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->GetTx();\n-\n-            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                    ? nMedianTimePast\n-                                    : pblock->GetBlockTime();\n-\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n                 continue;\n \n             COrphan* porphan = NULL;"
      },
      {
        "sha": "747c5ce8ce4abf6e92767277bfbadd17e1dee640",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -43,9 +43,6 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n-\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types"
      }
    ]
  },
  {
    "sha": "ff2a2af64c75724cbd6f64963da792532093004b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjJhMmFmNjRjNzU3MjRjYmQ2ZjY0OTYzZGE3OTI1MzIwOTMwMDRi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-02T03:15:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-02T03:15:58Z"
      },
      "message": "build: don't distribute tests_config.py\n\nThis file is dynamically generated by configure based on the platform,\nit doesn't belong in the distribution archive.\n\nFixes #6929.",
      "tree": {
        "sha": "21fd5c375d5c07a22d0bb8d50481b0dd5582b82b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21fd5c375d5c07a22d0bb8d50481b0dd5582b82b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff2a2af64c75724cbd6f64963da792532093004b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff2a2af64c75724cbd6f64963da792532093004b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff2a2af64c75724cbd6f64963da792532093004b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff2a2af64c75724cbd6f64963da792532093004b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a95be97759e70d9e7537775c95eec219c8333e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a95be97759e70d9e7537775c95eec219c8333e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a95be97759e70d9e7537775c95eec219c8333e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "303ad3b06f7b9e92daed1e47d53d85d676caa03e",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff2a2af64c75724cbd6f64963da792532093004b/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff2a2af64c75724cbd6f64963da792532093004b/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=ff2a2af64c75724cbd6f64963da792532093004b",
        "patch": "@@ -213,7 +213,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/pull-tester/tests_config.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      }
    ]
  },
  {
    "sha": "a6d0d623fc955bba93d8f09e3fd2454284b61472",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmQwZDYyM2ZjOTU1YmJhOTNkOGYwOWUzZmQyNDU0Mjg0YjYxNDcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-02T03:29:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-02T03:29:45Z"
      },
      "message": "Merge pull request #6926\n\n7497e80 tests: Initialize networking on windows (Wladimir J. van der Laan)",
      "tree": {
        "sha": "8b7e257ec76dffd5d4f38a06697c0963393c76c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b7e257ec76dffd5d4f38a06697c0963393c76c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6d0d623fc955bba93d8f09e3fd2454284b61472",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWNtipAAoJEHSBCwEjRsmmZjQH/RVywQ55MpmiaQ6hhPoUWJfo\nrettIg4moSuBtrzaI49G2kDmqbBzDiIJbshphHw7DZuP9Mr1FZm4/jb4uvifWZS6\nPZL2j7/NZ2SW7ZeY6unXOzmkE6XY5Vfk0MBxZF09JEXrRQwM1NvXY+eqCKXn5+DY\nYD+j1qxVlUHVz079RNZDpSmMBjufPoHoWJuzEktKo/1J6fgmqvH5RtOTutkfYkJm\n6gebAf3KBAo/8HCmjqBHSc0N8ox1OLF9DkzRGa080jVATUp7eZGB1d27YrRgU/yK\n8R3vPaJh011tsFrXbzECGOZVCPfgVydYWDpXQ6egD5TmbbV1ozQ13J95/RRAke0=\n=eGf3\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b7e257ec76dffd5d4f38a06697c0963393c76c6\nparent 02a95be97759e70d9e7537775c95eec219c8333e\nparent 7497e805bd437b07fc3e5920f0c1f84bf10b0ebe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446434982 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446434985 +0100\n\nMerge pull request #6926\n\n7497e80 tests: Initialize networking on windows (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d0d623fc955bba93d8f09e3fd2454284b61472",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d0d623fc955bba93d8f09e3fd2454284b61472",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d0d623fc955bba93d8f09e3fd2454284b61472/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a95be97759e70d9e7537775c95eec219c8333e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a95be97759e70d9e7537775c95eec219c8333e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a95be97759e70d9e7537775c95eec219c8333e"
      },
      {
        "sha": "7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7497e805bd437b07fc3e5920f0c1f84bf10b0ebe"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "23e5e66d8443778a3043954ee7350f1ac61b0cda",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6d0d623fc955bba93d8f09e3fd2454284b61472/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6d0d623fc955bba93d8f09e3fd2454284b61472/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a6d0d623fc955bba93d8f09e3fd2454284b61472",
        "patch": "@@ -36,6 +36,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n {\n         ECC_Start();\n         SetupEnvironment();\n+        SetupNetworking();\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n         fCheckBlockIndex = true;\n         SelectParams(chainName);"
      }
    ]
  },
  {
    "sha": "8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmUzMGZiNGQxMzA1MzJkNGEwZTRjOWQxNDNmMDNlMWI4NWE3NDll",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-02T03:44:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-02T03:44:47Z"
      },
      "message": "Merge pull request #6928\n\n40cd32e Revert \"Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\" (Gregory Maxwell)\n8537ecd Revert \"Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\" (Gregory Maxwell)",
      "tree": {
        "sha": "5442cc39c9cc9e9c88c0b441db4f5b47a950a1c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5442cc39c9cc9e9c88c0b441db4f5b47a950a1c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWNtwvAAoJEHSBCwEjRsmmiTcIAKOk5wKfrT5MUiPmyWLh3aSS\nyZXTUreJ39ntLLiDLXdISK/ecLcpPPbfW3G3m/Jf0E/CL9ZQ/H2/vdfdndP7tzOi\nHRCSadVwNy74jcbv+WHTpTMEr+Kj0g098B4uVkRkShyKbTbSboTdl3YiJ0HVsoVo\nlqUnb7kCPCPzw0y/F8zMFjHWOsHC1l8bOYVoF1K8HqKC7eIAA5Q3pu+AOrqJF6xu\n8xhFAk0hvxwUzKMvfC6YsSg62KMCbpb7imvdkx5J40LOSx6WqsaQoj8pq0SQxlvG\noKgyS2aPrzJ3kK9ZmMfSctL+7NqodkaXdNhzb806k7T5KKDeKIuwvwNqN9era54=\n=qLRi\n-----END PGP SIGNATURE-----",
        "payload": "tree 5442cc39c9cc9e9c88c0b441db4f5b47a950a1c3\nparent a6d0d623fc955bba93d8f09e3fd2454284b61472\nparent 40cd32e835092c3158175511da5193193ec54939\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446435841 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446435887 +0100\n\nMerge pull request #6928\n\n40cd32e Revert \"Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\" (Gregory Maxwell)\n8537ecd Revert \"Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\" (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6d0d623fc955bba93d8f09e3fd2454284b61472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6d0d623fc955bba93d8f09e3fd2454284b61472",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6d0d623fc955bba93d8f09e3fd2454284b61472"
      },
      {
        "sha": "40cd32e835092c3158175511da5193193ec54939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40cd32e835092c3158175511da5193193ec54939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40cd32e835092c3158175511da5193193ec54939"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 10,
      "deletions": 58
    },
    "files": [
      {
        "sha": "f937844e9f7e15391537db3aea9cdfadd1a94617",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "patch": "@@ -13,10 +13,4 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n-/** Flags for LockTime() */\n-enum {\n-    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n-    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n-};\n-\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "26a22ae6fd7cfd7d618410c6a03a6022b22d01ee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 35,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "patch": "@@ -650,35 +650,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n+bool CheckFinalTx(const CTransaction &tx)\n {\n     AssertLockHeld(cs_main);\n-\n-    // By convention a negative value for flags indicates that the\n-    // current network-enforced consensus rules should be used. In\n-    // a future soft-fork scenario that would mean checking which\n-    // rules would be enforced for the next block and setting the\n-    // appropriate flags. At the present time no soft-forks are\n-    // scheduled, so no flags are set.\n-    flags = std::max(flags, 0);\n-\n-    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n-    // nLockTime because when IsFinalTx() is called within\n-    // CBlock::AcceptBlock(), the height of the block *being*\n-    // evaluated is what is used. Thus if we want to know if a\n-    // transaction can be part of the *next* block, we need to call\n-    // IsFinalTx() with one more than chainActive.Height().\n-    const int nBlockHeight = chainActive.Height() + 1;\n-\n-    // Timestamps on the other hand don't get any special treatment,\n-    // because we can't know what timestamp the next block will have,\n-    // and there aren't timestamp applications where it matters.\n-    // However this changes once median past time-locks are enforced:\n-    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? chainActive.Tip()->GetMedianTimePast()\n-                             : GetAdjustedTime();\n-\n-    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n+    return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -822,7 +797,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(tx))\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -2748,15 +2723,10 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n-        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n-    }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):"
      },
      {
        "sha": "202d2c772ba896b3f9f71cba6d1e6121ddd53594",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "patch": "@@ -308,10 +308,8 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n- *\n- * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "42c8bb970b9b5aa051af5b280944b9895a67f114",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "patch": "@@ -148,7 +148,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n-        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n@@ -163,12 +162,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->GetTx();\n-\n-            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                    ? nMedianTimePast\n-                                    : pblock->GetBlockTime();\n-\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n                 continue;\n \n             COrphan* porphan = NULL;"
      },
      {
        "sha": "747c5ce8ce4abf6e92767277bfbadd17e1dee640",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "patch": "@@ -43,9 +43,6 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n-\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types"
      },
      {
        "sha": "91a3a5738ef298526c762d2f85ebdf3f5ca135cc",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "patch": "@@ -4,7 +4,6 @@\n \n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -230,7 +229,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(!CheckFinalTx(tx));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -244,7 +243,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(!CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n@@ -262,7 +261,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MmYzMzllZjc4MGJmZjI2ODM2OWUzYTczOTljOGI4ZjJlZjNlOGI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-03T09:08:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-03T09:09:09Z"
      },
      "message": "Merge pull request #6930\n\nff2a2af build: don't distribute tests_config.py (Wladimir J. van der Laan)",
      "tree": {
        "sha": "288d41beef1aa19375ab9e160b28c9796c6f96d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/288d41beef1aa19375ab9e160b28c9796c6f96d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWOHm1AAoJEHSBCwEjRsmm1CAIAIM+8NCd1qa4+MTrk1BNZVt+\nIpstD1+kN4VrDbT5346iMN/ydRAVKuovxbe3xyHtPsZfT/mmDnUkfOPop04B5Ms5\njTbxi77miROwOkrrVQ+WPMUzr4x/sHE0UrEufuME2iSZbuAkkbkBRLYr+lc82NIG\n5NNGl4SMT61F8oJmlKUyfSnTuk/+tnv5AY4EpeW49NDQE9b1X7gaF3l0Ria19iCs\nShLMoIGoaK/NZmuE/RaPBsUg2z2NjRAsVQsF8cMyqJ6CE0CdqgvP3h7P3DcMR0vw\nB8kosw1Mn2UgVriBUHzheIbsSBDOzHxlqADZ0BPiDfnZAsPcA68ST+VoZO8nzLU=\n=QJ7V\n-----END PGP SIGNATURE-----",
        "payload": "tree 288d41beef1aa19375ab9e160b28c9796c6f96d4\nparent 8fe30fb4d130532d4a0e4c9d143f03e1b85a749e\nparent ff2a2af64c75724cbd6f64963da792532093004b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446541732 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446541749 +0100\n\nMerge pull request #6930\n\nff2a2af build: don't distribute tests_config.py (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f339ef780bff268369e3a7399c8b8f2ef3e8b4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fe30fb4d130532d4a0e4c9d143f03e1b85a749e"
      },
      {
        "sha": "ff2a2af64c75724cbd6f64963da792532093004b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff2a2af64c75724cbd6f64963da792532093004b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff2a2af64c75724cbd6f64963da792532093004b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "303ad3b06f7b9e92daed1e47d53d85d676caa03e",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/42f339ef780bff268369e3a7399c8b8f2ef3e8b4/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/42f339ef780bff268369e3a7399c8b8f2ef3e8b4/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
        "patch": "@@ -213,7 +213,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/pull-tester/tests_config.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n+EXTRA_DIST = $(top_srcdir)/share/genbuild.sh qa/pull-tester/rpc-tests.py qa/rpc-tests $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING)\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n "
      }
    ]
  },
  {
    "sha": "268b79ef0c54a3bff0b50e093b98b943e49a4939",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjhiNzllZjBjNTRhM2JmZjBiNTBlMDkzYjk4Yjk0M2U0OWE0OTM5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-03T10:58:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-03T11:34:51Z"
      },
      "message": "[qt] rpcconsole: Scale monospace font to 95%",
      "tree": {
        "sha": "0bef8e4779ed46ec9b6fdc2fec87db2f99300439",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bef8e4779ed46ec9b6fdc2fec87db2f99300439"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/268b79ef0c54a3bff0b50e093b98b943e49a4939",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/268b79ef0c54a3bff0b50e093b98b943e49a4939",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/268b79ef0c54a3bff0b50e093b98b943e49a4939",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/268b79ef0c54a3bff0b50e093b98b943e49a4939/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28313b83fc1a16b5e6da2b868b5f297050ce8b05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28313b83fc1a16b5e6da2b868b5f297050ce8b05"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "840170182144ac198f35eab723c04b9412d363af",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/268b79ef0c54a3bff0b50e093b98b943e49a4939/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/268b79ef0c54a3bff0b50e093b98b943e49a4939/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=268b79ef0c54a3bff0b50e093b98b943e49a4939",
        "patch": "@@ -463,8 +463,8 @@ void RPCConsole::clear()\n \n     // Set default style sheet\n     QFontInfo fixedFontInfo(GUIUtil::fixedPitchFont());\n-    // Try to make font equally large on different OS.\n-    QString ptSize = QString(\"%1pt\").arg(QFontInfo(QFont()).pointSize());\n+    // Try to make fixed font adequately large on different OS\n+    QString ptSize = QString(\"%1pt\").arg(QFontInfo(QFont()).pointSize() * 8.5 / 9);\n     ui->messagesWidget->document()->setDefaultStyleSheet(\n         QString(\n                 \"table { }\""
      }
    ]
  },
  {
    "sha": "de0499d3b8352334357c8d60931cd5d2be5ab61d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTA0OTlkM2I4MzUyMzM0MzU3YzhkNjA5MzFjZDVkMmJlNWFiNjFk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-11-01T18:09:17Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao@bitreserve.org",
        "date": "2015-11-04T10:36:00Z"
      },
      "message": "Fix ZMQ Notification initialization and shutdown\n\nMoves the call Initialize() from init.cpp to CreateWithArguments() and handles the\nreturn value. Moves the call Shutdown() from init.cpp to destructor.\nChanges Initialize() and Shutdown() to protected members.",
      "tree": {
        "sha": "debaa2e8f9671650860d827cedbdac27ca79b243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/debaa2e8f9671650860d827cedbdac27ca79b243"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de0499d3b8352334357c8d60931cd5d2be5ab61d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de0499d3b8352334357c8d60931cd5d2be5ab61d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de0499d3b8352334357c8d60931cd5d2be5ab61d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de0499d3b8352334357c8d60931cd5d2be5ab61d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a95be97759e70d9e7537775c95eec219c8333e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a95be97759e70d9e7537775c95eec219c8333e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a95be97759e70d9e7537775c95eec219c8333e"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3e7381b82f07a94712050cb80e16efa55ce04100",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de0499d3b8352334357c8d60931cd5d2be5ab61d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de0499d3b8352334357c8d60931cd5d2be5ab61d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=de0499d3b8352334357c8d60931cd5d2be5ab61d",
        "patch": "@@ -222,7 +222,6 @@ void Shutdown()\n #if ENABLE_ZMQ\n     if (pzmqNotificationInterface) {\n         UnregisterValidationInterface(pzmqNotificationInterface);\n-        pzmqNotificationInterface->Shutdown();\n         delete pzmqNotificationInterface;\n         pzmqNotificationInterface = NULL;\n     }\n@@ -1176,7 +1175,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     pzmqNotificationInterface = CZMQNotificationInterface::CreateWithArguments(mapArgs);\n \n     if (pzmqNotificationInterface) {\n-        pzmqNotificationInterface->Initialize();\n         RegisterValidationInterface(pzmqNotificationInterface);\n     }\n #endif"
      },
      {
        "sha": "09fe3aeb4c8e93df548b51c6ebcef85a17b0e8fe",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de0499d3b8352334357c8d60931cd5d2be5ab61d/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de0499d3b8352334357c8d60931cd5d2be5ab61d/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=de0499d3b8352334357c8d60931cd5d2be5ab61d",
        "patch": "@@ -21,8 +21,7 @@ CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(NULL)\n \n CZMQNotificationInterface::~CZMQNotificationInterface()\n {\n-    // ensure Shutdown if Initialize is called\n-    assert(!pcontext);\n+    Shutdown();\n \n     for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)\n     {\n@@ -59,6 +58,12 @@ CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const\n     {\n         notificationInterface = new CZMQNotificationInterface();\n         notificationInterface->notifiers = notifiers;\n+\n+        if (!notificationInterface->Initialize())\n+        {\n+            delete notificationInterface;\n+            notificationInterface = NULL;\n+        }\n     }\n \n     return notificationInterface;\n@@ -99,7 +104,7 @@ bool CZMQNotificationInterface::Initialize()\n         return false;\n     }\n \n-    return false;\n+    return true;\n }\n \n // Called during shutdown sequence"
      },
      {
        "sha": "3ccfaf341d20d8e57772fcaeb6f93ab34b4feec1",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de0499d3b8352334357c8d60931cd5d2be5ab61d/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de0499d3b8352334357c8d60931cd5d2be5ab61d/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=de0499d3b8352334357c8d60931cd5d2be5ab61d",
        "patch": "@@ -19,10 +19,11 @@ class CZMQNotificationInterface : public CValidationInterface\n \n     static CZMQNotificationInterface* CreateWithArguments(const std::map<std::string, std::string> &args);\n \n+protected:\n     bool Initialize();\n     void Shutdown();\n \n-protected: // CValidationInterface\n+    // CValidationInterface\n     void SyncTransaction(const CTransaction &tx, const CBlock *pblock);\n     void UpdatedBlockTip(const CBlockIndex *pindex);\n "
      }
    ]
  },
  {
    "sha": "aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2EwYzAwYWUxZmNkNGRkYWFkZjdhMzU3NjVmNzYzYTdiYzRiOTQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T10:44:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T10:45:33Z"
      },
      "message": "Merge pull request #6905\n\na6efc01 Bugfix: Omit wallet-related options from -help when wallet is disabled (Luke Dashjr)\n5f9260f Bugfix: If genproclimit is omitted to RPC setgenerate, don't change it; also show correct default in getmininginfo (Luke Dashjr)\n420a82f Bugfix: Describe dblogsize option correctly (it refers to the wallet database, not memory pool) (Luke Dashjr)\ncaa3d42 Bugfix: RPC: blockchain: Display correct defaults in help for verifychain method (Luke Dashjr)",
      "tree": {
        "sha": "0bc5bbb7fefb099f7c1802d7cbf09d75a14df573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0bc5bbb7fefb099f7c1802d7cbf09d75a14df573"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWOeHNAAoJEHSBCwEjRsmmnKQH/isEiL05BPtuTQkkeKA+GTkN\n6UTyqLeaYFsaMKYoemLvVwuyIjbd94sOxngWiFjLefqLCgvyb/HL9URLzIDU4l1M\nC4E+ICNXhFqrLSYAznrYXtQqA7tzhbyIKQAjWSC/Z0VmzVANGD9C+8TY5N921NYP\nH1ne1ZCJc9ubr93rcmgMLkYWejTGfudhB027YdZxNkDI/NgqYKSYfGU8Zez1uYB4\n7Lrs4txGpjf8ArhmtUil+4iSJpC3haAXSnP2JoWdbY+hwqhsy7nj0kMWeq0WlY4J\nzj7udHQSY6rD8omPuC7JWg0wSG1ks9TuIaHuAZqcfFwbpCTcjmdLzwZ22T4oaIU=\n=f2m3\n-----END PGP SIGNATURE-----",
        "payload": "tree 0bc5bbb7fefb099f7c1802d7cbf09d75a14df573\nparent 42f339ef780bff268369e3a7399c8b8f2ef3e8b4\nparent a6efc019085fd70790ad7fa97078ce02d8f8dec3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446633884 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446633933 +0100\n\nMerge pull request #6905\n\na6efc01 Bugfix: Omit wallet-related options from -help when wallet is disabled (Luke Dashjr)\n5f9260f Bugfix: If genproclimit is omitted to RPC setgenerate, don't change it; also show correct default in getmininginfo (Luke Dashjr)\n420a82f Bugfix: Describe dblogsize option correctly (it refers to the wallet database, not memory pool) (Luke Dashjr)\ncaa3d42 Bugfix: RPC: blockchain: Display correct defaults in help for verifychain method (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42f339ef780bff268369e3a7399c8b8f2ef3e8b4"
      },
      {
        "sha": "a6efc019085fd70790ad7fa97078ce02d8f8dec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6efc019085fd70790ad7fa97078ce02d8f8dec3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6efc019085fd70790ad7fa97078ce02d8f8dec3"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 27,
      "deletions": 16
    },
    "files": [
      {
        "sha": "d0f73a632b2964ae0654af171d48897ae5c03580",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "patch": "@@ -307,8 +307,8 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-alerts\", strprintf(_(\"Receive and display P2P network alerts (default: %u)\"), DEFAULT_ALERTS));\n     strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n     strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n-    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n-    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3));\n+    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), DEFAULT_CHECKBLOCKS));\n+    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), DEFAULT_CHECKLEVEL));\n     strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     if (mode == HMM_BITCOIND)\n     {\n@@ -407,12 +407,16 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n     {\n         strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(\"Disable expensive verification for known chain history (default: %u)\", 1));\n-        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\", 100));\n+#ifdef ENABLE_WALLET\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n+#endif\n         strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(\"Disable safemode, override a real safe mode event (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(\"Force safe mode (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", \"Randomly drop 1 of every <n> network messages\");\n         strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", \"Randomly fuzz 1 of every <n> network messages\");\n+#ifdef ENABLE_WALLET\n         strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", 1));\n+#endif\n         strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(\"Stop running after importing blocks from disk (default: %u)\", 0));\n         strUsage += HelpMessageOpt(\"-limitancestorcount=<n>\", strprintf(\"Do not accept transactions if number of in-mempool ancestors is <n> or more (default: %u)\", DEFAULT_ANCESTOR_LIMIT));\n         strUsage += HelpMessageOpt(\"-limitancestorsize=<n>\", strprintf(\"Do not accept transactions whose size with all in-mempool ancestors exceeds <n> kilobytes (default: %u)\", DEFAULT_ANCESTOR_SIZE_LIMIT));\n@@ -425,7 +429,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n         _(\"If <category> is not supplied or if <category> = 1, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n     strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n-    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), DEFAULT_GENERATE_THREADS));\n     strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n     strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n@@ -1289,9 +1293,9 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                 }\n \n                 uiInterface.InitMessage(_(\"Verifying blocks...\"));\n-                if (fHavePruned && GetArg(\"-checkblocks\", 288) > MIN_BLOCKS_TO_KEEP) {\n+                if (fHavePruned && GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {\n                     LogPrintf(\"Prune: pruned datadir may not have more than %d blocks; -checkblocks=%d may fail\\n\",\n-                        MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", 288));\n+                        MIN_BLOCKS_TO_KEEP, GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS));\n                 }\n \n                 {\n@@ -1305,8 +1309,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                     }\n                 }\n \n-                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", 3),\n-                              GetArg(\"-checkblocks\", 288))) {\n+                if (!CVerifyDB().VerifyDB(pcoinsdbview, GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                              GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                     strLoadError = _(\"Corrupted block database detected\");\n                     break;\n                 }\n@@ -1573,7 +1577,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", 1), Params());\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), Params());\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "c3874be66316d493c18fad64cd62e078bc8bb4ac",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "patch": "@@ -127,6 +127,9 @@ extern uint64_t nPruneTarget;\n /** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n \n+static const signed int DEFAULT_CHECKBLOCKS = MIN_BLOCKS_TO_KEEP;\n+static const unsigned int DEFAULT_CHECKLEVEL = 3;\n+\n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n // Add 15% for Undo data = 331MB"
      },
      {
        "sha": "ad1320481887bbffa050865c40c7e4c3da902189",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "patch": "@@ -17,6 +17,8 @@ class CScript;\n class CWallet;\n namespace Consensus { struct Params; };\n \n+static const int DEFAULT_GENERATE_THREADS = 1;\n+\n struct CBlockTemplate\n {\n     CBlock block;"
      },
      {
        "sha": "146eb3905ace21b8077ad734c00f210d17ad15df",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "patch": "@@ -539,13 +539,15 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n \n UniValue verifychain(const UniValue& params, bool fHelp)\n {\n+    int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n+    int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n     if (fHelp || params.size() > 2)\n         throw runtime_error(\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. checklevel   (numeric, optional, 0-4, default=3) How thorough the block verification is.\\n\"\n-            \"2. numblocks    (numeric, optional, default=288, 0=all) The number of blocks to check.\\n\"\n+            \"1. checklevel   (numeric, optional, 0-4, default=\" + strprintf(\"%d\", nCheckLevel) + \") How thorough the block verification is.\\n\"\n+            \"2. numblocks    (numeric, optional, default=\" + strprintf(\"%d\", nCheckDepth) + \", 0=all) The number of blocks to check.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false       (boolean) Verified or not\\n\"\n             \"\\nExamples:\\n\"\n@@ -555,8 +557,6 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    int nCheckLevel = GetArg(\"-checklevel\", 3);\n-    int nCheckDepth = GetArg(\"-checkblocks\", 288);\n     if (params.size() > 0)\n         nCheckLevel = params[0].get_int();\n     if (params.size() > 1)"
      },
      {
        "sha": "f42b31627c46f7fe85450070ce1029610e422d8b",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "patch": "@@ -211,7 +211,7 @@ UniValue setgenerate(const UniValue& params, bool fHelp)\n     if (params.size() > 0)\n         fGenerate = params[0].get_bool();\n \n-    int nGenProcLimit = -1;\n+    int nGenProcLimit = GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS);\n     if (params.size() > 1)\n     {\n         nGenProcLimit = params[1].get_int();\n@@ -259,7 +259,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n+    obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));"
      },
      {
        "sha": "cf6122813c059a36973eeb8872ac7f45a24ff768",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "patch": "@@ -293,7 +293,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n+    bitdb.dbenv->txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", DEFAULT_WALLET_DBLOGSIZE) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()"
      },
      {
        "sha": "46bc0ac0a9f25992199931a3802ae3749ea1db9c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "patch": "@@ -20,6 +20,8 @@\n \n #include <db_cxx.h>\n \n+static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n+\n extern unsigned int nWalletDBUpdated;\n \n class CDBEnv"
      }
    ]
  },
  {
    "sha": "35bb381435abe0cee661fa169d5d228a464d7632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWJiMzgxNDM1YWJlMGNlZTY2MWZhMTY5ZDVkMjI4YTQ2NGQ3NjMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-03T10:36:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T10:57:30Z"
      },
      "message": "build: Improve build instructions\n\n- Add package instructions for Ubuntu 15.10\n- Clarify BerkeleyDB/wallet situation for unix\n- Add basic build instructions for Windows (closes #1401)",
      "tree": {
        "sha": "974f42ad90b8d298b16643ac2ad5947523351231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/974f42ad90b8d298b16643ac2ad5947523351231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35bb381435abe0cee661fa169d5d228a464d7632",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35bb381435abe0cee661fa169d5d228a464d7632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35bb381435abe0cee661fa169d5d228a464d7632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35bb381435abe0cee661fa169d5d228a464d7632/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/42f339ef780bff268369e3a7399c8b8f2ef3e8b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/42f339ef780bff268369e3a7399c8b8f2ef3e8b4"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 66,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0594d20dd4276ef58d4b37dc1d3cb9d049243fc9",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35bb381435abe0cee661fa169d5d228a464d7632/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35bb381435abe0cee661fa169d5d228a464d7632/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=35bb381435abe0cee661fa169d5d228a464d7632",
        "patch": "@@ -43,6 +43,8 @@ The following are developer notes on how to build Bitcoin on your native platfor\n \n - [OS X Build Notes](build-osx.md)\n - [Unix Build Notes](build-unix.md)\n+- [Windows Build Notes](build-windows.md)\n+- [OpenBSD Build Notes](build-openbsd.md)\n - [Gitian Building Guide](gitian-building.md)\n \n Development"
      },
      {
        "sha": "25867e2993a46a9eab95e857743c73cfcca5b73b",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35bb381435abe0cee661fa169d5d228a464d7632/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35bb381435abe0cee661fa169d5d228a464d7632/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=35bb381435abe0cee661fa169d5d228a464d7632",
        "patch": "@@ -1,6 +1,6 @@\n UNIX BUILD NOTES\n ====================\n-Some notes on how to build Bitcoin in Unix.\n+Some notes on how to build Bitcoin Core in Unix.\n \n (for OpenBSD specific instructions, see [build-openbsd.md](build-openbsd.md))\n \n@@ -61,49 +61,55 @@ Dependency Build Instructions: Ubuntu & Debian\n ----------------------------------------------\n Build requirements:\n \n-\tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libevent-dev\n+        sudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libevent-dev\n \n-For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n+On Ubuntu 15.10+ there are generic names for the individual boost development\n+packages, so the following can be used to only install necessary parts of\n+boost:\n \n-\tsudo apt-get install libboost-all-dev\n+        apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libboost-base-dev\n \n- db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n- You can add the repository using the following command:\n+For Ubuntu before 15.10, or Debian 7 and later libboost-all-dev has to be installed:\n+\n+        sudo apt-get install libboost-all-dev\n+\n+BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n+You can add the repository and install using the following commands:\n \n         sudo add-apt-repository ppa:bitcoin/bitcoin\n         sudo apt-get update\n+        sudo apt-get install libdb4.8-dev libdb4.8++-dev\n \n- Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev,\n- but using these will break binary wallet compatibility, and is not recommended.\n+Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n+BerkeleyDB 5.1 or later, which break binary wallet compatibility with the distributed executables which\n+are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n+pass `--with-incompatible-bdb` to configure.\n \n-For other Debian & Ubuntu (with ppa):\n-\n-\tsudo apt-get install libdb4.8-dev libdb4.8++-dev\n+See the section \"Disable-wallet mode\" to build Bitcoin Core without wallet.\n \n Optional:\n \n-\tsudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)\n+        sudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)\n \n ZMQ dependencies:\n \n         sudo apt-get install libzmq3-dev (provides ZMQ API 4.x)\n \n-\n Dependencies for the GUI: Ubuntu & Debian\n -----------------------------------------\n \n If you want to build Bitcoin-Qt, make sure that the required packages for Qt development\n-are installed. Either Qt 4 or Qt 5 are necessary to build the GUI.\n+are installed. Either Qt 5 or Qt 4 are necessary to build the GUI.\n If both Qt 4 and Qt 5 are installed, Qt 4 will be used. Pass `--with-gui=qt5` to configure to choose Qt5.\n To build without GUI pass `--without-gui`.\n \n-To build with Qt 4 you need the following:\n+To build with Qt 5 (recommended) you need the following:\n \n-    sudo apt-get install libqt4-dev libprotobuf-dev protobuf-compiler\n+    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler\n \n-For Qt 5 you need the following:\n+Alternatively, to build with Qt 4 you need the following:\n \n-    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler\n+    sudo apt-get install libqt4-dev libprotobuf-dev protobuf-compiler\n \n libqrencode (optional) can be installed with:\n "
      },
      {
        "sha": "2b9233d1e140631d3bc18a311a7737981710b87d",
        "filename": "doc/build-windows.md",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35bb381435abe0cee661fa169d5d228a464d7632/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35bb381435abe0cee661fa169d5d228a464d7632/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=35bb381435abe0cee661fa169d5d228a464d7632",
        "patch": "@@ -0,0 +1,40 @@\n+WINDOWS BUILD NOTES\n+====================\n+\n+Some notes on how to build Bitcoin Core for Windows.\n+\n+Most developers use cross-compilation from Ubuntu to build executables for\n+Windows. This is also used to build the release binaries.\n+\n+Building on Windows itself is possible (for example using msys / mingw-w64),\n+but no one documented the steps to do this. If you are doing this, please contribute them.\n+\n+Cross-compilation\n+-------------------\n+\n+These steps can be performed on, for example, an Ubuntu VM. The depends system\n+will also work on other Linux distributions, however the commands for\n+installing the toolchain will be different.\n+\n+First install the toolchains:\n+\n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n+\n+To build executables for Windows 32-bit:\n+\n+    cd depends\n+    make HOST=i686-w64-mingw32 -j4\n+    cd ..\n+    ./configure --prefix=`pwd`/depends/i686-w64-mingw32\n+    make\n+\n+To build executables for Windows 64-bit:\n+\n+    cd depends\n+    make HOST=x86_64-w64-mingw32 -j4\n+    cd ..\n+    ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n+    make\n+\n+For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+"
      }
    ]
  },
  {
    "sha": "29c3c43e19caf70ad707ecf6c98d879254ea67cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWMzYzQzZTE5Y2FmNzBhZDcwN2VjZjZjOThkODc5MjU0ZWE2N2Nj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T11:08:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T11:08:20Z"
      },
      "message": "Merge pull request #6933\n\n35bb381 build: Improve build instructions (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e1c10f6e316b15410008c0b83096c625dc658c9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1c10f6e316b15410008c0b83096c625dc658c9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29c3c43e19caf70ad707ecf6c98d879254ea67cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWOeckAAoJEHSBCwEjRsmmpOcIAIIkB+5QdytR7T7cwI+Dzo3n\npIbfkBFAFF75x2BwXbMk5OEmTYbhq9dssIhv0GftDkBNr7WPAW2P0ppaWce9eJDz\nlT4uCLMO0gRkMteEycjUSRPxmZBfMzwDZe3m5W6bq5L7C0/JaL8DQa80yM4MiCZ2\nj1E0AZcI0QRKB4UwywrJFDMKzhZ+hu66MwPMOtd6GulOdyNyQNoey1mlsJGJQhCc\nwybdTNkCyitiKfu3cLzMRkvq9ys970G6tUV5jqyrT0BOG97TfD3HhB0onBaQBe4L\nDD+8q9UQgeOK3WOfnkY4fOVFy5Kie43I0u9lchstlHaTh4FIyQMWeURdtE3XXEo=\n=awMa\n-----END PGP SIGNATURE-----",
        "payload": "tree e1c10f6e316b15410008c0b83096c625dc658c9e\nparent aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946\nparent 35bb381435abe0cee661fa169d5d228a464d7632\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446635296 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446635300 +0100\n\nMerge pull request #6933\n\n35bb381 build: Improve build instructions (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c3c43e19caf70ad707ecf6c98d879254ea67cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29c3c43e19caf70ad707ecf6c98d879254ea67cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c3c43e19caf70ad707ecf6c98d879254ea67cc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aca0c00ae1fcd4ddaadf7a35765f763a7bc4b946"
      },
      {
        "sha": "35bb381435abe0cee661fa169d5d228a464d7632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35bb381435abe0cee661fa169d5d228a464d7632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35bb381435abe0cee661fa169d5d228a464d7632"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 66,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0594d20dd4276ef58d4b37dc1d3cb9d049243fc9",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c3c43e19caf70ad707ecf6c98d879254ea67cc/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c3c43e19caf70ad707ecf6c98d879254ea67cc/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=29c3c43e19caf70ad707ecf6c98d879254ea67cc",
        "patch": "@@ -43,6 +43,8 @@ The following are developer notes on how to build Bitcoin on your native platfor\n \n - [OS X Build Notes](build-osx.md)\n - [Unix Build Notes](build-unix.md)\n+- [Windows Build Notes](build-windows.md)\n+- [OpenBSD Build Notes](build-openbsd.md)\n - [Gitian Building Guide](gitian-building.md)\n \n Development"
      },
      {
        "sha": "25867e2993a46a9eab95e857743c73cfcca5b73b",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c3c43e19caf70ad707ecf6c98d879254ea67cc/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c3c43e19caf70ad707ecf6c98d879254ea67cc/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=29c3c43e19caf70ad707ecf6c98d879254ea67cc",
        "patch": "@@ -1,6 +1,6 @@\n UNIX BUILD NOTES\n ====================\n-Some notes on how to build Bitcoin in Unix.\n+Some notes on how to build Bitcoin Core in Unix.\n \n (for OpenBSD specific instructions, see [build-openbsd.md](build-openbsd.md))\n \n@@ -61,49 +61,55 @@ Dependency Build Instructions: Ubuntu & Debian\n ----------------------------------------------\n Build requirements:\n \n-\tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libevent-dev\n+        sudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev libevent-dev\n \n-For Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n+On Ubuntu 15.10+ there are generic names for the individual boost development\n+packages, so the following can be used to only install necessary parts of\n+boost:\n \n-\tsudo apt-get install libboost-all-dev\n+        apt-get install libboost-system-dev libboost-filesystem-dev libboost-chrono-dev libboost-program-options-dev libboost-test-dev libboost-thread-dev libboost-base-dev\n \n- db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n- You can add the repository using the following command:\n+For Ubuntu before 15.10, or Debian 7 and later libboost-all-dev has to be installed:\n+\n+        sudo apt-get install libboost-all-dev\n+\n+BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n+You can add the repository and install using the following commands:\n \n         sudo add-apt-repository ppa:bitcoin/bitcoin\n         sudo apt-get update\n+        sudo apt-get install libdb4.8-dev libdb4.8++-dev\n \n- Ubuntu 12.04 and later have packages for libdb5.1-dev and libdb5.1++-dev,\n- but using these will break binary wallet compatibility, and is not recommended.\n+Ubuntu and Debian have their own libdb-dev and libdb++-dev packages, but these will install\n+BerkeleyDB 5.1 or later, which break binary wallet compatibility with the distributed executables which\n+are based on BerkeleyDB 4.8. If you do not care about wallet compatibility,\n+pass `--with-incompatible-bdb` to configure.\n \n-For other Debian & Ubuntu (with ppa):\n-\n-\tsudo apt-get install libdb4.8-dev libdb4.8++-dev\n+See the section \"Disable-wallet mode\" to build Bitcoin Core without wallet.\n \n Optional:\n \n-\tsudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)\n+        sudo apt-get install libminiupnpc-dev (see --with-miniupnpc and --enable-upnp-default)\n \n ZMQ dependencies:\n \n         sudo apt-get install libzmq3-dev (provides ZMQ API 4.x)\n \n-\n Dependencies for the GUI: Ubuntu & Debian\n -----------------------------------------\n \n If you want to build Bitcoin-Qt, make sure that the required packages for Qt development\n-are installed. Either Qt 4 or Qt 5 are necessary to build the GUI.\n+are installed. Either Qt 5 or Qt 4 are necessary to build the GUI.\n If both Qt 4 and Qt 5 are installed, Qt 4 will be used. Pass `--with-gui=qt5` to configure to choose Qt5.\n To build without GUI pass `--without-gui`.\n \n-To build with Qt 4 you need the following:\n+To build with Qt 5 (recommended) you need the following:\n \n-    sudo apt-get install libqt4-dev libprotobuf-dev protobuf-compiler\n+    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler\n \n-For Qt 5 you need the following:\n+Alternatively, to build with Qt 4 you need the following:\n \n-    sudo apt-get install libqt5gui5 libqt5core5a libqt5dbus5 qttools5-dev qttools5-dev-tools libprotobuf-dev protobuf-compiler\n+    sudo apt-get install libqt4-dev libprotobuf-dev protobuf-compiler\n \n libqrencode (optional) can be installed with:\n "
      },
      {
        "sha": "2b9233d1e140631d3bc18a311a7737981710b87d",
        "filename": "doc/build-windows.md",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29c3c43e19caf70ad707ecf6c98d879254ea67cc/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29c3c43e19caf70ad707ecf6c98d879254ea67cc/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=29c3c43e19caf70ad707ecf6c98d879254ea67cc",
        "patch": "@@ -0,0 +1,40 @@\n+WINDOWS BUILD NOTES\n+====================\n+\n+Some notes on how to build Bitcoin Core for Windows.\n+\n+Most developers use cross-compilation from Ubuntu to build executables for\n+Windows. This is also used to build the release binaries.\n+\n+Building on Windows itself is possible (for example using msys / mingw-w64),\n+but no one documented the steps to do this. If you are doing this, please contribute them.\n+\n+Cross-compilation\n+-------------------\n+\n+These steps can be performed on, for example, an Ubuntu VM. The depends system\n+will also work on other Linux distributions, however the commands for\n+installing the toolchain will be different.\n+\n+First install the toolchains:\n+\n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev g++-mingw-w64-x86-64 mingw-w64-x86-64-dev\n+\n+To build executables for Windows 32-bit:\n+\n+    cd depends\n+    make HOST=i686-w64-mingw32 -j4\n+    cd ..\n+    ./configure --prefix=`pwd`/depends/i686-w64-mingw32\n+    make\n+\n+To build executables for Windows 64-bit:\n+\n+    cd depends\n+    make HOST=x86_64-w64-mingw32 -j4\n+    cd ..\n+    ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32\n+    make\n+\n+For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+"
      }
    ]
  },
  {
    "sha": "aa03fb35c4b395bad9f9731afa62f29532ddf15a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTAzZmIzNWM0YjM5NWJhZDlmOTczMWFmYTYyZjI5NTMyZGRmMTVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T11:10:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T11:10:46Z"
      },
      "message": "Merge pull request #6927\n\nde0499d Fix ZMQ Notification initialization and shutdown (Jo\u00e3o Barbosa)",
      "tree": {
        "sha": "7a50e9ccda86f4d7bd6da1c9f61628875d54b19b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a50e9ccda86f4d7bd6da1c9f61628875d54b19b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa03fb35c4b395bad9f9731afa62f29532ddf15a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWOee2AAoJEHSBCwEjRsmmFEkIAJu1em3w02O716FUto7OF/sE\nuJ5BaPGsbfdx5aZ0H7PyfkGmgpxnZn2ljrdeMvxZ0NymCrndjBHI0AcekDgSp10C\ndZFONj6fLR+pjHByjCjOzLLlM5ctSqsVCfHTDNeuIhkCACuz5s4yrbaW5LPDa1tG\nh/4QTHMWdJSNxQL5weTzNVUNQCt/OGi7IQDI1c84jRNaDeNMsFRFFzbIemrxHcyb\nu77s7HxM6jYYNEs7qXU0Gj1fUYPmWvoLjmG7QN9oKKph8uxaajlmPH2M8/YSvP25\nj8TGXGwTy9mNiPcERgqANn+wd+nQgaMA2Ro1CQLDhtu72rnAtmQDCB/Ujv2Ch0I=\n=wK2y\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a50e9ccda86f4d7bd6da1c9f61628875d54b19b\nparent 29c3c43e19caf70ad707ecf6c98d879254ea67cc\nparent de0499d3b8352334357c8d60931cd5d2be5ab61d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446635429 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446635446 +0100\n\nMerge pull request #6927\n\nde0499d Fix ZMQ Notification initialization and shutdown (Jo\u00e3o Barbosa)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa03fb35c4b395bad9f9731afa62f29532ddf15a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa03fb35c4b395bad9f9731afa62f29532ddf15a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa03fb35c4b395bad9f9731afa62f29532ddf15a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29c3c43e19caf70ad707ecf6c98d879254ea67cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c3c43e19caf70ad707ecf6c98d879254ea67cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c3c43e19caf70ad707ecf6c98d879254ea67cc"
      },
      {
        "sha": "de0499d3b8352334357c8d60931cd5d2be5ab61d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de0499d3b8352334357c8d60931cd5d2be5ab61d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de0499d3b8352334357c8d60931cd5d2be5ab61d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 10,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1c79ff9f467212f1157bf0c08eaa987176ad1d6a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa03fb35c4b395bad9f9731afa62f29532ddf15a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa03fb35c4b395bad9f9731afa62f29532ddf15a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aa03fb35c4b395bad9f9731afa62f29532ddf15a",
        "patch": "@@ -222,7 +222,6 @@ void Shutdown()\n #if ENABLE_ZMQ\n     if (pzmqNotificationInterface) {\n         UnregisterValidationInterface(pzmqNotificationInterface);\n-        pzmqNotificationInterface->Shutdown();\n         delete pzmqNotificationInterface;\n         pzmqNotificationInterface = NULL;\n     }\n@@ -1180,7 +1179,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     pzmqNotificationInterface = CZMQNotificationInterface::CreateWithArguments(mapArgs);\n \n     if (pzmqNotificationInterface) {\n-        pzmqNotificationInterface->Initialize();\n         RegisterValidationInterface(pzmqNotificationInterface);\n     }\n #endif"
      },
      {
        "sha": "09fe3aeb4c8e93df548b51c6ebcef85a17b0e8fe",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa03fb35c4b395bad9f9731afa62f29532ddf15a/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa03fb35c4b395bad9f9731afa62f29532ddf15a/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=aa03fb35c4b395bad9f9731afa62f29532ddf15a",
        "patch": "@@ -21,8 +21,7 @@ CZMQNotificationInterface::CZMQNotificationInterface() : pcontext(NULL)\n \n CZMQNotificationInterface::~CZMQNotificationInterface()\n {\n-    // ensure Shutdown if Initialize is called\n-    assert(!pcontext);\n+    Shutdown();\n \n     for (std::list<CZMQAbstractNotifier*>::iterator i=notifiers.begin(); i!=notifiers.end(); ++i)\n     {\n@@ -59,6 +58,12 @@ CZMQNotificationInterface* CZMQNotificationInterface::CreateWithArguments(const\n     {\n         notificationInterface = new CZMQNotificationInterface();\n         notificationInterface->notifiers = notifiers;\n+\n+        if (!notificationInterface->Initialize())\n+        {\n+            delete notificationInterface;\n+            notificationInterface = NULL;\n+        }\n     }\n \n     return notificationInterface;\n@@ -99,7 +104,7 @@ bool CZMQNotificationInterface::Initialize()\n         return false;\n     }\n \n-    return false;\n+    return true;\n }\n \n // Called during shutdown sequence"
      },
      {
        "sha": "3ccfaf341d20d8e57772fcaeb6f93ab34b4feec1",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa03fb35c4b395bad9f9731afa62f29532ddf15a/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa03fb35c4b395bad9f9731afa62f29532ddf15a/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=aa03fb35c4b395bad9f9731afa62f29532ddf15a",
        "patch": "@@ -19,10 +19,11 @@ class CZMQNotificationInterface : public CValidationInterface\n \n     static CZMQNotificationInterface* CreateWithArguments(const std::map<std::string, std::string> &args);\n \n+protected:\n     bool Initialize();\n     void Shutdown();\n \n-protected: // CValidationInterface\n+    // CValidationInterface\n     void SyncTransaction(const CTransaction &tx, const CBlock *pblock);\n     void UpdatedBlockTip(const CBlockIndex *pindex);\n "
      }
    ]
  },
  {
    "sha": "8a95a18562b2be0b738ec5dd36670c8098c5f255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTk1YTE4NTYyYjJiZTBiNzM4ZWM1ZGQzNjY3MGM4MDk4YzVmMjU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T11:30:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T11:30:50Z"
      },
      "message": "Merge pull request #6669\n\n6342a48 Init: Use DEFAULT_TRANSACTION_MINFEE in help message (MarcoFalke)\na9c73a1 [wallet] Add comments for doxygen (MarcoFalke)\n6b0e622 [wallet] Refactor to use new MIN_CHANGE (MarcoFalke)",
      "tree": {
        "sha": "da424912e41c51ef5bcafdf8221b7b334aba2e3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da424912e41c51ef5bcafdf8221b7b334aba2e3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a95a18562b2be0b738ec5dd36670c8098c5f255",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWOexqAAoJEHSBCwEjRsmmRKoH/2dmc0BF34R0WWMnBIzGDiO/\n6OFDe1Dy1AKBaFu0zUbkVoGfhXVEw9HS9rQThV5+RVKjrQ4l7jnViHI/z4TlBzKo\nDcDKkZrM3hjmN1Tnv42H1go/rRCIFoEFk3Fo9Bc+mZfZbht3TvdR6Uws2OOhxxaP\nbnbr6i6+h6rJ4nnSQ9aJPUzRqs+06lZ45BGVanNY5F1NGkZtCYGgefmeG7iBeC+e\n/qdQsQPh/KHGP9t3irEa4o3lgvV9T7XDqTOyEoW4X5blQrMQH5V3s2NEIxzrAaNz\n68ZfnXqDSZgIZMiRpCVCbRwuknvdiODakWbHcRxK/RW/RRRVDaW4ASV5rDAG6p8=\n=0cfm\n-----END PGP SIGNATURE-----",
        "payload": "tree da424912e41c51ef5bcafdf8221b7b334aba2e3f\nparent aa03fb35c4b395bad9f9731afa62f29532ddf15a\nparent 6342a4889bc4add42c270e1e0aee246a7f0692dc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446636623 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446636650 +0100\n\nMerge pull request #6669\n\n6342a48 Init: Use DEFAULT_TRANSACTION_MINFEE in help message (MarcoFalke)\na9c73a1 [wallet] Add comments for doxygen (MarcoFalke)\n6b0e622 [wallet] Refactor to use new MIN_CHANGE (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a95a18562b2be0b738ec5dd36670c8098c5f255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a95a18562b2be0b738ec5dd36670c8098c5f255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a95a18562b2be0b738ec5dd36670c8098c5f255/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa03fb35c4b395bad9f9731afa62f29532ddf15a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa03fb35c4b395bad9f9731afa62f29532ddf15a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa03fb35c4b395bad9f9731afa62f29532ddf15a"
      },
      {
        "sha": "6342a4889bc4add42c270e1e0aee246a7f0692dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6342a4889bc4add42c270e1e0aee246a7f0692dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6342a4889bc4add42c270e1e0aee246a7f0692dc"
      }
    ],
    "stats": {
      "total": 162,
      "additions": 105,
      "deletions": 57
    },
    "files": [
      {
        "sha": "4dd80907531e59ddeb20a1c4dd4a4345e1974022",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8a95a18562b2be0b738ec5dd36670c8098c5f255",
        "patch": "@@ -376,7 +376,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));"
      },
      {
        "sha": "74bc8dbec9b7df1e6300bc572e3364425ddf0747",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=8a95a18562b2be0b738ec5dd36670c8098c5f255",
        "patch": "@@ -567,7 +567,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nChange -= nPayFee;\n \n             // Never create dust outputs; if we would, just add the dust to the fee.\n-            if (nChange > 0 && nChange < CENT)\n+            if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))"
      },
      {
        "sha": "8b9292bd14d7f91a37298283182924263c1c2241",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 46,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=8a95a18562b2be0b738ec5dd36670c8098c5f255",
        "patch": "@@ -117,7 +117,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n         BOOST_CHECK( wallet.SelectCoinsMinConf(34 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_GT(nValueRet, 34 * CENT);         // but should get more than 34 cents\n+        BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n@@ -185,33 +185,34 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        // empty the wallet and start again, now with fractions of a cent, to test sub-cent change avoidance\n+        // empty the wallet and start again, now with fractions of a cent, to test small change avoidance\n+\n         empty_wallet();\n-        add_coin(0.1*CENT);\n-        add_coin(0.2*CENT);\n-        add_coin(0.3*CENT);\n-        add_coin(0.4*CENT);\n-        add_coin(0.5*CENT);\n-\n-        // try making 1 cent from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 = 1.5 cents\n-        // we'll get sub-cent change whatever happens, so can expect 1.0 exactly\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+        add_coin(0.1*MIN_CHANGE);\n+        add_coin(0.2*MIN_CHANGE);\n+        add_coin(0.3*MIN_CHANGE);\n+        add_coin(0.4*MIN_CHANGE);\n+        add_coin(0.5*MIN_CHANGE);\n+\n+        // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n+        // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n-        // but if we add a bigger coin, making it possible to avoid sub-cent change, things change:\n-        add_coin(1111*CENT);\n+        // but if we add a bigger coin, small change is avoided\n+        add_coin(1111*MIN_CHANGE);\n \n-        // try making 1 cent from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5 cents\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT); // we should get the exact amount\n+        // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n-        // if we add more sub-cent coins:\n-        add_coin(0.6*CENT);\n-        add_coin(0.7*CENT);\n+        // if we add more small coins:\n+        add_coin(0.6*MIN_CHANGE);\n+        add_coin(0.7*MIN_CHANGE);\n \n-        // and try again to make 1.0 cents, we can still make 1.0 cents\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT); // we should get the exact amount\n+        // and try again to make 1.0 * MIN_CHANGE\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n         // they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change\n@@ -223,45 +224,65 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n-        // if there's not enough in the smaller coins to make at least 1 cent change (0.5+0.6+0.7 < 1.0+1.0),\n+        // if there's not enough in the smaller coins to make at least 1 * MIN_CHANGE change (0.5+0.6+0.7 < 1.0+1.0),\n         // we need to try finding an exact subset anyway\n \n         // sometimes it will fail, and so we use the next biggest coin:\n         empty_wallet();\n-        add_coin(0.5 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.7 * CENT);\n-        add_coin(1111 * CENT);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1111 * CENT); // we get the bigger coin\n+        add_coin(0.5 * MIN_CHANGE);\n+        add_coin(0.6 * MIN_CHANGE);\n+        add_coin(0.7 * MIN_CHANGE);\n+        add_coin(1111 * MIN_CHANGE);\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         empty_wallet();\n-        add_coin(0.4 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.8 * CENT);\n-        add_coin(1111 * CENT);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);   // we should get the exact amount\n+        add_coin(0.4 * MIN_CHANGE);\n+        add_coin(0.6 * MIN_CHANGE);\n+        add_coin(0.8 * MIN_CHANGE);\n+        add_coin(1111 * MIN_CHANGE);\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n-        // test avoiding sub-cent change\n+        // test avoiding small change\n         empty_wallet();\n-        add_coin(0.0005 * COIN);\n-        add_coin(0.01 * COIN);\n-        add_coin(1 * COIN);\n+        add_coin(0.05 * MIN_CHANGE);\n+        add_coin(1    * MIN_CHANGE);\n+        add_coin(100  * MIN_CHANGE);\n \n-        // trying to make 1.0001 from these three coins\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1.0001 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.0105 * COIN);   // we should get all coins\n+        // trying to make 100.01 from these three coins\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(100.01 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 101.05 * MIN_CHANGE);   // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n-        // but if we try to make 0.999, we should take the bigger of the two small coins to avoid sub-cent change\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(0.999 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.01 * COIN);   // we should get 1 + 0.01\n+        // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(99.9 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n+        // test with many inputs\n+        for (CAmount amt=1500; amt < COIN; amt*=10) {\n+             empty_wallet();\n+             // Create 676 inputs (= MAX_STANDARD_TX_SIZE / 148 bytes per input)\n+             for (uint16_t j = 0; j < 676; j++)\n+                 add_coin(amt);\n+             BOOST_CHECK(wallet.SelectCoinsMinConf(2000, 1, 1, vCoins, setCoinsRet, nValueRet));\n+             if (amt - 2000 < MIN_CHANGE) {\n+                 // needs more than one input:\n+                 uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n+                 CAmount returnValue = amt * returnSize;\n+                 BOOST_CHECK_EQUAL(nValueRet, returnValue);\n+                 BOOST_CHECK_EQUAL(setCoinsRet.size(), returnSize);\n+             } else {\n+                 // one input is sufficient:\n+                 BOOST_CHECK_EQUAL(nValueRet, amt);\n+                 BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+             }\n+        }\n+\n         // test randomness\n         {\n             empty_wallet();"
      },
      {
        "sha": "93c7c7f2474ad36ad81d3b40bf06c110eddd3a09",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8a95a18562b2be0b738ec5dd36670c8098c5f255",
        "patch": "@@ -47,7 +47,7 @@ bool fPayAtLeastCustomFee = true;\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n  * Override with -mintxfee\n  */\n-CFeeRate CWallet::minTxFee = CFeeRate(1000);\n+CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);\n \n /** @defgroup mapWallet\n  *\n@@ -1497,9 +1497,6 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-/**\n- * populate vCoins with vector of available COutputs.\n- */\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue) const\n {\n     vCoins.clear();\n@@ -1619,7 +1616,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n             nValueRet += coin.first;\n             return true;\n         }\n-        else if (n < nTargetValue + CENT)\n+        else if (n < nTargetValue + MIN_CHANGE)\n         {\n             vValue.push_back(coin);\n             nTotalLower += n;\n@@ -1654,14 +1651,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     vector<char> vfBest;\n     CAmount nBest;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + CENT, vfBest, nBest, 1000);\n+    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n+    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n+        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (coinLowestLarger.second.first &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + CENT) || coinLowestLarger.first <= nBest))\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n     {\n         setCoinsRet.insert(coinLowestLarger.second);\n         nValueRet += coinLowestLarger.first;\n@@ -1844,6 +1841,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n         LOCK2(cs_main, cs_wallet);\n         {\n             nFeeRet = 0;\n+            // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n                 txNew.vin.clear();"
      },
      {
        "sha": "7e8dcc2914e5553090d6a3456092a1fe12bb6707",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a95a18562b2be0b738ec5dd36670c8098c5f255/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=8a95a18562b2be0b738ec5dd36670c8098c5f255",
        "patch": "@@ -41,8 +41,12 @@ extern bool fPayAtLeastCustomFee;\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n+//! -mintxfee default\n+static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n //! -maxtxfee default\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n+//! minimum change amount\n+static const CAmount MIN_CHANGE = CENT;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n@@ -442,6 +446,11 @@ class CWalletKey\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n+    /**\n+     * Select a set of coins such that nValueRet >= nTargetValue and at least\n+     * all coins from coinControl are selected; Never select unconfirmed coins\n+     * if they are not ours\n+     */\n     bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n@@ -539,7 +548,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n+    /**\n+     * populate vCoins with vector of available COutputs.\n+     */\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n+\n+    /**\n+     * Shuffle and select coins until nTargetValue is reached while avoiding\n+     * small change; This method is stochastic for some inputs and upon\n+     * completion the coin set and corresponding actual target value is\n+     * assembled\n+     */\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n@@ -622,7 +641,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n+\n+    /**\n+     * Insert additional inputs into the transaction by\n+     * calling CreateTransaction();\n+     */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n+\n+    /**\n+     * Create a new transaction paying the recipients with a set of coins\n+     * selected by SelectCoins(); Also create the change output, when needed\n+     */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);"
      }
    ]
  },
  {
    "sha": "c702521a85640d1972c982879efcb2cb0f897692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzAyNTIxYTg1NjQwZDE5NzJjOTgyODc5ZWZjYjJjYjBmODk3Njky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T12:03:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T12:06:14Z"
      },
      "message": "Merge pull request #6864\n\n268b79e [qt] rpcconsole: Scale monospace font to 95% (MarcoFalke)\n28313b8 [qt] Use fixed pitch font for the rpc console (MarcoFalke)",
      "tree": {
        "sha": "4af243a646e02c6b41263f2ce469610e227513bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af243a646e02c6b41263f2ce469610e227513bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c702521a85640d1972c982879efcb2cb0f897692",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWOfS2AAoJEHSBCwEjRsmm/jMIAI50ER9gXlgvLgNTJpsqHG4D\nAPutPSFehvfz/oH6q56qUP+/pEfoXLGf9T2dttTyO/KQt0Q456AsVyOoV98LnKUU\nyngJtdNXwTgILXMVULnVmNe5WNv1P3BnnoZ6RpuW19EPGb6165HDn3BttypgMNfV\nZYqt96x72djsqg3CP33tSv30WEAAGVKuylRYEkkor8i5T/INF4JZv/lX7O9NCSYv\n196zFFppfeUO/ztRxmC9NyN5+C/rFBBN479z5ssMZOoKkw/tFEfi354S7zOd2eKG\nfOuz+Xzsayr8QqZo9iBRRVrXw+uEqdEo9lXUMonIBzk9xcWsPcd8YuXUQIs2iqU=\n=0iRP\n-----END PGP SIGNATURE-----",
        "payload": "tree 4af243a646e02c6b41263f2ce469610e227513bd\nparent 8a95a18562b2be0b738ec5dd36670c8098c5f255\nparent 268b79ef0c54a3bff0b50e093b98b943e49a4939\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446638630 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446638774 +0100\n\nMerge pull request #6864\n\n268b79e [qt] rpcconsole: Scale monospace font to 95% (MarcoFalke)\n28313b8 [qt] Use fixed pitch font for the rpc console (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c702521a85640d1972c982879efcb2cb0f897692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c702521a85640d1972c982879efcb2cb0f897692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c702521a85640d1972c982879efcb2cb0f897692/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a95a18562b2be0b738ec5dd36670c8098c5f255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a95a18562b2be0b738ec5dd36670c8098c5f255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a95a18562b2be0b738ec5dd36670c8098c5f255"
      },
      {
        "sha": "268b79ef0c54a3bff0b50e093b98b943e49a4939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/268b79ef0c54a3bff0b50e093b98b943e49a4939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/268b79ef0c54a3bff0b50e093b98b943e49a4939"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 18,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a488d298c46a7e53604bad84b07ba71f4824e291",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c702521a85640d1972c982879efcb2cb0f897692/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c702521a85640d1972c982879efcb2cb0f897692/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=c702521a85640d1972c982879efcb2cb0f897692",
        "patch": "@@ -218,7 +218,7 @@ QVariant AddressTableModel::data(const QModelIndex &index, int role) const\n         QFont font;\n         if(index.column() == Address)\n         {\n-            font = GUIUtil::bitcoinAddressFont();\n+            font = GUIUtil::fixedPitchFont();\n         }\n         return font;\n     }"
      },
      {
        "sha": "1c0056a7bd074bfa7bcba2337eec652800339114",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c702521a85640d1972c982879efcb2cb0f897692/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c702521a85640d1972c982879efcb2cb0f897692/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=c702521a85640d1972c982879efcb2cb0f897692",
        "patch": "@@ -88,7 +88,7 @@ QString dateTimeStr(qint64 nTime)\n     return dateTimeStr(QDateTime::fromTime_t((qint32)nTime));\n }\n \n-QFont bitcoinAddressFont()\n+QFont fixedPitchFont()\n {\n     QFont font(\"Monospace\");\n #if QT_VERSION >= 0x040800\n@@ -103,7 +103,7 @@ void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent)\n {\n     parent->setFocusProxy(widget);\n \n-    widget->setFont(bitcoinAddressFont());\n+    widget->setFont(fixedPitchFont());\n #if QT_VERSION >= 0x040700\n     // We don't want translators to use own addresses in translations\n     // and this is the only place, where this address is supplied."
      },
      {
        "sha": "ec678c4af2277a3bd32982cca92a14bad30ab903",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c702521a85640d1972c982879efcb2cb0f897692/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c702521a85640d1972c982879efcb2cb0f897692/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=c702521a85640d1972c982879efcb2cb0f897692",
        "patch": "@@ -37,8 +37,8 @@ namespace GUIUtil\n     QString dateTimeStr(const QDateTime &datetime);\n     QString dateTimeStr(qint64 nTime);\n \n-    // Render Bitcoin addresses in monospace font\n-    QFont bitcoinAddressFont();\n+    // Return a monospace font\n+    QFont fixedPitchFont();\n \n     // Set up widgets for address and amounts\n     void setupAddressWidget(QValidatedLineEdit *widget, QWidget *parent);"
      },
      {
        "sha": "840170182144ac198f35eab723c04b9412d363af",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c702521a85640d1972c982879efcb2cb0f897692/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c702521a85640d1972c982879efcb2cb0f897692/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=c702521a85640d1972c982879efcb2cb0f897692",
        "patch": "@@ -462,13 +462,19 @@ void RPCConsole::clear()\n     }\n \n     // Set default style sheet\n+    QFontInfo fixedFontInfo(GUIUtil::fixedPitchFont());\n+    // Try to make fixed font adequately large on different OS\n+    QString ptSize = QString(\"%1pt\").arg(QFontInfo(QFont()).pointSize() * 8.5 / 9);\n     ui->messagesWidget->document()->setDefaultStyleSheet(\n+        QString(\n                 \"table { }\"\n                 \"td.time { color: #808080; padding-top: 3px; } \"\n+                \"td.message { font-family: %1; font-size: %2; white-space:pre-wrap; } \"\n                 \"td.cmd-request { color: #006060; } \"\n                 \"td.cmd-error { color: red; } \"\n                 \"b { color: #006060; } \"\n-                );\n+            ).arg(fixedFontInfo.family(), ptSize)\n+        );\n \n     message(CMD_REPLY, (tr(\"Welcome to the Bitcoin Core RPC console.\") + \"<br>\" +\n                         tr(\"Use up and down arrows to navigate history, and <b>Ctrl-L</b> to clear screen.\") + \"<br>\" +\n@@ -494,7 +500,7 @@ void RPCConsole::message(int category, const QString &message, bool html)\n     if(html)\n         out += message;\n     else\n-        out += GUIUtil::HtmlEscape(message, true);\n+        out += GUIUtil::HtmlEscape(message, false);\n     out += \"</td></tr></table>\";\n     ui->messagesWidget->append(out);\n }\n@@ -849,4 +855,4 @@ void RPCConsole::showOrHideBanTableIfRequired()\n     bool visible = clientModel->getBanTableModel()->shouldShow();\n     ui->banlistWidget->setVisible(visible);\n     ui->banHeading->setVisible(visible);\n-}\n\\ No newline at end of file\n+}"
      },
      {
        "sha": "d5932ff149ca00338e0bd81d3f714dbb2c38aaa2",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c702521a85640d1972c982879efcb2cb0f897692/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c702521a85640d1972c982879efcb2cb0f897692/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=c702521a85640d1972c982879efcb2cb0f897692",
        "patch": "@@ -71,6 +71,7 @@ private Q_SLOTS:\n \n public Q_SLOTS:\n     void clear();\n+    /** Append the message to the message widget */\n     void message(int category, const QString &message, bool html = false);\n     /** Set number of connections shown in the UI */\n     void setNumConnections(int count);"
      },
      {
        "sha": "4f4b5b70d50e6eea5340af81f613f1df7e605e71",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c702521a85640d1972c982879efcb2cb0f897692/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c702521a85640d1972c982879efcb2cb0f897692/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=c702521a85640d1972c982879efcb2cb0f897692",
        "patch": "@@ -40,7 +40,7 @@ SendCoinsEntry::SendCoinsEntry(const PlatformStyle *platformStyle, QWidget *pare\n     // normal bitcoin address field\n     GUIUtil::setupAddressWidget(ui->payTo, this);\n     // just a label for displaying bitcoin address(es)\n-    ui->payTo_is->setFont(GUIUtil::bitcoinAddressFont());\n+    ui->payTo_is->setFont(GUIUtil::fixedPitchFont());\n \n     // Connect signals\n     connect(ui->payAmount, SIGNAL(valueChanged()), this, SIGNAL(payAmountChanged()));"
      },
      {
        "sha": "96f50a26563ff53db27eb315bfa13e8c21bfcc6d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c702521a85640d1972c982879efcb2cb0f897692/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c702521a85640d1972c982879efcb2cb0f897692/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=c702521a85640d1972c982879efcb2cb0f897692",
        "patch": "@@ -51,8 +51,8 @@ SignVerifyMessageDialog::SignVerifyMessageDialog(const PlatformStyle *platformSt\n     ui->messageIn_VM->installEventFilter(this);\n     ui->signatureIn_VM->installEventFilter(this);\n \n-    ui->signatureOut_SM->setFont(GUIUtil::bitcoinAddressFont());\n-    ui->signatureIn_VM->setFont(GUIUtil::bitcoinAddressFont());\n+    ui->signatureOut_SM->setFont(GUIUtil::fixedPitchFont());\n+    ui->signatureIn_VM->setFont(GUIUtil::fixedPitchFont());\n }\n \n SignVerifyMessageDialog::~SignVerifyMessageDialog()"
      }
    ]
  },
  {
    "sha": "dbacc69b4f2e16841556a69f26ef9f6b81100100",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmFjYzY5YjRmMmUxNjg0MTU1NmE2OWYyNmVmOWY2YjgxMTAwMTAw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T11:00:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T15:19:28Z"
      },
      "message": "build: If both Qt4 and Qt5 are installed, use Qt5\n\nIf both Qt4 and Qt5 development headers are installed, use Qt5. Building\nagainst Qt5 should be encouraged as that is where active development\nhappens.",
      "tree": {
        "sha": "93741fe96e25f7e338a351abdaaac228306ff03b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93741fe96e25f7e338a351abdaaac228306ff03b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbacc69b4f2e16841556a69f26ef9f6b81100100",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbacc69b4f2e16841556a69f26ef9f6b81100100",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbacc69b4f2e16841556a69f26ef9f6b81100100",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbacc69b4f2e16841556a69f26ef9f6b81100100/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29c3c43e19caf70ad707ecf6c98d879254ea67cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29c3c43e19caf70ad707ecf6c98d879254ea67cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29c3c43e19caf70ad707ecf6c98d879254ea67cc"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4ea2e734e8aceb267ff39b094dbbc8c23fefebe3",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbacc69b4f2e16841556a69f26ef9f6b81100100/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbacc69b4f2e16841556a69f26ef9f6b81100100/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=dbacc69b4f2e16841556a69f26ef9f6b81100100",
        "patch": "@@ -50,7 +50,7 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n   dnl enable qt support\n   AC_ARG_WITH([gui],\n     [AS_HELP_STRING([--with-gui@<:@=no|qt4|qt5|auto@:>@],\n-    [build bitcoin-qt GUI (default=auto, qt4 tried first)])],\n+    [build bitcoin-qt GUI (default=auto, qt5 tried first)])],\n     [\n      bitcoin_qt_want_version=$withval\n      if test x$bitcoin_qt_want_version = xyes; then"
      },
      {
        "sha": "d94dd0c3dcc9f934eb3abf5cba1242c640709356",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbacc69b4f2e16841556a69f26ef9f6b81100100/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbacc69b4f2e16841556a69f26ef9f6b81100100/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=dbacc69b4f2e16841556a69f26ef9f6b81100100",
        "patch": "@@ -538,7 +538,7 @@ fi\n BITCOIN_QT_INIT\n \n dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n+BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt5])\n \n if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n     use_boost=no"
      },
      {
        "sha": "2102bbc8309b6f7733e3fab1b638babf9158f6f1",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbacc69b4f2e16841556a69f26ef9f6b81100100/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbacc69b4f2e16841556a69f26ef9f6b81100100/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=dbacc69b4f2e16841556a69f26ef9f6b81100100",
        "patch": "@@ -100,7 +100,7 @@ Dependencies for the GUI: Ubuntu & Debian\n \n If you want to build Bitcoin-Qt, make sure that the required packages for Qt development\n are installed. Either Qt 5 or Qt 4 are necessary to build the GUI.\n-If both Qt 4 and Qt 5 are installed, Qt 4 will be used. Pass `--with-gui=qt5` to configure to choose Qt5.\n+If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass `--with-gui=qt4` to configure to choose Qt4.\n To build without GUI pass `--without-gui`.\n \n To build with Qt 5 (recommended) you need the following:"
      }
    ]
  },
  {
    "sha": "193f7b553e0ad41e6579adbce867ef14866034b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTNmN2I1NTNlMGFkNDFlNjU3OWFkYmNlODY3ZWYxNDg2NjAzNGIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T15:42:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-11-04T15:43:12Z"
      },
      "message": "Merge pull request #6938\n\ndbacc69 build: If both Qt4 and Qt5 are installed, use Qt5 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "fb990b1282002709cb369cbcee6466eec45b1f65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb990b1282002709cb369cbcee6466eec45b1f65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/193f7b553e0ad41e6579adbce867ef14866034b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJWOieQAAoJEHSBCwEjRsmmR0kIAIFeJr92TIq2aFGCncbBWXjx\nwj0gdB7WUz4/VrXCWmDJptuFwfXRzx/juPuxOQx9970RsH4jv7wJNHz72R9BSzyI\ng5fWLWKws/Xu27qM79WPEu//fCV3iSXgrBXFbQolBi+lspXg83daQRLAr+OWb5Gq\n2xmlycYX0SRVvO1QytLAbXVWwS54NZ6rNZ4Qti8mu/MevSWjIBIOsNmDQnZ8lUlf\n+OZ5s+E8QXmN2MGWSEFaYZkHfAV3ilF6A40Q8fUKYI14E0sTxsZKzIefzkxpLJRr\nVGuMS1LMtz434T4o1EcM4GymOXBzXulVvx8PQauaSoYSb3xf8rbULyu0lIUVOug=\n=FMWf\n-----END PGP SIGNATURE-----",
        "payload": "tree fb990b1282002709cb369cbcee6466eec45b1f65\nparent c702521a85640d1972c982879efcb2cb0f897692\nparent dbacc69b4f2e16841556a69f26ef9f6b81100100\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1446651771 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1446651792 +0100\n\nMerge pull request #6938\n\ndbacc69 build: If both Qt4 and Qt5 are installed, use Qt5 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/193f7b553e0ad41e6579adbce867ef14866034b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/193f7b553e0ad41e6579adbce867ef14866034b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/193f7b553e0ad41e6579adbce867ef14866034b0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c702521a85640d1972c982879efcb2cb0f897692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c702521a85640d1972c982879efcb2cb0f897692",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c702521a85640d1972c982879efcb2cb0f897692"
      },
      {
        "sha": "dbacc69b4f2e16841556a69f26ef9f6b81100100",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbacc69b4f2e16841556a69f26ef9f6b81100100",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbacc69b4f2e16841556a69f26ef9f6b81100100"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4ea2e734e8aceb267ff39b094dbbc8c23fefebe3",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/193f7b553e0ad41e6579adbce867ef14866034b0/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/193f7b553e0ad41e6579adbce867ef14866034b0/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=193f7b553e0ad41e6579adbce867ef14866034b0",
        "patch": "@@ -50,7 +50,7 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n   dnl enable qt support\n   AC_ARG_WITH([gui],\n     [AS_HELP_STRING([--with-gui@<:@=no|qt4|qt5|auto@:>@],\n-    [build bitcoin-qt GUI (default=auto, qt4 tried first)])],\n+    [build bitcoin-qt GUI (default=auto, qt5 tried first)])],\n     [\n      bitcoin_qt_want_version=$withval\n      if test x$bitcoin_qt_want_version = xyes; then"
      },
      {
        "sha": "d94dd0c3dcc9f934eb3abf5cba1242c640709356",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/193f7b553e0ad41e6579adbce867ef14866034b0/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/193f7b553e0ad41e6579adbce867ef14866034b0/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=193f7b553e0ad41e6579adbce867ef14866034b0",
        "patch": "@@ -538,7 +538,7 @@ fi\n BITCOIN_QT_INIT\n \n dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt4])\n+BITCOIN_QT_CONFIGURE([$use_pkgconfig], [qt5])\n \n if test x$build_bitcoin_utils$build_bitcoind$bitcoin_enable_qt$use_tests = xnononono; then\n     use_boost=no"
      },
      {
        "sha": "2102bbc8309b6f7733e3fab1b638babf9158f6f1",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/193f7b553e0ad41e6579adbce867ef14866034b0/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/193f7b553e0ad41e6579adbce867ef14866034b0/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=193f7b553e0ad41e6579adbce867ef14866034b0",
        "patch": "@@ -100,7 +100,7 @@ Dependencies for the GUI: Ubuntu & Debian\n \n If you want to build Bitcoin-Qt, make sure that the required packages for Qt development\n are installed. Either Qt 5 or Qt 4 are necessary to build the GUI.\n-If both Qt 4 and Qt 5 are installed, Qt 4 will be used. Pass `--with-gui=qt5` to configure to choose Qt5.\n+If both Qt 4 and Qt 5 are installed, Qt 5 will be used. Pass `--with-gui=qt4` to configure to choose Qt4.\n To build without GUI pass `--without-gui`.\n \n To build with Qt 5 (recommended) you need the following:"
      }
    ]
  },
  {
    "sha": "f0343e937094291ffad43783d2685d7ca9d5e60d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDM0M2U5MzcwOTQyOTFmZmFkNDM3ODNkMjY4NWQ3Y2E5ZDVlNjBk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-04T22:46:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-11-04T22:46:47Z"
      },
      "message": "Update LevelDB",
      "tree": {
        "sha": "4f1adc0c3061894c5f0c2689fd143eb712fcad11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f1adc0c3061894c5f0c2689fd143eb712fcad11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0343e937094291ffad43783d2685d7ca9d5e60d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0343e937094291ffad43783d2685d7ca9d5e60d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0343e937094291ffad43783d2685d7ca9d5e60d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0343e937094291ffad43783d2685d7ca9d5e60d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "193f7b553e0ad41e6579adbce867ef14866034b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/193f7b553e0ad41e6579adbce867ef14866034b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/193f7b553e0ad41e6579adbce867ef14866034b0"
      },
      {
        "sha": "fb9857bfd68c13b52e14bc28dd981bc12501806a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb9857bfd68c13b52e14bc28dd981bc12501806a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb9857bfd68c13b52e14bc28dd981bc12501806a"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 39,
      "deletions": 197
    },
    "files": [
      {
        "sha": "e11a96b791871506cfe004f32520f6d76314dccf",
        "filename": "src/leveldb/util/env_win.cc",
        "status": "modified",
        "additions": 39,
        "deletions": 197,
        "changes": 236,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0343e937094291ffad43783d2685d7ca9d5e60d/src/leveldb/util/env_win.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0343e937094291ffad43783d2685d7ca9d5e60d/src/leveldb/util/env_win.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_win.cc?ref=f0343e937094291ffad43783d2685d7ca9d5e60d",
        "patch": "@@ -103,39 +103,20 @@ class Win32RandomAccessFile : public RandomAccessFile\n     DISALLOW_COPY_AND_ASSIGN(Win32RandomAccessFile);\n };\n \n-class Win32MapFile : public WritableFile\n+class Win32WritableFile : public WritableFile\n {\n public:\n-    Win32MapFile(const std::string& fname);\n+    Win32WritableFile(const std::string& fname);\n+    ~Win32WritableFile();\n \n-    ~Win32MapFile();\n     virtual Status Append(const Slice& data);\n     virtual Status Close();\n     virtual Status Flush();\n     virtual Status Sync();\n     BOOL isEnable();\n private:\n-    std::string _filename;\n-    HANDLE _hFile;\n-    size_t _page_size;\n-    size_t _map_size;       // How much extra memory to map at a time\n-    char* _base;            // The mapped region\n-    HANDLE _base_handle;\t\n-    char* _limit;           // Limit of the mapped region\n-    char* _dst;             // Where to write next  (in range [base_,limit_])\n-    char* _last_sync;       // Where have we synced up to\n-    uint64_t _file_offset;  // Offset of base_ in file\n-    //LARGE_INTEGER file_offset_;\n-    // Have we done an munmap of unsynced data?\n-    bool _pending_sync;\n-\n-    // Roundup x to a multiple of y\n-    static size_t _Roundup(size_t x, size_t y);\n-    size_t _TruncateToPageBoundary(size_t s);\n-    bool _UnmapCurrentRegion();\n-    bool _MapNewRegion();\n-    DISALLOW_COPY_AND_ASSIGN(Win32MapFile);\n-    BOOL _Init(LPCWSTR Path);\n+    std::string filename_;\n+    ::HANDLE _hFile;\n };\n \n class Win32FileLock : public FileLock\n@@ -442,202 +423,63 @@ void Win32RandomAccessFile::_CleanUp()\n     }\n }\n \n-size_t Win32MapFile::_Roundup( size_t x, size_t y )\n+Win32WritableFile::Win32WritableFile(const std::string& fname)\n+    : filename_(fname)\n {\n-    return ((x + y - 1) / y) * y;\n+    std::wstring path;\n+    ToWidePath(fname, path);\n+    DWORD Flag = PathFileExistsW(path.c_str()) ? OPEN_EXISTING : CREATE_ALWAYS;\n+    _hFile = CreateFileW(path.c_str(),\n+                         GENERIC_READ | GENERIC_WRITE,\n+                         FILE_SHARE_READ|FILE_SHARE_DELETE|FILE_SHARE_WRITE,\n+                         NULL,\n+                         Flag,\n+                         FILE_ATTRIBUTE_NORMAL,\n+                         NULL);\n+    // CreateFileW returns INVALID_HANDLE_VALUE in case of error, always check isEnable() before use\n }\n \n-size_t Win32MapFile::_TruncateToPageBoundary( size_t s )\n+Win32WritableFile::~Win32WritableFile()\n {\n-    s -= (s & (_page_size - 1));\n-    assert((s % _page_size) == 0);\n-    return s;\n+    if (_hFile != INVALID_HANDLE_VALUE)\n+        Close();\n }\n \n-bool Win32MapFile::_UnmapCurrentRegion()\n+Status Win32WritableFile::Append(const Slice& data)\n {\n-    bool result = true;\n-    if (_base != NULL) {\n-        if (_last_sync < _limit) {\n-            // Defer syncing this data until next Sync() call, if any\n-            _pending_sync = true;\n-        }\n-        if (!UnmapViewOfFile(_base) || !CloseHandle(_base_handle))\n-            result = false;\n-        _file_offset += _limit - _base;\n-        _base = NULL;\n-        _base_handle = NULL;\n-        _limit = NULL;\n-        _last_sync = NULL;\n-        _dst = NULL;\n-        // Increase the amount we map the next time, but capped at 1MB\n-        if (_map_size < (1<<20)) {\n-            _map_size *= 2;\n-        }\n+    DWORD r = 0;\n+    if (!WriteFile(_hFile, data.data(), data.size(), &r, NULL) || r != data.size()) {\n+        return Status::IOError(\"Win32WritableFile.Append::WriteFile: \"+filename_, Win32::GetLastErrSz());\n     }\n-    return result;\n-}\n-\n-bool Win32MapFile::_MapNewRegion()\n-{\n-    assert(_base == NULL);\n-    //LONG newSizeHigh = (LONG)((file_offset_ + map_size_) >> 32);\n-    //LONG newSizeLow = (LONG)((file_offset_ + map_size_) & 0xFFFFFFFF);\n-    DWORD off_hi = (DWORD)(_file_offset >> 32);\n-    DWORD off_lo = (DWORD)(_file_offset & 0xFFFFFFFF);\n-    LARGE_INTEGER newSize;\n-    newSize.QuadPart = _file_offset + _map_size;\n-    SetFilePointerEx(_hFile, newSize, NULL, FILE_BEGIN);\n-    SetEndOfFile(_hFile);\n-\n-    _base_handle = CreateFileMappingA(\n-        _hFile,\n-        NULL,\n-        PAGE_READWRITE,\n-        0,\n-        0,\n-        0);\n-    if (_base_handle != NULL) {\n-        _base = (char*) MapViewOfFile(_base_handle,\n-            FILE_MAP_ALL_ACCESS,\n-            off_hi,\n-            off_lo,\n-            _map_size);\n-        if (_base != NULL) {\n-            _limit = _base + _map_size;\n-            _dst = _base;\n-            _last_sync = _base;\n-            return true;\n-        }\n-    }\n-    return false;\n+    return Status::OK();\n }\n \n-Win32MapFile::Win32MapFile( const std::string& fname) :\n-    _filename(fname),\n-    _hFile(NULL),\n-    _page_size(Win32::g_PageSize),\n-    _map_size(_Roundup(65536, Win32::g_PageSize)),\n-    _base(NULL),\n-    _base_handle(NULL),\n-    _limit(NULL),\n-    _dst(NULL),\n-    _last_sync(NULL),\n-    _file_offset(0),\n-    _pending_sync(false)\n+Status Win32WritableFile::Close()\n {\n-\tstd::wstring path;\n-\tToWidePath(fname, path);\n-    _Init(path.c_str());\n-    assert((Win32::g_PageSize & (Win32::g_PageSize - 1)) == 0);\n-}\n-\n-Status Win32MapFile::Append( const Slice& data )\n-{\n-    const char* src = data.data();\n-    size_t left = data.size();\n-    Status s;\n-    while (left > 0) {\n-        assert(_base <= _dst);\n-        assert(_dst <= _limit);\n-        size_t avail = _limit - _dst;\n-        if (avail == 0) {\n-            if (!_UnmapCurrentRegion() ||\n-                !_MapNewRegion()) {\n-                    return Status::IOError(\"WinMmapFile.Append::UnmapCurrentRegion or MapNewRegion: \", Win32::GetLastErrSz());\n-            }\n-        }\n-        size_t n = (left <= avail) ? left : avail;\n-        memcpy(_dst, src, n);\n-        _dst += n;\n-        src += n;\n-        left -= n;\n-    }\n-    return s;\n-}\n-\n-Status Win32MapFile::Close()\n-{\n-    Status s;\n-    size_t unused = _limit - _dst;\n-    if (!_UnmapCurrentRegion()) {\n-        s = Status::IOError(\"WinMmapFile.Close::UnmapCurrentRegion: \",Win32::GetLastErrSz());\n-    } else if (unused > 0) {\n-        // Trim the extra space at the end of the file\n-        LARGE_INTEGER newSize;\n-        newSize.QuadPart = _file_offset - unused;\n-        if (!SetFilePointerEx(_hFile, newSize, NULL, FILE_BEGIN)) {\n-            s = Status::IOError(\"WinMmapFile.Close::SetFilePointer: \",Win32::GetLastErrSz());\n-        } else \n-            SetEndOfFile(_hFile);\n-    }\n     if (!CloseHandle(_hFile)) {\n-        if (s.ok()) {\n-            s = Status::IOError(\"WinMmapFile.Close::CloseHandle: \", Win32::GetLastErrSz());\n-        }\n+        return Status::IOError(\"Win32WritableFile.Close::CloseHandle: \"+filename_, Win32::GetLastErrSz());\n     }\n     _hFile = INVALID_HANDLE_VALUE;\n-    _base = NULL;\n-    _base_handle = NULL;\n-    _limit = NULL;\n-\n-    return s;\n-}\n-\n-Status Win32MapFile::Sync()\n-{\n-    Status s;\n-    if (_pending_sync) {\n-        // Some unmapped data was not synced\n-        _pending_sync = false;\n-        if (!FlushFileBuffers(_hFile)) {\n-            s = Status::IOError(\"WinMmapFile.Sync::FlushFileBuffers: \",Win32::GetLastErrSz());\n-        }\n-    }\n-    if (_dst > _last_sync) {\n-        // Find the beginnings of the pages that contain the first and last\n-        // bytes to be synced.\n-        size_t p1 = _TruncateToPageBoundary(_last_sync - _base);\n-        size_t p2 = _TruncateToPageBoundary(_dst - _base - 1);\n-        _last_sync = _dst;\n-        if (!FlushViewOfFile(_base + p1, p2 - p1 + _page_size)) {\n-            s = Status::IOError(\"WinMmapFile.Sync::FlushViewOfFile: \",Win32::GetLastErrSz());\n-        }\n-    }\n-    return s;\n+    return Status::OK();\n }\n \n-Status Win32MapFile::Flush()\n+Status Win32WritableFile::Flush()\n {\n+    // Nothing to do here, there are no application-side buffers\n     return Status::OK();\n }\n \n-Win32MapFile::~Win32MapFile()\n+Status Win32WritableFile::Sync()\n {\n-    if (_hFile != INVALID_HANDLE_VALUE) { \n-        Win32MapFile::Close();\n+    if (!FlushFileBuffers(_hFile)) {\n+        return Status::IOError(\"Win32WritableFile.Sync::FlushFileBuffers \"+filename_, Win32::GetLastErrSz());\n     }\n+    return Status::OK();\n }\n \n-BOOL Win32MapFile::_Init( LPCWSTR Path )\n-{\n-    DWORD Flag = PathFileExistsW(Path) ? OPEN_EXISTING : CREATE_ALWAYS;\n-    _hFile = CreateFileW(Path,\n-                         GENERIC_READ | GENERIC_WRITE,\n-                         FILE_SHARE_READ|FILE_SHARE_DELETE|FILE_SHARE_WRITE,\n-                         NULL,\n-                         Flag,\n-                         FILE_ATTRIBUTE_NORMAL,\n-                         NULL);\n-    if(!_hFile || _hFile == INVALID_HANDLE_VALUE)\n-        return FALSE;\n-    else\n-        return TRUE;\n-}\n-\n-BOOL Win32MapFile::isEnable()\n+BOOL Win32WritableFile::isEnable()\n {\n-    return _hFile ? TRUE : FALSE;\n+    return _hFile != INVALID_HANDLE_VALUE;\n }\n \n Win32FileLock::Win32FileLock( const std::string& fname ) :\n@@ -981,7 +823,7 @@ Status Win32Env::NewLogger( const std::string& fname, Logger** result )\n {\n     Status sRet;\n     std::string path = fname;\n-    Win32MapFile* pMapFile = new Win32MapFile(ModifyPath(path));\n+    Win32WritableFile* pMapFile = new Win32WritableFile(ModifyPath(path));\n     if(!pMapFile->isEnable()){\n         delete pMapFile;\n         *result = NULL;\n@@ -995,7 +837,7 @@ Status Win32Env::NewWritableFile( const std::string& fname, WritableFile** resul\n {\n     Status sRet;\n     std::string path = fname;\n-    Win32MapFile* pFile = new Win32MapFile(ModifyPath(path));\n+    Win32WritableFile* pFile = new Win32WritableFile(ModifyPath(path));\n     if(!pFile->isEnable()){\n         *result = NULL;\n         sRet = Status::IOError(fname,Win32::GetLastErrSz());"
      }
    ]
  }
]