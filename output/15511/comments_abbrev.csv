gmaxwell,2019-03-01T15:27:25Z,What's the motivation for this?  Generally we've regarded the flags as rather esoteric troubleshooting stuff.   The example output doesn't make it clear how unknown values would be handled.,https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468702591,468702591,
darosior,2019-03-01T15:38:05Z,"The motivation is that it is more readable for an user which services the node provides, thus making it more convenient to use : no need to parse the flags himself (which needs to read the code to check what is the meaning of each flag).  \nUnknown values just won't pass the conditions and would not be returned, is it an issue ?",https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468706346,468706346,
kristapsk,2019-03-01T15:42:43Z,"NACK, there could be some software that expects output of `getnetworkinfo` RPC as it is now. This will break compatibility. User-friendly services field could be added, but then as a new field, not replacing existing one.",https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468707977,468707977,
darosior,2019-03-01T16:00:17Z,Indeed.,https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468714007,468714007,
darosior,2019-03-01T16:11:55Z,Changed the behavior to add a new field instead of modifying the existent one. Edited the description.,https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468717954,468717954,
gmaxwell,2019-03-01T23:04:25Z,"I'm sorry, I don't see how ""more readable"" is actually helpful in and of itself. Why does anyone need to be reading these things?\n\n> Unknown values just won't pass the conditions and would not be returned, is it an issue ?\n\nYes, field is a lot more useful for unknown values-- e.g. reasoning about new or incompatible software-- than it is for known ones.",https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468841508,468841508,
darosior,2019-03-02T11:24:22Z,"> I'm sorry, I don't see how ""more readable"" is actually helpful in and of itself. Why does anyone need to be reading these things?\n\nActually, I made this after helping the guy asking about `NODE_GETUTXO` on the thread your responded to on bitcointalk. I thought that other node owners would wonder which services their node supports.\nI understand that I may be wrong and this may just be usele",https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468911818,468911818,
sdaftuar,2019-03-02T16:44:52Z,"For what it's worth, I would concept ACK something like this -- the times I use `getpeerinfo` tend to be times I'm debugging something, and having the service bits be more easy to decode would be helpful to me.",https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-468937216,468937216,
Sjors,2019-09-01T11:44:28Z,"Concept ACK. I didn't know about this PR when I opened #16780. Don't override the existing field though. You could make the output more compact by presenting it as a string: `NODE_NETWORK | NODE_BLOOM`.\n\nIf people still find that too much visual clutter, especially in the already quite long output of `getpeerinfo`, you could add a `debug` param. If you go that route, then I suggest returning a",https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-526911749,526911749,
darosior,2019-09-02T10:01:37Z,"Reopening since @sdaftuar and @Sjors concept ACKed.\nRebased and modified, as proposed in https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-526911749, the array to a string (this introduces some temporary variables but the output is much nicer) : since it only adds one line I think it doesnt worth a command argument addition.\n\nHere is a truncated output of `getpeerinfo`:\n```\n""ser",https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-527087370,527087370,
darosior,2019-09-02T10:13:47Z,Reopened in a new PR (#16787) since I force pushed before clicking reopen....,https://github.com/bitcoin/bitcoin/pull/15511#issuecomment-527091390,527091390,
