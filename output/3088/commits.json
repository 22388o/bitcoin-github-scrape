[
  {
    "sha": "a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODUxYmY4NGY2YTJmZjk1YmQ4NmIyM2U1NWJiMDY0N2Y1ZjQ3MTg4",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-10-13T22:29:35Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2013-10-13T22:29:35Z"
      },
      "message": "[net] Don't use third-party \"what is my IP\" services.\n\nThis patch eliminates the privacy and reliability problematic use\nof centralized web services for discovering the node's addresses\nfor advertisement.\n\nThe Bitcoin protocol already allows your peers to tell you what\nIP they think you have, but this data isn't trustworthy since\nthey could lie. So the challenge is using it without creating a\nDOS vector.\n\nTo accomplish this we adopt an approach similar to the one used\nby P2Pool:  If we're announcing and don't have a better address\ndiscovered (e.g. via UPNP) or configured we just announce to\neach peer the address that peer told us.  Since peers could\nalready replace, forge, or drop our address messages this cannot\ncreate a new vulnerability... but if even one of our peers is\ngiving us a good address we'll eventually make a useful\nadvertisement.",
      "tree": {
        "sha": "8de47ce22f6d63a4da08e8955c4a5eb6f8790007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8de47ce22f6d63a4da08e8955c4a5eb6f8790007"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56c0ba7a0f893c71eb871b95f36c18e37407bf00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56c0ba7a0f893c71eb871b95f36c18e37407bf00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56c0ba7a0f893c71eb871b95f36c18e37407bf00"
      }
    ],
    "stats": {
      "total": 254,
      "additions": 77,
      "deletions": 177
    },
    "files": [
      {
        "sha": "7ea73ef92546d5843bd7ae43097195ada8c3d842",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -157,4 +157,19 @@ namespace Checkpoints\n         }\n         return NULL;\n     }\n+\n+    bool IsInitialBlockDownload()\n+    {\n+        if (pindexBest == NULL || fImporting || fReindex || nBestHeight < GetTotalBlocksEstimate())\n+            return true;\n+        static int64 nLastUpdate;\n+        static CBlockIndex* pindexLastBest;\n+        if (pindexBest != pindexLastBest)\n+        {\n+            pindexLastBest = pindexBest;\n+            nLastUpdate = GetTime();\n+        }\n+        return (GetTime() - nLastUpdate < 10 &&\n+                pindexBest->GetBlockTime() < GetTime() - 24 * 60 * 60);\n+    }\n }"
      },
      {
        "sha": "068c84b00a6d281ffd73d094026ebdfd187dc842",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -26,6 +26,10 @@ namespace Checkpoints\n     double GuessVerificationProgress(CBlockIndex *pindex);\n \n     extern bool fEnabled;\n+\n+    /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n+    bool IsInitialBlockDownload();\n }\n \n+\n #endif"
      },
      {
        "sha": "8bfc734de0c458d3566ea67b0a0c95e1430729ea",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -329,6 +329,7 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n  */\n bool AppInit2(boost::thread_group& threadGroup)\n {\n+    nNodeStartTime = GetTime();\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n     // Turn off Microsoft heap dump noise\n@@ -531,7 +532,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"Bitcoin version %s (%s)\\n\", FormatFullVersion().c_str(), CLIENT_DATE.c_str());\n     LogPrintf(\"Using OpenSSL version %s\\n\", SSLeay_version(SSLEAY_VERSION));\n     if (!fLogTimestamps)\n-        LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()).c_str());\n+        LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", nNodeStartTime).c_str());\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string().c_str());\n     LogPrintf(\"Using data directory %s\\n\", strDataDir.c_str());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);"
      },
      {
        "sha": "601ec3a273c949029939aaa24bfa52ef6ec1709b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 31,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -1231,7 +1231,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n \n     // Flush stdio buffers and commit to disk before returning\n     fflush(fileout);\n-    if (!IsInitialBlockDownload())\n+    if (!Checkpoints::IsInitialBlockDownload())\n         FileCommit(fileout);\n \n     return true;\n@@ -1402,21 +1402,6 @@ int GetNumBlocksOfPeers()\n     return std::max(cPeerBlockCounts.median(), Checkpoints::GetTotalBlocksEstimate());\n }\n \n-bool IsInitialBlockDownload()\n-{\n-    if (pindexBest == NULL || fImporting || fReindex || nBestHeight < Checkpoints::GetTotalBlocksEstimate())\n-        return true;\n-    static int64 nLastUpdate;\n-    static CBlockIndex* pindexLastBest;\n-    if (pindexBest != pindexLastBest)\n-    {\n-        pindexLastBest = pindexBest;\n-        nLastUpdate = GetTime();\n-    }\n-    return (GetTime() - nLastUpdate < 10 &&\n-            pindexBest->GetBlockTime() < GetTime() - 24 * 60 * 60);\n-}\n-\n bool fLargeWorkForkFound = false;\n bool fLargeWorkInvalidChainFound = false;\n CBlockIndex *pindexBestForkTip = NULL, *pindexBestForkBase = NULL;\n@@ -1425,7 +1410,7 @@ void CheckForkWarningConditions()\n {\n     // Before we get past initial download, we cannot reliably alert about forks\n     // (we assume we don't get stuck on a fork before the last checkpoint)\n-    if (IsInitialBlockDownload())\n+    if (Checkpoints::IsInitialBlockDownload())\n         return;\n \n     // If our best fork is no longer within 72 blocks (+/- 12 hours if no one mines it)\n@@ -2110,7 +2095,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         LogPrintf(\"- Flush %i transactions: %.2fms (%.4fms/tx)\\n\", nModified, 0.001 * nTime, 0.001 * nTime / nModified);\n \n     // Make sure it's successfully written to disk before changing memory structure\n-    bool fIsInitialDownload = IsInitialBlockDownload();\n+    bool fIsInitialDownload = Checkpoints::IsInitialBlockDownload();\n     if (!fIsInitialDownload || pcoinsTip->GetCacheSize() > nCoinCacheSize) {\n         // Typical CCoins structures on disk are around 100 bytes in size.\n         // Pushing a new one to the database can cause it to be written\n@@ -3431,6 +3416,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         else\n             pfrom->fRelayTxes = true;\n \n+        pfrom->addrMe = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n             pfrom->addrLocal = addrMe;\n@@ -3460,12 +3446,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         if (!pfrom->fInbound)\n         {\n             // Advertise our address\n-            if (!fNoListen && !IsInitialBlockDownload())\n-            {\n-                CAddress addr = GetLocalAddress(&pfrom->addr);\n-                if (addr.IsRoutable())\n-                    pfrom->PushAddress(addr);\n-            }\n+            if (!fNoListen && !Checkpoints::IsInitialBlockDownload())\n+                AdvertizeLocalNode(pfrom, true);\n \n             // Get recent addresses\n             if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || addrman.size() < 1000)\n@@ -4103,14 +4085,14 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Resend wallet transactions that haven't gotten in a block yet\n         // Except during reindex, importing and IBD, when old wallet\n         // transactions become unconfirmed and spams other nodes.\n-        if (!fReindex && !fImporting && !IsInitialBlockDownload())\n+        if (!fReindex && !fImporting && !Checkpoints::IsInitialBlockDownload())\n         {\n             ResendWalletTransactions();\n         }\n \n         // Address refresh broadcast\n         static int64 nLastRebroadcast;\n-        if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n+        if (!Checkpoints::IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60) && (GetTime() - nNodeStartTime > 60 * 60))\n         {\n             {\n                 LOCK(cs_vNodes);\n@@ -4122,11 +4104,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n \n                     // Rebroadcast our address\n                     if (!fNoListen)\n-                    {\n-                        CAddress addr = GetLocalAddress(&pnode->addr);\n-                        if (addr.IsRoutable())\n-                            pnode->PushAddress(addr);\n-                    }\n+                        AdvertizeLocalNode(pnode,true);\n                 }\n             }\n             nLastRebroadcast = GetTime();"
      },
      {
        "sha": "5903915456b119d25f4ee62a6bc35dab8dffaa6f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -14,6 +14,7 @@\n #include \"sync.h\"\n #include \"net.h\"\n #include \"script.h\"\n+#include \"checkpoints.h\"\n \n #include <list>\n \n@@ -167,8 +168,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n unsigned int ComputeMinWork(unsigned int nBase, int64 nTime);\n /** Get the number of active peers */\n int GetNumBlocksOfPeers();\n-/** Check whether we are doing an initial block download (synchronizing from disk or network) */\n-bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core */\n std::string GetWarnings(std::string strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n@@ -365,7 +364,7 @@ class CBlockUndo\n \n         // Flush stdio buffers and commit to disk before returning\n         fflush(fileout);\n-        if (!IsInitialBlockDownload())\n+        if (!Checkpoints::IsInitialBlockDownload())\n             FileCommit(fileout);\n \n         return true;"
      },
      {
        "sha": "8a2ed37bc76d22bdb235d6260ff79e8177da9eee",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 136,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -14,6 +14,7 @@\n #include \"addrman.h\"\n #include \"ui_interface.h\"\n #include \"script.h\"\n+#include \"checkpoints.h\"\n \n #ifdef WIN32\n #include <string.h>\n@@ -64,6 +65,7 @@ uint64 nLocalHostNonce = 0;\n static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+int64 nNodeStartTime;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -187,22 +189,49 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n     }\n }\n \n+bool static HasSeenLocal(const CService& addr)\n+{\n+    LOCK(cs_mapLocalHost);\n+    if (mapLocalHost.count(addr) == 0)\n+      return false;\n+    return mapLocalHost[addr].nScore > 1;\n+}\n+\n+void AdvertizeLocalNode(CNode* pnode, bool fForce)\n+{\n+    // If our routably addressed peer claims a routable address for\n+    // us on a network we support and we are open to discovery and\n+    // are listening on the default port, and we either don't know\n+    // our address or seems to not be working we'll tell just that\n+    // peer the address it sees for us.\n+    CAddress addrLocal = GetLocalAddress(&pnode->addr);\n+    if (fDiscover && pnode->addr.IsRoutable() && pnode->addrMe.IsRoutable() && pnode->addrMe != addrLocal &&\n+        GetListenPort() == Params().GetDefaultPort() && !IsLimited(pnode->addrMe.GetNetwork()) &&\n+        (!addrLocal.IsRoutable() || ((GetTime() - nNodeStartTime > 60 * 60) && GetRand(4) == 0 && !HasSeenLocal(addrLocal))))\n+    {\n+        addrLocal = CAddress(pnode->addrMe);\n+        addrLocal.SetPort(GetListenPort());\n+    }\n+    if (addrLocal.IsRoutable() && (fForce || (CService)addrLocal != (CService)pnode->addrLocal))\n+    {\n+        pnode->PushAddress(addrLocal);\n+        pnode->addrLocal = addrLocal;\n+    }\n+}\n+\n // used when scores of local addresses may have changed\n // pushes better local address to peers\n void static AdvertizeLocal()\n {\n+    if (fNoListen)\n+        return;\n+    if (Checkpoints::IsInitialBlockDownload())\n+        return;\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n     {\n         if (pnode->fSuccessfullyConnected)\n-        {\n-            CAddress addrLocal = GetLocalAddress(&pnode->addr);\n-            if (addrLocal.IsRoutable() && (CService)addrLocal != (CService)pnode->addrLocal)\n-            {\n-                pnode->PushAddress(addrLocal);\n-                pnode->addrLocal = addrLocal;\n-            }\n-        }\n+            AdvertizeLocalNode(pnode);\n     }\n }\n \n@@ -299,136 +328,12 @@ bool IsReachable(const CNetAddr& addr)\n     return vfReachable[net] && !vfLimited[net];\n }\n \n-bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n-{\n-    SOCKET hSocket;\n-    if (!ConnectSocket(addrConnect, hSocket))\n-        return error(\"GetMyExternalIP() : connection to %s failed\", addrConnect.ToString().c_str());\n-\n-    send(hSocket, pszGet, strlen(pszGet), MSG_NOSIGNAL);\n-\n-    string strLine;\n-    while (RecvLine(hSocket, strLine))\n-    {\n-        if (strLine.empty()) // HTTP response is separated from headers by blank line\n-        {\n-            while (true)\n-            {\n-                if (!RecvLine(hSocket, strLine))\n-                {\n-                    closesocket(hSocket);\n-                    return false;\n-                }\n-                if (pszKeyword == NULL)\n-                    break;\n-                if (strLine.find(pszKeyword) != string::npos)\n-                {\n-                    strLine = strLine.substr(strLine.find(pszKeyword) + strlen(pszKeyword));\n-                    break;\n-                }\n-            }\n-            closesocket(hSocket);\n-            if (strLine.find(\"<\") != string::npos)\n-                strLine = strLine.substr(0, strLine.find(\"<\"));\n-            strLine = strLine.substr(strspn(strLine.c_str(), \" \\t\\n\\r\"));\n-            while (strLine.size() > 0 && isspace(strLine[strLine.size()-1]))\n-                strLine.resize(strLine.size()-1);\n-            CService addr(strLine,0,true);\n-            LogPrintf(\"GetMyExternalIP() received [%s] %s\\n\", strLine.c_str(), addr.ToString().c_str());\n-            if (!addr.IsValid() || !addr.IsRoutable())\n-                return false;\n-            ipRet.SetIP(addr);\n-            return true;\n-        }\n-    }\n-    closesocket(hSocket);\n-    return error(\"GetMyExternalIP() : connection closed\");\n-}\n-\n-bool GetMyExternalIP(CNetAddr& ipRet)\n-{\n-    CService addrConnect;\n-    const char* pszGet;\n-    const char* pszKeyword;\n-\n-    for (int nLookup = 0; nLookup <= 1; nLookup++)\n-    for (int nHost = 1; nHost <= 2; nHost++)\n-    {\n-        // We should be phasing out our use of sites like these. If we need\n-        // replacements, we should ask for volunteers to put this simple\n-        // php file on their web server that prints the client IP:\n-        //  <?php echo $_SERVER[\"REMOTE_ADDR\"]; ?>\n-        if (nHost == 1)\n-        {\n-            addrConnect = CService(\"91.198.22.70\", 80); // checkip.dyndns.org\n-\n-            if (nLookup == 1)\n-            {\n-                CService addrIP(\"checkip.dyndns.org\", 80, true);\n-                if (addrIP.IsValid())\n-                    addrConnect = addrIP;\n-            }\n-\n-            pszGet = \"GET / HTTP/1.1\\r\\n\"\n-                     \"Host: checkip.dyndns.org\\r\\n\"\n-                     \"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\\r\\n\"\n-                     \"Connection: close\\r\\n\"\n-                     \"\\r\\n\";\n-\n-            pszKeyword = \"Address:\";\n-        }\n-        else if (nHost == 2)\n-        {\n-            addrConnect = CService(\"74.208.43.192\", 80); // www.showmyip.com\n-\n-            if (nLookup == 1)\n-            {\n-                CService addrIP(\"www.showmyip.com\", 80, true);\n-                if (addrIP.IsValid())\n-                    addrConnect = addrIP;\n-            }\n-\n-            pszGet = \"GET /simple/ HTTP/1.1\\r\\n\"\n-                     \"Host: www.showmyip.com\\r\\n\"\n-                     \"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\\r\\n\"\n-                     \"Connection: close\\r\\n\"\n-                     \"\\r\\n\";\n-\n-            pszKeyword = NULL; // Returns just IP address\n-        }\n-\n-        if (GetMyExternalIP2(addrConnect, pszGet, pszKeyword, ipRet))\n-            return true;\n-    }\n-\n-    return false;\n-}\n-\n-void ThreadGetMyExternalIP()\n-{\n-    CNetAddr addrLocalHost;\n-    if (GetMyExternalIP(addrLocalHost))\n-    {\n-        LogPrintf(\"GetMyExternalIP() returned %s\\n\", addrLocalHost.ToStringIP().c_str());\n-        AddLocal(addrLocalHost, LOCAL_HTTP);\n-    }\n-}\n-\n-\n-\n-\n \n void AddressCurrentlyConnected(const CService& addr)\n {\n     addrman.Connected(addr);\n }\n \n-\n-\n-\n-\n-\n-\n CNode* FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n@@ -1702,9 +1607,6 @@ void static Discover()\n     }\n #endif\n \n-    // Don't use external IPv4 discovery, when -onlynet=\"IPv6\"\n-    if (!IsLimited(NET_IPV4))\n-        boost::thread(boost::bind(&TraceThread<void (*)()>, \"ext-ip\", &ThreadGetMyExternalIP));\n }\n \n void StartNode(boost::thread_group& threadGroup)\n@@ -1731,7 +1633,7 @@ void StartNode(boost::thread_group& threadGroup)\n \n #ifdef USE_UPNP\n     // Map ports with UPnP\n-    MapPort(GetBoolArg(\"-upnp\", USE_UPNP));\n+    if (!fNoListen && !IsLimited(NET_IPV4)) MapPort(GetBoolArg(\"-upnp\", USE_UPNP));\n #endif\n \n     // Send and receive from sockets, accept connections"
      },
      {
        "sha": "e1bf3f7c08d4c627377c572781fb9db7ae467ba0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -30,14 +30,14 @@ class CNode;\n class CBlockIndex;\n extern int nBestHeight;\n \n-\n+extern int64 nNodeStartTime;\n \n inline unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n \n void AddOneShot(std::string strDest);\n bool RecvLine(SOCKET hSocket, std::string& strLine);\n-bool GetMyExternalIP(CNetAddr& ipRet);\n+void AdvertizeLocalNode(CNode* pnode, bool fForce=false);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n@@ -65,7 +65,6 @@ enum\n     LOCAL_IF,     // address a local interface listens on\n     LOCAL_BIND,   // address explicit bound to\n     LOCAL_UPNP,   // address reported by UPnP\n-    LOCAL_HTTP,   // address reported by whatismyip.com and similar\n     LOCAL_MANUAL, // address explicitly specified (-externalip=)\n \n     LOCAL_MAX\n@@ -189,6 +188,7 @@ class CNode\n     int64 nTimeConnected;\n     CAddress addr;\n     std::string addrName;\n+    CService addrMe;\n     CService addrLocal;\n     int nVersion;\n     std::string strSubVer;"
      },
      {
        "sha": "10a51bb70f4060939ab5b58d385bfd3825a2a534",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -116,7 +116,7 @@ bool ClientModel::isTestNet() const\n \n bool ClientModel::inInitialBlockDownload() const\n {\n-    return IsInitialBlockDownload();\n+    return Checkpoints::IsInitialBlockDownload();\n }\n \n enum BlockSource ClientModel::getBlockSource() const"
      },
      {
        "sha": "9447093c0e538f29d411c926c20d0cf632954696",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a851bf84f6a2ff95bd86b23e55bb0647f5f47188/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a851bf84f6a2ff95bd86b23e55bb0647f5f47188",
        "patch": "@@ -8,6 +8,7 @@\n #include \"init.h\"\n #include \"miner.h\"\n #include \"bitcoinrpc.h\"\n+#include \"checkpoints.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -178,7 +179,7 @@ Value getwork(const Array& params, bool fHelp)\n     if (vNodes.empty())\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n \n-    if (IsInitialBlockDownload())\n+    if (Checkpoints::IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n     typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n@@ -320,7 +321,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     if (vNodes.empty())\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n \n-    if (IsInitialBlockDownload())\n+    if (Checkpoints::IsInitialBlockDownload())\n         throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n \n     // Update block"
      }
    ]
  }
]