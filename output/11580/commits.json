[
  {
    "sha": "3788a8479b4efd481f3e91419bcf347113375112",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzg4YTg0NzliNGVmZDQ4MWYzZTkxNDE5YmNmMzQ3MTEzMzc1MTEy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-30T14:41:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-30T22:59:07Z"
      },
      "message": "Do not send (potentially) invalid headers in response to getheaders\n\nNowhere else in the protocol do we send headers which are for\nblocks we have not fully validated except in response to getheaders\nmessages with a null locator. On my public node I have not seen any\nsuch request (whether for an invalid block or not) in at least two\nyears of debug.log output, indicating that this should have minimal\nimpact.",
      "tree": {
        "sha": "954a19df5645cf2ba58950c20e46e4c16c2b0678",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/954a19df5645cf2ba58950c20e46e4c16c2b0678"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3788a8479b4efd481f3e91419bcf347113375112",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3788a8479b4efd481f3e91419bcf347113375112",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3788a8479b4efd481f3e91419bcf347113375112",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3788a8479b4efd481f3e91419bcf347113375112/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb9ab0fccfbadd5c032a2cd0bb3135049cffa42b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 9,
      "deletions": 13
    },
    "files": [
      {
        "sha": "b26caf377f4fd723f2da84fee1dede44544e527c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3788a8479b4efd481f3e91419bcf347113375112/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3788a8479b4efd481f3e91419bcf347113375112/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3788a8479b4efd481f3e91419bcf347113375112",
        "patch": "@@ -755,11 +755,13 @@ void Misbehaving(NodeId pnode, int howmuch)\n \n // To prevent fingerprinting attacks, only send blocks/headers outside of the\n // active chain if they are no more than a month older (both in time, and in\n-// best equivalent proof of work) than the best header chain we know about.\n-static bool StaleBlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+// best equivalent proof of work) than the best header chain we know about and\n+// we fully-validated them at some point.\n+static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     AssertLockHeld(cs_main);\n-    return (pindexBestHeader != nullptr) &&\n+    if (chainActive.Contains(pindex)) return true;\n+    return pindex->IsValid(BLOCK_VALID_SCRIPTS) && (pindexBestHeader != nullptr) &&\n         (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() < STALE_RELAY_AGE_LIMIT) &&\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n@@ -1038,14 +1040,9 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         CValidationState dummy;\n                         ActivateBestChain(dummy, Params(), a_recent_block);\n                     }\n-                    if (chainActive.Contains(mi->second)) {\n-                        send = true;\n-                    } else {\n-                        send = mi->second->IsValid(BLOCK_VALID_SCRIPTS) &&\n-                            StaleBlockRequestAllowed(mi->second, consensusParams);\n-                        if (!send) {\n-                            LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n-                        }\n+                    send = BlockRequestAllowed(mi->second, consensusParams);\n+                    if (!send) {\n+                        LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                     }\n                 }\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n@@ -1986,8 +1983,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 return true;\n             pindex = (*mi).second;\n \n-            if (!chainActive.Contains(pindex) &&\n-                !StaleBlockRequestAllowed(pindex, chainparams.GetConsensus())) {\n+            if (!BlockRequestAllowed(pindex, chainparams.GetConsensus())) {\n                 LogPrintf(\"%s: ignoring request from peer=%i for old block header that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                 return true;\n             }"
      }
    ]
  },
  {
    "sha": "725b79a9cf9d6af3a9a7a31407f2795fe640f3c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjViNzlhOWNmOWQ2YWYzYTlhN2EzMTQwN2YyNzk1ZmU2NDBmM2M2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-11-01T22:57:26Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-02T17:49:15Z"
      },
      "message": "[test] Verify node doesn't send headers that haven't been fully validated",
      "tree": {
        "sha": "56ddb7582bcc294bf9b1ab1cdcd345ee6d337ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56ddb7582bcc294bf9b1ab1cdcd345ee6d337ef4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/725b79a9cf9d6af3a9a7a31407f2795fe640f3c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725b79a9cf9d6af3a9a7a31407f2795fe640f3c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/725b79a9cf9d6af3a9a7a31407f2795fe640f3c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/725b79a9cf9d6af3a9a7a31407f2795fe640f3c6/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3788a8479b4efd481f3e91419bcf347113375112",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3788a8479b4efd481f3e91419bcf347113375112",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3788a8479b4efd481f3e91419bcf347113375112"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "159dfd30044cb24290739e7b262f0e9c71f46af2",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/725b79a9cf9d6af3a9a7a31407f2795fe640f3c6/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/725b79a9cf9d6af3a9a7a31407f2795fe640f3c6/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=725b79a9cf9d6af3a9a7a31407f2795fe640f3c6",
        "patch": "@@ -10,6 +10,17 @@\n   receive inv's (omitted from testing description below, this is our control).\n   Second node is used for creating reorgs.\n \n+test_null_locators\n+==================\n+\n+Sends two getheaders requests with null locator values. First request's hashstop\n+value refers to validated block, while second request's hashstop value refers to\n+a block which hasn't been validated. Verifies only the first request returns\n+headers.\n+\n+test_nonnull_locators\n+=====================\n+\n Part 1: No headers announcements before \"sendheaders\"\n a. node mines a block [expect: inv]\n    send getdata for the block [expect: block]\n@@ -229,6 +240,29 @@ def run_test(self):\n         inv_node.sync_with_ping()\n         test_node.sync_with_ping()\n \n+        self.test_null_locators(test_node)\n+        self.test_nonnull_locators(test_node, inv_node)\n+\n+    def test_null_locators(self, test_node):\n+        tip = self.nodes[0].getblockheader(self.nodes[0].generate(1)[0])\n+        tip_hash = int(tip[\"hash\"], 16)\n+\n+        self.log.info(\"Verify getheaders with null locator and valid hashstop returns headers.\")\n+        test_node.clear_last_announcement()\n+        test_node.get_headers(locator=[], hashstop=tip_hash)\n+        assert_equal(test_node.check_last_announcement(headers=[tip_hash]), True)\n+\n+        self.log.info(\"Verify getheaders with null locator and invalid hashstop does not return headers.\")\n+        block = create_block(int(tip[\"hash\"], 16), create_coinbase(tip[\"height\"] + 1), tip[\"mediantime\"] + 1)\n+        block.solve()\n+        test_node.send_header_for_blocks([block])\n+        test_node.clear_last_announcement()\n+        test_node.get_headers(locator=[], hashstop=int(block.hash, 16))\n+        test_node.sync_with_ping()\n+        assert_equal(test_node.block_announced, False)\n+        test_node.send_message(msg_block(block))\n+\n+    def test_nonnull_locators(self, test_node, inv_node):\n         tip = int(self.nodes[0].getbestblockhash(), 16)\n \n         # PART 1"
      }
    ]
  }
]