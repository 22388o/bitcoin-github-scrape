[
  {
    "sha": "f2d3ba73860e875972738d1da1507124d0971ae5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmQzYmE3Mzg2MGU4NzU5NzI3MzhkMWRhMTUwNzEyNGQwOTcxYWU1",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-04-04T02:36:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T08:26:37Z"
      },
      "message": "Eliminate TX trickle bypass, sort TX invs for privacy and priority.\n\nPreviously Bitcoin would send 1/4 of transactions out to all peers\n instantly.  This causes high overhead because it makes >80% of\n INVs size 1.  Doing so harms privacy, because it limits the\n amount of source obscurity a transaction can receive.\n\nThese randomized broadcasts also disobeyed transaction dependencies\n and required use of the orphan pool.  Because the orphan pool is\n so small this leads to poor propagation for dependent transactions.\n\nWhen the bypass wasn't in effect, transactions were sent in the\n order they were received.  This avoided creating orphans but\n undermines privacy fairly significantly.\n\nThis commit:\n Eliminates the bypass. The bypass is replaced by halving the\n  average delay for outbound peers.\n\n Sorts candidate transactions for INV by their topological\n  depth then by their feerate (then hash); removing the\n  information leakage and providing priority service to\n  higher fee transactions.\n\n Limits the amount of transactions sent in a single INV to\n  7tx/sec (and twice that for outbound); this limits the\n  harm of low fee transaction floods, gives faster relay\n  service to higher fee transactions. The 7 sounds lower\n  than it really is because received advertisements need\n  not be sent, and because the aggregate rate is multipled\n  by the number of peers.",
      "tree": {
        "sha": "88c35395409424a45ec72d663fa97bf519a9892c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88c35395409424a45ec72d663fa97bf519a9892c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2d3ba73860e875972738d1da1507124d0971ae5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d3ba73860e875972738d1da1507124d0971ae5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d3ba73860e875972738d1da1507124d0971ae5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d3ba73860e875972738d1da1507124d0971ae5/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04a29373571d44be36bd099c3b3ec3cda89e99d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04a29373571d44be36bd099c3b3ec3cda89e99d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04a29373571d44be36bd099c3b3ec3cda89e99d1"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 58,
      "deletions": 27
    },
    "files": [
      {
        "sha": "4a28bbb00c4226d6d454947d76ac9664a0e1a458",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d3ba73860e875972738d1da1507124d0971ae5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d3ba73860e875972738d1da1507124d0971ae5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f2d3ba73860e875972738d1da1507124d0971ae5",
        "patch": "@@ -5560,6 +5560,29 @@ bool ProcessMessages(CNode* pfrom)\n     return fOk;\n }\n \n+class CompareInvMempoolOrder\n+{\n+    CTxMemPool *mp;\n+public:\n+    CompareInvMempoolOrder(CTxMemPool *mempool)\n+    {\n+        mp = mempool;\n+    }\n+\n+    bool operator()(const CInv &a, const CInv &b)\n+    {\n+        if (a.type != MSG_TX && b.type != MSG_TX) {\n+            return false;\n+        } else {\n+            if (a.type != MSG_TX) {\n+                return true;\n+            } else if (b.type != MSG_TX) {\n+                return false;\n+            }\n+            return mp->CompareDepthAndScore(a.hash, b.hash);\n+        }\n+    }\n+};\n \n bool SendMessages(CNode* pto)\n {\n@@ -5790,42 +5813,31 @@ bool SendMessages(CNode* pto)\n             bool fSendTrickle = pto->fWhitelisted;\n             if (pto->nNextInvSend < nNow) {\n                 fSendTrickle = true;\n-                pto->nNextInvSend = PoissonNextSend(nNow, AVG_INVENTORY_BROADCAST_INTERVAL);\n+                // Use half the delay for outbound peers, as their is less privacy concern for them.\n+                pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> !pto->fInbound);\n             }\n             LOCK(pto->cs_inventory);\n-            vInv.reserve(std::min<size_t>(1000, pto->vInventoryToSend.size()));\n+            if (fSendTrickle && pto->vInventoryToSend.size() > 1) {\n+                // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n+                CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n+                std::stable_sort(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end(), compareInvMempoolOrder);\n+            }\n+            vInv.reserve(std::min<size_t>(INVENTORY_BROADCAST_MAX, pto->vInventoryToSend.size()));\n             vInvWait.reserve(pto->vInventoryToSend.size());\n             BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n             {\n                 if (inv.type == MSG_TX && pto->filterInventoryKnown.contains(inv.hash))\n                     continue;\n-\n-                // trickle out tx inv to protect privacy\n-                if (inv.type == MSG_TX && !fSendTrickle)\n-                {\n-                    // 1/4 of tx invs blast to all immediately\n-                    static uint256 hashSalt;\n-                    if (hashSalt.IsNull())\n-                        hashSalt = GetRandHash();\n-                    uint256 hashRand = ArithToUint256(UintToArith256(inv.hash) ^ UintToArith256(hashSalt));\n-                    hashRand = Hash(BEGIN(hashRand), END(hashRand));\n-                    bool fTrickleWait = ((UintToArith256(hashRand) & 3) != 0);\n-\n-                    if (fTrickleWait)\n-                    {\n-                        vInvWait.push_back(inv);\n-                        continue;\n-                    }\n+                // No reason to drain out at many times the network's capacity,\n+                // especially since we have many peers and some will draw much shorter delays.\n+                if (vInv.size() >= INVENTORY_BROADCAST_MAX || (inv.type == MSG_TX && !fSendTrickle)) {\n+                    vInvWait.push_back(inv);\n+                    continue;\n                 }\n \n                 pto->filterInventoryKnown.insert(inv.hash);\n \n                 vInv.push_back(inv);\n-                if (vInv.size() >= 1000)\n-                {\n-                    pto->PushMessage(NetMsgType::INV, vInv);\n-                    vInv.clear();\n-                }\n             }\n             pto->vInventoryToSend = vInvWait;\n         }"
      },
      {
        "sha": "4372c16a421c80d27a537bf1017b14ba89102488",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d3ba73860e875972738d1da1507124d0971ae5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d3ba73860e875972738d1da1507124d0971ae5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f2d3ba73860e875972738d1da1507124d0971ae5",
        "patch": "@@ -99,9 +99,12 @@ static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 24 * 60;\n /** Average delay between peer address broadcasts in seconds. */\n static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n-/** Average delay between trickled inventory broadcasts in seconds.\n- *  Blocks, whitelisted receivers, and a random 25% of transactions bypass this. */\n-static const unsigned int AVG_INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Average delay between trickled inventory transmissions in seconds.\n+ *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Maximum number of inventory items to send per transmission.\n+ *  Limits the impact of low-fee transaction floods. */\n+static const unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n /** Average delay between feefilter broadcasts in seconds. */\n static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */"
      },
      {
        "sha": "3aba578fac99ef2b8c788d0db21cfc00e6ee4a77",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d3ba73860e875972738d1da1507124d0971ae5/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d3ba73860e875972738d1da1507124d0971ae5/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f2d3ba73860e875972738d1da1507124d0971ae5",
        "patch": "@@ -752,6 +752,21 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     assert(innerUsage == cachedInnerUsage);\n }\n \n+bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb)\n+{\n+    LOCK(cs);\n+    indexed_transaction_set::const_iterator i = mapTx.find(hasha);\n+    if (i == mapTx.end()) return false;\n+    indexed_transaction_set::const_iterator j = mapTx.find(hashb);\n+    if (j == mapTx.end()) return true;\n+    uint64_t counta = i->GetCountWithAncestors();\n+    uint64_t countb = j->GetCountWithAncestors();\n+    if (counta == countb) {\n+        return CompareTxMemPoolEntryByScore()(*i, *j);\n+    }\n+    return counta < countb;\n+}\n+\n void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n {\n     vtxid.clear();"
      },
      {
        "sha": "e4934336c2cdccfdf352370aa2776dec338efdef",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d3ba73860e875972738d1da1507124d0971ae5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d3ba73860e875972738d1da1507124d0971ae5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f2d3ba73860e875972738d1da1507124d0971ae5",
        "patch": "@@ -511,6 +511,7 @@ class CTxMemPool\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n+    bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);\n     void queryHashes(std::vector<uint256>& vtxid);\n     void pruneSpent(const uint256& hash, CCoins &coins);\n     unsigned int GetTransactionsUpdated() const;"
      }
    ]
  },
  {
    "sha": "dc13dcd2bec2613a1cd5e0395b09b449d176146f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzEzZGNkMmJlYzI2MTNhMWNkNWUwMzk1YjA5YjQ0OWQxNzYxNDZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-07T11:57:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T22:33:51Z"
      },
      "message": "Split up and optimize transaction and block inv queues",
      "tree": {
        "sha": "12b9b2127a823207a201357a5caae98ae167a8d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12b9b2127a823207a201357a5caae98ae167a8d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc13dcd2bec2613a1cd5e0395b09b449d176146f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc13dcd2bec2613a1cd5e0395b09b449d176146f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc13dcd2bec2613a1cd5e0395b09b449d176146f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc13dcd2bec2613a1cd5e0395b09b449d176146f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d3ba73860e875972738d1da1507124d0971ae5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d3ba73860e875972738d1da1507124d0971ae5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d3ba73860e875972738d1da1507124d0971ae5"
      }
    ],
    "stats": {
      "total": 96,
      "additions": 59,
      "deletions": 37
    },
    "files": [
      {
        "sha": "61d9301f8f0d2c1a6b12e3e0ed459a4812cba5cd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 31,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc13dcd2bec2613a1cd5e0395b09b449d176146f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc13dcd2bec2613a1cd5e0395b09b449d176146f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dc13dcd2bec2613a1cd5e0395b09b449d176146f",
        "patch": "@@ -5569,18 +5569,11 @@ class CompareInvMempoolOrder\n         mp = mempool;\n     }\n \n-    bool operator()(const CInv &a, const CInv &b)\n+    bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)\n     {\n-        if (a.type != MSG_TX && b.type != MSG_TX) {\n-            return false;\n-        } else {\n-            if (a.type != MSG_TX) {\n-                return true;\n-            } else if (b.type != MSG_TX) {\n-                return false;\n-            }\n-            return mp->CompareDepthAndScore(a.hash, b.hash);\n-        }\n+        /* As std::make_heap produces a max-heap, we want the entries with the\n+         * fewest ancestors/highest fee to sort later. */\n+        return mp->CompareDepthAndScore(*b, *a);\n     }\n };\n \n@@ -5808,38 +5801,59 @@ bool SendMessages(CNode* pto)\n         // Message: inventory\n         //\n         vector<CInv> vInv;\n-        vector<CInv> vInvWait;\n         {\n+            LOCK(pto->cs_inventory);\n+            vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n+\n+            // Add blocks\n+            BOOST_FOREACH(const uint256& hash, pto->vInventoryBlockToSend) {\n+                vInv.push_back(CInv(MSG_BLOCK, hash));\n+                if (vInv.size() == MAX_INV_SZ) {\n+                    pto->PushMessage(NetMsgType::INV, vInv);\n+                    vInv.clear();\n+                }\n+            }\n+            pto->vInventoryBlockToSend.clear();\n+\n+            // Determine transactions to relay\n             bool fSendTrickle = pto->fWhitelisted;\n             if (pto->nNextInvSend < nNow) {\n                 fSendTrickle = true;\n-                // Use half the delay for outbound peers, as their is less privacy concern for them.\n+                // Use half the delay for outbound peers, as there is less privacy concern for them.\n                 pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> !pto->fInbound);\n             }\n-            LOCK(pto->cs_inventory);\n-            if (fSendTrickle && pto->vInventoryToSend.size() > 1) {\n+            if (fSendTrickle) {\n+                // Produce a vector with all candidates for sending\n+                vector<std::set<uint256>::iterator> vInvTx;\n+                vInvTx.reserve(pto->setInventoryTxToSend.size());\n+                for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n+                    vInvTx.push_back(it);\n+                }\n                 // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n+                // A heap is used so that not all items need sorting if only a few are being sent.\n                 CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n-                std::stable_sort(pto->vInventoryToSend.begin(), pto->vInventoryToSend.end(), compareInvMempoolOrder);\n-            }\n-            vInv.reserve(std::min<size_t>(INVENTORY_BROADCAST_MAX, pto->vInventoryToSend.size()));\n-            vInvWait.reserve(pto->vInventoryToSend.size());\n-            BOOST_FOREACH(const CInv& inv, pto->vInventoryToSend)\n-            {\n-                if (inv.type == MSG_TX && pto->filterInventoryKnown.contains(inv.hash))\n-                    continue;\n+                std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n                 // No reason to drain out at many times the network's capacity,\n                 // especially since we have many peers and some will draw much shorter delays.\n-                if (vInv.size() >= INVENTORY_BROADCAST_MAX || (inv.type == MSG_TX && !fSendTrickle)) {\n-                    vInvWait.push_back(inv);\n-                    continue;\n+                unsigned int nRelayedTransactions = 0;\n+                while (!vInvTx.empty() && nRelayedTransactions < INVENTORY_BROADCAST_MAX) {\n+                    // Fetch the top element from the heap\n+                    std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n+                    std::set<uint256>::iterator it = vInvTx.back();\n+                    vInvTx.pop_back();\n+                    uint256 hash = *it;\n+                    // Remove it from the to-be-sent set\n+                    pto->setInventoryTxToSend.erase(it);\n+                    // Check if not in the filter already\n+                    if (pto->filterInventoryKnown.contains(hash)) {\n+                        continue;\n+                    }\n+                    // Send\n+                    vInv.push_back(CInv(MSG_TX, hash));\n+                    nRelayedTransactions++;\n+                    pto->filterInventoryKnown.insert(hash);\n                 }\n-\n-                pto->filterInventoryKnown.insert(inv.hash);\n-\n-                vInv.push_back(inv);\n             }\n-            pto->vInventoryToSend = vInvWait;\n         }\n         if (!vInv.empty())\n             pto->PushMessage(NetMsgType::INV, vInv);"
      },
      {
        "sha": "a95fa79e7e03b439c772b10c5f17067ef0776d03",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc13dcd2bec2613a1cd5e0395b09b449d176146f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc13dcd2bec2613a1cd5e0395b09b449d176146f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=dc13dcd2bec2613a1cd5e0395b09b449d176146f",
        "patch": "@@ -397,7 +397,13 @@ class CNode\n \n     // inventory based relay\n     CRollingBloomFilter filterInventoryKnown;\n-    std::vector<CInv> vInventoryToSend;\n+    // Set of transaction ids we still have to announce.\n+    // They are sorted by the mempool before relay, so the order is not important.\n+    std::set<uint256> setInventoryTxToSend;\n+    // List of block ids we still have announce.\n+    // There is no final sorting before sending, as they are always sent immediately\n+    // and in the order requested.\n+    std::vector<uint256> vInventoryBlockToSend;\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n@@ -517,11 +523,13 @@ class CNode\n \n     void PushInventory(const CInv& inv)\n     {\n-        {\n-            LOCK(cs_inventory);\n-            if (inv.type == MSG_TX && filterInventoryKnown.contains(inv.hash))\n-                return;\n-            vInventoryToSend.push_back(inv);\n+        LOCK(cs_inventory);\n+        if (inv.type == MSG_TX) {\n+            if (!filterInventoryKnown.contains(inv.hash)) {\n+                setInventoryTxToSend.insert(inv.hash);\n+            }\n+        } else if (inv.type == MSG_BLOCK) {\n+            vInventoryBlockToSend.push_back(inv.hash);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "ed7068302c7490e8061cb3a558a0f83a465beeea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDcwNjgzMDJjNzQ5MGU4MDYxY2IzYTU1OGEwZjgzYTQ2NWJlZWVh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-08T14:26:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T22:33:56Z"
      },
      "message": "Handle mempool requests in send loop, subject to trickle\n\nBy eliminating queued entries from the mempool response and responding only at\ntrickle time, this makes the mempool no longer leak transaction arrival order\ninformation (as the mempool itself is also sorted)-- at least no more than\nrelay itself leaks it.",
      "tree": {
        "sha": "99d5a18d6912a7cdefd9874f65508f0a0c95f497",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99d5a18d6912a7cdefd9874f65508f0a0c95f497"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed7068302c7490e8061cb3a558a0f83a465beeea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7068302c7490e8061cb3a558a0f83a465beeea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed7068302c7490e8061cb3a558a0f83a465beeea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7068302c7490e8061cb3a558a0f83a465beeea/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc13dcd2bec2613a1cd5e0395b09b449d176146f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc13dcd2bec2613a1cd5e0395b09b449d176146f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc13dcd2bec2613a1cd5e0395b09b449d176146f"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 49,
      "deletions": 28
    },
    "files": [
      {
        "sha": "282c8cdb664496ddb6dd173532970a2c0ac95e6c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 28,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7068302c7490e8061cb3a558a0f83a465beeea/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7068302c7490e8061cb3a558a0f83a465beeea/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ed7068302c7490e8061cb3a558a0f83a465beeea",
        "patch": "@@ -5235,34 +5235,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->fDisconnect = true;\n             return true;\n         }\n-        LOCK2(cs_main, pfrom->cs_filter);\n \n-        std::vector<uint256> vtxid;\n-        mempool.queryHashes(vtxid);\n-        vector<CInv> vInv;\n-        BOOST_FOREACH(uint256& hash, vtxid) {\n-            CInv inv(MSG_TX, hash);\n-            if (pfrom->pfilter) {\n-                CTransaction tx;\n-                bool fInMemPool = mempool.lookup(hash, tx);\n-                if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n-                if (!pfrom->pfilter->IsRelevantAndUpdate(tx)) continue;\n-            }\n-            if (pfrom->minFeeFilter) {\n-                CFeeRate feeRate;\n-                mempool.lookupFeeRate(hash, feeRate);\n-                LOCK(pfrom->cs_feeFilter);\n-                if (feeRate.GetFeePerK() < pfrom->minFeeFilter)\n-                    continue;\n-            }\n-            vInv.push_back(inv);\n-            if (vInv.size() == MAX_INV_SZ) {\n-                pfrom->PushMessage(NetMsgType::INV, vInv);\n-                vInv.clear();\n-            }\n-        }\n-        if (vInv.size() > 0)\n-            pfrom->PushMessage(NetMsgType::INV, vInv);\n+        LOCK(pfrom->cs_inventory);\n+        pfrom->fSendMempool = true;\n     }\n \n \n@@ -5815,13 +5790,52 @@ bool SendMessages(CNode* pto)\n             }\n             pto->vInventoryBlockToSend.clear();\n \n-            // Determine transactions to relay\n+            // Check whether periodic sends should happen\n             bool fSendTrickle = pto->fWhitelisted;\n             if (pto->nNextInvSend < nNow) {\n                 fSendTrickle = true;\n                 // Use half the delay for outbound peers, as there is less privacy concern for them.\n                 pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> !pto->fInbound);\n             }\n+\n+            // Respond to BIP35 mempool requests\n+            if (fSendTrickle && pto->fSendMempool) {\n+                std::vector<uint256> vtxid;\n+                mempool.queryHashes(vtxid);\n+                pto->fSendMempool = false;\n+                CAmount filterrate = 0;\n+                {\n+                    LOCK(pto->cs_feeFilter);\n+                    filterrate = pto->minFeeFilter;\n+                }\n+\n+                LOCK(pto->cs_filter);\n+\n+                BOOST_FOREACH(const uint256& hash, vtxid) {\n+                    CInv inv(MSG_TX, hash);\n+                    pto->setInventoryTxToSend.erase(hash);\n+                    if (filterrate) {\n+                        CFeeRate feeRate;\n+                        mempool.lookupFeeRate(hash, feeRate);\n+                        if (feeRate.GetFeePerK() < filterrate)\n+                            continue;\n+                    }\n+                    if (pto->pfilter) {\n+                        CTransaction tx;\n+                        bool fInMemPool = mempool.lookup(hash, tx);\n+                        if (!fInMemPool) continue; // another thread removed since queryHashes, maybe...\n+                        if (!pto->pfilter->IsRelevantAndUpdate(tx)) continue;\n+                    }\n+                    pto->filterInventoryKnown.insert(hash);\n+                    vInv.push_back(inv);\n+                    if (vInv.size() == MAX_INV_SZ) {\n+                        pto->PushMessage(NetMsgType::INV, vInv);\n+                        vInv.clear();\n+                    }\n+                }\n+            }\n+\n+            // Determine transactions to relay\n             if (fSendTrickle) {\n                 // Produce a vector with all candidates for sending\n                 vector<std::set<uint256>::iterator> vInvTx;\n@@ -5851,6 +5865,10 @@ bool SendMessages(CNode* pto)\n                     // Send\n                     vInv.push_back(CInv(MSG_TX, hash));\n                     nRelayedTransactions++;\n+                    if (vInv.size() == MAX_INV_SZ) {\n+                        pto->PushMessage(NetMsgType::INV, vInv);\n+                        vInv.clear();\n+                    }\n                     pto->filterInventoryKnown.insert(hash);\n                 }\n             }"
      },
      {
        "sha": "6b305ebae48a8425111913fedc34ea096ebbb764",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7068302c7490e8061cb3a558a0f83a465beeea/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7068302c7490e8061cb3a558a0f83a465beeea/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ed7068302c7490e8061cb3a558a0f83a465beeea",
        "patch": "@@ -2370,6 +2370,7 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     hashContinue = uint256();\n     nStartingHeight = -1;\n     filterInventoryKnown.reset();\n+    fSendMempool = false;\n     fGetAddr = false;\n     nNextLocalAddrSend = 0;\n     nNextAddrSend = 0;"
      },
      {
        "sha": "26acf59e605cf4c4eab9ee7435d47cd6eaf13316",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed7068302c7490e8061cb3a558a0f83a465beeea/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed7068302c7490e8061cb3a558a0f83a465beeea/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ed7068302c7490e8061cb3a558a0f83a465beeea",
        "patch": "@@ -411,6 +411,8 @@ class CNode\n     // Used for headers announcements - unfiltered blocks to relay\n     // Also protected by cs_inventory\n     std::vector<uint256> vBlockHashesToAnnounce;\n+    // Used for BIP35 mempool sending, also protected by cs_inventory\n+    bool fSendMempool;\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected."
      }
    ]
  },
  {
    "sha": "4578215e7f787968c1d6478e6df75499bd36dd8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTc4MjE1ZTdmNzg3OTY4YzFkNjQ3OGU2ZGY3NTQ5OWJkMzZkZDhk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T13:33:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T22:33:56Z"
      },
      "message": "Return mempool queries in dependency order",
      "tree": {
        "sha": "402c14568a452dda1b7dc3a2c88cc47326ba88f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/402c14568a452dda1b7dc3a2c88cc47326ba88f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4578215e7f787968c1d6478e6df75499bd36dd8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4578215e7f787968c1d6478e6df75499bd36dd8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4578215e7f787968c1d6478e6df75499bd36dd8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4578215e7f787968c1d6478e6df75499bd36dd8d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed7068302c7490e8061cb3a558a0f83a465beeea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed7068302c7490e8061cb3a558a0f83a465beeea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed7068302c7490e8061cb3a558a0f83a465beeea"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0d9fcc982d306aca90d51767bf58e49ca4d08a85",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4578215e7f787968c1d6478e6df75499bd36dd8d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4578215e7f787968c1d6478e6df75499bd36dd8d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4578215e7f787968c1d6478e6df75499bd36dd8d",
        "patch": "@@ -767,6 +767,16 @@ bool CTxMemPool::CompareDepthAndScore(const uint256& hasha, const uint256& hashb\n     return counta < countb;\n }\n \n+namespace {\n+class DepthAndScoreComparator\n+{\n+    CTxMemPool *mp;\n+public:\n+    DepthAndScoreComparator(CTxMemPool *mempool) : mp(mempool) {}\n+    bool operator()(const uint256& a, const uint256& b) { return mp->CompareDepthAndScore(a, b); }\n+};\n+}\n+\n void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n {\n     vtxid.clear();\n@@ -775,6 +785,8 @@ void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n     vtxid.reserve(mapTx.size());\n     for (indexed_transaction_set::iterator mi = mapTx.begin(); mi != mapTx.end(); ++mi)\n         vtxid.push_back(mi->GetTx().GetHash());\n+\n+    std::sort(vtxid.begin(), vtxid.end(), DepthAndScoreComparator(this));\n }\n \n bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const"
      }
    ]
  },
  {
    "sha": "b5599147533103efea896a1fc4ff51f2d3ad5808",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTU5OTE0NzUzMzEwM2VmZWE4OTZhMWZjNGZmNTFmMmQzYWQ1ODA4",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-04-20T07:05:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-20T22:33:56Z"
      },
      "message": "Move bloom and feerate filtering to just prior to tx sending.\n\nThis will avoid sending more pointless INVs around updates, and\n prevents using filter updates to timetag transactions.\n\nAlso adds locking for fRelayTxes.",
      "tree": {
        "sha": "96273816a881746f3d0390d7e50e6466eb6f28c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96273816a881746f3d0390d7e50e6466eb6f28c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5599147533103efea896a1fc4ff51f2d3ad5808",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5599147533103efea896a1fc4ff51f2d3ad5808",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5599147533103efea896a1fc4ff51f2d3ad5808",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5599147533103efea896a1fc4ff51f2d3ad5808/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4578215e7f787968c1d6478e6df75499bd36dd8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4578215e7f787968c1d6478e6df75499bd36dd8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4578215e7f787968c1d6478e6df75499bd36dd8d"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 38,
      "deletions": 21
    },
    "files": [
      {
        "sha": "b707de2e585da513addb22767f58b82d0c8d024a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 6,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5599147533103efea896a1fc4ff51f2d3ad5808/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5599147533103efea896a1fc4ff51f2d3ad5808/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b5599147533103efea896a1fc4ff51f2d3ad5808",
        "patch": "@@ -4557,12 +4557,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             vRecv >> LIMITED_STRING(pfrom->strSubVer, MAX_SUBVERSION_LENGTH);\n             pfrom->cleanSubVer = SanitizeString(pfrom->strSubVer);\n         }\n-        if (!vRecv.empty())\n+        if (!vRecv.empty()) {\n             vRecv >> pfrom->nStartingHeight;\n-        if (!vRecv.empty())\n-            vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n-        else\n-            pfrom->fRelayTxes = true;\n+        }\n+        {\n+            LOCK(pfrom->cs_filter);\n+            if (!vRecv.empty())\n+                vRecv >> pfrom->fRelayTxes; // set to true after we get the first filter* message\n+            else\n+                pfrom->fRelayTxes = true;\n+        }\n \n         // Disconnect if we connected to ourself\n         if (nNonce == nLocalHostNonce && nNonce > 1)\n@@ -5325,12 +5329,13 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         CBloomFilter filter;\n         vRecv >> filter;\n \n+        LOCK(pfrom->cs_filter);\n+\n         if (!filter.IsWithinSizeConstraints())\n             // There is no excuse for sending a too-large filter\n             Misbehaving(pfrom->GetId(), 100);\n         else\n         {\n-            LOCK(pfrom->cs_filter);\n             delete pfrom->pfilter;\n             pfrom->pfilter = new CBloomFilter(filter);\n             pfrom->pfilter->UpdateEmptyFull();\n@@ -5798,6 +5803,12 @@ bool SendMessages(CNode* pto)\n                 pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> !pto->fInbound);\n             }\n \n+            // Time to send but the peer has requested we not relay transactions.\n+            if (fSendTrickle) {\n+                LOCK(pto->cs_filter);\n+                if (!pto->fRelayTxes) pto->setInventoryTxToSend.clear();\n+            }\n+\n             // Respond to BIP35 mempool requests\n             if (fSendTrickle && pto->fSendMempool) {\n                 std::vector<uint256> vtxid;\n@@ -5843,13 +5854,19 @@ bool SendMessages(CNode* pto)\n                 for (std::set<uint256>::iterator it = pto->setInventoryTxToSend.begin(); it != pto->setInventoryTxToSend.end(); it++) {\n                     vInvTx.push_back(it);\n                 }\n+                CAmount filterrate = 0;\n+                {\n+                    LOCK(pto->cs_feeFilter);\n+                    filterrate = pto->minFeeFilter;\n+                }\n                 // Topologically and fee-rate sort the inventory we send for privacy and priority reasons.\n                 // A heap is used so that not all items need sorting if only a few are being sent.\n                 CompareInvMempoolOrder compareInvMempoolOrder(&mempool);\n                 std::make_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n                 // No reason to drain out at many times the network's capacity,\n                 // especially since we have many peers and some will draw much shorter delays.\n                 unsigned int nRelayedTransactions = 0;\n+                LOCK(pto->cs_filter);\n                 while (!vInvTx.empty() && nRelayedTransactions < INVENTORY_BROADCAST_MAX) {\n                     // Fetch the top element from the heap\n                     std::pop_heap(vInvTx.begin(), vInvTx.end(), compareInvMempoolOrder);\n@@ -5862,6 +5879,19 @@ bool SendMessages(CNode* pto)\n                     if (pto->filterInventoryKnown.contains(hash)) {\n                         continue;\n                     }\n+                    // Not in the mempool anymore? don't bother sending it.\n+                    CFeeRate feeRate;\n+                    if (!mempool.lookupFeeRate(hash, feeRate)) {\n+                        continue;\n+                    }\n+                    if (filterrate && feeRate.GetFeePerK() < filterrate) {\n+                        continue;\n+                    }\n+                    if (pto->pfilter) {\n+                        CTransaction tx;\n+                        if (!mempool.lookup(hash, tx)) continue;\n+                        if (!pto->pfilter->IsRelevantAndUpdate(tx)) continue;\n+                    }\n                     // Send\n                     vInv.push_back(CInv(MSG_TX, hash));\n                     nRelayedTransactions++;"
      },
      {
        "sha": "ccc430f5c2804be0e277d80926329a4cc08cc40d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5599147533103efea896a1fc4ff51f2d3ad5808/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5599147533103efea896a1fc4ff51f2d3ad5808/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b5599147533103efea896a1fc4ff51f2d3ad5808",
        "patch": "@@ -2071,20 +2071,7 @@ void RelayTransaction(const CTransaction& tx, CFeeRate feerate)\n     LOCK(cs_vNodes);\n     BOOST_FOREACH(CNode* pnode, vNodes)\n     {\n-        if(!pnode->fRelayTxes)\n-            continue;\n-        {\n-            LOCK(pnode->cs_feeFilter);\n-            if (feerate.GetFeePerK() < pnode->minFeeFilter)\n-                continue;\n-        }\n-        LOCK(pnode->cs_filter);\n-        if (pnode->pfilter)\n-        {\n-            if (pnode->pfilter->IsRelevantAndUpdate(tx))\n-                pnode->PushInventory(inv);\n-        } else\n-            pnode->PushInventory(inv);\n+        pnode->PushInventory(inv);\n     }\n }\n "
      },
      {
        "sha": "b6ec7bf3e2c281d5b989a2f7b2dadce4de5561b6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5599147533103efea896a1fc4ff51f2d3ad5808/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5599147533103efea896a1fc4ff51f2d3ad5808/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b5599147533103efea896a1fc4ff51f2d3ad5808",
        "patch": "@@ -357,7 +357,7 @@ class CNode\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    bool fRelayTxes;\n+    bool fRelayTxes; //protected by cs_filter\n     bool fSentAddr;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;"
      }
    ]
  }
]