gmaxwell,2016-04-08T18:06:38Z,"This is a very good idea-- much better than my earlier ones around avoiding mempool requests breaking privacy.\n\nYour commit message should explain that by eliminating queued entries from the mempool response and responding only at trickle time, this makes the mempool no longer leak transaction arrival order information (as the mempool itself is also sorted)-- at least no more than relay itself l",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-207540552,207540552,
gmaxwell,2016-04-09T00:32:30Z,"I have a test-harness now thats sutiable for testing this, a little 13 node network. Seems to work, it caught that the conversion to use the STL heap broke the behavior: the stl heap is a max heap.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-207662361,207662361,
gmaxwell,2016-04-09T03:15:34Z,"@Thanks for fixing, looking good so far.\n\nWe still get a _tiny_ number of orphans in a network the consists of nothing but this code. Here is one reason why node A sends you Tx1. You getdata Tx1  Node B sends you Tx1 and Tx2 and Tx1 is a child of Tx1.  You getdata Tx2 from  node2.  Node2 responds faster. Tx2 is now an orphan.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-207691938,207691938,
sipa,2016-04-10T13:41:07Z,"I added a commit to sort the response of mempool requests in dependency order, and renamed the PR to something more general.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-207987070,207987070,
dcousens,2016-04-11T06:48:55Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-208186907,208186907,
sdaftuar,2016-04-11T19:34:24Z,"Concept ACK, will test.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-208519133,208519133,
sipa,2016-04-12T14:40:26Z,"Added two commits to address the comments.\n\nMempool requests are now not filtered by vInventoryTxToSend, but instead every mempool inv sent as a response is removed from vInventoryTxToSend.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-208939536,208939536,
gmaxwell,2016-04-12T21:30:24Z,In a test topology over 48 hours this reduced the addition of orphan transactions from 436/hr to 2.3/hr.\n,https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-209110680,209110680,
gmaxwell,2016-04-12T21:40:32Z,"Also, utack latest improvements.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-209114666,209114666,
dcousens,2016-04-13T02:32:31Z,"concept ACK, utACK 98305df\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-209199421,209199421,
gmaxwell,2016-04-19T07:05:33Z,@sipa: any squashing interest?\n,https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-211763254,211763254,
sipa,2016-04-19T17:54:11Z,Rebased and squashed.\n,https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-212040399,212040399,
sipa,2016-04-19T18:07:55Z,"Also renamed the vInventoryTxToSend to setInventoryTxToSend, and restructured the tx send loop a bit to be less deeply nested.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-212049033,212049033,
gmaxwell,2016-04-20T04:58:34Z,"Travis CI timeout, doesn't look like a real failure.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-212257204,212257204,
sipa,2016-04-20T19:26:28Z,"Added one more commit by @gmaxwell to move all inv filtering to the send stage (which avoids announcing things that are no longer in our mempool and bloom filter updates for those).\n\nI'm sorry for the increasingly expansing scope this PR has had, so I'm not going to touch functionality any further unless bugs in it are found.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-212568919,212568919,
dcousens,2016-04-21T04:08:42Z,@sipa could you update your original PR description with the full scope of this PR now? (for others)\n,https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-212730679,212730679,
gmaxwell,2016-04-21T19:04:59Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-213071501,213071501,
jonasnick,2016-04-22T08:08:58Z,Ack\n,https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-213315597,213315597,
sdaftuar,2016-04-22T20:24:49Z,"ACK, apart from my question about whether we should combine the two comparators that are being introduced.\n\nCouple notes:\n- `RelayTransaction` no longer requires a feerate, and `AcceptToMemoryPool` no longer needs to fill a feerate in.  We can clean this up in a future PR.\n- I noticed while testing that `CTxMemPool::queryHashes` is what we use in the RPC call `getrawmempool`.  It's hard for me",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-213576906,213576906,
gmaxwell,2016-04-26T06:00:09Z,"I've had this running in its various forms for two weeks on a couple of public nodes, as well as a seperate test topology that consisted of nothing but nodes running this code. What do we need to move this forward?  I'm concerned that if I move to testing other PRs this will be forgotten.\n",https://github.com/bitcoin/bitcoin/pull/7840#issuecomment-214624056,214624056,
gmaxwell,2016-04-08T18:01:59Z,"Perhaps the fee filter access should be hoisted out of this inner loop on transactions, and a local copy of the filter-limit made.\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r59065397,59065397,src/main.cpp
gmaxwell,2016-04-08T19:06:55Z,"""&& vInv.size() < INVENTORY_BROADCAST_MAX"" perhaps? otherwise when a mempool request has prefilled the INV it will waste time heapifying for no reason.\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r59074603,59074603,src/main.cpp
sipa,2016-04-10T13:38:11Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/7840#discussion_r59134050,59134050,src/main.cpp
sipa,2016-04-10T13:39:39Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/7840#discussion_r59134082,59134082,src/main.cpp
sdaftuar,2016-04-11T19:07:12Z,"INVENTORY_BROADCAST_MAX is supposed to apply to rate-limited transaction relay, while vInv at this point can be holding blocks, and/or any leftovers from the mempool command.  This seems like it's not the right comparison.\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r59262462,59262462,src/main.cpp
sdaftuar,2016-04-11T19:27:22Z,nit: Perhaps add a comment explaining why the vector is needed for blocks?\n,https://github.com/bitcoin/bitcoin/pull/7840#discussion_r59265363,59265363,src/net.h
sdaftuar,2016-04-11T19:36:26Z,"""inventor"" -> ""inventory""\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r59266764,59266764,src/main.h
jonasnick,2016-04-20T20:26:13Z,"It seems that in general it can happen that `vInv.size() > MAX_INV_SZ`, namely when `pto->vInventoryBlockToSend.size() >= MAX_INV_SZ`. Are we assuming that this isn't the case?\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60480987,60480987,src/main.cpp
sipa,2016-04-20T20:29:27Z,"Entries are added one by one to vInv, and all call sites where that happens are followed by a max size test, so I don't think vInv can exceed MAX_INV_SZ.\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60481489,60481489,src/main.cpp
jonasnick,2016-04-20T20:33:01Z,not here https://github.com/sipa/bitcoin/blob/splitinvtxblock/src/main.cpp#L5790\n,https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60482072,60482072,src/main.cpp
sipa,2016-04-20T20:49:09Z,"Ah, good point. There may not be other mechanisms that prevent over 5000 blocks being inved at once.\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60484739,60484739,src/main.cpp
sipa,2016-04-20T22:36:14Z,Fixed.\n,https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60499641,60499641,src/main.cpp
sdaftuar,2016-04-22T20:18:27Z,"nit: What do you think of exposing the `DepthAndScoreComparator` defined here, and eliminating the `CompareInvMempoolOrder` object declared in `main.cpp` by moving the comparator it defines (which reverses the comparison) into this class? \n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60797176,60797176,src/txmempool.cpp
sipa,2016-04-22T20:54:08Z,"The comparator over there sorts iterators to set items, so there is more difference.\n\nI do think the comparator (or at least a base comparator) should be exposed here, which grabs the mempool lock etc. Perhaps the other comparator can then take a ref to the first one as an argument to add the reversing and set iterator dereferencing.\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60801618,60801618,src/txmempool.cpp
sdaftuar,2016-04-22T21:08:09Z,"I was thinking that because the main.cpp comparator acts on different objects, it'd be easy to just move that function into this class (and explain in comments what the two comparators were for and why they are subtly different!), but your suggestion seems reasonable to me as well.  I suppose its not awesome for the implementation details in main.cpp to leak into txmempool...\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60803349,60803349,src/txmempool.cpp
sipa,2016-04-22T21:36:44Z,"Even better would be for txmempool.h to expose an opaque SortedMempoolSet\nobject, which takes a list of hashes as inputs, and maintains a sorted heap\nof iterators to the mempool entries themselves, in addition to the cs lock.\n",https://github.com/bitcoin/bitcoin/pull/7840#discussion_r60806480,60806480,src/txmempool.cpp
