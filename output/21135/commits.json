[
  {
    "sha": "b83d5f2f0d602ec0e353a77c5edeff731b09bba5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODNkNWYyZjBkNjAyZWMwZTM1M2E3N2M1ZWRlZmY3MzFiMDliYmE1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-02-10T07:23:00Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-02-11T06:10:22Z"
      },
      "message": "scripts: add separate_code failure to all calls in ELF test security check",
      "tree": {
        "sha": "26b3e806c37f2ee18fc353b4b90b07ec13b6ca16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26b3e806c37f2ee18fc353b4b90b07ec13b6ca16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b83d5f2f0d602ec0e353a77c5edeff731b09bba5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmAkyk8ACgkQLuufXMCV\nJsE9XQ/+PLrxbWTNI9bDHP72Y5TC1/AWjJJpDksA/4fO0/iu+o7OLfiI/Tyt5ASM\nN/00xuWaM+dCuS5bPV6ecYXEfNg2JOxyKJ8ylw103O0tDOqPwtakODnNbCniAlva\nQ6woHx0E+RN/bE5IZ2mx3xzc79jdPPEC1juFwxh0B5N3r1G9dkUUwhJZuRH+AL3J\nn3xry7+onb5MopxwGIuY6YKX6tfZy5IgmTHc2DiCsF0afNhHMOclk0Uw4hWw+rmB\n0EXWomHuV/gIWJ729ZvqshsXiROZQ4SNJ8rjog87vhK5EFewFFmIchRncIcvNygt\nqWvUzieBOd1tBaCPi1EL7IZs94TswFTieRGm7/8CZ/74naBKpoplfVNX2rjdTnzI\nniWnCxm18+BYOIfQGMTEoAoQEaRnClbPk7pCcojmdqwDDt+yJBbBpVtUlLwKdRcn\nI2eu504j6xbnXnseikoWP6CnNlSge182uu7lIR5ZwRRfhWvCMLDYSjVkIp9acbCw\n8sUKzGe7z+Agjj1kVwc4CmmTCqCIcA1PSAyzN5f/bxRDf7aL7yGBPlQfvM6nJE4u\nZO6iFY7/zLUefind4jsqEqhmV8Ld5DeGBywcdh+Dl0dJ0gcVLEOG4FZktq0m84uG\n4T+M4V4cKu4xtYlssPFSB6TYoI2VtZTNxlMdxLQ7vIBkp8sS3Vc=\n=oStE\n-----END PGP SIGNATURE-----",
        "payload": "tree 26b3e806c37f2ee18fc353b4b90b07ec13b6ca16\nparent deb185d2fdcd1327d40791ebf6621aed0ebd443d\nauthor fanquake <fanquake@gmail.com> 1612941780 +0800\ncommitter fanquake <fanquake@gmail.com> 1613023822 +0800\n\nscripts: add separate_code failure to all calls in ELF test security check\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83d5f2f0d602ec0e353a77c5edeff731b09bba5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b83d5f2f0d602ec0e353a77c5edeff731b09bba5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83d5f2f0d602ec0e353a77c5edeff731b09bba5/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "deb185d2fdcd1327d40791ebf6621aed0ebd443d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deb185d2fdcd1327d40791ebf6621aed0ebd443d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deb185d2fdcd1327d40791ebf6621aed0ebd443d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "68dc43e8648b9c8a67177df2feed8b3ec13656c7",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b83d5f2f0d602ec0e353a77c5edeff731b09bba5/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b83d5f2f0d602ec0e353a77c5edeff731b09bba5/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=b83d5f2f0d602ec0e353a77c5edeff731b09bba5",
        "patch": "@@ -31,14 +31,14 @@ def test_ELF(self):\n         cc = 'gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n-                (1, executable+': failed PIE NX RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n-                (1, executable+': failed PIE RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n-                (1, executable+': failed PIE RELRO'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE', '-Wl,-z,separate-code']),\n-                (1, executable+': failed RELRO'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code']),\n+                (1, executable+': failed PIE NX RELRO Canary separate_code'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code']),\n+                (1, executable+': failed PIE RELRO Canary separate_code'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code']),\n+                (1, executable+': failed PIE RELRO separate_code'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE', '-Wl,-z,noseparate-code']),\n+                (1, executable+': failed RELRO separate_code'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,noseparate-code']),\n                 (1, executable+': failed separate_code'))\n         self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code']),"
      }
    ]
  },
  {
    "sha": "458e6e6ec0623e450fb0062ee914c2ccca6956f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NThlNmU2ZWMwNjIzZTQ1MGZiMDA2MmVlOTE0YzJjY2NhNjk1NmY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2021-02-10T11:53:40Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-02-11T07:08:33Z"
      },
      "message": "contrib: Implement ELF control_flow check with pixie, add test\n\nDon't need to do shell out to `objdump` for ELF, we simply check if\n`main` starts with the right instruction.\n\nAdd a test in `test-security-check.py`.",
      "tree": {
        "sha": "1b3b0aa9e98c36666b45687fdb2ad060ace2203a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b3b0aa9e98c36666b45687fdb2ad060ace2203a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/458e6e6ec0623e450fb0062ee914c2ccca6956f4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmAk1/MACgkQLuufXMCV\nJsEe/Q/+PTy1gcafihf6x0vWwwGPZ+ido9TcCvEXUDyGGaNssukM6whrrp7d4Pw2\nPQsc4AaorbuAgwRigssNaqohATxDJZGeYxyorcEmtHxtsNqPDCyQi+Z/EURSC/rz\nAGYo6pQlo6cYAGN0akID1f5bvDo8PocnN7HpAwUHK96Hb+KKdOJjXOCw3FeOcn9N\nR3+Uxzy15ODC3rYYys+dbbfet2fdyEh0Ihiqn0yAY7x28yqaFpbWOgHzTeMTWiJg\nkHxtrNaoQDIC0Y77jfN1aGJclYY7sTOsoU9Qsxd1AzKMCTH3Dp2XQlLd1ZFbzZE+\nQFJ0X+PdZrmIm6t/J2f68TSGgzTpP4tAQhhDkHW7lozMap3QGdYDpiKn93Okpuwd\n03jNOwGrzVHEupzHyFSp/UwuknlngOsPQ2Sh1KuZSNH64PKzq+U13cvlBCf84VnS\nh+gW0M9kcUM6sedb4YfqUmeGhol2ZcgR97MSqJKmGydwuRbDBNBczX/hCFXegZ3I\nsLkMDLm6ioL+/6a4KrP/5JvDMG1jxB/G/eB+s1RO39OfYYOgYeJF0oomffjfx+qi\nr4pr030niP9uJYY+TnHs+faa4Ihd+IdoVvKhkJMJnB9LSBWvkG9w9J0cgRzwyGNZ\nx3jKW7I08Ho8/ri4ZqNnmQhQYGp8ZfWKlnMx3nF+t42f+EfoL8I=\n=OrCm\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b3b0aa9e98c36666b45687fdb2ad060ace2203a\nparent b83d5f2f0d602ec0e353a77c5edeff731b09bba5\nauthor Wladimir J. van der Laan <laanwj@protonmail.com> 1612958020 +0100\ncommitter fanquake <fanquake@gmail.com> 1613027313 +0800\n\ncontrib: Implement ELF control_flow check with pixie, add test\n\nDon't need to do shell out to `objdump` for ELF, we simply check if\n`main` starts with the right instruction.\n\nAdd a test in `test-security-check.py`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458e6e6ec0623e450fb0062ee914c2ccca6956f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/458e6e6ec0623e450fb0062ee914c2ccca6956f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458e6e6ec0623e450fb0062ee914c2ccca6956f4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b83d5f2f0d602ec0e353a77c5edeff731b09bba5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b83d5f2f0d602ec0e353a77c5edeff731b09bba5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b83d5f2f0d602ec0e353a77c5edeff731b09bba5"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 66,
      "deletions": 14
    },
    "files": [
      {
        "sha": "c5692d786ab99b8b97f6a3654d54e8a3a4a31ab8",
        "filename": "ci/test/00_setup_env_native_multiprocess.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458e6e6ec0623e450fb0062ee914c2ccca6956f4/ci/test/00_setup_env_native_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458e6e6ec0623e450fb0062ee914c2ccca6956f4/ci/test/00_setup_env_native_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_multiprocess.sh?ref=458e6e6ec0623e450fb0062ee914c2ccca6956f4",
        "patch": "@@ -13,3 +13,4 @@ export DEP_OPTS=\"MULTIPROCESS=1\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--with-boost-process\"\n export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n+export RUN_SECURITY_TESTS=\"true\""
      },
      {
        "sha": "4c42605e9a0e5fe8dfd30e0dfdb1813ac39e4d39",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458e6e6ec0623e450fb0062ee914c2ccca6956f4/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458e6e6ec0623e450fb0062ee914c2ccca6956f4/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=458e6e6ec0623e450fb0062ee914c2ccca6956f4",
        "patch": "@@ -11,7 +11,6 @@ export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic gcc-7 can compile our c\n export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 NO_NATPMP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n-export RUN_SECURITY_TESTS=\"true\"\n export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\""
      },
      {
        "sha": "49397da5d5a72c5ed0d663040a1010096f38ebb1",
        "filename": "contrib/devtools/pixie.py",
        "status": "modified",
        "additions": 28,
        "deletions": 2,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458e6e6ec0623e450fb0062ee914c2ccca6956f4/contrib/devtools/pixie.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458e6e6ec0623e450fb0062ee914c2ccca6956f4/contrib/devtools/pixie.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/pixie.py?ref=458e6e6ec0623e450fb0062ee914c2ccca6956f4",
        "patch": "@@ -5,6 +5,7 @@\n '''\n Compact, self-contained ELF implementation for bitcoin-core security checks.\n '''\n+import itertools\n import struct\n import types\n from typing import Dict, List, Optional, Union, Tuple\n@@ -35,6 +36,7 @@\n \n # relevant values for sh_type\n SHT_PROGBITS = 1\n+SHT_SYMTAB = 2\n SHT_STRTAB = 3\n SHT_DYNAMIC = 6\n SHT_DYNSYM = 11\n@@ -201,11 +203,14 @@ def _lookup_string(data: bytes, index: int) -> bytes:\n     return data[index:endx]\n \n VERSYM_S = BiStruct('H') # .gnu_version section has a single 16-bit integer per symbol in the linked section\n-def _parse_symbol_table(section: Section, strings: bytes, eh: ELFHeader, versym: bytes, verneed: Dict[int, bytes]) -> List[Symbol]:\n+def _parse_symbol_table(section: Section, strings: bytes, eh: ELFHeader, versym: Optional[bytes], verneed: Optional[Dict[int, bytes]]) -> List[Symbol]:\n     '''Parse symbol table, return a list of symbols.'''\n     data = section.contents()\n     symbols = []\n-    versym_iter = (verneed.get(v[0]) for v in VERSYM_S[eh.ei_data].iter_unpack(versym))\n+    if versym is not None:\n+        versym_iter = (verneed.get(v[0]) for v in VERSYM_S[eh.ei_data].iter_unpack(versym))\n+    else:\n+        versym_iter = itertools.repeat(None)\n     for ofs, version in zip(range(0, len(data), section.sh_entsize), versym_iter):\n         symbols.append(Symbol(data, ofs, eh, section, strings, version))\n     return symbols\n@@ -254,6 +259,7 @@ def __init__(self, data: bytes) -> None:\n         self.hdr = ELFHeader(self.data, 0)\n         self._load_sections()\n         self._load_program_headers()\n+        self._load_symbols()\n         self._load_dyn_symbols()\n         self._load_dyn_tags()\n         self._section_to_segment_mapping()\n@@ -274,6 +280,13 @@ def _load_program_headers(self) -> None:\n             offset = self.hdr.e_phoff + idx * self.hdr.e_phentsize\n             self.program_headers.append(ProgramHeader(self.data, offset, self.hdr))\n \n+    def _load_symbols(self) -> None:\n+        self.symbols = []\n+        for idx, section in enumerate(self.sections):\n+            if section.sh_type == SHT_SYMTAB: # find symbol tables\n+                strtab_data = self.sections[section.sh_link].contents() # associated string table\n+                self.symbols += _parse_symbol_table(section, strtab_data, self.hdr, None, None)\n+\n     def _load_dyn_symbols(self) -> None:\n         # first, load 'verneed' section\n         verneed = None\n@@ -316,6 +329,19 @@ def query_dyn_tags(self, tag_in: int) -> List[Union[int, bytes]]:\n         '''Return the values of all dyn tags with the specified tag.'''\n         return [val for (tag, val) in self.dyn_tags if tag == tag_in]\n \n+    def section_by_name(self, name: bytes) -> Section:\n+        res = [section for section in self.sections if section.name == name]\n+        if res:\n+            return res[0]\n+        else:\n+            raise KeyError\n+\n+    def symbol_by_name(self, name: bytes) -> Symbol:\n+        res = [symbol for symbol in self.symbols if symbol.name == name]\n+        if res:\n+            return res[0]\n+        else:\n+            raise KeyError\n \n def load(filename: str) -> ELFFile:\n     with open(filename, 'rb') as f:"
      },
      {
        "sha": "435b10cb25ef5c794f3020ea4fa95b208f0c10e5",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458e6e6ec0623e450fb0062ee914c2ccca6956f4/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458e6e6ec0623e450fb0062ee914c2ccca6956f4/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=458e6e6ec0623e450fb0062ee914c2ccca6956f4",
        "patch": "@@ -143,6 +143,29 @@ def check_ELF_separate_code(executable):\n                 return False\n     return True\n \n+def check_ELF_control_flow_instrumentation(executable) -> bool:\n+    '''\n+    Check control flow instrumentation for ELF.\n+    We check that the function main starts with a endbr64 instruction.\n+    Because it relies on the symbol table being present this check only works on unstripped binaries.\n+    '''\n+    elf = pixie.load(executable)\n+\n+    if elf.hdr.e_machine is not pixie.EM_X86_64:\n+        return True\n+\n+    # find main symbol\n+    main = elf.symbol_by_name(b'main')\n+    # get containing section and contents\n+    sec = elf.sections[main.st_shndx]\n+    contents = sec.contents()\n+    # compute address in section\n+    offset = main.st_value - sec.sh_addr\n+    assert(offset >= 0 and (offset + 4) <= len(contents))\n+    # check if instruction is endbr64\n+    inst = contents[offset:offset+4]\n+    return inst == b'\\xf3\\x0f\\x1e\\xfa'\n+\n def get_PE_dll_characteristics(executable) -> int:\n     '''Get PE DllCharacteristics bits'''\n     stdout = run_command([OBJDUMP_CMD, '-x',  executable])\n@@ -257,6 +280,7 @@ def check_MACHO_Canary(executable) -> bool:\n     ('RELRO', check_ELF_RELRO),\n     ('Canary', check_ELF_Canary),\n     ('separate_code', check_ELF_separate_code),\n+    ('control_flow', check_ELF_control_flow_instrumentation),\n ],\n 'PE': [\n     ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),"
      },
      {
        "sha": "a9b4450715f7b08005a3735f6762da59e510095c",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/458e6e6ec0623e450fb0062ee914c2ccca6956f4/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/458e6e6ec0623e450fb0062ee914c2ccca6956f4/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=458e6e6ec0623e450fb0062ee914c2ccca6956f4",
        "patch": "@@ -31,17 +31,19 @@ def test_ELF(self):\n         cc = 'gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code']),\n-                (1, executable+': failed PIE NX RELRO Canary separate_code'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code']),\n-                (1, executable+': failed PIE RELRO Canary separate_code'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code']),\n-                (1, executable+': failed PIE RELRO separate_code'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE', '-Wl,-z,noseparate-code']),\n-                (1, executable+': failed RELRO separate_code'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,noseparate-code']),\n-                (1, executable+': failed separate_code'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code', '-fcf-protection=none']),\n+                (1, executable+': failed PIE NX RELRO Canary separate_code control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code', '-fcf-protection=none']),\n+                (1, executable+': failed PIE RELRO Canary separate_code control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,noseparate-code', '-fcf-protection=none']),\n+                (1, executable+': failed PIE RELRO separate_code control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE', '-Wl,-z,noseparate-code', '-fcf-protection=none']),\n+                (1, executable+': failed RELRO separate_code control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,noseparate-code', '-fcf-protection=none']),\n+                (1, executable+': failed separate_code control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code', '-fcf-protection=none']),\n+                (1, executable+': failed control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code', '-fcf-protection=full']),\n                 (0, ''))\n \n     def test_PE(self):"
      }
    ]
  },
  {
    "sha": "2e83109c6c3306f349bddd6c27a322944be4c011",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTgzMTA5YzZjMzMwNmYzNDliZGRkNmMyN2EzMjI5NDRiZTRjMDEx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-02-10T13:38:18Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-02-11T07:08:39Z"
      },
      "message": "contrib: add control flow check for PE binaries",
      "tree": {
        "sha": "c712db563764a6e1e6aaf22f62793f6839a78cdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c712db563764a6e1e6aaf22f62793f6839a78cdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e83109c6c3306f349bddd6c27a322944be4c011",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmAk1/gACgkQLuufXMCV\nJsHnGA/+MlJZtiL3ev3qoTVN7SvaYn1nSClqrRCw4RUv8ZYQkJj4npYjflsNEtc6\n9p7AJ0kbOo1+5qQ66oXFLNzyLHghKA6G8pSceF24sMuAEHqcZGmQty9PYNw6WeMX\nJFPeStNQwisfpcEZ68+dMA7xq1ts8faeDIfKj8LEMwuprId8/MMtBh3mxoJlXoW9\narN1FL9ND+U/o80Joa8PYLg+En38hqcOkVgH0A5Y9KGjzI14KzzpO5KzgedMFxRa\nMEjJ5KAKRbelsfccx4ZMnoGeyYyWaPLFUGOlZ7tY+zLBY5WF7/wt1SVlRPQKjpVm\nbtmxYn5lKGMYp8wEthrxuaO4YmrqMZBxD3NQa964ZmdUk4ENjH9Nz8K2Oet9eSnN\nmGLII9y7stdupYUzWdvk2oMTAmOttzP15T2OdlJlcRUIJVzx7jJSz+5rebDasxC/\n+llkE7f3sAVjuKqy2zut8Pi+Q0HtV66XGbZAMTNuFWpOjxsh4uRYhCyC/pT17rAT\nhCDGEZkjqrwLmF1ufXumTOzPBjdn7hb1yBo7mfrJWVFLu/oenanSCzUpzlmbKtVy\nWAygp1gyf1cFyf8BR5VZLAx1ZT/PSE54L6mwO91fzK3EPe9qFPnauBh4fJybHFzU\n0Q94X76aABQX828kYp3GhsrlvEf+LbaWlqPZFSma1LcFiLJ+w1Q=\n=61zC\n-----END PGP SIGNATURE-----",
        "payload": "tree c712db563764a6e1e6aaf22f62793f6839a78cdc\nparent 458e6e6ec0623e450fb0062ee914c2ccca6956f4\nauthor fanquake <fanquake@gmail.com> 1612964298 +0800\ncommitter fanquake <fanquake@gmail.com> 1613027319 +0800\n\ncontrib: add control flow check for PE binaries\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e83109c6c3306f349bddd6c27a322944be4c011",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e83109c6c3306f349bddd6c27a322944be4c011",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e83109c6c3306f349bddd6c27a322944be4c011/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "458e6e6ec0623e450fb0062ee914c2ccca6956f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/458e6e6ec0623e450fb0062ee914c2ccca6956f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/458e6e6ec0623e450fb0062ee914c2ccca6956f4"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 32,
      "deletions": 10
    },
    "files": [
      {
        "sha": "a9d8a99d8c203b545d3380ffa02f67e85554d81f",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e83109c6c3306f349bddd6c27a322944be4c011/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e83109c6c3306f349bddd6c27a322944be4c011/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=2e83109c6c3306f349bddd6c27a322944be4c011",
        "patch": "@@ -207,6 +207,25 @@ def check_PE_NX(executable) -> bool:\n     bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n+def check_PE_control_flow_instrumentation(executable) -> bool:\n+    '''\n+    Check control flow instrumentation for PE.\n+    We check that main starts with a endbr64 instruction.\n+    Because it relies on the symbol table being present this check only works on unstripped binaries.\n+    '''\n+\n+    if executable.endswith('test_bitcoin.exe'):\n+        # TODO: why doesn't test_bitcoin.exe receive instrumentation?\n+        # It does contain 'enbr64' instructions, but only in the functions\n+        # coming from ZeroMQ.\n+        return True\n+\n+    stdout = run_command([OBJDUMP_CMD, '--disassemble=main', '--section=.text', executable])\n+    split = stdout.splitlines()\n+    if \"<main>:\" in split[6] and \"endbr64\" in split[7]:\n+        return True\n+    return False\n+\n def get_MACHO_executable_flags(executable) -> List[str]:\n     stdout = run_command([OTOOL_CMD, '-vh', executable])\n \n@@ -286,7 +305,8 @@ def check_MACHO_Canary(executable) -> bool:\n     ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),\n     ('HIGH_ENTROPY_VA', check_PE_HIGH_ENTROPY_VA),\n     ('NX', check_PE_NX),\n-    ('RELOC_SECTION', check_PE_RELOC_SECTION)\n+    ('RELOC_SECTION', check_PE_RELOC_SECTION),\n+    ('control_flow', check_PE_control_flow_instrumentation),\n ],\n 'MACHO': [\n     ('PIE', check_MACHO_PIE),"
      },
      {
        "sha": "7b0078132aacbba995acd56ce4e9bf0d66bfcc14",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e83109c6c3306f349bddd6c27a322944be4c011/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e83109c6c3306f349bddd6c27a322944be4c011/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=2e83109c6c3306f349bddd6c27a322944be4c011",
        "patch": "@@ -52,15 +52,17 @@ def test_PE(self):\n         cc = 'x86_64-w64-mingw32-gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE', '-fcf-protection=none']),\n+            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE', '-fcf-protection=none']),\n+            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE', '-fcf-protection=none']),\n+            (1, executable+': failed HIGH_ENTROPY_VA RELOC_SECTION control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE', '-fcf-protection=none']),\n+            (1, executable+': failed RELOC_SECTION control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-no-pie','-fno-PIE', '-fcf-protection=none']),\n+            (1, executable+': failed control_flow'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE', '-fcf-protection=full']),\n             (0, ''))\n \n     def test_MACHO(self):"
      }
    ]
  }
]