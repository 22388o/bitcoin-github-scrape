DrahtBot,2021-01-05 22:05:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21279 (scripted-diff: Regenerate key_io data deterministically by MarcoFalke)\n\nIf you consider this pull request import",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-754930797,754930797,
NicolasDorier,2021-01-06 12:40:34,"By implementing Bech32m, I found out that it is not obvious how to locate errors, because the `residue` was polymod^1, but now is either `polimod^1` or `polimod^0x2bc830a3`... I am tempted to try both and take the residue with the least errors. I think this should be specified in the bip.\nThat said by doing this, the `error patterns with failure probability` in the bip are probably different. As",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-755277023,755277023,
luke-jr,2021-01-06 17:16:43,@NicolasDorier That isn't solved by sipa only allowing one polimod based on the witness version?,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-755437272,755437272,
sipa,2021-01-06 17:29:01,"@luke-jr It's not, because the error may be one that affects the witness version symbol.\n\n@NicolasDorier Good point, I will elaborate on that.",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-755444262,755444262,
michaelfolkson,2021-01-09 20:35:05,"Concept ACK, Approach ACK. Skimmed code but will hopefully go through more thoroughly at a later date.\n\nhttps://bitcoin.stackexchange.com/questions/101117/what-problems-identified-with-bech32-addresses-have-been-resolved-with-the-updat",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-757363546,757363546,
sipa,2021-01-18 22:05:58,"@kallewoof Agree, a `struct` is definitely warranted here. Updated.",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-762490169,762490169,
gruve-p,2021-01-21 11:41:31,utACK https://github.com/bitcoin/bitcoin/pull/20861/commits/2827cf86559a9310ca3fb8b19e03422586a21a2b,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-764586255,764586255,
sipa,2021-01-27 00:23:01,"Rebased now #20832 is merged.\n\nI've also addressed some comments on the BIP draft itself, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018362.html.",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-767918296,767918296,
benthecarman,2021-01-27 07:42:52,re-ACK 3fee858,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-768099947,768099947,
sipa,2021-02-03 23:22:58,BIP draft is now published as [BIP 350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki).,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-772895907,772895907,
sipa,2021-02-17 22:49:54,Rebased and addressed review comments.,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-780906248,780906248,
benthecarman,2021-02-18 01:31:42,ACK f15513d4184e637eda76eb23e0d6d47d7fb25075,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-780972516,780972516,
Sjors,2021-02-18 14:55:19,"ACK f15513d4184e637eda76eb23e0d6d47d7fb25075\n\nI'm confused how `key_io_valid.json` and `key_io_invalid.json` are used. It doesn't seem to be referenced in any of the (functional) tests or CI scripts. If I use the suggested incantation in `gen_key_io_test_vectors.py` it fails at line 131 with `bech32_encode() missing 1 required positional argument: 'spec'`.\n\n",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-781399950,781399950,
sipa,2021-02-19 22:39:59,"@Sjors The key_io_{in,}valid.json tests are executed in src/test/key_io_tests.cpp. I had no idea there was a script to automatically generate them, though. I've updated that now too and regenerated them using it.\n",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-782423094,782423094,
Sjors,2021-03-11 10:44:12,re-utACK 92ec3fcdd2f79949839ce269403396362bea9d54,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-796644013,796644013,
jonatack,2021-03-12 20:30:35,"Approach ACK, reviewing.",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-797737912,797737912,
sipa,2021-03-16 00:17:52,"Addressed comments. Rebased + made the following changes:\n\n```patch\ndiff --git a/contrib/testgen/gen_key_io_test_vectors.py b/contrib/testgen/gen_key_io_test_vectors.py\nindex 6b985b8ec2..2f3189eca9 100755\n--- a/contrib/testgen/gen_key_io_test_vectors.py\n+++ b/contrib/testgen/gen_key_io_test_vectors.py\n@@ -3,11 +3,11 @@\n # Distributed under the MIT software license, see the accompan",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-799847447,799847447,
Sjors,2021-03-16 10:15:24,re-utACK c85b2fce57a49133ec652a3ec95d67511cde311c,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-800130789,800130789,
gruve-p,2021-03-16 12:07:58,re-utACK https://github.com/bitcoin/bitcoin/pull/20861/commits/c85b2fce57a49133ec652a3ec95d67511cde311c,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-800205212,800205212,
jnewbery,2021-03-16 18:26:02,utACK 2e7c80fb5be82ad4a3f737cab65b31f70a772a23,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-800503168,800503168,
Sjors,2021-03-16 18:59:34,re-utACK 2e7c80fb5be82ad4a3f737cab65b31f70a772a23,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-800525384,800525384,
achow101,2021-03-16 20:05:04,ACK 2e7c80fb5be82ad4a3f737cab65b31f70a772a23,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-800566012,800566012,
fjahr,2021-03-16 21:51:44,"re-ACK 2e7c80fb5be82ad4a3f737cab65b31f70a772a23\n\nCheck range-diff since last review.",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-800636341,800636341,
sipa,2021-03-18 01:00:34,@fjahr Included your naming nits commit.,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-801538560,801538560,
Sjors,2021-03-18 08:05:34,"utACK 0334602\n\nApologies for the meta naming nit, but let's call that commit `bech32m: naming nits`? :-)",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-801717877,801717877,
jnewbery,2021-03-18 11:11:00,"utACK 03346022d6\n\nThis seems ready for merge (and had 4 ACKs prior to the last push). Can we settle on this and resolve any additional style comments in follow-up PRs?",https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-801834795,801834795,
achow101,2021-03-18 19:05:11,ACK 0334602,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-802212960,802212960,
fjahr,2021-03-18 19:05:46,re-ACK 0334602,https://github.com/bitcoin/bitcoin/pull/20861#issuecomment-802213275,802213275,
luke-jr,2021-01-06 00:52:33,"Why forbid Bech32m for v0? Seems like it might be nice to (very slowly) migrate to Bech32m exclusively, and drop Bech32 someday?",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r552296627,552296627,src/key_io.cpp
sipa,2021-01-06 00:55:03,"I think it's a bad idea to have multiple addresses valid for the same scriptPubKey. It only results in confusion when decoding/recoding doesn't roundtrip. v0 outputs use bech32, and I don't think this should ever change, for better or for worse.\n\nIt also worsens error detection to 29 bits (as every v0 output now has two valid checksums).",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r552298542,552298542,src/key_io.cpp
luke-jr,2021-01-06 01:40:14,"Roundtrips (by uninvolved third parties) seem like strictly a bad thing IMO, but loss of error detection precision is a good reason. :/",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r552315960,552315960,src/key_io.cpp
kallewoof,2021-01-18 10:44:38,"Commit 6b28812881375311891e80c1d4e9df6aaa0b85d5\n\nPerhaps too unorthodox, but it would theoretically be possible to do\n```C++\n   BECH32 = 1, //...\n   BECH32M = 0x2bc830a3, // ...\n```\nand get rid of `EncodingConstant`. (But the amount of casting required is probably not worth it.)",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r559473212,559473212,src/bech32.h
sipa,2021-01-18 22:05:33,I prefer not to do that just for encapsulation reason. Nothing outside of bech32.cpp should care or see the constants.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r559812907,559812907,src/bech32.h
btcslade,2021-01-19 00:56:48,Don't think this is needed anymore.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r559853231,559853231,src/bech32.h
sipa,2021-01-19 04:06:50,Fixed.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r559901375,559901375,src/bech32.h
dr-orlovsky,2021-02-05 18:05:42,Shouldn't `0x2bc830a3` be made a global constant value?,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r571153401,571153401,src/bech32.cpp
dr-orlovsky,2021-02-05 18:07:44,Why here `Encoding` is added as the last parameter why in https://github.com/bitcoin/bitcoin/pull/20861/files#diff-f146300624c06d2e08aadf500952294148a1785edd6ff2e8b50f13b2c08255edR152 it became first? Is there any reason behind API inconsistency?,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r571154527,571154527,src/bech32.cpp
benthecarman,2021-02-06 12:43:36,Won't this need to be backported to 0.21.1 with taproot activation?,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r571431168,571431168,doc/bips.md
benthecarman,2021-02-06 12:45:30,Couldn't this be signet as well?,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r571431311,571431311,src/test/data/key_io_valid.json
benthecarman,2021-02-06 12:46:07,ditto signet comment,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r571431407,571431407,src/test/data/key_io_valid.json
sipa,2021-02-11 19:05:02,"IMO, no. There is no reason why it should be exported from this module.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r574754752,574754752,src/bech32.cpp
sipa,2021-02-11 19:05:50,"I have no opinion on that, but even if we do that, that's not part of this PR.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r574755263,574755263,doc/bips.md
Sjors,2021-02-17 15:39:18,"Also note that if 0.21.1 contains Taproot activation logic, it won't contain any wallet support. Being able to send _to_ a Taproot address is probably worth back-porting, but that could also wait for 0.21.2.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r577715636,577715636,doc/bips.md
sipa,2021-02-17 22:49:21,Added a signet copy of this.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r578000069,578000069,src/test/data/key_io_valid.json
sipa,2021-02-17 22:49:29,And this.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r578000126,578000126,src/test/data/key_io_valid.json
sipa,2021-02-17 22:49:42,Fixed.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r578000224,578000224,src/bech32.cpp
dr-orlovsky,2021-02-20 01:44:51,"There might be a Base58 string which is a valid Bech32m with future Witness version, and since Base58 is the first decoder, a future valid Bech32m address may be incorrectly parsed as Base58. So I propose to change their order.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r579569442,579569442,src/key_io.cpp
dr-orlovsky,2021-02-20 01:50:28,"in case of Bech32 address `error_str` will still be set to `""Invalid prefix for Base58-encoded address""` because it is not cleaned when we return https://github.com/bitcoin/bitcoin/pull/20861/files#diff-a83ac7cb4a9d60b647db6378ccfad815005724e594bf53f49745b0f40701292fR152\n\nSo I propose\n```suggestion\n        if (ConvertBits<5, 8, false>([&](unsigned char c) { data.push_back(c); }, dec.data.b",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r579570368,579570368,src/key_io.cpp
sipa,2021-02-20 03:51:38,"It's already wiped in line 102, I think?",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r579589300,579589300,src/key_io.cpp
dr-orlovsky,2021-02-20 09:38:47,"True, don't know how I missed that",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r579631322,579631322,src/key_io.cpp
Sjors,2021-02-23 13:44:25,That seems like something for a separate PR.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r581045010,581045010,src/key_io.cpp
sipa,2021-03-04 23:19:38,"I don't think there is any concern about that.\n\nThe decoder only accepts Base58Check inputs that encode 20 data bytes, which means addresses of at most 35 characters (ceil(log(256)/log(58)*20) == 20). A Bech32(m) segwit address of 35 characters (assuming 2+-character HRP) would encode at most (35-6(checksum)-1(separator)-2(hrp)-1(version byte))*5 = 125 bits, rounded down to a byte, 120 bits. I",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r587903081,587903081,src/key_io.cpp
jnewbery,2021-03-10 16:58:14,"Makes no difference to the compiled code, but the convention is to give the declaration's parameters names (which match the parameter names in the function definition).\n\n```suggestion\nstd::string Encode(Encoding encoding, const std::string& hrp, const std::vector<uint8_t>& values);\n```",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r591699783,591699783,src/bech32.h
jnewbery,2021-03-10 16:59:15,"Perhaps update line 10:\n\n```diff\n-// For more information, see BIP 173.\n+// For more information, see BIPs 173 and 350.\n```",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r591700730,591700730,src/bech32.h
jnewbery,2021-03-10 19:19:32,"Should a round trip encode/decode always result in the same hrp (""bc"") here? Am I missing some way that this could legitimately fail?",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r591802440,591802440,src/test/fuzz/bech32.cpp
jnewbery,2021-03-10 19:41:21,">> I honestly don't really like the std::tuple stuff. It's pretty ugly and a simple struct containing the 3 elements passed as a copy by reference (edit: I meant like the tuples are passed now) in the same way would be more straightforward. (@kallewoof)\n\n> @kallewoof Agree, a struct is definitely warranted here. Updated. (@sipa)\n\nNo need to change this again, but in future you may find tha",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r591818909,591818909,src/key_io.cpp
sipa,2021-03-10 19:54:26,"Agree, though another reason why we may not want to do this: we'll want this PR backported as far as possible.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r591827324,591827324,src/key_io.cpp
jnewbery,2021-03-10 20:00:35,"Makes sense. I'll mark this as resolved.\n\nAlso, TIL: you can use structured bindings to unpack a `struct`, so this works even when the return value is a `DecodeResult`: `const auto [encoding, hrp, d] = bech32::Decode(str);`\n",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r591831450,591831450,src/key_io.cpp
ryanofsky,2021-03-11 03:50:07,"In commit ""Add Bech32m test vectors"" (f0e15955421870c297d4ddb523431dae711e27d3)\n\nI think this means to check != BECH32M, instead of != BECH32. Alternately could check == INVALID, if it is not a problem to be more strict.\n",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592047803,592047803,src/test/bech32_tests.cpp
ryanofsky,2021-03-11 04:14:28,"In commit ""Use Bech32m encoding for v1+ segwit addresses"" (ea3995aa3cd8f04d7328c95a43c79a5b20fa18a5)\n\nShould AddressDescriptor::GetOutputType should now return BECH32M instead of BECH32 for WitnessUnknown addresses to be consistent with this change?\n\nhttps://github.com/bitcoin/bitcoin/blob/ea3995aa3cd8f04d7328c95a43c79a5b20fa18a5/src/script/descriptor.cpp#L656\n\nAlso, this change seems ",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592054623,592054623,src/key_io.cpp
ryanofsky,2021-03-11 04:22:10,"In commit ""Use Bech32m encoding for v1+ segwit addresses"" (ea3995aa3cd8f04d7328c95a43c79a5b20fa18a5)\n\nI probably just need to stare at this more, but maybe you could summarize the changes here. Like where did the 1,2 and 2,16 cases go?",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592056814,592056814,contrib/testgen/gen_key_io_test_vectors.py
sipa,2021-03-11 06:00:26,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592086654,592086654,src/bech32.h
sipa,2021-03-11 06:00:33,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592086689,592086689,src/bech32.h
sipa,2021-03-11 06:01:36,"This already existed in the code before this PR, but it's a good point. The only failure case is when the data is too big to fit in a valid Bech32(m) encoding (max 90 characters).\n\nI've added a check for that, and then dropped the `if (r2.hrp.empty()) {` branch.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592086993,592086993,src/test/fuzz/bech32.cpp
sipa,2021-03-11 06:01:54,Indeed. Replaced with `== INVALID`.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592087079,592087079,src/test/bech32_tests.cpp
sipa,2021-03-11 06:07:07,"Very good point.\n\nWe can't return `GetOutputType::BECH32M` because no such constant exists. It could be added, but I'd rather not do that in this PR, because I don't think it actually matters at this stage. The purpose of output types is so the user can select what kind of address to request from a wallet. You're right that technically a `addr(...)` descriptor could be imported (but I think th",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592088741,592088741,src/key_io.cpp
sipa,2021-03-11 06:11:13,"They're just gone and replaced by better cases. I got rid of (1,2) as (1,32) is a more relevant case (that's taproot) and added (2,2) too. To test a bit larger variety, some other (2, _) were replaced with (3, _) as well.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592090257,592090257,contrib/testgen/gen_key_io_test_vectors.py
Sjors,2021-03-11 10:41:24,"I think `-addresstype=bech32m` makes sense, e.g. `getnewaddress bech32m` as a way to request a taproot p2pk address. However it might be more future proof to use `-addresstype=tap` and  `getnewaddress tap`.\n\nLonger term I suspect it might be better to give wallet descriptors a name and then call `getnewaddress NAME`.\n\nSee also #15590 for some earlier discussions around this issue.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592250917,592250917,src/key_io.cpp
ryanofsky,2021-03-11 12:15:04,"s/350/341/\n\nd1054b98e5ec04cd3cdb487eaaf561926ef6c82d",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592311215,592311215,doc/release-notes-20861.md
sipa,2021-03-11 19:43:30,"> However it might be more future proof to use `-addresstype=tap` and `getnewaddress tap`.\n\nI'm not sure. If Bech32m gets adopted as I hope it does, we won't need a new address type for post-taproot things anymore.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592671016,592671016,src/key_io.cpp
achow101,2021-03-11 20:20:06,"Since bech32m is (and bech32 was) intended to be used for different segwit versions, I think that we should actually move away from having bech32 or bech32m as the address type as with future segwit versions, it becomes ambiguous as to what type of address you want.\n\nFor example, suppose we introduce a segwit v2 that, like segwit v1, will encode a pubkey in the address. Now the wallet would ha",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592693878,592693878,src/key_io.cpp
achow101,2021-03-11 20:26:16,How come this scenario is no longer relevant?,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592697525,592697525,src/test/fuzz/bech32.cpp
sipa,2021-03-11 20:31:41,"> Now the wallet would have a descriptor for segwit v1, and another for segwit v2. If I wanted a segwit v1 address, what do I provide as the address type?\n\nI think that's the crucial point: why would you want that? If every sender supports both equally, you'd always produce whatever you have a descriptor for that is compatible with that.\n\nIf there is a reason for being more flexible, no ob",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592701017,592701017,src/key_io.cpp
sipa,2021-03-11 20:58:44,The added `if` condition around it (which checks that the input is within acceptable range).,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592717345,592717345,src/test/fuzz/bech32.cpp
achow101,2021-03-11 21:22:04,"> I think that's the crucial point: why would you want that? If every sender supports both equally, you'd always produce whatever you have a descriptor for that is compatible with that.\n\nIn the ideal world, sure. But as we have seen with segwit, that's not guaranteed. Even though senders were supposed to allow any segwit version with bech32, they didn't. I'm not sure that everyone will underst",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592731006,592731006,src/key_io.cpp
sipa,2021-03-11 21:30:41,"> In the ideal world, sure. But as we have seen with segwit, that's not guaranteed. Even though senders were supposed to allow any segwit version with bech32, they didn't. I'm not sure that everyone will understand to do that with bech32m.\n\nSure, that's why I suggest we may want to add an OutputType::BECH32M - precisely because Bech32 and Bech32m may differ for senders. But p2sh vs. p2sh-p2wpk",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592735937,592735937,src/key_io.cpp
achow101,2021-03-11 22:30:25,"> Sure, that's why I suggest we may want to add an OutputType::BECH32M - precisely because Bech32 and Bech32m may differ for senders.\n\nYes, I agree with doing that.\n\n> But in descriptor wallets if you don't want witness v9 addresses because you're not comfortable with them, simply don't import/create such a descriptor.\n\nThat's reasonable, but I think it's too onerous on users to have t",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r592768459,592768459,src/key_io.cpp
jonatack,2021-03-12 21:36:12,"402cbb2 Perhaps move the `data` type alias to the header file to use it uniformly in `bech32.{h, cpp}`\n\n<details><summary>example code diff</summary><p>\n\n```diff\ndiff --git a/src/bech32.cpp b/src/bech32.cpp\nindex 80794ec4f1..60d4d72ca5 100644\n--- a/src/bech32.cpp\n+++ b/src/bech32.cpp\n@@ -13,8 +13,6 @@ namespace bech32\n\n-typedef std::vector<uint8_t> data;\n-\n /** The Bech32",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r593464165,593464165,src/bech32.h
jonatack,2021-03-12 21:39:14,"402cbb29516d5bf03a18822af9f1b4b574f319ac pico-nits, `check` can be `const` (and braced initialization for type safety)\n```suggestion\n    const uint32_t check{PolyMod(Cat(ExpandHRP(hrp), values))};\n```\n\nIdem for `mod` on line 140, `result` on line 195, and `version` in `key_io.cpp::L106`",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r593465566,593465566,src/bech32.cpp
jonatack,2021-03-12 21:49:17,"d1054b98e nit, s/system/systems/ and omit comma\n```suggestion\n  affect any production systems but may be observed on other networks where such\n```",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r593470134,593470134,doc/release-notes-20861.md
jonatack,2021-03-12 21:52:01,Checking for encoding type may be done frequently enough to consider adding helper functions (not necessarily in this PR). ,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r593471343,593471343,src/bech32.cpp
sipa,2021-03-12 23:47:23,"I'm going to mark this as resolved; we've discussed this in today's wallet meeting. It's not exactly clear how to proceed, but in any case, I don't think this is something for this PR. Please respond if you don't agree.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r593510753,593510753,src/key_io.cpp
jonatack,2021-03-12 23:55:30,Discussion: http://www.erisian.com.au/bitcoin-core-dev/log-2021-03-12.html#l-286,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r593512866,593512866,src/key_io.cpp
fjahr,2021-03-14 18:07:25,"Not necessarily for this PR but we may want to think about renaming this to `BECH32Legacy` or `BECH32v0` or so. In the code right now sometimes ""bech32"" refers to BIP173 specifically and sometimes to both BIP173 and BIP350. In this line it's the former case, in the namespace it's the latter case. I can see people getting confused by that in the future.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r593938931,593938931,src/bech32.h
jnewbery,2021-03-15 09:00:11,I don't think we want to pollute the global namespace with a type called `data`.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594153824,594153824,src/bech32.h
jnewbery,2021-03-15 09:18:09,"The caller can't do anything with a `DecodeResult` where encoding is `Encoding::INVALID`, so changing this return type to `std::optional<DecodeResult>` and removing the `Encoding::INVALID` enum type feels more natural to me.\n\n<details>\n<summary>Diff</summary>\n\n```diff\ndiff --git a/src/bech32.cpp b/src/bech32.cpp\nindex 80794ec4f1..2fd84b395b 100644\n--- a/src/bech32.cpp\n+++ b/src/b",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594166019,594166019,src/bech32.h
jnewbery,2021-03-15 09:27:01,"Is there a reason that this isn't simply a `std::map<Encoding, uint32_t>`?\n\nThis can be `constexpr`ed to evaluate this in compile time for the `VerifyChecksum()` case:\n\n```suggestion\nconstexpr uint32_t EncodingConstant(Encoding encoding) {\n```",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594172283,594172283,src/bech32.cpp
jnewbery,2021-03-15 09:34:08,"It's slightly inconsistent that in the c++ code, this is called `encoding` and is the first argument, and here it's `spec` and the last argument.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594177361,594177361,test/functional/test_framework/segwit_addr.py
jnewbery,2021-03-15 09:34:39,Perhaps add constant `BECH32_CONST = 1`,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594177702,594177702,test/functional/test_framework/segwit_addr.py
jonatack,2021-03-15 18:19:46,"Good point indeed: https://google.github.io/styleguide/cppguide.html#Aliases. ""However, local convenience aliases are fine in function definitions, private sections of classes, explicitly marked internal namespaces, and in .cc (.cpp) files.""",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594579018,594579018,src/bech32.h
achow101,2021-03-15 18:39:30,"In 402cbb29516d5bf03a18822af9f1b4b574f319ac ""Implement Bech32m encoding/decoding""\n\nIt would be nice to also check that the encoding is `Encoding::INVALID`",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594593139,594593139,src/test/fuzz/bech32.cpp
achow101,2021-03-15 18:40:06,"In d1054b98e5ec04cd3cdb487eaaf561926ef6c82d ""Use Bech32m encoding for v1+ segwit addresses""\n\nI think you meant https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki (341, not 350)",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594593511,594593511,doc/release-notes-20861.md
achow101,2021-03-15 19:06:05,"In 92ec3fcdd2f79949839ce269403396362bea9d54 ""Add signet support to gen_key_io_test_vectors.py""\n\nThere is a similar comment at the top of `contrib/testgen/gen_key_io_test_vectors.py` which should either be updated or removed. Also that comment says the file is for Base58 addresses when clearly both Base58 and Bech32 things are generated in it.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594610201,594610201,contrib/testgen/README.md
sipa,2021-03-15 23:08:27,Perhaps this is more personal style. I don't think this is an improvement.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594750050,594750050,src/bech32.cpp
sipa,2021-03-15 23:09:25,"Perhaps it's worth having a global typedef for this (maybe with a more descriptive name than `data`), but if so, I think it's something for a different PR.\n\nClosing this.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594751091,594751091,src/bech32.h
sipa,2021-03-15 23:11:33,"I don't think that's the right solution. The bech32 module is independent of the concept of segwit or bitcoin or addresses or witness versions. If there are other places where the name bech32 is used in a confusing way to include bech32m, feel free to point them out so they can be fixed (in this PR or elsewhere).",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594752331,594752331,src/bech32.h
sipa,2021-03-15 23:12:31,"@jnewbery Yes, exactly. I considered that, but decided against it, as I prefer to have something maximally backportable.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594752698,594752698,src/bech32.h
sipa,2021-03-15 23:14:15,"Hmm, a map feels like a lot more heavyweight/overkill to me.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594753385,594753385,src/bech32.cpp
sipa,2021-03-15 23:20:00,"Making it `constexpr` will prevent backporting to pre-C++17 code. It's also unnecessary (constexpr doesn't control whether the compiler can evaluate at compile time as an optimization, only whether you can use it in compile-time expressions).",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594755534,594755534,src/bech32.cpp
sipa,2021-03-15 23:22:11,I'm not sure what you're suggesting concretely here.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594756287,594756287,src/bech32.cpp
kallewoof,2021-03-16 00:04:43,"I think explicitly asserting is purposefully done to give a sort of code-visual cue on where updates are required, after adding additional encodings in the future, so I don't think helper functions would be appropriate here.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594771528,594771528,src/bech32.cpp
sipa,2021-03-16 00:18:20,Added `const`.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594776227,594776227,src/bech32.cpp
sipa,2021-03-16 00:18:38,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594776338,594776338,doc/release-notes-20861.md
sipa,2021-03-16 00:19:20,"Changed the test_framework code to also use (encoding,hrp,data) everywhere.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594776566,594776566,test/functional/test_framework/segwit_addr.py
sipa,2021-03-16 00:19:31,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594776639,594776639,test/functional/test_framework/segwit_addr.py
sipa,2021-03-16 00:19:42,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594776687,594776687,src/test/fuzz/bech32.cpp
sipa,2021-03-16 00:19:49,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594776738,594776738,doc/release-notes-20861.md
sipa,2021-03-16 00:19:58,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r594776825,594776825,contrib/testgen/README.md
jnewbery,2021-03-16 11:37:29,Thanks. Marking resolved.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r595087630,595087630,src/bech32.h
jnewbery,2021-03-16 11:50:25,"```suggestion\n    const = BECH32M_CONST if encoding == Encoding.BECH32M else BECH32_CONST\n```",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r595095660,595095660,test/functional/test_framework/segwit_addr.py
sipa,2021-03-16 17:49:52,Done.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r595408094,595408094,test/functional/test_framework/segwit_addr.py
fjahr,2021-03-17 20:01:50,"Ok, my naming suggestions were just what came to my head at that moment, I did not want to intentionally peg the encoding name to one of its use cases. I just think it's unfortunate that everything including the BIP173 encoding was called ""Bech32"" and now there is a new encoding called ""Bech32m"" that is also a Bech32 string. I think it might be helpful to have a naming distinction between Bech32 i",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596341682,596341682,src/bech32.h
sipa,2021-03-17 20:10:00,"> there is a new encoding called ""Bech32m"" that is also a Bech32 string.\n\nThat's wrong. We should fix places in the code where Bech32m is referred to as Bech32. I know of one, addresstype/OutputType::BECH32, which I'm intentionally ignoring in this to minimize code changes (see earlier discussion), but should be fixed still.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596346647,596346647,src/bech32.h
ryanofsky,2021-03-17 20:45:45,"re: https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596346647\n\nThe name ""bech32m"" does maybe seem unfortunate. It might have been nice to chose a completely different name (""fatfinger32, now catching more stupid typos!"") since from a user perspective you can't use a bech32 address when you need a bech32m address, or vice versa. It's just behind the scenes that they share an extremely",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596369573,596369573,src/bech32.h
sipa,2021-03-17 21:17:03,Already fixed.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596388812,596388812,doc/release-notes-20861.md
sipa,2021-03-17 21:17:36,You are hereby promoted to Official Namer Of Stuff.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596389178,596389178,src/bech32.h
ryanofsky,2021-03-17 22:46:43,"Nice, so much easier than my other jobs!",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596433779,596433779,src/bech32.h
fjahr,2021-03-17 23:57:18,"> That's wrong. We should fix places in the code where Bech32m is referred to as Bech32.\n\nOk, re-reading the module now I think this is mostly clear and I was probably bringing in my own preconceived ideas or looking at older code like the comment 2 lines above that was actually removed. I nit-picked through the module and here a few suggestions where this could be clarified further: https://g",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r596460892,596460892,src/bech32.h
MarcoFalke,2021-03-19 19:13:39,"nit: Any reason to remove the branch that checks bech32 for larger input sizes? I know this isn't relevant for bitcoin addresses, but there are other applications that use bech32 for encoding and checking it here doesn't cost us anything, no?",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r597918726,597918726,src/test/fuzz/bech32.cpp
MarcoFalke,2021-03-19 19:14:47,"nit: obviously unrelated to your changes, but the `B` should be a `G`. (blame me)",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r597919281,597919281,test/functional/wallet_labels.py
MarcoFalke,2021-03-19 19:15:46,nit: Could add a benchmark for bech32m?,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r597919847,597919847,src/bench/bech32.cpp
sipa,2021-03-19 19:21:22,Bech32 and Bech32m do not permit encoded strings over 90 characters (the checksum properties break down past that point). BOLT11 uses a relaxed version of the spec that drops this requirement.,https://github.com/bitcoin/bitcoin/pull/20861#discussion_r597922938,597922938,src/test/fuzz/bech32.cpp
sipa,2021-03-19 19:21:42,"Yeah, could do. The performance should be exactly identical to Bech32 though.",https://github.com/bitcoin/bitcoin/pull/20861#discussion_r597923117,597923117,src/bench/bech32.cpp
