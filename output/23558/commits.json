[
  {
    "sha": "1e86ff794108d6ef033ceba918b45c5e78c95c62",
    "node_id": "C_kwDOABII59oAKDFlODZmZjc5NDEwOGQ2ZWYwMzNjZWJhOTE4YjQ1YzVlNzhjOTVjNjI",
    "commit": {
      "author": {
        "name": "Darius Parvin",
        "email": "darius@berkeley.edu",
        "date": "2021-11-19T19:05:23Z"
      },
      "committer": {
        "name": "Darius Parvin",
        "email": "darius@berkeley.edu",
        "date": "2021-11-20T08:57:35Z"
      },
      "message": "test: run rpc-generateblock.py even with wallet disabled",
      "tree": {
        "sha": "567ee7c50f0e7c913284416537e1950575b45537",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/567ee7c50f0e7c913284416537e1950575b45537"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e86ff794108d6ef033ceba918b45c5e78c95c62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e86ff794108d6ef033ceba918b45c5e78c95c62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e86ff794108d6ef033ceba918b45c5e78c95c62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e86ff794108d6ef033ceba918b45c5e78c95c62/comments",
    "author": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DariusParvin",
      "id": 41220998,
      "node_id": "MDQ6VXNlcjQxMjIwOTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/41220998?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DariusParvin",
      "html_url": "https://github.com/DariusParvin",
      "followers_url": "https://api.github.com/users/DariusParvin/followers",
      "following_url": "https://api.github.com/users/DariusParvin/following{/other_user}",
      "gists_url": "https://api.github.com/users/DariusParvin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DariusParvin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DariusParvin/subscriptions",
      "organizations_url": "https://api.github.com/users/DariusParvin/orgs",
      "repos_url": "https://api.github.com/users/DariusParvin/repos",
      "events_url": "https://api.github.com/users/DariusParvin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DariusParvin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f63bf05e73ea96e5c2c72cc455d05ad382883c27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f63bf05e73ea96e5c2c72cc455d05ad382883c27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f63bf05e73ea96e5c2c72cc455d05ad382883c27"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 14,
      "deletions": 20
    },
    "files": [
      {
        "sha": "151004430d81d27708f8c095e63ee5a0a885fb9d",
        "filename": "test/functional/rpc_generateblock.py",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e86ff794108d6ef033ceba918b45c5e78c95c62/test/functional/rpc_generateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e86ff794108d6ef033ceba918b45c5e78c95c62/test/functional/rpc_generateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_generateblock.py?ref=1e86ff794108d6ef033ceba918b45c5e78c95c62",
        "patch": "@@ -6,6 +6,7 @@\n '''\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet import MiniWallet\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n@@ -16,14 +17,13 @@ class GenerateBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n \n-    def skip_test_if_missing_module(self):\n-        self.skip_if_no_wallet()\n-\n     def run_test(self):\n         node = self.nodes[0]\n+        miniwallet = MiniWallet(node)\n+        miniwallet.rescan_utxos()\n \n         self.log.info('Generate an empty block to address')\n-        address = node.getnewaddress()\n+        address = miniwallet.get_address()\n         hash = self.generateblock(node, output=address, transactions=[])['hash']\n         block = node.getblock(blockhash=hash, verbose=2)\n         assert_equal(len(block['tx']), 1)\n@@ -51,37 +51,31 @@ def run_test(self):\n         assert_equal(len(block['tx']), 1)\n         assert_equal(block['tx'][0]['vout'][0]['scriptPubKey']['address'], combo_address)\n \n-        # Generate 110 blocks to spend\n-        self.generatetoaddress(node, 110, address)\n-\n         # Generate some extra mempool transactions to verify they don't get mined\n         for _ in range(10):\n-            node.sendtoaddress(address, 0.001)\n+            miniwallet.send_self_transfer(from_node=node)\n \n         self.log.info('Generate block with txid')\n-        txid = node.sendtoaddress(address, 1)\n+        txid = miniwallet.send_self_transfer(from_node=node)['txid']\n         hash = self.generateblock(node, address, [txid])['hash']\n         block = node.getblock(hash, 1)\n         assert_equal(len(block['tx']), 2)\n         assert_equal(block['tx'][1], txid)\n \n         self.log.info('Generate block with raw tx')\n-        utxos = node.listunspent(addresses=[address])\n-        raw = node.createrawtransaction([{'txid':utxos[0]['txid'], 'vout':utxos[0]['vout']}],[{address:1}])\n-        signed_raw = node.signrawtransactionwithwallet(raw)['hex']\n-        hash = self.generateblock(node, address, [signed_raw])['hash']\n+        rawtx = miniwallet.create_self_transfer(from_node=node)['hex']\n+        hash = self.generateblock(node, address, [rawtx])['hash']\n+\n         block = node.getblock(hash, 1)\n         assert_equal(len(block['tx']), 2)\n         txid = block['tx'][1]\n-        assert_equal(node.gettransaction(txid)['hex'], signed_raw)\n+        assert_equal(node.getrawtransaction(txid=txid, verbose=False, blockhash=hash), rawtx)\n \n         self.log.info('Fail to generate block with out of order txs')\n-        raw1 = node.createrawtransaction([{'txid':txid, 'vout':0}],[{address:0.9999}])\n-        signed_raw1 = node.signrawtransactionwithwallet(raw1)['hex']\n-        txid1 = node.sendrawtransaction(signed_raw1)\n-        raw2 = node.createrawtransaction([{'txid':txid1, 'vout':0}],[{address:0.999}])\n-        signed_raw2 = node.signrawtransactionwithwallet(raw2)['hex']\n-        assert_raises_rpc_error(-25, 'TestBlockValidity failed: bad-txns-inputs-missingorspent', self.generateblock, node, address, [signed_raw2, txid1])\n+        txid1 = miniwallet.send_self_transfer(from_node=node)['txid']\n+        utxo1 = miniwallet.get_utxo(txid=txid1)\n+        rawtx2 = miniwallet.create_self_transfer(from_node=node, utxo_to_spend=utxo1)['hex']\n+        assert_raises_rpc_error(-25, 'TestBlockValidity failed: bad-txns-inputs-missingorspent', self.generateblock, node, address, [rawtx2, txid1])\n \n         self.log.info('Fail to generate block with txid not in mempool')\n         missing_txid = '0000000000000000000000000000000000000000000000000000000000000000'"
      }
    ]
  }
]