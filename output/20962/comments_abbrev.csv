DrahtBot,2021-01-24 23:59:36,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23441](https://github.com/bitcoin/bitcoin/pull/23441) (fuzz: Differential fuzzing for ChaCha20Forward4064-Poly1305@bitco",https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-766463849,766463849,
jonasschnelli,2021-01-29 08:47:43,Rebased,https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-769666976,769666976,
PastaPastaPasta,2021-05-23 17:36:26,@sipa @jonasschnelli Is there a reason why this PR has stalled?,https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-846598517,846598517,
dhruv,2021-08-23 20:39:25,I will be taking on this PR. Rebased with master. Addressed my own comments. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-904108753,904108753,
dhruv,2021-09-12 21:48:47,Comments from @stratospher addressed. Ready for further review.,https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-917716402,917716402,
dhruv,2021-10-10 04:52:13,Addressed https://github.com/bitcoin/bitcoin/pull/23233#discussion_r725442331 - ready for further review,https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-939406631,939406631,
dhruv,2021-10-22 18:15:22,"Thank you for the great diagrams, @stratospher ! They'll come in handy at a future review club meeting and in docs.\n\nReview comments addressed. Rebased. Ready for further review.",https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-949861062,949861062,
dhruv,2021-11-04 19:35:15,Addressed comments. Rebased against master to get the changes from #22735 which are needed to bring them into #23233 (downstream of this PR branch). Ready for further review.,https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-961356337,961356337,
dhruv,2021-06-25 20:32:30,Should this be `K_2`?,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659021347,659021347,src/crypto/chacha_poly_aead.h
dhruv,2021-06-25 22:29:19,"(nit): ""AEAD state changes (can't be called multiple times)"" -> ""AAD keystream will advance. As a result, DecryptLength() cannot be called multiple times to get the same result. The caller must cache the result for re-use.""",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659066917,659066917,src/crypto/chacha_poly_aead.h
dhruv,2021-06-25 22:49:13,"nit: `[[nodiscard]]` ?\n\nAlso, can we add to the comments: ""Returns true if encipher succeeds. Upon failure, the data at `dest` should not be used""",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659072624,659072624,src/crypto/chacha_poly_aead.h
dhruv,2021-06-25 22:49:19,Could this function signature be `[[nodiscard]] uint32_t DecryptLength(const uint8_t* ciphertext)` ? I'm curious why we return value using the pointer argument ?,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659072639,659072639,src/crypto/chacha_poly_aead.h
dhruv,2021-06-26 00:07:58,"Would it make sense for this to be done in a constructor since this class implements re-keying internally and ideally, the user should not call this function more than once on an instance?",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659089284,659089284,src/crypto/chacha_poly_aead.h
dhruv,2021-06-26 05:40:07,"To make sure I am understanding this correctly (did try it in godbolt): \n\n`ReadLE32(&m_keystream[m_keystream_pos])` will interpret 4 bytes starting at `m_keystream_pos` as a little endian encoded `uint32_t`. This means the LSB of the `uint32_t` will be the byte at `m_keystream[m_keystream_pos]`. The XOR with unsigned char will only use this LSB. Perhaps this was done for batching but not neede",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659123550,659123550,src/crypto/chacha_poly_aead.cpp
dhruv,2021-06-26 05:44:24,Could we leave a comment here that `SetKey()` also sets the counter and IV to zero?,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659123909,659123909,src/crypto/chacha_poly_aead.cpp
dhruv,2021-06-26 05:51:55,"Would it be useful to completely hide the details of the encrypted length from the user of this class? \n\nThat way, for encryption:\n`src=plaintext; dest=encrypted length + ciphertext + MAC`\n\nfor decryption:\n`src=encrypted length + ciphertext + MAC; dest=plaintext`\n\nThis would:\n- Eliminate the awkwardness around the user of this class accidentally calling `DecryptLength` multiple t",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659124563,659124563,src/crypto/chacha_poly_aead.cpp
dhruv,2021-06-26 06:01:59,"should this be ""the length has already been decrypted""?",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659125693,659125693,src/crypto/chacha_poly_aead.cpp
dhruv,2021-06-26 15:22:14,"(nit): ""IV of 0 and a block counter of 0 and a sequence number 0 as IV"" -> ""sequence number 0 as IV and a block counter of 0""",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659179980,659179980,src/crypto/chacha_poly_aead.h
dhruv,2021-06-26 15:27:30,"In #18242, I see that the bytes are accessible as a `Span` and `Span::size()` seems available. Would it be useful to say something like: ""If the decrypted length does not match the payload length, the connection MUST be immediately terminated?"" \n\nAt first I thought that is implicitly delegated to the MAC, but we don't seem to confirm that the length is correct when encrypting either.",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659180419,659180419,src/crypto/chacha_poly_aead.h
dhruv,2021-06-26 15:30:22,"(nit): ""Finally, calculate a MAC tag and append it."" -> ""Finally, calculate a MAC tag(using poly1305 key from stream keyed with K_1) and append it.""",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659180737,659180737,src/crypto/chacha_poly_aead.h
dhruv,2021-06-26 15:32:54,"should ""(with K_2, the packet sequence number as nonce and a starting block counter of 1)"" now be just ""(using stream keyed with K_2)""? IIUC, the block counter could be anything in `[0, 7]` (since 8 * 512 = 4096), right?",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r659181005,659181005,src/crypto/chacha_poly_aead.h
dhruv,2021-06-28 18:01:16,"This line implies that the decrypted length is len(AAD) + len(payload). I interpreted, [this](https://gist.github.com/jonasschnelli/c530ea8421b8d0e80c51486325587c52#v2-messages-structure) to mean that the decrypted length is the length of the ciphertext of the payload alone.\n\nIf this is intentional, can we make it clearer in the BIP? IIUC, typically, in other protocols, the length in the pream",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r660004965,660004965,src/test/crypto_tests.cpp
dhruv,2021-08-23 19:32:06,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694251569,694251569,src/crypto/chacha_poly_aead.cpp
dhruv,2021-08-23 19:33:59,"> Or perhaps I am missing a reason the user of the class might need to know the decrypted length.\n\nI was missing the reason: Tried to do this and realized that the interface for `TransportDeserializer` actually requires the client of this class to be aware of the length because the bytes come in as a stream. ",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694252767,694252767,src/crypto/chacha_poly_aead.cpp
dhruv,2021-08-23 19:37:20,"Thinking through this more, I realized that:\n- Sender errors in encrypted length cannot be corrected since the bytes for multiple p2p messages are in a single TCP stream. Such sender errors are protocol errors.\n- MITM errors/attacks will be caught by the MAC check.\n",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255045,694255045,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:38:14,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255584,694255584,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:38:37,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255829,694255829,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:38:45,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255914,694255914,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:38:52,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694255961,694255961,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:39:27,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256303,694256303,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:39:44,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256461,694256461,src/crypto/chacha_poly_aead.cpp
dhruv,2021-08-23 19:40:06,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256688,694256688,src/crypto/chacha_poly_aead.cpp
dhruv,2021-08-23 19:40:21,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694256838,694256838,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:40:52,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694257137,694257137,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:41:18,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694257391,694257391,src/crypto/chacha_poly_aead.h
dhruv,2021-08-23 19:42:54,"The BIP, the unit test and the bench test have been updated to be consistently clear that the encrypted length is `len(ciphertext_payload)` and not `len(ciphertext_payload + ciphertext_aad)`",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r694258297,694258297,src/test/crypto_tests.cpp
stratospher,2021-08-25 18:23:49,`AAD_PACKAGES_PER_ROUND` is defined but not used anywhere. Couldn't we remove it?,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696008360,696008360,src/crypto/chacha_poly_aead.h
stratospher,2021-08-25 18:33:58,"Since we're already initialising `m_seqnr` with 0 in the class definition of `ChaCha20Forward4064`, https://github.com/bitcoin/bitcoin/blob/424e0100fbea0ac8106b25a9b23698f2c2cd7a4f/src/crypto/chacha_poly_aead.h#L107  Couldn't we remove this line from the constructor?",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696015556,696015556,src/crypto/chacha_poly_aead.cpp
stratospher,2021-08-25 18:35:28,"Since we're already initialising `m_keystream_pos` with 0 in the class definition of `ChaCha20Forward4064`, https://github.com/bitcoin/bitcoin/blob/424e0100fbea0ac8106b25a9b23698f2c2cd7a4f/src/crypto/chacha_poly_aead.h#L108 Couldn't we remove this line from the constructor?",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696016509,696016509,src/crypto/chacha_poly_aead.cpp
stratospher,2021-08-25 18:44:41,We are checking whether the key length is 32 on this line https://github.com/bitcoin/bitcoin/blob/424e0100fbea0ac8106b25a9b23698f2c2cd7a4f/src/crypto/chacha_poly_aead.cpp#L33 when the constructors of `m_chacha_header` and `m_chacha_main` get called. So couldn't we remove these 2 lines?,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r696022694,696022694,src/crypto/chacha_poly_aead.cpp
dhruv,2021-09-12 21:47:09,Good catch. Fixed.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917217,706917217,src/crypto/chacha_poly_aead.h
dhruv,2021-09-12 21:47:15,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917227,706917227,src/crypto/chacha_poly_aead.cpp
dhruv,2021-09-12 21:47:30,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917252,706917252,src/crypto/chacha_poly_aead.cpp
dhruv,2021-09-12 21:48:21,"I find these asserts clarifying and afaict, C++ asserts are optimized away in release builds so it's not slowing anything down. Leaving these in here for now.",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r706917333,706917333,src/crypto/chacha_poly_aead.cpp
dhruv,2021-09-17 00:27:34,Update: Turns out this was mistaken. assert() is not optimized away in optimized Bitcoin Core builds.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r710606026,710606026,src/crypto/chacha_poly_aead.cpp
stratospher,2021-10-15 14:11:57, `#include <cmath>` isn't being used.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729856909,729856909,src/crypto/chacha_poly_aead.h
stratospher,2021-10-15 14:14:46,a typo for semantics? :),https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729859127,729859127,src/crypto/chacha_poly_aead.h
stratospher,2021-10-15 14:25:50,"These imports can be removed since they aren't used:\n\n- `#include <string.h>`\n- `#include <cstdio>`\n- `#include <limits>`",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729868620,729868620,src/crypto/chacha_poly_aead.cpp
stratospher,2021-10-15 15:17:00,"These header files aren't used too and can be removed:\n\n- [`#include <cassert>`](https://github.com/bitcoin/bitcoin/blob/89b2499014fdf6b097e53119ae44e8376d957aef/src/test/fuzz/crypto_chacha20_poly1305_aead.cpp#L11)\n- [`#include <limits>`](https://github.com/bitcoin/bitcoin/blob/89b2499014fdf6b097e53119ae44e8376d957aef/src/test/fuzz/crypto_chacha20_poly1305_aead.cpp#L13)\n\nEDIT: I'm a bit ",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729912610,729912610,src/test/fuzz/crypto_chacha20_poly1305_aead.cpp
stratospher,2021-10-15 15:18:10,`#include <limits>` can be removed since it's [usage](https://github.com/bitcoin/bitcoin/blob/281cf995547f7683a9e9186bc6384a9fb6035d10/src/bench/chacha_poly_aead.cpp#L53) in the file has been removed.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729913514,729913514,src/bench/chacha_poly_aead.cpp
stratospher,2021-10-15 15:22:01,[This comment](https://github.com/bitcoin/bitcoin/pull/20962#issuecomment-939406631) suggestion can be applied here too.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r729916359,729916359,src/bench/chacha_poly_aead.cpp
dhruv,2021-10-22 18:10:52,Done,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734750164,734750164,src/crypto/chacha_poly_aead.h
dhruv,2021-10-22 18:11:00,:) done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734750236,734750236,src/crypto/chacha_poly_aead.h
dhruv,2021-10-22 18:12:54,"Need `string.h` for `size_t`: https://en.cppreference.com/w/c/types/size_t\nAdded `cstring` for `memset`: https://en.cppreference.com/w/cpp/string/byte/memset\n\nRemoved `cstdio` and `limits`",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734751354,734751354,src/crypto/chacha_poly_aead.cpp
dhruv,2021-10-22 18:14:00,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752019,734752019,src/test/fuzz/crypto_chacha20_poly1305_aead.cpp
dhruv,2021-10-22 18:14:06,Done.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752108,734752108,src/bench/chacha_poly_aead.cpp
dhruv,2021-10-22 18:14:33,"Ah, I was looking for another place this was useful and didn't remember correctly. Thanks, @stratospher !",https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734752398,734752398,src/bench/chacha_poly_aead.cpp
0xB10C,2021-10-23 07:31:27,indention seem to be off-by-one for the remainder of this comment and a `*` is missing in line 37,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r734937517,734937517,src/crypto/chacha_poly_aead.h
dhruv,2021-11-04 19:34:35,thanks for the catch. fixed.,https://github.com/bitcoin/bitcoin/pull/20962#discussion_r743145219,743145219,src/crypto/chacha_poly_aead.h
