[
  {
    "sha": "295f49569a69936899a56da07031ab7517951cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTVmNDk1NjlhNjk5MzY4OTlhNTZkYTA3MDMxYWI3NTE3OTUxY2Jl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-02T10:04:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-02T10:11:32Z"
      },
      "message": "Change CNode::askFor to a deque\n\nAskFor() guarantees that entries will always be added with a\nmonotonically increasing timestamp. This means that there is no need\nto use a map as event queue. Also limit the maximum size of the structure.",
      "tree": {
        "sha": "21b5f910a943794a3b96bdda93e8faa9f9a6cf42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21b5f910a943794a3b96bdda93e8faa9f9a6cf42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/295f49569a69936899a56da07031ab7517951cbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295f49569a69936899a56da07031ab7517951cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/295f49569a69936899a56da07031ab7517951cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/295f49569a69936899a56da07031ab7517951cbe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ce927cf107a3c876d9ad4663e86cccb5adbd77e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ce927cf107a3c876d9ad4663e86cccb5adbd77e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ce927cf107a3c876d9ad4663e86cccb5adbd77e"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 14,
      "deletions": 9
    },
    "files": [
      {
        "sha": "23e884a24635310186565a6421851aac3e5d3fe7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295f49569a69936899a56da07031ab7517951cbe/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295f49569a69936899a56da07031ab7517951cbe/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=295f49569a69936899a56da07031ab7517951cbe",
        "patch": "@@ -4418,9 +4418,9 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         //\n         // Message: getdata (non-blocks)\n         //\n-        while (!pto->fDisconnect && !pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n+        while (!pto->fDisconnect && !pto->toAskFor.empty() && (*pto->toAskFor.begin()).first <= nNow)\n         {\n-            const CInv& inv = (*pto->mapAskFor.begin()).second;\n+            const CInv& inv = (*pto->toAskFor.begin()).second;\n             if (!AlreadyHave(inv))\n             {\n                 if (fDebug)\n@@ -4432,7 +4432,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n                     vGetData.clear();\n                 }\n             }\n-            pto->mapAskFor.erase(pto->mapAskFor.begin());\n+            pto->toAskFor.erase(pto->toAskFor.begin());\n         }\n         if (!vGetData.empty())\n             pto->PushMessage(\"getdata\", vGetData);"
      },
      {
        "sha": "98f55f7068dcb274c0fc09949d7eff3db4f17b00",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295f49569a69936899a56da07031ab7517951cbe/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295f49569a69936899a56da07031ab7517951cbe/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=295f49569a69936899a56da07031ab7517951cbe",
        "patch": "@@ -2109,17 +2109,16 @@ CNode::~CNode()\n \n void CNode::AskFor(const CInv& inv)\n {\n-    // We're using mapAskFor as a priority queue,\n-    // the key is the earliest time the request can be sent\n+    if (toAskFor.size() > ASKFOR_MAX_SZ)\n+        return;\n     int64_t nRequestTime;\n     limitedmap<CInv, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv);\n     if (it != mapAlreadyAskedFor.end())\n         nRequestTime = it->second;\n     else\n         nRequestTime = 0;\n-    LogPrint(\"net\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), id);\n \n-    // Make sure not to reuse time indexes to keep things in the same order\n+    // Make sure that request timestamps are in monotonically increasing order\n     int64_t nNow = GetTimeMicros() - 1000000;\n     static int64_t nLastTime;\n     ++nLastTime;\n@@ -2128,11 +2127,15 @@ void CNode::AskFor(const CInv& inv)\n \n     // Each retry is 2 minutes after the last\n     nRequestTime = std::max(nRequestTime + 2 * 60 * 1000000, nNow);\n+    LogPrint(\"net\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str(), id);\n     if (it != mapAlreadyAskedFor.end())\n         mapAlreadyAskedFor.update(it, nRequestTime);\n     else\n         mapAlreadyAskedFor.insert(std::make_pair(inv, nRequestTime));\n-    mapAskFor.insert(std::make_pair(nRequestTime, inv));\n+    // We're using toAskFor as an event queue,\n+    // .first is the earliest time the request can be sent\n+    // .second is the inventory item to request\n+    toAskFor.push_back(std::make_pair(nRequestTime, inv));\n }\n \n void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSend)"
      },
      {
        "sha": "42c2fcaa1fbfe4c73b74f15a60de7dee09f83da1",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/295f49569a69936899a56da07031ab7517951cbe/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/295f49569a69936899a56da07031ab7517951cbe/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=295f49569a69936899a56da07031ab7517951cbe",
        "patch": "@@ -51,6 +51,8 @@ static const bool DEFAULT_UPNP = USE_UPNP;\n #else\n static const bool DEFAULT_UPNP = false;\n #endif\n+/** The maximum number of entries in mapAskFor */\n+static const size_t ASKFOR_MAX_SZ = 2*MAX_INV_SZ;\n \n unsigned int ReceiveFloodSize();\n unsigned int SendBufferSize();\n@@ -289,7 +291,7 @@ class CNode\n     mruset<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n-    std::multimap<int64_t, CInv> mapAskFor;\n+    std::deque<std::pair<int64_t, CInv> > toAskFor;\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected."
      }
    ]
  }
]