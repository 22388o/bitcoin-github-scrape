[
  {
    "sha": "c9849da1485458824851e56995b5470288d0372a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTg0OWRhMTQ4NTQ1ODgyNDg1MWU1Njk5NWI1NDcwMjg4ZDAzNzJh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-02-11T00:09:33Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-04-22T22:05:38Z"
      },
      "message": "[consensus] Don't add spent coins to the cache\n\nWhen fetching a coin from a parent cache, don't add it to the child\ncache if it's already spent, since there's no benefit to adding it.\n\nThis adds some invariant properties to the coins cache:\n- a spent coin cannot be FRESH\n- a spent coin must be DIRTY",
      "tree": {
        "sha": "232e02c7ba703709f80535b85d40c005120a6154",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/232e02c7ba703709f80535b85d40c005120a6154"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9849da1485458824851e56995b5470288d0372a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9849da1485458824851e56995b5470288d0372a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9849da1485458824851e56995b5470288d0372a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9849da1485458824851e56995b5470288d0372a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47b94a337e1aad0c347fdfecba999b963ab51006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47b94a337e1aad0c347fdfecba999b963ab51006",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47b94a337e1aad0c347fdfecba999b963ab51006"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 21,
      "deletions": 22
    },
    "files": [
      {
        "sha": "b6c717784d8932499a9a70a1ee99c45fe13d804b",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9849da1485458824851e56995b5470288d0372a/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9849da1485458824851e56995b5470288d0372a/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=c9849da1485458824851e56995b5470288d0372a",
        "patch": "@@ -44,14 +44,12 @@ CCoinsMap::iterator CCoinsViewCache::FetchCoin(const COutPoint &outpoint) const\n     if (it != cacheCoins.end())\n         return it;\n     Coin tmp;\n-    if (!base->GetCoin(outpoint, tmp))\n+    if (!base->GetCoin(outpoint, tmp) || tmp.IsSpent()) {\n+        // If we find a spent coin in the parent cache, no\n+        // need to fetch it into this cache.\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(std::move(tmp))).first;\n-    if (ret->second.coin.IsSpent()) {\n-        // The parent only has an empty entry for this outpoint; we can consider our\n-        // version as fresh.\n-        ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n+    CCoinsMap::iterator ret = cacheCoins.emplace(std::piecewise_construct, std::forward_as_tuple(outpoint), std::forward_as_tuple(std::move(tmp))).first;\n     cachedCoinsUsage += ret->second.coin.DynamicMemoryUsage();\n     return ret;\n }\n@@ -166,20 +164,22 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n         CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n         if (itUs == cacheCoins.end()) {\n             // The parent cache does not have an entry, while the child cache does.\n-            // We can ignore it if it's both spent and FRESH in the child\n-            if (!(it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent())) {\n-                // Create the coin in the parent cache, move the data up\n-                // and mark it as dirty.\n-                CCoinsCacheEntry& entry = cacheCoins[it->first];\n-                entry.coin = std::move(it->second.coin);\n-                cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n-                entry.flags = CCoinsCacheEntry::DIRTY;\n-                // We can mark it FRESH in the parent if it was FRESH in the child\n-                // Otherwise it might have just been flushed from the parent's cache\n-                // and already exist in the grandparent\n-                if (it->second.flags & CCoinsCacheEntry::FRESH) {\n-                    entry.flags |= CCoinsCacheEntry::FRESH;\n-                }\n+            if (it->second.flags & CCoinsCacheEntry::FRESH && it->second.coin.IsSpent()) {\n+                // A coin shouldn't be marked FRESH and spent (when a FRESH coin is spent,\n+                // it should be removed from the cache).\n+                throw std::logic_error(\"A FRESH coin was not removed when it was spent\");\n+            }\n+            // Create the coin in the parent cache, move the data up\n+            // and mark it as dirty.\n+            CCoinsCacheEntry& entry = cacheCoins[it->first];\n+            entry.coin = std::move(it->second.coin);\n+            cachedCoinsUsage += entry.coin.DynamicMemoryUsage();\n+            entry.flags = CCoinsCacheEntry::DIRTY;\n+            // We can mark it FRESH in the parent if it was FRESH in the child\n+            // Otherwise it might have just been flushed from the parent's cache\n+            // and already exist in the grandparent\n+            if (it->second.flags & CCoinsCacheEntry::FRESH) {\n+                entry.flags |= CCoinsCacheEntry::FRESH;\n             }\n         } else {\n             // Found the entry in the parent cache"
      },
      {
        "sha": "37c9deb10114b030f19187e9f110aaacc298d6ad",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9849da1485458824851e56995b5470288d0372a/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9849da1485458824851e56995b5470288d0372a/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=c9849da1485458824851e56995b5470288d0372a",
        "patch": "@@ -121,7 +121,6 @@ class SaltedOutpointHasher\n  * - unspent, FRESH, DIRTY (e.g. a new coin created in the cache)\n  * - unspent, not FRESH, DIRTY (e.g. a coin changed in the cache during a reorg)\n  * - unspent, not FRESH, not DIRTY (e.g. an unspent coin fetched from the parent cache)\n- * - spent, FRESH, not DIRTY (e.g. a spent coin fetched from the parent cache)\n  * - spent, not FRESH, DIRTY (e.g. a coin is spent and spentness needs to be flushed to the parent)\n  */\n struct CCoinsCacheEntry"
      },
      {
        "sha": "072d7bcba118526ecfe1fd08c0217393de67b0fa",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9849da1485458824851e56995b5470288d0372a/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9849da1485458824851e56995b5470288d0372a/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=c9849da1485458824851e56995b5470288d0372a",
        "patch": "@@ -823,7 +823,7 @@ BOOST_AUTO_TEST_CASE(ccoins_write)\n      */\n     CheckWriteCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   , NO_ENTRY   );\n     CheckWriteCoins(ABSENT, SPENT , SPENT , NO_ENTRY   , DIRTY      , DIRTY      );\n-    CheckWriteCoins(ABSENT, SPENT , ABSENT, NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );\n+    CheckWriteCoins(ABSENT, SPENT , FAIL  , NO_ENTRY   , DIRTY|FRESH, NO_ENTRY   );\n     CheckWriteCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , DIRTY      );\n     CheckWriteCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, DIRTY|FRESH);\n     CheckWriteCoins(SPENT , ABSENT, SPENT , 0          , NO_ENTRY   , 0          );"
      }
    ]
  }
]