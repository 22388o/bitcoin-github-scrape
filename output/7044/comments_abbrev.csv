luke-jr,2015-11-17T19:56:04Z,"Please explain how your vision accounts for multi-wallet use. It seems desirable to have different users access different wallets (or perhaps even limited to specific accounts within a wallet), but your plan above does not seem to account for that possibility.\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157487642,157487642,
gmaxwell,2015-11-17T20:13:00Z,"@luke-jr That seems orthogonal to me. Presumably if we eventually wanted to layer access controls on top of this in the future (though we've shed away from that in the past), this appears completely compatible with doing so... but this is useful without that, just from an credential management perspective.\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157492132,157492132,
dcousens,2015-11-18T00:30:22Z,"~~[weak] concept NACK,  IMHO should be removing RPC complexity, not adding it.~~\n\n~~**edit**: This could trivially be added externally, and would be less than 100-200 lines of code for a simply forwarding/authentication/logging HTTP server.~~\n\n**edit2**: See after @gmaxwell's answer\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157554526,157554526,
gmaxwell,2015-11-18T01:24:44Z,"@dcousens: that could be said of _any_ functionality; thats really no excuse for having an auth setup which will be an immediate failure in any security audit. (And for context, I asked instagibbs to work on something like this after hearing from multiple parties that they switched from bitcoin core to an API provider for a list of reasons that included this; I'd like to get _all_ of these reasons",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157567226,157567226,
dcousens,2015-11-18T02:11:09Z,"To clarify, the above was a weak NACK; and I may have jumped the gun on complexity, as after a code review, only ~20-30 lines was added code, the rest is tests.\n\nIf the alternative configuration method is [eventually] removed, then I see no issue with this and its an easy feature win for those who need it.  Concept ACK, utACK\n\n:+1: \n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157574292,157574292,
jonasschnelli,2015-11-18T07:55:16Z,Concept ACK.\nI think keeping the credentials in `bitcoin.conf` (instead of a `.passwd` like file) is fine for a first step.\n\nNice work! Thanks for directly include a RPC test.\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157637766,157637766,
instagibbs,2015-11-18T12:22:22Z,@paveljanik @jonasschnelli If we ever get around to deprecating the original rpc credential method I think that'd be a good time to move it. \n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157694097,157694097,
dcousens,2015-11-18T13:57:08Z,"Is the salting and hashing really worth it?  An admin could easily listen on the wire for the pre-stretched password.  I feel like this is a false sense of security for what  is meant to be a local (`127.0.0.1`) only interface?\nWhile we're at it,  why not just abandon the password?\n\nThe authentication itself is just [basic HTTP authentication](https://en.wikipedia.org/wiki/Basic_access_authenti",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157719965,157719965,
instagibbs,2015-11-18T14:29:28Z,"@dcousens salting and hashing protects the passwords in the case of an adversary getting a hold of the password file and forging irreversible requests immediately, but not an catching it across the wire, no. I still see value in that, especially for basic audit purposes.  \n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157728547,157728547,
dcousens,2015-11-18T14:41:25Z,"> getting hold of the password file and forging irreversible requests immediately\n\nI'd be willing to bet that the attacker will likely already be able to do this,  be it through watching the wire or simply adding the auth settings to the `bitcoin.conf`.\nIt could be RO, but, in that case, why wouldn't it just be inaccessible.\n\nIf that sole property is desirable, then sure,  add it.  But it isn",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157733129,157733129,
gmaxwell,2015-11-18T14:45:50Z,"@dcousens: consider, a couple weeks ago I learned sipa's rpcpassword while he was showing me something in his bitcoin.conf on his screen.\n\nHashed passwords were the norm for system authentication decades before encrypted transports. :)\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157735276,157735276,
laanwj,2015-11-18T15:24:25Z,Concept ACK\nHashed passwords in the configuration file is definitely an improvement.\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157747110,157747110,
instagibbs,2015-11-18T16:33:34Z,"Axed the key stretching done as per discussion in bitcoin-core-dev IRC, removed openssl dependency. Updated description.\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-157769881,157769881,
instagibbs,2015-11-19T22:58:03Z,Moved the python script to share directory. \n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-158227056,158227056,
jtimon,2015-11-20T14:46:45Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-158420434,158420434,
dcousens,2015-11-20T16:43:18Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-158454789,158454789,
6coind,2015-11-20T18:49:53Z,"Concept ACK +1 , finally !!!! \n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-158491422,158491422,
gmaxwell,2015-11-23T00:16:09Z,@instagibbs mind squashing some of this to get the EVP stuff out of the history?\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-158821599,158821599,
instagibbs,2015-11-23T00:21:37Z,squashed\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-158821868,158821868,
gmaxwell,2015-11-23T18:34:09Z,Hm. Python3 dep on the gen util. How hard would that be to avoid?\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159021898,159021898,
gavinandresen,2015-11-23T19:01:15Z,"New command-line or config-file options should be documented in the --help output (see init.cpp).\n\nHow does this interact with the automatic random cookie authentication in InitRPCAuthentication? I'd expect if I use -rpcauth that would be the only authentication method available...\n\nAnd are changes to bitcoin-cli needed to add this new functionality?\n\nIn general, it makes me nervous to have ",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159028646,159028646,
instagibbs,2015-11-23T19:08:43Z,"@gmaxwell I've added a few more lines to make it work for either.\n\n@gavinandresen To the connecting bitcoin-cli, the interface is just the same. That was intentional. And I'm in agreement about (eventual?) deprecation. It'd be quite easy to do after this. I'll add some documentation to init.cpp, sure.\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159030570,159030570,
gmaxwell,2015-11-23T19:08:54Z,"At least I was thinking that rpcuser/rpcpassword should be deprecated, but wasn't expecting that to happen right this instant.\n\nFor cookie auth, it can be useful to have both-- the reason is that cookie auth can be used seamlessly by local applications.  But the correct way to achieve that is probably a soft opt disable for cookie auth triggered by having static authentication; I guess.\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159030598,159030598,
MarcoFalke,2015-11-23T19:19:20Z,"@instagibbs Mind to add the missing ""-rpcauth"" help message in init.cpp?\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159034495,159034495,
instagibbs,2015-11-23T19:46:42Z,@MarcoFalke done\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159042355,159042355,
dcousens,2015-11-24T01:29:09Z,@gmaxwell we can at least add a warning for `-rpcuser` straight away?\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159122969,159122969,
gmaxwell,2015-11-24T01:50:45Z,"@dcousens seems reasonable to me, also a good way to get uses moving to the cookie approach as applicable.\n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159127352,159127352,
instagibbs,2015-11-24T16:38:53Z,"@gavinandresen gave it some more thought, and I think it's most straight forward to throw a warning for now, then completely replace as a next step. By the time I get some intermediate step to work, it's just easier to replace everything in my opinion. Would that be acceptable? \n",https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-159329863,159329863,
instagibbs,2015-11-27T16:53:51Z,@dcousens: added a warning. Is this along the lines of what you were thinking?\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-160174537,160174537,
gwillen,2015-11-28T00:02:19Z,utACK with one nit in the help text (see above.)\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-160228100,160228100,
gwillen,2015-11-29T04:29:10Z,Seems like all mentioned issues are now fixed. I'd love to see this get merged before the 0.12 freeze.\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-160369695,160369695,
dcousens,2015-11-30T04:11:31Z,@instagibbs warning LGTM :+1: \n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-160511959,160511959,
dcousens,2015-11-30T04:11:47Z,re-ACK\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-160511969,160511969,
btcdrak,2015-11-30T17:10:42Z,Tested ACK\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-160692538,160692538,
gmaxwell,2015-11-30T17:37:59Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/7044#issuecomment-160701265,160701265,
sipa,2015-11-17T20:25:17Z,I think we really want to avoid adding OpenSSL dependencies. But it shouldn't be hard to add PBKDF2 (we already have a builtin HMAC-SHA256 implementation).\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45115365,45115365,src/httprpc.cpp
sipa,2015-11-17T20:31:03Z,"Early return will break the timing resistance property. It's probably better to maintain a boleean return variable, and use `|=` to mix in the result.\n",https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45116060,45116060,src/httprpc.cpp
gmaxwell,2015-11-17T23:44:23Z,We're in that boat for the wallet encryption already.\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45140295,45140295,src/httprpc.cpp
sipa,2015-11-17T23:45:51Z,See #5949.\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45140434,45140434,src/httprpc.cpp
instagibbs,2015-11-18T00:05:40Z,"Could you elaborate on what sort of timing info will leak? (unless you mean the function should try every single name/pass combination, and not call the continue on line 98 as well)\n",https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45141910,45141910,src/httprpc.cpp
sipa,2015-11-18T00:35:23Z,"Eh, it could leak which entry was matched... but I guess that's not considered very sensitive information.\n\nI withdraw this comment :)\n",https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45144429,45144429,src/httprpc.cpp
jonasschnelli,2015-11-18T07:50:51Z,This affects also `--disable-wallet` compilation (`httprpc.cpp`). Agree with @sipa. There is no reason to use openssl lump for that.\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45169162,45169162,src/httprpc.cpp
laanwj,2015-11-18T15:28:17Z,"nit: If this script is supposed to be used by end users, it should be in `share/` (I think) and be installed with `make install`. Contrib is usually for obscure things only useful for developers.\n",https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45213005,45213005,contrib/rpcuser/rpcuser.py
MarcoFalke,2015-11-18T15:41:55Z,And mention in the readme how this should be called. E.g. `./rpcuser testUserName`.\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45215099,45215099,contrib/rpcuser/rpcuser.py
instagibbs,2015-11-18T15:51:02Z,I don't see any related scripts in 'share' nor a readme in the folder.\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r45216542,45216542,contrib/rpcuser/rpcuser.py
gwillen,2015-11-28T00:01:36Z,Add 'This option can be specified multiple times.' for clarity?\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r46073522,46073522,src/init.cpp
sipa,2015-11-28T12:10:06Z,"What happens when a client sends an authentication string that does not contain a ':'? My guess is that find returns npos == -1, which means that both strPass and strUser will be equal to strUserPass in that case. It looks harmless, but certainly unintuitive and perhaps not well-defined?\n",https://github.com/bitcoin/bitcoin/pull/7044#discussion_r46079357,46079357,src/httprpc.cpp
sipa,2015-11-28T12:11:50Z,You can use HexStr() from utilstrencodings.h here.\n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r46079368,46079368,src/httprpc.cpp
instagibbs,2015-11-28T23:13:16Z,Thanks for the tip. \n,https://github.com/bitcoin/bitcoin/pull/7044#discussion_r46085535,46085535,src/httprpc.cpp
