[
  {
    "sha": "d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTJmYmYwMGUzMmZiMDU2NTY1MmM5YTYyY2RhZjJiYzFlMmRkZGYw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2015-11-11T15:49:32Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2015-11-29T13:34:20Z"
      },
      "message": "Added additional config option for multiple RPC users.",
      "tree": {
        "sha": "c1f980618b73660416c80dcf6967aaa9b82806f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c1f980618b73660416c80dcf6967aaa9b82806f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e54ebbf6009716a7abcd4d8d3f7bd910e88decdc"
      }
    ],
    "stats": {
      "total": 232,
      "additions": 231,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fc204b75cecb95a302fa467b3343c732eeca3670",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -78,6 +78,7 @@\n     'mempool_spendcoinbase.py',\n     'mempool_coinbase_spends.py',\n     'httpbasics.py',\n+    'multi_rpc.py',\n     'zapwallettxes.py',\n     'proxy_test.py',\n     'merkle_blocks.py',"
      },
      {
        "sha": "62071d426e3781ba787016f722ee7b6fd99250fd",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -0,0 +1,122 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test mulitple rpc user config option rpcauth\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import base64\n+\n+try:\n+    import http.client as httplib\n+except ImportError:\n+    import httplib\n+try:\n+    import urllib.parse as urlparse\n+except ImportError:\n+    import urlparse\n+\n+class HTTPBasicsTest (BitcoinTestFramework):\n+    def setup_nodes(self):\n+        return start_nodes(4, self.options.tmpdir)\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain(self.options.tmpdir)\n+        #Append rpcauth to bitcoin.conf before initialization\n+        rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n+        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        with open(os.path.join(self.options.tmpdir+\"/node0\", \"bitcoin.conf\"), 'a') as f:\n+            f.write(rpcauth+\"\\n\")\n+            f.write(rpcauth2+\"\\n\")\n+\n+    def run_test(self):\n+\n+        ##################################################\n+        # Check correctness of the rpcauth config option #\n+        ##################################################\n+        url = urlparse.urlparse(self.nodes[0].url)\n+\n+        #Old authpair\n+        authpair = url.username + ':' + url.password\n+\n+        #New authpair generated via contrib/rpcuser tool\n+        rpcauth = \"rpcauth=rt:93648e835a54c573682c2eb19f882535$7681e9c5b74bdd85e78166031d2058e1069b3ed7ed967c93fc63abba06f31144\"\n+        password = \"cA773lm788buwYe4g4WT+05pKyNruVKjQ25x3n0DQcM=\"\n+\n+        #Second authpair with different username\n+        rpcauth2 = \"rpcauth=rt2:f8607b1a88861fac29dfccf9b52ff9f$ff36a0c23c8c62b4846112e50fa888416e94c17bfd4c42f88fd8f55ec6a3137e\"\n+        password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n+        authpairnew = \"rt:\"+password\n+\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+        \n+        #Use new authpair to confirm both work\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+\n+        #Wrong login name with rt's password\n+        authpairnew = \"rtwrong:\"+password\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+        #Wrong password for rt\n+        authpairnew = \"rt:\"+password+\"wrong\"\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+        #Correct for rt2\n+        authpairnew = \"rt2:\"+password2\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, False)\n+        conn.close()\n+\n+        #Wrong password for rt2\n+        authpairnew = \"rt2:\"+password2+\"wrong\"\n+        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+\n+        conn = httplib.HTTPConnection(url.hostname, url.port)\n+        conn.connect()\n+        conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n+        resp = conn.getresponse()\n+        assert_equal(resp.status==401, True)\n+        conn.close()\n+\n+\n+\n+if __name__ == '__main__':\n+    HTTPBasicsTest ().main ()"
      },
      {
        "sha": "7c2c909a421c49cac93cfe80ad17cc72a1f6adc1",
        "filename": "share/rpcuser/README.md",
        "status": "added",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/README.md?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -0,0 +1,11 @@\n+RPC Tools\n+---------------------\n+\n+### [RPCUser](/share/rpcuser) ###\n+\n+Create an RPC user login credential.\n+\n+Usage:\n+\n+./rpcuser.py <username>\n+"
      },
      {
        "sha": "9fd176908b788db7af316051664cf7d1d42f4f3e",
        "filename": "share/rpcuser/rpcuser.py",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/rpcuser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/share/rpcuser/rpcuser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/rpcuser/rpcuser.py?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -0,0 +1,41 @@\n+#!/usr/bin/env python2 \n+# Copyright (c) 2015 The Bitcoin Core developers \n+# Distributed under the MIT software license, see the accompanying \n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import hashlib\n+import sys\n+import os\n+from random import SystemRandom\n+import base64\n+import hmac\n+\n+if len(sys.argv) < 2:\n+    sys.stderr.write('Please include username as an argument.\\n')\n+    sys.exit(0)\n+\n+username = sys.argv[1]\n+\n+#This uses os.urandom() underneath\n+cryptogen = SystemRandom()\n+\n+#Create 16 byte hex salt\n+salt_sequence = [cryptogen.randrange(256) for i in range(16)]\n+hexseq = list(map(hex, salt_sequence))\n+salt = \"\".join([x[2:] for x in hexseq])\n+\n+#Create 32 byte b64 password\n+password = base64.urlsafe_b64encode(os.urandom(32))\n+\n+digestmod = hashlib.sha256\n+\n+if sys.version_info.major >= 3:\n+    password = password.decode('utf-8')\n+    digestmod = 'SHA256'\n+ \n+m = hmac.new(bytearray(salt, 'utf-8'), bytearray(password, 'utf-8'), digestmod)\n+result = m.hexdigest()\n+\n+print(\"String to be appended to bitcoin.conf:\")\n+print(\"rpcauth=\"+username+\":\"+salt+\"$\"+result)\n+print(\"Your password:\\n\"+password)"
      },
      {
        "sha": "2920aa26f75ffe8dc7bec546956cc4371d2ca7de",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 1,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -10,8 +10,12 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"ui_interface.h\"\n+#include \"crypto/hmac_sha256.h\"\n+#include <stdio.h>\n+#include \"utilstrencodings.h\"\n \n #include <boost/algorithm/string.hpp> // boost::trim\n+#include <boost/foreach.hpp> //BOOST_FOREACH\n \n /** Simple one-shot callback timer to be used by the RPC mechanism to e.g.\n  * re-lock the wellet.\n@@ -72,6 +76,50 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n     req->WriteReply(nStatus, strReply);\n }\n \n+//This function checks username and password against -rpcauth\n+//entries from config file.\n+static bool multiUserAuthorized(std::string strUserPass)\n+{    \n+    if (strUserPass.find(\":\") == std::string::npos) {\n+        return false;\n+    }\n+    std::string strUser = strUserPass.substr(0, strUserPass.find(\":\"));\n+    std::string strPass = strUserPass.substr(strUserPass.find(\":\") + 1);\n+\n+    if (mapMultiArgs.count(\"-rpcauth\") > 0) {\n+        //Search for multi-user login/pass \"rpcauth\" from config\n+        BOOST_FOREACH(std::string strRPCAuth, mapMultiArgs[\"-rpcauth\"])\n+        {\n+            std::vector<std::string> vFields;\n+            boost::split(vFields, strRPCAuth, boost::is_any_of(\":$\"));\n+            if (vFields.size() != 3) {\n+                //Incorrect formatting in config file\n+                continue;\n+            }\n+\n+            std::string strName = vFields[0];\n+            if (!TimingResistantEqual(strName, strUser)) {\n+                continue;\n+            }\n+\n+            std::string strSalt = vFields[1];\n+            std::string strHash = vFields[2];\n+\n+            unsigned int KEY_SIZE = 32;\n+            unsigned char *out = new unsigned char[KEY_SIZE]; \n+            \n+            CHMAC_SHA256(reinterpret_cast<const unsigned char*>(strSalt.c_str()), strSalt.size()).Write(reinterpret_cast<const unsigned char*>(strPass.c_str()), strPass.size()).Finalize(out);\n+            std::vector<unsigned char> hexvec(out, out+KEY_SIZE);\n+            std::string strHashFromPass = HexStr(hexvec);\n+\n+            if (TimingResistantEqual(strHashFromPass, strHash)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n+\n static bool RPCAuthorized(const std::string& strAuth)\n {\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n@@ -81,7 +129,12 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    return TimingResistantEqual(strUserPass, strRPCUserColonPass);\n+    \n+    //Check if authorized under single-user field\n+    if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n+        return true;\n+    }\n+    return multiUserAuthorized(strUserPass);\n }\n \n static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n@@ -157,6 +210,7 @@ static bool InitRPCAuthentication()\n             return false;\n         }\n     } else {\n+        LogPrintf(\"Config options rpcuser and rpcpassword will soon be deprecated. Locally-run instances may remove rpcuser to use cookie-based auth, or may be replaced with rpcauth. Please see share/rpcuser for rpcauth auth generation.\");\n         strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     }\n     return true;"
      },
      {
        "sha": "a3be15225ffc4ddbc7f2779c39ba7138713b54c0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d52fbf00e32fb0565652c9a62cdaf2bc1e2dddf0",
        "patch": "@@ -482,6 +482,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n     strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n     strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcauth=<userpw>\", _(\"Username and hashed password for JSON-RPC connections. The field <userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A canonical python script is included in share/rpcuser. This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n     strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n     strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), DEFAULT_HTTP_THREADS));"
      }
    ]
  }
]