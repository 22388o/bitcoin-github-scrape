[
  {
    "sha": "7832efab367bd3fe8755ff07f2045aa55d4cbe7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODMyZWZhYjM2N2JkM2ZlODc1NWZmMDdmMjA0NWFhNTVkNGNiZTdk",
    "commit": {
      "author": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2017-11-20T21:54:12Z"
      },
      "committer": {
        "name": "Evan Klitzke",
        "email": "evan@eklitzke.org",
        "date": "2017-11-20T21:54:12Z"
      },
      "message": "add -logdir option",
      "tree": {
        "sha": "4b36a8a05e3db051f47442b960a5ef7cc9a0e70d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b36a8a05e3db051f47442b960a5ef7cc9a0e70d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7832efab367bd3fe8755ff07f2045aa55d4cbe7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7832efab367bd3fe8755ff07f2045aa55d4cbe7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7832efab367bd3fe8755ff07f2045aa55d4cbe7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7832efab367bd3fe8755ff07f2045aa55d4cbe7d/comments",
    "author": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "eklitzke",
      "id": 2734,
      "node_id": "MDQ6VXNlcjI3MzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2734?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/eklitzke",
      "html_url": "https://github.com/eklitzke",
      "followers_url": "https://api.github.com/users/eklitzke/followers",
      "following_url": "https://api.github.com/users/eklitzke/following{/other_user}",
      "gists_url": "https://api.github.com/users/eklitzke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/eklitzke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/eklitzke/subscriptions",
      "organizations_url": "https://api.github.com/users/eklitzke/orgs",
      "repos_url": "https://api.github.com/users/eklitzke/repos",
      "events_url": "https://api.github.com/users/eklitzke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/eklitzke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "901ba3e3819405306414628306746552b0aa1d28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/901ba3e3819405306414628306746552b0aa1d28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/901ba3e3819405306414628306746552b0aa1d28"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "eed9d1b1b97ac255706ec6f5d74e5af7466146d2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7832efab367bd3fe8755ff07f2045aa55d4cbe7d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7832efab367bd3fe8755ff07f2045aa55d4cbe7d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7832efab367bd3fe8755ff07f2045aa55d4cbe7d",
        "patch": "@@ -342,6 +342,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-feefilter\", strprintf(\"Tell other nodes to filter invs to us by our mempool min fee (default: %u)\", DEFAULT_FEEFILTER));\n     strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file on startup\"));\n+    strUsage += HelpMessageOpt(\"-logdir=<dir>\", _(\"Specify directory for log files (default: datadir)\"));\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));"
      },
      {
        "sha": "e78ea8c206e7d3b1fc86ee5e375a86aba6aed8d8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7832efab367bd3fe8755ff07f2045aa55d4cbe7d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7832efab367bd3fe8755ff07f2045aa55d4cbe7d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7832efab367bd3fe8755ff07f2045aa55d4cbe7d",
        "patch": "@@ -189,14 +189,27 @@ static void DebugPrintInit()\n     vMsgsBeforeOpenLog = new std::list<std::string>;\n }\n \n+/** Get the directory for log files (currently just debug.log) */\n+static fs::path GetLogDir()\n+{\n+  if (gArgs.IsArgSet(\"-logdir\")) {\n+    fs::path logdirPath = fs::system_complete(gArgs.GetArg(\"-logdir\", \"\"));\n+    if (!logdirPath.empty()) {\n+      fs::create_directories(logdirPath);\n+      return logdirPath;\n+    }\n+  }\n+  return GetDataDir();\n+}\n+\n void OpenDebugLog()\n {\n     boost::call_once(&DebugPrintInit, debugPrintInitFlag);\n     boost::mutex::scoped_lock scoped_lock(*mutexDebugLog);\n \n     assert(fileout == nullptr);\n     assert(vMsgsBeforeOpenLog);\n-    fs::path pathDebug = GetDataDir() / \"debug.log\";\n+    fs::path pathDebug = GetLogDir() / \"debug.log\";\n     fileout = fsbridge::fopen(pathDebug, \"a\");\n     if (fileout) {\n         setbuf(fileout, nullptr); // unbuffered"
      }
    ]
  }
]