[
  {
    "sha": "3fb09b9889665a24b34f25e9d1385a05058a28b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmIwOWI5ODg5NjY1YTI0YjM0ZjI1ZTlkMTM4NWEwNTA1OGEyOGI3",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2018-11-12T02:06:36Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2018-11-20T09:28:16Z"
      },
      "message": "Warn unrecognized sections in the config file\n\nIn the config file, sections are specified by square bracket pair \"[]\"$,\nor included in the option name itself which separated by a period\"(.)\".\n\nTypicaly, [testnet] is not a correct section name and specified options\nin that section are ignored but user cannot recognize what is happen.\n\nSo, add some log/stderr-warning messages if unrecognized section names\nare present in the config file after checking section only args.",
      "tree": {
        "sha": "22584858721f4dfbeb637fdc3238858a92d2f9db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22584858721f4dfbeb637fdc3238858a92d2f9db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fb09b9889665a24b34f25e9d1385a05058a28b7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fb09b9889665a24b34f25e9d1385a05058a28b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fb09b9889665a24b34f25e9d1385a05058a28b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fb09b9889665a24b34f25e9d1385a05058a28b7/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b99d153d0713ec62b3bde7adbe78c271b5a36ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b99d153d0713ec62b3bde7adbe78c271b5a36ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b99d153d0713ec62b3bde7adbe78c271b5a36ea"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 56,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d6f04bea14df530b776112d1374c68f5329bb495",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb09b9889665a24b34f25e9d1385a05058a28b7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb09b9889665a24b34f25e9d1385a05058a28b7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3fb09b9889665a24b34f25e9d1385a05058a28b7",
        "patch": "@@ -803,7 +803,15 @@ void InitParameterInteraction()\n     // Warn if network-specific options (-addnode, -connect, etc) are\n     // specified in default section of config file, but not overridden\n     // on the command line or in this network's section of the config file.\n-    gArgs.WarnForSectionOnlyArgs();\n+    std::string network = gArgs.GetChainName();\n+    for (const auto& arg : gArgs.GetUnsuitableSectionOnlyArgs()) {\n+        InitWarning(strprintf(_(\"Config setting for %s only applied on %s network when in [%s] section.\"), arg, network, network));\n+    }\n+\n+    // Warn if unrecognized section name are present in the config file.\n+    for (const auto& section : gArgs.GetUnrecognizedSections()) {\n+        InitWarning(strprintf(_(\"Section [%s] is not recognized.\"), section));\n+    }\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)"
      },
      {
        "sha": "8e201ec590587f1527740cca67642d48236136e4",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 7,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb09b9889665a24b34f25e9d1385a05058a28b7/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb09b9889665a24b34f25e9d1385a05058a28b7/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=3fb09b9889665a24b34f25e9d1385a05058a28b7",
        "patch": "@@ -371,15 +371,17 @@ ArgsManager::ArgsManager() :\n     // nothing to do\n }\n \n-void ArgsManager::WarnForSectionOnlyArgs()\n+const std::set<std::string> ArgsManager::GetUnsuitableSectionOnlyArgs() const\n {\n+    std::set<std::string> unsuitables;\n+\n     LOCK(cs_args);\n \n     // if there's no section selected, don't worry\n-    if (m_network.empty()) return;\n+    if (m_network.empty()) return std::set<std::string> {};\n \n     // if it's okay to use the default section for this network, don't worry\n-    if (m_network == CBaseChainParams::MAIN) return;\n+    if (m_network == CBaseChainParams::MAIN) return std::set<std::string> {};\n \n     for (const auto& arg : m_network_only_args) {\n         std::pair<bool, std::string> found_result;\n@@ -397,8 +399,28 @@ void ArgsManager::WarnForSectionOnlyArgs()\n         if (!found_result.first) continue;\n \n         // otherwise, issue a warning\n-        LogPrintf(\"Warning: Config setting for %s only applied on %s network when in [%s] section.\\n\", arg, m_network, m_network);\n+        unsuitables.insert(arg);\n     }\n+    return unsuitables;\n+}\n+\n+\n+const std::set<std::string> ArgsManager::GetUnrecognizedSections() const\n+{\n+    // Section names to be recognized in the config file.\n+    static const std::set<std::string> available_sections{\n+        CBaseChainParams::REGTEST,\n+        CBaseChainParams::TESTNET,\n+        CBaseChainParams::MAIN\n+    };\n+    std::set<std::string> diff;\n+\n+    LOCK(cs_args);\n+    std::set_difference(\n+        m_config_sections.begin(), m_config_sections.end(),\n+        available_sections.begin(), available_sections.end(),\n+        std::inserter(diff, diff.end()));\n+    return diff;\n }\n \n void ArgsManager::SelectConfigNetwork(const std::string& network)\n@@ -819,7 +841,7 @@ static std::string TrimString(const std::string& str, const std::string& pattern\n     return str.substr(front, end - front + 1);\n }\n \n-static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>> &options)\n+static bool GetConfigOptions(std::istream& stream, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::set<std::string>& sections)\n {\n     std::string str, prefix;\n     std::string::size_type pos;\n@@ -834,7 +856,9 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n         str = TrimString(str, pattern);\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n-                prefix = str.substr(1, str.size() - 2) + '.';\n+                const std::string section = str.substr(1, str.size() - 2);\n+                sections.insert(section);\n+                prefix = section + '.';\n             } else if (*str.begin() == '-') {\n                 error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n                 return false;\n@@ -846,6 +870,9 @@ static bool GetConfigOptions(std::istream& stream, std::string& error, std::vect\n                     return false;\n                 }\n                 options.emplace_back(name, value);\n+                if ((pos = name.rfind('.')) != std::string::npos) {\n+                    sections.insert(name.substr(0, pos));\n+                }\n             } else {\n                 error = strprintf(\"parse error on line %i: %s\", linenr, str);\n                 if (str.size() >= 2 && str.substr(0, 2) == \"no\") {\n@@ -863,7 +890,8 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, std::string& error, boo\n {\n     LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n-    if (!GetConfigOptions(stream, error, options)) {\n+    m_config_sections.clear();\n+    if (!GetConfigOptions(stream, error, options, m_config_sections)) {\n         return false;\n     }\n     for (const std::pair<std::string, std::string>& option : options) {"
      },
      {
        "sha": "66049dfb3a332b06c08d25febccd1f3e88bbfa86",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb09b9889665a24b34f25e9d1385a05058a28b7/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb09b9889665a24b34f25e9d1385a05058a28b7/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=3fb09b9889665a24b34f25e9d1385a05058a28b7",
        "patch": "@@ -149,6 +149,7 @@ class ArgsManager\n     std::string m_network GUARDED_BY(cs_args);\n     std::set<std::string> m_network_only_args GUARDED_BY(cs_args);\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n+    std::set<std::string> m_config_sections GUARDED_BY(cs_args);\n \n     bool ReadConfigStream(std::istream& stream, std::string& error, bool ignore_invalid_keys = false);\n \n@@ -169,7 +170,12 @@ class ArgsManager\n      * on the command line or in a network-specific section in the\n      * config file.\n      */\n-    void WarnForSectionOnlyArgs();\n+    const std::set<std::string> GetUnsuitableSectionOnlyArgs() const;\n+\n+    /**\n+     * Log warnings for unrecognized section names in the config file.\n+     */\n+    const std::set<std::string> GetUnrecognizedSections() const;\n \n     /**\n      * Return a vector of strings of the given argument"
      },
      {
        "sha": "d87eabaa6d6c74800cce21a1f2093a95117a720c",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb09b9889665a24b34f25e9d1385a05058a28b7/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb09b9889665a24b34f25e9d1385a05058a28b7/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=3fb09b9889665a24b34f25e9d1385a05058a28b7",
        "patch": "@@ -33,6 +33,11 @@ def test_config_file_parser(self):\n             conf.write('server=1\\nrpcuser=someuser\\nrpcpassword=some#pass')\n         self.nodes[0].assert_start_raises_init_error(expected_msg='Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n \n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('testnot.datadir=1\\n[testnet]\\n')\n+        self.restart_node(0)\n+        self.nodes[0].stop_node(expected_stderr='Warning: Section [testnet] is not recognized.' + os.linesep + 'Warning: Section [testnot] is not recognized.')\n+\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('')  # clear\n "
      }
    ]
  }
]