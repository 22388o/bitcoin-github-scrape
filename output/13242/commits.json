[
  {
    "sha": "d50d0003a281ccc27113c3af95c1349f1f1c40ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTBkMDAwM2EyODFjY2MyNzExM2MzYWY5NWMxMzQ5ZjFmMWM0MGVh",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-16T00:37:21Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-16T04:58:14Z"
      },
      "message": "uint256: Remove unnecessary crypto/common.h use",
      "tree": {
        "sha": "31feb304a87d8ed35694a0d377de4872f0cb4c07",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31feb304a87d8ed35694a0d377de4872f0cb4c07"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d50d0003a281ccc27113c3af95c1349f1f1c40ea",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr7umYACgkQV692LbM1\nMyJicA//e/U4AE8AX+JyGJgpb8bIf4y5iRqNxAZX6/5iXiuWUsmuhJtR67woXMTv\nRtqyxb6el+FR74HQlksmln0D/+TbwO0rGNOuCvSARKPsSYpguHO5awlBUhuS1l4C\no77zysca/LipBWbPMIf/ZbTnOqWn96VaUTkUrljCzZBQFb86Zoel03y61fV7hYAR\nH/pLXOPls21uWupVcEBY2Lx173t0D8QVz9zv6fuohAANcz05BiEcNeCGvW36eDGF\nDzja5Bkq4eg/Qqh7DGpQIWJUDwmXYUGIBOXOXBRfbLgPKj+K6Kd0svVM2AhbwrzT\nwZAmRjW9bMRzkDRLvSLMImteSRJq5ds8f7QpNx6jbU7W2Rfofl5JVIAPGx7bu37n\n/3gEUZIkQsUqtV0x9NYst/tffVgaXt9mKkFc/+zkCnUl/e2KfHjeA+rNI4S0FmxH\nADXqxfrX35/j2oBv9aIu2NDQCYDh/TD+TduAZGiq2iCbrXVniT1DPi9A/T1o9dEG\nXM4dxfN+p4mP4U8vR14FoAEpI7yy6N1VxCVHXzHFpyeqr7AsdsiMIUtQf8XL1Th7\nS48IJVO/tRCYhN5RSrg54YOxZbq/4xbdmV3zqpm2tJMj+0ku+DPeGaZJTZAw5S2D\nIrUl8pdaXqLWs3jh6sI4uFQa+VO6Jb8KuLYCJM6bcyGkw18dthA=\n=53FT\n-----END PGP SIGNATURE-----",
        "payload": "tree 31feb304a87d8ed35694a0d377de4872f0cb4c07\nparent 13da2899ae42d48547e5cb491ea6aba4882b3306\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526431041 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526446694 +0900\n\nuint256: Remove unnecessary crypto/common.h use\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50d0003a281ccc27113c3af95c1349f1f1c40ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d50d0003a281ccc27113c3af95c1349f1f1c40ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50d0003a281ccc27113c3af95c1349f1f1c40ea/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13da2899ae42d48547e5cb491ea6aba4882b3306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13da2899ae42d48547e5cb491ea6aba4882b3306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13da2899ae42d48547e5cb491ea6aba4882b3306"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "94566940fe45123e01bcdef0a18986557e5ac597",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d50d0003a281ccc27113c3af95c1349f1f1c40ea/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d50d0003a281ccc27113c3af95c1349f1f1c40ea/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=d50d0003a281ccc27113c3af95c1349f1f1c40ea",
        "patch": "@@ -12,7 +12,6 @@\n #include <stdint.h>\n #include <string>\n #include <vector>\n-#include <crypto/common.h>\n \n /** Template base class for fixed-sized opaque blobs. */\n template<unsigned int BITS>\n@@ -131,7 +130,9 @@ class uint256 : public base_blob<256> {\n      */\n     uint64_t GetCheapHash() const\n     {\n-        return ReadLE64(data);\n+        uint64_t r;\n+        memcpy(&r, data, sizeof(r));\n+        return r;\n     }\n };\n "
      }
    ]
  },
  {
    "sha": "656ddecd2dd88fb6996455913ebdc677f77a1ac6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTZkZGVjZDJkZDg4ZmI2OTk2NDU1OTEzZWJkYzY3N2Y3N2ExYWM2",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-16T02:52:41Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-16T04:58:14Z"
      },
      "message": "test: addrman: Track endian based collision points\n\nThe address manager tests currently depend on little endianness because they are written with assumptions about collisions occurring at specific\npoints. This should be revisited, and these tests should potentially be removed as they serve little purpose now.\nFor now, this commit adds support for big endian assumptions and determines the endianness of the system, basing assumptions on that.",
      "tree": {
        "sha": "5082dd324e687ee7b75bb80e1da3b2b90eb586b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5082dd324e687ee7b75bb80e1da3b2b90eb586b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/656ddecd2dd88fb6996455913ebdc677f77a1ac6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlr7umYACgkQV692LbM1\nMyJfTg/+M6JQkL2uBktfNA0JyI8lRsS/MTMOIf7wA+vv9TpfPcF6gS7t79jygc8B\nupnKcvvH9I9Hmwv6De1E66wM0xnSp/WFveCCLBPEju/Vj+8VUHdYrnZb+SvOzO9K\nELgkUltqRcrzNyG9R3dGFRnfDeKxsEpGhOVBM46u5p5A5YT7q6gn56LhOmmkzCZO\nkqRAxyO3wc4xgf1Dp3DgK7AxtfIU1vZZYLWX+9Se2/dq9L0gXMeIFLKAmnPKIWbG\nSB8EcD0Xedvt+WPKRLxTzdeeGQQB7/BCNfYJeJqcWXMdTxUaEdfwGE+ZZIs5p953\nixkxOD8Y+weeNdDcZETJ1Pg6oM7zOQ+3MQgAonEtJU3EQMYpCgGGj739Ltju1qKN\nQ213SiFJAC7J2bCIfKQJ/jI1b9mywg4pzYoHuOsKExplVcvXV6HiNEpdipj56kvC\nxFOrjsPKicZC3jVr5WROCjKwZQYD3T0NsKhqzTjsl4fsoQGsnE7oIUVNZwkQVxQR\nxaVy/wNGW9Ueb5onCMQK85GvugY4463/CLExK8QvA+IlpMy3I1K4p/ie+As6RR19\nEtBGJjXVK1IXvwQFF67cvAf9qD9sSuvmgimdJ96Z8qoXr4Nio2i0bcG6lw3voxuN\nzFb3v4rSbAN+xnkkzKNto9HHn7K5j2NpeALQzjGg9vcLWDarouE=\n=cBfq\n-----END PGP SIGNATURE-----",
        "payload": "tree 5082dd324e687ee7b75bb80e1da3b2b90eb586b0\nparent d50d0003a281ccc27113c3af95c1349f1f1c40ea\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526439161 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526446694 +0900\n\ntest: addrman: Track endian based collision points\n\nThe address manager tests currently depend on little endianness because they are written with assumptions about collisions occurring at specific\npoints. This should be revisited, and these tests should potentially be removed as they serve little purpose now.\nFor now, this commit adds support for big endian assumptions and determines the endianness of the system, basing assumptions on that.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/656ddecd2dd88fb6996455913ebdc677f77a1ac6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/656ddecd2dd88fb6996455913ebdc677f77a1ac6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/656ddecd2dd88fb6996455913ebdc677f77a1ac6/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d50d0003a281ccc27113c3af95c1349f1f1c40ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50d0003a281ccc27113c3af95c1349f1f1c40ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d50d0003a281ccc27113c3af95c1349f1f1c40ea"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 63,
      "deletions": 42
    },
    "files": [
      {
        "sha": "89797a8a60253bc100807f78abe93001c2ca571f",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 42,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/656ddecd2dd88fb6996455913ebdc677f77a1ac6/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/656ddecd2dd88fb6996455913ebdc677f77a1ac6/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=656ddecd2dd88fb6996455913ebdc677f77a1ac6",
        "patch": "@@ -10,6 +10,11 @@\n #include <netbase.h>\n #include <random.h>\n \n+bool littleendian = (CHashWriter(SER_GETHASH, 0) << 1).GetHash().GetCheapHash() == 10162316372170307393ULL;\n+\n+// to test big endian output on a little endian machine, temporarily change\n+// GetCheapHash() in uint256.h to return ReadBE64(data)\n+\n class CAddrManTest : public CAddrMan\n {\n     uint64_t state;\n@@ -222,7 +227,7 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n-    for (int i = 0; i < 20; ++i) {\n+    for (int i = 0; i < 50; ++i) {\n         ports.insert(addrman.Select().GetPort());\n     }\n     BOOST_CHECK_EQUAL(ports.size(), 3U);\n@@ -236,7 +241,12 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n-    for (unsigned int i = 1; i < 18; i++) {\n+    // Collision at:\n+    //  littleendian: 18\n+    //  bigendian:    11\n+    unsigned int first_collision = littleendian ? 18 : 11;\n+    size_t expected_size = first_collision - 1;\n+    for (unsigned int i = 1; i < first_collision; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n         addrman.Add(CAddress(addr, NODE_NONE), source);\n \n@@ -245,13 +255,14 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n     }\n \n     //Test: new table collision!\n-    CService addr1 = ResolveService(\"250.1.1.18\");\n+    CService addr1 = ResolveService(littleendian ? \"250.1.1.18\" : \"250.1.1.11\");\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 17U);\n+    BOOST_CHECK_EQUAL(addrman.size(), expected_size);\n \n     CService addr2 = ResolveService(\"250.1.1.19\");\n     addrman.Add(CAddress(addr2, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 18U);\n+    expected_size++;\n+    BOOST_CHECK_EQUAL(addrman.size(), expected_size);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n@@ -262,23 +273,23 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n-    for (unsigned int i = 1; i < 80; i++) {\n+    // First collision:\n+    //  little endian: 80\n+    //  big endian:    50\n+    unsigned int first_collision = littleendian ? 80 : 50;\n+    unsigned int expected_size = first_collision - 1;\n+    for (unsigned int i = 1; i < first_collision; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n         addrman.Add(CAddress(addr, NODE_NONE), source);\n         addrman.Good(CAddress(addr, NODE_NONE));\n \n-        //Test: No collision in tried table yet.\n         BOOST_CHECK_EQUAL(addrman.size(), i);\n     }\n \n-    //Test: tried table collision!\n-    CService addr1 = ResolveService(\"250.1.1.80\");\n-    addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 79U);\n-\n     CService addr2 = ResolveService(\"250.1.1.81\");\n     addrman.Add(CAddress(addr2, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 80U);\n+    expected_size++;\n+    BOOST_CHECK_EQUAL(addrman.size(), expected_size);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_find)\n@@ -409,9 +420,9 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n \n     size_t percent23 = (addrman.size() * 23) / 100;\n     BOOST_CHECK_EQUAL(vAddr.size(), percent23);\n-    BOOST_CHECK_EQUAL(vAddr.size(), 461U);\n+    BOOST_CHECK_EQUAL(vAddr.size(), littleendian ? 461U : 460U);\n     // (Addrman.size() < number of addresses added) due to address collisions.\n-    BOOST_CHECK_EQUAL(addrman.size(), 2006U);\n+    BOOST_CHECK_EQUAL(addrman.size(), littleendian ? 2006U : 2003U);\n }\n \n \n@@ -431,7 +442,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n \n \n-    BOOST_CHECK_EQUAL(info1.GetTriedBucket(nKey1), 40);\n+    BOOST_CHECK_EQUAL(info1.GetTriedBucket(nKey1), littleendian ? 40 : 215);\n \n     // Test: Make sure key actually randomizes bucket placement. A fail on\n     //  this test could be a security issue.\n@@ -466,7 +477,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     }\n     // Test: IP addresses in the different groups should map to more than\n     //  8 buckets.\n-    BOOST_CHECK_EQUAL(buckets.size(), 160U);\n+    BOOST_CHECK_EQUAL(buckets.size(), littleendian ? 160U : 152U);\n }\n \n BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n@@ -484,8 +495,8 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     uint256 nKey2 = (uint256)(CHashWriter(SER_GETHASH, 0) << 2).GetHash();\n \n     // Test: Make sure the buckets are what we expect\n-    BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1), 786);\n-    BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1, source1), 786);\n+    BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1), littleendian ? 786 : 606);\n+    BOOST_CHECK_EQUAL(info1.GetNewBucket(nKey1, source1), littleendian ? 786 : 606);\n \n     // Test: Make sure key actually randomizes bucket placement. A fail on\n     //  this test could be a security issue.\n@@ -589,15 +600,19 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n         BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n     }\n \n-    // Collision between 23 and 19.\n-    CService addr23 = ResolveService(\"250.1.1.23\");\n-    addrman.Add(CAddress(addr23, NODE_NONE), source);\n-    addrman.Good(addr23);\n+    // Collision between\n+    //  little endian: 23 and 19\n+    //  big endian:    38 and 6\n+    std::string addrcoll_str = littleendian ? \"250.1.1.23\" : \"250.1.1.38\";\n+    std::string evicted_str = littleendian ? \"250.1.1.19:0\" : \"250.1.1.6:0\";\n+    CService addrcoll = ResolveService(addrcoll_str);\n+    addrman.Add(CAddress(addrcoll, NODE_NONE), source);\n+    addrman.Good(addrcoll);\n \n-    BOOST_CHECK(addrman.size() == 23);\n-    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.19:0\");\n+    BOOST_CHECK_EQUAL(addrman.size(), 23U);\n+    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), evicted_str);\n \n-    // 23 should be discarded and 19 not evicted.\n+    // 23/38 should be discarded and 19/6 not evicted.\n     addrman.ResolveCollisions();\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n@@ -612,16 +627,18 @@ BOOST_AUTO_TEST_CASE(addrman_noevict)\n     }\n \n     // Cause a collision.\n-    CService addr33 = ResolveService(\"250.1.1.33\");\n-    addrman.Add(CAddress(addr33, NODE_NONE), source);\n-    addrman.Good(addr33);\n+    std::string addrcoll2_str = littleendian ? \"250.1.1.33\" : \"250.1.1.53\";\n+    std::string evicted2_str = littleendian ? \"250.1.1.27:0\" : \"250.1.1.2:0\";\n+    CService addrcoll2 = ResolveService(addrcoll2_str);\n+    addrman.Add(CAddress(addrcoll2, NODE_NONE), source);\n+    addrman.Good(addrcoll2);\n     BOOST_CHECK(addrman.size() == 33);\n \n-    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.27:0\");\n+    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), evicted2_str);\n \n     // Cause a second collision.\n-    addrman.Add(CAddress(addr23, NODE_NONE), source);\n-    addrman.Good(addr23);\n+    addrman.Add(CAddress(addrcoll, NODE_NONE), source);\n+    addrman.Good(addrcoll);\n     BOOST_CHECK(addrman.size() == 33);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() != \"[::]:0\");\n@@ -653,34 +670,38 @@ BOOST_AUTO_TEST_CASE(addrman_evictionworks)\n         BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n     }\n \n-    // Collision between 23 and 19.\n-    CService addr = ResolveService(\"250.1.1.23\");\n+    // Collision between\n+    //  little endian: 23 and 19\n+    //  big endian:    38 and 6\n+    std::string addrcoll_str = littleendian ? \"250.1.1.23\" : \"250.1.1.38\";\n+    std::string evicted_str = littleendian ? \"250.1.1.19\" : \"250.1.1.6\";\n+    CService addr = ResolveService(addrcoll_str);\n     addrman.Add(CAddress(addr, NODE_NONE), source);\n     addrman.Good(addr);\n \n     BOOST_CHECK(addrman.size() == 23);\n     CAddrInfo info = addrman.SelectTriedCollision();\n-    BOOST_CHECK(info.ToString() == \"250.1.1.19:0\");\n+    BOOST_CHECK_EQUAL(info.ToString(), evicted_str + \":0\");\n \n     // Ensure test of address fails, so that it is evicted.\n     addrman.SimConnFail(info);\n \n-    // Should swap 23 for 19.\n+    // Should swap 23/38 for 19/6.\n     addrman.ResolveCollisions();\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n-    // If 23 was swapped for 19, then this should cause no collisions.\n+    // If 23/38 was swapped for 19/6, then this should cause no collisions.\n     addrman.Add(CAddress(addr, NODE_NONE), source);\n     addrman.Good(addr);\n \n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");\n \n-    // If we insert 19 is should collide with 23.\n-    CService addr19 = ResolveService(\"250.1.1.19\");\n-    addrman.Add(CAddress(addr19, NODE_NONE), source);\n-    addrman.Good(addr19);\n+    // If we insert 19/6 it should collide with 23/38.\n+    CService addr_evicted = ResolveService(evicted_str);\n+    addrman.Add(CAddress(addr_evicted, NODE_NONE), source);\n+    addrman.Good(addr_evicted);\n \n-    BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"250.1.1.23:0\");\n+    BOOST_CHECK_EQUAL(addrman.SelectTriedCollision().ToString(), addrcoll_str + \":0\");\n \n     addrman.ResolveCollisions();\n     BOOST_CHECK(addrman.SelectTriedCollision().ToString() == \"[::]:0\");"
      }
    ]
  }
]