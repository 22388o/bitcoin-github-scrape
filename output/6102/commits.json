[
  {
    "sha": "540629c6fbbfc2aed336f7c7de1b2573d3310fda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDA2MjljNmZiYmZjMmFlZDMzNmY3YzdkZTFiMjU3M2QzMzEwZmRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-03T22:20:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-12T00:56:48Z"
      },
      "message": "Add memusage.h",
      "tree": {
        "sha": "b7c6d177e91674c603fb17fe8a43fa33b23fe90f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7c6d177e91674c603fb17fe8a43fa33b23fe90f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/540629c6fbbfc2aed336f7c7de1b2573d3310fda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540629c6fbbfc2aed336f7c7de1b2573d3310fda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/540629c6fbbfc2aed336f7c7de1b2573d3310fda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540629c6fbbfc2aed336f7c7de1b2573d3310fda/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e0e7f823f87e93cc6b2de9779961dc2a5119472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e0e7f823f87e93cc6b2de9779961dc2a5119472",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e0e7f823f87e93cc6b2de9779961dc2a5119472"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 112,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d85ce0f0810787af4780492f5e90b4034473b1c0",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/540629c6fbbfc2aed336f7c7de1b2573d3310fda/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/540629c6fbbfc2aed336f7c7de1b2573d3310fda/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=540629c6fbbfc2aed336f7c7de1b2573d3310fda",
        "patch": "@@ -100,6 +100,7 @@ BITCOIN_CORE_H = \\\n   leveldbwrapper.h \\\n   limitedmap.h \\\n   main.h \\\n+  memusage.h \\\n   merkleblock.h \\\n   miner.h \\\n   mruset.h \\"
      },
      {
        "sha": "9f7de9e2e165d595b60e0540bd68ce9bc1acc997",
        "filename": "src/memusage.h",
        "status": "added",
        "additions": 111,
        "deletions": 0,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/540629c6fbbfc2aed336f7c7de1b2573d3310fda/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/540629c6fbbfc2aed336f7c7de1b2573d3310fda/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=540629c6fbbfc2aed336f7c7de1b2573d3310fda",
        "patch": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2015 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MEMUSAGE_H\n+#define BITCOIN_MEMUSAGE_H\n+\n+#include <stdlib.h>\n+\n+#include <map>\n+#include <set>\n+#include <vector>\n+\n+#include <boost/unordered_set.hpp>\n+#include <boost/unordered_map.hpp>\n+\n+namespace memusage\n+{\n+\n+/** Compute the total memory used by allocating alloc bytes. */\n+static size_t MallocUsage(size_t alloc);\n+\n+/** Compute the memory used for dynamically allocated but owned data structures.\n+ *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n+ *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n+ *  This is for efficiency reasons, as these functions are intended to be fast. If\n+ *  application data structures require more accurate inner accounting, they should\n+ *  do the recursion themselves, or use more efficient caching + updating on modification.\n+ */\n+template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n+template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n+template<typename X, typename Y> static size_t DynamicUsage(const std::map<X, Y>& m);\n+template<typename X, typename Y> static size_t DynamicUsage(const boost::unordered_set<X, Y>& s);\n+template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n+template<typename X> static size_t DynamicUsage(const X& x);\n+\n+static inline size_t MallocUsage(size_t alloc)\n+{\n+    // Measured on libc6 2.19 on Linux.\n+    if (sizeof(void*) == 8) {\n+        return ((alloc + 31) >> 4) << 4;\n+    } else if (sizeof(void*) == 4) {\n+        return ((alloc + 15) >> 3) << 3;\n+    } else {\n+        assert(0);\n+    }\n+}\n+\n+// STL data structures\n+\n+template<typename X>\n+struct stl_tree_node\n+{\n+private:\n+    int color;\n+    void* parent;\n+    void* left;\n+    void* right;\n+    X x;\n+};\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::vector<X>& v)\n+{\n+    return MallocUsage(v.capacity() * sizeof(X));\n+}\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const std::set<X>& s)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n+}\n+\n+template<typename X, typename Y>\n+static inline size_t DynamicUsage(const std::map<X, Y>& m)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n+}\n+\n+// Boost data structures\n+\n+template<typename X>\n+struct boost_unordered_node : private X\n+{\n+private:\n+    void* ptr;\n+};\n+\n+template<typename X, typename Y>\n+static inline size_t DynamicUsage(const boost::unordered_set<X, Y>& s)\n+{\n+    return MallocUsage(sizeof(boost_unordered_node<X>)) * s.size() + MallocUsage(sizeof(void*) * s.bucket_count());\n+}\n+\n+template<typename X, typename Y, typename Z>\n+static inline size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& m)\n+{\n+    return MallocUsage(sizeof(boost_unordered_node<std::pair<const X, Y> >)) * m.size() + MallocUsage(sizeof(void*) * m.bucket_count());\n+}\n+\n+// Dispatch to class method as fallback\n+\n+template<typename X>\n+static inline size_t DynamicUsage(const X& x)\n+{\n+    return x.DynamicMemoryUsage();\n+}\n+\n+}\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDYzOTJkYzFkZDk2NWI0ZWMxYmE2MGExNGE3MTRlM2UzZmE3YTg4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-03T23:31:11Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-12T00:56:48Z"
      },
      "message": "Keep track of memory usage in CCoinsViewCache",
      "tree": {
        "sha": "7d8744aa15b244b8c2e2504b269f5bdf4e7324e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d8744aa15b244b8c2e2504b269f5bdf4e7324e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "540629c6fbbfc2aed336f7c7de1b2573d3310fda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540629c6fbbfc2aed336f7c7de1b2573d3310fda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/540629c6fbbfc2aed336f7c7de1b2573d3310fda"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 64,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a41d5a310d6b9cb9b9e0537c2b2c3a4f96fbd866",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 3,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"coins.h\"\n \n+#include \"memusage.h\"\n #include \"random.h\"\n \n #include <assert.h>\n@@ -57,13 +58,17 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n \n CCoinsViewCache::~CCoinsViewCache()\n {\n     assert(!hasModifier);\n }\n \n+size_t CCoinsViewCache::DynamicMemoryUsage() const {\n+    return memusage::DynamicUsage(cacheCoins) + cachedCoinsUsage;\n+}\n+\n CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n@@ -78,6 +83,7 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n         // version as fresh.\n         ret->second.flags = CCoinsCacheEntry::FRESH;\n     }\n+    cachedCoinsUsage += memusage::DynamicUsage(ret->second.coins);\n     return ret;\n }\n \n@@ -93,6 +99,7 @@ bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     assert(!hasModifier);\n     std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n+    size_t cachedCoinUsage = 0;\n     if (ret.second) {\n         if (!base->GetCoins(txid, ret.first->second.coins)) {\n             // The parent view does not have this entry; mark it as fresh.\n@@ -102,10 +109,12 @@ CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n             // The parent view only has a pruned entry for this; mark it as fresh.\n             ret.first->second.flags = CCoinsCacheEntry::FRESH;\n         }\n+    } else {\n+        cachedCoinUsage = memusage::DynamicUsage(ret.first->second.coins);\n     }\n     // Assume that whenever ModifyCoins is called, the entry will be modified.\n     ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n-    return CCoinsModifier(*this, ret.first);\n+    return CCoinsModifier(*this, ret.first, cachedCoinUsage);\n }\n \n const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n@@ -150,17 +159,21 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n                     assert(it->second.flags & CCoinsCacheEntry::FRESH);\n                     CCoinsCacheEntry& entry = cacheCoins[it->first];\n                     entry.coins.swap(it->second.coins);\n+                    cachedCoinsUsage += memusage::DynamicUsage(entry.coins);\n                     entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n                 }\n             } else {\n                 if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n                     // The grandparent does not have an entry, and the child is\n                     // modified and being pruned. This means we can just delete\n                     // it from the parent.\n+                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n                     cacheCoins.erase(itUs);\n                 } else {\n                     // A normal modification.\n+                    cachedCoinsUsage -= memusage::DynamicUsage(itUs->second.coins);\n                     itUs->second.coins.swap(it->second.coins);\n+                    cachedCoinsUsage += memusage::DynamicUsage(itUs->second.coins);\n                     itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n                 }\n             }\n@@ -175,6 +188,7 @@ bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn\n bool CCoinsViewCache::Flush() {\n     bool fOk = base->BatchWrite(cacheCoins, hashBlock);\n     cacheCoins.clear();\n+    cachedCoinsUsage = 0;\n     return fOk;\n }\n \n@@ -232,7 +246,7 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n     return tx.ComputePriority(dResult);\n }\n \n-CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {\n+CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage) : cache(cache_), it(it_), cachedCoinUsage(usage) {\n     assert(!cache.hasModifier);\n     cache.hasModifier = true;\n }\n@@ -242,7 +256,11 @@ CCoinsModifier::~CCoinsModifier()\n     assert(cache.hasModifier);\n     cache.hasModifier = false;\n     it->second.coins.Cleanup();\n+    cache.cachedCoinsUsage -= cachedCoinUsage; // Subtract the old usage\n     if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n         cache.cacheCoins.erase(it);\n+    } else {\n+        // If the coin still exists after the modification, add the new usage\n+        cache.cachedCoinsUsage += memusage::DynamicUsage(it->second.coins);\n     }\n }"
      },
      {
        "sha": "a4671645df5db0e770b066481fb0d9d7e235a52c",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_COINS_H\n \n #include \"compressor.h\"\n+#include \"memusage.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n \n@@ -252,6 +253,15 @@ class CCoins\n                 return false;\n         return true;\n     }\n+\n+    size_t DynamicMemoryUsage() const {\n+        size_t ret = memusage::DynamicUsage(vout);\n+        BOOST_FOREACH(const CTxOut &out, vout) {\n+            const std::vector<unsigned char> *script = &out.scriptPubKey;\n+            ret += memusage::DynamicUsage(*script);\n+        }\n+        return ret;\n+    }\n };\n \n class CCoinsKeyHasher\n@@ -356,7 +366,8 @@ class CCoinsModifier\n private:\n     CCoinsViewCache& cache;\n     CCoinsMap::iterator it;\n-    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n+    size_t cachedCoinUsage; // Cached memory usage of the CCoins object before modification\n+    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_, size_t usage);\n \n public:\n     CCoins* operator->() { return &it->second.coins; }\n@@ -372,13 +383,17 @@ class CCoinsViewCache : public CCoinsViewBacked\n     /* Whether this cache has an active modifier. */\n     bool hasModifier;\n \n+\n     /**\n      * Make mutable so that we can \"fill the cache\" even from Get-methods\n      * declared as \"const\".  \n      */\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n+    /* Cached dynamic memory usage for the inner CCoins objects. */\n+    mutable size_t cachedCoinsUsage;\n+\n public:\n     CCoinsViewCache(CCoinsView *baseIn);\n     ~CCoinsViewCache();\n@@ -414,6 +429,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Calculate the size of the cache (in number of transactions)\n     unsigned int GetCacheSize() const;\n \n+    //! Calculate the size of the cache (in bytes)\n+    size_t DynamicMemoryUsage() const;\n+\n     /** \n      * Amount of bitcoins coming in to a transaction\n      * Note that lightweight clients may not know anything besides the hash of previous transactions,"
      },
      {
        "sha": "34b311b804fd942918cd52b6fa2995d62ea91546",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
        "patch": "@@ -59,6 +59,24 @@ class CCoinsViewTest : public CCoinsView\n \n     bool GetStats(CCoinsStats& stats) const { return false; }\n };\n+\n+class CCoinsViewCacheTest : public CCoinsViewCache\n+{\n+public:\n+    CCoinsViewCacheTest(CCoinsView* base) : CCoinsViewCache(base) {}\n+\n+    void SelfTest() const\n+    {\n+        // Manually recompute the dynamic usage of the whole data, and compare it.\n+        size_t ret = memusage::DynamicUsage(cacheCoins);\n+        for (CCoinsMap::iterator it = cacheCoins.begin(); it != cacheCoins.end(); it++) {\n+            ret += memusage::DynamicUsage(it->second.coins);\n+        }\n+        BOOST_CHECK_EQUAL(memusage::DynamicUsage(*this), ret);\n+    }\n+\n+};\n+\n }\n \n BOOST_FIXTURE_TEST_SUITE(coins_tests, BasicTestingSetup)\n@@ -90,8 +108,8 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n \n     // The cache stack.\n     CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n-    std::vector<CCoinsViewCache*> stack; // A stack of CCoinsViewCaches on top.\n-    stack.push_back(new CCoinsViewCache(&base)); // Start with one cache.\n+    std::vector<CCoinsViewCacheTest*> stack; // A stack of CCoinsViewCaches on top.\n+    stack.push_back(new CCoinsViewCacheTest(&base)); // Start with one cache.\n \n     // Use a limited set of random transaction ids, so we do test overwriting entries.\n     std::vector<uint256> txids;\n@@ -136,6 +154,9 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                     missed_an_entry = true;\n                 }\n             }\n+            BOOST_FOREACH(const CCoinsViewCacheTest *test, stack) {\n+                test->SelfTest();\n+            }\n         }\n \n         if (insecure_rand() % 100 == 0) {\n@@ -152,7 +173,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                 } else {\n                     removed_all_caches = true;\n                 }\n-                stack.push_back(new CCoinsViewCache(tip));\n+                stack.push_back(new CCoinsViewCacheTest(tip));\n                 if (stack.size() == 4) {\n                     reached_4_caches = true;\n                 }"
      }
    ]
  },
  {
    "sha": "fc684ad8afae19c209701230837d338c5a6c1f72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzY4NGFkOGFmYWUxOWMyMDk3MDEyMzA4MzdkMzM4YzVhNmMxZjcy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-03T23:38:08Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-12T00:57:27Z"
      },
      "message": "Use accurate memory for flushing decisions",
      "tree": {
        "sha": "8be68e7cede23aa35c3cb3d5b24d60a67439bc86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8be68e7cede23aa35c3cb3d5b24d60a67439bc86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc684ad8afae19c209701230837d338c5a6c1f72",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc684ad8afae19c209701230837d338c5a6c1f72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc684ad8afae19c209701230837d338c5a6c1f72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc684ad8afae19c209701230837d338c5a6c1f72/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/046392dc1dd965b4ec1ba60a14a714e3e3fa7a88"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e1b4e89901208b2c8dee8ba6fc565c826c880658",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc684ad8afae19c209701230837d338c5a6c1f72/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc684ad8afae19c209701230837d338c5a6c1f72/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fc684ad8afae19c209701230837d338c5a6c1f72",
        "patch": "@@ -1067,7 +1067,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     nTotalCache -= nBlockTreeDBCache;\n     size_t nCoinDBCache = nTotalCache / 2; // use half of the remaining cache for coindb cache\n     nTotalCache -= nCoinDBCache;\n-    nCoinCacheSize = nTotalCache / 300; // coins in memory require around 300 bytes\n+    nCoinCacheUsage = nTotalCache;\n \n     bool fLoaded = false;\n     while (!fLoaded) {"
      },
      {
        "sha": "916e1a6093e715b9463b7f3ec9cf4b6b8c21ec07",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc684ad8afae19c209701230837d338c5a6c1f72/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc684ad8afae19c209701230837d338c5a6c1f72/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc684ad8afae19c209701230837d338c5a6c1f72",
        "patch": "@@ -57,7 +57,7 @@ bool fPruneMode = false;\n bool fIsBareMultisigStd = true;\n bool fCheckBlockIndex = false;\n bool fCheckpointsEnabled = true;\n-unsigned int nCoinCacheSize = 5000;\n+size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying and mining) */\n@@ -1894,7 +1894,7 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n         }\n     }\n     if ((mode == FLUSH_STATE_ALWAYS) ||\n-        ((mode == FLUSH_STATE_PERIODIC || mode == FLUSH_STATE_IF_NEEDED) && pcoinsTip->GetCacheSize() > nCoinCacheSize) ||\n+        ((mode == FLUSH_STATE_PERIODIC || mode == FLUSH_STATE_IF_NEEDED) && pcoinsTip->DynamicMemoryUsage() > nCoinCacheUsage) ||\n         (mode == FLUSH_STATE_PERIODIC && GetTimeMicros() > nLastWrite + DATABASE_WRITE_INTERVAL * 1000000) ||\n         fFlushForPrune) {\n         // Typical CCoins structures on disk are around 100 bytes in size.\n@@ -3197,7 +3197,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n-        if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= nCoinCacheSize) {\n+        if (nCheckLevel >= 3 && pindex == pindexState && (coins.DynamicMemoryUsage() + pcoinsTip->DynamicMemoryUsage()) <= nCoinCacheUsage) {\n             bool fClean = true;\n             if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n                 return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());"
      },
      {
        "sha": "2c4a4cb7cd1463964a7e9762fb23d01706426ae6",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc684ad8afae19c209701230837d338c5a6c1f72/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc684ad8afae19c209701230837d338c5a6c1f72/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fc684ad8afae19c209701230837d338c5a6c1f72",
        "patch": "@@ -119,7 +119,7 @@ extern bool fTxIndex;\n extern bool fIsBareMultisigStd;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n-extern unsigned int nCoinCacheSize;\n+extern size_t nCoinCacheUsage;\n extern CFeeRate minRelayTxFee;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */"
      }
    ]
  },
  {
    "sha": "b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2VkNDIzNmJlYjdmNjhlMTcyMGNlYjNkYTE1ZTBjMzY4MmVmNjI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-03T23:56:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-12T00:58:14Z"
      },
      "message": "Cache tweak and logging improvements",
      "tree": {
        "sha": "c5a0bf72e529ebc73ca8c665b2aefa6967af4fbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5a0bf72e529ebc73ca8c665b2aefa6967af4fbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ed4236beb7f68e1720ceb3da15e0c3682ef629/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc684ad8afae19c209701230837d338c5a6c1f72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc684ad8afae19c209701230837d338c5a6c1f72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc684ad8afae19c209701230837d338c5a6c1f72"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "500206b70cc0cda58993f8ca4ed829ba37ed239d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ed4236beb7f68e1720ceb3da15e0c3682ef629/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ed4236beb7f68e1720ceb3da15e0c3682ef629/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
        "patch": "@@ -1056,18 +1056,20 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n \n     // cache size calculations\n-    size_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n-    if (nTotalCache < (nMinDbCache << 20))\n-        nTotalCache = (nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n-    else if (nTotalCache > (nMaxDbCache << 20))\n-        nTotalCache = (nMaxDbCache << 20); // total cache cannot be greater than nMaxDbCache\n-    size_t nBlockTreeDBCache = nTotalCache / 8;\n+    int64_t nTotalCache = (GetArg(\"-dbcache\", nDefaultDbCache) << 20);\n+    nTotalCache = std::max(nTotalCache, nMinDbCache << 20); // total cache cannot be less than nMinDbCache\n+    nTotalCache = std::min(nTotalCache, nMaxDbCache << 20); // total cache cannot be greated than nMaxDbcache\n+    int64_t nBlockTreeDBCache = nTotalCache / 8;\n     if (nBlockTreeDBCache > (1 << 21) && !GetBoolArg(\"-txindex\", false))\n         nBlockTreeDBCache = (1 << 21); // block tree db cache shouldn't be larger than 2 MiB\n     nTotalCache -= nBlockTreeDBCache;\n-    size_t nCoinDBCache = nTotalCache / 2; // use half of the remaining cache for coindb cache\n+    int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nTotalCache -= nCoinDBCache;\n-    nCoinCacheUsage = nTotalCache;\n+    nCoinCacheUsage = nTotalCache; // the rest goes to in-memory cache\n+    LogPrintf(\"Cache configuration:\\n\");\n+    LogPrintf(\"* Using %.1fMiB for block index database\\n\", nBlockTreeDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1fMiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n+    LogPrintf(\"* Using %.1fMiB for in-memory UTXO set\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024));\n \n     bool fLoaded = false;\n     while (!fLoaded) {"
      },
      {
        "sha": "a1b3b8190502528f6b72b3d6dc7d1632bdd6f820",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ed4236beb7f68e1720ceb3da15e0c3682ef629/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ed4236beb7f68e1720ceb3da15e0c3682ef629/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
        "patch": "@@ -1966,10 +1966,10 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n-    LogPrintf(\"%s: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u\\n\", __func__,\n+    LogPrintf(\"%s: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%.1fMiB(%utx)\\n\", __func__,\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n+      Checkpoints::GuessVerificationProgress(chainParams.Checkpoints(), chainActive.Tip()), pcoinsTip->DynamicMemoryUsage() * (1.0 / (1<<20)), pcoinsTip->GetCacheSize());\n \n     cvBlockChange.notify_all();\n "
      },
      {
        "sha": "bef5dc9fd18fedf4c015336753dfc3acb8220833",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3ed4236beb7f68e1720ceb3da15e0c3682ef629/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3ed4236beb7f68e1720ceb3da15e0c3682ef629/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
        "patch": "@@ -22,7 +22,7 @@ class uint256;\n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 100;\n //! max. -dbcache in (MiB)\n-static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 4096 : 1024;\n+static const int64_t nMaxDbCache = sizeof(void*) > 4 ? 16384 : 1024;\n //! min. -dbcache in (MiB)\n static const int64_t nMinDbCache = 4;\n "
      }
    ]
  },
  {
    "sha": "67708acff9c18e380fa6136ff0ae718959ead4b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzcwOGFjZmY5YzE4ZTM4MGZhNjEzNmZmMGFlNzE4OTU5ZWFkNGI1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-04T20:00:19Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-05-12T00:58:14Z"
      },
      "message": "Write block index more frequently than cache flushes",
      "tree": {
        "sha": "26330eafe94d87179a131e73a641dca1533d06c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26330eafe94d87179a131e73a641dca1533d06c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67708acff9c18e380fa6136ff0ae718959ead4b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67708acff9c18e380fa6136ff0ae718959ead4b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67708acff9c18e380fa6136ff0ae718959ead4b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67708acff9c18e380fa6136ff0ae718959ead4b5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3ed4236beb7f68e1720ceb3da15e0c3682ef629",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3ed4236beb7f68e1720ceb3da15e0c3682ef629"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 44,
      "deletions": 17
    },
    "files": [
      {
        "sha": "28582e04865fa9c9dfe52a8ac543135c3aebcf83",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 15,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67708acff9c18e380fa6136ff0ae718959ead4b5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67708acff9c18e380fa6136ff0ae718959ead4b5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=67708acff9c18e380fa6136ff0ae718959ead4b5",
        "patch": "@@ -1880,6 +1880,8 @@ enum FlushStateMode {\n bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     LOCK2(cs_main, cs_LastBlockFile);\n     static int64_t nLastWrite = 0;\n+    static int64_t nLastFlush = 0;\n+    static int64_t nLastSetChain = 0;\n     std::set<int> setFilesToPrune;\n     bool fFlushForPrune = false;\n     try {\n@@ -1893,16 +1895,36 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n             }\n         }\n     }\n-    if ((mode == FLUSH_STATE_ALWAYS) ||\n-        ((mode == FLUSH_STATE_PERIODIC || mode == FLUSH_STATE_IF_NEEDED) && pcoinsTip->DynamicMemoryUsage() > nCoinCacheUsage) ||\n-        (mode == FLUSH_STATE_PERIODIC && GetTimeMicros() > nLastWrite + DATABASE_WRITE_INTERVAL * 1000000) ||\n-        fFlushForPrune) {\n-        // Typical CCoins structures on disk are around 100 bytes in size.\n+    int64_t nNow = GetTimeMicros();\n+    // Avoid writing/flushing immediately after startup.\n+    if (nLastWrite == 0) {\n+        nLastWrite = nNow;\n+    }\n+    if (nLastFlush == 0) {\n+        nLastFlush = nNow;\n+    }\n+    if (nLastSetChain == 0) {\n+        nLastSetChain = nNow;\n+    }\n+    size_t cacheSize = pcoinsTip->DynamicMemoryUsage();\n+    // The cache is large and close to the limit, but we have time now (not in the middle of a block processing).\n+    bool fCacheLarge = mode == FLUSH_STATE_PERIODIC && cacheSize * (10.0/9) > nCoinCacheUsage;\n+    // The cache is over the limit, we have to write now.\n+    bool fCacheCritical = mode == FLUSH_STATE_IF_NEEDED && cacheSize > nCoinCacheUsage;\n+    // It's been a while since we wrote the block index to disk. Do this frequently, so we don't need to redownload after a crash.\n+    bool fPeriodicWrite = mode == FLUSH_STATE_PERIODIC && nNow > nLastWrite + (int64_t)DATABASE_WRITE_INTERVAL * 1000000;\n+    // It's been very long since we flushed the cache. Do this infrequently, to optimize cache usage.\n+    bool fPeriodicFlush = mode == FLUSH_STATE_PERIODIC && nNow > nLastFlush + (int64_t)DATABASE_FLUSH_INTERVAL * 1000000;\n+    // Combine all conditions that result in a full cache flush.\n+    bool fDoFullFlush = (mode == FLUSH_STATE_ALWAYS) || fCacheLarge || fCacheCritical || fPeriodicFlush || fFlushForPrune;\n+    // Write blocks and block index to disk.\n+    if (fDoFullFlush || fPeriodicWrite) {\n+        // Typical CCoins structures on disk are around 128 bytes in size.\n         // Pushing a new one to the database can cause it to be written\n         // twice (once in the log, and once in the tables). This is already\n         // an overestimation, as most will delete an existing entry or\n         // overwrite one. Still, use a conservative safety factor of 2.\n-        if (!CheckDiskSpace(100 * 2 * 2 * pcoinsTip->GetCacheSize()))\n+        if (fDoFullFlush && !CheckDiskSpace(128 * 2 * 2 * pcoinsTip->GetCacheSize()))\n             return state.Error(\"out of disk space\");\n         // First make sure all block and undo data is flushed to disk.\n         FlushBlockFile();\n@@ -1924,21 +1946,24 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n                 return state.Abort(\"Files to write to block index database\");\n             }\n         }\n-        // Flush the chainstate (which may refer to block index entries).\n-        if (!pcoinsTip->Flush())\n-            return state.Abort(\"Failed to write to coin database\");\n-\n         // Finally remove any pruned files\n         if (fFlushForPrune) {\n             UnlinkPrunedFiles(setFilesToPrune);\n             fCheckForPruning = false;\n         }\n-\n+        nLastWrite = nNow;\n+    }\n+    // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n+    if (fDoFullFlush) {\n+        // Flush the chainstate (which may refer to block index entries).\n+        if (!pcoinsTip->Flush())\n+            return state.Abort(\"Failed to write to coin database\");\n+        nLastFlush = nNow;\n+    }\n+    if ((mode == FLUSH_STATE_ALWAYS || mode == FLUSH_STATE_PERIODIC) && nNow > nLastSetChain + (int64_t)DATABASE_WRITE_INTERVAL * 1000000) {\n         // Update best block in wallet (so we can detect restored wallets).\n-        if (mode != FLUSH_STATE_IF_NEEDED) {\n-            GetMainSignals().SetBestChain(chainActive.GetLocator());\n-        }\n-        nLastWrite = GetTimeMicros();\n+        GetMainSignals().SetBestChain(chainActive.GetLocator());\n+        nLastSetChain = nNow;\n     }\n     } catch (const std::runtime_error& e) {\n         return state.Abort(std::string(\"System error while flushing: \") + e.what());"
      },
      {
        "sha": "fcbc4075d21ef732fcae60111ed8fa4b5727106e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67708acff9c18e380fa6136ff0ae718959ead4b5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67708acff9c18e380fa6136ff0ae718959ead4b5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=67708acff9c18e380fa6136ff0ae718959ead4b5",
        "patch": "@@ -82,8 +82,10 @@ static const unsigned int MAX_HEADERS_RESULTS = 2000;\n  *  degree of disordering of blocks on disk (which make reindexing and in the future perhaps pruning\n  *  harder). We'll probably want to make this a per-peer adaptive value at some point. */\n static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n-/** Time to wait (in seconds) between writing blockchain state to disk. */\n-static const unsigned int DATABASE_WRITE_INTERVAL = 3600;\n+/** Time to wait (in seconds) between writing blocks/block index to disk. */\n+static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n+/** Time to wait (in seconds) between flushing chainstate to disk. */\n+static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n "
      }
    ]
  },
  {
    "sha": "86a5f4b54ebf5f3251f4c172cf9a5041ae43c082",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmE1ZjRiNTRlYmY1ZjMyNTFmNGMxNzJjZjlhNTA0MWFlNDNjMDgy",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2015-05-11T15:18:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2015-05-12T19:44:56Z"
      },
      "message": "Relocate calls to CheckDiskSpace\n\nMake sure we're checking disk space for block index writes and allow for pruning to happen before chainstate writes.",
      "tree": {
        "sha": "bf4be39d0a221a34b19d786f2f0c5afe01bc6395",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf4be39d0a221a34b19d786f2f0c5afe01bc6395"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86a5f4b54ebf5f3251f4c172cf9a5041ae43c082",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86a5f4b54ebf5f3251f4c172cf9a5041ae43c082",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86a5f4b54ebf5f3251f4c172cf9a5041ae43c082",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86a5f4b54ebf5f3251f4c172cf9a5041ae43c082/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67708acff9c18e380fa6136ff0ae718959ead4b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67708acff9c18e380fa6136ff0ae718959ead4b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67708acff9c18e380fa6136ff0ae718959ead4b5"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "94ab7ff7bb3ce4e02e1faa0e4fb7eccdf522c867",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86a5f4b54ebf5f3251f4c172cf9a5041ae43c082/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86a5f4b54ebf5f3251f4c172cf9a5041ae43c082/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=86a5f4b54ebf5f3251f4c172cf9a5041ae43c082",
        "patch": "@@ -1919,12 +1919,8 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     bool fDoFullFlush = (mode == FLUSH_STATE_ALWAYS) || fCacheLarge || fCacheCritical || fPeriodicFlush || fFlushForPrune;\n     // Write blocks and block index to disk.\n     if (fDoFullFlush || fPeriodicWrite) {\n-        // Typical CCoins structures on disk are around 128 bytes in size.\n-        // Pushing a new one to the database can cause it to be written\n-        // twice (once in the log, and once in the tables). This is already\n-        // an overestimation, as most will delete an existing entry or\n-        // overwrite one. Still, use a conservative safety factor of 2.\n-        if (fDoFullFlush && !CheckDiskSpace(128 * 2 * 2 * pcoinsTip->GetCacheSize()))\n+        // Depend on nMinDiskSpace to ensure we can write block index\n+        if (!CheckDiskSpace(0))\n             return state.Error(\"out of disk space\");\n         // First make sure all block and undo data is flushed to disk.\n         FlushBlockFile();\n@@ -1955,6 +1951,13 @@ bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode) {\n     }\n     // Flush best chain related state. This can only be done if the blocks / block index write was also done.\n     if (fDoFullFlush) {\n+        // Typical CCoins structures on disk are around 128 bytes in size.\n+        // Pushing a new one to the database can cause it to be written\n+        // twice (once in the log, and once in the tables). This is already\n+        // an overestimation, as most will delete an existing entry or\n+        // overwrite one. Still, use a conservative safety factor of 2.\n+        if (!CheckDiskSpace(128 * 2 * 2 * pcoinsTip->GetCacheSize()))\n+            return state.Error(\"out of disk space\");\n         // Flush the chainstate (which may refer to block index entries).\n         if (!pcoinsTip->Flush())\n             return state.Abort(\"Failed to write to coin database\");"
      }
    ]
  }
]