[
  {
    "sha": "2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDEyZWNjOWNmYjU2OWRkYzNkNWM4NzdjYTY2NDg0N2NjNDFmZWY3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-23T20:49:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T16:55:22Z"
      },
      "message": "move initialize_chain() and initialize_chain_clean() to be methods of BitcoinTestFramework",
      "tree": {
        "sha": "55cbe17b900bd479254f2a0b9f74a9105b8cf98b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55cbe17b900bd479254f2a0b9f74a9105b8cf98b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2012ecc9cfb569ddc3d5c877ca664847cc41fef7/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5114f8113627791b871c88998bd5a3d36961c241",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5114f8113627791b871c88998bd5a3d36961c241",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5114f8113627791b871c88998bd5a3d36961c241"
      }
    ],
    "stats": {
      "total": 195,
      "additions": 103,
      "deletions": 92
    },
    "files": [
      {
        "sha": "c84299fec03183805845147d728349bd52b5b4b2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 103,
        "deletions": 11,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2012ecc9cfb569ddc3d5c877ca664847cc41fef7/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2012ecc9cfb569ddc3d5c877ca664847cc41fef7/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
        "patch": "@@ -7,23 +7,34 @@\n import logging\n import optparse\n import os\n-import sys\n import shutil\n+import subprocess\n+import sys\n import tempfile\n import time\n \n from .util import (\n-    initialize_chain,\n-    start_nodes,\n+    PortSeed,\n+    MAX_NODES,\n+    bitcoind_processes,\n+    check_json_precision,\n     connect_nodes_bi,\n+    disable_mocktime,\n+    enable_coverage,\n+    enable_mocktime,\n+    get_mocktime,\n+    get_rpc_proxy,\n+    initialize_datadir,\n+    log_filename,\n+    p2p_port,\n+    rpc_url,\n+    set_node_times,\n+    start_nodes,\n+    stop_node,\n+    stop_nodes,\n     sync_blocks,\n     sync_mempools,\n-    stop_nodes,\n-    stop_node,\n-    enable_coverage,\n-    check_json_precision,\n-    initialize_chain_clean,\n-    PortSeed,\n+    wait_for_bitcoind_start,\n )\n from .authproxy import JSONRPCException\n \n@@ -47,9 +58,9 @@ def add_options(self, parser):\n     def setup_chain(self):\n         self.log.info(\"Initializing test directory \"+self.options.tmpdir)\n         if self.setup_clean_chain:\n-            initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+            self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n         else:\n-            initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n+            self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n \n     def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)\n@@ -219,6 +230,87 @@ def _start_logging(self):\n             rpc_handler.setLevel(logging.DEBUG)\n             rpc_logger.addHandler(rpc_handler)\n \n+    def _initialize_chain(self, test_dir, num_nodes, cachedir):\n+        \"\"\"Initialize a pre-mined blockchain for use by the test.\n+\n+        Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n+        Afterward, create num_nodes copies from the cache.\"\"\"\n+\n+        assert num_nodes <= MAX_NODES\n+        create_cache = False\n+        for i in range(MAX_NODES):\n+            if not os.path.isdir(os.path.join(cachedir, 'node' + str(i))):\n+                create_cache = True\n+                break\n+\n+        if create_cache:\n+            self.log.debug(\"Creating data directories from cached datadir\")\n+\n+            # find and delete old cache directories if any exist\n+            for i in range(MAX_NODES):\n+                if os.path.isdir(os.path.join(cachedir, \"node\" + str(i))):\n+                    shutil.rmtree(os.path.join(cachedir, \"node\" + str(i)))\n+\n+            # Create cache directories, run bitcoinds:\n+            for i in range(MAX_NODES):\n+                datadir = initialize_datadir(cachedir, i)\n+                args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n+                if i > 0:\n+                    args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n+                bitcoind_processes[i] = subprocess.Popen(args)\n+                self.logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n+                wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n+                self.logger.debug(\"initialize_chain: RPC successfully started\")\n+\n+            rpcs = []\n+            for i in range(MAX_NODES):\n+                try:\n+                    rpcs.append(get_rpc_proxy(rpc_url(i), i))\n+                except:\n+                    self.log.exception(\"Error connecting to node %d\" % i)\n+                    sys.exit(1)\n+\n+            # Create a 200-block-long chain; each of the 4 first nodes\n+            # gets 25 mature blocks and 25 immature.\n+            # Note: To preserve compatibility with older versions of\n+            # initialize_chain, only 4 nodes will generate coins.\n+            #\n+            # blocks are created with timestamps 10 minutes apart\n+            # starting from 2010 minutes in the past\n+            enable_mocktime()\n+            block_time = get_mocktime() - (201 * 10 * 60)\n+            for i in range(2):\n+                for peer in range(4):\n+                    for j in range(25):\n+                        set_node_times(rpcs, block_time)\n+                        rpcs[peer].generate(1)\n+                        block_time += 10 * 60\n+                    # Must sync before next peer starts generating blocks\n+                    sync_blocks(rpcs)\n+\n+            # Shut them down, and clean up cache directories:\n+            stop_nodes(rpcs)\n+            disable_mocktime()\n+            for i in range(MAX_NODES):\n+                os.remove(log_filename(cachedir, i, \"debug.log\"))\n+                os.remove(log_filename(cachedir, i, \"db.log\"))\n+                os.remove(log_filename(cachedir, i, \"peers.dat\"))\n+                os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n+\n+        for i in range(num_nodes):\n+            from_dir = os.path.join(cachedir, \"node\" + str(i))\n+            to_dir = os.path.join(test_dir, \"node\" + str(i))\n+            shutil.copytree(from_dir, to_dir)\n+            initialize_datadir(test_dir, i)  # Overwrite port/rpcport in bitcoin.conf\n+\n+    def _initialize_chain_clean(self, test_dir, num_nodes):\n+        \"\"\"Initialize empty blockchain for use by the test.\n+\n+        Create an empty blockchain and num_nodes wallets.\n+        Useful if a test case wants complete control over initialization.\"\"\"\n+        for i in range(num_nodes):\n+            initialize_datadir(test_dir, i)\n+\n # Test framework for doing p2p comparison testing, which sets up some bitcoind\n # binaries:\n # 1 binary: test binary"
      },
      {
        "sha": "972c138dbff61f2ae37420a2a4a118b99acf81dd",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 81,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2012ecc9cfb569ddc3d5c877ca664847cc41fef7/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2012ecc9cfb569ddc3d5c877ca664847cc41fef7/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
        "patch": "@@ -226,87 +226,6 @@ def wait_for_bitcoind_start(process, url, i):\n                 raise # unknown JSON RPC exception\n         time.sleep(0.25)\n \n-def initialize_chain(test_dir, num_nodes, cachedir):\n-    \"\"\"\n-    Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n-    Afterward, create num_nodes copies from the cache\n-    \"\"\"\n-\n-    assert num_nodes <= MAX_NODES\n-    create_cache = False\n-    for i in range(MAX_NODES):\n-        if not os.path.isdir(os.path.join(cachedir, 'node'+str(i))):\n-            create_cache = True\n-            break\n-\n-    if create_cache:\n-        logger.debug(\"Creating data directories from cached datadir\")\n-\n-        #find and delete old cache directories if any exist\n-        for i in range(MAX_NODES):\n-            if os.path.isdir(os.path.join(cachedir,\"node\"+str(i))):\n-                shutil.rmtree(os.path.join(cachedir,\"node\"+str(i)))\n-\n-        # Create cache directories, run bitcoinds:\n-        for i in range(MAX_NODES):\n-            datadir=initialize_datadir(cachedir, i)\n-            args = [ os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\"+datadir, \"-discover=0\" ]\n-            if i > 0:\n-                args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n-            bitcoind_processes[i] = subprocess.Popen(args)\n-            logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-            wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n-            logger.debug(\"initialize_chain: RPC successfully started\")\n-\n-        rpcs = []\n-        for i in range(MAX_NODES):\n-            try:\n-                rpcs.append(get_rpc_proxy(rpc_url(i), i))\n-            except:\n-                sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n-                sys.exit(1)\n-\n-        # Create a 200-block-long chain; each of the 4 first nodes\n-        # gets 25 mature blocks and 25 immature.\n-        # Note: To preserve compatibility with older versions of\n-        # initialize_chain, only 4 nodes will generate coins.\n-        #\n-        # blocks are created with timestamps 10 minutes apart\n-        # starting from 2010 minutes in the past\n-        enable_mocktime()\n-        block_time = get_mocktime() - (201 * 10 * 60)\n-        for i in range(2):\n-            for peer in range(4):\n-                for j in range(25):\n-                    set_node_times(rpcs, block_time)\n-                    rpcs[peer].generate(1)\n-                    block_time += 10*60\n-                # Must sync before next peer starts generating blocks\n-                sync_blocks(rpcs)\n-\n-        # Shut them down, and clean up cache directories:\n-        stop_nodes(rpcs)\n-        disable_mocktime()\n-        for i in range(MAX_NODES):\n-            os.remove(log_filename(cachedir, i, \"debug.log\"))\n-            os.remove(log_filename(cachedir, i, \"db.log\"))\n-            os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-            os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n-\n-    for i in range(num_nodes):\n-        from_dir = os.path.join(cachedir, \"node\"+str(i))\n-        to_dir = os.path.join(test_dir,  \"node\"+str(i))\n-        shutil.copytree(from_dir, to_dir)\n-        initialize_datadir(test_dir, i) # Overwrite port/rpcport in bitcoin.conf\n-\n-def initialize_chain_clean(test_dir, num_nodes):\n-    \"\"\"\n-    Create an empty blockchain and num_nodes wallets.\n-    Useful if a test case wants complete control over initialization.\n-    \"\"\"\n-    for i in range(num_nodes):\n-        datadir=initialize_datadir(test_dir, i)\n-\n \n def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n     \"\"\""
      }
    ]
  },
  {
    "sha": "490721fcfa8f0f69e5bc9075ad143a26ee6bb811",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTA3MjFmY2ZhOGYwZjY5ZTViYzkwNzVhZDE0M2EyNmVlNmJiODEx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-23T20:56:45Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T16:55:22Z"
      },
      "message": "Add stop_nodes() method to BitcoinTestFramework",
      "tree": {
        "sha": "4feaa8a177c4fa8b69e6dba8ef889d8f33aa251f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4feaa8a177c4fa8b69e6dba8ef889d8f33aa251f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/490721fcfa8f0f69e5bc9075ad143a26ee6bb811",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/490721fcfa8f0f69e5bc9075ad143a26ee6bb811",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/490721fcfa8f0f69e5bc9075ad143a26ee6bb811",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/490721fcfa8f0f69e5bc9075ad143a26ee6bb811/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2012ecc9cfb569ddc3d5c877ca664847cc41fef7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2012ecc9cfb569ddc3d5c877ca664847cc41fef7"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 12,
      "deletions": 9
    },
    "files": [
      {
        "sha": "39860defbd41336d1de91d5d08b26b4902547daa",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/490721fcfa8f0f69e5bc9075ad143a26ee6bb811/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/490721fcfa8f0f69e5bc9075ad143a26ee6bb811/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=490721fcfa8f0f69e5bc9075ad143a26ee6bb811",
        "patch": "@@ -65,6 +65,9 @@ def setup_chain(self):\n     def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)\n \n+    def stop_nodes(self):\n+        stop_nodes(self.nodes)\n+\n     def setup_nodes(self):\n         return start_nodes(self.num_nodes, self.options.tmpdir)\n \n@@ -92,7 +95,7 @@ def split_network(self):\n         Split the network of four nodes into nodes 0/1 and 2/3.\n         \"\"\"\n         assert not self.is_network_split\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         self.setup_network(True)\n \n     def sync_all(self):\n@@ -110,7 +113,7 @@ def join_network(self):\n         Join the (previously split) network halves together.\n         \"\"\"\n         assert self.is_network_split\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         self.setup_network(False)\n \n     def main(self):\n@@ -173,7 +176,7 @@ def main(self):\n \n         if not self.options.noshutdown:\n             self.log.info(\"Stopping nodes\")\n-            stop_nodes(self.nodes)\n+            self.stop_nodes()\n         else:\n             self.log.info(\"Note: bitcoinds were not stopped and may still be running\")\n \n@@ -262,10 +265,10 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n                 self.logger.debug(\"initialize_chain: RPC successfully started\")\n \n-            rpcs = []\n+            self.nodes = []\n             for i in range(MAX_NODES):\n                 try:\n-                    rpcs.append(get_rpc_proxy(rpc_url(i), i))\n+                    self.nodes.append(get_rpc_proxy(rpc_url(i), i))\n                 except:\n                     self.log.exception(\"Error connecting to node %d\" % i)\n                     sys.exit(1)\n@@ -282,14 +285,14 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             for i in range(2):\n                 for peer in range(4):\n                     for j in range(25):\n-                        set_node_times(rpcs, block_time)\n-                        rpcs[peer].generate(1)\n+                        set_node_times(self.nodes, block_time)\n+                        self.nodes[peer].generate(1)\n                         block_time += 10 * 60\n                     # Must sync before next peer starts generating blocks\n-                    sync_blocks(rpcs)\n+                    sync_blocks(self.nodes)\n \n             # Shut them down, and clean up cache directories:\n-            stop_nodes(rpcs)\n+            self.stop_nodes()\n             disable_mocktime()\n             for i in range(MAX_NODES):\n                 os.remove(log_filename(cachedir, i, \"debug.log\"))"
      }
    ]
  },
  {
    "sha": "52054c4d139209d3a883adc6e1c674c5651c3ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjA1NGM0ZDEzOTIwOWQzYTg4M2FkYzZlMWM2NzRjNTY1MWMzZmYw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-23T21:05:36Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T16:55:22Z"
      },
      "message": "add start_node() and start_nodes() methods to BitcoinTestFramework",
      "tree": {
        "sha": "bb3aa5bd852e6cb3d58761748580e96abe52a9f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb3aa5bd852e6cb3d58761748580e96abe52a9f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52054c4d139209d3a883adc6e1c674c5651c3ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52054c4d139209d3a883adc6e1c674c5651c3ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52054c4d139209d3a883adc6e1c674c5651c3ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52054c4d139209d3a883adc6e1c674c5651c3ff0/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "490721fcfa8f0f69e5bc9075ad143a26ee6bb811",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/490721fcfa8f0f69e5bc9075ad143a26ee6bb811",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/490721fcfa8f0f69e5bc9075ad143a26ee6bb811"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2ef0c80a38b0ff6079cfd96001ac767758b50bc9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52054c4d139209d3a883adc6e1c674c5651c3ff0/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52054c4d139209d3a883adc6e1c674c5651c3ff0/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=52054c4d139209d3a883adc6e1c674c5651c3ff0",
        "patch": "@@ -29,6 +29,7 @@\n     p2p_port,\n     rpc_url,\n     set_node_times,\n+    start_node,\n     start_nodes,\n     stop_node,\n     stop_nodes,\n@@ -62,14 +63,20 @@ def setup_chain(self):\n         else:\n             self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n \n+    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n+\n+    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+\n     def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)\n \n     def stop_nodes(self):\n         stop_nodes(self.nodes)\n \n     def setup_nodes(self):\n-        return start_nodes(self.num_nodes, self.options.tmpdir)\n+        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def setup_network(self, split = False):\n         self.nodes = self.setup_nodes()\n@@ -336,7 +343,7 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n-        self.nodes = start_nodes(\n+        self.nodes = self.start_nodes(\n             self.num_nodes, self.options.tmpdir,\n             extra_args=[['-whitelist=127.0.0.1']] * self.num_nodes,\n             binary=[self.options.testbinary] +"
      }
    ]
  },
  {
    "sha": "74b3e8b19ab2da2fa607d184b885915db910af12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGIzZThiMTlhYjJkYTJmYTYwN2QxODRiODg1OTE1ZGI5MTBhZjEy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-23T21:48:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T16:55:22Z"
      },
      "message": "Reorganize BitcoinTestFunction class",
      "tree": {
        "sha": "045a416aa75f42c49ef34ae93057564cd3e15f3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/045a416aa75f42c49ef34ae93057564cd3e15f3b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74b3e8b19ab2da2fa607d184b885915db910af12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74b3e8b19ab2da2fa607d184b885915db910af12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74b3e8b19ab2da2fa607d184b885915db910af12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74b3e8b19ab2da2fa607d184b885915db910af12/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52054c4d139209d3a883adc6e1c674c5651c3ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52054c4d139209d3a883adc6e1c674c5651c3ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52054c4d139209d3a883adc6e1c674c5651c3ff0"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 62,
      "deletions": 41
    },
    "files": [
      {
        "sha": "385a63125f48cb85b9fcb52b82feb14db5e39ef5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 62,
        "deletions": 41,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74b3e8b19ab2da2fa607d184b885915db910af12/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74b3e8b19ab2da2fa607d184b885915db910af12/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=74b3e8b19ab2da2fa607d184b885915db910af12",
        "patch": "@@ -40,6 +40,21 @@\n from .authproxy import JSONRPCException\n \n class BitcoinTestFramework(object):\n+    \"\"\"Base class for a bitcoin test script.\n+\n+    Individual bitcoin test scripts should subclass this class and override the following methods:\n+\n+    - __init__()\n+    - add_options()\n+    - setup_chain()\n+    - setup_network()\n+    - run_test()\n+\n+    The main() method should not be overridden.\n+\n+    This class also contains various public and private helper methods.\"\"\"\n+\n+    # Methods to override in subclass test scripts.\n \n     TEST_EXIT_PASSED = 0\n     TEST_EXIT_FAILED = 1\n@@ -50,9 +65,6 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.nodes = None\n \n-    def run_test(self):\n-        raise NotImplementedError\n-\n     def add_options(self, parser):\n         pass\n \n@@ -63,21 +75,6 @@ def setup_chain(self):\n         else:\n             self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n-\n-    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n-\n-    def stop_node(self, num_node):\n-        stop_node(self.nodes[num_node], num_node)\n-\n-    def stop_nodes(self):\n-        stop_nodes(self.nodes)\n-\n-    def setup_nodes(self):\n-        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n-\n     def setup_network(self, split = False):\n         self.nodes = self.setup_nodes()\n \n@@ -97,31 +94,13 @@ def setup_network(self, split = False):\n         self.is_network_split = split\n         self.sync_all()\n \n-    def split_network(self):\n-        \"\"\"\n-        Split the network of four nodes into nodes 0/1 and 2/3.\n-        \"\"\"\n-        assert not self.is_network_split\n-        self.stop_nodes()\n-        self.setup_network(True)\n+    def setup_nodes(self):\n+        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n-    def sync_all(self):\n-        if self.is_network_split:\n-            sync_blocks(self.nodes[:2])\n-            sync_blocks(self.nodes[2:])\n-            sync_mempools(self.nodes[:2])\n-            sync_mempools(self.nodes[2:])\n-        else:\n-            sync_blocks(self.nodes)\n-            sync_mempools(self.nodes)\n+    def run_test(self):\n+        raise NotImplementedError\n \n-    def join_network(self):\n-        \"\"\"\n-        Join the (previously split) network halves together.\n-        \"\"\"\n-        assert self.is_network_split\n-        self.stop_nodes()\n-        self.setup_network(False)\n+    # Main function. This should not be overridden by the subclass test scripts.\n \n     def main(self):\n \n@@ -212,6 +191,48 @@ def main(self):\n             logging.shutdown()\n             sys.exit(self.TEST_EXIT_FAILED)\n \n+    # Public helper methods. These can be accessed by the subclass test scripts.\n+\n+    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n+\n+    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+\n+    def stop_node(self, num_node):\n+        stop_node(self.nodes[num_node], num_node)\n+\n+    def stop_nodes(self):\n+        stop_nodes(self.nodes)\n+\n+    def split_network(self):\n+        \"\"\"\n+        Split the network of four nodes into nodes 0/1 and 2/3.\n+        \"\"\"\n+        assert not self.is_network_split\n+        self.stop_nodes()\n+        self.setup_network(True)\n+\n+    def join_network(self):\n+        \"\"\"\n+        Join the (previously split) network halves together.\n+        \"\"\"\n+        assert self.is_network_split\n+        self.stop_nodes()\n+        self.setup_network(False)\n+\n+    def sync_all(self):\n+        if self.is_network_split:\n+            sync_blocks(self.nodes[:2])\n+            sync_blocks(self.nodes[2:])\n+            sync_mempools(self.nodes[:2])\n+            sync_mempools(self.nodes[2:])\n+        else:\n+            sync_blocks(self.nodes)\n+            sync_mempools(self.nodes)\n+\n+    # Private helper methods. These should not be accessed by the subclass test scripts.\n+\n     def _start_logging(self):\n         # Add logger and logging handlers\n         self.log = logging.getLogger('TestFramework')"
      }
    ]
  },
  {
    "sha": "2177394abf7b8fe0174f9f05caab017f4cd7afb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTc3Mzk0YWJmN2I4ZmUwMTc0ZjlmMDVjYWFiMDE3ZjRjZDdhZmI0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-24T03:56:31Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T16:58:25Z"
      },
      "message": "Use self.st{art,op}_node{,s}() method in BitcoinTestFramework",
      "tree": {
        "sha": "238ffb1c38b7ff3d59e0884d2583217b05271e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/238ffb1c38b7ff3d59e0884d2583217b05271e5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2177394abf7b8fe0174f9f05caab017f4cd7afb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2177394abf7b8fe0174f9f05caab017f4cd7afb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2177394abf7b8fe0174f9f05caab017f4cd7afb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2177394abf7b8fe0174f9f05caab017f4cd7afb4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74b3e8b19ab2da2fa607d184b885915db910af12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74b3e8b19ab2da2fa607d184b885915db910af12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74b3e8b19ab2da2fa607d184b885915db910af12"
      }
    ],
    "stats": {
      "total": 340,
      "additions": 164,
      "deletions": 176
    },
    "files": [
      {
        "sha": "51befd9296705f9fa45368ff29c69b7c960a6ba3",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -23,8 +23,8 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"]))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir))\n         connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):\n@@ -80,8 +80,8 @@ def run_test(self):\n \n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -106,8 +106,8 @@ def run_test(self):\n         balance = newbalance\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -126,8 +126,8 @@ def run_test(self):\n         balance = newbalance\n \n         # Remove using high relay fee again\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "b98e1b90365c8967a5e0af28fc9e225061e5594a",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -66,7 +66,7 @@ def setup_network(self):\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid.\n-        self.nodes = [start_node(0, self.options.tmpdir)]\n+        self.nodes = [self.start_node(0, self.options.tmpdir)]\n \n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n@@ -165,14 +165,14 @@ def run_test(self):\n             height += 1\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n+        self.nodes.append(self.start_node(1, self.options.tmpdir,\n                                      [\"-assumevalid=\" + hex(block102.sha256)]))\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n         node1.wait_for_verack()\n \n-        self.nodes.append(start_node(2, self.options.tmpdir,\n+        self.nodes.append(self.start_node(2, self.options.tmpdir,\n                                      [\"-assumevalid=\" + hex(block102.sha256)]))\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))"
      },
      {
        "sha": "69554893a9a59c7dfb2994b09f9677d156d6f3f4",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -42,7 +42,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-whitelist=127.0.0.1', '-blockversion=3']],\n                                  binary=[self.options.testbinary])\n "
      },
      {
        "sha": "17c978bb8102abae1c5ed19fc6a259f7b77c2e4b",
        "filename": "test/functional/bip65-cltv.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -15,9 +15,9 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False"
      },
      {
        "sha": "4b1e1ba7bf7423a0b5a51f69b19560cb8b17a347",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -98,7 +98,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-whitelist=127.0.0.1', '-blockversion=4']],\n                                  binary=[self.options.testbinary])\n "
      },
      {
        "sha": "41b5c7f76698610623a79945190871b29b32574c",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -24,8 +24,8 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-acceptnonstdtxn=0\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-acceptnonstdtxn=0\"]))\n         self.is_network_split = False\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "b48b745fce1fb9fdde162e5f92b2f1e4b3728a64",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -34,9 +34,9 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1']],\n-                                 binary=[self.options.testbinary])\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n+                                      extra_args=[['-whitelist=127.0.0.1']],\n+                                      binary=[self.options.testbinary])\n \n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n@@ -201,7 +201,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n \n         # Restart all\n         self.test.block_store.close()\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         shutil.rmtree(self.options.tmpdir)\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "fd2e965b5864abe716d15e8b511be7bed508eebe",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -49,7 +49,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-whitelist=127.0.0.1', '-blockversion=2']],\n                                  binary=[self.options.testbinary])\n "
      },
      {
        "sha": "0dd3dbf66dbea1424f03c7a35f9e4d7ddd688018",
        "filename": "test/functional/bipdersig.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -15,9 +15,9 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, []))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False"
      },
      {
        "sha": "337d46f53434bd890ac289e53fa9bf68f378e363",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -19,7 +19,6 @@\n     assert_raises_jsonrpc,\n     assert_is_hex_string,\n     assert_is_hash_string,\n-    start_nodes,\n     connect_nodes_bi,\n )\n \n@@ -32,7 +31,7 @@ def __init__(self):\n         self.num_nodes = 2\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.is_network_split = False\n         self.sync_all()"
      },
      {
        "sha": "adb0fd7e4a5b8440ad46045c231a8e01f054ac66",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -38,12 +38,12 @@ def __init__(self):\n     def setup_network(self, split=False):\n         extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n                       for i in range(self.num_nodes)]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         bitcoind_processes[1].wait()\n-        self.nodes[1] = start_node(1, self.options.tmpdir, extra_args[1])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "86156ff5405c87d1b6551c44084857eed40d4545",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -17,7 +17,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         self.is_network_split = False\n \n     def decodescript_script_sig(self):"
      },
      {
        "sha": "fc65499277c1a9da68e92bb75901946c443fff05",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -20,7 +20,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [['-disablewallet']])\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [['-disablewallet']])\n         self.is_network_split = False\n         self.sync_all()\n "
      },
      {
        "sha": "0605327f12e748305280e7cc99793ae060eaa864",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -21,10 +21,10 @@ def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n-        self.nodes.append(start_node(0, self.options.tmpdir,\n+        self.nodes.append(self.start_node(0, self.options.tmpdir,\n                             [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n         # Node1 mines block.version=211 blocks\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n+        self.nodes.append(self.start_node(1, self.options.tmpdir,\n                                 [\"-blockversion=211\"]))\n         connect_nodes(self.nodes[1], 0)\n "
      },
      {
        "sha": "bd260e462b6d79729444621d3b945bbe292a9506",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -23,7 +23,7 @@ def __init__(self):\n         self.num_nodes = 4\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n@@ -447,12 +447,12 @@ def run_test(self):\n         ############################################################\n         # locked wallet test\n         self.nodes[1].encryptwallet(\"test\")\n+        self.stop_node(0)\n+        self.stop_node(2)\n+        self.stop_node(3)\n         self.nodes.pop(1)\n-        stop_node(self.nodes[0], 0)\n-        stop_node(self.nodes[1], 2)\n-        stop_node(self.nodes[2], 3)\n \n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:"
      },
      {
        "sha": "4fc507821760e8492e32fe1ccd8a622a573de719",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -21,7 +21,7 @@\n \n from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -121,7 +121,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n "
      },
      {
        "sha": "24d795e2b8b383ed53260a7bd6682c6e83c2fb48",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -13,7 +13,7 @@ def __init__(self):\n         self.setup_clean_chain = True\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.nodes = self.start_nodes(2, self.options.tmpdir)\n         self.is_network_split=False\n \n     def run_test (self):\n@@ -429,8 +429,8 @@ def run_test (self):\n \n \n         # restart nodes to check for proper serialization/deserialization of watch only address\n-        stop_nodes(self.nodes)\n-        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(2, self.options.tmpdir)\n         address_assert = self.nodes[1].validateaddress(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)"
      },
      {
        "sha": "5f6680b7f3dc7043de25f653d63db7e9dc79d729",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -15,7 +15,7 @@ def __init__(self):\n         self.num_nodes = 2\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         self.is_network_split=False\n         self.sync_all()"
      },
      {
        "sha": "8fa0dd9dcfdc22d08f4368f6feb955c6ca9bb577",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -18,9 +18,9 @@ def __init__(self):\n     def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False \n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n-        self.nodes.append(start_node(2, self.options.tmpdir))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir))\n         \n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")"
      },
      {
        "sha": "87c6a82df5ad59271e2f90cdda2d5263943d1f10",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -20,7 +20,7 @@ def run_test(self):\n         nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n         # Restart node 0\n-        nodes[0] = start_node(0, self.options.tmpdir)\n+        nodes[0] = self.start_node(0, self.options.tmpdir)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)"
      },
      {
        "sha": "eef0d5c21bad152e7cca447cf34240ba53b0adca",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return start_nodes(self.num_nodes, self.options.tmpdir)\n+        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "fe1b94666dc3a48e79c26e4bfbf83bb2626ccc75",
        "filename": "test/functional/maxblocksinflight.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxblocksinflight.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -81,9 +81,9 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1']],\n-                                 binary=[self.options.testbinary])\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n+                                      extra_args=[['-whitelist=127.0.0.1']],\n+                                      binary=[self.options.testbinary])\n \n     def run_test(self):\n         test = TestManager()"
      },
      {
        "sha": "f6c8c287c6c18b97a9358ed674b82b587d434a49",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -90,7 +90,7 @@ def __init__(self):\n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n \n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n@@ -198,8 +198,8 @@ def run_test(self):\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n-        stop_node(self.nodes[0], 0)\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect 3 test nodes\n         test_nodes = []"
      },
      {
        "sha": "1ff34c49e6b5be8b1deb958890455bf20743e09a",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -11,7 +11,7 @@ class MempoolLimitTest(BitcoinTestFramework):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\"]))\n         self.is_network_split = False\n         self.sync_all()\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "7bc619de5339cb1224cc4589c3594528475ce582",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -19,8 +19,8 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\"]))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]))\n         connect_nodes(self.nodes[0], 1)\n         self.is_network_split = False\n         self.sync_all()"
      },
      {
        "sha": "09eadd7f6682c70f1bc6cd2cfbdf0b094287746e",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -23,8 +23,8 @@ def __init__(self):\n     def setup_network(self):\n         args = [\"-checkmempool\"]\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n-        self.nodes.append(start_node(1, self.options.tmpdir, args))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, args))\n         connect_nodes(self.nodes[1], 0)\n         self.is_network_split = False\n         self.sync_all()"
      },
      {
        "sha": "5ef6bf028fb138599bff311be22c8762ed7842fa",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -19,7 +19,7 @@ def setup_network(self):\n         # Just need one node for this test\n         args = [\"-checkmempool\"]\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, args))\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "329645a27e8b1359dd8c7e632ea038f2a869889f",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -27,7 +27,7 @@ def setup_network(self):\n         # Just need one node for this test\n         args = [\"-checkmempool\"]\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, args))\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "f7e674e185f66c12a8bce2394f9beba5c49a92c3",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -17,11 +17,11 @@ def __init__(self):\n     def setup_network(self):\n         self.nodes = []\n         # Nodes 0/1 are \"wallet\" nodes\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir))\n         # Nodes 2/3 are used for testing\n-        self.nodes.append(start_node(2, self.options.tmpdir))\n-        self.nodes.append(start_node(3, self.options.tmpdir, [\"-txindex\"]))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir))\n+        self.nodes.append(self.start_node(3, self.options.tmpdir, [\"-txindex\"]))\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "d4c2d3f7731a80dd56656ec575d1fc8f57dc1c9e",
        "filename": "test/functional/nodehandling.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nodehandling.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -52,9 +52,9 @@ def run_test(self):\n         time.sleep(2) #make 100% sure we expired 192.168.0.1 node time\n \n         #stop node\n-        stop_node(self.nodes[2], 2)\n+        self.stop_node(2)\n \n-        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n         listAfterShutdown = self.nodes[2].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])"
      },
      {
        "sha": "caa31c7a9959a646a80f38c3fe8c6e2687aa3085",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -44,7 +44,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n                                  extra_args=[['-whitelist=127.0.0.1', '-walletprematurewitness']])\n \n     def run_test(self):"
      },
      {
        "sha": "eea7384d4534764a5b2d5fa6eb899344eb7aaeb5",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -119,11 +119,11 @@ def setup_network(self):\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir,\n-                                     binary=self.options.testbinary))\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n-                                     [\"-whitelist=127.0.0.1\"],\n-                                     binary=self.options.testbinary))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir,\n+                                          binary=self.options.testbinary))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir,\n+                                          [\"-whitelist=127.0.0.1\"],\n+                                          binary=self.options.testbinary))\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread."
      },
      {
        "sha": "d1c50da3874c51a2e967728bb8d9178851eee748",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -119,7 +119,7 @@ def setup_network(self):\n         self.nodes = []\n \n         # Start up node0 to be a version 1, pre-segwit node.\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, \n                 [[\"-bip9params=segwit:0:0\"], \n                  [\"-txindex\"]])\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "73fb8ca6dfad976919718b357637921d581748ab",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -53,8 +53,8 @@ def setup_network(self):\n         # Node1 will be used to generate txs which should be relayed from Node0\n         # to our test node\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir))\n         connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):"
      },
      {
        "sha": "0f867308398db5435c5bf88c1c3e7d0b1c6330ed",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -104,7 +104,7 @@ def __init__(self):\n     def setup_network(self):\n         extra_args = [['-banscore='+str(banscore)]\n                       for i in range(self.num_nodes)]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n     def run_test(self):\n         no_version_bannode = CNodeNoVersionBan()"
      },
      {
        "sha": "7b71ac20e1d71790d7ed6de8a6bb25238df2055e",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -85,7 +85,7 @@ def __init__(self):\n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-peerbloomfilters=0\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-peerbloomfilters=0\"]))\n \n     def run_test(self):\n         #connect a mininode"
      },
      {
        "sha": "ba71158753fd3935167381a5579a9b5d6f67679c",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -194,13 +194,13 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\"]))\n         # Start a node for testing IsStandard rules.\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n         connect_nodes(self.nodes[0], 1)\n \n         # Disable segwit's bip9 parameter to simulate upgrading after activation.\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\"]))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\"]))\n         connect_nodes(self.nodes[0], 2)\n \n     ''' Helpers '''\n@@ -1571,8 +1571,8 @@ def test_upgrade_after_activation(self, node, node_id):\n         sync_blocks(self.nodes)\n \n         # Restart with the new binary\n-        stop_node(node, node_id)\n-        self.nodes[node_id] = start_node(node_id, self.options.tmpdir)\n+        self.stop_node(node_id)\n+        self.nodes[node_id] = self.start_node(node_id, self.options.tmpdir)\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "3c6fa2b2e7121d1b38ffd53a4d96743df5de23b7",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -53,7 +53,7 @@ def setup_network(self):\n         self.nodes = []\n \n         # Start up node0 to be a version 1, pre-segwit node.\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread."
      },
      {
        "sha": "4d2d92c4e7d1b1f5276837afbf5bf758ff25bc73",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -73,7 +73,7 @@ def setup_network(self):\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n     # Send numblocks blocks via peer with nVersionToUse set.\n     def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n@@ -142,22 +142,22 @@ def run_test(self):\n         # is cleared, and restart the node. This should move the versionbit state\n         # to ACTIVE.\n         self.nodes[0].generate(VB_PERIOD)\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getinfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "cf2471c93bc1cde8f7b0244de995eb41c5a3ffa0",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -21,7 +21,7 @@ def setup_network(self):\n         self.nodes = []\n         self.is_network_split = False\n \n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-printpriority=1\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-printpriority=1\"]))\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n     def run_test(self):"
      },
      {
        "sha": "1acb3c4e2b2e1c1c74e654716333896b0368871d",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -35,7 +35,6 @@\n from test_framework.util import (\n     PORT_MIN,\n     PORT_RANGE,\n-    start_nodes,\n     assert_equal,\n )\n from test_framework.netutil import test_ipv6_local\n@@ -90,7 +89,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        return start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        return self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "1daee5469b4c3d13c04e8125f2e1ba8b0bde5354",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -41,19 +41,19 @@ def setup_network(self):\n         self.is_network_split = False\n \n         # Create nodes 0 and 1 to mine\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n \n         # Create node 2 to test pruning\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=900))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=900))\n         self.prunedir = self.options.tmpdir+\"/node2/regtest/blocks/\"\n \n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n-        self.nodes.append(start_node(3, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n-        self.nodes.append(start_node(4, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n+        self.nodes.append(self.start_node(3, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n+        self.nodes.append(self.start_node(4, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n \n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.nodes.append(start_node(5, self.options.tmpdir, [\"-prune=550\"]))\n+        self.nodes.append(self.start_node(5, self.options.tmpdir, [\"-prune=550\"]))\n \n         # Determine default relay fee\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n@@ -107,7 +107,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             self.stop_node(0)\n-            self.nodes[0]=start_node(0, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n+            self.nodes[0]=self.start_node(0, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n                 if j == 0:\n@@ -132,7 +132,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         self.stop_node(1)\n-        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n         self.log.info(\"Current block height: %d\" % height)\n@@ -155,7 +155,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n-        self.nodes[1]=start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n@@ -228,13 +228,13 @@ def reorg_back(self):\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n-        node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, timewait=900)\n+        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, timewait=900)\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n         self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n-        node = self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n+        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n \n         def height(index):\n@@ -308,15 +308,15 @@ def has_block(index):\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n         self.stop_node(node_number)\n-        self.nodes[node_number] = start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n+        self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads loads successfully when restarting a pruned node after IBD.\n@@ -326,7 +326,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "8b41e4b80f208ff18ade0e4333de5c64801f5981",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n         #connect to a local machine for debugging\n         #url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)"
      },
      {
        "sha": "b5727a3793a93b379db6d677f54ed448e5e757cc",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -32,7 +32,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return start_nodes(self.num_nodes, self.options.tmpdir)\n+        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "135e7bcc12b3cd5f82d237db40a15344711be968",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -10,11 +10,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    start_nodes,\n-    stop_nodes,\n-    assert_equal,\n-)\n+from test_framework.util import assert_equal\n import time\n \n class ReindexTest(BitcoinTestFramework):\n@@ -25,14 +21,14 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "d858ff1a6a834b0f6ded7e316f043522235fd2b9",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -68,13 +68,13 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-whitelist=127.0.0.1\",\n-                                                              \"-limitancestorcount=50\",\n-                                                              \"-limitancestorsize=101\",\n-                                                              \"-limitdescendantcount=200\",\n-                                                              \"-limitdescendantsize=101\"\n-                                                              ]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n+                                                                   \"-whitelist=127.0.0.1\",\n+                                                                   \"-limitancestorcount=50\",\n+                                                                   \"-limitancestorsize=101\",\n+                                                                   \"-limitdescendantcount=200\",\n+                                                                   \"-limitdescendantsize=101\"\n+                                                                   ]))\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "584b1cf1bf8a4f3367cea6bbd01ac8d7763710f2",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -49,7 +49,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)"
      },
      {
        "sha": "533acc532e794de2f0225a925473924e9e0dfeac",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -36,22 +36,22 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         if allow_ips:\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n         pid = bitcoind_processes[0].pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n         Start a node with rpcallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n         # connect to node through non-loopback interface\n         node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n         node.getnetworkinfo()\n-        stop_nodes(self.nodes)\n+        self.stop_nodes()\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux"
      },
      {
        "sha": "b6881f6d958a489cc3a72e4f2c51d65973dc44cc",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n-    start_nodes,\n )\n \n \n@@ -23,7 +22,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         self.is_network_split = False\n         self.sync_all()\n "
      },
      {
        "sha": "b6a40e1299c040b6a2f4d562e7b797466fa596d4",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -83,9 +83,9 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-walletprematurewitness\", \"-rpcserialversion=0\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]))\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-walletprematurewitness\", \"-rpcserialversion=0\"]))\n+        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"]))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]))\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 1)\n         connect_nodes(self.nodes[0], 2)"
      },
      {
        "sha": "cc31e9e5820e75c2face607897d6a42f4aa42961",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -229,7 +229,7 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes(self.nodes[0], 1)\n \n     # mine count blocks and return the new tip"
      },
      {
        "sha": "84e0c9232332c0d824507d9032299ae9293b57c1",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -15,7 +15,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "c6cdfb3b36b5fda73aee4a4ef9589ecdcfa7e045",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -15,7 +15,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         self.is_network_split = False\n \n     def successful_signing_test(self):"
      },
      {
        "sha": "5ca88d4338cd6d0d7c6307f05ab833e37bb55446",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -155,7 +155,7 @@ def setup_network(self):\n         \"\"\"\n         self.nodes = []\n         # Use node0 to mine blocks for input splitting\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n+        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n                                                               \"-whitelist=127.0.0.1\"]))\n \n         self.log.info(\"This test is time consuming, please be patient\")\n@@ -191,15 +191,15 @@ def setup_network(self):\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n+        self.nodes.append(self.start_node(1, self.options.tmpdir,\n                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"]))\n         connect_nodes(self.nodes[1], 0)\n \n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n         node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n \n-        self.nodes.append(start_node(2, self.options.tmpdir, node2args))\n+        self.nodes.append(self.start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[2], 1)\n "
      },
      {
        "sha": "2efd2a28794b1f7a9abe7be4143ab3d993438731",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -13,10 +13,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    start_nodes,\n-    assert_equal,\n-)\n+from test_framework.util import assert_equal\n \n class WalletAccountsTest(BitcoinTestFramework):\n \n@@ -27,7 +24,7 @@ def __init__(self):\n         self.node_args = [[]]\n \n     def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n         self.is_network_split = False\n \n     def run_test (self):"
      },
      {
        "sha": "99a8028c77251c23305cf346807c2ae50c153686",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the dumpwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_nodes, start_node, assert_equal, bitcoind_processes)\n+from test_framework.util import (assert_equal, bitcoind_processes)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -66,7 +66,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n@@ -93,7 +93,7 @@ def run_test (self):\n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n         bitcoind_processes[0].wait()\n-        self.nodes[0] = start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "7c0d013af6f948f3148d2cfe82506365ca675550",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -6,8 +6,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n-    start_nodes,\n-    start_node,\n     assert_equal,\n     connect_nodes_bi,\n     assert_start_raises_init_error\n@@ -25,7 +23,7 @@ def __init__(self):\n         self.node_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]\n \n     def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n         self.is_network_split = False\n         connect_nodes_bi(self.nodes, 0, 1)\n \n@@ -35,7 +33,7 @@ def run_test (self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n         assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.node_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -72,7 +70,7 @@ def run_test (self):\n         self.stop_node(1)\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.node_args[1])\n         #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n@@ -86,7 +84,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1] + ['-rescan'])\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.node_args[1] + ['-rescan'])\n         #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n "
      },
      {
        "sha": "ff7f749e1a32a00de3abe11f753be6b64eb9395a",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n+        self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -155,7 +155,7 @@ def run_test (self):\n         txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         sync_mempools(self.nodes)\n \n-        self.nodes.append(start_node(3, self.options.tmpdir, self.extra_args[3]))\n+        self.nodes.append(self.start_node(3, self.options.tmpdir, self.extra_args[3]))\n         connect_nodes_bi(self.nodes, 0, 3)\n         sync_blocks(self.nodes)\n \n@@ -198,8 +198,8 @@ def run_test (self):\n         assert(found)\n \n         #do some -walletbroadcast tests\n-        stop_nodes(self.nodes)\n-        self.nodes = start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -223,8 +223,8 @@ def run_test (self):\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n \n         #restart the nodes with -walletbroadcast=1\n-        stop_nodes(self.nodes)\n-        self.nodes = start_nodes(3, self.options.tmpdir)\n+        self.stop_nodes()\n+        self.nodes = self.start_nodes(3, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -325,9 +325,9 @@ def run_test (self):\n         chainlimit = 6\n         for m in maintenance:\n             self.log.info(\"check \" + m)\n-            stop_nodes(self.nodes)\n+            self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.nodes = start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n+            self.nodes = self.start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -374,8 +374,8 @@ def run_test (self):\n \n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n-        stop_node(self.nodes[0],0)\n-        self.nodes[0] = start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.stop_node(0)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "6ac54dbfc8f241358ea7d9ef1f629a5e51867a14",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -46,7 +46,7 @@ def __init__(self):\n \n     # This mirrors how the network was setup in the bash test\n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)\n@@ -79,18 +79,18 @@ def do_one_round(self):\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n-        self.nodes[0] = start_node(0, self.options.tmpdir)\n-        self.nodes[1] = start_node(1, self.options.tmpdir)\n-        self.nodes[2] = start_node(2, self.options.tmpdir)\n+        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n+        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)\n         connect_nodes(self.nodes[2], 0)\n \n     def stop_three(self):\n-        stop_node(self.nodes[0], 0)\n-        stop_node(self.nodes[1], 1)\n-        stop_node(self.nodes[2], 2)\n+        self.stop_node(0)\n+        self.stop_node(1)\n+        self.stop_node(2)\n \n     def erase_three(self):\n         os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")"
      },
      {
        "sha": "e2abf4a11a5696880081797b777e81ee5ec80d48",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -64,7 +64,7 @@ def run_test (self):\n         #restart bitcoind\n         self.nodes[0].stop()\n         bitcoind_processes[0].wait()\n-        self.nodes[0] = start_node(0,self.options.tmpdir)\n+        self.nodes[0] = self.start_node(0,self.options.tmpdir)\n         \n         tx3 = self.nodes[0].gettransaction(txid3)\n         assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n@@ -73,7 +73,7 @@ def run_test (self):\n         bitcoind_processes[0].wait()\n         \n         #restart bitcoind with zapwallettxes\n-        self.nodes[0] = start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n         \n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n         #there must be a expection because the unconfirmed wallettx0 must be gone by now"
      },
      {
        "sha": "396fe08c5e152d1d4d666db95d2cd65af4d6abd2",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2177394abf7b8fe0174f9f05caab017f4cd7afb4/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "patch": "@@ -23,7 +23,7 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        return start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n+        return self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n             [],\n             [],"
      }
    ]
  },
  {
    "sha": "8abb09a2d3ade74be4e5f8e85014e2146369598c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWJiMDlhMmQzYWRlNzRiZTRlNWY4ZTg1MDE0ZTIxNDYzNjk1OThj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-24T13:42:14Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T16:58:25Z"
      },
      "message": "Move global state to BitcoinTestFramework\n\nThis commit moves functions st{art,op}_nodes{,s}() functions\nand bitcoind_processes and coverage variables into BitcoinTestFramework",
      "tree": {
        "sha": "7635eb2255f7e8d0dd997b4caf1d2a3ce8c2e0e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7635eb2255f7e8d0dd997b4caf1d2a3ce8c2e0e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8abb09a2d3ade74be4e5f8e85014e2146369598c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abb09a2d3ade74be4e5f8e85014e2146369598c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8abb09a2d3ade74be4e5f8e85014e2146369598c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abb09a2d3ade74be4e5f8e85014e2146369598c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2177394abf7b8fe0174f9f05caab017f4cd7afb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2177394abf7b8fe0174f9f05caab017f4cd7afb4"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 112,
      "deletions": 148
    },
    "files": [
      {
        "sha": "4b9a25549d477306c9f5d109684805d4ad153afc",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -15,6 +15,10 @@\n test that enforcement has not triggered (which triggers ACTIVE)\n test that enforcement has triggered\n \"\"\"\n+import itertools\n+from io import BytesIO\n+import shutil\n+import time\n \n from test_framework.blockstore import BlockStore\n from test_framework.test_framework import ComparisonTestFramework\n@@ -23,9 +27,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n-from io import BytesIO\n-import time\n-import itertools\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n "
      },
      {
        "sha": "31af5f7ca619c4198c6b40b9883f73156d7c2682",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -42,7 +42,7 @@ def setup_network(self, split=False):\n \n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n-        bitcoind_processes[1].wait()\n+        self.bitcoind_processes[1].wait()\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n "
      },
      {
        "sha": "c16101e6073c5819f0d658ec0bfd39321d9cfe39",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -18,7 +18,7 @@ def run_test(self):\n         \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n-        bitcoind_processes[0].wait()\n+        self.bitcoind_processes[0].wait()\n         # Restart node 0\n         nodes[0] = self.start_node(0, self.options.tmpdir)\n         # Keep creating keys"
      },
      {
        "sha": "d0119e16a1df6f1c8c71fdfca63ed2e1bead8fbc",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -37,7 +37,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        pid = bitcoind_processes[0].pid\n+        pid = self.bitcoind_processes[0].pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n "
      },
      {
        "sha": "072fc03ba23f91126c306d4300c2a6432f7d2493",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 95,
        "deletions": 21,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -4,6 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\"\n \n+import errno\n+import http.client\n import logging\n import optparse\n import os\n@@ -13,14 +15,14 @@\n import tempfile\n import time\n \n+from . import coverage\n from .util import (\n-    PortSeed,\n     MAX_NODES,\n-    bitcoind_processes,\n+    PortSeed,\n+    assert_equal,\n     check_json_precision,\n     connect_nodes_bi,\n     disable_mocktime,\n-    enable_coverage,\n     enable_mocktime,\n     get_mocktime,\n     get_rpc_proxy,\n@@ -29,16 +31,13 @@\n     p2p_port,\n     rpc_url,\n     set_node_times,\n-    start_node,\n-    start_nodes,\n-    stop_node,\n-    stop_nodes,\n     sync_blocks,\n     sync_mempools,\n-    wait_for_bitcoind_start,\n )\n from .authproxy import JSONRPCException\n \n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n@@ -64,6 +63,7 @@ def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None\n+        self.bitcoind_processes = {}\n \n     def add_options(self, parser):\n         pass\n@@ -129,9 +129,6 @@ def main(self):\n         # backup dir variable for removal at cleanup\n         self.options.root, self.options.tmpdir = self.options.tmpdir, self.options.tmpdir + '/' + str(self.options.port_seed)\n \n-        if self.options.coveragedir:\n-            enable_coverage(self.options.coveragedir)\n-\n         PortSeed.n = self.options.port_seed\n \n         os.environ['PATH'] = self.options.srcdir+\":\"+self.options.srcdir+\"/qt:\"+os.environ['PATH']\n@@ -193,17 +190,74 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        return start_node(i, dirname, extra_args, rpchost, timewait, binary, stderr)\n-\n     def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        return start_nodes(num_nodes, dirname, extra_args, rpchost, timewait, binary)\n+        \"\"\"Start multiple bitcoinds, return RPC connections to them.\"\"\"\n+        if extra_args is None:\n+            extra_args = [None for _ in range(num_nodes)]\n+        if binary is None:\n+            binary = [None for _ in range(num_nodes)]\n+        rpcs = []\n+        try:\n+            for i in range(num_nodes):\n+                rpcs.append(self.start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+        except:  # If one node failed to start, stop the others\n+            self.stop_nodes()\n+            raise\n+        return rpcs\n+\n+    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+        \"\"\"Start a bitcoind and return RPC connection to it.\"\"\"\n+        datadir = os.path.join(dirname, \"node\" + str(i))\n+        if binary is None:\n+            binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\" + str(get_mocktime())]\n+        if extra_args is not None:\n+            args.extend(extra_args)\n+        self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n+        self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n+        url = rpc_url(i, rpchost)\n+        self._wait_for_bitcoind_start(self.bitcoind_processes[i], url, i)\n+        self.log.debug(\"initialize_chain: RPC successfully started\")\n+        proxy = get_rpc_proxy(url, i, timeout=timewait, coveragedir=self.options.coveragedir)\n \n-    def stop_node(self, num_node):\n-        stop_node(self.nodes[num_node], num_node)\n+        if self.options.coveragedir:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, proxy)\n+\n+        return proxy\n+\n+    def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n+        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+            try:\n+                node = self.start_node(i, dirname, extra_args, stderr=log_stderr)\n+                self.stop_node(i)\n+            except Exception as e:\n+                assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                if expected_msg is not None:\n+                    log_stderr.seek(0)\n+                    stderr = log_stderr.read().decode('utf-8')\n+                    if expected_msg not in stderr:\n+                        raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n+            else:\n+                if expected_msg is None:\n+                    assert_msg = \"bitcoind should have exited with an error\"\n+                else:\n+                    assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n+                raise AssertionError(assert_msg)\n \n     def stop_nodes(self):\n-        stop_nodes(self.nodes)\n+        for i in range(len(self.nodes)):\n+            self.stop_node(i)\n+        assert not self.bitcoind_processes.values()  # All connections must be gone now\n+\n+    def stop_node(self, i):\n+        self.log.debug(\"Stopping node %d\" % i)\n+        try:\n+            self.nodes[i].stop()\n+        except http.client.CannotSendRequest as e:\n+            self.log.exception(\"Unable to stop node %d\" % i)\n+        return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        assert_equal(return_code, 0)\n+        del self.bitcoind_processes[i]\n \n     def split_network(self):\n         \"\"\"\n@@ -288,15 +342,15 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                bitcoind_processes[i] = subprocess.Popen(args)\n+                self.bitcoind_processes[i] = subprocess.Popen(args)\n                 self.logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n+                self._wait_for_bitcoind_start(self.bitcoind_processes[i], rpc_url(i), i)\n                 self.logger.debug(\"initialize_chain: RPC successfully started\")\n \n             self.nodes = []\n             for i in range(MAX_NODES):\n                 try:\n-                    self.nodes.append(get_rpc_proxy(rpc_url(i), i))\n+                    self.nodes.append(get_rpc_proxy(rpc_url(i), i, coveragedir=self.options.coveragedir))\n                 except:\n                     self.log.exception(\"Error connecting to node %d\" % i)\n                     sys.exit(1)\n@@ -342,6 +396,26 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n         for i in range(num_nodes):\n             initialize_datadir(test_dir, i)\n \n+    def _wait_for_bitcoind_start(self, process, url, i):\n+        \"\"\"Wait for bitcoind to start.\n+\n+        This means that RPC is accessible and fully initialized.\n+        Raise an exception if bitcoind exits during initialization.\"\"\"\n+        while True:\n+            if process.poll() is not None:\n+                raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n+            try:\n+                rpc = get_rpc_proxy(url, i, coveragedir=self.options.coveragedir)\n+                rpc.getblockcount()\n+                break  # break out of loop on success\n+            except IOError as e:\n+                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                    raise  # unknown IO error\n+            except JSONRPCException as e:  # Initialization phase\n+                if e.error['code'] != -28:  # RPC in warmup?\n+                    raise  # unknown JSON RPC exception\n+            time.sleep(0.25)\n+\n # Test framework for doing p2p comparison testing, which sets up some bitcoind\n # binaries:\n # 1 binary: test binary"
      },
      {
        "sha": "25ad5a49f1da1f1ee70bf30446bbec250aac3927",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 112,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -5,27 +5,19 @@\n \"\"\"Helpful routines for regression testing.\"\"\"\n \n import os\n-import sys\n \n from binascii import hexlify, unhexlify\n from base64 import b64encode\n from decimal import Decimal, ROUND_DOWN\n import json\n-import http.client\n import random\n-import shutil\n-import subprocess\n-import tempfile\n import time\n import re\n-import errno\n import logging\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n \n-COVERAGE_DIR = None\n-\n logger = logging.getLogger(\"TestFramework.utils\")\n \n # The maximum number of nodes a single test can spawn\n@@ -35,9 +27,6 @@\n # The number of ports to \"reserve\" for p2p and rpc, each\n PORT_RANGE = 5000\n \n-BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n-\n class PortSeed:\n     # Must be initialized with a unique integer for each process\n     n = None\n@@ -63,13 +52,7 @@ def disable_mocktime():\n def get_mocktime():\n     return MOCKTIME\n \n-def enable_coverage(dirname):\n-    \"\"\"Maintain a log of which RPC calls are made during testing.\"\"\"\n-    global COVERAGE_DIR\n-    COVERAGE_DIR = dirname\n-\n-\n-def get_rpc_proxy(url, node_number, timeout=None):\n+def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n     \"\"\"\n     Args:\n         url (str): URL of the RPC server to call\n@@ -90,7 +73,7 @@ def get_rpc_proxy(url, node_number, timeout=None):\n     proxy.url = url  # store URL on proxy for info\n \n     coverage_logfile = coverage.get_filename(\n-        COVERAGE_DIR, node_number) if COVERAGE_DIR else None\n+        coveragedir, node_number) if coveragedir else None\n \n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n \n@@ -175,8 +158,6 @@ def sync_mempools(rpc_connections, *, wait=1, timeout=60):\n         timeout -= wait\n     raise AssertionError(\"Mempool sync failed\")\n \n-bitcoind_processes = {}\n-\n def initialize_datadir(dirname, n):\n     datadir = os.path.join(dirname, \"node\"+str(n))\n     if not os.path.isdir(datadir):\n@@ -206,100 +187,9 @@ def rpc_url(i, rpchost=None):\n             host = rpchost\n     return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n-def wait_for_bitcoind_start(process, url, i):\n-    '''\n-    Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n-    Raise an exception if bitcoind exits during initialization.\n-    '''\n-    while True:\n-        if process.poll() is not None:\n-            raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n-        try:\n-            rpc = get_rpc_proxy(url, i)\n-            blocks = rpc.getblockcount()\n-            break # break out of loop on success\n-        except IOError as e:\n-            if e.errno != errno.ECONNREFUSED: # Port not yet open?\n-                raise # unknown IO error\n-        except JSONRPCException as e: # Initialization phase\n-            if e.error['code'] != -28: # RPC in warmup?\n-                raise # unknown JSON RPC exception\n-        time.sleep(0.25)\n-\n-\n-def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-    \"\"\"\n-    Start a bitcoind and return RPC connection to it\n-    \"\"\"\n-    datadir = os.path.join(dirname, \"node\"+str(i))\n-    if binary is None:\n-        binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\"+str(get_mocktime()) ]\n-    if extra_args is not None: args.extend(extra_args)\n-    bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-    logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-    url = rpc_url(i, rpchost)\n-    wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n-    logger.debug(\"initialize_chain: RPC successfully started\")\n-    proxy = get_rpc_proxy(url, i, timeout=timewait)\n-\n-    if COVERAGE_DIR:\n-        coverage.write_all_rpc_commands(COVERAGE_DIR, proxy)\n-\n-    return proxy\n-\n-def assert_start_raises_init_error(i, dirname, extra_args=None, expected_msg=None):\n-    with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n-        try:\n-            node = start_node(i, dirname, extra_args, stderr=log_stderr)\n-            stop_node(node, i)\n-        except Exception as e:\n-            assert 'bitcoind exited' in str(e) #node must have shutdown\n-            if expected_msg is not None:\n-                log_stderr.seek(0)\n-                stderr = log_stderr.read().decode('utf-8')\n-                if expected_msg not in stderr:\n-                    raise AssertionError(\"Expected error \\\"\" + expected_msg + \"\\\" not found in:\\n\" + stderr)\n-        else:\n-            if expected_msg is None:\n-                assert_msg = \"bitcoind should have exited with an error\"\n-            else:\n-                assert_msg = \"bitcoind should have exited with expected error \" + expected_msg\n-            raise AssertionError(assert_msg)\n-\n-def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-    \"\"\"\n-    Start multiple bitcoinds, return RPC connections to them\n-    \"\"\"\n-    if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n-    if binary is None: binary = [ None for _ in range(num_nodes) ]\n-    rpcs = []\n-    try:\n-        for i in range(num_nodes):\n-            rpcs.append(start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n-    except: # If one node failed to start, stop the others\n-        stop_nodes(rpcs)\n-        raise\n-    return rpcs\n-\n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)\n \n-def stop_node(node, i):\n-    logger.debug(\"Stopping node %d\" % i)\n-    try:\n-        node.stop()\n-    except http.client.CannotSendRequest as e:\n-        logger.exception(\"Unable to stop node\")\n-    return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    assert_equal(return_code, 0)\n-    del bitcoind_processes[i]\n-\n-def stop_nodes(nodes):\n-    for i, node in enumerate(nodes):\n-        stop_node(node, i)\n-    assert not bitcoind_processes.values() # All connections must be gone now\n-\n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)"
      },
      {
        "sha": "15544ebf9018ba0906069b7392b59755b35aebbc",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the dumpwallet RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, bitcoind_processes)\n+from test_framework.util import assert_equal\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -92,7 +92,7 @@ def run_test (self):\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n-        bitcoind_processes[0].wait()\n+        self.bitcoind_processes[0].wait()\n         self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:"
      },
      {
        "sha": "ebcbd7e3f20aa773f42f829638f23cd791544bc7",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    assert_start_raises_init_error\n )\n import os\n import shutil\n@@ -32,7 +31,7 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n+        self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, self.node_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n "
      },
      {
        "sha": "73efb444d481907d912dec09caf7232c536c71ca",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -31,9 +31,11 @@\n and confirm again balances are correct.\n \"\"\"\n \n+from random import randint\n+import shutil\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from random import randint\n \n class WalletBackupTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "add853c2dee4787835e4a12349063c22516039d8",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8abb09a2d3ade74be4e5f8e85014e2146369598c/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "patch": "@@ -62,15 +62,13 @@ def run_test (self):\n         assert_equal(tx3['txid'], txid3) #tx3 must be available (unconfirmed)\n         \n         #restart bitcoind\n-        self.nodes[0].stop()\n-        bitcoind_processes[0].wait()\n+        self.stop_node(0)\n         self.nodes[0] = self.start_node(0,self.options.tmpdir)\n         \n         tx3 = self.nodes[0].gettransaction(txid3)\n         assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n         \n-        self.nodes[0].stop()\n-        bitcoind_processes[0].wait()\n+        self.stop_node(0)\n         \n         #restart bitcoind with zapwallettxes\n         self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])"
      }
    ]
  },
  {
    "sha": "acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2Y5MjRjNmFhNWRiYWZlM2JmNmNmNmEyMmMxMDM0ZWVkYTMyNmIy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-24T17:55:19Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T17:00:12Z"
      },
      "message": "Add default values to start_node() and start_nodes()\n\nThis commit adds default values to the num_nodes and dirname arguments\nin start_node() and start_nodes(). All calls to these methods used\nself.options.tmpdir and most used self.num_nodes for these values.\nHaving those as the defaults simplifies the interface.\n\nThis commit also changes sequential start_node() calls to a single\nstart_nodes() call where possible. When start_nodes() is updated to\nstart nodes in parallel this will make test startup faster.",
      "tree": {
        "sha": "04242da0cc94f0dc785c9047baf66f5be40382fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04242da0cc94f0dc785c9047baf66f5be40382fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8abb09a2d3ade74be4e5f8e85014e2146369598c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8abb09a2d3ade74be4e5f8e85014e2146369598c"
      }
    ],
    "stats": {
      "total": 364,
      "additions": 151,
      "deletions": 213
    },
    "files": [
      {
        "sha": "49e2e7bf22e40393d2558005be85fe873dd90c52",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -22,9 +22,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"]))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n+        self.nodes = self.start_nodes(extra_args=[[], [\"-minrelaytxfee=0.00001\"]])\n         connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):\n@@ -81,7 +79,7 @@ def run_test(self):\n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.nodes[0] = self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -107,7 +105,7 @@ def run_test(self):\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n+        self.nodes[0] = self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -127,7 +125,7 @@ def run_test(self):\n \n         # Remove using high relay fee again\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.nodes[0] = self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "0c40bc14538daf68b6cac39250c69f6e5991ff52",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -165,15 +165,13 @@ def run_test(self):\n             height += 1\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.nodes.append(self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)]))\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n         node1.wait_for_verack()\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.nodes.append(self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)]))\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n         node2.add_connection(connections[2])"
      },
      {
        "sha": "51c399f9b446d878dda5ea3a4755feb532edbe35",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -42,9 +42,8 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-blockversion=3']],\n-                                 binary=[self.options.testbinary])\n+        self.nodes = self.start_nodes(extra_args=[['-whitelist=127.0.0.1', '-blockversion=3']],\n+                                      binary=[self.options.testbinary])\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "ce3a980410a3d7f9c138d835462167ff11200742",
        "filename": "test/functional/bip65-cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -14,10 +14,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n-        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        self.nodes = self.start_nodes(extra_args=[[], [\"-blockversion=3\"],[\"-blockversion=4\"]])\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False"
      },
      {
        "sha": "c7cfe4a644016b4222e9cdb950220098c1e19dff",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -98,9 +98,8 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-blockversion=4']],\n-                                 binary=[self.options.testbinary])\n+        self.nodes = self.start_nodes(extra_args=[['-whitelist=127.0.0.1', '-blockversion=4']],\n+                                      binary=[self.options.testbinary])\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "9854263fef09517bc48b9a87bf082b294d244d91",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -23,9 +23,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-acceptnonstdtxn=0\"]))\n+        self.nodes = self.start_nodes(extra_args=[[],[\"-acceptnonstdtxn=0\"]])\n         self.is_network_split = False\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n         connect_nodes(self.nodes[0], 1)"
      },
      {
        "sha": "b490ea1c9bb68a7aa3a3b4a5c79207dbceadbebc",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -35,8 +35,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n-                                      extra_args=[['-whitelist=127.0.0.1']],\n+        self.nodes = self.start_nodes(extra_args=[['-whitelist=127.0.0.1']],\n                                       binary=[self.options.testbinary])\n \n     def run_test(self):"
      },
      {
        "sha": "7eec6b6f2d2fff40540449914d94746412fca74a",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -49,9 +49,8 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-blockversion=2']],\n-                                 binary=[self.options.testbinary])\n+        self.nodes = self.start_nodes(extra_args=[['-whitelist=127.0.0.1', '-blockversion=2']],\n+                                      binary=[self.options.testbinary])\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "06eaa5941d615d94446d5bef5341ecf0fb9738b3",
        "filename": "test/functional/bipdersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -14,10 +14,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n-        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.nodes = self.start_nodes(extra_args=[[], [\"-blockversion=2\"], [\"-blockversion=3\"]])\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n         self.is_network_split = False"
      },
      {
        "sha": "48ed7b6d0a9fe8117df5066e5cd593c532e71630",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -31,7 +31,7 @@ def __init__(self):\n         self.num_nodes = 2\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.is_network_split = False\n         self.sync_all()"
      },
      {
        "sha": "6ae3dcc42098249b0a039f1948c01137aa5c1981",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -38,12 +38,12 @@ def __init__(self):\n     def setup_network(self, split=False):\n         extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n                       for i in range(self.num_nodes)]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(extra_args=extra_args)\n \n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n         self.bitcoind_processes[1].wait()\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n+        self.nodes[1] = self.start_node(1, extra_args=extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "e16c23f986530435df4f313a650564c698bf61b2",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -17,7 +17,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         self.is_network_split = False\n \n     def decodescript_script_sig(self):"
      },
      {
        "sha": "b522655d4332ddee10a9e4a1aca45de0cc3f2309",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -20,7 +20,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [['-disablewallet']])\n+        self.nodes = self.start_nodes(extra_args=[['-disablewallet']])\n         self.is_network_split = False\n         self.sync_all()\n "
      },
      {
        "sha": "3edd9056677246265ef6f637a50e7b00f33152f2",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -17,15 +17,12 @@ def __init__(self):\n     alert_filename = None  # Set by setup_network\n \n     def setup_network(self):\n-        self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n-        self.nodes.append(self.start_node(0, self.options.tmpdir,\n-                            [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n         # Node1 mines block.version=211 blocks\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                [\"-blockversion=211\"]))\n+        extra_args=[[\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"], [\"-blockversion=211\"]]\n+        self.nodes = self.start_nodes(extra_args=extra_args)\n         connect_nodes(self.nodes[1], 0)\n \n         self.is_network_split = False"
      },
      {
        "sha": "4eb28e0369f8926494e32a195c89d491d064de2a",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -23,7 +23,7 @@ def __init__(self):\n         self.num_nodes = 4\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n \n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n@@ -452,7 +452,7 @@ def run_test(self):\n         self.stop_node(3)\n         self.nodes.pop(1)\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:"
      },
      {
        "sha": "4c97c8ea9eb4683b72c8621000d6af275ad27062",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -121,7 +121,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(extra_args=extra_args)\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n "
      },
      {
        "sha": "8c50b369d9dbeb0f2fc87ec038d93089d4a563fc",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -13,7 +13,7 @@ def __init__(self):\n         self.setup_clean_chain = True\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(2, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         self.is_network_split=False\n \n     def run_test (self):\n@@ -430,7 +430,7 @@ def run_test (self):\n \n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(2, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         address_assert = self.nodes[1].validateaddress(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)"
      },
      {
        "sha": "6f8c89e5dee02483ca2cbb90bb1107d247e69e65",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -15,7 +15,7 @@ def __init__(self):\n         self.num_nodes = 2\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         connect_nodes_bi(self.nodes,0,1)\n         self.is_network_split=False\n         self.sync_all()"
      },
      {
        "sha": "73de5cab01bebed6e4b72790e17bb3598be0985f",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -16,11 +16,8 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.nodes = []\n         self.is_network_split = False \n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n-        self.nodes.append(self.start_node(2, self.options.tmpdir))\n+        self.nodes = self.start_nodes()\n         \n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")"
      },
      {
        "sha": "3a5174dcc56bc251889e8c9fdd766ff4e2429312",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -20,7 +20,7 @@ def run_test(self):\n         nodes[0].encryptwallet('test')\n         self.bitcoind_processes[0].wait()\n         # Restart node 0\n-        nodes[0] = self.start_node(0, self.options.tmpdir)\n+        nodes[0] = self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)"
      },
      {
        "sha": "764ed650a784f74c0eb419f65a8c3c1d4ec81c1e",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        return self.start_nodes()\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "fa26387d24aa3f7e9c52c237c8f68454b7e3fe83",
        "filename": "test/functional/maxblocksinflight.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxblocksinflight.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -81,9 +81,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n-                                      extra_args=[['-whitelist=127.0.0.1']],\n-                                      binary=[self.options.testbinary])\n+        self.nodes = self.start_nodes(extra_args=[['-whitelist=127.0.0.1']], binary=[self.options.testbinary])\n \n     def run_test(self):\n         test = TestManager()"
      },
      {
        "sha": "a056c717e1bbf182a14b8d0547f2994c71fe6e7e",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -90,7 +90,7 @@ def __init__(self):\n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n         self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n+        self.nodes.append(self.start_node(0, extra_args=[\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n \n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n@@ -199,7 +199,7 @@ def run_test(self):\n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+        self.nodes[0] = self.start_node(0, extra_args=[\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect 3 test nodes\n         test_nodes = []"
      },
      {
        "sha": "94766d72c6c3bfa56fcf1e527e1f6db339d4f450",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -11,7 +11,7 @@ class MempoolLimitTest(BitcoinTestFramework):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\"]))\n+        self.nodes.append(self.start_node(0, extra_args=[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]))\n         self.is_network_split = False\n         self.sync_all()\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']"
      },
      {
        "sha": "dac2ccfc1082cc432a315885bc76d4c257acf928",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -18,9 +18,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\"]))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]))\n+        self.nodes = self.start_nodes(extra_args=[[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]])\n         connect_nodes(self.nodes[0], 1)\n         self.is_network_split = False\n         self.sync_all()"
      },
      {
        "sha": "d24109ef1959ac94d6a678577b019b80cc7cc117",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -21,10 +21,8 @@ def __init__(self):\n     alert_filename = None  # Set by setup_network\n \n     def setup_network(self):\n-        args = [\"-checkmempool\"]\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, args))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, args))\n+        extra_args = [[\"-checkmempool\"]] * 2\n+        self.nodes = self.start_nodes(extra_args=extra_args)\n         connect_nodes(self.nodes[1], 0)\n         self.is_network_split = False\n         self.sync_all()"
      },
      {
        "sha": "14864dab7ffc596a5041e89bcad742b6599c1d72",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -17,9 +17,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Just need one node for this test\n-        args = [\"-checkmempool\"]\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, args))\n+        self.nodes = self.start_nodes(extra_args=[[\"-checkmempool\"]])\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "bf70fc5c6a808eb609f79e4358cc2efceab737e3",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -25,9 +25,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Just need one node for this test\n-        args = [\"-checkmempool\"]\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, args))\n+        self.nodes = self.start_nodes(extra_args=[[\"-checkmempool\"]])\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "1ce3d0ff1af6b872b6318c459586cccaafd334bc",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -15,13 +15,8 @@ def __init__(self):\n         self.num_nodes = 4\n \n     def setup_network(self):\n-        self.nodes = []\n-        # Nodes 0/1 are \"wallet\" nodes\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n-        # Nodes 2/3 are used for testing\n-        self.nodes.append(self.start_node(2, self.options.tmpdir))\n-        self.nodes.append(self.start_node(3, self.options.tmpdir, [\"-txindex\"]))\n+        # Nodes 0/1 are \"wallet\" nodes. Nodes 2/3 are used for testing\n+        self.nodes = self.start_nodes(extra_args=[[],[],[],[\"-txindex\"]])\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[0], 3)"
      },
      {
        "sha": "770e1ed8f23d683f9827e24ba2c832bf7620090c",
        "filename": "test/functional/nodehandling.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/nodehandling.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/nodehandling.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nodehandling.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -54,7 +54,7 @@ def run_test(self):\n         #stop node\n         self.stop_node(2)\n \n-        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n+        self.nodes[2] = self.start_node(2)\n         listAfterShutdown = self.nodes[2].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])"
      },
      {
        "sha": "ba3948b0c0d79287cb490cc081020f02be9b5d2e",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -44,8 +44,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Must set the blockversion for this test\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-walletprematurewitness']])\n+        self.nodes = self.start_nodes(extra_args=[['-whitelist=127.0.0.1', '-walletprematurewitness']])\n \n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "a4dd330f6565956c1352aad192f6dbb70a40e0a7",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -118,12 +118,7 @@ def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir,\n-                                          binary=self.options.testbinary))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                          [\"-whitelist=127.0.0.1\"],\n-                                          binary=self.options.testbinary))\n+        self.nodes = self.start_nodes(extra_args=[[], [\"-whitelist=127.0.0.1\"]], binary=[self.options.testbinary] * 2)\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread."
      },
      {
        "sha": "49e650917b6cb934a9db364704427f9b08ee1780",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -116,12 +116,8 @@ def __init__(self):\n         self.utxos = []\n \n     def setup_network(self):\n-        self.nodes = []\n-\n         # Start up node0 to be a version 1, pre-segwit node.\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, \n-                [[\"-bip9params=segwit:0:0\"], \n-                 [\"-txindex\"]])\n+        self.nodes = self.start_nodes(extra_args=[[\"-bip9params=segwit:0:0\"], [\"-txindex\"]])\n         connect_nodes(self.nodes[0], 1)\n \n     def build_block_on_tip(self, node, segwit=False):"
      },
      {
        "sha": "fa93fe068997d14e96337f986b88de1a43a95147",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -52,9 +52,7 @@ def __init__(self):\n     def setup_network(self):\n         # Node1 will be used to generate txs which should be relayed from Node0\n         # to our test node\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n+        self.nodes = self.start_nodes()\n         connect_nodes(self.nodes[0], 1)\n \n     def run_test(self):"
      },
      {
        "sha": "2a3002bf4876b8a6907dbeb890c639c545c12590",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -101,10 +101,9 @@ class P2PLeakTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n+\n     def setup_network(self):\n-        extra_args = [['-banscore='+str(banscore)]\n-                      for i in range(self.num_nodes)]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(extra_args=[['-banscore='+str(banscore)]])\n \n     def run_test(self):\n         no_version_bannode = CNodeNoVersionBan()"
      },
      {
        "sha": "9c4b0a7f8a55c04b9908ec152785d3c41cf7228c",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -80,12 +80,11 @@ class P2PMempoolTests(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n+        self.num_nodes = 1\n \n     def setup_network(self):\n         # Start a node with maxuploadtarget of 200 MB (/24h)\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-peerbloomfilters=0\"]))\n+        self.nodes = self.start_nodes(extra_args=[[\"-peerbloomfilters=0\"]])\n \n     def run_test(self):\n         #connect a mininode"
      },
      {
        "sha": "53517e14074ea486104eb418e354884bcdf7e33a",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -193,14 +193,13 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\"]))\n-        # Start a node for testing IsStandard rules.\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n-        connect_nodes(self.nodes[0], 1)\n+        # node1 tests IsStandard rules. node2 has segwit's bip9 parameter disabled to simulate upgrading after activation.\n+        extra_args = [[\"-whitelist=127.0.0.1\"],\n+                      [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"],\n+                      [\"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\"]]\n+        self.nodes = self.start_nodes(extra_args=extra_args)\n \n-        # Disable segwit's bip9 parameter to simulate upgrading after activation.\n-        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\"]))\n+        connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[0], 2)\n \n     ''' Helpers '''\n@@ -1572,7 +1571,7 @@ def test_upgrade_after_activation(self, node, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.nodes[node_id] = self.start_node(node_id, self.options.tmpdir)\n+        self.nodes[node_id] = self.start_node(node_id)\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "99d9ffbe70629b1569994e9137727c15af69c115",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -50,10 +50,8 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = []\n-\n         # Start up node0 to be a version 1, pre-segwit node.\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread."
      },
      {
        "sha": "2cf2e46b001d1f0356adf2d8a32e38d3c9dae4a0",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -73,7 +73,7 @@ def setup_network(self):\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(extra_args=self.extra_args)\n \n     # Send numblocks blocks via peer with nVersionToUse set.\n     def send_blocks_with_version(self, peer, numblocks, nVersionToUse):\n@@ -146,7 +146,7 @@ def run_test(self):\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(extra_args=self.extra_args)\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n@@ -157,7 +157,7 @@ def run_test(self):\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.nodes = self.start_nodes(extra_args=self.extra_args)\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "9f73632a60be458087cdc1b723c9679eeb32b249",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -18,10 +18,9 @@ def __init__(self):\n         self.txouts = gen_return_txouts()\n \n     def setup_network(self):\n-        self.nodes = []\n         self.is_network_split = False\n \n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-printpriority=1\"]))\n+        self.nodes = self.start_nodes(extra_args=[[\"-printpriority=1\"]])\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n     def run_test(self):"
      },
      {
        "sha": "2b66fcc1a7bdb4f06c2cc8bb82f892a03d59be6a",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -89,7 +89,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        return self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        return self.start_nodes(extra_args=args)\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "96d382a82aec8d8c3407550f287b32b26c5a1f60",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -37,23 +37,23 @@ def __init__(self):\n         self.utxo_cache_1 = []\n \n     def setup_network(self):\n-        self.nodes = []\n         self.is_network_split = False\n+        self.prunedir = self.options.tmpdir + \"/node2/regtest/blocks/\"\n+        self.extra_args = []\n \n         # Create nodes 0 and 1 to mine\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n+        self.extra_args += [[\"-maxreceivebuffer=20000\", \"-blockmaxsize=999000\", \"-checkblocks=5\"]] * 2\n \n         # Create node 2 to test pruning\n-        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=900))\n-        self.prunedir = self.options.tmpdir+\"/node2/regtest/blocks/\"\n+        self.extra_args += [[\"-maxreceivebuffer=20000\", \"-prune=550\"]]\n \n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n-        self.nodes.append(self.start_node(3, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n-        self.nodes.append(self.start_node(4, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n+        self.extra_args += [[\"-maxreceivebuffer=20000\", \"-blockmaxsize=999000\"]] * 2\n \n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.nodes.append(self.start_node(5, self.options.tmpdir, [\"-prune=550\"]))\n+        self.extra_args += [[\"-prune=550\"]]\n+\n+        self.nodes = self.start_nodes(extra_args=self.extra_args, timewait=900)\n \n         # Determine default relay fee\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n@@ -107,7 +107,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             self.stop_node(0)\n-            self.nodes[0]=self.start_node(0, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n+            self.nodes[0]=self.start_node(0, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n                 if j == 0:\n@@ -132,7 +132,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.nodes[1] = self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n         self.log.info(\"Current block height: %d\" % height)\n@@ -155,7 +155,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.nodes[1] = self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n@@ -228,13 +228,13 @@ def reorg_back(self):\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, timewait=900)\n+        node = self.nodes[node_number] = self.start_node(node_number, timewait=900)\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n         self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n+        node = self.nodes[node_number] = self.start_node(node_number, extra_args=[\"-prune=1\"], timewait=900)\n         assert_equal(node.getblockcount(), 995)\n \n         def height(index):\n@@ -308,15 +308,15 @@ def has_block(index):\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n         self.stop_node(node_number)\n-        self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n+        self.nodes[node_number] = self.start_node(node_number, extra_args=[\"-prune=550\"], timewait=900)\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(2, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads loads successfully when restarting a pruned node after IBD.\n@@ -326,7 +326,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(5, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "2b2e7af5b233c0b4daeaf8812ab4a8a262fd546d",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n \n         #connect to a local machine for debugging\n         #url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)"
      },
      {
        "sha": "aca088dc642980cacea7cce5d2e1e6574931a52b",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -32,7 +32,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        return self.start_nodes()\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "39c69b6e5d73fbd55932553eb8909ae1bbd2980b",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -21,14 +21,14 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n \n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.nodes = self.start_nodes(extra_args=extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "5ff8ea5d4dd6a88e819765dc9178938d95bc59c7",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -67,14 +67,12 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                                   \"-whitelist=127.0.0.1\",\n-                                                                   \"-limitancestorcount=50\",\n-                                                                   \"-limitancestorsize=101\",\n-                                                                   \"-limitdescendantcount=200\",\n-                                                                   \"-limitdescendantsize=101\"\n-                                                                   ]))\n+        self.nodes = self.start_nodes(extra_args=[[\"-maxorphantx=1000\",\n+                                                   \"-whitelist=127.0.0.1\",\n+                                                   \"-limitancestorcount=50\",\n+                                                   \"-limitancestorsize=101\",\n+                                                   \"-limitdescendantcount=200\",\n+                                                   \"-limitdescendantsize=101\"]])\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "b117cdb5a5274c0b9b40924f87480c97ab09bda3",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -49,7 +49,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)"
      },
      {
        "sha": "e8c8d303a10873b2e3f14356f3a3ddb206ca3393",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -36,7 +36,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         if allow_ips:\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        self.nodes = self.start_nodes(extra_args=[base_args + binds], rpchost=connect_to)\n         pid = self.bitcoind_processes[0].pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n@@ -47,7 +47,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         at a non-localhost IP.\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        self.nodes = self.start_nodes(extra_args=[base_args])\n         # connect to node through non-loopback interface\n         node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n         node.getnetworkinfo()"
      },
      {
        "sha": "2587162390c3df2799b04d4486cf98236d02234c",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -22,7 +22,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         self.is_network_split = False\n         self.sync_all()\n "
      },
      {
        "sha": "906876a6bb150b568735305cf857cd5c1f0c0fdc",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -82,10 +82,10 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-walletprematurewitness\", \"-rpcserialversion=0\"]))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir, [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"]))\n-        self.nodes.append(self.start_node(2, self.options.tmpdir, [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]))\n+        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],\n+                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"],\n+                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]]\n+        self.nodes = self.start_nodes(extra_args=self.extra_args)\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 1)\n         connect_nodes(self.nodes[0], 2)"
      },
      {
        "sha": "47b7935b2bb53dd69a41c804cd1ceef7fd11d23a",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -229,7 +229,7 @@ def __init__(self):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         connect_nodes(self.nodes[0], 1)\n \n     # mine count blocks and return the new tip"
      },
      {
        "sha": "07745e64a74c2bcbf08797e71128e6f92bccd197",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -15,7 +15,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         self.is_network_split = False\n \n     def run_test(self):"
      },
      {
        "sha": "a3ee691a40328c1a7048d6afde0c4d74fc767a51",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -15,7 +15,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         self.is_network_split = False\n \n     def successful_signing_test(self):"
      },
      {
        "sha": "b8c9ca37ff1acb0c01635c4b50104818c796d9be",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -153,10 +153,17 @@ def setup_network(self):\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.nodes = []\n+        self.extra_args = []\n         # Use node0 to mine blocks for input splitting\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-whitelist=127.0.0.1\"]))\n+        self.extra_args.append([\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"])\n+        # Node1 mines small blocks but that are bigger than the expected transaction rate.\n+        # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n+        # (17k is room enough for 110 or so transactions)\n+        self.extra_args.append([\"-blockmaxsize=17000\", \"-maxorphantx=1000\"])\n+        # Node2 is a stingy miner that produces too small blocks (room for only 55 or so transactions)\n+        self.extra_args.append([\"-blockmaxsize=8000\", \"-maxorphantx=1000\"])\n+\n+        self.nodes = self.start_nodes(extra_args=self.extra_args)\n \n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")\n@@ -188,18 +195,7 @@ def setup_network(self):\n \n         # Now we can connect the other nodes, didn't want to connect them earlier\n         # so the estimates would not be affected by the splitting transactions\n-        # Node1 mines small blocks but that are bigger than the expected transaction rate.\n-        # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n-        # (17k is room enough for 110 or so transactions)\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"]))\n         connect_nodes(self.nodes[1], 0)\n-\n-        # Node2 is a stingy miner, that\n-        # produces too small blocks (room for only 55 or so transactions)\n-        node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n-\n-        self.nodes.append(self.start_node(2, self.options.tmpdir, node2args))\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[2], 1)\n "
      },
      {
        "sha": "bb386a75cb81133a33e1e625e53d1eb3dc6684c1",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -95,7 +95,7 @@ def setup_network(self, split = False):\n         self.sync_all()\n \n     def setup_nodes(self):\n-        return self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        return self.start_nodes()\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -190,8 +190,12 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    def start_nodes(self, num_nodes=None, dirname=None, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Start multiple bitcoinds, return RPC connections to them.\"\"\"\n+        if num_nodes is None:\n+            num_nodes = self.num_nodes\n+        if dirname is None:\n+            dirname = self.options.tmpdir\n         if extra_args is None:\n             extra_args = [None for _ in range(num_nodes)]\n         if binary is None:\n@@ -205,8 +209,10 @@ def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewai\n             raise\n         return rpcs\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+    def start_node(self, i, dirname=None, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n         \"\"\"Start a bitcoind and return RPC connection to it.\"\"\"\n+        if dirname is None:\n+            dirname = self.options.tmpdir\n         datadir = os.path.join(dirname, \"node\" + str(i))\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n@@ -438,8 +444,5 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(\n-            self.num_nodes, self.options.tmpdir,\n-            extra_args=[['-whitelist=127.0.0.1']] * self.num_nodes,\n-            binary=[self.options.testbinary] +\n-            [self.options.refbinary]*(self.num_nodes-1))\n+        self.nodes = self.start_nodes(extra_args=[['-whitelist=127.0.0.1']] * self.num_nodes,\n+                                      binary=[self.options.testbinary] + [self.options.refbinary]*(self.num_nodes-1))"
      },
      {
        "sha": "331bccc07cdb08ac037bcdee2a7d7d10884f7d7c",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -21,10 +21,9 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.node_args = [[]]\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n+        self.nodes = self.start_nodes()\n         self.is_network_split = False\n \n     def run_test (self):"
      },
      {
        "sha": "4f891bc326af519e614201f3a44c6651c89d9e71",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -66,7 +66,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.nodes = self.start_nodes(extra_args=self.extra_args, timewait=60)\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n@@ -93,7 +93,7 @@ def run_test (self):\n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].encryptwallet('test')\n         self.bitcoind_processes[0].wait()\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.nodes = self.start_nodes(extra_args=self.extra_args)\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "16d27377df7788bb66f691b43bb4bde5138ac61b",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -22,7 +22,7 @@ def __init__(self):\n         self.node_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n+        self.nodes = self.start_nodes(extra_args=self.node_args)\n         self.is_network_split = False\n         connect_nodes_bi(self.nodes, 0, 1)\n \n@@ -32,7 +32,7 @@ def run_test (self):\n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n         self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1] = self.start_node(1, extra_args=self.node_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -69,7 +69,7 @@ def run_test (self):\n         self.stop_node(1)\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1] = self.start_node(1, extra_args=self.node_args[1])\n         #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n@@ -83,7 +83,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.node_args[1] + ['-rescan'])\n+        self.nodes[1] = self.start_node(1, extra_args=self.node_args[1] + ['-rescan'])\n         #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n "
      },
      {
        "sha": "1ebbef6517282638463014c8753ccf5032924922",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n+        self.nodes = self.start_nodes(3, extra_args=self.extra_args[:3])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -155,7 +155,7 @@ def run_test (self):\n         txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         sync_mempools(self.nodes)\n \n-        self.nodes.append(self.start_node(3, self.options.tmpdir, self.extra_args[3]))\n+        self.nodes.append(self.start_node(3, extra_args=self.extra_args[3]))\n         connect_nodes_bi(self.nodes, 0, 3)\n         sync_blocks(self.nodes)\n \n@@ -199,7 +199,7 @@ def run_test (self):\n \n         #do some -walletbroadcast tests\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        self.nodes = self.start_nodes(3, extra_args=[[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -224,7 +224,7 @@ def run_test (self):\n \n         #restart the nodes with -walletbroadcast=1\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir)\n+        self.nodes = self.start_nodes(3)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -327,7 +327,7 @@ def run_test (self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.nodes = self.start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n+            self.nodes = self.start_nodes(3, extra_args=[[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -375,7 +375,7 @@ def run_test (self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.nodes[0] = self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "d60d5423ef6d972bb353cdde73a779818f41b36d",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -43,12 +43,11 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 4\n-        # nodes 1, 2,3 are spenders, let's give them a keypool=100\n-        self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n     # This mirrors how the network was setup in the bash test\n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        # nodes 1, 2,3 are spenders, let's give them a keypool=100\n+        self.nodes = self.start_nodes(extra_args=[[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []])\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)\n@@ -81,9 +80,9 @@ def do_one_round(self):\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n+        self.nodes[0] = self.start_node(0)\n+        self.nodes[1] = self.start_node(1)\n+        self.nodes[2] = self.start_node(2)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)"
      },
      {
        "sha": "23b35019173931a4f3cb619a3e14e6d1b4bf66f3",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = self.start_nodes()\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n@@ -63,15 +63,15 @@ def run_test (self):\n         \n         #restart bitcoind\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir)\n+        self.nodes[0] = self.start_node(0)\n         \n         tx3 = self.nodes[0].gettransaction(txid3)\n         assert_equal(tx3['txid'], txid3) #tx must be available (unconfirmed)\n         \n         self.stop_node(0)\n         \n         #restart bitcoind with zapwallettxes\n-        self.nodes[0] = self.start_node(0,self.options.tmpdir, [\"-zapwallettxes=1\"])\n+        self.nodes[0] = self.start_node(0, extra_args=[\"-zapwallettxes=1\"])\n         \n         assert_raises(JSONRPCException, self.nodes[0].gettransaction, [txid3])\n         #there must be a expection because the unconfirmed wallettx0 must be gone by now"
      },
      {
        "sha": "cd284d9d199151c41b9ae05457fd2b9b921792e8",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "patch": "@@ -13,25 +13,23 @@ class ZMQTest (BitcoinTestFramework):\n \n     def __init__(self):\n         super().__init__()\n-        self.num_nodes = 4\n+        self.num_nodes = 2\n \n     port = 28332\n \n-    def setup_nodes(self):\n+    def setup_network(self):\n         self.zmqContext = zmq.Context()\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        return self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n-            ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n-            [],\n-            [],\n-            []\n-            ])\n+        extra_args = [['-zmqpubhashtx=tcp://127.0.0.1:' + str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:' + str(self.port)], []]\n+        self.nodes = self.start_nodes(extra_args=extra_args)\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        self.is_network_split = False\n+        self.sync_all()\n \n     def run_test(self):\n-        self.sync_all()\n \n         genhashes = self.nodes[0].generate(1)\n         self.sync_all()"
      }
    ]
  },
  {
    "sha": "b5aa1097c965be4a8532e1897c5849b933e64b76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWFhMTA5N2M5NjViZTRhODUzMmUxODk3YzU4NDliOTMzZTY0Yjc2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-26T04:10:21Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T17:00:12Z"
      },
      "message": "Add TestNode class\n\nThis commit adds a TestNode class to test_framework.py. This class is\nresponsible for all state related to a bitcoind node under test. It\nstores local state, is responsible for tracking the bitcoind process and\ndelegates unrecognised messages to the RPC connection.",
      "tree": {
        "sha": "5edbc7d9214fa644eed7ea17e4ed942702428bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5edbc7d9214fa644eed7ea17e4ed942702428bb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5aa1097c965be4a8532e1897c5849b933e64b76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5aa1097c965be4a8532e1897c5849b933e64b76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5aa1097c965be4a8532e1897c5849b933e64b76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5aa1097c965be4a8532e1897c5849b933e64b76/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acf924c6aa5dbafe3bf6cf6a22c1034eeda326b2"
      }
    ],
    "stats": {
      "total": 256,
      "additions": 168,
      "deletions": 88
    },
    "files": [
      {
        "sha": "4e75a5a84917ad67cab903b88825b5afed629210",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -200,16 +200,14 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, False]])\n \n         # Restart all\n-        self.test.block_store.close()\n+        self.test.clear_all_connections()\n         self.stop_nodes()\n-        shutil.rmtree(self.options.tmpdir)\n+        shutil.rmtree(self.options.tmpdir + \"/node0\")\n         self.setup_chain()\n         self.setup_network()\n-        self.test.block_store = BlockStore(self.options.tmpdir)\n-        self.test.clear_all_connections()\n         self.test.add_all_connections(self.nodes)\n-        NetworkThread().start() # Start up network handling in another thread\n-\n+        NetworkThread().start()\n+        self.test.test_nodes[0].wait_for_verack()\n \n     def get_tests(self):\n         for test in itertools.chain("
      },
      {
        "sha": "c7ee0a7dcdecd17a9aca2c7d32bdfe57d5286708",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -41,8 +41,7 @@ def setup_network(self, split=False):\n         self.nodes = self.start_nodes(extra_args=extra_args)\n \n         # Encrypt wallet for test_locked_wallet_fails test\n-        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n-        self.bitcoind_processes[1].wait()\n+        self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n         self.nodes[1] = self.start_node(1, extra_args=extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n "
      },
      {
        "sha": "036656d2ddc5b99689c3bd14efd6a21b11281bbb",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -4,6 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the -alertnotify option.\"\"\"\n \n+import time\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -38,11 +40,17 @@ def run_test(self):\n         self.nodes[1].generate(1)\n         self.sync_all()\n \n-        with open(self.alert_filename, 'r', encoding='utf8') as f:\n-            alert_text = f.read()\n+        # Give bitcoind 10 seconds to write the alert notification\n+        timeout = 10\n+        while True:\n+            with open(self.alert_filename, 'r', encoding='utf8') as f:\n+                alert_text = f.read()\n+            if len(alert_text) > 0:\n+                break\n \n-        if len(alert_text) == 0:\n-            raise AssertionError(\"-alertnotify did not warn of up-version blocks\")\n+            assert timeout > 0, \"-alertnotify did not warn of up-version blocks\"\n+            timeout -= 0.1\n+            time.sleep(0.1)\n \n         # Mine more up-version blocks, should not get more alerts:\n         self.nodes[1].generate(1)"
      },
      {
        "sha": "18dd42f8612f8e32b6174678dd1f096bad090a5c",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -446,11 +446,8 @@ def run_test(self):\n \n         ############################################################\n         # locked wallet test\n-        self.nodes[1].encryptwallet(\"test\")\n-        self.stop_node(0)\n-        self.stop_node(2)\n-        self.stop_node(3)\n-        self.nodes.pop(1)\n+        self.nodes[1].node_encrypt_wallet(\"test\")\n+        self.stop_nodes()\n \n         self.nodes = self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "3188906e84d9d58049fddde054a071957b57ac98",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -17,7 +17,7 @@ def __init__(self, node):\n         self.longpollid = templat['longpollid']\n         # create a new connection to the node, we can't use the same\n         # connection from two threads\n-        self.node = get_rpc_proxy(node.url, 1, timeout=600)\n+        self.node = get_rpc_proxy(node.url, 1, timeout=600, coverage_dir=node.coverage_dir)\n \n     def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})"
      },
      {
        "sha": "efa474b1c53071f3977cea34d272aa32c51b12ff",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -16,9 +16,8 @@ def run_test(self):\n         wallet_info_old = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n-        # Encrypt wallet and wait to terminate\n-        nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n+        # Encrypt wallet. This causes bitcoind to stop.\n+        nodes[0].node_encrypt_wallet('test')\n         # Restart node 0\n         nodes[0] = self.start_node(0)\n         # Keep creating keys"
      },
      {
        "sha": "44bc49849553a4442c6bb90cecb9501a54589797",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -37,7 +37,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = self.start_nodes(extra_args=[base_args + binds], rpchost=connect_to)\n-        pid = self.bitcoind_processes[0].pid\n+        pid = self.nodes[0].process.pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n \n@@ -49,7 +49,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = self.start_nodes(extra_args=[base_args])\n         # connect to node through non-loopback interface\n-        node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0, coverage_dir=self.options.coveragedir)\n         node.getnetworkinfo()\n         self.stop_nodes()\n "
      },
      {
        "sha": "91bdc308d4f2cea55b0c501c44f6cf1a9ed7fff9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 140,
        "deletions": 60,
        "changes": 200,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -63,7 +63,6 @@ def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = None\n-        self.bitcoind_processes = {}\n \n     def add_options(self, parser):\n         pass\n@@ -197,39 +196,42 @@ def start_nodes(self, num_nodes=None, dirname=None, extra_args=None, rpchost=Non\n         if dirname is None:\n             dirname = self.options.tmpdir\n         if extra_args is None:\n-            extra_args = [None for _ in range(num_nodes)]\n+            extra_args = [[] for _ in range(num_nodes)]\n         if binary is None:\n             binary = [None for _ in range(num_nodes)]\n-        rpcs = []\n+        nodes = []\n         try:\n             for i in range(num_nodes):\n-                rpcs.append(self.start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+                nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, coverage_dir=self.options.coveragedir))\n+                nodes[i].start()\n+            for node in nodes:\n+                while not node.is_rpc_connected():\n+                    time.sleep(0.1)\n         except:  # If one node failed to start, stop the others\n             self.stop_nodes()\n             raise\n-        return rpcs\n \n-    def start_node(self, i, dirname=None, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n+        if self.options.coveragedir is not None:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n+\n+        return nodes\n+\n+    def start_node(self, i, dirname=None, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None):\n         \"\"\"Start a bitcoind and return RPC connection to it.\"\"\"\n         if dirname is None:\n             dirname = self.options.tmpdir\n         datadir = os.path.join(dirname, \"node\" + str(i))\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\" + str(get_mocktime())]\n-        if extra_args is not None:\n-            args.extend(extra_args)\n-        self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-        self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-        url = rpc_url(i, rpchost)\n-        self._wait_for_bitcoind_start(self.bitcoind_processes[i], url, i)\n-        self.log.debug(\"initialize_chain: RPC successfully started\")\n-        proxy = get_rpc_proxy(url, i, timeout=timewait, coveragedir=self.options.coveragedir)\n+        node = TestNode(i, dirname, extra_args, rpchost, timewait, binary, stderr, coverage_dir=self.options.coveragedir)\n+        node.start()\n+        while not node.is_rpc_connected():\n+            time.sleep(0.1)\n \n-        if self.options.coveragedir:\n-            coverage.write_all_rpc_commands(self.options.coveragedir, proxy)\n+        if self.options.coveragedir is not None:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return proxy\n+        return node\n \n     def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n@@ -238,6 +240,8 @@ def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_m\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                self.nodes[i].running = False\n+                self.nodes[i].process = None\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n                     stderr = log_stderr.read().decode('utf-8')\n@@ -251,19 +255,16 @@ def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_m\n                 raise AssertionError(assert_msg)\n \n     def stop_nodes(self):\n-        for i in range(len(self.nodes)):\n-            self.stop_node(i)\n-        assert not self.bitcoind_processes.values()  # All connections must be gone now\n+        [node.stop_node() for node in self.nodes]\n+        # All connections must be gone now\n+        for node in self.nodes:\n+            while not node.is_node_stopped():\n+                time.sleep(0.1)\n \n     def stop_node(self, i):\n-        self.log.debug(\"Stopping node %d\" % i)\n-        try:\n-            self.nodes[i].stop()\n-        except http.client.CannotSendRequest as e:\n-            self.log.exception(\"Unable to stop node %d\" % i)\n-        return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        assert_equal(return_code, 0)\n-        del self.bitcoind_processes[i]\n+        self.nodes[i].stop_node()\n+        while not self.nodes[i].is_node_stopped():\n+            time.sleep(0.1)\n \n     def split_network(self):\n         \"\"\"\n@@ -348,18 +349,14 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.bitcoind_processes[i] = subprocess.Popen(args)\n-                self.logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                self._wait_for_bitcoind_start(self.bitcoind_processes[i], rpc_url(i), i)\n-                self.logger.debug(\"initialize_chain: RPC successfully started\")\n+                self.nodes.append(TestNode(i, datadir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, coverage_dir=None))\n+                self.nodes[i].args = args\n+                self.nodes[i].start()\n \n-            self.nodes = []\n-            for i in range(MAX_NODES):\n-                try:\n-                    self.nodes.append(get_rpc_proxy(rpc_url(i), i, coveragedir=self.options.coveragedir))\n-                except:\n-                    self.log.exception(\"Error connecting to node %d\" % i)\n-                    sys.exit(1)\n+            # Wait for RPC connections to be ready\n+            for node in self.nodes:\n+                while not node.is_rpc_connected():\n+                    time.sleep(0.1)\n \n             # Create a 200-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n@@ -402,32 +399,115 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n         for i in range(num_nodes):\n             initialize_datadir(test_dir, i)\n \n-    def _wait_for_bitcoind_start(self, process, url, i):\n-        \"\"\"Wait for bitcoind to start.\n-\n-        This means that RPC is accessible and fully initialized.\n-        Raise an exception if bitcoind exits during initialization.\"\"\"\n-        while True:\n-            if process.poll() is not None:\n-                raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n-            try:\n-                rpc = get_rpc_proxy(url, i, coveragedir=self.options.coveragedir)\n-                rpc.getblockcount()\n-                break  # break out of loop on success\n-            except IOError as e:\n-                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n-                    raise  # unknown IO error\n-            except JSONRPCException as e:  # Initialization phase\n-                if e.error['code'] != -28:  # RPC in warmup?\n-                    raise  # unknown JSON RPC exception\n-            time.sleep(0.25)\n-\n # Test framework for doing p2p comparison testing, which sets up some bitcoind\n # binaries:\n # 1 binary: test binary\n # 2 binaries: 1 test binary, 1 ref binary\n # n>2 binaries: 1 test binary, n-1 ref binaries\n \n+class TestNode():\n+    \"\"\"A class for representing a bitcoind node under test.\n+\n+    This class contains:\n+\n+    - state about the node (whether it's running, etc)\n+    - a Python subprocess.Popen object representing the running process\n+    - an RPC connection to the node\n+\n+    To make things easier for the test writer, a bit of magic is happening under the covers.\n+    Any unrecognised messages will be dispatched to the RPC connection.\"\"\"\n+    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, coverage_dir):\n+        self.index = i\n+        self.datadir = os.path.join(dirname, \"node\" + str(i))\n+        self.rpchost = rpchost\n+        self.rpc_timeout = timewait\n+        if binary is None:\n+            self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+        else:\n+            self.binary = binary\n+        self.stderr = stderr\n+        self.coverage_dir = coverage_dir\n+        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        self.extra_args = extra_args\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-mocktime=\" + str(get_mocktime())]\n+\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.url = None\n+        self.log = logging.getLogger('TestFramework.node%d' % i)\n+\n+    def __getattr__(self, *args, **kwargs):\n+        \"\"\"Dispatches any unrecognised messages to the RPC connection.\"\"\"\n+        assert self.rpc_connected and not self.rpc is None, \"Error: no RPC connection\"\n+        return self.rpc.__getattr__(*args, **kwargs)\n+\n+    def start(self):\n+        \"\"\"Start the node.\"\"\"\n+        self.process = subprocess.Popen(self.args + self.extra_args, stderr=self.stderr)\n+        self.running = True\n+        self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n+\n+    def is_rpc_connected(self):\n+        \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n+        url = rpc_url(self.index, self.rpchost)\n+\n+        assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n+\n+        try:\n+            self.rpc = get_rpc_proxy(url, self.index, self.rpc_timeout, self.coverage_dir)\n+            self.rpc.getblockcount()\n+            # If the call to getblockcount() succeeds then the RPC connection is up\n+            self.rpc_connected = True\n+            self.url = self.rpc.url\n+            self.log.debug(\"RPC successfully started\")\n+            return True\n+        except IOError as e:\n+            assert e.errno == errno.ECONNREFUSED, \"RPC connection returned unexpected error: %d\" % e.errno\n+        except JSONRPCException as e:  # Initialization phase\n+            assert e.error['code'] == -28, \"RPC connection returned unknown JSON RPC error: %d\" % e.error['code']\n+        # RPC connection not yet up. We received either a CONNREFUSED error or a JSON error -28 (RPC_IN_WARMUP). Return None.\n+        return False\n+\n+    def stop_node(self):\n+        \"\"\"Stop the node.\"\"\"\n+        if not self.running:\n+            return\n+        self.log.debug(\"Stopping node\")\n+        try:\n+            self.stop()\n+        except http.client.CannotSendRequest as e:\n+            self.log.exception(\"Unable to stop node.\")\n+\n+    def is_node_stopped(self):\n+        \"\"\"Checks whether the node has stopped.\n+\n+        Returns True if the node has stopped. False otherwise.\n+        This method is responsible for freeing resources (self.process).\"\"\"\n+        if not self.running:\n+            return True\n+        return_code = self.process.poll()\n+        if return_code is not None:\n+            # process has stopped. Assert that it didn't return an error code.\n+            assert_equal(return_code, 0)\n+            self.running = False\n+            self.process = None\n+            self.log.debug(\"Node stopped\")\n+            return True\n+        return False\n+\n+    def node_encrypt_wallet(self, passphrase):\n+        \"\"\"\"Encrypts the wallet.\n+        \n+        This causes bitcoind to shutdown, so this method takes\n+        care of cleaning up resources.\"\"\"\n+        self.encryptwallet(passphrase)\n+        while not self.is_node_stopped():\n+            time.sleep(0.1)\n+        self.rpc = None\n+        self.rpc_connected = False\n+\n class ComparisonTestFramework(BitcoinTestFramework):\n \n     def __init__(self):"
      },
      {
        "sha": "6c3e02bab2cbdb12fd26bd9981682a8cfd379551",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -52,7 +52,7 @@ def disable_mocktime():\n def get_mocktime():\n     return MOCKTIME\n \n-def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n+def get_rpc_proxy(url, node_number, timeout=None, coverage_dir=None):\n     \"\"\"\n     Args:\n         url (str): URL of the RPC server to call\n@@ -73,7 +73,7 @@ def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n     proxy.url = url  # store URL on proxy for info\n \n     coverage_logfile = coverage.get_filename(\n-        coveragedir, node_number) if coveragedir else None\n+        coverage_dir, node_number) if coverage_dir else None\n \n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n "
      },
      {
        "sha": "3ed933a70420c133cb09189f557587e22713ceb2",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5aa1097c965be4a8532e1897c5849b933e64b76/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=b5aa1097c965be4a8532e1897c5849b933e64b76",
        "patch": "@@ -90,9 +90,8 @@ def run_test (self):\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n         assert_equal(found_addr_rsv, 90 + 1)  # keypool size (TODO: fix off-by-one)\n \n-        #encrypt wallet, restart, unlock and dump\n-        self.nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n+        #encrypt wallet, restart, unlock and dump.\n+        self.nodes[0].node_encrypt_wallet('test')\n         self.nodes = self.start_nodes(extra_args=self.extra_args)\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:"
      }
    ]
  },
  {
    "sha": "606cc5491506be499c26ef02af0dcde1df989d16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDZjYzU0OTE1MDZiZTQ5OWMyNmVmMDJhZjBkY2RlMWRmOTg5ZDE2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T13:42:17Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-30T21:43:22Z"
      },
      "message": "Add p2p connection to TestNode",
      "tree": {
        "sha": "68a88489ee77a74137fa17f247066f301e783da8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68a88489ee77a74137fa17f247066f301e783da8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/606cc5491506be499c26ef02af0dcde1df989d16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606cc5491506be499c26ef02af0dcde1df989d16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/606cc5491506be499c26ef02af0dcde1df989d16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606cc5491506be499c26ef02af0dcde1df989d16/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5aa1097c965be4a8532e1897c5849b933e64b76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5aa1097c965be4a8532e1897c5849b933e64b76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5aa1097c965be4a8532e1897c5849b933e64b76"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 48,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9269f5e67ab42450009b9f48b5317f63655dc18e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 48,
        "deletions": 5,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/606cc5491506be499c26ef02af0dcde1df989d16/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/606cc5491506be499c26ef02af0dcde1df989d16/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=606cc5491506be499c26ef02af0dcde1df989d16",
        "patch": "@@ -35,6 +35,7 @@\n     sync_mempools,\n )\n from .authproxy import JSONRPCException\n+from .mininode import NodeConn, SingleNodeConnCB\n \n BITCOIND_PROC_WAIT_TIMEOUT = 60\n \n@@ -62,7 +63,8 @@ class BitcoinTestFramework(object):\n     def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-        self.nodes = None\n+        self.nodes = []\n+        self.p2p_conn_type = SingleNodeConnCB\n \n     def add_options(self, parser):\n         pass\n@@ -120,7 +122,7 @@ def main(self):\n                           help=\"Print out all RPC calls as they are made\")\n         parser.add_option(\"--portseed\", dest=\"port_seed\", default=os.getpid(), type='int',\n                           help=\"The seed to use for assigning port numbers (default: current process id)\")\n-        parser.add_option(\"--coveragedir\", dest=\"coveragedir\",\n+        parser.add_option(\"--coveragedir\", dest=\"coveragedir\", default=None,\n                           help=\"Write tested RPC commands into this directory\")\n         self.add_options(parser)\n         (self.options, self.args) = parser.parse_args()\n@@ -203,6 +205,7 @@ def start_nodes(self, num_nodes=None, dirname=None, extra_args=None, rpchost=Non\n         try:\n             for i in range(num_nodes):\n                 nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, coverage_dir=self.options.coveragedir))\n+                nodes[i].p2p_conn_type = self.p2p_conn_type\n                 nodes[i].start()\n             for node in nodes:\n                 while not node.is_rpc_connected():\n@@ -224,6 +227,7 @@ def start_node(self, i, dirname=None, extra_args=[], rpchost=None, timewait=None\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n         node = TestNode(i, dirname, extra_args, rpchost, timewait, binary, stderr, coverage_dir=self.options.coveragedir)\n+        node.p2p_conn_type = self.p2p_conn_type\n         node.start()\n         while not node.is_rpc_connected():\n             time.sleep(0.1)\n@@ -413,8 +417,13 @@ class TestNode():\n     - state about the node (whether it's running, etc)\n     - a Python subprocess.Popen object representing the running process\n     - an RPC connection to the node\n+    - one or more P2P connections to the node\n \n     To make things easier for the test writer, a bit of magic is happening under the covers.\n+    send_message is dispatched to the first P2P connection. If there hasn't been a P2P connection\n+    before, this class will automatically open a P2P connection to send the message. If there has\n+    been a P2P connection open but it has subsequently closed, then the class won't automatically\n+    open a new P2P connection. The test writer must explicitly re-open a connection.\n     Any unrecognised messages will be dispatched to the RPC connection.\"\"\"\n     def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, coverage_dir):\n         self.index = i\n@@ -437,11 +446,16 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, co\n         self.rpc = None\n         self.url = None\n         self.log = logging.getLogger('TestFramework.node%d' % i)\n+        self.p2p = None\n+        self.p2ps = []\n+        self.p2p_connected = False\n+        self.p2p_ever_connected = False\n+        self.p2p_conn_type = SingleNodeConnCB\n \n-    def __getattr__(self, *args, **kwargs):\n+    def __getattr__(self, name):\n         \"\"\"Dispatches any unrecognised messages to the RPC connection.\"\"\"\n         assert self.rpc_connected and not self.rpc is None, \"Error: no RPC connection\"\n-        return self.rpc.__getattr__(*args, **kwargs)\n+        return self.rpc.__getattr__(name)\n \n     def start(self):\n         \"\"\"Start the node.\"\"\"\n@@ -499,7 +513,7 @@ def is_node_stopped(self):\n \n     def node_encrypt_wallet(self, passphrase):\n         \"\"\"\"Encrypts the wallet.\n-        \n+\n         This causes bitcoind to shutdown, so this method takes\n         care of cleaning up resources.\"\"\"\n         self.encryptwallet(passphrase)\n@@ -508,6 +522,35 @@ def node_encrypt_wallet(self, passphrase):\n         self.rpc = None\n         self.rpc_connected = False\n \n+    def add_p2p_connections(self, number=1, dstaddr='127.0.0.1', dstport=None, p2p_conn_type=None):\n+        if dstport is None:\n+            dstport = p2p_port(self.index)\n+        if p2p_conn_type is None:\n+            p2p_conn_type = self.p2p_conn_type\n+        for i in range(number):\n+            p2p_conn = p2p_conn_type()\n+            self.p2ps.append(p2p_conn)\n+            p2p_conn.add_connection(NodeConn(dstaddr, dstport, self.rpc, p2p_conn))\n+        if self.p2p is None:\n+            self.p2p = self.p2ps[0]\n+        while p2p_conn.connection.state != \"connected\":\n+            time.sleep(0.1)\n+        p2p_conn.wait_for_verack()\n+        self.p2p_connected = True\n+        self.p2p_ever_connected = True\n+\n+    def send_message(self, message):\n+        if not self.p2p_ever_connected:\n+            self.add_p2p_connections()\n+        assert self.p2ps != [], \"No p2p connection\"\n+        self.p2p.send_message(message)\n+\n+    def disconnect_p2p(self, index=0):\n+        self.p2ps[index].connection.disconnect_node()\n+        self.p2ps.pop(index)\n+        if len(self.p2ps) == 0:\n+            self.p2p_connected = False\n+\n class ComparisonTestFramework(BitcoinTestFramework):\n \n     def __init__(self):"
      }
    ]
  },
  {
    "sha": "75e8514922c3e45988eec000f85b2c0b788c9354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWU4NTE0OTIyYzNlNDU5ODhlZWMwMDBmODViMmMwYjc4OGM5MzU0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T13:44:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-30T21:43:22Z"
      },
      "message": "Use TestNode.p2p in assumevalid.py",
      "tree": {
        "sha": "3eeeb217f4440692aa2de0d12d41a6904322df9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3eeeb217f4440692aa2de0d12d41a6904322df9d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75e8514922c3e45988eec000f85b2c0b788c9354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e8514922c3e45988eec000f85b2c0b788c9354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75e8514922c3e45988eec000f85b2c0b788c9354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e8514922c3e45988eec000f85b2c0b788c9354/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "606cc5491506be499c26ef02af0dcde1df989d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606cc5491506be499c26ef02af0dcde1df989d16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/606cc5491506be499c26ef02af0dcde1df989d16"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 19,
      "deletions": 28
    },
    "files": [
      {
        "sha": "977ac18d5809156cdd90d20dd680aece110ee2ea",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 19,
        "deletions": 28,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75e8514922c3e45988eec000f85b2c0b788c9354/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75e8514922c3e45988eec000f85b2c0b788c9354/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=75e8514922c3e45988eec000f85b2c0b788c9354",
        "patch": "@@ -39,18 +39,14 @@\n                                      CTxIn,\n                                      CTxOut,\n                                      NetworkThread,\n-                                     NodeConn,\n                                      SingleNodeConnCB,\n                                      msg_block,\n                                      msg_headers)\n from test_framework.script import (CScript, OP_TRUE)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (start_node, p2p_port, assert_equal)\n+from test_framework.util import assert_equal\n \n class BaseNode(SingleNodeConnCB):\n-    def __init__(self):\n-        super().__init__()\n-\n     def send_header_for_blocks(self, new_blocks):\n         headers_message = msg_headers()\n         headers_message.headers = [CBlockHeader(b) for b in new_blocks]\n@@ -61,6 +57,7 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.p2p_conn_type = BaseNode\n \n     def setup_network(self):\n         # Start node0. We don't start the other nodes yet since\n@@ -97,14 +94,11 @@ def assert_blockchain_height(self, node, height):\n \n     def run_test(self):\n \n-        # Connect to node0\n-        node0 = BaseNode()\n-        connections = []\n-        connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], node0))\n-        node0.add_connection(connections[0])\n+        # Add p2p connection to node0\n+        self.nodes[0].add_p2p_connections()\n \n         NetworkThread().start()  # Start up network handling in another thread\n-        node0.wait_for_verack()\n+        self.nodes[0].p2p.wait_for_verack()\n \n         # Build the blockchain\n         self.tip = int(self.nodes[0].getbestblockhash(), 16)\n@@ -166,36 +160,33 @@ def run_test(self):\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n         self.nodes.append(self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)]))\n-        node1 = BaseNode()  # connects to node1\n-        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n-        node1.add_connection(connections[1])\n-        node1.wait_for_verack()\n+        self.nodes[1].add_p2p_connections()\n+        self.nodes[1].p2p.wait_for_verack()\n \n         self.nodes.append(self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)]))\n-        node2 = BaseNode()  # connects to node2\n-        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n-        node2.add_connection(connections[2])\n-        node2.wait_for_verack()\n+        self.nodes[2].add_p2p_connections()\n+        self.nodes[2].p2p.wait_for_verack()\n \n         # send header lists to all three nodes\n-        node0.send_header_for_blocks(self.blocks[0:2000])\n-        node0.send_header_for_blocks(self.blocks[2000:])\n-        node1.send_header_for_blocks(self.blocks[0:2000])\n-        node1.send_header_for_blocks(self.blocks[2000:])\n-        node2.send_header_for_blocks(self.blocks[0:200])\n+        self.nodes[0].p2p.send_header_for_blocks(self.blocks[0:2000])\n+        self.nodes[0].p2p.send_header_for_blocks(self.blocks[2000:])\n+        self.nodes[1].p2p.send_header_for_blocks(self.blocks[0:2000])\n+        self.nodes[1].p2p.send_header_for_blocks(self.blocks[2000:])\n+        self.nodes[2].p2p.send_header_for_blocks(self.blocks[0:200])\n \n         # Send blocks to node0. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(node0)\n+        self.send_blocks_until_disconnected(self.nodes[0].p2p)\n         self.assert_blockchain_height(self.nodes[0], 101)\n \n         # Send all blocks to node1. All blocks will be accepted.\n         for i in range(2202):\n-            node1.send_message(msg_block(self.blocks[i]))\n-        node1.sync_with_ping()  # make sure the most recent block is synced\n+            self.nodes[1].send_message(msg_block(self.blocks[i]))\n+        # Make sure the most recent block is synced\n+        self.nodes[1].p2p.sync_with_ping()\n         assert_equal(self.nodes[1].getblock(self.nodes[1].getbestblockhash())['height'], 2202)\n \n         # Send blocks to node2. Block 102 will be rejected.\n-        self.send_blocks_until_disconnected(node2)\n+        self.send_blocks_until_disconnected(self.nodes[2].p2p)\n         self.assert_blockchain_height(self.nodes[2], 101)\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "328763ab3d5d998d78c4f899ac7ea094f04c6d2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjg3NjNhYjNkNWQ5OThkNzhjNGY4OTlhYzdlYTA5NGYwNGM2ZDJh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-27T18:18:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-30T21:43:22Z"
      },
      "message": "Use TestNode.p2p in maxuploadtarget.py",
      "tree": {
        "sha": "03957361e50eced74e329ea5dd7e75566f83bd9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03957361e50eced74e329ea5dd7e75566f83bd9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/328763ab3d5d998d78c4f899ac7ea094f04c6d2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/328763ab3d5d998d78c4f899ac7ea094f04c6d2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/328763ab3d5d998d78c4f899ac7ea094f04c6d2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/328763ab3d5d998d78c4f899ac7ea094f04c6d2a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75e8514922c3e45988eec000f85b2c0b788c9354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75e8514922c3e45988eec000f85b2c0b788c9354",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75e8514922c3e45988eec000f85b2c0b788c9354"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 37,
      "deletions": 50
    },
    "files": [
      {
        "sha": "c0589d4316a876d3b030fb9e59a7bf56f5108f6c",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 37,
        "deletions": 50,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/328763ab3d5d998d78c4f899ac7ea094f04c6d2a/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/328763ab3d5d998d78c4f899ac7ea094f04c6d2a/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=328763ab3d5d998d78c4f899ac7ea094f04c6d2a",
        "patch": "@@ -78,11 +78,11 @@ def received_pong():\n         return success\n \n class MaxUploadTest(BitcoinTestFramework):\n- \n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.p2p_conn_type = TestNode\n \n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n@@ -102,21 +102,13 @@ def run_test(self):\n         # Generate some old blocks\n         self.nodes[0].generate(130)\n \n-        # test_nodes[0] will only request old blocks\n-        # test_nodes[1] will only request new blocks\n-        # test_nodes[2] will test resetting the counters\n-        test_nodes = []\n-        connections = []\n+        # Connection 0 will only request old blocks\n+        # Connection 1 will only request new blocks\n+        # Connection 2 will test resetting the counters\n+        self.nodes[0].add_p2p_connections(3)\n \n-        for i in range(3):\n-            test_nodes.append(TestNode())\n-            connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n-            test_nodes[i].add_connection(connections[i])\n-\n-        NetworkThread().start() # Start up network handling in another thread\n-        [x.wait_for_verack() for x in test_nodes]\n-\n-        # Test logic begins here\n+        NetworkThread().start()  # Start up network handling in another thread\n+        [conn.wait_for_verack() for conn in self.nodes[0].p2ps]\n \n         # Now mine a big block\n         mine_large_block(self.nodes[0], self.utxo_cache)\n@@ -136,7 +128,7 @@ def run_test(self):\n         big_new_block = self.nodes[0].getbestblockhash()\n         big_new_block = int(big_new_block, 16)\n \n-        # test_nodes[0] will test what happens if we just keep requesting the\n+        # Connection 0 will test what happens if we just keep requesting the\n         # the same big old block too many times (expect: disconnect)\n \n         getdata_request = msg_getdata()\n@@ -150,84 +142,79 @@ def run_test(self):\n         # 576MB will be reserved for relaying new blocks, so expect this to\n         # succeed for ~235 tries.\n         for i in range(success_count):\n-            test_nodes[0].send_message(getdata_request)\n-            test_nodes[0].sync_with_ping()\n-            assert_equal(test_nodes[0].block_receive_map[big_old_block], i+1)\n+            self.nodes[0].p2ps[0].send_message(getdata_request)\n+            self.nodes[0].p2ps[0].sync_with_ping()\n+            assert_equal(self.nodes[0].p2ps[0].block_receive_map[big_old_block], i+1)\n \n         assert_equal(len(self.nodes[0].getpeerinfo()), 3)\n         # At most a couple more tries should succeed (depending on how long \n         # the test has been running so far).\n         for i in range(3):\n-            test_nodes[0].send_message(getdata_request)\n-        test_nodes[0].wait_for_disconnect()\n+            self.nodes[0].p2ps[0].send_message(getdata_request)\n+        self.nodes[0].p2ps[0].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 2)\n         self.log.info(\"Peer 0 disconnected after downloading old block too many times\")\n \n-        # Requesting the current block on test_nodes[1] should succeed indefinitely,\n+        # Requesting the current block on Connection 1 should succeed indefinitely,\n         # even when over the max upload target.\n         # We'll try 800 times\n         getdata_request.inv = [CInv(2, big_new_block)]\n         for i in range(800):\n-            test_nodes[1].send_message(getdata_request)\n-            test_nodes[1].sync_with_ping()\n-            assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n+            self.nodes[0].p2ps[1].send_message(getdata_request)\n+            self.nodes[0].p2ps[1].sync_with_ping()\n+            assert_equal(self.nodes[0].p2ps[1].block_receive_map[big_new_block], i+1)\n \n         self.log.info(\"Peer 1 able to repeatedly download new block\")\n \n-        # But if test_nodes[1] tries for an old block, it gets disconnected too.\n+        # But if connection 1 tries for an old block, it gets disconnected too.\n         getdata_request.inv = [CInv(2, big_old_block)]\n-        test_nodes[1].send_message(getdata_request)\n-        test_nodes[1].wait_for_disconnect()\n+        self.nodes[0].p2ps[1].send_message(getdata_request)\n+        self.nodes[0].p2ps[1].wait_for_disconnect()\n         assert_equal(len(self.nodes[0].getpeerinfo()), 1)\n \n         self.log.info(\"Peer 1 disconnected after trying to download old block\")\n \n         self.log.info(\"Advancing system time on node to clear counters...\")\n \n         # If we advance the time by 24 hours, then the counters should reset,\n-        # and test_nodes[2] should be able to retrieve the old block.\n+        # and Connection 2 should be able to retrieve the old block.\n         self.nodes[0].setmocktime(int(time.time()))\n-        test_nodes[2].sync_with_ping()\n-        test_nodes[2].send_message(getdata_request)\n-        test_nodes[2].sync_with_ping()\n-        assert_equal(test_nodes[2].block_receive_map[big_old_block], 1)\n+        self.nodes[0].p2ps[2].sync_with_ping()\n+        self.nodes[0].p2ps[2].send_message(getdata_request)\n+        self.nodes[0].p2ps[2].sync_with_ping()\n+        assert_equal(self.nodes[0].p2ps[2].block_receive_map[big_old_block], 1)\n \n         self.log.info(\"Peer 2 able to download old block\")\n \n-        [c.disconnect_node() for c in connections]\n+        [self.nodes[0].disconnect_p2p() for i in range(3)]\n \n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n         self.stop_node(0)\n         self.nodes[0] = self.start_node(0, extra_args=[\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect 3 test nodes\n-        test_nodes = []\n-        connections = []\n-\n-        for i in range(3):\n-            test_nodes.append(TestNode())\n-            connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_nodes[i]))\n-            test_nodes[i].add_connection(connections[i])\n+        self.nodes[0].add_p2p_connections()\n \n         NetworkThread().start() # Start up network handling in another thread\n-        [x.wait_for_verack() for x in test_nodes]\n+        self.nodes[0].p2p.wait_for_verack()\n \n         #retrieve 20 blocks which should be enough to break the 1MB limit\n         getdata_request.inv = [CInv(2, big_new_block)]\n         for i in range(20):\n-            test_nodes[1].send_message(getdata_request)\n-            test_nodes[1].sync_with_ping()\n-            assert_equal(test_nodes[1].block_receive_map[big_new_block], i+1)\n+            self.nodes[0].p2p.send_message(getdata_request)\n+            self.nodes[0].p2p.sync_with_ping()\n+            assert_equal(self.nodes[0].p2p.block_receive_map[big_new_block], i+1)\n \n         getdata_request.inv = [CInv(2, big_old_block)]\n-        test_nodes[1].send_message(getdata_request)\n-        test_nodes[1].wait_for_disconnect()\n-        assert_equal(len(self.nodes[0].getpeerinfo()), 3) #node is still connected because of the whitelist\n+        self.nodes[0].p2p.send_message(getdata_request)\n+        self.nodes[0].p2p.wait_for_disconnect()\n+        assert_equal(len(self.nodes[0].getpeerinfo()), 1)  # node is still connected because of the whitelist\n \n-        self.log.info(\"Peer 1 still connected after trying to download old block (whitelisted)\")\n+        self.log.info(\"Peer 0 still connected after trying to download old block (whitelisted)\")\n \n-        [c.disconnect_node() for c in connections]\n+        # [self.nodes[0].disconnect_p2p(i) for i in range(3)]\n+        # [c.disconnect_node() for c in connections]\n \n if __name__ == '__main__':\n     MaxUploadTest().main()"
      }
    ]
  }
]