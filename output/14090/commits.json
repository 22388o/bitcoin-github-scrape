[
  {
    "sha": "bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYmQ1YWEzZTM2Y2YzMDM3NzlkODg4NzY0ZTFlYmIzYmQyMjQyYTRh",
    "commit": {
      "author": {
        "name": "alex",
        "email": "git@github.com",
        "date": "2018-08-28T09:10:31Z"
      },
      "committer": {
        "name": "alex",
        "email": "git@github.com",
        "date": "2018-09-02T00:39:08Z"
      },
      "message": "progress bar",
      "tree": {
        "sha": "2ca3647a5a7c60934d8f3226518eba291901b61a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ca3647a5a7c60934d8f3226518eba291901b61a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/comments",
    "author": {
      "login": "invalid-email-address",
      "id": 148100,
      "node_id": "MDQ6VXNlcjE0ODEwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/invalid-email-address",
      "html_url": "https://github.com/invalid-email-address",
      "followers_url": "https://api.github.com/users/invalid-email-address/followers",
      "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}",
      "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions",
      "organizations_url": "https://api.github.com/users/invalid-email-address/orgs",
      "repos_url": "https://api.github.com/users/invalid-email-address/repos",
      "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}",
      "received_events_url": "https://api.github.com/users/invalid-email-address/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "invalid-email-address",
      "id": 148100,
      "node_id": "MDQ6VXNlcjE0ODEwMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/invalid-email-address",
      "html_url": "https://github.com/invalid-email-address",
      "followers_url": "https://api.github.com/users/invalid-email-address/followers",
      "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}",
      "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions",
      "organizations_url": "https://api.github.com/users/invalid-email-address/orgs",
      "repos_url": "https://api.github.com/users/invalid-email-address/repos",
      "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}",
      "received_events_url": "https://api.github.com/users/invalid-email-address/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "540bf8aacc50aae0ea5beb76511905a7d2a3e15f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540bf8aacc50aae0ea5beb76511905a7d2a3e15f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/540bf8aacc50aae0ea5beb76511905a7d2a3e15f"
      }
    ],
    "stats": {
      "total": 109,
      "additions": 94,
      "deletions": 15
    },
    "files": [
      {
        "sha": "2ce1c2979320e935b2445ec629d4d71ee34e0f3e",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
        "patch": "@@ -551,11 +551,18 @@ static void SetupUIArgs()\n     gArgs.AddArg(\"-uiplatform\", strprintf(\"Select platform to customize UI for (one of windows, macosx, other; default: %s)\", BitcoinGUI::DEFAULT_UIPLATFORM), true, OptionsCategory::GUI);\n }\n \n+#if defined(ENABLE_WALLET) && defined(Q_OS_WIN)\n+UINT WM_ret;\n+#endif\n+\n #ifndef BITCOIN_QT_TEST\n+\n int main(int argc, char *argv[])\n {\n     SetupEnvironment();\n-\n+#if defined(ENABLE_WALLET) && defined(Q_OS_WIN)\n+WM_ret = RegisterWindowMessageW(L\"TaskbarButtonCreated\");    // message windows will send\n+#endif\n     std::unique_ptr<interfaces::Node> node = interfaces::MakeNode();\n \n     // Do not refer to data directory yet, this can be overridden by Intro::pickDataDirectory"
      },
      {
        "sha": "990e29652e21d56b7e405ce41ae108bdc72ad9e1",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
        "patch": "@@ -67,6 +67,12 @@ const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n #endif\n         ;\n \n+#if defined(ENABLE_WALLET) && defined(Q_OS_WIN)\n+extern \tstd::thread com_u;\t\t\t// COM maintenance\n+extern \tstd::condition_variable com_cvp;\n+extern \tstd::atomic<bool> com_tr;\n+#endif\n+\n BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     m_node(node),\n@@ -201,6 +207,7 @@ BitcoinGUI::BitcoinGUI(interfaces::Node& node, const PlatformStyle *_platformSty\n     });\n \n     modalOverlay = new ModalOverlay(this->centralWidget());\n+\n #ifdef ENABLE_WALLET\n     if(enableWallet) {\n         connect(walletFrame, &WalletFrame::requestedSyncWarningInfo, this, &BitcoinGUI::showModalOverlay);\n@@ -215,6 +222,11 @@ BitcoinGUI::~BitcoinGUI()\n     // Unsubscribe from notifications from core\n     unsubscribeFromCoreSignals();\n \n+#if defined(ENABLE_WALLET) && defined(Q_OS_WIN)\n+\t\tcom_tr = 1;\n+\t\tcom_cvp.notify_one();\n+\t\tcom_u.join();\n+#endif\n     QSettings settings;\n     settings.setValue(\"MainWindowGeometry\", saveGeometry());\n     if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)"
      },
      {
        "sha": "90028238f740a93326b614c69a603974e640090b",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
        "patch": "@@ -27,6 +27,10 @@ userClosed(false)\n         raise();\n     }\n \n+#if defined(Q_OS_WIN)\n+    sp_tray = std::shared_ptr<int> (new int(0));\n+    com_r = sp_tray;\n+ #endif\n     blockProcessTime.clear();\n     setVisible(false);\n }\n@@ -122,6 +126,9 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     // show the percentage done according to nVerificationProgress\n     ui->percentageProgress->setText(QString::number(nVerificationProgress*100, 'f', 2)+\"%\");\n     ui->progressBar->setValue(nVerificationProgress*100);\n+ #if defined(Q_OS_WIN)\n+   *sp_tray = nVerificationProgress*190;\n+#endif\n \n     if (!bestHeaderDate.isValid())\n         // not syncing"
      },
      {
        "sha": "815a1e70cf0d52970429983eee41b4df56dd894d",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
        "patch": "@@ -7,9 +7,13 @@\n \n #include <QDateTime>\n #include <QWidget>\n+#include <memory>\n \n //! The required delta of headers to the estimated number of available headers until we show the IBD progress\n static constexpr int HEADER_HEIGHT_DELTA_SYNC = 24;\n+#if defined(Q_OS_WIN)\n+extern\tstd::weak_ptr<int> com_r;\n+#endif \n \n namespace Ui {\n     class ModalOverlay;\n@@ -42,6 +46,9 @@ public Q_SLOTS:\n     Ui::ModalOverlay *ui;\n     int bestHeaderHeight; //best known height (based on the headers)\n     QDateTime bestHeaderDate;\n+#if defined(Q_OS_WIN)\n+    std::shared_ptr<int> sp_tray;\n+#endif \n     QVector<QPair<qint64, double> > blockProcessTime;\n     bool layerIsVisible;\n     bool userClosed;"
      },
      {
        "sha": "a82bbe1ae86b8296e7a8ffd96edaf84f3cc95a6b",
        "filename": "src/qt/winshutdownmonitor.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 14,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/winshutdownmonitor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bbd5aa3e36cf303779d888764e1ebb3bd2242a4a/src/qt/winshutdownmonitor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/winshutdownmonitor.cpp?ref=bbd5aa3e36cf303779d888764e1ebb3bd2242a4a",
        "patch": "@@ -9,18 +9,37 @@\n #include <util.h>\n \n #include <windows.h>\n-\n+#ifdef ENABLE_WALLET\n+#include <condition_variable>\n+#include <thread>\n+#include <atomic>\n+#include <shobjidl.h>\n+#include <memory>\n+#endif\n #include <QDebug>\n \n #include <openssl/rand.h>\n \n // If we don't want a message to be processed by Qt, return true and set result to\n // the value that the window procedure should return. Otherwise return false.\n+#ifdef ENABLE_WALLET\n+\tstd::thread com_u;\t\t\t// COM maintenance\n+\tstd::condition_variable com_cvp;\n+\tstd::mutex com_mp;\t\t\t// wait lock \n+\tstd::atomic<bool> com_tr;\n+\tHWND   hwnd;\t\t\t\t// third window\n+\tUINT CALLBACK hammer(VOID *c); \n+\tstd::weak_ptr<int> com_r;\n+extern UINT WM_ret;\n+ITaskbarList3 *bhr;\n+#endif \n+\n bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pMessage, long *pnResult)\n {\n        Q_UNUSED(eventType);\n \n        MSG *pMsg = static_cast<MSG *>(pMessage);\n+\tstatic\tstd::atomic_int com_b; \t\t\t// counter \n \n        // Seed OpenSSL PRNG with Windows event data (e.g.  mouse movements and other user interactions)\n        if (RAND_event(pMsg->message, pMsg->wParam, pMsg->lParam) == 0) {\n@@ -34,21 +53,27 @@ bool WinShutdownMonitor::nativeEventFilter(const QByteArray &eventType, void *pM\n \n        switch(pMsg->message)\n        {\n-           case WM_QUERYENDSESSION:\n-           {\n+\t\tcase WM_QUERYENDSESSION:\n                // Initiate a client shutdown after receiving a WM_QUERYENDSESSION and block\n                // Windows session end until we have finished client shutdown.\n-               StartShutdown();\n-               *pnResult = FALSE;\n-               return true;\n-           }\n-\n-           case WM_ENDSESSION:\n-           {\n-               *pnResult = FALSE;\n-               return true;\n-           }\n-       }\n+\t\t\t\tStartShutdown();\n+\t\t\t\t*pnResult = FALSE;\n+\t\t\t\treturn true;\n+\t\t\t\tbreak;\n+\t\tcase WM_ENDSESSION:\n+\t\t\t\t*pnResult = FALSE;\n+\t\t\t\treturn true;\n+\t\t\t\tbreak;\n+\t\tdefault:\n+#ifdef ENABLE_WALLET\n+\t\t\t\tif (pMsg->message == WM_ret && com_b++ == 2 )\n+\t\t\t\t{\n+\t\t\t\t\thwnd = pMsg->hwnd;\n+\t\t\t\t\tcom_u = std::thread(&hammer ,(LPVOID)NULL); \n+\t\t\t\t}\n+#endif\n+\t\t\t\tbreak;\n+\t   }\n \n        return false;\n }\n@@ -67,4 +92,25 @@ void WinShutdownMonitor::registerShutdownBlockReason(const QString& strReason, c\n     else\n         qWarning() << \"registerShutdownBlockReason: Failed to register: \" + strReason;\n }\n+\n+#ifdef ENABLE_WALLET\n+\n+UINT CALLBACK hammer(VOID *c)\n+{\n+\tif(com_r.use_count() &&  *com_r.lock() > 184) return 0;\n+\tint reserve = 0;\n+\tCoInitializeEx(NULL, COINIT_MULTITHREADED); //used only by extra thread for now\n+\tCoCreateInstance(CLSID_TaskbarList ,NULL ,CLSCTX_INPROC_SERVER ,IID_ITaskbarList3 ,(LPVOID*)&bhr); //pointer grabs smth finally \n+\tbhr->HrInit();\n+\tdo\n+\t{\n+\t\tstd::unique_lock<std::mutex> lk(com_mp);\n+\t\tbhr->SetProgressValue(hwnd , com_r.expired() == 0 ? reserve = *com_r.lock() : reserve, 190);\n+\t\tcom_cvp.wait_for(lk ,std::chrono::milliseconds(900) ,[] { return com_tr==1; }); \n+\t}while(!com_tr);\n+\tbhr->Release();\n+\tCoUninitialize();\n+\treturn 0;\n+}\n+#endif\n #endif"
      }
    ]
  }
]