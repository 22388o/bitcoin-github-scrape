[
  {
    "sha": "bf30cd4922ea62577d7bf63f5029e8be62665d45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjMwY2Q0OTIyZWE2MjU3N2Q3YmY2M2Y1MDI5ZThiZTYyNjY1ZDQ1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-02-24T19:34:17Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "refactor: Add interfaces::FoundBlock class to selectively return block data\n\nFoundBlock class allows interfaces::Chain::findBlock to return more block\ninformation without having lots of optional output parameters. FoundBlock class\nis also used by other chain methods in upcoming commits.\n\nThere is mostly no change in behavior. Only exception is\nCWallet::RescanFromTime now throwing NonFatalCheckError instead of\nstd::logic_error.",
      "tree": {
        "sha": "73c53b3583a3870d5620ff06cc724f2b944029e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73c53b3583a3870d5620ff06cc724f2b944029e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf30cd4922ea62577d7bf63f5029e8be62665d45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf30cd4922ea62577d7bf63f5029e8be62665d45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf30cd4922ea62577d7bf63f5029e8be62665d45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf30cd4922ea62577d7bf63f5029e8be62665d45/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d52ba21dfff99173abb927bc964ce7ceb711d789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d52ba21dfff99173abb927bc964ce7ceb711d789",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d52ba21dfff99173abb927bc964ce7ceb711d789"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 99,
      "deletions": 36
    },
    "files": [
      {
        "sha": "a4d89468074c2f89c7e9708485151a4c53c5b021",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "patch": "@@ -198,6 +198,7 @@ BITCOIN_TESTS =\\\n   test/fs_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n+  test/interfaces_tests.cpp \\\n   test/key_io_tests.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\"
      },
      {
        "sha": "cfaf79f709e6688cab3c457ab1a9645630056903",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 19,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "patch": "@@ -38,6 +38,21 @@\n namespace interfaces {\n namespace {\n \n+bool FillBlock(const CBlockIndex* index, const FoundBlock& block, UniqueLock<RecursiveMutex>& lock)\n+{\n+    if (!index) return false;\n+    if (block.m_hash) *block.m_hash = index->GetBlockHash();\n+    if (block.m_height) *block.m_height = index->nHeight;\n+    if (block.m_time) *block.m_time = index->GetBlockTime();\n+    if (block.m_max_time) *block.m_max_time = index->GetBlockTimeMax();\n+    if (block.m_mtp_time) *block.m_mtp_time = index->GetMedianTimePast();\n+    if (block.m_data) {\n+        REVERSE_LOCK(lock);\n+        if (!ReadBlockFromDisk(*block.m_data, index, Params().GetConsensus())) block.m_data->SetNull();\n+    }\n+    return true;\n+}\n+\n class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n {\n     Optional<int> getHeight() override\n@@ -247,26 +262,10 @@ class ChainImpl : public Chain\n         std::unique_ptr<Chain::Lock> result = std::move(lock); // Temporary to avoid CWG 1579\n         return result;\n     }\n-    bool findBlock(const uint256& hash, CBlock* block, int64_t* time, int64_t* time_max) override\n+    bool findBlock(const uint256& hash, const FoundBlock& block) override\n     {\n-        CBlockIndex* index;\n-        {\n-            LOCK(cs_main);\n-            index = LookupBlockIndex(hash);\n-            if (!index) {\n-                return false;\n-            }\n-            if (time) {\n-                *time = index->GetBlockTime();\n-            }\n-            if (time_max) {\n-                *time_max = index->GetBlockTimeMax();\n-            }\n-        }\n-        if (block && !ReadBlockFromDisk(*block, index, Params().GetConsensus())) {\n-            block->SetNull();\n-        }\n-        return true;\n+        WAIT_LOCK(cs_main, lock);\n+        return FillBlock(LookupBlockIndex(hash), block, lock);\n     }\n     void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override"
      },
      {
        "sha": "3778ab9a8bb2b8fa1d2134bfcac9319c93329aee",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "patch": "@@ -30,6 +30,27 @@ namespace interfaces {\n class Handler;\n class Wallet;\n \n+//! Helper for findBlock to selectively return pieces of block data.\n+class FoundBlock\n+{\n+public:\n+    FoundBlock& hash(uint256& hash) { m_hash = &hash; return *this; }\n+    FoundBlock& height(int& height) { m_height = &height; return *this; }\n+    FoundBlock& time(int64_t& time) { m_time = &time; return *this; }\n+    FoundBlock& maxTime(int64_t& max_time) { m_max_time = &max_time; return *this; }\n+    FoundBlock& mtpTime(int64_t& mtp_time) { m_mtp_time = &mtp_time; return *this; }\n+    //! Read block data from disk. If the block exists but doesn't have data\n+    //! (for example due to pruning), the CBlock variable will be set to null.\n+    FoundBlock& data(CBlock& data) { m_data = &data; return *this; }\n+\n+    uint256* m_hash = nullptr;\n+    int* m_height = nullptr;\n+    int64_t* m_time = nullptr;\n+    int64_t* m_max_time = nullptr;\n+    int64_t* m_mtp_time = nullptr;\n+    CBlock* m_data = nullptr;\n+};\n+\n //! Interface giving clients (wallet processes, maybe other analysis tools in\n //! the future) ability to access to the chain state, receive notifications,\n //! estimate fees, and submit transactions.\n@@ -127,14 +148,7 @@ class Chain\n \n     //! Return whether node has the block and optionally return block metadata\n     //! or contents.\n-    //!\n-    //! If a block pointer is provided to retrieve the block contents, and the\n-    //! block exists but doesn't have data (for example due to pruning), the\n-    //! block will be empty and all fields set to null.\n-    virtual bool findBlock(const uint256& hash,\n-        CBlock* block = nullptr,\n-        int64_t* time = nullptr,\n-        int64_t* max_time = nullptr) = 0;\n+    virtual bool findBlock(const uint256& hash, const FoundBlock& block={}) = 0;\n \n     //! Look up unspent output information. Returns coins in the mempool and in\n     //! the current chain UTXO set. Iterates through all the keys in the map and"
      },
      {
        "sha": "0c6f0ef0a7fa003e34de37b7f6ecdbd0bc5062a1",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "patch": "@@ -210,7 +210,7 @@ class SCOPED_LOCKABLE UniqueLock : public Base\n      friend class reverse_lock;\n };\n \n-#define REVERSE_LOCK(g) decltype(g)::reverse_lock PASTE2(revlock, __COUNTER__)(g, #g, __FILE__, __LINE__)\n+#define REVERSE_LOCK(g) typename std::decay<decltype(g)>::type::reverse_lock PASTE2(revlock, __COUNTER__)(g, #g, __FILE__, __LINE__)\n \n template<typename MutexArg>\n using DebugLock = UniqueLock<typename std::remove_reference<typename std::remove_pointer<MutexArg>::type>::type>;"
      },
      {
        "sha": "e3d1738c7ff38bc44233f0653cc6daea2307f899",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <interfaces/chain.h>\n+#include <test/util/setup_common.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+using interfaces::FoundBlock;\n+\n+BOOST_FIXTURE_TEST_SUITE(interfaces_tests, TestChain100Setup)\n+\n+BOOST_AUTO_TEST_CASE(findBlock)\n+{\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto& active = ChainActive();\n+\n+    uint256 hash;\n+    BOOST_CHECK(chain->findBlock(active[10]->GetBlockHash(), FoundBlock().hash(hash)));\n+    BOOST_CHECK_EQUAL(hash, active[10]->GetBlockHash());\n+\n+    int height = -1;\n+    BOOST_CHECK(chain->findBlock(active[20]->GetBlockHash(), FoundBlock().height(height)));\n+    BOOST_CHECK_EQUAL(height, active[20]->nHeight);\n+\n+    CBlock data;\n+    BOOST_CHECK(chain->findBlock(active[30]->GetBlockHash(), FoundBlock().data(data)));\n+    BOOST_CHECK_EQUAL(data.GetHash(), active[30]->GetBlockHash());\n+\n+    int64_t time = -1;\n+    BOOST_CHECK(chain->findBlock(active[40]->GetBlockHash(), FoundBlock().time(time)));\n+    BOOST_CHECK_EQUAL(time, active[40]->GetBlockTime());\n+\n+    int64_t max_time = -1;\n+    BOOST_CHECK(chain->findBlock(active[50]->GetBlockHash(), FoundBlock().maxTime(max_time)));\n+    BOOST_CHECK_EQUAL(max_time, active[50]->GetBlockTimeMax());\n+\n+    int64_t mtp_time = -1;\n+    BOOST_CHECK(chain->findBlock(active[60]->GetBlockHash(), FoundBlock().mtpTime(mtp_time)));\n+    BOOST_CHECK_EQUAL(mtp_time, active[60]->GetMedianTimePast());\n+\n+    BOOST_CHECK(!chain->findBlock({}, FoundBlock()));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1e6d37c462c5d5aebb56458e035c7b329f21dc57",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "patch": "@@ -37,6 +37,8 @@\n #include <univalue.h>\n \n \n+using interfaces::FoundBlock;\n+\n static const std::string WALLET_ENDPOINT_BASE = \"/wallet/\";\n \n static inline bool GetAvoidReuseFlag(const CWallet* const pwallet, const UniValue& param) {\n@@ -149,8 +151,7 @@ static void WalletTxToJSON(interfaces::Chain& chain, interfaces::Chain::Lock& lo\n         entry.pushKV(\"blockheight\", wtx.m_confirm.block_height);\n         entry.pushKV(\"blockindex\", wtx.m_confirm.nIndex);\n         int64_t block_time;\n-        bool found_block = chain.findBlock(wtx.m_confirm.hashBlock, nullptr /* block */, &block_time);\n-        CHECK_NONFATAL(found_block);\n+        CHECK_NONFATAL(chain.findBlock(wtx.m_confirm.hashBlock, FoundBlock().time(block_time)));\n         entry.pushKV(\"blocktime\", block_time);\n     } else {\n         entry.pushKV(\"trusted\", wtx.IsTrusted(locked_chain));\n@@ -1618,7 +1619,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     UniValue removed(UniValue::VARR);\n     while (include_removed && altheight && *altheight > *height) {\n         CBlock block;\n-        if (!pwallet->chain().findBlock(blockId, &block) || block.IsNull()) {\n+        if (!pwallet->chain().findBlock(blockId, FoundBlock().data(block)) || block.IsNull()) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n         }\n         for (const CTransactionRef& tx : block.vtx) {"
      },
      {
        "sha": "c8641b03fb62a3d658c5718239e6fa142efecaf6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf30cd4922ea62577d7bf63f5029e8be62665d45/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "patch": "@@ -22,6 +22,7 @@\n #include <script/script.h>\n #include <script/signingprovider.h>\n #include <util/bip32.h>\n+#include <util/check.h>\n #include <util/error.h>\n #include <util/fees.h>\n #include <util/moneystr.h>\n@@ -35,6 +36,8 @@\n \n #include <boost/algorithm/string/replace.hpp>\n \n+using interfaces::FoundBlock;\n+\n const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n     {WALLET_FLAG_AVOID_REUSE,\n         \"You need to rescan the blockchain in order to correctly mark used \"\n@@ -1601,9 +1604,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n         ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n         if (result.status == ScanResult::FAILURE) {\n             int64_t time_max;\n-            if (!chain().findBlock(result.last_failed_block, nullptr /* block */, nullptr /* time */, &time_max)) {\n-                throw std::logic_error(\"ScanForWalletTransactions returned invalid block hash\");\n-            }\n+            CHECK_NONFATAL(chain().findBlock(result.last_failed_block, FoundBlock().maxTime(time_max)));\n             return time_max + TIMESTAMP_WINDOW + 1;\n         }\n     }\n@@ -1671,7 +1672,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n         }\n \n         CBlock block;\n-        if (chain().findBlock(block_hash, &block) && !block.IsNull()) {\n+        if (chain().findBlock(block_hash, FoundBlock().data(block)) && !block.IsNull()) {\n             auto locked_chain = chain().lock();\n             LOCK(cs_wallet);\n             if (!locked_chain->getBlockHeight(block_hash)) {\n@@ -3622,7 +3623,7 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n     unsigned int nTimeSmart = wtx.nTimeReceived;\n     if (!wtx.isUnconfirmed() && !wtx.isAbandoned()) {\n         int64_t blocktime;\n-        if (chain().findBlock(wtx.m_confirm.hashBlock, nullptr /* block */, &blocktime)) {\n+        if (chain().findBlock(wtx.m_confirm.hashBlock, FoundBlock().time(blocktime))) {\n             int64_t latestNow = wtx.nTimeReceived;\n             int64_t latestEntry = 0;\n "
      }
    ]
  },
  {
    "sha": "f6da44ccce4cfff53433e665305a6fe0a01364e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmRhNDRjY2NlNGNmZmY1MzQzM2U2NjUzMDVhNmZlMGEwMTM2NGU0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-16T20:56:58Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in tryGetTxStatus and tryGetBalances\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nIt also helps ensure the GUI display stays up to date in the case where the\nnode chain height runs ahead of wallet last block processed height.",
      "tree": {
        "sha": "d0a3f3fd875398a2ff5b44d2bf5a2b24911e65e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0a3f3fd875398a2ff5b44d2bf5a2b24911e65e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6da44ccce4cfff53433e665305a6fe0a01364e4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6da44ccce4cfff53433e665305a6fe0a01364e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6da44ccce4cfff53433e665305a6fe0a01364e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6da44ccce4cfff53433e665305a6fe0a01364e4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf30cd4922ea62577d7bf63f5029e8be62665d45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf30cd4922ea62577d7bf63f5029e8be62665d45"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c67b82643a57c838417a503eda0109264961228b",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6da44ccce4cfff53433e665305a6fe0a01364e4/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6da44ccce4cfff53433e665305a6fe0a01364e4/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=f6da44ccce4cfff53433e665305a6fe0a01364e4",
        "patch": "@@ -14,6 +14,7 @@\n #include <sync.h>\n #include <ui_interface.h>\n #include <uint256.h>\n+#include <util/check.h>\n #include <util/system.h>\n #include <wallet/feebumper.h>\n #include <wallet/fees.h>\n@@ -62,7 +63,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n WalletTxStatus MakeWalletTxStatus(interfaces::Chain::Lock& locked_chain, const CWalletTx& wtx)\n {\n     WalletTxStatus result;\n-    result.block_height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock).get_value_or(std::numeric_limits<int>::max());\n+    result.block_height = wtx.m_confirm.block_height > 0 ? wtx.m_confirm.block_height : std::numeric_limits<int>::max();\n     result.blocks_to_maturity = wtx.GetBlocksToMaturity();\n     result.depth_in_main_chain = wtx.GetDepthInMainChain();\n     result.time_received = wtx.nTimeReceived;\n@@ -317,13 +318,9 @@ class WalletImpl : public Wallet\n         if (mi == m_wallet->mapWallet.end()) {\n             return false;\n         }\n-        if (Optional<int> height = locked_chain->getHeight()) {\n-            num_blocks = *height;\n-            block_time = locked_chain->getBlockTime(*height);\n-        } else {\n-            num_blocks = -1;\n-            block_time = -1;\n-        }\n+        num_blocks = m_wallet->GetLastBlockHeight();\n+        block_time = -1;\n+        CHECK_NONFATAL(m_wallet->chain().findBlock(m_wallet->GetLastBlockHash(), FoundBlock().time(block_time)));\n         tx_status = MakeWalletTxStatus(*locked_chain, mi->second);\n         return true;\n     }\n@@ -372,12 +369,12 @@ class WalletImpl : public Wallet\n     {\n         auto locked_chain = m_wallet->chain().lock(true /* try_lock */);\n         if (!locked_chain) return false;\n-        num_blocks = locked_chain->getHeight().get_value_or(-1);\n-        if (!force && num_blocks == cached_num_blocks) return false;\n         TRY_LOCK(m_wallet->cs_wallet, locked_wallet);\n         if (!locked_wallet) {\n             return false;\n         }\n+        num_blocks = m_wallet->GetLastBlockHeight();\n+        if (!force && num_blocks == cached_num_blocks) return false;\n         balances = getBalances();\n         return true;\n     }"
      },
      {
        "sha": "26824946c69ab57b93305fcb9cf423417d6b64d8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6da44ccce4cfff53433e665305a6fe0a01364e4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6da44ccce4cfff53433e665305a6fe0a01364e4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f6da44ccce4cfff53433e665305a6fe0a01364e4",
        "patch": "@@ -1200,6 +1200,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         assert(m_last_block_processed_height >= 0);\n         return m_last_block_processed_height;\n     };\n+    uint256 GetLastBlockHash() const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n+    {\n+        AssertLockHeld(cs_wallet);\n+        assert(m_last_block_processed_height >= 0);\n+        return m_last_block_processed;\n+    }\n     /** Set last block processed height, currently only use in unit test */\n     void SetLastBlockProcessed(int block_height, uint256 block_hash) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {"
      }
    ]
  },
  {
    "sha": "ade5f87971211bc67753f14a0d49e020142efc7c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGU1Zjg3OTcxMjExYmM2Nzc1M2YxNGEwZDQ5ZTAyMDE0MmVmYzdj",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-16T21:13:15Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet refactor: Avoid use of Chain::Lock in qt wallettests\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change doesn't affect behavior.",
      "tree": {
        "sha": "ab6c5b990c748e170565854ecdfe0894425a25a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab6c5b990c748e170565854ecdfe0894425a25a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ade5f87971211bc67753f14a0d49e020142efc7c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade5f87971211bc67753f14a0d49e020142efc7c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ade5f87971211bc67753f14a0d49e020142efc7c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade5f87971211bc67753f14a0d49e020142efc7c/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6da44ccce4cfff53433e665305a6fe0a01364e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6da44ccce4cfff53433e665305a6fe0a01364e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6da44ccce4cfff53433e665305a6fe0a01364e4"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6a136ba744375f53f2e527cdf28ff1c70ec2c44a",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ade5f87971211bc67753f14a0d49e020142efc7c/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ade5f87971211bc67753f14a0d49e020142efc7c/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=ade5f87971211bc67753f14a0d49e020142efc7c",
        "patch": "@@ -151,12 +151,9 @@ void TestGUI(interfaces::Node& node)\n         wallet->SetLastBlockProcessed(105, ::ChainActive().Tip()->GetBlockHash());\n     }\n     {\n-        auto locked_chain = wallet->chain().lock();\n-        LockAssertion lock(::cs_main);\n-\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(locked_chain->getBlockHash(0), {} /* stop_block */, reserver, true /* fUpdate */);\n+        CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, {} /* stop_block */, reserver, true /* fUpdate */);\n         QCOMPARE(result.status, CWallet::ScanResult::SUCCESS);\n         QCOMPARE(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n         QVERIFY(result.last_failed_block.IsNull());"
      }
    ]
  },
  {
    "sha": "c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTY5NGNlNmJiN2UxOWE4NzIyZDU1ODNjZDg1YWQxN2RhNDBiYjY3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-16T21:38:30Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in importprunedfunds\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change only affects behavior in the case where wallet last block processed\nfalls behind the chain tip, in which case the \"Block not found in chain\" error\nwill be stricter and not allow importing data from a blocks between the wallet\nlast processed tip and the current node tip.",
      "tree": {
        "sha": "21e0b8bdd3d8cba56623e3f63696f31a9d6a6517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21e0b8bdd3d8cba56623e3f63696f31a9d6a6517"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ade5f87971211bc67753f14a0d49e020142efc7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ade5f87971211bc67753f14a0d49e020142efc7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ade5f87971211bc67753f14a0d49e020142efc7c"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 30,
      "deletions": 5
    },
    "files": [
      {
        "sha": "1c1fbe7387d862ae9f337782e30963e581abdcf3",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
        "patch": "@@ -267,6 +267,14 @@ class ChainImpl : public Chain\n         WAIT_LOCK(cs_main, lock);\n         return FillBlock(LookupBlockIndex(hash), block, lock);\n     }\n+    bool findAncestorByHash(const uint256& block_hash, const uint256& ancestor_hash, const FoundBlock& ancestor_out) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        const CBlockIndex* block = LookupBlockIndex(block_hash);\n+        const CBlockIndex* ancestor = LookupBlockIndex(ancestor_hash);\n+        if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n+        return FillBlock(ancestor, ancestor_out, lock);\n+    }\n     void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n     {"
      },
      {
        "sha": "7504f4cfb6008c462d96614ecf95a5f8990999e0",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
        "patch": "@@ -150,6 +150,12 @@ class Chain\n     //! or contents.\n     virtual bool findBlock(const uint256& hash, const FoundBlock& block={}) = 0;\n \n+    //! Return whether block descends from a specified ancestor, and\n+    //! optionally return ancestor information.\n+    virtual bool findAncestorByHash(const uint256& block_hash,\n+        const uint256& ancestor_hash,\n+        const FoundBlock& ancestor_out={}) = 0;\n+\n     //! Look up unspent output information. Returns coins in the mempool and in\n     //! the current chain UTXO set. Iterates through all the keys in the map and\n     //! populates the values."
      },
      {
        "sha": "caa988df0d1847d1699e9db5aadb312c4d0d7b6c",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
        "patch": "@@ -44,4 +44,14 @@ BOOST_AUTO_TEST_CASE(findBlock)\n     BOOST_CHECK(!chain->findBlock({}, FoundBlock()));\n }\n \n+BOOST_AUTO_TEST_CASE(findAncestorByHash)\n+{\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto& active = ChainActive();\n+    int height = -1;\n+    BOOST_CHECK(chain->findAncestorByHash(active[20]->GetBlockHash(), active[10]->GetBlockHash(), FoundBlock().height(height)));\n+    BOOST_CHECK_EQUAL(height, 10);\n+    BOOST_CHECK(!chain->findAncestorByHash(active[10]->GetBlockHash(), active[20]->GetBlockHash()));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1d6b4832eb469f3ad70baf5cdd98829270fda164",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1694ce6bb7e19a8722d5583cd85ad17da40bb67/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
        "patch": "@@ -28,6 +28,8 @@\n \n \n \n+using interfaces::FoundBlock;\n+\n std::string static EncodeDumpString(const std::string &str) {\n     std::stringstream ret;\n     for (const unsigned char c : str) {\n@@ -359,8 +361,9 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     }\n \n     auto locked_chain = pwallet->chain().lock();\n-    Optional<int> height = locked_chain->getBlockHeight(merkleBlock.header.GetHash());\n-    if (height == nullopt) {\n+    LOCK(pwallet->cs_wallet);\n+    int height;\n+    if (!pwallet->chain().findAncestorByHash(pwallet->GetLastBlockHash(), merkleBlock.header.GetHash(), FoundBlock().height(height))) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n     }\n \n@@ -371,11 +374,9 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n     unsigned int txnIndex = vIndex[it - vMatch.begin()];\n \n-    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, *height, merkleBlock.header.GetHash(), txnIndex);\n+    CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, height, merkleBlock.header.GetHash(), txnIndex);\n     wtx.m_confirm = confirm;\n \n-    LOCK(pwallet->cs_wallet);\n-\n     if (pwallet->IsMine(*wtx.tx)) {\n         pwallet->AddToWallet(wtx, false);\n         return NullUniValue;"
      }
    ]
  },
  {
    "sha": "25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWE5ZmNmOWU1M2JmYTk0ZThmOGIxOWE0YWJmZGEwZjQ0NGY2YjJh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-16T21:42:01Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in importwallet and dumpwallet\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change only affects behavior in the case where wallet last block processed\nfalls behind the chain tip, in which case it will use more accurate backup and\nrescan timestamps.",
      "tree": {
        "sha": "a462484a0d380feb2eefce418276a002b60daa2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a462484a0d380feb2eefce418276a002b60daa2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1694ce6bb7e19a8722d5583cd85ad17da40bb67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c1694ce6bb7e19a8722d5583cd85ad17da40bb67"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "255255c3f945b574d0e2a301d5bab0a334d49230",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
        "patch": "@@ -566,8 +566,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         if (!file.is_open()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n         }\n-        Optional<int> tip_height = locked_chain->getHeight();\n-        nTimeBegin = tip_height ? locked_chain->getBlockTime(*tip_height) : 0;\n+        CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(nTimeBegin)));\n \n         int64_t nFilesize = std::max((int64_t)1, (int64_t)file.tellg());\n         file.seekg(0, file.beg);\n@@ -791,9 +790,10 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     // produce output\n     file << strprintf(\"# Wallet dump created by Bitcoin %s\\n\", CLIENT_BUILD);\n     file << strprintf(\"# * Created on %s\\n\", FormatISO8601DateTime(GetTime()));\n-    const Optional<int> tip_height = locked_chain->getHeight();\n-    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", tip_height.get_value_or(-1), tip_height ? locked_chain->getBlockHash(*tip_height).ToString() : \"(missing block hash)\");\n-    file << strprintf(\"#   mined on %s\\n\", tip_height ? FormatISO8601DateTime(locked_chain->getBlockTime(*tip_height)) : \"(missing block time)\");\n+    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", pwallet->GetLastBlockHeight(), pwallet->GetLastBlockHash().ToString());\n+    int64_t block_time = 0;\n+    CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(block_time)));\n+    file << strprintf(\"#   mined on %s\\n\", FormatISO8601DateTime(block_time));\n     file << \"\\n\";\n \n     // add the base58check encoded extended master if the wallet uses HD"
      },
      {
        "sha": "f333b09ad987291f6f9a8da0b171358fc29d2585",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
        "patch": "@@ -225,6 +225,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.setArray();\n         request.params.push_back(backup_file);\n         AddWallet(wallet);\n+        wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         ::dumpwallet(request);\n         RemoveWallet(wallet);\n     }\n@@ -233,16 +234,17 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // were scanned, and no prior blocks were scanned.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n+        LOCK(wallet->cs_wallet);\n         wallet->SetupLegacyScriptPubKeyMan();\n \n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back(backup_file);\n         AddWallet(wallet);\n+        wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         ::importwallet(request);\n         RemoveWallet(wallet);\n \n-        LOCK(wallet->cs_wallet);\n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n         BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);\n         for (size_t i = 0; i < m_coinbase_txns.size(); ++i) {"
      }
    ]
  },
  {
    "sha": "bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzk2YTliZmM2MWFmZGI2OTZmYjkyY2I2NDRlZDVmYzNkMTc5M2Yx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-16T21:47:00Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in importmulti\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change only affects behavior in the case where wallet last block processed\nfalls behind the chain tip, in which case it may use a more accurate rescan\ntime.",
      "tree": {
        "sha": "55ab5d907327c1241747f6abb794c31e5c35691b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55ab5d907327c1241747f6abb794c31e5c35691b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25a9fcf9e53bfa94e8f8b19a4abfda0f444f6b2a"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 2,
      "deletions": 19
    },
    "files": [
      {
        "sha": "dbc49eca1b88236b4abb150836bcf223a4fd574a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
        "patch": "@@ -87,13 +87,6 @@ class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n         assert(block != nullptr);\n         return block->GetBlockTime();\n     }\n-    int64_t getBlockMedianTimePast(int height) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n-        assert(block != nullptr);\n-        return block->GetMedianTimePast();\n-    }\n     bool haveBlockOnDisk(int height) override\n     {\n         LockAssertion lock(::cs_main);"
      },
      {
        "sha": "4c711a618dd75d7981516187e19b81a75e4079be",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
        "patch": "@@ -103,10 +103,6 @@ class Chain\n         //! Get block time. Height must be valid or this function will abort.\n         virtual int64_t getBlockTime(int height) = 0;\n \n-        //! Get block median time past. Height must be valid or this function\n-        //! will abort.\n-        virtual int64_t getBlockMedianTimePast(int height) = 0;\n-\n         //! Check that the block is available on disk (i.e. has not been\n         //! pruned), and contains transactions.\n         virtual bool haveBlockOnDisk(int height) = 0;"
      },
      {
        "sha": "c77559c63d0d3d460cfb70fbc43f630a5b1f6aa7",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
        "patch": "@@ -1379,20 +1379,13 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         EnsureWalletIsUnlocked(pwallet);\n \n         // Verify all timestamps are present before importing any keys.\n-        const Optional<int> tip_height = locked_chain->getHeight();\n-        now = tip_height ? locked_chain->getBlockMedianTimePast(*tip_height) : 0;\n+        CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(nLowestTimestamp).mtpTime(now)));\n         for (const UniValue& data : requests.getValues()) {\n             GetImportTimestamp(data, now);\n         }\n \n         const int64_t minimumTimestamp = 1;\n \n-        if (fRescan && tip_height) {\n-            nLowestTimestamp = locked_chain->getBlockTime(*tip_height);\n-        } else {\n-            fRescan = false;\n-        }\n-\n         for (const UniValue& data : requests.getValues()) {\n             const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n             const UniValue result = ProcessImport(pwallet, data, timestamp);"
      },
      {
        "sha": "fb5b0587de7d37b380ca64683293b1e3755e9982",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
        "patch": "@@ -152,6 +152,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         wallet->SetupLegacyScriptPubKeyMan();\n+        WITH_LOCK(wallet->cs_wallet, wallet->SetLastBlockProcessed(newTip->nHeight, newTip->GetBlockHash()));\n         AddWallet(wallet);\n         UniValue keys;\n         keys.setArray();"
      }
    ]
  },
  {
    "sha": "f7ba881bc669451a60fedac58a449794702a3e23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmN2JhODgxYmM2Njk0NTFhNjBmZWRhYzU4YTQ0OTc5NDcwMmEzZTIz",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-21T20:00:33Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in listsinceblock\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change only affects behavior in the case where wallet last block processed\nfalls behind the chain tip. Previously listsinceblock might not have returned\nall transactions up to the claimed \"lastblock\" value in this case, resulting in\nrace conditions and potentially missing transactions in cases where\nlistsinceblock was called in a loop like\nhttps://github.com/bitcoin/bitcoin/issues/14338#issuecomment-426706574",
      "tree": {
        "sha": "c7a5782b68d6f6b71fb2da9ec94530cfaaa06deb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c7a5782b68d6f6b71fb2da9ec94530cfaaa06deb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7ba881bc669451a60fedac58a449794702a3e23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7ba881bc669451a60fedac58a449794702a3e23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7ba881bc669451a60fedac58a449794702a3e23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7ba881bc669451a60fedac58a449794702a3e23/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc96a9bfc61afdb696fb92cb644ed5fc3d1793f1"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 73,
      "deletions": 6
    },
    "files": [
      {
        "sha": "8cd4ab0b6d211c2d8cc2b6537752119664855da6",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7ba881bc669451a60fedac58a449794702a3e23/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7ba881bc669451a60fedac58a449794702a3e23/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=f7ba881bc669451a60fedac58a449794702a3e23",
        "patch": "@@ -260,6 +260,16 @@ class ChainImpl : public Chain\n         WAIT_LOCK(cs_main, lock);\n         return FillBlock(LookupBlockIndex(hash), block, lock);\n     }\n+    bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        if (const CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+            if (const CBlockIndex* ancestor = block->GetAncestor(ancestor_height)) {\n+                return FillBlock(ancestor, ancestor_out, lock);\n+            }\n+        }\n+        return FillBlock(nullptr, ancestor_out, lock);\n+    }\n     bool findAncestorByHash(const uint256& block_hash, const uint256& ancestor_hash, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);\n@@ -268,6 +278,14 @@ class ChainImpl : public Chain\n         if (block && ancestor && block->GetAncestor(ancestor->nHeight) != ancestor) ancestor = nullptr;\n         return FillBlock(ancestor, ancestor_out, lock);\n     }\n+    bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n+        const CBlockIndex* block2 = LookupBlockIndex(block_hash2);\n+        const CBlockIndex* ancestor = block1 && block2 ? LastCommonAncestor(block1, block2) : nullptr;\n+        return FillBlock(ancestor, ancestor_out, lock) & FillBlock(block1, block1_out, lock) & FillBlock(block2, block2_out, lock);\n+    }\n     void findCoins(std::map<COutPoint, Coin>& coins) override { return FindCoins(m_node, coins); }\n     double guessVerificationProgress(const uint256& block_hash) override\n     {"
      },
      {
        "sha": "ee79b3e6dc6c16adccbf3e58cc4d307bb54e933b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7ba881bc669451a60fedac58a449794702a3e23/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7ba881bc669451a60fedac58a449794702a3e23/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=f7ba881bc669451a60fedac58a449794702a3e23",
        "patch": "@@ -146,12 +146,24 @@ class Chain\n     //! or contents.\n     virtual bool findBlock(const uint256& hash, const FoundBlock& block={}) = 0;\n \n+    //! Find ancestor of block at specified height and optionally return\n+    //! ancestor information.\n+    virtual bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out={}) = 0;\n+\n     //! Return whether block descends from a specified ancestor, and\n     //! optionally return ancestor information.\n     virtual bool findAncestorByHash(const uint256& block_hash,\n         const uint256& ancestor_hash,\n         const FoundBlock& ancestor_out={}) = 0;\n \n+    //! Find most recent common ancestor between two blocks and optionally\n+    //! return block information.\n+    virtual bool findCommonAncestor(const uint256& block_hash1,\n+        const uint256& block_hash2,\n+        const FoundBlock& ancestor_out={},\n+        const FoundBlock& block1_out={},\n+        const FoundBlock& block2_out={}) = 0;\n+\n     //! Look up unspent output information. Returns coins in the mempool and in\n     //! the current chain UTXO set. Iterates through all the keys in the map and\n     //! populates the values."
      },
      {
        "sha": "f95743ec40adb8e5c05152cdce5bc763ad8bb292",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7ba881bc669451a60fedac58a449794702a3e23/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7ba881bc669451a60fedac58a449794702a3e23/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=f7ba881bc669451a60fedac58a449794702a3e23",
        "patch": "@@ -2,7 +2,10 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n+#include <consensus/validation.h>\n #include <interfaces/chain.h>\n+#include <script/standard.h>\n #include <test/util/setup_common.h>\n #include <validation.h>\n \n@@ -44,6 +47,16 @@ BOOST_AUTO_TEST_CASE(findBlock)\n     BOOST_CHECK(!chain->findBlock({}, FoundBlock()));\n }\n \n+BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n+{\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto& active = ChainActive();\n+    uint256 hash;\n+    BOOST_CHECK(chain->findAncestorByHeight(active[20]->GetBlockHash(), 10, FoundBlock().hash(hash)));\n+    BOOST_CHECK_EQUAL(hash, active[10]->GetBlockHash());\n+    BOOST_CHECK(!chain->findAncestorByHeight(active[10]->GetBlockHash(), 20));\n+}\n+\n BOOST_AUTO_TEST_CASE(findAncestorByHash)\n {\n     auto chain = interfaces::MakeChain(m_node);\n@@ -54,4 +67,28 @@ BOOST_AUTO_TEST_CASE(findAncestorByHash)\n     BOOST_CHECK(!chain->findAncestorByHash(active[10]->GetBlockHash(), active[20]->GetBlockHash()));\n }\n \n+BOOST_AUTO_TEST_CASE(findCommonAncestor)\n+{\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto& active = ChainActive();\n+    auto* orig_tip = active.Tip();\n+    for (int i = 0; i < 10; ++i) {\n+        BlockValidationState state;\n+        ChainstateActive().InvalidateBlock(state, Params(), active.Tip());\n+    }\n+    BOOST_CHECK_EQUAL(active.Height(), orig_tip->nHeight - 10);\n+    coinbaseKey.MakeNewKey(true);\n+    for (int i = 0; i < 20; ++i) {\n+        CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+    }\n+    BOOST_CHECK_EQUAL(active.Height(), orig_tip->nHeight + 10);\n+    uint256 fork_hash;\n+    int fork_height;\n+    int orig_height;\n+    BOOST_CHECK(chain->findCommonAncestor(orig_tip->GetBlockHash(), active.Tip()->GetBlockHash(), FoundBlock().height(fork_height).hash(fork_hash), FoundBlock().height(orig_height)));\n+    BOOST_CHECK_EQUAL(orig_height, orig_tip->nHeight);\n+    BOOST_CHECK_EQUAL(fork_height, orig_tip->nHeight - 10);\n+    BOOST_CHECK_EQUAL(fork_hash, active[fork_height]->GetBlockHash());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "14e2066c903b35e6c2da3faaf84609c8adc2acc6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7ba881bc669451a60fedac58a449794702a3e23/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7ba881bc669451a60fedac58a449794702a3e23/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f7ba881bc669451a60fedac58a449794702a3e23",
        "patch": "@@ -1581,8 +1581,9 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     uint256 blockId;\n     if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n         blockId = ParseHashV(request.params[0], \"blockhash\");\n-        height = locked_chain->findFork(blockId, &altheight);\n-        if (!height) {\n+        height.emplace();\n+        altheight.emplace();\n+        if (!pwallet->chain().findCommonAncestor(blockId, pwallet->GetLastBlockHash(), /* ancestor out */ FoundBlock().height(*height), /* blockId out */ FoundBlock().height(*altheight))) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n@@ -1601,8 +1602,7 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n     bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n \n-    const Optional<int> tip_height = locked_chain->getHeight();\n-    int depth = tip_height && height ? (1 + *tip_height - *height) : -1;\n+    int depth = height ? pwallet->GetLastBlockHeight() + 1 - *height : -1;\n \n     UniValue transactions(UniValue::VARR);\n \n@@ -1634,8 +1634,8 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n         --*altheight;\n     }\n \n-    int last_height = tip_height ? *tip_height + 1 - target_confirms : -1;\n-    uint256 lastblock = last_height >= 0 ? locked_chain->getBlockHash(last_height) : uint256();\n+    uint256 lastblock;\n+    CHECK_NONFATAL(pwallet->chain().findAncestorByHeight(pwallet->GetLastBlockHash(), pwallet->GetLastBlockHeight() + 1 - target_confirms, FoundBlock().hash(lastblock)));\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"transactions\", transactions);"
      }
    ]
  },
  {
    "sha": "3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2I4NWFjNTk0ZjExNWRiOTlmOTZiMGEwZjRiZmRjZDY5ZWYwNTkw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-21T20:55:19Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet refactor: Avoid use of Chain::Lock in CWallet::RescanFromTime\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change has no effect on behavior.",
      "tree": {
        "sha": "b815246e12776e63a0bb1bca50cbc12728434eb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b815246e12776e63a0bb1bca50cbc12728434eb6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f7ba881bc669451a60fedac58a449794702a3e23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7ba881bc669451a60fedac58a449794702a3e23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f7ba881bc669451a60fedac58a449794702a3e23"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 27,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0d69c33be0eac8f722f340044a9a74f45651d06a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
        "patch": "@@ -260,6 +260,11 @@ class ChainImpl : public Chain\n         WAIT_LOCK(cs_main, lock);\n         return FillBlock(LookupBlockIndex(hash), block, lock);\n     }\n+    bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block) override\n+    {\n+        WAIT_LOCK(cs_main, lock);\n+        return FillBlock(ChainActive().FindEarliestAtLeast(min_time, min_height), block, lock);\n+    }\n     bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);"
      },
      {
        "sha": "16753b7cc1deebd027384cd72cfc443881ffec23",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
        "patch": "@@ -146,6 +146,12 @@ class Chain\n     //! or contents.\n     virtual bool findBlock(const uint256& hash, const FoundBlock& block={}) = 0;\n \n+    //! Find first block in the chain with timestamp >= the given time\n+    //! and height >= than the given height, return false if there is no block\n+    //! with a high enough timestamp and height. Optionally return block\n+    //! information.\n+    virtual bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block={}) = 0;\n+\n     //! Find ancestor of block at specified height and optionally return\n     //! ancestor information.\n     virtual bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out={}) = 0;"
      },
      {
        "sha": "b398b5819d442d7a3457fd81f3ed0a7764a703ad",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
        "patch": "@@ -47,6 +47,18 @@ BOOST_AUTO_TEST_CASE(findBlock)\n     BOOST_CHECK(!chain->findBlock({}, FoundBlock()));\n }\n \n+BOOST_AUTO_TEST_CASE(findFirstBlockWithTimeAndHeight)\n+{\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto& active = ChainActive();\n+    uint256 hash;\n+    int height;\n+    BOOST_CHECK(chain->findFirstBlockWithTimeAndHeight(/* min_time= */ 0, /* min_height= */ 5, FoundBlock().hash(hash).height(height)));\n+    BOOST_CHECK_EQUAL(hash, active[5]->GetBlockHash());\n+    BOOST_CHECK_EQUAL(height, 5);\n+    BOOST_CHECK(!chain->findFirstBlockWithTimeAndHeight(/* min_time= */ active.Tip()->GetBlockTimeMax() + 1, /* min_height= */ 0));\n+}\n+\n BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n {\n     auto chain = interfaces::MakeChain(m_node);"
      },
      {
        "sha": "9ffb810ee7d2e344c30ecce21f90f8bb71e0bab4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
        "patch": "@@ -1591,15 +1591,12 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n+    int start_height = 0;\n     uint256 start_block;\n-    {\n-        auto locked_chain = chain().lock();\n-        const Optional<int> start_height = locked_chain->findFirstBlockWithTimeAndHeight(startTime - TIMESTAMP_WINDOW, 0, &start_block);\n-        const Optional<int> tip_height = locked_chain->getHeight();\n-        WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, tip_height && start_height ? *tip_height - *start_height + 1 : 0);\n-    }\n+    bool start = chain().findFirstBlockWithTimeAndHeight(startTime - TIMESTAMP_WINDOW, 0, FoundBlock().hash(start_block).height(start_height));\n+    WalletLogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, start ? WITH_LOCK(cs_wallet, return GetLastBlockHeight()) - start_height + 1 : 0);\n \n-    if (!start_block.IsNull()) {\n+    if (start) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n         ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n         if (result.status == ScanResult::FAILURE) {"
      }
    ]
  },
  {
    "sha": "1be8ff280c78c30baabae9429c53c0bebb89c44d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmU4ZmYyODBjNzhjMzBiYWFiYWU5NDI5YzUzYzBiZWJiODljNDRk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-21T22:08:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in rescanblockchain\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change only affects behavior in the case where wallet last block processed\nfalls behind the chain tip. The rescanblockchain error height error checking\nwill just be stricter in this case and only accept values up to the last\nprocessed height",
      "tree": {
        "sha": "e028b55f2c2821390f9e913be5d5fb1c3516f5a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e028b55f2c2821390f9e913be5d5fb1c3516f5a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1be8ff280c78c30baabae9429c53c0bebb89c44d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1be8ff280c78c30baabae9429c53c0bebb89c44d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1be8ff280c78c30baabae9429c53c0bebb89c44d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1be8ff280c78c30baabae9429c53c0bebb89c44d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cb85ac594f115db99f96b0a0f4bfdcd69ef0590"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 78,
      "deletions": 44
    },
    "files": [
      {
        "sha": "1c578b56caab1e8fd5f26ac76c9a63185ce2f6bf",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 14,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "patch": "@@ -103,20 +103,6 @@ class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n         }\n         return nullopt;\n     }\n-    Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        if (::fPruneMode) {\n-            CBlockIndex* block = stop_height ? ::ChainActive()[*stop_height] : ::ChainActive().Tip();\n-            while (block && block->nHeight >= start_height) {\n-                if ((block->nStatus & BLOCK_HAVE_DATA) == 0) {\n-                    return block->nHeight;\n-                }\n-                block = block->pprev;\n-            }\n-        }\n-        return nullopt;\n-    }\n     Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n     {\n         LockAssertion lock(::cs_main);\n@@ -297,6 +283,25 @@ class ChainImpl : public Chain\n         LOCK(cs_main);\n         return GuessVerificationProgress(Params().TxData(), LookupBlockIndex(block_hash));\n     }\n+    bool hasBlocks(const uint256& block_hash, int min_height, Optional<int> max_height) override\n+    {\n+        // hasBlocks returns true if all ancestors of block_hash in specified\n+        // range have block data (are not pruned), false if any ancestors in\n+        // specified range are missing data.\n+        //\n+        // For simplicity and robustness, min_height and max_height are only\n+        // used to limit the range, and passing min_height that's too low or\n+        // max_height that's too high will not crash or change the result.\n+        LOCK(::cs_main);\n+        if (CBlockIndex* block = LookupBlockIndex(block_hash)) {\n+            if (max_height && block->nHeight >= *max_height) block = block->GetAncestor(*max_height);\n+            for (; block->nStatus & BLOCK_HAVE_DATA; block = block->pprev) {\n+                // Check pprev to not segfault if min_height is too low\n+                if (block->nHeight <= min_height || !block->pprev) return true;\n+            }\n+        }\n+        return false;\n+    }\n     RBFTransactionState isRBFOptIn(const CTransaction& tx) override\n     {\n         LOCK(::mempool.cs);"
      },
      {
        "sha": "8bc0ed824cea9734ce11afa3e84787ab9fb91c83",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "patch": "@@ -114,10 +114,6 @@ class Chain\n         //! (to avoid the cost of a second lookup in case this information is needed.)\n         virtual Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) = 0;\n \n-        //! Return height of last block in the specified range which is pruned, or\n-        //! nullopt if no block in the range is pruned. Range is inclusive.\n-        virtual Optional<int> findPruned(int start_height = 0, Optional<int> stop_height = nullopt) = 0;\n-\n         //! Return height of the specified block if it is on the chain, otherwise\n         //! return the height of the highest block on chain that's an ancestor\n         //! of the specified block, or nullopt if there is no common ancestor.\n@@ -179,6 +175,11 @@ class Chain\n     //! the specified block hash are verified.\n     virtual double guessVerificationProgress(const uint256& block_hash) = 0;\n \n+    //! Return true if data is available for all blocks in the specified range\n+    //! of blocks. This checks all blocks that are ancestors of block_hash in\n+    //! the height range from min_height to max_height, inclusive.\n+    virtual bool hasBlocks(const uint256& block_hash, int min_height = 0, Optional<int> max_height = {}) = 0;\n+\n     //! Check if transaction is RBF opt in.\n     virtual RBFTransactionState isRBFOptIn(const CTransaction& tx) = 0;\n "
      },
      {
        "sha": "5fba0e0429ccbcc489cce91b9c3064db478e2b90",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "patch": "@@ -103,4 +103,40 @@ BOOST_AUTO_TEST_CASE(findCommonAncestor)\n     BOOST_CHECK_EQUAL(fork_hash, active[fork_height]->GetBlockHash());\n }\n \n+BOOST_AUTO_TEST_CASE(hasBlocks)\n+{\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto& active = ChainActive();\n+\n+    // Test ranges\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 10, 90));\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 10, {}));\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 0, 90));\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 0, {}));\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), -1000, 1000));\n+    active[5]->nStatus &= ~BLOCK_HAVE_DATA;\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 10, 90));\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 10, {}));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 0, 90));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 0, {}));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), -1000, 1000));\n+    active[95]->nStatus &= ~BLOCK_HAVE_DATA;\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 10, 90));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 10, {}));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 0, 90));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 0, {}));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), -1000, 1000));\n+    active[50]->nStatus &= ~BLOCK_HAVE_DATA;\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 10, 90));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 10, {}));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 0, 90));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 0, {}));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), -1000, 1000));\n+\n+    // Test edge cases\n+    BOOST_CHECK(chain->hasBlocks(active.Tip()->GetBlockHash(), 6, 49));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 5, 49));\n+    BOOST_CHECK(!chain->hasBlocks(active.Tip()->GetBlockHash(), 6, 50));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "6bda33c6c9eeff14dbff2a56cff8df6914fae1df",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 18,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "patch": "@@ -3536,22 +3536,23 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     }\n \n     int start_height = 0;\n-    uint256 start_block, stop_block;\n+    Optional<int> stop_height;\n+    uint256 start_block;\n     {\n         auto locked_chain = pwallet->chain().lock();\n-        Optional<int> tip_height = locked_chain->getHeight();\n+        LOCK(pwallet->cs_wallet);\n+        int tip_height = pwallet->GetLastBlockHeight();\n \n         if (!request.params[0].isNull()) {\n             start_height = request.params[0].get_int();\n-            if (start_height < 0 || !tip_height || start_height > *tip_height) {\n+            if (start_height < 0 || start_height > tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n             }\n         }\n \n-        Optional<int> stop_height;\n         if (!request.params[1].isNull()) {\n             stop_height = request.params[1].get_int();\n-            if (*stop_height < 0 || !tip_height || *stop_height > *tip_height) {\n+            if (*stop_height < 0 || *stop_height > tip_height) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n             }\n             else if (*stop_height < start_height) {\n@@ -3560,25 +3561,15 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n \n         // We can't rescan beyond non-pruned blocks, stop and throw an error\n-        if (locked_chain->findPruned(start_height, stop_height)) {\n+        if (!pwallet->chain().hasBlocks(pwallet->GetLastBlockHash(), start_height, stop_height)) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n         }\n \n-        if (tip_height) {\n-            start_block = locked_chain->getBlockHash(start_height);\n-            // If called with a stop_height, set the stop_height here to\n-            // trigger a rescan to that height.\n-            // If called without a stop height, leave stop_height as null here\n-            // so rescan continues to the tip (even if the tip advances during\n-            // rescan).\n-            if (stop_height) {\n-                stop_block = locked_chain->getBlockHash(*stop_height);\n-            }\n-        }\n+        CHECK_NONFATAL(pwallet->chain().findAncestorByHeight(pwallet->GetLastBlockHash(), start_height, FoundBlock().hash(start_block)));\n     }\n \n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(start_block, stop_block, reserver, true /* fUpdate */);\n+        pwallet->ScanForWalletTransactions(start_block, stop_height, reserver, true /* fUpdate */);\n     switch (result.status) {\n     case CWallet::ScanResult::SUCCESS:\n         break;"
      },
      {
        "sha": "70d39a8fc581c9b3c5db3d83169463531b9a668d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "patch": "@@ -1615,9 +1615,8 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  *\n  * @param[in] start_block Scan starting block. If block is not on the active\n  *                        chain, the scan will return SUCCESS immediately.\n- * @param[in] stop_block  Scan ending block. If block is not on the active\n- *                        chain, the scan will continue until it reaches the\n- *                        chain tip.\n+ * @param[in] max_height  Optional max scanning height. If unset there is\n+ *                        no maximum and scanning can continue to the tip\n  *\n  * @return ScanResult returning scan information and indicating success or\n  *         failure. Return status will be set to SUCCESS if scan was\n@@ -1629,7 +1628,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, const uint256& stop_block, const WalletRescanReserver& reserver, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     int64_t start_time = GetTimeMillis();\n@@ -1654,8 +1653,10 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             tip_hash = locked_chain->getBlockHash(*tip_height);\n         }\n         block_height = locked_chain->getBlockHeight(block_hash);\n+        uint256 end_hash = tip_hash;\n+        if (max_height) chain().findAncestorByHeight(tip_hash, *max_height, FoundBlock().hash(end_hash));\n         progress_begin = chain().guessVerificationProgress(block_hash);\n-        progress_end = chain().guessVerificationProgress(stop_block.IsNull() ? tip_hash : stop_block);\n+        progress_end = chain().guessVerificationProgress(end_hash);\n     }\n     double progress_current = progress_begin;\n     while (block_height && !fAbortRescan && !chain().shutdownRequested()) {\n@@ -1693,7 +1694,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             result.last_failed_block = block_hash;\n             result.status = ScanResult::FAILURE;\n         }\n-        if (block_hash == stop_block) {\n+        if (max_height && *block_height >= *max_height) {\n             break;\n         }\n         {\n@@ -1712,7 +1713,7 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n             // handle updated tip hash\n             const uint256 prev_tip_hash = tip_hash;\n             tip_hash = locked_chain->getBlockHash(*tip_height);\n-            if (stop_block.IsNull() && prev_tip_hash != tip_hash) {\n+            if (!max_height && prev_tip_hash != tip_hash) {\n                 // in case the tip has changed, update progress max\n                 progress_end = chain().guessVerificationProgress(tip_hash);\n             }"
      },
      {
        "sha": "f105ccd178c0a65a5fc4cc725f40de577b641448",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1be8ff280c78c30baabae9429c53c0bebb89c44d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "patch": "@@ -894,7 +894,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         //! USER_ABORT.\n         uint256 last_failed_block;\n     };\n-    ScanResult ScanForWalletTransactions(const uint256& first_block, const uint256& last_block, const WalletRescanReserver& reserver, bool fUpdate);\n+    ScanResult ScanForWalletTransactions(const uint256& first_block, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n     void transactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();"
      }
    ]
  },
  {
    "sha": "c0d07dc4cba7634cde4e8bf586557772f3248a42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGQwN2RjNGNiYTc2MzRjZGU0ZThiZjU4NjU1Nzc3MmYzMjQ4YTQy",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-22T21:53:42Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in CWallet::ScanForWalletTransactions\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change affects behavior in a few small ways.\n\n- If there's no max_height specified, percentage progress is measured ending at\n  wallet last processed block instead of node tip\n\n- More consistent error reporting: Early check to see if start_block is on the\n  active chain is removed, so start_block is always read and the triggers an\n  error if it's unavailable",
      "tree": {
        "sha": "e8a1326bb11fa6578cdd90d6cb23306190245307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8a1326bb11fa6578cdd90d6cb23306190245307"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0d07dc4cba7634cde4e8bf586557772f3248a42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0d07dc4cba7634cde4e8bf586557772f3248a42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0d07dc4cba7634cde4e8bf586557772f3248a42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0d07dc4cba7634cde4e8bf586557772f3248a42/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1be8ff280c78c30baabae9429c53c0bebb89c44d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1be8ff280c78c30baabae9429c53c0bebb89c44d"
      }
    ],
    "stats": {
      "total": 107,
      "additions": 65,
      "deletions": 42
    },
    "files": [
      {
        "sha": "2b2d3a4b86297905212293f38a13144cd8fee5a5",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -251,6 +251,13 @@ class ChainImpl : public Chain\n         WAIT_LOCK(cs_main, lock);\n         return FillBlock(ChainActive().FindEarliestAtLeast(min_time, min_height), block, lock);\n     }\n+    bool findNextBlock(const uint256& block_hash, int block_height, const FoundBlock& next, bool* reorg) override {\n+        WAIT_LOCK(cs_main, lock);\n+        CBlockIndex* block = ChainActive()[block_height];\n+        if (block && block->GetBlockHash() != block_hash) block = nullptr;\n+        if (reorg) *reorg = !block;\n+        return FillBlock(block ? ChainActive()[block_height + 1] : nullptr, next, lock);\n+    }\n     bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out) override\n     {\n         WAIT_LOCK(cs_main, lock);"
      },
      {
        "sha": "ef5a002f54e46cfc311ad8f3a90be868386fba75",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -148,6 +148,11 @@ class Chain\n     //! information.\n     virtual bool findFirstBlockWithTimeAndHeight(int64_t min_time, int min_height, const FoundBlock& block={}) = 0;\n \n+    //! Find next block if block is part of current chain. Also flag if\n+    //! there was a reorg and the specified block hash is no longer in the\n+    //! current chain, and optionally return block information.\n+    virtual bool findNextBlock(const uint256& block_hash, int block_height, const FoundBlock& next={}, bool* reorg=nullptr) = 0;\n+\n     //! Find ancestor of block at specified height and optionally return\n     //! ancestor information.\n     virtual bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out={}) = 0;"
      },
      {
        "sha": "c329d5d10565a0f4431b6216b34278f70ace6f22",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -153,7 +153,7 @@ void TestGUI(interfaces::Node& node)\n     {\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, {} /* stop_block */, reserver, true /* fUpdate */);\n+        CWallet::ScanResult result = wallet->ScanForWalletTransactions(Params().GetConsensus().hashGenesisBlock, 0 /* block height */, {} /* max height */, reserver, true /* fUpdate */);\n         QCOMPARE(result.status, CWallet::ScanResult::SUCCESS);\n         QCOMPARE(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n         QVERIFY(result.last_failed_block.IsNull());"
      },
      {
        "sha": "fab3571756c8405e244e1f2037c6323f02764f2e",
        "filename": "src/test/interfaces_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/test/interfaces_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/test/interfaces_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interfaces_tests.cpp?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -59,6 +59,21 @@ BOOST_AUTO_TEST_CASE(findFirstBlockWithTimeAndHeight)\n     BOOST_CHECK(!chain->findFirstBlockWithTimeAndHeight(/* min_time= */ active.Tip()->GetBlockTimeMax() + 1, /* min_height= */ 0));\n }\n \n+BOOST_AUTO_TEST_CASE(findNextBlock)\n+{\n+    auto chain = interfaces::MakeChain(m_node);\n+    auto& active = ChainActive();\n+    bool reorg;\n+    uint256 hash;\n+    BOOST_CHECK(chain->findNextBlock(active[20]->GetBlockHash(), 20, FoundBlock().hash(hash), &reorg));\n+    BOOST_CHECK_EQUAL(hash, active[21]->GetBlockHash());\n+    BOOST_CHECK_EQUAL(reorg, false);\n+    BOOST_CHECK(!chain->findNextBlock(uint256(), 20, {}, &reorg));\n+    BOOST_CHECK_EQUAL(reorg, true);\n+    BOOST_CHECK(!chain->findNextBlock(active.Tip()->GetBlockHash(), active.Height(), {}, &reorg));\n+    BOOST_CHECK_EQUAL(reorg, false);\n+}\n+\n BOOST_AUTO_TEST_CASE(findAncestorByHeight)\n {\n     auto chain = interfaces::MakeChain(m_node);"
      },
      {
        "sha": "3b7a5d273669ba48755c2510d2c8574b349dec84",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -3569,7 +3569,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     }\n \n     CWallet::ScanResult result =\n-        pwallet->ScanForWalletTransactions(start_block, stop_height, reserver, true /* fUpdate */);\n+        pwallet->ScanForWalletTransactions(start_block, start_height, stop_height, reserver, true /* fUpdate */);\n     switch (result.status) {\n     case CWallet::ScanResult::SUCCESS:\n         break;"
      },
      {
        "sha": "160a672df31178033e6c850e081a5719dca49c1c",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -46,7 +46,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     auto locked_chain = chain->lock();\n     LockAssertion lock(::cs_main);\n \n-    // Verify ScanForWalletTransactions accommodates a null start block.\n+    // Verify ScanForWalletTransactions fails to read an unknown start block.\n     {\n         CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n         {\n@@ -56,8 +56,8 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions({} /* start_block */, {} /* stop_block */, reserver, false /* update */);\n-        BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n+        CWallet::ScanResult result = wallet.ScanForWalletTransactions({} /* start_block */, 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n+        BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n         BOOST_CHECK(result.last_failed_block.IsNull());\n         BOOST_CHECK(result.last_scanned_block.IsNull());\n         BOOST_CHECK(!result.last_scanned_height);\n@@ -75,7 +75,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), {} /* stop_block */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n         BOOST_CHECK(result.last_failed_block.IsNull());\n         BOOST_CHECK_EQUAL(result.last_scanned_block, newTip->GetBlockHash());\n@@ -98,7 +98,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), {} /* stop_block */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n         BOOST_CHECK_EQUAL(result.last_failed_block, oldTip->GetBlockHash());\n         BOOST_CHECK_EQUAL(result.last_scanned_block, newTip->GetBlockHash());\n@@ -120,7 +120,7 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n         AddKey(wallet, coinbaseKey);\n         WalletRescanReserver reserver(&wallet);\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), {} /* stop_block */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet.ScanForWalletTransactions(oldTip->GetBlockHash(), oldTip->nHeight, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::FAILURE);\n         BOOST_CHECK_EQUAL(result.last_failed_block, newTip->GetBlockHash());\n         BOOST_CHECK(result.last_scanned_block.IsNull());\n@@ -465,7 +465,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         AddKey(*wallet, coinbaseKey);\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n-        CWallet::ScanResult result = wallet->ScanForWalletTransactions(::ChainActive().Genesis()->GetBlockHash(), {} /* stop_block */, reserver, false /* update */);\n+        CWallet::ScanResult result = wallet->ScanForWalletTransactions(::ChainActive().Genesis()->GetBlockHash(), 0 /* start_height */, {} /* max_height */, reserver, false /* update */);\n         BOOST_CHECK_EQUAL(result.status, CWallet::ScanResult::SUCCESS);\n         BOOST_CHECK_EQUAL(result.last_scanned_block, ::ChainActive().Tip()->GetBlockHash());\n         BOOST_CHECK_EQUAL(*result.last_scanned_height, ::ChainActive().Height());"
      },
      {
        "sha": "6d968e7ad72728ee203be170dc02076d897d6524",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 32,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -1598,7 +1598,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n \n     if (start) {\n         // TODO: this should take into account failure by ScanResult::USER_ABORT\n-        ScanResult result = ScanForWalletTransactions(start_block, {} /* stop_block */, reserver, update);\n+        ScanResult result = ScanForWalletTransactions(start_block, start_height, {} /* max_height */, reserver, update);\n         if (result.status == ScanResult::FAILURE) {\n             int64_t time_max;\n             CHECK_NONFATAL(chain().findBlock(result.last_failed_block, FoundBlock().maxTime(time_max)));\n@@ -1615,6 +1615,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  *\n  * @param[in] start_block Scan starting block. If block is not on the active\n  *                        chain, the scan will return SUCCESS immediately.\n+ * @param[in] start_height Height of start_block\n  * @param[in] max_height  Optional max scanning height. If unset there is\n  *                        no maximum and scanning can continue to the tip\n  *\n@@ -1628,7 +1629,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n+CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     int64_t start_time = GetTimeMillis();\n@@ -1642,38 +1643,32 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n \n     fAbortRescan = false;\n     ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-    uint256 tip_hash;\n-    // The way the 'block_height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n-    Optional<int> block_height = MakeOptional(false, int());\n-    double progress_begin;\n-    double progress_end;\n-    {\n-        auto locked_chain = chain().lock();\n-        if (Optional<int> tip_height = locked_chain->getHeight()) {\n-            tip_hash = locked_chain->getBlockHash(*tip_height);\n-        }\n-        block_height = locked_chain->getBlockHeight(block_hash);\n-        uint256 end_hash = tip_hash;\n-        if (max_height) chain().findAncestorByHeight(tip_hash, *max_height, FoundBlock().hash(end_hash));\n-        progress_begin = chain().guessVerificationProgress(block_hash);\n-        progress_end = chain().guessVerificationProgress(end_hash);\n-    }\n+    uint256 tip_hash = WITH_LOCK(cs_wallet, return GetLastBlockHash());\n+    uint256 end_hash = tip_hash;\n+    if (max_height) chain().findAncestorByHeight(tip_hash, *max_height, FoundBlock().hash(end_hash));\n+    double progress_begin = chain().guessVerificationProgress(block_hash);\n+    double progress_end = chain().guessVerificationProgress(end_hash);\n     double progress_current = progress_begin;\n-    while (block_height && !fAbortRescan && !chain().shutdownRequested()) {\n+    int block_height = start_height;\n+    while (!fAbortRescan && !chain().shutdownRequested()) {\n         m_scanning_progress = (progress_current - progress_begin) / (progress_end - progress_begin);\n-        if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n+        if (block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n             ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), std::max(1, std::min(99, (int)(m_scanning_progress * 100))));\n         }\n         if (GetTime() >= nNow + 60) {\n             nNow = GetTime();\n-            WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", *block_height, progress_current);\n+            WalletLogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", block_height, progress_current);\n         }\n \n         CBlock block;\n+        bool next_block;\n+        uint256 next_block_hash;\n+        bool reorg = false;\n         if (chain().findBlock(block_hash, FoundBlock().data(block)) && !block.IsNull()) {\n             auto locked_chain = chain().lock();\n             LOCK(cs_wallet);\n-            if (!locked_chain->getBlockHeight(block_hash)) {\n+            next_block = chain().findNextBlock(block_hash, block_height, FoundBlock().hash(next_block_hash), &reorg);\n+            if (reorg) {\n                 // Abort scan if current block is no longer active, to prevent\n                 // marking transactions as coming from the wrong block.\n                 // TODO: This should return success instead of failure, see\n@@ -1683,36 +1678,37 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n                 break;\n             }\n             for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n-                CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, *block_height, block_hash, posInBlock);\n+                CWalletTx::Confirmation confirm(CWalletTx::Status::CONFIRMED, block_height, block_hash, posInBlock);\n                 SyncTransaction(block.vtx[posInBlock], confirm, fUpdate);\n             }\n             // scan succeeded, record block as most recent successfully scanned\n             result.last_scanned_block = block_hash;\n-            result.last_scanned_height = *block_height;\n+            result.last_scanned_height = block_height;\n         } else {\n             // could not scan block, keep scanning but record this block as the most recent failure\n             result.last_failed_block = block_hash;\n             result.status = ScanResult::FAILURE;\n+            next_block = chain().findNextBlock(block_hash, block_height, FoundBlock().hash(next_block_hash), &reorg);\n         }\n-        if (max_height && *block_height >= *max_height) {\n+        if (max_height && block_height >= *max_height) {\n             break;\n         }\n         {\n             auto locked_chain = chain().lock();\n-            Optional<int> tip_height = locked_chain->getHeight();\n-            if (!tip_height || *tip_height <= block_height || !locked_chain->getBlockHeight(block_hash)) {\n+            if (!next_block || reorg) {\n                 // break successfully when rescan has reached the tip, or\n                 // previous block is no longer on the chain due to a reorg\n                 break;\n             }\n \n             // increment block and verification progress\n-            block_hash = locked_chain->getBlockHash(++*block_height);\n+            block_hash = next_block_hash;\n+            ++block_height;\n             progress_current = chain().guessVerificationProgress(block_hash);\n \n             // handle updated tip hash\n             const uint256 prev_tip_hash = tip_hash;\n-            tip_hash = locked_chain->getBlockHash(*tip_height);\n+            tip_hash = WITH_LOCK(cs_wallet, return GetLastBlockHash());\n             if (!max_height && prev_tip_hash != tip_hash) {\n                 // in case the tip has changed, update progress max\n                 progress_end = chain().guessVerificationProgress(tip_hash);\n@@ -1721,10 +1717,10 @@ CWallet::ScanResult CWallet::ScanForWalletTransactions(const uint256& start_bloc\n     }\n     ShowProgress(strprintf(\"%s \" + _(\"Rescanning...\").translated, GetDisplayName()), 100); // hide progress dialog in GUI\n     if (block_height && fAbortRescan) {\n-        WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", *block_height, progress_current);\n+        WalletLogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", block_height, progress_current);\n         result.status = ScanResult::USER_ABORT;\n     } else if (block_height && chain().shutdownRequested()) {\n-        WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", *block_height, progress_current);\n+        WalletLogPrintf(\"Rescan interrupted by shutdown request at block %d. Progress=%f\\n\", block_height, progress_current);\n         result.status = ScanResult::USER_ABORT;\n     } else {\n         WalletLogPrintf(\"Rescan completed in %15dms\\n\", GetTimeMillis() - start_time);\n@@ -4049,7 +4045,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         {\n             WalletRescanReserver reserver(walletInstance.get());\n-            if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), {} /* stop block */, reserver, true /* update */).status)) {\n+            if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(locked_chain->getBlockHash(rescan_height), rescan_height, {} /* max height */, reserver, true /* update */).status)) {\n                 error = _(\"Failed to rescan the wallet during initialization\").translated;\n                 return nullptr;\n             }"
      },
      {
        "sha": "28ec3d631dc9f54c23007450fee6e0058c6d2170",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0d07dc4cba7634cde4e8bf586557772f3248a42/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "patch": "@@ -894,7 +894,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n         //! USER_ABORT.\n         uint256 last_failed_block;\n     };\n-    ScanResult ScanForWalletTransactions(const uint256& first_block, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n+    ScanResult ScanForWalletTransactions(const uint256& start_block, int start_height, Optional<int> max_height, const WalletRescanReserver& reserver, bool fUpdate);\n     void transactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void ResendWalletTransactions();"
      }
    ]
  },
  {
    "sha": "e958ff9ab5607da2cd321f29fc785a6d359e44f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTU4ZmY5YWI1NjA3ZGEyY2QzMjFmMjlmYzc4NWE2ZDM1OWU0NGY0",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-22T22:11:02Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in CWallet::CreateTransaction\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change only affects behavior in the case where wallet last block processed\nfalls behind the chain tip, where it may set a different lock time.",
      "tree": {
        "sha": "7bb98e33c586cd70b83b0617d6d1dd59d137f70b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bb98e33c586cd70b83b0617d6d1dd59d137f70b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e958ff9ab5607da2cd321f29fc785a6d359e44f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e958ff9ab5607da2cd321f29fc785a6d359e44f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e958ff9ab5607da2cd321f29fc785a6d359e44f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e958ff9ab5607da2cd321f29fc785a6d359e44f4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0d07dc4cba7634cde4e8bf586557772f3248a42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0d07dc4cba7634cde4e8bf586557772f3248a42"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 8,
      "deletions": 10
    },
    "files": [
      {
        "sha": "37c61991a165eb9e7e69a0462eb68d0aced3c616",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e958ff9ab5607da2cd321f29fc785a6d359e44f4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e958ff9ab5607da2cd321f29fc785a6d359e44f4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e958ff9ab5607da2cd321f29fc785a6d359e44f4",
        "patch": "@@ -2620,13 +2620,15 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     return true;\n }\n \n-static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)\n+static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, const uint256& block_hash)\n {\n     if (chain.isInitialBlockDownload()) {\n         return false;\n     }\n     constexpr int64_t MAX_ANTI_FEE_SNIPING_TIP_AGE = 8 * 60 * 60; // in seconds\n-    if (locked_chain.getBlockTime(*locked_chain.getHeight()) < (GetTime() - MAX_ANTI_FEE_SNIPING_TIP_AGE)) {\n+    int64_t block_time;\n+    CHECK_NONFATAL(chain.findBlock(block_hash, FoundBlock().time(block_time)));\n+    if (block_time < (GetTime() - MAX_ANTI_FEE_SNIPING_TIP_AGE)) {\n         return false;\n     }\n     return true;\n@@ -2636,9 +2638,8 @@ static bool IsCurrentForAntiFeeSniping(interfaces::Chain& chain, interfaces::Cha\n  * Return a height-based locktime for new transactions (uses the height of the\n  * current chain tip unless we are not synced with the current chain\n  */\n-static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, interfaces::Chain::Lock& locked_chain)\n+static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, const uint256& block_hash, int block_height)\n {\n-    uint32_t const height = locked_chain.getHeight().get_value_or(-1);\n     uint32_t locktime;\n     // Discourage fee sniping.\n     //\n@@ -2660,8 +2661,8 @@ static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, interface\n     // enough, that fee sniping isn't a problem yet, but by implementing a fix\n     // now we ensure code won't be written that makes assumptions about\n     // nLockTime that preclude a fix later.\n-    if (IsCurrentForAntiFeeSniping(chain, locked_chain)) {\n-        locktime = height;\n+    if (IsCurrentForAntiFeeSniping(chain, block_hash)) {\n+        locktime = block_height;\n \n         // Secondly occasionally randomly pick a nLockTime even further back, so\n         // that transactions that are delayed after signing for whatever reason,\n@@ -2675,7 +2676,6 @@ static uint32_t GetLocktimeForNewTransaction(interfaces::Chain& chain, interface\n         // unique \"nLockTime fingerprint\", set nLockTime to a constant.\n         locktime = 0;\n     }\n-    assert(locktime <= height);\n     assert(locktime < LOCKTIME_THRESHOLD);\n     return locktime;\n }\n@@ -2735,16 +2735,14 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n     }\n \n     CMutableTransaction txNew;\n-\n-    txNew.nLockTime = GetLocktimeForNewTransaction(chain(), locked_chain);\n-\n     FeeCalculation feeCalc;\n     CAmount nFeeNeeded;\n     int nBytes;\n     {\n         std::set<CInputCoin> setCoins;\n         auto locked_chain = chain().lock();\n         LOCK(cs_wallet);\n+        txNew.nLockTime = GetLocktimeForNewTransaction(chain(), GetLastBlockHash(), GetLastBlockHeight());\n         {\n             std::vector<COutput> vAvailableCoins;\n             AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0);"
      }
    ]
  },
  {
    "sha": "48973402d8bccb673eaeb68b7aa86faa39d3cb8a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODk3MzQwMmQ4YmNjYjY3M2VhZWI2OGI3YWE4NmZhYTM5ZDNjYjhh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-01-22T22:15:17Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-03-31T13:36:02Z"
      },
      "message": "wallet: Avoid use of Chain::Lock in CWallet::GetKeyBirthTimes\n\nThis is a step toward removing the Chain::Lock class and reducing cs_main\nlocking.\n\nThis change only affects behavior in the case where wallet last block processed\nfalls behind the chain tip, where it will treat the last block processed as the\ncurrent tip.",
      "tree": {
        "sha": "307622d91c87c8b1cd79d8e66ac5522d638420d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/307622d91c87c8b1cd79d8e66ac5522d638420d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48973402d8bccb673eaeb68b7aa86faa39d3cb8a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48973402d8bccb673eaeb68b7aa86faa39d3cb8a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48973402d8bccb673eaeb68b7aa86faa39d3cb8a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48973402d8bccb673eaeb68b7aa86faa39d3cb8a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e958ff9ab5607da2cd321f29fc785a6d359e44f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e958ff9ab5607da2cd321f29fc785a6d359e44f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e958ff9ab5607da2cd321f29fc785a6d359e44f4"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 15,
      "deletions": 20
    },
    "files": [
      {
        "sha": "c8311b2986c6fbac4cba713b1fb7fd1cb0ee921a",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48973402d8bccb673eaeb68b7aa86faa39d3cb8a/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48973402d8bccb673eaeb68b7aa86faa39d3cb8a/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=48973402d8bccb673eaeb68b7aa86faa39d3cb8a",
        "patch": "@@ -80,13 +80,6 @@ class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n         assert(block != nullptr);\n         return block->GetBlockHash();\n     }\n-    int64_t getBlockTime(int height) override\n-    {\n-        LockAssertion lock(::cs_main);\n-        CBlockIndex* block = ::ChainActive()[height];\n-        assert(block != nullptr);\n-        return block->GetBlockTime();\n-    }\n     bool haveBlockOnDisk(int height) override\n     {\n         LockAssertion lock(::cs_main);"
      },
      {
        "sha": "a2d381b5c64f7ea6e7b47e01a9b14d2da32d4273",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48973402d8bccb673eaeb68b7aa86faa39d3cb8a/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48973402d8bccb673eaeb68b7aa86faa39d3cb8a/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=48973402d8bccb673eaeb68b7aa86faa39d3cb8a",
        "patch": "@@ -100,9 +100,6 @@ class Chain\n         //! Get block hash. Height must be valid or this function will abort.\n         virtual uint256 getBlockHash(int height) = 0;\n \n-        //! Get block time. Height must be valid or this function will abort.\n-        virtual int64_t getBlockTime(int height) = 0;\n-\n         //! Check that the block is available on disk (i.e. has not been\n         //! pruned), and contains transactions.\n         virtual bool haveBlockOnDisk(int height) = 0;"
      },
      {
        "sha": "da8e7ee38dd082b92f890c492d0bd9933f137617",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48973402d8bccb673eaeb68b7aa86faa39d3cb8a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48973402d8bccb673eaeb68b7aa86faa39d3cb8a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=48973402d8bccb673eaeb68b7aa86faa39d3cb8a",
        "patch": "@@ -3554,12 +3554,13 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     }\n \n     // map in which we'll infer heights of other keys\n-    const Optional<int> tip_height = locked_chain.getHeight();\n-    const int max_height = tip_height && *tip_height > 144 ? *tip_height - 144 : 0; // the tip can be reorganized; use a 144-block safety margin\n-    std::map<CKeyID, int> mapKeyFirstBlock;\n+    std::map<CKeyID, const CWalletTx::Confirmation*> mapKeyFirstBlock;\n+    CWalletTx::Confirmation max_confirm;\n+    max_confirm.block_height = GetLastBlockHeight() > 144 ? GetLastBlockHeight() - 144 : 0; // the tip can be reorganized; use a 144-block safety margin\n+    CHECK_NONFATAL(chain().findAncestorByHeight(GetLastBlockHash(), max_confirm.block_height, FoundBlock().hash(max_confirm.hashBlock)));\n     for (const CKeyID &keyid : spk_man->GetKeys()) {\n         if (mapKeyBirth.count(keyid) == 0)\n-            mapKeyFirstBlock[keyid] = max_height;\n+            mapKeyFirstBlock[keyid] = &max_confirm;\n     }\n \n     // if there are no such keys, we're done\n@@ -3570,23 +3571,27 @@ void CWallet::GetKeyBirthTimes(interfaces::Chain::Lock& locked_chain, std::map<C\n     for (const auto& entry : mapWallet) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = entry.second;\n-        if (Optional<int> height = locked_chain.getBlockHeight(wtx.m_confirm.hashBlock)) {\n+        if (wtx.m_confirm.status == CWalletTx::CONFIRMED) {\n             // ... which are already in a block\n             for (const CTxOut &txout : wtx.tx->vout) {\n                 // iterate over all their outputs\n                 for (const auto &keyid : GetAffectedKeys(txout.scriptPubKey, *spk_man)) {\n                     // ... and all their affected keys\n-                    std::map<CKeyID, int>::iterator rit = mapKeyFirstBlock.find(keyid);\n-                    if (rit != mapKeyFirstBlock.end() && *height < rit->second)\n-                        rit->second = *height;\n+                    auto rit = mapKeyFirstBlock.find(keyid);\n+                    if (rit != mapKeyFirstBlock.end() && wtx.m_confirm.block_height < rit->second->block_height) {\n+                        rit->second = &wtx.m_confirm;\n+                    }\n                 }\n             }\n         }\n     }\n \n     // Extract block timestamps for those keys\n-    for (const auto& entry : mapKeyFirstBlock)\n-        mapKeyBirth[entry.first] = locked_chain.getBlockTime(entry.second) - TIMESTAMP_WINDOW; // block times can be 2h off\n+    for (const auto& entry : mapKeyFirstBlock) {\n+        int64_t block_time;\n+        CHECK_NONFATAL(chain().findBlock(entry.second->hashBlock, FoundBlock().time(block_time)));\n+        mapKeyBirth[entry.first] = block_time - TIMESTAMP_WINDOW; // block times can be 2h off\n+    }\n }\n \n /**"
      }
    ]
  }
]