jnewbery,2020-01-17 22:54:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-575826218,575826218,
DrahtBot,2020-01-18 00:58:07,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18601 (wallet: Refactor WalletRescanReserver to use wallet reference by promag)\n* #18600 ([wallet] Track conflicted tran",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-575848948,575848948,
ryanofsky,2020-01-22 22:32:55,"Added 3 commits aeba8afaf5d12fd7b2552616f817712d4fc5062e -> 60e6595f5cfd266c14c48994b0bb4afb5bf7fcb3 ([`pr/unlock.2`](https://github.com/ryanofsky/bitcoin/commits/pr/unlock.2) -> [`pr/unlock.3`](https://github.com/ryanofsky/bitcoin/commits/pr/unlock.3), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/unlock.2...pr/unlock.3)) and removed PR draft status. \n\nI think this is basically do",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-577417495,577417495,
ariard,2020-01-30 02:06:16,"Thanks Russ, will review new changes soon.\n\n> I think it's probably a good idea. It would use some more memory though, and it's unclear if it the change would simplify this PR or not overlap much. I think it's probably something to try out separately.\n\nI've a branch doing it, I can try to rebase it on top of this one and squeeze a last one before #16426. ",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-580050909,580050909,
ryanofsky,2020-02-19 16:04:56,Review club notes at https://bitcoincore.reviews/17954.html. Meeting in 2 hours if I'm time zoning correctly,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-588296819,588296819,
fjahr,2020-03-11 14:42:43,"ACK 4c7ae7319e5796e4aa7011d26b2dfd6bca4ebe45\n\nReviewed code, built and ran tests locally. It took me a moment to get used to the `FoundBlock` abstraction but I agree that it's an improvement.",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-597674785,597674785,
hebasto,2020-03-11 16:35:57,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-597737957,597737957,
hebasto,2020-03-20 19:20:31,@ryanofsky It seem CI fails due to the conflict between 80468a97cba27faa9297b86eb901221701d8b13b and #18234.,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-601871454,601871454,
ariard,2020-03-22 03:03:47,"Code Review ACK 40a8796, changes since last ACK is removing a useless lock tacking in qt test.\n\n(stale Travis?)",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-602140701,602140701,
ariard,2020-03-25 03:39:56,"Code Review ACK 19e1db7\n\nChanges since last time are better documentation, `hasBlock` fix for the lower bound, `findNextBlock` internal simplification.\n\nI agree with @hebasto, `block->pprev` is quite confusing, would be happy to reack a `hasBlock` documentation change to lay out this.",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-603622770,603622770,
ryanofsky,2020-03-25 13:01:44,"Thanks for review!\n\nUpdated 19e1db77cbc08f451a3508bb113f2f7cf5a13616 -> cdea18ae2dad4a198df65d0043e10c45a22994e3 ([`pr/unlock.14`](https://github.com/ryanofsky/bitcoin/commits/pr/unlock.14) -> [`pr/unlock.15`](https://github.com/ryanofsky/bitcoin/commits/pr/unlock.15), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/unlock.14..pr/unlock.15)) adding suggested comment\n\nre: https://",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-603825588,603825588,
ariard,2020-03-25 18:05:42,"Code Review ACK cdea18a\n\nWhat confusing here isn't the null check but the decision to return true in this case, because you may have a void block is the given ranged and still return true.",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-603997498,603997498,
hebasto,2020-03-28 14:04:43,re-ACK cdea18ae2dad4a198df65d0043e10c45a22994e3,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-605451635,605451635,
promag,2020-03-30 00:11:12,Core review ACK cdea18ae2dad4a198df65d0043e10c45a22994e3.,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-605724033,605724033,
ryanofsky,2020-03-31 15:35:39,"Rebased cdea18ae2dad4a198df65d0043e10c45a22994e3 -> 710b077f9c0d57a40073ceb9e5568ce37d8cdfe2 ([`pr/unlock.15`](https://github.com/ryanofsky/bitcoin/commits/pr/unlock.15) -> [`pr/unlock.16`](https://github.com/ryanofsky/bitcoin/commits/pr/unlock.16), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/unlock.15-rebase..pr/unlock.16)) due to conflict with #18160\n",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-606702994,606702994,
hebasto,2020-04-02 13:41:23,"Reviewed recent [rebase](https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-606702994):\n\nin `interfaces/wallet.cpp` #18160 moved `if (!force && num_blocks == cached_num_blocks) return false;` up, but in f6da44ccce4cfff53433e665305a6fe0a01364e4 it moved back. Could this break behavior introduced by #18160?\n",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-607854093,607854093,
ryanofsky,2020-04-02 13:55:51,"> Reviewed recent [rebase](https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-606702994):\n> \n> in `interfaces/wallet.cpp` #18160 moved `if (!force && num_blocks == cached_num_blocks) return false;` up, but in [f6da44c](https://github.com/bitcoin/bitcoin/commit/f6da44ccce4cfff53433e665305a6fe0a01364e4) it moved back. Could this break behavior introduced by #18160?\n\nNo, the point of ",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-607862102,607862102,
hebasto,2020-04-02 14:01:46,re-ACK 710b077f9c0d57a40073ceb9e5568ce37d8cdfe2,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-607865406,607865406,
ariard,2020-04-03 01:36:15,Code Review ACK 710b077,https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-608180917,608180917,
ryanofsky,2020-04-10 20:33:05,"Current review status:\n\n- [ariard ack](https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-608180917)\n- [hebasto ack](https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-607865406)\n- [promag pre-rebase ack](https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-605724033)\n- [fjahr pre-rebase ack](https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-597674785) \n-",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-612204843,612204843,
MarcoFalke,2020-04-10 20:53:10,"> Current review status:\n\nAcks don't help if the changes introduce a bug :red_circle: :dagger: \n\n\nACK 710b077f9c, except the introduced bug ðŸ¤º\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 710b077f9c, except the introduced bugs ðŸ¤º\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoU",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-612211962,612211962,
MarcoFalke,2020-04-10 20:55:48,"Going to merge, so that the ACKs don't go down the drain",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-612213041,612213041,
MarcoFalke,2020-04-10 20:57:27,"actually there are only two acks for the current state of the pr, so I won't merge for now",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-612213643,612213643,
MarcoFalke,2020-04-13 14:01:48,"re-ACK 48973402d8, only change is fixing bug ðŸ“€\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK 48973402d8, only change is fixing bug ðŸ“€\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUg7CAwAgLetCNTTZ3j5/d54CEHvjQSQCdU0xAxJZfq2LvcRgphElGFiWj",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-612911124,612911124,
fjahr,2020-04-13 15:59:31,"re-ACK 48973402d8bccb673eaeb68b7aa86faa39d3cb8a, reviewed rebase and changes since last review, built and ran tests locally",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-612961727,612961727,
ariard,2020-04-14 07:42:55,"Coce Review ACK 4897340, only changes are one suggested by last review on more accurate variable naming, human-readable output, args comments in `findCommonAncestor`",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-613279605,613279605,
practicalswift,2020-04-15 13:54:32,"@ryanofsky \n\nPost-merge review comment:\n\n```c++\n    bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n    {\n        WAIT_LOCK(cs_main, lock);\n        const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n        const CBlockIndex* block2 = Lookup",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614054884,614054884,
ryanofsky,2020-04-15 14:04:50,"> @ryanofsky\n> \n> Post-merge review comment:\n> \n> ```c++\n>     bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n>     {\n>         WAIT_LOCK(cs_main, lock);\n>         const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n>         const CBlockInd",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614060576,614060576,
practicalswift,2020-04-15 14:16:56,"@ryanofsky \n\nYes, I was thinking something along the lines of:\n\n```c++\n    bool findCommonAncestor(const uint256& block_hash1, const uint256& block_hash2, const FoundBlock& ancestor_out, const FoundBlock& block1_out, const FoundBlock& block2_out) override\n    {\n        WAIT_LOCK(cs_main, lock);\n        const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n        const CBloc",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614067097,614067097,
ryanofsky,2020-04-15 14:19:24,"Feel free to submit a PR. I'd also encourage writing documentation on how to run these static analysers with bitcoin, or maybe run them automatically on travis",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614068392,614068392,
MarcoFalke,2020-04-15 14:28:16,"Oh, I didn't see this during review. I read the method as nothing is filled when the ancestor is not found. I.e. I read the `&` as `&&`. Is there any caller that depends on this edge case?\n\nAbsent any data, I'd slightly prefer the `&&` version.",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614073173,614073173,
ryanofsky,2020-04-15 14:34:56,"Pretty sure nothing requires information about other blocks to be filled when a block isn't found in this case. It just seemed nicer for the API to return information than not return it, and trivial to implement with no additional code, so I implemented it.",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614076994,614076994,
practicalswift,2020-04-15 14:41:42,"Which one is preferred of these three? :)\n\nContender 1.\n\n```diff\ndiff --git a/src/interfaces/chain.cpp b/src/interfaces/chain.cpp\nindex c8311b298..cd825f870 100644\n--- a/src/interfaces/chain.cpp\n+++ b/src/interfaces/chain.cpp\n@@ -275,7 +275,7 @@ public:\n         const CBlockIndex* block1 = LookupBlockIndex(block_hash1);\n         const CBlockIndex* block2 = LookupBlockIndex(bl",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614081056,614081056,
MarcoFalke,2020-04-15 14:42:41,"My vote:\n\n1) 51%\n2) 49%\n3) 0%",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614081567,614081567,
ryanofsky,2020-04-15 14:43:05,"I prefer the current code but again please open a separate PR, I don't think it matters very much",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-614081789,614081789,
MarcoFalke,2020-04-19 13:13:36,"In commit f6da44ccce : \n\nThe following comment no longer applies and should be fixed up:\n\n```cpp\n            // Get required locks upfront. This avoids the GUI from getting\n            // stuck if the core is holding the locks for a longer time - for\n            // example, during a wallet rescan.\n            //\n```",https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-616131540,616131540,
MarcoFalke,2020-04-19 13:14:04,(somehow GitHub didn't submit my review comment in time ^),https://github.com/bitcoin/bitcoin/pull/17954#issuecomment-616131656,616131656,
ariard,2020-01-21 19:52:45,"cfc9373\n\nIt just occurs to me than this assert and the one in GetLastBlockHeight (than I introduced in 5aacc3e) are unsafe if we don't have a Chain interface from which to query block height at wallet creation (CreateWalletFromFile) but that's something to keep in mind if in the future you can run the wallet without a chain.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369209911,369209911,src/wallet/wallet.h
ariard,2020-01-21 20:06:18,"cfc9373\n\nAs noted in commit, we may have asynchronicity between node and wallet w.r.t block processing. So returned block time may not be the one of last block height. To avoid this we may cache block time to fetch it when needed with `GetLastBlockTime`. It would also remove some `getBlockTime` (but not all last time I looked on).",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369216493,369216493,src/interfaces/wallet.cpp
ariard,2020-01-21 20:33:36,"e399fb4\n\nPreviously, `getBlockHeight` would have return nullopt if `merkleBlock` have been out of chain. With this change, a height can be returned and ancestry asserted while node and walle tip being unsynchronized, so `merkleBlock` have been reorged out. IMO that's fine if rpc caller is aware than processing have been done with best-wallet-knowledge. ",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369228377,369228377,src/wallet/rpcdump.cpp
ariard,2020-01-21 20:36:17,"673e0b6\n\nAnother candidate for `GetLastBlockTime`",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369229559,369229559,src/wallet/rpcdump.cpp
ariard,2020-01-21 20:46:33,"673e0b6\n\nI'm not sure about the commit message, IMO it's less accurate but on the whole make the rescan protection better by starting farther in the past. Anyway, being based on wallet tip or node tip should be safe given the range of TIMESTAMP_WINDOW",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369234155,369234155,src/wallet/rpcdump.cpp
ariard,2020-01-21 20:55:30,"1f4b604\n\nIf #17443 gets first + `GetLastBlockTime`, you may avoid to call `findBlock` here.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369238043,369238043,src/wallet/rpcdump.cpp
ryanofsky,2020-01-21 21:51:22,"> [cfc9373](https://github.com/bitcoin/bitcoin/commit/cfc9373305eed32cd27eb436b555b06bc470dcbf)\n> \n> As noted in commit, we may have asynchronicity between node and wallet w.r.t block processing. So returned block time may not be the one of last block height. To avoid this we may cache block time to fetch it when needed with `GetLastBlockTime`. It would also remove some `getBlockTime` (but not",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369262300,369262300,src/interfaces/wallet.cpp
ryanofsky,2020-01-21 21:51:28,"> [cfc9373](https://github.com/bitcoin/bitcoin/commit/cfc9373305eed32cd27eb436b555b06bc470dcbf)\n> \n> It just occurs to me than this assert and the one in GetLastBlockHeight (than I introduced in [5aacc3e](https://github.com/bitcoin/bitcoin/commit/5aacc3eff15b9b5bdc951f1e274f00d581f63bce)) are unsafe if we don't have a Chain interface from which to query block height at wallet creation (CreateW",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369262347,369262347,src/wallet/wallet.h
ryanofsky,2020-01-21 21:52:05,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369228377\n\n> [e399fb4](https://github.com/bitcoin/bitcoin/commit/e399fb49e81416267bb708075ab0a377cacf969d)\n> \n> Previously, `getBlockHeight` would have return nullopt if `merkleBlock` have been out of chain. With this change, a height can be returned and ancestry asserted while node and walle tip being unsynchronized, so `merkle",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369262624,369262624,src/wallet/rpcdump.cpp
ryanofsky,2020-01-21 22:30:03,"> [673e0b6](https://github.com/bitcoin/bitcoin/commit/673e0b6e7c9f671096f4056f9db69ec43d5b4a3b)\n> \n> I'm not sure about the commit message, IMO it's less accurate but on the whole make the rescan protection better by starting farther in the past. Anyway, being based on wallet tip or node tip should be safe given the range of TIMESTAMP_WINDOW\n\nHmm, I'm not sure when it would be less accurat",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369278492,369278492,src/wallet/rpcdump.cpp
ariard,2020-01-30 01:57:52,"Even further than cs_wallet, we are still holding cs_main there through the chain lock. When we're going to remove locked_chain we may have asynchronicity due to to height being based on BlockConnected locked by cs_wallet and findBlock locked by cs_main ?",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r372726164,372726164,src/interfaces/wallet.cpp
ariard,2020-01-30 02:02:22,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369234155\n\nI think I meaned because we rely now on wallet last block hash instead of main tip and we may be late from one block, so in my opinion we are _less_ accurate from one block but we agree on rescan being safer. Nit interpretation, doesn't matter.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r372727093,372727093,src/wallet/rpcdump.cpp
ryanofsky,2020-01-31 20:58:03,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369216493\n\n(Relevant commit is cfc9373305eed32cd27eb436b555b06bc470dcbf)\n\n> Even further than cs_wallet, we are still holding cs_main there through the chain lock. When we're going to remove locked_chain we may have asynchronicity due to to height being based on BlockConnected locked by cs_wallet and findBlock locked by cs_main ",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r373682174,373682174,src/interfaces/wallet.cpp
ryanofsky,2020-01-31 21:32:45,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r369234155\n\n> I think I meaned because we rely now on wallet last block hash instead of main tip and we may be late from one block, so in my opinion we are _less_ accurate from one block but we agree on rescan being safer. Nit interpretation, doesn't matter.\n\nI think in the case you are talking about the block height/hash/time va",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r373695152,373695152,src/wallet/rpcdump.cpp
jnewbery,2020-02-11 20:29:58,I don't think `num_blocks` is even used. There's only one place that this interface function is called and it doesn't use the result. Can you just remove it?,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377880523,377880523,src/interfaces/wallet.cpp
jnewbery,2020-02-11 20:53:53,Agree that caching the last block time would make some of these commits easier.,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377892009,377892009,src/wallet/rpcdump.cpp
jnewbery,2020-02-11 22:56:35,'specified blocks' is a bit vague. Can you be more precise about what `block_hash` `min_height` and `max_height` mean?,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377949561,377949561,src/interfaces/chain.h
jnewbery,2020-02-11 23:03:36,"`GetLastBlockHeight()` can't return a `tip_height` that's < 0, so I think you can just remove `|| tip_height < 0 `",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377952195,377952195,src/wallet/rpcwallet.cpp
jnewbery,2020-02-11 23:05:16,"Do you need to hold the wallet lock for this entire block? Does it make sense to call:\n\n```\nWITH_LOCK(pwallet->cs_wallet, pwallet->GetLastBlockHeight());\n```",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377952847,377952847,src/wallet/rpcwallet.cpp
jnewbery,2020-02-11 23:06:43,"Again, I think this is always true, so you can remove this conditional.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377953378,377953378,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-12 21:08:31,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377949561\n\n> 'specified blocks' is a bit vague. Can you be more precise about what `block_hash` `min_height` and `max_height` mean?\n\nAdded description, also made min_height not `Optional` since nullopt was equivalent to 0",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r378513140,378513140,src/interfaces/chain.h
ryanofsky,2020-02-12 21:08:39,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377880523\n\n> I don't think `num_blocks` is even used. There's only one place that this interface function is called and it doesn't use the result. Can you just remove it?\n\nGood catch, and thanks for bringing it up, it is fixed in #18123",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r378513213,378513213,src/interfaces/wallet.cpp
ryanofsky,2020-02-12 21:08:55,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377952847\n\n> Do you need to hold the wallet lock for this entire block? Does it make sense to call:\n> \n> ```\n> WITH_LOCK(pwallet->cs_wallet, pwallet->GetLastBlockHeight());\n> ```\n\nThe lock is also needed for the GetLastBlockHash call in the `findAncestorByHeight` line below. This could do something cleverer to reduce loc",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r378513330,378513330,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-12 21:09:39,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377952195\n\n> `GetLastBlockHeight()` can't return a `tip_height` that's < 0, so I think you can just remove `|| tip_height < 0 `\n\nThanks updated",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r378513684,378513684,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-12 21:10:09,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r377953378\n\n> Again, I think this is always true, so you can remove this conditional.\n\nThanks, removed",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r378513892,378513892,src/wallet/rpcwallet.cpp
ariard,2020-02-13 18:32:30,"e276b68\n\n""If both blocks are on the same chain ancestor_height is the height of the oldest between them. Also return height of first block which may be the same than ancestor height.""\n\nBut honestly would prefer parameterize `findFork` instead of yet-another-single use method like passing wallet tip hash to findFork (and if null, then use default chain tip).\n\nBy the way, is `findFork` s",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379042572,379042572,src/interfaces/chain.h
ariard,2020-02-13 19:24:13,"e276b68\n\nIf I understand issue linked in the commit message, let's say you call listsinceblock(genesis_hash, 100) with current_tip == 1100 (shouldn't matter referring to `chain_tip` or `wallet_tip`).\nTarget_confirm = 1100 + 1 - 100 = 1001.\nLastblock = blockhash(1001)\n\nNow while calling again listsinceblock(lastblock_hash, 100) with current_tip = 1100\ndepth = 1100 + 1 - 1001 = 100\nS",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379069325,379069325,src/wallet/rpcwallet.cpp
ariard,2020-02-13 19:26:13,"e276b68\n\nHeight of genesis block is 0 ? If so depth is -1 which I think isn't the behavior expected (already there before ?)",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379070527,379070527,src/wallet/rpcwallet.cpp
ariard,2020-02-13 19:35:51,"e276b68\n\nWhy not modify `getBlockHash` a bit to do a `LookupBlockIndex` instead of querying `ChainActive()` ? Every block in ChainActive needs a BlockIndex so second should be a superset and it shouldn't be an issue.\n\nIf caller care about block being in the active chain, it should call `findFork` just after.\n\n(Long-term, IMO wallet shouldn't have to deal with fork and just have a _line",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379075632,379075632,src/interfaces/chain.h
ariard,2020-02-13 21:17:37,"6067b74\n\nI think you can move the existing `findFirstBlockWithTimeAndHeight` method of `Chain::Lock` and just avoid adding a new one, it still returns both block height & hash ",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379123410,379123410,src/interfaces/chain.h
ariard,2020-02-13 21:40:19,"6067b74\n\nJust to be sure but is `FindEarliestAtLeast` working as intended ? By passing `min_height=0` std::lower_bound is returning an iterator to the first element for which the comparison object return false, thus with the current comparison being `pBlock->GetBlockTimeMax() < blockparams.first || pBlock->nHeight < blockparams.second` it would return just after the genesis block  ?",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379133763,379133763,src/interfaces/chain.cpp
ariard,2020-02-13 22:15:44,"9aa4b6b\n\nI find `findAncestorByHeight` unclear, here we may have `start_height` and `GetLastBlockHash` not pointing to same block. Behavior follows method documentation but why bother asking for the hash, query in ChainActive with the provided height ?\n\nHonestly here I would prefer to stick with `getBlockHash`, behavior is more straightforward.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379150008,379150008,src/wallet/rpcwallet.cpp
ariard,2020-02-13 22:19:53,"9aa4b6b\n\nSame here, why `ScanForWalletTransactions` function to then add a call to get previously furnished information ? I would prefer to keep removed `getBlockHash` calls in `rescanblockchain`",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379151718,379151718,src/wallet/wallet.cpp
ryanofsky,2020-02-13 23:15:42,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379133763\n\n> [6067b74](https://github.com/bitcoin/bitcoin/commit/6067b74431169d54e2c3fd9141021f8caaf04461)\n> \n> Just to be sure but is `FindEarliestAtLeast` working as intended ? By passing `min_height=0` std::lower_bound is returning an iterator to the first element for which the comparison object return false, thus with the cu",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379172203,379172203,src/interfaces/chain.cpp
ryanofsky,2020-02-13 23:15:56,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379123410\n\n> [6067b74](https://github.com/bitcoin/bitcoin/commit/6067b74431169d54e2c3fd9141021f8caaf04461)\n> \n> I think you can move the existing `findFirstBlockWithTimeAndHeight` method of `Chain::Lock` and just avoid adding a new one, it still returns both block height & hash\n\nI'm removing the other `findFirstBlockWithTime",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379172305,379172305,src/interfaces/chain.h
ryanofsky,2020-02-13 23:16:07,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379075632\n\n> [e276b68](https://github.com/bitcoin/bitcoin/commit/e276b6821430ec2c18aba55137daf98bae770054)\n> \n> Why not modify `getBlockHash` a bit to do a `LookupBlockIndex` instead of querying `ChainActive()` ? Every block in ChainActive needs a BlockIndex so second should be a superset and it shouldn't be an issue.\n> \n> I",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379172361,379172361,src/interfaces/chain.h
ryanofsky,2020-02-13 23:16:15,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379042572\n\n> [e276b68](https://github.com/bitcoin/bitcoin/commit/e276b6821430ec2c18aba55137daf98bae770054)\n> \n> ""If both blocks are on the same chain ancestor_height is the height of the oldest between them. Also return height of first block which may be the same than ancestor height.""\n> \n> But honestly would prefer paramete",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379172401,379172401,src/interfaces/chain.h
ryanofsky,2020-02-13 23:16:37,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379070527\n\n> [e276b68](https://github.com/bitcoin/bitcoin/commit/e276b6821430ec2c18aba55137daf98bae770054)\n> \n> Height of genesis block is 0 ? If so depth is -1 which I think isn't the behavior expected (already there before ?)\n\n`height` is an `Optional<int>` so `height ?` is just checking if the optional value is set. If `h",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379172535,379172535,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-13 23:16:46,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379069325\n\n> [e276b68](https://github.com/bitcoin/bitcoin/commit/e276b6821430ec2c18aba55137daf98bae770054)\n> \n> If I understand issue linked in the commit message, let's say you call listsinceblock(genesis_hash, 100) with current_tip == 1100 (shouldn't matter referring to `chain_tip` or `wallet_tip`).\n> Target_confirm = 1100 +",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379172583,379172583,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-13 23:16:56,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379150008\n\n> [9aa4b6b](https://github.com/bitcoin/bitcoin/commit/9aa4b6bb6fb5f44a943cd50cb46e0d80275060ce)\n> \n> I find `findAncestorByHeight` unclear, here we may have `start_height` and `GetLastBlockHash` not pointing to same block. Behavior follows method documentation but why bother asking for the hash, query in ChainActive w",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379172637,379172637,src/wallet/rpcwallet.cpp
ryanofsky,2020-02-13 23:19:44,"> [9aa4b6b](https://github.com/bitcoin/bitcoin/commit/9aa4b6bb6fb5f44a943cd50cb46e0d80275060ce)\n> \n> Same here, why `ScanForWalletTransactions` function to then add a call to get previously furnished information ? I would prefer to keep removed `getBlockHash` calls in `rescanblockchain`\n\nI don't think that would be an improvement, or know what advantages you see there. \n\nThe problem wi",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379173550,379173550,src/wallet/wallet.cpp
ryanofsky,2020-02-14 13:21:20,"Here's a change that would make all the find block methods return block information same way 6f74c0a042b001283e1d7dd8a8ad8b46c75328e5 ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/getblock)), if it helps\n\nEDIT: Newer version 25c1ae48204215622bc9fd3a8bc9677f15c32674",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379426137,379426137,src/interfaces/chain.h
ariard,2020-02-14 23:20:42,"Oh right, it's an Optional, forget about it, forgive my C++ noobiness",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379686531,379686531,src/wallet/rpcwallet.cpp
ariard,2020-02-14 23:28:51,Hmmm if I understand `RescanFromTime` expected behavior is to find earliest block with _both_ nTime and height superior at the ones passed not _either_ so sounds like I broke it ?,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379688216,379688216,src/interfaces/chain.cpp
ryanofsky,2020-02-14 23:51:57,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379688216\n\n#15670 seems right to me, at least at first glance. `a || b` can only be false if both a and b are false",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379693744,379693744,src/interfaces/chain.cpp
luke-jr,2020-02-19 18:48:23,I think it's confusing to return something unrelated to the common ancestor here...,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r381473300,381473300,src/interfaces/chain.h
ryanofsky,2020-02-19 19:53:25,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r381473300\n\n> I think it's confusing to return something unrelated to the common ancestor here...\n\nAgreed, will backport 25c1ae48204215622bc9fd3a8bc9677f15c32674 ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/getblock)) as soon as I get a chance",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r381508561,381508561,src/interfaces/chain.h
fjahr,2020-02-21 10:15:09,nit: Maybe using `std::numeric_limits<int>::max()` would have been a tiny bit nicer because it would have allowed passing in a default initialized `height`.,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382500790,382500790,src/interfaces/chain.h
fjahr,2020-02-21 14:32:29,I think this means height will not be set within `findAncestorByHash()` and stay 0. Since it seems to not be needed it can probably be removed. Then passing an explicit 0 into the `Confirmation` constructor makes it more explicit that this value is not used/needed.,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382612052,382612052,src/wallet/rpcdump.cpp
fjahr,2020-02-21 15:01:51,"nit: The other functions around here follow a different style, returning a `bool`. I would have preferred to keep this consistent.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382628960,382628960,src/interfaces/chain.cpp
fjahr,2020-02-21 15:46:29,"nit: Style-wise I find the use of `Optional` here a bit weird because there are other, more common ways to make an argument optional.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382654842,382654842,src/interfaces/chain.cpp
ryanofsky,2020-02-24 18:13:52,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382628960\n\n> nit: The other functions around here follow a different style, returning a `bool`. I would have preferred to keep this consistent.\n\nYes, this is better. It returns a bool now.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r383429442,383429442,src/interfaces/chain.cpp
ryanofsky,2020-02-24 18:14:01,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382654842\n\n> nit: Style-wise I find the use of `Optional` here a bit weird because there are other, more common ways to make an argument optional.\n\nProbably most common way we denote optional heights is to use `-1` as a magic unset height value. But I think using `Optional` and `nullopt` is nicer here because it is more explicit",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r383429505,383429505,src/interfaces/chain.cpp
ryanofsky,2020-02-24 18:14:09,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382500790\n\n> nit: Maybe using `std::numeric_limits<int>::max()` would have been a tiny bit nicer because it would have allowed passing in a default initialized `height`.\n\nShould be resolved. Height was just a pointer because it was an output parameter. But now the `FoundBlock` class is used to return information instead of a hei",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r383429575,383429575,src/interfaces/chain.h
ryanofsky,2020-02-24 18:14:19,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r382612052\n\n> I think this means height will not be set within `findAncestorByHash()` and stay 0. Since it seems to not be needed it can probably be removed. Then passing an explicit 0 into the `Confirmation` constructor makes it more explicit that this value is not used/needed.\n\n`height` is passed as output argument to `findAnce",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r383429632,383429632,src/wallet/rpcdump.cpp
ariard,2020-02-28 18:26:43,"3e64b9e\n\nI really like this new helper class, just what do you think here of enforching check with a boolean flag to `FillBlock` and upper level method instead of a attribute setup by FoundBlock constructor caller. E.g in `WalletTxToJSON`, `findBlock` is called and `FoundBlock` constructed with a check requirement, which then calls `LookupBlockIndex` and `FillBlock`, and only in this last func",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385852029,385852029,src/interfaces/chain.h
ariard,2020-02-28 18:48:17,"153f749\n\nAlso why not adding a `FoundBlock& ancestor(uint256& hash) { .. }` and let `FillBlock` check if ancestor exists ?\n(once you understand `FoundBlock` helper class, that's easier to reason on than adding one-use method IMO)",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385861975,385861975,src/interfaces/chain.h
ariard,2020-02-28 19:18:45,"9da0e41\n\nSame here, I think you can make `findAncestorByHeight` and `findCommonAncestor` as `FoundBlock` methods (at least I've tried for `findAncestorByHeight ` it works well)",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385876138,385876138,src/interfaces/chain.h
ariard,2020-02-28 19:59:18,"9701379\n\nWas a bit confused at first, would comment code, here ""If a `max_height` is provided, do a rescan from start_block to it. Otherwise use wallet tip hash as an ending point""",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385895403,385895403,src/wallet/wallet.cpp
ariard,2020-02-28 20:20:33,"bfa71f8\n\nYou may keep the assert against `block_height` parameter?",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385904359,385904359,src/wallet/wallet.cpp
ariard,2020-02-28 20:34:41,"bfa71f8\n\nWe take another wallet lock just few lines behind, I think you can move the call to `GetLocktimeForNewTransaction` there, shouldn't change anything.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385909767,385909767,src/wallet/wallet.cpp
ariard,2020-02-28 20:59:07,"Re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r379693744\n\nAfter reading again semantics of std::lower_bound _comp_ I think you're right, while block timestamp is inferior at `min_time`, iterator is going to keep moving forward, whatever `min_height` in this case.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385919298,385919298,src/interfaces/chain.cpp
ryanofsky,2020-03-02 15:29:31,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385852029\n\n> [3e64b9e](https://github.com/bitcoin/bitcoin/commit/3e64b9e0d5ac289b525c083f5519d1cf0e5173ed)\n> \n> what do you think here of enforching check with a boolean flag to `FillBlock` and upper level method instead of a attribute setup by FoundBlock constructor caller.\n\nI didn't really think about it, but looking again",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r386462262,386462262,src/interfaces/chain.h
ryanofsky,2020-03-02 15:29:38,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385876138\n\n> [9da0e41](https://github.com/bitcoin/bitcoin/commit/9da0e4121bf51b5cee6742fce7cec20dbbb9beb1)\n> \n> Same here, I think you can make `findAncestorByHeight` and `findCommonAncestor` as `FoundBlock` methods (at least I've tried for `findAncestorByHeight ` it works well)\n\nIt's not clear when you would want a function",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r386462351,386462351,src/interfaces/chain.h
ryanofsky,2020-03-02 15:29:43,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385861975\n\n> [153f749](https://github.com/bitcoin/bitcoin/commit/153f74900e5241c6f31381902ee7f6cc5bf42e3a)\n> \n> Also why not adding a `FoundBlock& ancestor(uint256& hash) { .. }` and let `FillBlock` check if ancestor exists ?\n> (once you understand `FoundBlock` helper class, that's easier to reason on than adding one-use metho",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r386462392,386462392,src/interfaces/chain.h
ryanofsky,2020-03-02 15:33:17,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385895403\n\n> [9701379](https://github.com/bitcoin/bitcoin/commit/9701379d37c6307d8fcdcfbf57d1fe76e6cff060)\n> \n> Was a bit confused at first, would comment code, here ""If a `max_height` is provided, do a rescan from start_block to it. Otherwise use wallet tip hash as an ending point""\n\nThanks, added a similar comment",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r386464748,386464748,src/wallet/wallet.cpp
ryanofsky,2020-03-02 15:33:32,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385904359\n\n> [bfa71f8](https://github.com/bitcoin/bitcoin/commit/bfa71f856172dc941c844d4b60f15974e8579d61)\n> \n> You may keep the assert against `block_height` parameter?\n\nIf you think it helps, I can add this back, but I did remove it intentionally. It seemed pointless to assert locktime is less than the height just after se",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r386464899,386464899,src/wallet/wallet.cpp
ryanofsky,2020-03-02 15:33:50,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r385909767\n\n> [bfa71f8](https://github.com/bitcoin/bitcoin/commit/bfa71f856172dc941c844d4b60f15974e8579d61)\n> \n> We take another wallet lock just few lines behind, I think you can move the call to `GetLocktimeForNewTransaction` there, shouldn't change anything.\n\nThanks, moved under the existing wallet lock\n\n",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r386465101,386465101,src/wallet/wallet.cpp
ariard,2020-03-05 18:43:26,"Okay I get your point with struct-with-accessor-methods vs real-class-with-methods-that-execute-code wrt with IPC/memory separation. My assumption here was we should clean up completely these methods by storing more inside the wallet (like any block header tied to a transaction which matters for us), but that something we should discuss in future PRs/issues. I'm fine with Chain API right now, let'",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r388487722,388487722,src/interfaces/chain.h
hebasto,2020-03-20 15:01:37,"g++ compiler `-Wmaybe-uninitialized` warning:\n```\nwallet/rpcwallet.cpp: In function â€˜UniValue rescanblockchain(const JSONRPCRequest&)â€™:\nwallet/rpcwallet.cpp:3550:19: warning: â€˜*((void*)& stop_height +4)â€™ may be used uninitialized in this function [-Wmaybe-uninitialized]\n     Optional<int> stop_height;\n                   ^~~~~~~~~~~\n```\n\nCould be\n```suggestion\n#include <optional",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395695797,395695797,src/wallet/rpcwallet.cpp
hebasto,2020-03-20 16:05:07,Why `auto locked_chain = wallet->chain().lock();` is still needed?,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395737849,395737849,src/qt/test/wallettests.cpp
ryanofsky,2020-03-20 18:08:55,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395737849\n\n> Why `auto locked_chain = wallet->chain().lock();` is still needed?\n\nGood catch, simplified this code",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395809541,395809541,src/qt/test/wallettests.cpp
ryanofsky,2020-03-20 18:10:26,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395695797\n\n> g++ compiler `-Wmaybe-uninitialized` warning:\n\nThis is a known false positive with no side effects from an old compiler. https://www.boost.org/doc/libs/1_72_0/libs/optional/doc/html/boost_optional/tutorial/gotchas/false_positive_with__wmaybe_uninitialized.html\n\nI don't think making code less readable to silence ",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395810294,395810294,src/wallet/rpcwallet.cpp
hebasto,2020-03-20 20:08:06,"> I don't think making code less readable to silence these is a good tradeoff.\n\nLet me add some context: https://github.com/bitcoin/bitcoin/pull/14711#pullrequestreview-193702611, #15292, #18052\n\n> But if silencing them is actually important, we should at least have an automated check, like a linter or an old gcc running on travis and failing so there doesn't have to be a manual reporting,",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395866090,395866090,src/wallet/rpcwallet.cpp
hebasto,2020-03-20 20:33:51,"nit:\n```suggestion\n            const CBlockIndex* ancestor = block->GetAncestor(ancestor_height);\n            return FillBlock(ancestor, ancestor_out, lock);\n```",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395876846,395876846,src/interfaces/chain.cpp
ryanofsky,2020-03-20 20:45:57,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395866090\n\n> Do you mean adding of the `-Werror=maybe-uninitialized` option to a compiler on Travis?\n\nI don't want to make code less readable and I don't want to spend time on an going basis in every PR that uses `Optional` to have a back and forth discussion and extra review cycles just because an old compiler prints a harmless",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395881801,395881801,src/wallet/rpcwallet.cpp
hebasto,2020-03-20 21:13:45,Why the second check `!block->pprev` is needed?,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395892467,395892467,src/interfaces/chain.cpp
hebasto,2020-03-20 21:26:40,"nit: parameter names in the function declaration differ from ones in the function definition:\n- `FoundBlock& next` vs `FoundBlock& block_out`\n- `bool* reorg` vs `bool* reorg_out`",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395897426,395897426,src/interfaces/chain.h
hebasto,2020-03-20 21:43:21,Is this comment still relevant? And the mention of `stop_block` in `@pre` comment?,https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395903022,395903022,src/wallet/wallet.cpp
hebasto,2020-03-20 22:04:06,"`tip_hash` and `tip_height` could be `const`:\n```suggestion\n    CMutableTransaction txNew;\n    FeeCalculation feeCalc;\n    CAmount nFeeNeeded;\n    int nBytes;\n    {\n        std::set<CInputCoin> setCoins;\n        auto locked_chain = chain().lock();\n        LOCK(cs_wallet);\n        const uint256 tip_hash = GetLastBlockHash();\n        const int tip_height = GetLastBlockHeight();",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395909697,395909697,src/wallet/wallet.cpp
ryanofsky,2020-03-23 15:58:34,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395876846\n\n> nit:\n\nI don't see any advantage in this, it is just making the function less consistent internally. It would help to state what perceived advantages are with suggestions like this.",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r396561567,396561567,src/interfaces/chain.cpp
ryanofsky,2020-03-23 15:59:19,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395892467\n\n> Why the second check `!block->pprev` is needed?\n\nSemantics of what hasBlocks should return when blocks don't exist is arbitrary, but I wrote it to consistently return false if any blocks that exist in the specified range are missing data, and true otherwise. There are test cases to ensure this works consistently for",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r396562125,396562125,src/interfaces/chain.cpp
ryanofsky,2020-03-23 15:59:52,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395903022\n\n> Is this comment still relevant? And the mention of `stop_block` in `@pre` comment?\n\nThanks, removed",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r396562560,396562560,src/wallet/wallet.cpp
ryanofsky,2020-03-23 16:00:09,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395897426\n\n> nit: parameter names in the function declaration differ from ones in the function definition:\n> \n> * `FoundBlock& next` vs `FoundBlock& block_out`\n> * `bool* reorg` vs `bool* reorg_out`\n\nThanks, switched to names from declaration",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r396562743,396562743,src/interfaces/chain.h
ryanofsky,2020-03-23 16:00:48,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r395909697\n\n> `tip_hash` and `tip_height` could be `const`:\n\nThanks, removed these variables that were left over from an earlier version of this commit",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r396563292,396563292,src/wallet/wallet.cpp
MarcoFalke,2020-04-10 18:34:43,"in commit e0b02c8cb3\n\n```suggestion\n        const FoundBlock& ancestor_out={}) = 0;\n```",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406887223,406887223,src/interfaces/chain.h
MarcoFalke,2020-04-10 18:46:34,"in commit d83fd92520\n\nThis is no longer human readable. Idk why the tests don't fail we used to have at least one parser in the python functional test suite :shrug: ",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406891999,406891999,src/wallet/rpcdump.cpp
MarcoFalke,2020-04-10 18:56:54,"08211e640f\n\n```suggestion\n    virtual bool findAncestorByHeight(const uint256& block_hash, int ancestor_height, const FoundBlock& ancestor_out={}) = 0;\n```",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406896059,406896059,src/interfaces/chain.h
MarcoFalke,2020-04-10 18:57:25,"08211e640f\n\n```suggestion\n        const FoundBlock& block2_out={}) = 0;\n```\n\nSame for other args",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406896254,406896254,src/interfaces/chain.h
MarcoFalke,2020-04-10 19:22:27,"```suggestion\n        if (!pwallet->chain().findCommonAncestor(blockId, pwallet->GetLastBlockHash(), /* ancestor_out */ FoundBlock().height(*height), /* blockId out */ FoundBlock().height(*altheight))) {\n```",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406905419,406905419,src/wallet/rpcwallet.cpp
ryanofsky,2020-04-10 21:43:50,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406891999\n\n> in commit [d83fd92](https://github.com/bitcoin/bitcoin/commit/d83fd9252050b0c44a3d18f23b99bac41aec3865)\n> \n> This is no longer human readable. Idk why the tests don't fail we used to have at least one parser in the python functional test suite\n\nThanks, confirmed fix with your test from #18597!",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406956593,406956593,src/wallet/rpcdump.cpp
ryanofsky,2020-04-10 21:50:27,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406887223\n\n> in commit [e0b02c8](https://github.com/bitcoin/bitcoin/commit/e0b02c8cb3e6f3bb079c4bed278003fd69b6d5b3)\n\nUpdated",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406958520,406958520,src/interfaces/chain.h
ryanofsky,2020-04-10 21:50:35,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406896254\n\n> [08211e6](https://github.com/bitcoin/bitcoin/commit/08211e640f4432af4a3d67c804ef4a9d0a94edb4)\n> \n> Same for other args\n\nUpdated",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406958570,406958570,src/interfaces/chain.h
ryanofsky,2020-04-10 21:50:55,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406905419\n\n> \n\nUpdated",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406958676,406958676,src/wallet/rpcwallet.cpp
ryanofsky,2020-04-13 03:16:25,"re: https://github.com/bitcoin/bitcoin/pull/17954#discussion_r406896059\n\n> [08211e6](https://github.com/bitcoin/bitcoin/commit/08211e640f4432af4a3d67c804ef4a9d0a94edb4)\n\nUpdated",https://github.com/bitcoin/bitcoin/pull/17954#discussion_r407297987,407297987,src/interfaces/chain.h
