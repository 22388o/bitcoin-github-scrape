[
  {
    "sha": "c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmM5N2UwZjRlM2Q5ZDhkNWI4YTFlNjAxNzRlOWZmMTFlNzBiNmMx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-24T14:02:39Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-31T16:51:12Z"
      },
      "message": "[Qt] Rework of payment request UI (mainly for insecure pr)\n\n- this shows insecure (unsecured) payment requests in a new yellowish\n  colored UI (based on the secure payment request UI) instead of our\n  normal payment UI\n- allows us to receive paymentACK messages for insecure payment requests\n- allows us to handle expirations for insecure payment request\n- changed walletmodel, so that all types of payment requests don't touch\n  the addressbook",
      "tree": {
        "sha": "54c77e769e2c7e6a5d4a0e7a027dce9c3747a2c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54c77e769e2c7e6a5d4a0e7a027dce9c3747a2c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ede3ee3348ecaeed04dec587171e732ebc0830fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ede3ee3348ecaeed04dec587171e732ebc0830fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ede3ee3348ecaeed04dec587171e732ebc0830fd"
      }
    ],
    "stats": {
      "total": 691,
      "additions": 609,
      "deletions": 82
    },
    "files": [
      {
        "sha": "7547931ff1596afc6ecf76e096f3853e26a251a3",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "patch": "@@ -29,7 +29,16 @@\n        </rect>\n       </property>\n       <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\" stretch=\"0,1\">\n-       <property name=\"margin\">\n+       <property name=\"leftMargin\">\n+        <number>0</number>\n+       </property>\n+       <property name=\"topMargin\">\n+        <number>0</number>\n+       </property>\n+       <property name=\"rightMargin\">\n+        <number>0</number>\n+       </property>\n+       <property name=\"bottomMargin\">\n         <number>0</number>\n        </property>\n        <item>"
      },
      {
        "sha": "199a14598af8d23e459dce701f0231a0cdea004a",
        "filename": "src/qt/forms/sendcoinsentry.ui",
        "status": "modified",
        "additions": 501,
        "deletions": 13,
        "changes": 514,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/forms/sendcoinsentry.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/forms/sendcoinsentry.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsentry.ui?ref=c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "patch": "@@ -10,13 +10,19 @@\n     <height>150</height>\n    </rect>\n   </property>\n+  <property name=\"focusPolicy\">\n+   <enum>Qt::TabFocus</enum>\n+  </property>\n   <property name=\"autoFillBackground\">\n    <bool>false</bool>\n   </property>\n   <property name=\"currentIndex\">\n    <number>0</number>\n   </property>\n-  <widget class=\"QFrame\" name=\"SendCoinsInsecure\">\n+  <widget class=\"QFrame\" name=\"SendCoins\">\n+   <property name=\"toolTip\">\n+    <string>This is a normal payment.</string>\n+   </property>\n    <property name=\"frameShape\">\n     <enum>QFrame::StyledPanel</enum>\n    </property>\n@@ -143,7 +149,495 @@\n     </item>\n    </layout>\n   </widget>\n-  <widget class=\"QFrame\" name=\"SendCoinsSecure\">\n+  <widget class=\"QFrame\" name=\"SendCoins_InsecurePaymentRequest\">\n+   <property name=\"palette\">\n+    <palette>\n+     <active>\n+      <colorrole role=\"WindowText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Button\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Light\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Midlight\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>191</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Dark\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>127</red>\n+         <green>127</green>\n+         <blue>63</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Mid\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>170</red>\n+         <green>170</green>\n+         <blue>84</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Text\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"BrightText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ButtonText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Base\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Window\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Shadow\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"AlternateBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>191</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>220</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+     </active>\n+     <inactive>\n+      <colorrole role=\"WindowText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Button\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Light\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Midlight\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>191</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Dark\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>127</red>\n+         <green>127</green>\n+         <blue>63</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Mid\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>170</red>\n+         <green>170</green>\n+         <blue>84</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Text\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"BrightText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ButtonText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Base\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Window\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Shadow\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"AlternateBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>191</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>220</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+     </inactive>\n+     <disabled>\n+      <colorrole role=\"WindowText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>127</red>\n+         <green>127</green>\n+         <blue>63</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Button\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Light\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Midlight\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>191</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Dark\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>127</red>\n+         <green>127</green>\n+         <blue>63</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Mid\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>170</red>\n+         <green>170</green>\n+         <blue>84</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Text\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>127</red>\n+         <green>127</green>\n+         <blue>63</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"BrightText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>255</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ButtonText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>127</red>\n+         <green>127</green>\n+         <blue>63</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Base\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Window\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"Shadow\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"AlternateBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>127</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipBase\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>255</red>\n+         <green>255</green>\n+         <blue>220</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+      <colorrole role=\"ToolTipText\">\n+       <brush brushstyle=\"SolidPattern\">\n+        <color alpha=\"255\">\n+         <red>0</red>\n+         <green>0</green>\n+         <blue>0</blue>\n+        </color>\n+       </brush>\n+      </colorrole>\n+     </disabled>\n+    </palette>\n+   </property>\n+   <property name=\"toolTip\">\n+    <string>This is an unverified payment request.</string>\n+   </property>\n+   <property name=\"autoFillBackground\">\n+    <bool>true</bool>\n+   </property>\n+   <property name=\"frameShape\">\n+    <enum>QFrame::StyledPanel</enum>\n+   </property>\n+   <property name=\"frameShadow\">\n+    <enum>QFrame::Sunken</enum>\n+   </property>\n+   <layout class=\"QGridLayout\" name=\"gridLayout_is\">\n+    <property name=\"spacing\">\n+     <number>12</number>\n+    </property>\n+    <item row=\"4\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"memoLabel_is\">\n+      <property name=\"text\">\n+       <string>Memo:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"5\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"amountLabel_is\">\n+      <property name=\"text\">\n+       <string>Amount:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"3\" column=\"0\">\n+     <widget class=\"QLabel\" name=\"payToLabel_is\">\n+      <property name=\"text\">\n+       <string>Pay To:</string>\n+      </property>\n+      <property name=\"alignment\">\n+       <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"5\" column=\"2\">\n+     <widget class=\"BitcoinAmountField\" name=\"payAmount_is\">\n+      <property name=\"acceptDrops\">\n+       <bool>false</bool>\n+      </property>\n+     </widget>\n+    </item>\n+    <item row=\"3\" column=\"2\">\n+     <layout class=\"QHBoxLayout\" name=\"payToLayout_is\">\n+      <property name=\"spacing\">\n+       <number>0</number>\n+      </property>\n+      <item>\n+       <widget class=\"QLabel\" name=\"payTo_is\"/>\n+      </item>\n+     </layout>\n+    </item>\n+    <item row=\"4\" column=\"2\">\n+     <widget class=\"QLabel\" name=\"memoTextLabel_is\">\n+      <property name=\"textFormat\">\n+       <enum>Qt::PlainText</enum>\n+      </property>\n+     </widget>\n+    </item>\n+   </layout>\n+  </widget>\n+  <widget class=\"QFrame\" name=\"SendCoins_SecurePaymentRequest\">\n    <property name=\"palette\">\n     <palette>\n      <active>\n@@ -586,6 +1080,9 @@\n      </disabled>\n     </palette>\n    </property>\n+   <property name=\"toolTip\">\n+    <string>This is a verified payment request.</string>\n+   </property>\n    <property name=\"autoFillBackground\">\n     <bool>true</bool>\n    </property>\n@@ -607,35 +1104,26 @@\n       <property name=\"alignment\">\n        <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n       </property>\n-      <property name=\"buddy\">\n-       <cstring>addAsLabel</cstring>\n-      </property>\n      </widget>\n     </item>\n     <item row=\"5\" column=\"0\">\n      <widget class=\"QLabel\" name=\"amountLabel_s\">\n       <property name=\"text\">\n-       <string>A&amp;mount:</string>\n+       <string>Amount:</string>\n       </property>\n       <property name=\"alignment\">\n        <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n       </property>\n-      <property name=\"buddy\">\n-       <cstring>payAmount_s</cstring>\n-      </property>\n      </widget>\n     </item>\n     <item row=\"3\" column=\"0\">\n      <widget class=\"QLabel\" name=\"payToLabel_s\">\n       <property name=\"text\">\n-       <string>Pay &amp;To:</string>\n+       <string>Pay To:</string>\n       </property>\n       <property name=\"alignment\">\n        <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>\n       </property>\n-      <property name=\"buddy\">\n-       <cstring>payTo_s</cstring>\n-      </property>\n      </widget>\n     </item>\n     <item row=\"5\" column=\"2\">"
      },
      {
        "sha": "50847c4c48c51a8b54dc6a1d7781ed64e4fb3642",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 38,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "patch": "@@ -280,9 +280,6 @@ PaymentServer::PaymentServer(QObject* parent, bool startLocalServer) :\n             connect(this, SIGNAL(receivedPaymentACK(QString)), this, SLOT(handlePaymentACK(QString)));\n         }\n     }\n-\n-    // netManager is null until uiReady() is called\n-    netManager = NULL;\n }\n \n PaymentServer::~PaymentServer()\n@@ -450,9 +447,36 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<Sen\n     if (!optionsModel)\n         return false;\n \n-    QList<std::pair<CScript,qint64> > sendingTos = request.getPayTo();\n-    qint64 totalAmount = 0;\n+    recipients.append(SendCoinsRecipient());\n+\n+    recipients[0].paymentRequest = request;\n+    recipients[0].label = GUIUtil::HtmlEscape(request.getDetails().memo()); // Todo: Change to .message once available\n+\n+    request.getMerchant(PaymentServer::certStore, recipients[0].authenticatedMerchant);\n+\n+    QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n+\n+    int i = 0;\n     foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n+        // Extract and check destination addresses\n+        CTxDestination dest;\n+        if (ExtractDestination(sendingTo.first, dest)) {\n+            // Append destination address (for payment requests .address is used ONLY for GUI display)\n+            recipients[0].address.append(QString::fromStdString(CBitcoinAddress(dest).ToString()));\n+            if (i < sendingTos.size() - 1) // prevent new-line for last entry\n+                recipients[0].address.append(\"<br />\");\n+        }\n+        else if (!recipients[0].authenticatedMerchant.isEmpty()){\n+            // Insecure payments to custom bitcoin addresses are not supported\n+            // (there is no good way to tell the user where they are paying in a way\n+            // they'd have a chance of understanding).\n+            emit message(tr(\"Payment request error\"),\n+                tr(\"Unverified payment requests to custom payment scripts are unsupported.\"),\n+                CClientUIInterface::MSG_ERROR);\n+            return false;\n+        }\n+\n+        // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n         if (txOut.IsDust(CTransaction::nMinRelayTxFee)) {\n             QString msg = tr(\"Requested payment amount of %1 is too small (considered dust).\")\n@@ -463,43 +487,17 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<Sen\n             return false;\n         }\n \n-        totalAmount += sendingTo.second;\n+        recipients[0].amount += sendingTo.second;\n+        i++;\n     }\n+    // Store addresses and format them to fit nicely into the GUI\n+    recipient.address = addresses.join(\"<br />\");\n \n-    recipients.append(SendCoinsRecipient());\n-\n-    if (request.getMerchant(PaymentServer::certStore, recipients[0].authenticatedMerchant)) {\n-        recipients[0].paymentRequest = request;\n-        recipients[0].amount = totalAmount;\n-        qDebug() << \"PaymentServer::processPaymentRequest : Payment request from \" << recipients[0].authenticatedMerchant;\n+    if (!recipient.authenticatedMerchant.isEmpty()) {\n+        qDebug() << \"PaymentServer::processPaymentRequest : Secure payment request from \" << recipient.authenticatedMerchant;\n     }\n     else {\n-        recipients.clear();\n-        // Insecure payment requests may turn into more than one recipient if\n-        // the merchant is requesting payment to more than one address.\n-        for (int i = 0; i < sendingTos.size(); i++) {\n-            std::pair<CScript, qint64>& sendingTo = sendingTos[i];\n-            recipients.append(SendCoinsRecipient());\n-            recipients[i].amount = sendingTo.second;\n-            QString memo = QString::fromStdString(request.getDetails().memo());\n-            recipients[i].label = GUIUtil::HtmlEscape(memo);\n-            CTxDestination dest;\n-            if (ExtractDestination(sendingTo.first, dest)) {\n-                if (i == 0) // Tie request to first pay-to, we don't want multiple ACKs\n-                    recipients[i].paymentRequest = request;\n-                recipients[i].address = QString::fromStdString(CBitcoinAddress(dest).ToString());\n-                qDebug() << \"PaymentServer::processPaymentRequest : Payment request, insecure \" << recipients[i].address;\n-            }\n-            else {\n-                // Insecure payments to custom bitcoin addresses are not supported\n-                // (there is no good way to tell the user where they are paying in a way\n-                // they'd have a chance of understanding).\n-                emit message(tr(\"Payment request error\"),\n-                    tr(\"Insecure requests to custom payment scripts unsupported\"),\n-                    CClientUIInterface::MSG_ERROR);\n-                return false;\n-            }\n-        }\n+        qDebug() << \"PaymentServer::processPaymentRequest : Insecure payment request to \" << addresses.join(\", \");\n     }\n \n     return true;"
      },
      {
        "sha": "56079bb35fba54cdad16832caa5e3e7c4a028f70",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "patch": "@@ -102,7 +102,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n         QString recipientElement;\n \n-        if (rcp.authenticatedMerchant.isEmpty())\n+        if (!rcp.paymentRequest.IsInitialized()) // normal payment\n         {\n             if(rcp.label.length() > 0) // label with address\n             {\n@@ -114,10 +114,14 @@ void SendCoinsDialog::on_sendButton_clicked()\n                 recipientElement = tr(\"%1 to %2\").arg(amount, address);\n             }\n         }\n-        else // just merchant\n+        else if(!rcp.authenticatedMerchant.isEmpty()) // secure payment request\n         {\n             recipientElement = tr(\"%1 to %2\").arg(amount, GUIUtil::HtmlEscape(rcp.authenticatedMerchant));\n         }\n+        else // insecure payment request\n+        {\n+            recipientElement = tr(\"%1 to %2\").arg(amount, address);\n+        }\n \n         formatted.append(recipientElement);\n     }\n@@ -313,7 +317,7 @@ void SendCoinsDialog::pasteEntry(const SendCoinsRecipient &rv)\n bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n {\n     QString strSendCoins = tr(\"Send Coins\");\n-    if (!rv.authenticatedMerchant.isEmpty()) {\n+    if (rv.paymentRequest.IsInitialized()) {\n         // Expired payment request?\n         const payments::PaymentDetails& details = rv.paymentRequest.getDetails();\n         if (details.has_expires() && (int64)details.expires() < GetTime())"
      },
      {
        "sha": "e833274256827a29068cbdc5b214bb076ac4a365",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 23,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "patch": "@@ -18,7 +18,7 @@ SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n {\n     ui->setupUi(this);\n \n-    setCurrentWidget(ui->SendCoinsInsecure);\n+    setCurrentWidget(ui->SendCoins);\n \n #ifdef Q_OS_MAC\n     ui->payToLayout->setSpacing(4);\n@@ -28,10 +28,12 @@ SendCoinsEntry::SendCoinsEntry(QWidget *parent) :\n     ui->addAsLabel->setPlaceholderText(tr(\"Enter a label for this address to add it to your address book\"));\n     ui->payTo->setPlaceholderText(tr(\"Enter a Bitcoin address (e.g. 1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L)\"));\n #endif\n-    setFocusPolicy(Qt::TabFocus);\n     setFocusProxy(ui->payTo);\n \n+    // normal bitcoin address field\n     GUIUtil::setupAddressWidget(ui->payTo, this);\n+    // just a label for displaying bitcoin address(es)\n+    ui->payTo_is->setFont(GUIUtil::bitcoinAddressFont());\n }\n \n SendCoinsEntry::~SendCoinsEntry()\n@@ -67,7 +69,7 @@ void SendCoinsEntry::setModel(WalletModel *model)\n {\n     this->model = model;\n \n-    if(model && model->getOptionsModel())\n+    if (model && model->getOptionsModel())\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n     clear();\n@@ -80,11 +82,15 @@ void SendCoinsEntry::setRemoveEnabled(bool enabled)\n \n void SendCoinsEntry::clear()\n {\n-    // clear UI elements for insecure payments\n+    // clear UI elements for normal payment\n     ui->payTo->clear();\n     ui->addAsLabel->clear();\n     ui->payAmount->clear();\n-    // and the ones for secure payments just to be sure\n+    // clear UI elements for insecure payment request\n+    ui->payTo_is->clear();\n+    ui->memoTextLabel_is->clear();\n+    ui->payAmount_is->clear();\n+    // clear UI elements for secure payment request\n     ui->payTo_s->clear();\n     ui->memoTextLabel_s->clear();\n     ui->payAmount_s->clear();\n@@ -102,20 +108,23 @@ void SendCoinsEntry::on_deleteButton_clicked()\n \n bool SendCoinsEntry::validate()\n {\n+    if (!model)\n+        return false;\n+\n     // Check input validity\n     bool retval = true;\n \n-    if (!recipient.authenticatedMerchant.isEmpty())\n+    // Skip checks for payment request\n+    if (recipient.paymentRequest.IsInitialized())\n         return retval;\n \n-    if (!ui->payTo->hasAcceptableInput() ||\n-        (model && !model->validateAddress(ui->payTo->text())))\n+    if (!ui->payTo->hasAcceptableInput() || !model->validateAddress(ui->payTo->text()))\n     {\n         ui->payTo->setValid(false);\n         retval = false;\n     }\n \n-    if(!ui->payAmount->validate())\n+    if (!ui->payAmount->validate())\n     {\n         retval = false;\n     }\n@@ -131,10 +140,11 @@ bool SendCoinsEntry::validate()\n \n SendCoinsRecipient SendCoinsEntry::getValue()\n {\n-    if (!recipient.authenticatedMerchant.isEmpty())\n+    // Payment request\n+    if (recipient.paymentRequest.IsInitialized())\n         return recipient;\n \n-    // User-entered or non-authenticated:\n+    // Normal payment\n     recipient.address = ui->payTo->text();\n     recipient.label = ui->addAsLabel->text();\n     recipient.amount = ui->payAmount->value();\n@@ -156,22 +166,31 @@ void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n {\n     recipient = value;\n \n-    if (recipient.authenticatedMerchant.isEmpty())\n+    if (recipient.paymentRequest.IsInitialized()) // payment request\n+    {\n+        if (recipient.authenticatedMerchant.isEmpty()) // insecure\n+        {\n+            ui->payTo_is->setText(recipient.address);\n+            ui->memoTextLabel_is->setText(recipient.label);\n+            ui->payAmount_is->setValue(recipient.amount);\n+            ui->payAmount_is->setReadOnly(true);\n+            setCurrentWidget(ui->SendCoins_InsecurePaymentRequest);\n+        }\n+        else // secure\n+        {\n+            ui->payTo_s->setText(recipient.authenticatedMerchant);\n+            ui->memoTextLabel_s->setText(recipient.label);\n+            ui->payAmount_s->setValue(recipient.amount);\n+            ui->payAmount_s->setReadOnly(true);\n+            setCurrentWidget(ui->SendCoins_SecurePaymentRequest);\n+        }\n+    }\n+    else // normal payment\n     {\n         ui->payTo->setText(recipient.address);\n         ui->addAsLabel->setText(recipient.label);\n         ui->payAmount->setValue(recipient.amount);\n     }\n-    else\n-    {\n-        const payments::PaymentDetails& details = recipient.paymentRequest.getDetails();\n-\n-        ui->payTo_s->setText(recipient.authenticatedMerchant);\n-        ui->memoTextLabel_s->setText(QString::fromStdString(details.memo()));\n-        ui->payAmount_s->setValue(recipient.amount);\n-        ui->payAmount_s->setReadOnly(true);\n-        setCurrentWidget(ui->SendCoinsSecure);\n-    }\n }\n \n void SendCoinsEntry::setAddress(const QString &address)\n@@ -182,7 +201,7 @@ void SendCoinsEntry::setAddress(const QString &address)\n \n bool SendCoinsEntry::isClear()\n {\n-    return ui->payTo->text().isEmpty() && ui->payTo_s->text().isEmpty();\n+    return ui->payTo->text().isEmpty() && ui->payTo_is->text().isEmpty() && ui->payTo_s->text().isEmpty();\n }\n \n void SendCoinsEntry::setFocus()\n@@ -196,6 +215,7 @@ void SendCoinsEntry::updateDisplayUnit()\n     {\n         // Update payAmount with the current unit\n         ui->payAmount->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n+        ui->payAmount_is->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n         ui->payAmount_s->setDisplayUnit(model->getOptionsModel()->getDisplayUnit());\n     }\n }"
      },
      {
        "sha": "8086d6b5bb4a1554aeb5d4353423f958d1de63dc",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "patch": "@@ -258,8 +258,8 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n     // and emit coinsSent signal for each recipient\n     foreach(const SendCoinsRecipient &rcp, transaction.getRecipients())\n     {\n-        // Don't touch the address book when we have a secure payment-request\n-        if (rcp.authenticatedMerchant.isEmpty())\n+        // Don't touch the address book when we have a payment request\n+        if (!rcp.paymentRequest.IsInitialized())\n         {\n             std::string strAddress = rcp.address.toStdString();\n             CTxDestination dest = CBitcoinAddress(strAddress).Get();"
      },
      {
        "sha": "59227bb7435a91b1d6bedf1e45f584a1b861bf7f",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "patch": "@@ -25,14 +25,22 @@ class SendCoinsRecipient\n     explicit SendCoinsRecipient(const QString &addr, const QString &label, quint64 amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message) {}\n \n+    // If from an insecure payment request, this is used for storing\n+    // the addresses, e.g. address-A<br />address-B<br />address-C.\n+    // Info: As we don't need to process addresses in here when using\n+    // payment requests, we can abuse it for displaying an address list.\n+    // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString address;\n+    // If from a payment request, this is used for storing the memo\n+    // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString label;\n     qint64 amount;\n     QString message;\n \n     // If from a payment request, paymentRequest.IsInitialized() will be true\n     PaymentRequestPlus paymentRequest;\n-    QString authenticatedMerchant; // Empty if no authentication or invalid signature/cert/etc.\n+    // Empty if no authentication or invalid signature/cert/etc.\n+    QString authenticatedMerchant;\n };\n \n /** Interface to Bitcoin wallet from Qt view code. */\n@@ -160,7 +168,7 @@ class WalletModel : public QObject\n     // this means that the unlocking failed or was cancelled.\n     void requireUnlock();\n \n-    // Asynchronous message notification\n+    // Fired when a message should be reported to the user\n     void message(const QString &title, const QString &message, unsigned int style);\n \n     // Coins sent: from wallet, to recipient, in (serialized) transaction:"
      }
    ]
  },
  {
    "sha": "983cef48027f1bdf651c19d72cf615cf4345dbe6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODNjZWY0ODAyN2YxYmRmNjUxYzE5ZDcyY2Y2MTVjZjQzNDVkYmU2",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-27T20:52:01Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-31T16:51:13Z"
      },
      "message": "payment-request UI: use SendCoinsRecipient.message for memo",
      "tree": {
        "sha": "b566090b2c4fd239e373e915e2610d4f014979ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b566090b2c4fd239e373e915e2610d4f014979ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/983cef48027f1bdf651c19d72cf615cf4345dbe6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983cef48027f1bdf651c19d72cf615cf4345dbe6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/983cef48027f1bdf651c19d72cf615cf4345dbe6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983cef48027f1bdf651c19d72cf615cf4345dbe6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6c97e0f4e3d9d8d5b8a1e60174e9ff11e70b6c1"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c113c0ff137adc6f780cc154c6a3c7747eb88c11",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/983cef48027f1bdf651c19d72cf615cf4345dbe6/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/983cef48027f1bdf651c19d72cf615cf4345dbe6/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=983cef48027f1bdf651c19d72cf615cf4345dbe6",
        "patch": "@@ -450,7 +450,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<Sen\n     recipients.append(SendCoinsRecipient());\n \n     recipients[0].paymentRequest = request;\n-    recipients[0].label = GUIUtil::HtmlEscape(request.getDetails().memo()); // Todo: Change to .message once available\n+    recipients[0].message = GUIUtil::HtmlEscape(request.getDetails().memo());\n \n     request.getMerchant(PaymentServer::certStore, recipients[0].authenticatedMerchant);\n "
      },
      {
        "sha": "f312c9f72f62936d07e12e6f468de6b04b4b0639",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/983cef48027f1bdf651c19d72cf615cf4345dbe6/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/983cef48027f1bdf651c19d72cf615cf4345dbe6/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=983cef48027f1bdf651c19d72cf615cf4345dbe6",
        "patch": "@@ -171,15 +171,15 @@ void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n         if (recipient.authenticatedMerchant.isEmpty()) // insecure\n         {\n             ui->payTo_is->setText(recipient.address);\n-            ui->memoTextLabel_is->setText(recipient.label);\n+            ui->memoTextLabel_is->setText(recipient.message);\n             ui->payAmount_is->setValue(recipient.amount);\n             ui->payAmount_is->setReadOnly(true);\n             setCurrentWidget(ui->SendCoins_InsecurePaymentRequest);\n         }\n         else // secure\n         {\n             ui->payTo_s->setText(recipient.authenticatedMerchant);\n-            ui->memoTextLabel_s->setText(recipient.label);\n+            ui->memoTextLabel_s->setText(recipient.message);\n             ui->payAmount_s->setValue(recipient.amount);\n             ui->payAmount_s->setReadOnly(true);\n             setCurrentWidget(ui->SendCoins_SecurePaymentRequest);"
      },
      {
        "sha": "467c3dea123c32d7f5e125c15853ac8741cb582d",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/983cef48027f1bdf651c19d72cf615cf4345dbe6/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/983cef48027f1bdf651c19d72cf615cf4345dbe6/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=983cef48027f1bdf651c19d72cf615cf4345dbe6",
        "patch": "@@ -31,10 +31,9 @@ class SendCoinsRecipient\n     // payment requests, we can abuse it for displaying an address list.\n     // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString address;\n-    // If from a payment request, this is used for storing the memo\n-    // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString label;\n     qint64 amount;\n+    // If from a payment request, this is used for storing the memo\n     QString message;\n \n     // If from a payment request, paymentRequest.IsInitialized() will be true"
      }
    ]
  },
  {
    "sha": "952d2cdb56cb997b2158d363d8db3ee11fd49d11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTJkMmNkYjU2Y2I5OTdiMjE1OGQzNjNkOGRiM2VlMTFmZDQ5ZDEx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-28T12:29:13Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-31T16:51:39Z"
      },
      "message": "make processPaymentRequest() use a single SendCoinsRecipient\n\n- as one this pulls main purpose is to change a payment request to\n  be displayed as a single sendcoins entry",
      "tree": {
        "sha": "dedc9bf6aff8e1cc54d86c5744d6cb1051ef5434",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dedc9bf6aff8e1cc54d86c5744d6cb1051ef5434"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/952d2cdb56cb997b2158d363d8db3ee11fd49d11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952d2cdb56cb997b2158d363d8db3ee11fd49d11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/952d2cdb56cb997b2158d363d8db3ee11fd49d11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952d2cdb56cb997b2158d363d8db3ee11fd49d11/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "983cef48027f1bdf651c19d72cf615cf4345dbe6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/983cef48027f1bdf651c19d72cf615cf4345dbe6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/983cef48027f1bdf651c19d72cf615cf4345dbe6"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 18,
      "deletions": 23
    },
    "files": [
      {
        "sha": "71a5bb4550f4ce139fb8e0ed8f35bdfd25abbdff",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 22,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/952d2cdb56cb997b2158d363d8db3ee11fd49d11/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/952d2cdb56cb997b2158d363d8db3ee11fd49d11/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=952d2cdb56cb997b2158d363d8db3ee11fd49d11",
        "patch": "@@ -375,6 +375,7 @@ void PaymentServer::handleURIOrFile(const QString& s)\n                 fetchRequest(fetchUrl);\n             else\n                 qDebug() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n+\n             return;\n         }\n \n@@ -385,18 +386,17 @@ void PaymentServer::handleURIOrFile(const QString& s)\n             emit message(tr(\"URI handling\"),\n                 tr(\"URI can not be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.\"),\n                 CClientUIInterface::ICON_WARNING);\n+\n         return;\n     }\n \n     if (QFile::exists(s))\n     {\n         PaymentRequestPlus request;\n-        QList<SendCoinsRecipient> recipients;\n-        if (readPaymentRequest(s, request) && processPaymentRequest(request, recipients)) {\n-            foreach (const SendCoinsRecipient& recipient, recipients){\n-                emit receivedPaymentRequest(recipient);\n-            }\n-        }\n+        SendCoinsRecipient recipient;\n+        if (readPaymentRequest(s, request) && processPaymentRequest(request, recipient))\n+            emit receivedPaymentRequest(recipient);\n+\n         return;\n     }\n }\n@@ -442,17 +442,15 @@ bool PaymentServer::readPaymentRequest(const QString& filename, PaymentRequestPl\n     return request.parse(data);\n }\n \n-bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<SendCoinsRecipient>& recipients)\n+bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoinsRecipient& recipient)\n {\n     if (!optionsModel)\n         return false;\n \n-    recipients.append(SendCoinsRecipient());\n-\n-    recipients[0].paymentRequest = request;\n-    recipients[0].message = GUIUtil::HtmlEscape(request.getDetails().memo());\n+    recipient.paymentRequest = request;\n+    recipient.message = GUIUtil::HtmlEscape(request.getDetails().memo());\n \n-    request.getMerchant(PaymentServer::certStore, recipients[0].authenticatedMerchant);\n+    request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n \n     QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n \n@@ -462,11 +460,11 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<Sen\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n             // Append destination address (for payment requests .address is used ONLY for GUI display)\n-            recipients[0].address.append(QString::fromStdString(CBitcoinAddress(dest).ToString()));\n+            recipient.address.append(QString::fromStdString(CBitcoinAddress(dest).ToString()));\n             if (i < sendingTos.size() - 1) // prevent new-line for last entry\n-                recipients[0].address.append(\"<br />\");\n+                recipient.address.append(\"<br />\");\n         }\n-        else if (!recipients[0].authenticatedMerchant.isEmpty()){\n+        else if (!recipient.authenticatedMerchant.isEmpty()){\n             // Insecure payments to custom bitcoin addresses are not supported\n             // (there is no good way to tell the user where they are paying in a way\n             // they'd have a chance of understanding).\n@@ -487,7 +485,7 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, QList<Sen\n             return false;\n         }\n \n-        recipients[0].amount += sendingTo.second;\n+        recipient.amount += sendingTo.second;\n         i++;\n     }\n     // Store addresses and format them to fit nicely into the GUI\n@@ -588,12 +586,9 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n     if (requestType == \"PaymentRequest\")\n     {\n         PaymentRequestPlus request;\n-        QList<SendCoinsRecipient> recipients;\n-        if (request.parse(data) && processPaymentRequest(request, recipients)) {\n-            foreach (const SendCoinsRecipient& recipient, recipients) {\n-                emit receivedPaymentRequest(recipient);\n-            }\n-        }\n+        SendCoinsRecipient recipient;\n+        if (request.parse(data) && processPaymentRequest(request, recipient))\n+            emit receivedPaymentRequest(recipient);\n         else\n             qDebug() << \"PaymentServer::netRequestFinished : Error processing payment request\";\n "
      },
      {
        "sha": "b504e968e9606ad62a563dcaf2355f7eb1a52bad",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/952d2cdb56cb997b2158d363d8db3ee11fd49d11/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/952d2cdb56cb997b2158d363d8db3ee11fd49d11/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=952d2cdb56cb997b2158d363d8db3ee11fd49d11",
        "patch": "@@ -109,7 +109,7 @@ private slots:\n \n private:\n     static bool readPaymentRequest(const QString& filename, PaymentRequestPlus& request);\n-    bool processPaymentRequest(PaymentRequestPlus& request, QList<SendCoinsRecipient>& recipients);\n+    bool processPaymentRequest(PaymentRequestPlus& request, SendCoinsRecipient& recipient);\n     void handleURIOrFile(const QString& s);\n     void fetchRequest(const QUrl& url);\n "
      }
    ]
  },
  {
    "sha": "395d0d5af017bbf6d432471075608efaf4104a03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOTVkMGQ1YWYwMTdiYmY2ZDQzMjQ3MTA3NTYwOGVmYWY0MTA0YTAz",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-30T10:26:44Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-10-31T16:51:40Z"
      },
      "message": "rework an ugly hack in processPaymentRequest()\n\n- use a QStringList to store valid addresses and format them for GUI and\n  debug.log usage via .join()",
      "tree": {
        "sha": "b0c51fd12e2be808dbefea19b6fe5b6f28b57e6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0c51fd12e2be808dbefea19b6fe5b6f28b57e6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/395d0d5af017bbf6d432471075608efaf4104a03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395d0d5af017bbf6d432471075608efaf4104a03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/395d0d5af017bbf6d432471075608efaf4104a03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/395d0d5af017bbf6d432471075608efaf4104a03/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "952d2cdb56cb997b2158d363d8db3ee11fd49d11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/952d2cdb56cb997b2158d363d8db3ee11fd49d11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/952d2cdb56cb997b2158d363d8db3ee11fd49d11"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 3,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b6c869a2c95203deddcb1152d6227d76e604f023",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/395d0d5af017bbf6d432471075608efaf4104a03/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/395d0d5af017bbf6d432471075608efaf4104a03/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=395d0d5af017bbf6d432471075608efaf4104a03",
        "patch": "@@ -453,16 +453,14 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n \n     QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n+    QStringList addresses;\n \n-    int i = 0;\n     foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {\n-            // Append destination address (for payment requests .address is used ONLY for GUI display)\n-            recipient.address.append(QString::fromStdString(CBitcoinAddress(dest).ToString()));\n-            if (i < sendingTos.size() - 1) // prevent new-line for last entry\n-                recipient.address.append(\"<br />\");\n+            // Append destination address\n+            addresses.append(QString::fromStdString(CBitcoinAddress(dest).ToString()));\n         }\n         else if (!recipient.authenticatedMerchant.isEmpty()){\n             // Insecure payments to custom bitcoin addresses are not supported\n@@ -486,7 +484,6 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n         }\n \n         recipient.amount += sendingTo.second;\n-        i++;\n     }\n     // Store addresses and format them to fit nicely into the GUI\n     recipient.address = addresses.join(\"<br />\");"
      }
    ]
  }
]