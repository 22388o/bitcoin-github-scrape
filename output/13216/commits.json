[
  {
    "sha": "9d0e52834bbd38e7c7410bcb09ef85d157968b04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDBlNTI4MzRiYmQzOGU3Yzc0MTBiY2IwOWVmODVkMTU3OTY4YjA0",
    "commit": {
      "author": {
        "name": "marcoagner",
        "email": "marco@agner.io",
        "date": "2018-10-07T12:11:36Z"
      },
      "committer": {
        "name": "marcoagner",
        "email": "marco@agner.io",
        "date": "2018-10-07T12:11:36Z"
      },
      "message": "implements different disk sizes for different networks on intro\n\n- Creates m_assumed_blockchain_size and m_assumed_chain_state_size on CChainParams.\n- Implements access to CChainParams' m_assumed_blockchain_size and m_assumed_chain_state_size on node interface.\n- Implements m_assumed_blockchain_size and m_assumed_chain_state_size on qt/intro via node interface.\n- Updates release process document with the new CChainParam's values.",
      "tree": {
        "sha": "d21d966862cd2f0e7fd3f2c8da1b8ee6af7e1459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d21d966862cd2f0e7fd3f2c8da1b8ee6af7e1459"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d0e52834bbd38e7c7410bcb09ef85d157968b04",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEBVLlIGnnSaHbHcvrDcd/xh7T7MQFAlu5+EIACgkQDcd/xh7T\n7MT6Xw/+Onl4gTTFDUJKRiYvJU+4oTKWsYa+7CH39NTXaFd/IFWV9h6E+ceT4Kn1\n1M7rn0D2J2mtLE/szO0BDZHJo/6+Emsf3CgoWlmV4IWVG6Y44Ez28C4TYVtibtCo\nXJLIi80Z6ANN1AjKsCP5zcLYuKejzm32oW44xTm5a1uO8CyrLtFS0RVfFQvUD1Xu\ntpri1uQQT+QlWqKVfJLw+Qqv8IuAinsG1ftiwKEuhm8zHaUJFzCgOKrjXMksEyei\n5YphyDWaUOvrvyhNs9jA8PDKkxrpUUiZh5uKbbqFeCPi/7JU594iphT4gU3DWinI\n0+wJYy+4Xz54jH2Y007fOixCddXPOjAq0mGm/QroMea35CPL99ucy2T3FD+SUpHr\nblZZcsbj8crg4pyh4U+wpAJjNfsEWtktkrerXhfUiFsBJzjfid28THYUL47SbDCB\nKOiBZx6IOuLesuCztaQ2WUq5nJK1iMg2MLqVyvKXENryrV4e21qpv5p7UOQ7/TcJ\nZk1jRrIXV/nFEvqDXC9gnZfmGawiz70+/jT1ubPjRHq5F4MY0s/bpN2n9jnVPxK0\ndaSKBDv/n2wi/BCuhTCwFFdofLsTbvaZOQzAVbLfLcn5E6Ugp6k139147BXNwlqK\n6z9MSIs4cSdp2pNpJoGWawWLo1PcNP5a3ElaN/suSPL8veowS7I=\n=+ugV\n-----END PGP SIGNATURE-----",
        "payload": "tree d21d966862cd2f0e7fd3f2c8da1b8ee6af7e1459\nparent f504a1402afd0760e9d348ecc8bad0094aa7d705\nauthor marcoagner <marco@agner.io> 1538914296 +0100\ncommitter marcoagner <marco@agner.io> 1538914296 +0100\n\nimplements different disk sizes for different networks on intro\n\n- Creates m_assumed_blockchain_size and m_assumed_chain_state_size on CChainParams.\n- Implements access to CChainParams' m_assumed_blockchain_size and m_assumed_chain_state_size on node interface.\n- Implements m_assumed_blockchain_size and m_assumed_chain_state_size on qt/intro via node interface.\n- Updates release process document with the new CChainParam's values.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d0e52834bbd38e7c7410bcb09ef85d157968b04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d0e52834bbd38e7c7410bcb09ef85d157968b04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d0e52834bbd38e7c7410bcb09ef85d157968b04/comments",
    "author": {
      "login": "marcoagner",
      "id": 5016303,
      "node_id": "MDQ6VXNlcjUwMTYzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5016303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcoagner",
      "html_url": "https://github.com/marcoagner",
      "followers_url": "https://api.github.com/users/marcoagner/followers",
      "following_url": "https://api.github.com/users/marcoagner/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcoagner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcoagner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcoagner/subscriptions",
      "organizations_url": "https://api.github.com/users/marcoagner/orgs",
      "repos_url": "https://api.github.com/users/marcoagner/repos",
      "events_url": "https://api.github.com/users/marcoagner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcoagner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "marcoagner",
      "id": 5016303,
      "node_id": "MDQ6VXNlcjUwMTYzMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5016303?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/marcoagner",
      "html_url": "https://github.com/marcoagner",
      "followers_url": "https://api.github.com/users/marcoagner/followers",
      "following_url": "https://api.github.com/users/marcoagner/following{/other_user}",
      "gists_url": "https://api.github.com/users/marcoagner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/marcoagner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/marcoagner/subscriptions",
      "organizations_url": "https://api.github.com/users/marcoagner/orgs",
      "repos_url": "https://api.github.com/users/marcoagner/repos",
      "events_url": "https://api.github.com/users/marcoagner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/marcoagner/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f504a1402afd0760e9d348ecc8bad0094aa7d705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f504a1402afd0760e9d348ecc8bad0094aa7d705",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f504a1402afd0760e9d348ecc8bad0094aa7d705"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 40,
      "deletions": 12
    },
    "files": [
      {
        "sha": "91270b4f7ea8dbbbf86bfe8df2c054050ca145d0",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d0e52834bbd38e7c7410bcb09ef85d157968b04/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d0e52834bbd38e7c7410bcb09ef85d157968b04/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=9d0e52834bbd38e7c7410bcb09ef85d157968b04",
        "patch": "@@ -22,7 +22,7 @@ Before every minor and major release:\n Before every major release:\n \n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n-* Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n+* Update [`src/chainparams.cpp`](/src/chainparams.cpp) m_assumed_blockchain_size and m_assumed_chain_state_size with the current size plus some overhead.\n * Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n   [this pull request](https://github.com/bitcoin/bitcoin/pull/12270) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n * Update version of `contrib/gitian-descriptors/*.yml`: usually one'd want to do this on master after branching off the release - but be sure to at least do it before a new major release"
      },
      {
        "sha": "9bb432915ea43e76e0ebd8913032a2ebbdc81db6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=9d0e52834bbd38e7c7410bcb09ef85d157968b04",
        "patch": "@@ -107,6 +107,8 @@ class CMainParams : public CChainParams {\n         pchMessageStart[3] = 0xd9;\n         nDefaultPort = 8333;\n         nPruneAfterHeight = 100000;\n+        m_assumed_blockchain_size = 200;\n+        m_assumed_chain_state_size = 3;\n \n         genesis = CreateGenesisBlock(1231006505, 2083236893, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -216,6 +218,8 @@ class CTestNetParams : public CChainParams {\n         pchMessageStart[3] = 0x07;\n         nDefaultPort = 18333;\n         nPruneAfterHeight = 1000;\n+        m_assumed_blockchain_size = 20;\n+        m_assumed_chain_state_size = 2;\n \n         genesis = CreateGenesisBlock(1296688602, 414098458, 0x1d00ffff, 1, 50 * COIN);\n         consensus.hashGenesisBlock = genesis.GetHash();\n@@ -305,6 +309,8 @@ class CRegTestParams : public CChainParams {\n         pchMessageStart[3] = 0xda;\n         nDefaultPort = 18444;\n         nPruneAfterHeight = 1000;\n+        m_assumed_blockchain_size = 0;\n+        m_assumed_chain_state_size = 0;\n \n         UpdateVersionBitsParametersFromArgs(args);\n "
      },
      {
        "sha": "6ff3dbb7e53d35477941c819b12a5988f4ea218f",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=9d0e52834bbd38e7c7410bcb09ef85d157968b04",
        "patch": "@@ -67,6 +67,10 @@ class CChainParams\n     /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n+    /** Minimum free space (in GB) needed for data directory */\n+    uint64_t AssumedBlockchainSize() const { return m_assumed_blockchain_size; }\n+    /** Minimum free space (in GB) needed for data directory when pruned; Does not include prune target*/\n+    uint64_t AssumedChainStateSize() const { return m_assumed_chain_state_size; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /** Return the BIP70 network string (main, test or regtest) */\n@@ -87,6 +91,8 @@ class CChainParams\n     CMessageHeader::MessageStartChars pchMessageStart;\n     int nDefaultPort;\n     uint64_t nPruneAfterHeight;\n+    uint64_t m_assumed_blockchain_size;\n+    uint64_t m_assumed_chain_state_size;\n     std::vector<std::string> vSeeds;\n     std::vector<unsigned char> base58Prefixes[MAX_BASE58_TYPES];\n     std::string bech32_hrp;"
      },
      {
        "sha": "8a51192271017711d13d68b1daeda9fbde9b252e",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=9d0e52834bbd38e7c7410bcb09ef85d157968b04",
        "patch": "@@ -56,6 +56,8 @@ class NodeImpl : public Node\n     bool softSetArg(const std::string& arg, const std::string& value) override { return gArgs.SoftSetArg(arg, value); }\n     bool softSetBoolArg(const std::string& arg, bool value) override { return gArgs.SoftSetBoolArg(arg, value); }\n     void selectParams(const std::string& network) override { SelectParams(network); }\n+    uint64_t getAssumedBlockchainSize() override { return Params().AssumedBlockchainSize(); }\n+    uint64_t getAssumedChainStateSize() override { return Params().AssumedChainStateSize(); }\n     std::string getNetwork() override { return Params().NetworkIDString(); }\n     void initLogging() override { InitLogging(); }\n     void initParameterInteraction() override { InitParameterInteraction(); }"
      },
      {
        "sha": "6060d8e74db171c162c1640db4af95d1f6140d65",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=9d0e52834bbd38e7c7410bcb09ef85d157968b04",
        "patch": "@@ -52,6 +52,12 @@ class Node\n     //! Choose network parameters.\n     virtual void selectParams(const std::string& network) = 0;\n \n+    //! Get the (assumed) blockchain size.\n+    virtual uint64_t getAssumedBlockchainSize() = 0;\n+\n+    //! Get the (assumed) chain state size.\n+    virtual uint64_t getAssumedChainStateSize() = 0;\n+\n     //! Get network name.\n     virtual std::string getNetwork() = 0;\n "
      },
      {
        "sha": "1dc31b9ddc8ee3ff4e8a3ceba0206cc467efdad8",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=9d0e52834bbd38e7c7410bcb09ef85d157968b04",
        "patch": "@@ -22,10 +22,6 @@\n #include <cmath>\n \n static const uint64_t GB_BYTES = 1000000000LL;\n-/* Minimum free space (in GB) needed for data directory */\n-constexpr uint64_t BLOCK_CHAIN_SIZE = 220;\n-/* Minimum free space (in GB) needed for data directory when pruned; Does not include prune target */\n-static const uint64_t CHAIN_STATE_SIZE = 3;\n /* Total required space (in GB) depending on user choice (prune, not prune) */\n static uint64_t requiredSpace;\n \n@@ -114,26 +110,28 @@ void FreespaceChecker::check()\n }\n \n \n-Intro::Intro(QWidget *parent) :\n+Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_size) :\n     QDialog(parent),\n     ui(new Ui::Intro),\n     thread(0),\n-    signalled(false)\n+    signalled(false),\n+    m_blockchain_size(blockchain_size),\n+    m_chain_state_size(chain_state_size)\n {\n     ui->setupUi(this);\n     ui->welcomeLabel->setText(ui->welcomeLabel->text().arg(tr(PACKAGE_NAME)));\n     ui->storageLabel->setText(ui->storageLabel->text().arg(tr(PACKAGE_NAME)));\n \n     ui->lblExplanation1->setText(ui->lblExplanation1->text()\n         .arg(tr(PACKAGE_NAME))\n-        .arg(BLOCK_CHAIN_SIZE)\n+        .arg(m_blockchain_size)\n         .arg(2009)\n         .arg(tr(\"Bitcoin\"))\n     );\n     ui->lblExplanation2->setText(ui->lblExplanation2->text().arg(tr(PACKAGE_NAME)));\n \n     uint64_t pruneTarget = std::max<int64_t>(0, gArgs.GetArg(\"-prune\", 0));\n-    requiredSpace = BLOCK_CHAIN_SIZE;\n+    requiredSpace = m_blockchain_size;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n     if (pruneTarget) {\n         uint64_t prunedGBs = std::ceil(pruneTarget * 1024 * 1024.0 / GB_BYTES);\n@@ -145,7 +143,7 @@ Intro::Intro(QWidget *parent) :\n     } else {\n         ui->lblExplanation3->setVisible(false);\n     }\n-    requiredSpace += CHAIN_STATE_SIZE;\n+    requiredSpace += m_chain_state_size;\n     ui->sizeWarningLabel->setText(\n         tr(\"%1 will download and store a copy of the Bitcoin block chain.\").arg(tr(PACKAGE_NAME)) + \" \" +\n         storageRequiresMsg.arg(requiredSpace) + \" \" +\n@@ -201,8 +199,15 @@ bool Intro::pickDataDirectory(interfaces::Node& node)\n \n     if(!fs::exists(GUIUtil::qstringToBoostPath(dataDir)) || gArgs.GetBoolArg(\"-choosedatadir\", DEFAULT_CHOOSE_DATADIR) || settings.value(\"fReset\", false).toBool() || gArgs.GetBoolArg(\"-resetguisettings\", false))\n     {\n+        /* Use selectParams here to guarantee Params() can be used by node interface */\n+        try {\n+            node.selectParams(gArgs.GetChainName());\n+        } catch (const std::exception&) {\n+            return false;\n+        }\n+\n         /* If current default data directory does not exist, let the user choose one */\n-        Intro intro;\n+        Intro intro(0, node.getAssumedBlockchainSize(), node.getAssumedChainStateSize());\n         intro.setDataDirectory(dataDir);\n         intro.setWindowIcon(QIcon(\":icons/bitcoin\"));\n "
      },
      {
        "sha": "01c4165f3e64de880331542b1e90de7592b7a517",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d0e52834bbd38e7c7410bcb09ef85d157968b04/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=9d0e52834bbd38e7c7410bcb09ef85d157968b04",
        "patch": "@@ -30,7 +30,8 @@ class Intro : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit Intro(QWidget *parent = 0);\n+    explicit Intro(QWidget *parent = 0,\n+                   uint64_t blockchain_size = 0, uint64_t chain_state_size = 0);\n     ~Intro();\n \n     QString getDataDirectory();\n@@ -71,6 +72,8 @@ private Q_SLOTS:\n     QMutex mutex;\n     bool signalled;\n     QString pathToCheck;\n+    uint64_t m_blockchain_size;\n+    uint64_t m_chain_state_size;\n \n     void startThread();\n     void checkPath(const QString &dataDir);"
      }
    ]
  }
]