[
  {
    "sha": "5098c47b2430ded299c21620527ebd0544fe51e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDk4YzQ3YjI0MzBkZWQyOTljMjE2MjA1MjdlYmQwNTQ0ZmU1MWUy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-09T17:56:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-07-10T14:49:31Z"
      },
      "message": "Implement accurate memory accounting for mempool",
      "tree": {
        "sha": "5423630dea9653802744ed2bb997797fc1b6ca96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5423630dea9653802744ed2bb997797fc1b6ca96"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5098c47b2430ded299c21620527ebd0544fe51e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5098c47b2430ded299c21620527ebd0544fe51e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5098c47b2430ded299c21620527ebd0544fe51e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5098c47b2430ded299c21620527ebd0544fe51e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "943b322d5d292707e193f3a9d8e971881540be23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/943b322d5d292707e193f3a9d8e971881540be23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/943b322d5d292707e193f3a9d8e971881540be23"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 110,
      "deletions": 2
    },
    "files": [
      {
        "sha": "7a831e6d33cc7aa5c973309ad7c65b3f7a711836",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 66,
        "deletions": 1,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -11,6 +11,7 @@\n #include <set>\n #include <vector>\n \n+#include <boost/foreach.hpp>\n #include <boost/unordered_set.hpp>\n #include <boost/unordered_map.hpp>\n \n@@ -20,12 +21,28 @@ namespace memusage\n /** Compute the total memory used by allocating alloc bytes. */\n static size_t MallocUsage(size_t alloc);\n \n+/** Dynamic memory usage for built-in types is zero. */\n+static inline size_t DynamicUsage(const int8_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint8_t& v) { return 0; }\n+static inline size_t DynamicUsage(const int16_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint16_t& v) { return 0; }\n+static inline size_t DynamicUsage(const int32_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint32_t& v) { return 0; }\n+static inline size_t DynamicUsage(const int64_t& v) { return 0; }\n+static inline size_t DynamicUsage(const uint64_t& v) { return 0; }\n+static inline size_t DynamicUsage(const float& v) { return 0; }\n+static inline size_t DynamicUsage(const double& v) { return 0; }\n+template<typename X> static inline size_t DynamicUsage(X * const &v) { return 0; }\n+template<typename X> static inline size_t DynamicUsage(const X * const &v) { return 0; }\n+template<typename X, typename Y> static inline size_t DynamicUsage(std::pair<X, Y> &p) { return 0; }\n+\n /** Compute the memory used for dynamically allocated but owned data structures.\n  *  For generic data types, this is *not* recursive. DynamicUsage(vector<vector<int> >)\n  *  will compute the memory used for the vector<int>'s, but not for the ints inside.\n  *  This is for efficiency reasons, as these functions are intended to be fast. If\n  *  application data structures require more accurate inner accounting, they should\n- *  do the recursion themselves, or use more efficient caching + updating on modification.\n+ *  use RecursiveDynamicUsage, iterate themselves, or use more efficient caching +\n+ *  updating on modification.\n  */\n template<typename X> static size_t DynamicUsage(const std::vector<X>& v);\n template<typename X> static size_t DynamicUsage(const std::set<X>& s);\n@@ -34,6 +51,12 @@ template<typename X, typename Y> static size_t DynamicUsage(const boost::unorder\n template<typename X, typename Y, typename Z> static size_t DynamicUsage(const boost::unordered_map<X, Y, Z>& s);\n template<typename X> static size_t DynamicUsage(const X& x);\n \n+template<typename X> static size_t RecursiveDynamicUsage(const std::vector<X>& v);\n+template<typename X> static size_t RecursiveDynamicUsage(const std::set<X>& v);\n+template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::map<X, Y>& v);\n+template<typename X, typename Y> static size_t RecursiveDynamicUsage(const std::pair<X, Y>& v);\n+template<typename X> static size_t RecursiveDynamicUsage(const X& v);\n+\n static inline size_t MallocUsage(size_t alloc)\n {\n     // Measured on libc6 2.19 on Linux.\n@@ -65,18 +88,54 @@ static inline size_t DynamicUsage(const std::vector<X>& v)\n     return MallocUsage(v.capacity() * sizeof(X));\n }\n \n+template<typename X>\n+static inline size_t RecursiveDynamicUsage(const std::vector<X>& v)\n+{\n+    size_t usage = DynamicUsage(v);\n+    BOOST_FOREACH(const X& x, v) {\n+        usage += RecursiveDynamicUsage(x);\n+    }\n+    return usage;\n+}\n+\n template<typename X>\n static inline size_t DynamicUsage(const std::set<X>& s)\n {\n     return MallocUsage(sizeof(stl_tree_node<X>)) * s.size();\n }\n \n+template<typename X>\n+static inline size_t RecursiveDynamicUsage(const std::set<X>& v)\n+{\n+    size_t usage = DynamicUsage(v);\n+    BOOST_FOREACH(const X& x, v) {\n+        usage += RecursiveDynamicUsage(x);\n+    }\n+    return usage;\n+}\n+\n template<typename X, typename Y>\n static inline size_t DynamicUsage(const std::map<X, Y>& m)\n {\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >)) * m.size();\n }\n \n+template<typename X, typename Y>\n+static inline size_t RecursiveDynamicUsage(const std::map<X, Y>& v)\n+{\n+    size_t usage = DynamicUsage(v);\n+    for (typename std::map<X, Y>::const_iterator it = v.begin(); it != v.end(); it++) {\n+        usage += RecursiveDynamicUsage(*it);\n+    }\n+    return usage;\n+}\n+\n+template<typename X, typename Y>\n+static inline size_t RecursiveDynamicUsage(const std::pair<X, Y>& v)\n+{\n+    return RecursiveDynamicUsage(v.first) + RecursiveDynamicUsage(v.second);\n+}\n+\n // Boost data structures\n \n template<typename X>\n@@ -106,6 +165,12 @@ static inline size_t DynamicUsage(const X& x)\n     return x.DynamicMemoryUsage();\n }\n \n+template<typename X>\n+static inline size_t RecursiveDynamicUsage(const X& x)\n+{\n+    return DynamicUsage(x);\n+}\n+\n }\n \n #endif"
      },
      {
        "sha": "7ed2d45973a2e78a63faf8a0e3464009b631285b",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -72,6 +72,11 @@ void CTransaction::UpdateHash() const\n     *const_cast<uint256*>(&hash) = SerializeHash(*this);\n }\n \n+size_t CTransaction::DynamicMemoryUsage() const\n+{\n+    return memusage::RecursiveDynamicUsage(vin) + memusage::RecursiveDynamicUsage(vout);\n+}\n+\n CTransaction::CTransaction() : nVersion(CTransaction::CURRENT_VERSION), vin(), vout(), nLockTime(0) { }\n \n CTransaction::CTransaction(const CMutableTransaction &tx) : nVersion(tx.nVersion), vin(tx.vin), vout(tx.vout), nLockTime(tx.nLockTime) {"
      },
      {
        "sha": "77326c64b0a1da05ce80e9ccd389f72677d91e4d",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n+#include \"memusage.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n@@ -48,6 +49,8 @@ class COutPoint\n     }\n \n     std::string ToString() const;\n+\n+    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /** An input of a transaction.  It contains the location of the previous\n@@ -96,6 +99,8 @@ class CTxIn\n     }\n \n     std::string ToString() const;\n+\n+    size_t DynamicMemoryUsage() const { return scriptSig.DynamicMemoryUsage(); }\n };\n \n /** An output of a transaction.  It contains the public key that the next input\n@@ -166,6 +171,8 @@ class CTxOut\n     }\n \n     std::string ToString() const;\n+\n+    size_t DynamicMemoryUsage() const { return scriptPubKey.DynamicMemoryUsage(); }\n };\n \n struct CMutableTransaction;\n@@ -249,6 +256,8 @@ class CTransaction\n     }\n \n     std::string ToString() const;\n+\n+    size_t DynamicMemoryUsage() const;\n };\n \n /** A mutable version of CTransaction. */"
      },
      {
        "sha": "c2de6cb244fe842bc156b302e6add73df184b72f",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -758,6 +758,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"size\\\": xxxxx                (numeric) Current tx count\\n\"\n             \"  \\\"bytes\\\": xxxxx               (numeric) Sum of all tx sizes\\n\"\n+            \"  \\\"usage\\\": xxxxx               (numeric) Total memory usage for the mempool\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getmempoolinfo\", \"\")\n@@ -767,6 +768,7 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     UniValue ret(UniValue::VOBJ);\n     ret.push_back(Pair(\"size\", (int64_t) mempool.size()));\n     ret.push_back(Pair(\"bytes\", (int64_t) mempool.GetTotalTxSize()));\n+    ret.push_back(Pair(\"usage\", (int64_t) mempool.DynamicMemoryUsage()));\n \n     return ret;\n }"
      },
      {
        "sha": "b1d2ceeb9f7d5bac9407fe43635873bfb357dcd8",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -260,3 +260,8 @@ std::string CScript::ToString() const\n     }\n     return str;\n }\n+\n+size_t CScript::DynamicMemoryUsage() const\n+{\n+    return memusage::DynamicUsage(*(static_cast<const std::vector<unsigned char>*>(this)));\n+}"
      },
      {
        "sha": "aea34d05f403b17f20b82837b0bac36d8bf5ecaa",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_SCRIPT_H\n #define BITCOIN_SCRIPT_SCRIPT_H\n \n+#include \"memusage.h\"\n #include \"crypto/common.h\"\n \n #include <assert.h>\n@@ -607,6 +608,8 @@ class CScript : public std::vector<unsigned char>\n         // The default std::vector::clear() does not release memory.\n         std::vector<unsigned char>().swap(*this);\n     }\n+\n+    size_t DynamicMemoryUsage() const;\n };\n \n class CReserveScript"
      },
      {
        "sha": "4caa5fc821b93c44fcca0d77a18f0dc0d2f2ecc7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -18,7 +18,7 @@\n using namespace std;\n \n CTxMemPoolEntry::CTxMemPoolEntry():\n-    nFee(0), nTxSize(0), nModSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n+    nFee(0), nTxSize(0), nModSize(0), nUsageSize(0), nTime(0), dPriority(0.0), hadNoDependencies(false)\n {\n     nHeight = MEMPOOL_HEIGHT;\n }\n@@ -31,6 +31,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n     nModSize = tx.CalculateModifiedSize(nTxSize);\n+    nUsageSize = tx.DynamicMemoryUsage();\n }\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n@@ -101,6 +102,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n         mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n+    cachedInnerUsage += entry.DynamicMemoryUsage();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n     return true;\n@@ -146,6 +148,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n             removed.push_back(tx);\n             totalTxSize -= mapTx[hash].GetTxSize();\n+            cachedInnerUsage -= mapTx[hash].DynamicMemoryUsage();\n             mapTx.erase(hash);\n             nTransactionsUpdated++;\n             minerPolicyEstimator->removeTx(hash);\n@@ -226,6 +229,7 @@ void CTxMemPool::clear()\n     mapTx.clear();\n     mapNextTx.clear();\n     totalTxSize = 0;\n+    cachedInnerUsage = 0;\n     ++nTransactionsUpdated;\n }\n \n@@ -237,6 +241,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());\n \n     uint64_t checkTotal = 0;\n+    uint64_t innerUsage = 0;\n \n     CCoinsViewCache mempoolDuplicate(const_cast<CCoinsViewCache*>(pcoins));\n \n@@ -245,6 +250,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         unsigned int i = 0;\n         checkTotal += it->second.GetTxSize();\n+        innerUsage += it->second.DynamicMemoryUsage();\n         const CTransaction& tx = it->second.GetTx();\n         bool fDependsWait = false;\n         BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n@@ -299,6 +305,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     }\n \n     assert(totalTxSize == checkTotal);\n+    assert(innerUsage == cachedInnerUsage);\n }\n \n void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n@@ -419,3 +426,8 @@ bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n bool CCoinsViewMemPool::HaveCoins(const uint256 &txid) const {\n     return mempool.exists(txid) || base->HaveCoins(txid);\n }\n+\n+size_t CTxMemPool::DynamicMemoryUsage() const {\n+    LOCK(cs);\n+    return memusage::DynamicUsage(mapTx) + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + cachedInnerUsage;\n+}"
      },
      {
        "sha": "ea36ce1ad53e53bc19cbc93567ae86ae4afe4d78",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5098c47b2430ded299c21620527ebd0544fe51e2/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5098c47b2430ded299c21620527ebd0544fe51e2/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5098c47b2430ded299c21620527ebd0544fe51e2",
        "patch": "@@ -40,6 +40,7 @@ class CTxMemPoolEntry\n     CAmount nFee; //! Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; //! ... and avoid recomputing tx size\n     size_t nModSize; //! ... and modified size for priority\n+    size_t nUsageSize; //! ... and total memory usage\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n     unsigned int nHeight; //! Chain height when entering the mempool\n@@ -58,6 +59,7 @@ class CTxMemPoolEntry\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }\n+    size_t DynamicMemoryUsage() const { return nUsageSize; }\n };\n \n class CBlockPolicyEstimator;\n@@ -73,6 +75,7 @@ class CInPoint\n     CInPoint(const CTransaction* ptxIn, uint32_t nIn) { ptx = ptxIn; n = nIn; }\n     void SetNull() { ptx = NULL; n = (uint32_t) -1; }\n     bool IsNull() const { return (ptx == NULL && n == (uint32_t) -1); }\n+    size_t DynamicMemoryUsage() const { return 0; }\n };\n \n /**\n@@ -93,6 +96,7 @@ class CTxMemPool\n     CBlockPolicyEstimator* minerPolicyEstimator;\n \n     uint64_t totalTxSize; //! sum of all mempool tx' byte sizes\n+    uint64_t cachedInnerUsage; //! sum of dynamic memory usage of all the map elements (NOT the maps themselves)\n \n public:\n     mutable CCriticalSection cs;\n@@ -139,6 +143,7 @@ class CTxMemPool\n         LOCK(cs);\n         return mapTx.size();\n     }\n+\n     uint64_t GetTotalTxSize()\n     {\n         LOCK(cs);\n@@ -162,6 +167,8 @@ class CTxMemPool\n     /** Write/Read estimates to disk */\n     bool WriteFeeEstimates(CAutoFile& fileout) const;\n     bool ReadFeeEstimates(CAutoFile& filein);\n+\n+    size_t DynamicMemoryUsage() const;\n };\n \n /** "
      }
    ]
  }
]