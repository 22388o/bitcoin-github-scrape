[
  {
    "sha": "fb6a932e9bde3db424c7805452bc3abf603a20f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjZhOTMyZTliZGUzZGI0MjRjNzgwNTQ1MmJjM2FiZjYwM2EyMGYx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T18:01:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T19:20:25Z"
      },
      "message": "Move LoadChainTip into CChainState",
      "tree": {
        "sha": "abda46b0cf5c95535f8b8036fd3bf83596f2ab76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/abda46b0cf5c95535f8b8036fd3bf83596f2ab76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb6a932e9bde3db424c7805452bc3abf603a20f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6a932e9bde3db424c7805452bc3abf603a20f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6a932e9bde3db424c7805452bc3abf603a20f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6a932e9bde3db424c7805452bc3abf603a20f1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b648974cc35a65df87c2801f5c09dd13d3e507f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b648974cc35a65df87c2801f5c09dd13d3e507f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b648974cc35a65df87c2801f5c09dd13d3e507f7"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3fbce80666589191e3ab29e2f4873620e94de832",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb6a932e9bde3db424c7805452bc3abf603a20f1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb6a932e9bde3db424c7805452bc3abf603a20f1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fb6a932e9bde3db424c7805452bc3abf603a20f1",
        "patch": "@@ -173,8 +173,7 @@ class CChainState {\n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n     bool RewindBlockIndex(const CChainParams& params);\n     bool LoadGenesisBlock(const CChainParams& chainparams);\n-\n-    void PruneBlockIndexCandidates();\n+    bool LoadChainTip(const CChainParams& chainparams);\n \n     void UnloadBlockIndex();\n \n@@ -191,6 +190,7 @@ class CChainState {\n     CBlockIndex* FindMostWorkChain();\n     bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBlockIndex *pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n \n+    void PruneBlockIndexCandidates();\n \n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params);\n } g_chainstate;\n@@ -3838,7 +3838,7 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n     return true;\n }\n \n-bool LoadChainTip(const CChainParams& chainparams)\n+bool CChainState::LoadChainTip(const CChainParams& chainparams)\n {\n     AssertLockHeld(cs_main);\n \n@@ -3849,26 +3849,30 @@ bool LoadChainTip(const CChainParams& chainparams)\n         // that we always have a chainActive.Tip() when we return.\n         LogPrintf(\"%s: Connecting genesis block...\\n\", __func__);\n         CValidationState state;\n-        if (!ActivateBestChain(state, chainparams)) {\n+        if (!ActivateBestChain(state, chainparams, std::shared_ptr<const CBlock>())) {\n             return false;\n         }\n     }\n \n     // Load pointer to end of best chain\n-    CBlockIndex* pindex = LookupBlockIndex(pcoinsTip->GetBestBlock());\n-    if (!pindex) {\n+    auto it = mapBlockIndex.find(pcoinsTip->GetBestBlock());\n+    if (it == mapBlockIndex.end()) {\n         return false;\n     }\n-    chainActive.SetTip(pindex);\n+    chainActive.SetTip(it->second);\n \n-    g_chainstate.PruneBlockIndexCandidates();\n+    PruneBlockIndexCandidates();\n \n     LogPrintf(\"Loaded best chain: hashBestChain=%s height=%d date=%s progress=%f\\n\",\n         chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(),\n         FormatISO8601DateTime(chainActive.Tip()->GetBlockTime()),\n         GuessVerificationProgress(chainparams.TxData(), chainActive.Tip()));\n     return true;\n }\n+bool LoadChainTip(const CChainParams& chainparams)\n+{\n+    return g_chainstate.LoadChainTip(chainparams);\n+}\n \n CVerifyDB::CVerifyDB()\n {"
      }
    ]
  },
  {
    "sha": "4de9915feacb32072ddfcf588bcc4c4bfd08982e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGU5OTE1ZmVhY2IzMjA3MmRkZmNmNTg4YmNjNGM0YmZkMDg5ODJl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T17:53:01Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T19:20:25Z"
      },
      "message": "Make CBlockIndex* arguments to validation.h functions const",
      "tree": {
        "sha": "b9ac8516f4cf3c0f3d919cde996b2626f849a344",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9ac8516f4cf3c0f3d919cde996b2626f849a344"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4de9915feacb32072ddfcf588bcc4c4bfd08982e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de9915feacb32072ddfcf588bcc4c4bfd08982e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4de9915feacb32072ddfcf588bcc4c4bfd08982e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de9915feacb32072ddfcf588bcc4c4bfd08982e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb6a932e9bde3db424c7805452bc3abf603a20f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb6a932e9bde3db424c7805452bc3abf603a20f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb6a932e9bde3db424c7805452bc3abf603a20f1"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 23,
      "deletions": 19
    },
    "files": [
      {
        "sha": "d3b710fb702ba3564739408d8ab561ea82462d8a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de9915feacb32072ddfcf588bcc4c4bfd08982e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de9915feacb32072ddfcf588bcc4c4bfd08982e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4de9915feacb32072ddfcf588bcc4c4bfd08982e",
        "patch": "@@ -166,9 +166,9 @@ class CChainState {\n     bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n \n     // Manual block validity manipulation:\n-    bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n-    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n-    bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+    bool PreciousBlock(CValidationState& state, const CChainParams& params, const CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, const CBlockIndex *pindex);\n+    bool ResetBlockFailureFlags(const CBlockIndex *pindex);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n     bool RewindBlockIndex(const CChainParams& params);\n@@ -999,9 +999,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n  * Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock.\n  * If blockIndex is provided, the transaction is fetched from the corresponding block.\n  */\n-bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, CBlockIndex* blockIndex)\n+bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus::Params& consensusParams, uint256& hashBlock, bool fAllowSlow, const CBlockIndex* blockIndex)\n {\n-    CBlockIndex* pindexSlow = blockIndex;\n+    const CBlockIndex* pindexSlow = blockIndex;\n \n     LOCK(cs_main);\n \n@@ -2692,8 +2692,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     return g_chainstate.ActivateBestChain(state, chainparams, std::move(pblock));\n }\n \n-bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n+bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& params, const CBlockIndex *pindex_const)\n {\n+    CBlockIndex *pindex = const_cast<CBlockIndex*>(pindex_const);\n     {\n         LOCK(cs_main);\n         if (pindex->nChainWork < chainActive.Tip()->nChainWork) {\n@@ -2720,13 +2721,14 @@ bool CChainState::PreciousBlock(CValidationState& state, const CChainParams& par\n \n     return ActivateBestChain(state, params, std::shared_ptr<const CBlock>());\n }\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) {\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, const CBlockIndex *pindex) {\n     return g_chainstate.PreciousBlock(state, params, pindex);\n }\n \n-bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n+bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, const CBlockIndex *pindex_const)\n {\n     AssertLockHeld(cs_main);\n+    CBlockIndex *pindex = const_cast<CBlockIndex*>(pindex_const);\n \n     // We first disconnect backwards and then mark the blocks as invalid.\n     // This prevents a case where pruned nodes may fail to invalidateblock\n@@ -2787,12 +2789,14 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     }\n     return true;\n }\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, const CBlockIndex *pindex) {\n     return g_chainstate.InvalidateBlock(state, chainparams, pindex);\n }\n \n-bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n+bool CChainState::ResetBlockFailureFlags(const CBlockIndex *pindex_const) {\n     AssertLockHeld(cs_main);\n+    CBlockIndex *pindex = const_cast<CBlockIndex*>(pindex_const);\n+\n \n     int nHeight = pindex->nHeight;\n \n@@ -2824,7 +2828,7 @@ bool CChainState::ResetBlockFailureFlags(CBlockIndex *pindex) {\n     }\n     return true;\n }\n-bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n+bool ResetBlockFailureFlags(const CBlockIndex *pindex) {\n     return g_chainstate.ResetBlockFailureFlags(pindex);\n }\n \n@@ -3159,7 +3163,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n         // Don't accept any forks from the main chain prior to last checkpoint.\n         // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n         // MapBlockIndex.\n-        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(params.Checkpoints());\n+        const CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(params.Checkpoints());\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n             return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight), REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n     }\n@@ -3483,14 +3487,14 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n     CCoinsViewCache viewNew(pcoinsTip.get());\n     uint256 block_hash(block.GetHash());\n     CBlockIndex indexDummy(block);\n-    indexDummy.pprev = pindexPrev;\n+    indexDummy.pprev = const_cast<CBlockIndex*>(pindexPrev);\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n     indexDummy.phashBlock = &block_hash;\n "
      },
      {
        "sha": "10094e1671470440171a3078c41dfc81ec6daf70",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4de9915feacb32072ddfcf588bcc4c4bfd08982e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4de9915feacb32072ddfcf588bcc4c4bfd08982e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4de9915feacb32072ddfcf588bcc4c4bfd08982e",
        "patch": "@@ -275,7 +275,7 @@ void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n+bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, const CBlockIndex* blockIndex = nullptr);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n@@ -403,7 +403,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, const CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n@@ -439,13 +439,13 @@ inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n /** Mark a block as precious and reorganize. */\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, const CBlockIndex *pindex);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, const CBlockIndex *pindex);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+bool ResetBlockFailureFlags(const CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain& chainActive;"
      }
    ]
  },
  {
    "sha": "2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWNjMGIwZDAzYzNlZjBiYzk3OGU1OTc2N2M4NjI3MGU5ODI0ZDIw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:04Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:04Z"
      },
      "message": "scripted-diff: constify CBlockIndex* outside of validation\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/\\(const \\)*CBlockIndex\\( \\)*\\*\\( \\)*/const CBlockIndex\\* /g\" src/checkpoints.h src/checkpoints.cpp src/rest.cpp src/rpc/*.cpp src/wallet/*.h src/wallet/*.cpp src/init.cpp src/qt/clientmodel.cpp src/miner.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "4c5662fd87ade8d6eb99710ad924b8ad9e692f7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c5662fd87ade8d6eb99710ad924b8ad9e692f7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4de9915feacb32072ddfcf588bcc4c4bfd08982e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4de9915feacb32072ddfcf588bcc4c4bfd08982e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4de9915feacb32072ddfcf588bcc4c4bfd08982e"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 66,
      "deletions": 66
    },
    "files": [
      {
        "sha": "4acfc05a6f87e7314f0de9e6dd615bbcfa457d5a",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -14,14 +14,14 @@\n \n namespace Checkpoints {\n \n-    CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n+    const CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n         for (const MapCheckpoints::value_type& i : reverse_iterate(checkpoints))\n         {\n             const uint256& hash = i.second;\n-            CBlockIndex* pindex = LookupBlockIndex(hash);\n+            const CBlockIndex* pindex = LookupBlockIndex(hash);\n             if (pindex) {\n                 return pindex;\n             }"
      },
      {
        "sha": "89610d74e0b38c0f83f1cce35a01fa4784be7def",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -19,8 +19,8 @@ struct CCheckpointData;\n namespace Checkpoints\n {\n \n-//! Returns last CBlockIndex* that is a checkpoint\n-CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n+//! Returns last const CBlockIndex* that is a checkpoint\n+const CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n \n } //namespace Checkpoints\n "
      },
      {
        "sha": "9c992c43d4005dd2db0e464351165043ea47e7ef",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -538,7 +538,7 @@ std::string LicenseInfo()\n            \"\\n\";\n }\n \n-static void BlockNotifyCallback(bool initialSync, const CBlockIndex *pBlockIndex)\n+static void BlockNotifyCallback(bool initialSync, const CBlockIndex* pBlockIndex)\n {\n     if (initialSync || !pBlockIndex)\n         return;\n@@ -555,7 +555,7 @@ static bool fHaveGenesis = false;\n static CWaitableCriticalSection cs_GenesisWait;\n static CConditionVariable condvar_GenesisWait;\n \n-static void BlockNotifyGenesisWait(bool, const CBlockIndex *pBlockIndex)\n+static void BlockNotifyGenesisWait(bool, const CBlockIndex* pBlockIndex)\n {\n     if (pBlockIndex != nullptr) {\n         {\n@@ -1527,7 +1527,7 @@ bool AppInitMain()\n                             MIN_BLOCKS_TO_KEEP);\n                     }\n \n-                    CBlockIndex* tip = chainActive.Tip();\n+                    const CBlockIndex* tip = chainActive.Tip();\n                     RPCNotifyBlockChange(true, tip);\n                     if (tip && tip->nTime > GetAdjustedTime() + 2 * 60 * 60) {\n                         strLoadError = _(\"The block database contains a block which appears to be from the future. \""
      },
      {
        "sha": "8b371dea303b797b055a63462b46681fdf48263d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -115,7 +115,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vTxSigOpsCost.push_back(-1); // updated at end\n \n     LOCK2(cs_main, mempool.cs);\n-    CBlockIndex* pindexPrev = chainActive.Tip();\n+    const CBlockIndex* pindexPrev = chainActive.Tip();\n     assert(pindexPrev != nullptr);\n     nHeight = pindexPrev->nHeight + 1;\n "
      },
      {
        "sha": "dfb14ec7fc1bea4717bbc47690f2cd8025737a5a",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -135,9 +135,9 @@ size_t ClientModel::getMempoolDynamicUsage() const\n     return mempool.DynamicMemoryUsage();\n }\n \n-double ClientModel::getVerificationProgress(const CBlockIndex *tipIn) const\n+double ClientModel::getVerificationProgress(const CBlockIndex* tipIn) const\n {\n-    CBlockIndex *tip = const_cast<CBlockIndex *>(tipIn);\n+    const CBlockIndex* tip = const_cast<const CBlockIndex* >(tipIn);\n     LOCK(cs_main);\n     if (!tip)\n     {\n@@ -285,7 +285,7 @@ static void BannedListChanged(ClientModel *clientmodel)\n     QMetaObject::invokeMethod(clientmodel, \"updateBanlist\", Qt::QueuedConnection);\n }\n \n-static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex *pIndex, bool fHeader)\n+static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CBlockIndex* pIndex, bool fHeader)\n {\n     // lock free async UI updates in case we have a new block tip\n     // during initial sync, only update the UI if the last update"
      },
      {
        "sha": "45354006d6d970eefefebe2623d9d1834253a58d",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -143,7 +143,7 @@ static bool rest_headers(HTTPRequest* req,\n     if (!ParseHashStr(hashStr, hash))\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n-    std::vector<const CBlockIndex *> headers;\n+    std::vector<const CBlockIndex* > headers;\n     headers.reserve(count);\n     {\n         LOCK(cs_main);\n@@ -157,7 +157,7 @@ static bool rest_headers(HTTPRequest* req,\n     }\n \n     CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n-    for (const CBlockIndex *pindex : headers) {\n+    for (const CBlockIndex* pindex : headers) {\n         ssHeader << pindex->GetBlockHeader();\n     }\n \n@@ -179,7 +179,7 @@ static bool rest_headers(HTTPRequest* req,\n         UniValue jsonHeaders(UniValue::VARR);\n         {\n             LOCK(cs_main);\n-            for (const CBlockIndex *pindex : headers) {\n+            for (const CBlockIndex* pindex : headers) {\n                 jsonHeaders.push_back(blockheaderToJSON(pindex));\n             }\n         }\n@@ -208,7 +208,7 @@ static bool rest_block(HTTPRequest* req,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + hashStr);\n \n     CBlock block;\n-    CBlockIndex* pblockindex = nullptr;\n+    const CBlockIndex* pblockindex = nullptr;\n     {\n         LOCK(cs_main);\n         pblockindex = LookupBlockIndex(hash);"
      },
      {
        "sha": "faef276adc59a09ee67a9250bb45ee6c95a056e1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -107,7 +107,7 @@ UniValue blockheaderToJSON(const CBlockIndex* blockindex)\n \n     if (blockindex->pprev)\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n-    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    const CBlockIndex* pnext = chainActive.Next(blockindex);\n     if (pnext)\n         result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n@@ -152,7 +152,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n \n     if (blockindex->pprev)\n         result.pushKV(\"previousblockhash\", blockindex->pprev->GetBlockHash().GetHex());\n-    CBlockIndex *pnext = chainActive.Next(blockindex);\n+    const CBlockIndex* pnext = chainActive.Next(blockindex);\n     if (pnext)\n         result.pushKV(\"nextblockhash\", pnext->GetBlockHash().GetHex());\n     return result;\n@@ -192,7 +192,7 @@ UniValue getbestblockhash(const JSONRPCRequest& request)\n     return chainActive.Tip()->GetBlockHash().GetHex();\n }\n \n-void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n+void RPCNotifyBlockChange(bool ibd, const CBlockIndex* pindex)\n {\n     if(pindex) {\n         std::lock_guard<std::mutex> lock(cs_blockchange);\n@@ -662,7 +662,7 @@ UniValue getblockhash(const JSONRPCRequest& request)\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n \n-    CBlockIndex* pblockindex = chainActive[nHeight];\n+    const CBlockIndex* pblockindex = chainActive[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n@@ -914,7 +914,7 @@ UniValue pruneblockchain(const JSONRPCRequest& request)\n     // too low to be a block time (corresponds to timestamp from Sep 2001).\n     if (heightParam > 1000000000) {\n         // Add a 2 hour buffer to include blocks which might have had old timestamps\n-        CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW);\n+        const CBlockIndex* pindex = chainActive.FindEarliestAtLeast(heightParam - TIMESTAMP_WINDOW);\n         if (!pindex) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Could not find block with at least the specified timestamp.\");\n         }\n@@ -1086,7 +1086,7 @@ UniValue verifychain(const JSONRPCRequest& request)\n }\n \n /** Implementation of IsSuperMajority with better feedback */\n-static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static UniValue SoftForkMajorityDesc(int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n     bool activated = false;\n@@ -1106,7 +1106,7 @@ static UniValue SoftForkMajorityDesc(int version, CBlockIndex* pindex, const Con\n     return rv;\n }\n \n-static UniValue SoftForkDesc(const std::string &name, int version, CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static UniValue SoftForkDesc(const std::string &name, int version, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"id\", name);\n@@ -1225,7 +1225,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n     obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n-        CBlockIndex* block = chainActive.Tip();\n+        const CBlockIndex* block = chainActive.Tip();\n         assert(block);\n         while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n             block = block->pprev;\n@@ -1242,7 +1242,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     }\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n-    CBlockIndex* tip = chainActive.Tip();\n+    const CBlockIndex* tip = chainActive.Tip();\n     UniValue softforks(UniValue::VARR);\n     UniValue bip9_softforks(UniValue::VOBJ);\n     softforks.push_back(SoftForkDesc(\"bip34\", 2, tip, consensusParams));\n@@ -1315,19 +1315,19 @@ UniValue getchaintips(const JSONRPCRequest& request)\n      *  - Iterate through the orphan blocks. If the block isn't pointed to by another orphan, it is a chain tip.\n      *  - add chainActive.Tip()\n      */\n-    std::set<const CBlockIndex*, CompareBlocksByHeight> setTips;\n-    std::set<const CBlockIndex*> setOrphans;\n-    std::set<const CBlockIndex*> setPrevs;\n+    std::set<const CBlockIndex* , CompareBlocksByHeight> setTips;\n+    std::set<const CBlockIndex* > setOrphans;\n+    std::set<const CBlockIndex* > setPrevs;\n \n-    for (const std::pair<const uint256, CBlockIndex*>& item : mapBlockIndex)\n+    for (const std::pair<const uint256, const CBlockIndex* >& item : mapBlockIndex)\n     {\n         if (!chainActive.Contains(item.second)) {\n             setOrphans.insert(item.second);\n             setPrevs.insert(item.second->pprev);\n         }\n     }\n \n-    for (std::set<const CBlockIndex*>::iterator it = setOrphans.begin(); it != setOrphans.end(); ++it)\n+    for (std::set<const CBlockIndex* >::iterator it = setOrphans.begin(); it != setOrphans.end(); ++it)\n     {\n         if (setPrevs.erase(*it) == 0) {\n             setTips.insert(*it);\n@@ -1431,7 +1431,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n \n     std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n-    CBlockIndex* pblockindex;\n+    const CBlockIndex* pblockindex;\n \n     {\n         LOCK(cs_main);\n@@ -1471,7 +1471,7 @@ UniValue invalidateblock(const JSONRPCRequest& request)\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        const CBlockIndex* pblockindex = LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n@@ -1510,7 +1510,7 @@ UniValue reconsiderblock(const JSONRPCRequest& request)\n \n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        const CBlockIndex* pblockindex = LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }"
      },
      {
        "sha": "2f941e37238d78f584f6cefb5d35de98ee2ee795",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -45,7 +45,7 @@ unsigned int ParseConfirmTarget(const UniValue& value)\n  * If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n  */\n UniValue GetNetworkHashPS(int lookup, int height) {\n-    CBlockIndex *pb = chainActive.Tip();\n+    const CBlockIndex* pb = chainActive.Tip();\n \n     if (height >= 0 && height < chainActive.Height())\n         pb = chainActive[height];\n@@ -61,7 +61,7 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     if (lookup > pb->nHeight)\n         lookup = pb->nHeight;\n \n-    CBlockIndex *pb0 = pb;\n+    const CBlockIndex* pb0 = pb;\n     int64_t minTime = pb0->GetBlockTime();\n     int64_t maxTime = minTime;\n     for (int i = 0; i < lookup; i++) {\n@@ -405,7 +405,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n                 return \"duplicate-inconclusive\";\n             }\n \n-            CBlockIndex* const pindexPrev = chainActive.Tip();\n+            const CBlockIndex* const pindexPrev = chainActive.Tip();\n             // TestBlockValidity only supports blocks built on the current Tip\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n@@ -496,7 +496,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     bool fSupportsSegwit = setClientRules.find(segwit_info.name) != setClientRules.end();\n \n     // Update block\n-    static CBlockIndex* pindexPrev;\n+    static const CBlockIndex* pindexPrev;\n     static int64_t nStart;\n     static std::unique_ptr<CBlockTemplate> pblocktemplate;\n     // Cache whether the last invocation was with segwit support, to avoid returning\n@@ -511,7 +511,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-        CBlockIndex* pindexPrevNew = chainActive.Tip();\n+        const CBlockIndex* pindexPrevNew = chainActive.Tip();\n         nStart = GetTime();\n         fLastTemplateSupportsSegwit = fSupportsSegwit;\n "
      },
      {
        "sha": "e56735056a5f1a485ae7483aa838738e6c6ce8c5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -48,7 +48,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n \n     if (!hashBlock.IsNull()) {\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n-        CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n+        const CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n         if (pindex) {\n             if (chainActive.Contains(pindex)) {\n                 entry.pushKV(\"confirmations\", 1 + chainActive.Height() - pindex->nHeight);\n@@ -144,7 +144,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     bool in_active_chain = true;\n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n-    CBlockIndex* blockindex = nullptr;\n+    const CBlockIndex* blockindex = nullptr;\n \n     if (hash == Params().GenesisBlock().hashMerkleRoot) {\n         // Special exception for the genesis block coinbase transaction\n@@ -230,7 +230,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    CBlockIndex* pblockindex = nullptr;\n+    const CBlockIndex* pblockindex = nullptr;\n \n     uint256 hashBlock;\n     if (!request.params[1].isNull())"
      },
      {
        "sha": "6da6be92fdebd8eeae62699fb5ae1c95b602c866",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -2102,7 +2102,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         paltindex = paltindex->pprev;\n     }\n \n-    CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n+    const CBlockIndex* pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n     uint256 lastblock = pblockLast ? pblockLast->GetBlockHash() : uint256();\n \n     UniValue ret(UniValue::VOBJ);\n@@ -3554,9 +3554,9 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n \n-    CBlockIndex *pindexStart = nullptr;\n-    CBlockIndex *pindexStop = nullptr;\n-    CBlockIndex *pChainTip = nullptr;\n+    const CBlockIndex* pindexStart = nullptr;\n+    const CBlockIndex* pindexStop = nullptr;\n+    const CBlockIndex* pChainTip = nullptr;\n     {\n         LOCK(cs_main);\n         pindexStart = chainActive.Genesis();\n@@ -3583,7 +3583,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n     // We can't rescan beyond non-pruned blocks, stop and throw an error\n     if (fPruneMode) {\n         LOCK(cs_main);\n-        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n+        const CBlockIndex* block = pindexStop ? pindexStop : pChainTip;\n         while (block && block->nHeight >= pindexStart->nHeight) {\n             if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n@@ -3592,7 +3592,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n     }\n \n-    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n+    const CBlockIndex* stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n     if (!stopBlock) {\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");"
      },
      {
        "sha": "d3c511743887bb9876686acecbfc85627e5dc74e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -1137,7 +1137,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     LOCK2(cs_main, cs_wallet);\n \n     int conflictconfirms = 0;\n-    CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n+    const CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n     if (pindex && chainActive.Contains(pindex)) {\n         conflictconfirms = -(chainActive.Height() - pindex->nHeight + 1);\n     }\n@@ -1191,7 +1191,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex *pindex, int posInBlock) {\n+void CWallet::SyncTransaction(const CTransactionRef& ptx, const CBlockIndex* pindex, int posInBlock) {\n     const CTransaction& tx = *ptx;\n \n     if (!AddToWalletIfInvolvingMe(ptx, pindex, posInBlock, true))\n@@ -1226,7 +1226,7 @@ void CWallet::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n     }\n }\n \n-void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n+void CWallet::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n     LOCK2(cs_main, cs_wallet);\n     // TODO: Temporarily ensure that mempool removals are notified before\n     // connected transactions.  This shouldn't matter, but the abandoned\n@@ -1673,7 +1673,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* startBlock = nullptr;\n+    const CBlockIndex* startBlock = nullptr;\n     {\n         LOCK(cs_main);\n         startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n@@ -1705,7 +1705,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& r\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n+const CBlockIndex* CWallet::ScanForWalletTransactions(const CBlockIndex* pindexStart, const CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n@@ -1715,12 +1715,12 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n         assert(pindexStop->nHeight >= pindexStart->nHeight);\n     }\n \n-    CBlockIndex* pindex = pindexStart;\n-    CBlockIndex* ret = nullptr;\n+    const CBlockIndex* pindex = pindexStart;\n+    const CBlockIndex* ret = nullptr;\n     {\n         fAbortRescan = false;\n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        CBlockIndex* tip = nullptr;\n+        const CBlockIndex* tip = nullptr;\n         double dProgressStart;\n         double dProgressTip;\n         {\n@@ -3763,8 +3763,8 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n     }\n \n     // map in which we'll infer heights of other keys\n-    CBlockIndex *pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n-    std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n+    const CBlockIndex* pindexMax = chainActive[std::max(0, chainActive.Height() - 144)]; // the tip can be reorganized; use a 144-block safety margin\n+    std::map<CKeyID, const CBlockIndex* > mapKeyFirstBlock;\n     for (const CKeyID &keyid : GetKeys()) {\n         if (mapKeyBirth.count(keyid) == 0)\n             mapKeyFirstBlock[keyid] = pindexMax;\n@@ -3779,7 +3779,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n     for (const auto& entry : mapWallet) {\n         // iterate over all wallet transactions...\n         const CWalletTx &wtx = entry.second;\n-        CBlockIndex* pindex = LookupBlockIndex(wtx.hashBlock);\n+        const CBlockIndex* pindex = LookupBlockIndex(wtx.hashBlock);\n         if (pindex && chainActive.Contains(pindex)) {\n             // ... which are already in a block\n             int nHeight = pindex->nHeight;\n@@ -3788,7 +3788,7 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n                 CAffectedKeysVisitor(*this, vAffected).Process(txout.scriptPubKey);\n                 for (const CKeyID &keyid : vAffected) {\n                     // ... and all their affected keys\n-                    std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n+                    std::map<CKeyID, const CBlockIndex* >::iterator rit = mapKeyFirstBlock.find(keyid);\n                     if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n                         rit->second = pindex;\n                 }\n@@ -4043,7 +4043,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n \n     LOCK(cs_main);\n \n-    CBlockIndex *pindexRescan = chainActive.Genesis();\n+    const CBlockIndex* pindexRescan = chainActive.Genesis();\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n         CWalletDB walletdb(*walletInstance->dbw);\n@@ -4062,7 +4062,7 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         // or if he ran -disablewallet for a longer time, then decided to re-enable\n         if (fPruneMode)\n         {\n-            CBlockIndex *block = chainActive.Tip();\n+            const CBlockIndex* block = chainActive.Tip();\n             while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n                 block = block->pprev;\n \n@@ -4186,7 +4186,7 @@ int CMerkleTx::GetDepthInMainChain(const CBlockIndex* &pindexRet) const\n     AssertLockHeld(cs_main);\n \n     // Find the block it claims to be in\n-    CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n+    const CBlockIndex* pindex = LookupBlockIndex(hashBlock);\n     if (!pindex || !chainActive.Contains(pindex))\n         return 0;\n "
      },
      {
        "sha": "0729de5761d66411a925acfad582a407ca1a46cf",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ecc0b0d03c3ef0bc978e59767c86270e9824d20/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "patch": "@@ -253,8 +253,8 @@ class CMerkleTx\n      * >=1 : this many blocks deep in the main chain\n      */\n     int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n+    int GetDepthInMainChain() const { const CBlockIndex* pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const { const CBlockIndex* pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n@@ -694,7 +694,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected.\n      * Should be called with pindexBlock and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindex = nullptr, int posInBlock = 0);\n+    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex* pindex = nullptr, int posInBlock = 0);\n \n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n@@ -934,11 +934,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n-    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n+    void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n+    const CBlockIndex* ScanForWalletTransactions(const CBlockIndex* pindexStart, const CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;"
      }
    ]
  },
  {
    "sha": "98af120a4618935df5b7f5ccaf084745340f0c51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGFmMTIwYTQ2MTg5MzVkZjViN2Y1Y2NhZjA4NDc0NTM0MGYwYzUx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:28Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:57Z"
      },
      "message": "Constify CBlockIndex*s in skiplist_tests where possible",
      "tree": {
        "sha": "23a355523d4b7759039b9b53cf4f4008ebf08e25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23a355523d4b7759039b9b53cf4f4008ebf08e25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98af120a4618935df5b7f5ccaf084745340f0c51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98af120a4618935df5b7f5ccaf084745340f0c51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98af120a4618935df5b7f5ccaf084745340f0c51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98af120a4618935df5b7f5ccaf084745340f0c51/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ecc0b0d03c3ef0bc978e59767c86270e9824d20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ecc0b0d03c3ef0bc978e59767c86270e9824d20"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "10264d1d4d9076d35d49e72f8e1345be341a006d",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98af120a4618935df5b7f5ccaf084745340f0c51/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98af120a4618935df5b7f5ccaf084745340f0c51/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=98af120a4618935df5b7f5ccaf084745340f0c51",
        "patch": "@@ -78,7 +78,7 @@ BOOST_AUTO_TEST_CASE(getlocator_test)\n     // Test 100 random starting points for locators.\n     for (int n=0; n<100; n++) {\n         int r = InsecureRandRange(150000);\n-        CBlockIndex* tip = (r < 100000) ? &vBlocksMain[r] : &vBlocksSide[r - 100000];\n+        const CBlockIndex* tip = (r < 100000) ? &vBlocksMain[r] : &vBlocksSide[r - 100000];\n         CBlockLocator locator = chain.GetLocator(tip);\n \n         // The first result must be the block itself, the last one must be genesis.\n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(findearliestatleast_test)\n         // Pick a random element in vBlocksMain.\n         int r = InsecureRandRange(vBlocksMain.size());\n         int64_t test_time = vBlocksMain[r].nTime;\n-        CBlockIndex *ret = chain.FindEarliestAtLeast(test_time);\n+        const CBlockIndex* ret = chain.FindEarliestAtLeast(test_time);\n         BOOST_CHECK(ret->nTimeMax >= test_time);\n         BOOST_CHECK((ret->pprev==nullptr) || ret->pprev->nTimeMax < test_time);\n         BOOST_CHECK(vBlocksMain[r].GetAncestor(ret->nHeight) == ret);"
      }
    ]
  },
  {
    "sha": "3cc6f5e0470fbe07883782461a60670b6ad3cac1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2M2ZjVlMDQ3MGZiZTA3ODgzNzgyNDYxYTYwNjcwYjZhZDNjYWMx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T19:18:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:57Z"
      },
      "message": "Remove now-useless const_cast in qt/clientmodel",
      "tree": {
        "sha": "9731d4458fd5a50a47abb396f7f9abc49c497b13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9731d4458fd5a50a47abb396f7f9abc49c497b13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cc6f5e0470fbe07883782461a60670b6ad3cac1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc6f5e0470fbe07883782461a60670b6ad3cac1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc6f5e0470fbe07883782461a60670b6ad3cac1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc6f5e0470fbe07883782461a60670b6ad3cac1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98af120a4618935df5b7f5ccaf084745340f0c51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98af120a4618935df5b7f5ccaf084745340f0c51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98af120a4618935df5b7f5ccaf084745340f0c51"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "19edced137e432c926e1f99e6a409e4967dc3368",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cc6f5e0470fbe07883782461a60670b6ad3cac1/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cc6f5e0470fbe07883782461a60670b6ad3cac1/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=3cc6f5e0470fbe07883782461a60670b6ad3cac1",
        "patch": "@@ -137,7 +137,7 @@ size_t ClientModel::getMempoolDynamicUsage() const\n \n double ClientModel::getVerificationProgress(const CBlockIndex* tipIn) const\n {\n-    const CBlockIndex* tip = const_cast<const CBlockIndex* >(tipIn);\n+    const CBlockIndex* tip = tipIn;\n     LOCK(cs_main);\n     if (!tip)\n     {"
      }
    ]
  },
  {
    "sha": "dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmVkMWVhM2NlZmIyMWM3NzcxMTdhOWZkYjE4ZGMwODM3MWU5YzNl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T18:54:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:57Z"
      },
      "message": "Make all CBlockIndex*es in validation.h const",
      "tree": {
        "sha": "e0182e6215354e5ee9489aea1136aeac18a7ef47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0182e6215354e5ee9489aea1136aeac18a7ef47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cc6f5e0470fbe07883782461a60670b6ad3cac1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cc6f5e0470fbe07883782461a60670b6ad3cac1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cc6f5e0470fbe07883782461a60670b6ad3cac1"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7c15a056eff9ed52bf3cf5ad1f9af70ee9400854",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
        "patch": "@@ -201,7 +201,7 @@ CCriticalSection cs_main;\n \n BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n CChain& chainActive = g_chainstate.chainActive;\n-CBlockIndex *pindexBestHeader = nullptr;\n+const CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;\n@@ -258,13 +258,13 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+const CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n {\n     AssertLockHeld(cs_main);\n \n     // Find the first block the caller has in the main chain\n     for (const uint256& hash : locator.vHave) {\n-        CBlockIndex* pindex = LookupBlockIndex(hash);\n+        const CBlockIndex* pindex = LookupBlockIndex(hash);\n         if (pindex) {\n             if (chain.Contains(pindex))\n                 return pindex;\n@@ -1316,7 +1316,7 @@ bool CScriptCheck::operator()() {\n int GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     LOCK(cs_main);\n-    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n+    const CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n \n@@ -2582,8 +2582,8 @@ bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainPar\n static void NotifyHeaderTip() {\n     bool fNotify = false;\n     bool fInitialBlockDownload = false;\n-    static CBlockIndex* pindexHeaderOld = nullptr;\n-    CBlockIndex* pindexHeader = nullptr;\n+    static const CBlockIndex* pindexHeaderOld = nullptr;\n+    const CBlockIndex* pindexHeader = nullptr;\n     {\n         LOCK(cs_main);\n         pindexHeader = pindexBestHeader;\n@@ -4327,7 +4327,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n                     }\n \n                     // process in case the block isn't known yet\n-                    CBlockIndex* pindex = LookupBlockIndex(hash);\n+                    const CBlockIndex* pindex = LookupBlockIndex(hash);\n                     if (!pindex || (pindex->nStatus & BLOCK_HAVE_DATA) == 0) {\n                       CValidationState state;\n                       if (g_chainstate.AcceptBlock(pblock, state, chainparams, nullptr, true, dbp, nullptr)) {"
      },
      {
        "sha": "8c84a9cd24abab5397106d523526a86891f179b3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
        "patch": "@@ -189,7 +189,7 @@ extern uint256 hashAssumeValid;\n extern arith_uint256 nMinimumChainWork;\n \n /** Best header we've seen so far (used for getheaders queries' starting points). */\n-extern CBlockIndex *pindexBestHeader;\n+extern const CBlockIndex *pindexBestHeader;\n \n /** Minimum disk space required - used in CheckDiskSpace() */\n static const uint64_t nMinDiskSpace = 52428800;\n@@ -428,15 +428,15 @@ class CVerifyDB {\n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n-inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n+inline const CBlockIndex* LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);\n     BlockMap::const_iterator it = mapBlockIndex.find(hash);\n     return it == mapBlockIndex.end() ? nullptr : it->second;\n }\n \n /** Find the last common block between the parameter chain and a locator. */\n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n+const CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n /** Mark a block as precious and reorganize. */\n bool PreciousBlock(CValidationState& state, const CChainParams& params, const CBlockIndex *pindex);"
      }
    ]
  },
  {
    "sha": "ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZThlMzBiYmIxY2U3YjM2ZTMwNTRhZDQ0YjI4YTYyMTY1ZjJhMzky",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T18:54:58Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:57Z"
      },
      "message": "mapBlockIndex only in validation.cpp, and const outside CChainState",
      "tree": {
        "sha": "8879956aa88de9b2d36d53c71c2ad57e0b4f5532",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8879956aa88de9b2d36d53c71c2ad57e0b4f5532"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbed1ea3cefb21c777117a9fdb18dc08371e9c3e"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 53,
      "deletions": 35
    },
    "files": [
      {
        "sha": "bb9561454306da57177763f37e116bd04b5e8fad",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
        "patch": "@@ -1451,7 +1451,7 @@ bool AppInitMain()\n \n                 // If the loaded chain has a wrong genesis, bail out immediately\n                 // (we're likely using a testnet datadir, or the other way around).\n-                if (!mapBlockIndex.empty() && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n+                if (GetHeaderCount() != 0 && !LookupBlockIndex(chainparams.GetConsensus().hashGenesisBlock)) {\n                     return InitError(_(\"Incorrect or no genesis block found. Wrong datadir for network?\"));\n                 }\n \n@@ -1666,7 +1666,7 @@ bool AppInitMain()\n     //// debug print\n     {\n         LOCK(cs_main);\n-        LogPrintf(\"mapBlockIndex.size() = %u\\n\", mapBlockIndex.size());\n+        LogPrintf(\"mapBlockIndex.size() = %u\\n\", GetHeaderCount());\n         chain_active_height = chainActive.Height();\n     }\n     LogPrintf(\"nBestHeight = %d\\n\", chain_active_height);"
      },
      {
        "sha": "82aa3d51e81e6b9d8fcef21fc9decf9bfb801fc1",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
        "patch": "@@ -1319,12 +1319,9 @@ UniValue getchaintips(const JSONRPCRequest& request)\n     std::set<const CBlockIndex* > setOrphans;\n     std::set<const CBlockIndex* > setPrevs;\n \n-    for (const std::pair<const uint256, const CBlockIndex* >& item : mapBlockIndex)\n-    {\n-        if (!chainActive.Contains(item.second)) {\n-            setOrphans.insert(item.second);\n-            setPrevs.insert(item.second->pprev);\n-        }\n+    GetAllStaleHeaders(setOrphans);\n+    for (const CBlockIndex* orphan : setOrphans) {\n+        setPrevs.insert(orphan->pprev);\n     }\n \n     for (std::set<const CBlockIndex* >::iterator it = setOrphans.begin(); it != setOrphans.end(); ++it)"
      },
      {
        "sha": "fbe59d9091b92c8c8ede52c9fe61a864ad522747",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 19,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
        "patch": "@@ -88,6 +88,7 @@ enum DisconnectResult\n };\n \n class ConnectTrace;\n+typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n \n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n@@ -177,6 +178,13 @@ class CChainState {\n \n     void UnloadBlockIndex();\n \n+    ~CChainState() {\n+        BlockMap::iterator it1 = mapBlockIndex.begin();\n+        for (; it1 != mapBlockIndex.end(); it1++)\n+            delete (*it1).second;\n+        mapBlockIndex.clear();\n+    }\n+\n private:\n     bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace);\n     bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool);\n@@ -199,7 +207,8 @@ class CChainState {\n \n CCriticalSection cs_main;\n \n-BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n+// Also used in wallet_tests.cpp\n+const BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n CChain& chainActive = g_chainstate.chainActive;\n const CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n@@ -276,6 +285,28 @@ const CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocato\n     return chain.Genesis();\n }\n \n+const CBlockIndex* LookupBlockIndex(const uint256& hash) {\n+    AssertLockHeld(cs_main);\n+    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n+    return it == mapBlockIndex.end() ? nullptr : it->second;\n+}\n+\n+size_t GetHeaderCount() {\n+    AssertLockHeld(cs_main);\n+    return mapBlockIndex.size();\n+}\n+\n+void GetAllStaleHeaders(std::set<const CBlockIndex*>& header_set) {\n+    AssertLockHeld(cs_main);\n+    header_set.clear();\n+    for (const std::pair<const uint256, const CBlockIndex* >& item : mapBlockIndex)\n+    {\n+        if (!chainActive.Contains(item.second)) {\n+            header_set.insert(item.second);\n+        }\n+    }\n+}\n+\n std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n std::unique_ptr<CCoinsViewCache> pcoinsTip;\n std::unique_ptr<CBlockTreeDB> pblocktree;\n@@ -4180,6 +4211,11 @@ void CChainState::UnloadBlockIndex() {\n     nBlockSequenceId = 1;\n     g_failed_blocks.clear();\n     setBlockIndexCandidates.clear();\n+\n+    for (BlockMap::value_type& entry : mapBlockIndex) {\n+        delete entry.second;\n+    }\n+    mapBlockIndex.clear();\n }\n \n // May NOT be used after any connections are up as much\n@@ -4201,11 +4237,6 @@ void UnloadBlockIndex()\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n         warningcache[b].clear();\n     }\n-\n-    for (BlockMap::value_type& entry : mapBlockIndex) {\n-        delete entry.second;\n-    }\n-    mapBlockIndex.clear();\n     fHavePruned = false;\n \n     g_chainstate.UnloadBlockIndex();\n@@ -4749,16 +4780,3 @@ double GuessVerificationProgress(const ChainTxData& data, const CBlockIndex *pin\n \n     return pindex->nChainTx / fTxTotal;\n }\n-\n-class CMainCleanup\n-{\n-public:\n-    CMainCleanup() {}\n-    ~CMainCleanup() {\n-        // block headers\n-        BlockMap::iterator it1 = mapBlockIndex.begin();\n-        for (; it1 != mapBlockIndex.end(); it1++)\n-            delete (*it1).second;\n-        mapBlockIndex.clear();\n-    }\n-} instance_of_cmaincleanup;"
      },
      {
        "sha": "5fcf672c111a717f220c67a00d8ab24f2ef3de46",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
        "patch": "@@ -158,8 +158,6 @@ extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n-typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap& mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n@@ -428,12 +426,14 @@ class CVerifyDB {\n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n-inline const CBlockIndex* LookupBlockIndex(const uint256& hash)\n-{\n-    AssertLockHeld(cs_main);\n-    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n-    return it == mapBlockIndex.end() ? nullptr : it->second;\n-}\n+/** Gets the CBlocKIndex* for the header with the given hash, or nullptr if we have no such header in our header tree */\n+const CBlockIndex* LookupBlockIndex(const uint256& hash);\n+\n+/** Gets the number of headers loaded into our header tree */\n+size_t GetHeaderCount();\n+\n+/** Gets all headers in our header tree which are not on our best chain */\n+void GetAllStaleHeaders(std::set<const CBlockIndex*>& header_set);\n \n /** Find the last common block between the parameter chain and a locator. */\n const CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);"
      },
      {
        "sha": "882b092fddd8ac157c859623a8beb1f6b2810cbd",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
        "patch": "@@ -23,6 +23,9 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n extern UniValue dumpwallet(const JSONRPCRequest& request);\n extern UniValue importwallet(const JSONRPCRequest& request);\n \n+typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n+extern BlockMap& mapBlockIndex;\n+\n BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n static void AddKey(CWallet& wallet, const CKey& key)"
      }
    ]
  },
  {
    "sha": "d1788bc49903ffe25807da8c9d4852acde89c743",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTc4OGJjNDk5MDNmZmUyNTgwN2RhOGM5ZDQ4NTJhY2RlODljNzQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-15T21:47:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:57Z"
      },
      "message": "Make CChain only return const CBlockIndex* in const functions",
      "tree": {
        "sha": "03561e1c4e1eeee7acb17b3f391b62ad866dd6e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03561e1c4e1eeee7acb17b3f391b62ad866dd6e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1788bc49903ffe25807da8c9d4852acde89c743",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1788bc49903ffe25807da8c9d4852acde89c743",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1788bc49903ffe25807da8c9d4852acde89c743",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1788bc49903ffe25807da8c9d4852acde89c743/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae8e30bbb1ce7b36e3054ad44b28a62165f2a392"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 31,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b6b8f086af991d51f76397dfb418235a324a7f99",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1788bc49903ffe25807da8c9d4852acde89c743/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1788bc49903ffe25807da8c9d4852acde89c743/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=d1788bc49903ffe25807da8c9d4852acde89c743",
        "patch": "@@ -59,7 +59,7 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n-CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n+const CBlockIndex* CChain::FindEarliestAtLeast(int64_t nTime) const\n {\n     std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n         [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTimeMax() < time; });"
      },
      {
        "sha": "3d73130860f538f0b6644d86f6fa9529e610ef42",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 30,
        "deletions": 5,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1788bc49903ffe25807da8c9d4852acde89c743/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1788bc49903ffe25807da8c9d4852acde89c743/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d1788bc49903ffe25807da8c9d4852acde89c743",
        "patch": "@@ -438,17 +438,34 @@ class CChain {\n \n public:\n     /** Returns the index entry for the genesis block of this chain, or nullptr if none. */\n-    CBlockIndex *Genesis() const {\n+    CBlockIndex *Genesis() {\n+        return vChain.size() > 0 ? vChain[0] : nullptr;\n+    }\n+\n+    /** Returns the index entry for the genesis block of this chain, or nullptr if none. */\n+    const CBlockIndex *Genesis() const {\n         return vChain.size() > 0 ? vChain[0] : nullptr;\n     }\n \n     /** Returns the index entry for the tip of this chain, or nullptr if none. */\n-    CBlockIndex *Tip() const {\n+    const CBlockIndex *Tip() const {\n+        return vChain.size() > 0 ? vChain[vChain.size() - 1] : nullptr;\n+    }\n+\n+    /** Returns the index entry for the tip of this chain, or nullptr if none. */\n+    CBlockIndex *Tip() {\n         return vChain.size() > 0 ? vChain[vChain.size() - 1] : nullptr;\n     }\n \n     /** Returns the index entry at a particular height in this chain, or nullptr if no such height exists. */\n-    CBlockIndex *operator[](int nHeight) const {\n+    const CBlockIndex *operator[](int nHeight) const {\n+        if (nHeight < 0 || nHeight >= (int)vChain.size())\n+            return nullptr;\n+        return vChain[nHeight];\n+    }\n+\n+    /** Returns the index entry at a particular height in this chain, or nullptr if no such height exists. */\n+    CBlockIndex *operator[](int nHeight) {\n         if (nHeight < 0 || nHeight >= (int)vChain.size())\n             return nullptr;\n         return vChain[nHeight];\n@@ -466,7 +483,15 @@ class CChain {\n     }\n \n     /** Find the successor of a block in this chain, or nullptr if the given index is not found or is the tip. */\n-    CBlockIndex *Next(const CBlockIndex *pindex) const {\n+    const CBlockIndex *Next(const CBlockIndex *pindex) const {\n+        if (Contains(pindex))\n+            return (*this)[pindex->nHeight + 1];\n+        else\n+            return nullptr;\n+    }\n+\n+    /** Find the successor of a block in this chain, or nullptr if the given index is not found or is the tip. */\n+    CBlockIndex *Next(const CBlockIndex *pindex) {\n         if (Contains(pindex))\n             return (*this)[pindex->nHeight + 1];\n         else\n@@ -488,7 +513,7 @@ class CChain {\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n \n     /** Find the earliest block with timestamp equal or greater than the given. */\n-    CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n+    const CBlockIndex* FindEarliestAtLeast(int64_t nTime) const;\n };\n \n #endif // BITCOIN_CHAIN_H"
      }
    ]
  },
  {
    "sha": "5cf5701991617431509caa048b3f2a0bdeefd2d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2Y1NzAxOTkxNjE3NDMxNTA5Y2FhMDQ4YjNmMmEwYmRlZWZkMmQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-04-30T22:48:33Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:57Z"
      },
      "message": "Add a const_cast'ed reference to chainActive in miner_tests",
      "tree": {
        "sha": "b9cd74e5fabce7190df3ee0f70ed4e43f4800338",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9cd74e5fabce7190df3ee0f70ed4e43f4800338"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5cf5701991617431509caa048b3f2a0bdeefd2d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf5701991617431509caa048b3f2a0bdeefd2d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5cf5701991617431509caa048b3f2a0bdeefd2d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf5701991617431509caa048b3f2a0bdeefd2d3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1788bc49903ffe25807da8c9d4852acde89c743",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1788bc49903ffe25807da8c9d4852acde89c743",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1788bc49903ffe25807da8c9d4852acde89c743"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fb73e57c04b3e20f0dcce67171f8c4c5950f638e",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5cf5701991617431509caa048b3f2a0bdeefd2d3/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5cf5701991617431509caa048b3f2a0bdeefd2d3/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=5cf5701991617431509caa048b3f2a0bdeefd2d3",
        "patch": "@@ -39,6 +39,8 @@ class HasReason {\n \n static CFeeRate blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n \n+static CChain& nonConstChainActive = const_cast<CChain&>(chainActive);\n+\n static BlockAssembler AssemblerForTest(const CChainParams& params) {\n     BlockAssembler::Options options;\n "
      }
    ]
  },
  {
    "sha": "8aadafe9ce648c56033faa7c1a817924be6bde5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWFkYWZlOWNlNjQ4YzU2MDMzZmFhN2MxYTgxNzkyNGJlNmJkZTVk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T19:20:56Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:58Z"
      },
      "message": "scripted-diff: Use nonCosntChainActive in miner_tests\n\n-BEGIN VERIFY SCRIPT-\nsed -i \"s/chainActive\\./nonConstChainActive./\" src/test/miner_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "9b396ff836eb6b4a47a6524a3c551024e49a18fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b396ff836eb6b4a47a6524a3c551024e49a18fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aadafe9ce648c56033faa7c1a817924be6bde5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aadafe9ce648c56033faa7c1a817924be6bde5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aadafe9ce648c56033faa7c1a817924be6bde5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aadafe9ce648c56033faa7c1a817924be6bde5d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cf5701991617431509caa048b3f2a0bdeefd2d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cf5701991617431509caa048b3f2a0bdeefd2d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cf5701991617431509caa048b3f2a0bdeefd2d3"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 30,
      "deletions": 30
    },
    "files": [
      {
        "sha": "281aa150460cf3deac7b13c66b049581bdf2b62c",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aadafe9ce648c56033faa7c1a817924be6bde5d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aadafe9ce648c56033faa7c1a817924be6bde5d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8aadafe9ce648c56033faa7c1a817924be6bde5d",
        "patch": "@@ -88,7 +88,7 @@ CBlockIndex CreateBlockIndex(int nHeight)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;\n-    index.pprev = chainActive.Tip();\n+    index.pprev = nonConstChainActive.Tip();\n     return index;\n }\n \n@@ -233,17 +233,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         {\n             LOCK(cs_main);\n             pblock->nVersion = 1;\n-            pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+            pblock->nTime = nonConstChainActive.Tip()->GetMedianTimePast()+1;\n             CMutableTransaction txCoinbase(*pblock->vtx[0]);\n             txCoinbase.nVersion = 1;\n             txCoinbase.vin[0].scriptSig = CScript();\n             txCoinbase.vin[0].scriptSig.push_back(blockinfo[i].extranonce);\n-            txCoinbase.vin[0].scriptSig.push_back(chainActive.Height());\n+            txCoinbase.vin[0].scriptSig.push_back(nonConstChainActive.Height());\n             txCoinbase.vout.resize(1); // Ignore the (optional) segwit commitment added by CreateNewBlock (as the hardcoded nonces don't account for this)\n             txCoinbase.vout[0].scriptPubKey = CScript();\n             pblock->vtx[0] = MakeTransactionRef(std::move(txCoinbase));\n             if (txFirst.size() == 0)\n-                baseheight = chainActive.Height();\n+                baseheight = nonConstChainActive.Height();\n             if (txFirst.size() < 4)\n                 txFirst.push_back(pblock->vtx[0]);\n             pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n@@ -368,29 +368,29 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.clear();\n \n     // subsidy changing\n-    int nHeight = chainActive.Height();\n+    int nHeight = nonConstChainActive.Height();\n     // Create an actual 209999-long block chain (without valid blocks).\n-    while (chainActive.Tip()->nHeight < 209999) {\n-        CBlockIndex* prev = chainActive.Tip();\n+    while (nonConstChainActive.Tip()->nHeight < 209999) {\n+        CBlockIndex* prev = nonConstChainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        chainActive.SetTip(next);\n+        nonConstChainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     // Extend to a 210000-long block chain.\n-    while (chainActive.Tip()->nHeight < 210000) {\n-        CBlockIndex* prev = chainActive.Tip();\n+    while (nonConstChainActive.Tip()->nHeight < 210000) {\n+        CBlockIndex* prev = nonConstChainActive.Tip();\n         CBlockIndex* next = new CBlockIndex();\n         next->phashBlock = new uint256(InsecureRand256());\n         pcoinsTip->SetBestBlock(next->GetBlockHash());\n         next->pprev = prev;\n         next->nHeight = prev->nHeight + 1;\n         next->BuildSkip();\n-        chainActive.SetTip(next);\n+        nonConstChainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n \n@@ -413,16 +413,16 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.clear();\n \n     // Delete the dummy blocks again.\n-    while (chainActive.Tip()->nHeight > nHeight) {\n-        CBlockIndex* del = chainActive.Tip();\n-        chainActive.SetTip(del->pprev);\n+    while (nonConstChainActive.Tip()->nHeight > nHeight) {\n+        CBlockIndex* del = nonConstChainActive.Tip();\n+        nonConstChainActive.SetTip(del->pprev);\n         pcoinsTip->SetBestBlock(del->pprev->GetBlockHash());\n         delete del->phashBlock;\n         delete del;\n     }\n \n     // non-final txs in mempool\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+    SetMockTime(nonConstChainActive.Tip()->GetMedianTimePast()+1);\n     int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n     // height map\n     std::vector<int> prevheights;\n@@ -434,7 +434,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[0]->GetHash(); // only 1 transaction\n     tx.vin[0].prevout.n = 0;\n     tx.vin[0].scriptSig = CScript() << OP_1;\n-    tx.vin[0].nSequence = chainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n+    tx.vin[0].nSequence = nonConstChainActive.Tip()->nHeight + 1; // txFirst[0] is the 2nd block\n     prevheights[0] = baseheight + 1;\n     tx.vout.resize(1);\n     tx.vout[0].nValue = BLOCKSUBSIDY-HIGHFEE;\n@@ -444,48 +444,48 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n-    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(nonConstChainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n \n     // relative time locked\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n-    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((chainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n+    tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | (((nonConstChainActive.Tip()->GetMedianTimePast()+1-chainActive[1]->GetMedianTimePast()) >> CTxIn::SEQUENCE_LOCKTIME_GRANULARITY) + 1); // txFirst[1] is the 3rd block\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n+        nonConstChainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(nonConstChainActive.Tip()->nHeight + 1))); // Sequence locks pass 512 seconds later\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n+        nonConstChainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime -= 512; //undo tricked MTP\n \n     // absolute height locked\n     tx.vin[0].prevout.hash = txFirst[2]->GetHash();\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_FINAL - 1;\n     prevheights[0] = baseheight + 3;\n-    tx.nLockTime = chainActive.Tip()->nHeight + 1;\n+    tx.nLockTime = nonConstChainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n+    BOOST_CHECK(IsFinalTx(tx, nonConstChainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n     // absolute time locked\n     tx.vin[0].prevout.hash = txFirst[3]->GetHash();\n-    tx.nLockTime = chainActive.Tip()->GetMedianTimePast();\n+    tx.nLockTime = nonConstChainActive.Tip()->GetMedianTimePast();\n     prevheights.resize(1);\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n     BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n-    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n+    BOOST_CHECK(IsFinalTx(tx, nonConstChainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n     // mempool-dependent transactions (not added)\n     tx.vin[0].prevout.hash = hash;\n-    prevheights[0] = chainActive.Tip()->nHeight + 1;\n+    prevheights[0] = nonConstChainActive.Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n     BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n@@ -506,14 +506,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     // However if we advance height by 1 and time by 512, all of them should be mined\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n-        chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n-    chainActive.Tip()->nHeight++;\n-    SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n+        nonConstChainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n+    nonConstChainActive.Tip()->nHeight++;\n+    SetMockTime(nonConstChainActive.Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n \n-    chainActive.Tip()->nHeight--;\n+    nonConstChainActive.Tip()->nHeight--;\n     SetMockTime(0);\n     mempool.clear();\n "
      }
    ]
  },
  {
    "sha": "11812e2fd463d3bccfb7a4b473d102e9324c0298",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTgxMmUyZmQ0NjNkM2JjY2ZiN2E0YjQ3M2QxMDJlOTMyNGMwMjk4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T19:30:01Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:58Z"
      },
      "message": "Make VerifyDB a CChainState member instead of a loose class",
      "tree": {
        "sha": "945e2912baa07135d787b150f3362976441bcd19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/945e2912baa07135d787b150f3362976441bcd19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11812e2fd463d3bccfb7a4b473d102e9324c0298",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11812e2fd463d3bccfb7a4b473d102e9324c0298",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11812e2fd463d3bccfb7a4b473d102e9324c0298",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11812e2fd463d3bccfb7a4b473d102e9324c0298/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aadafe9ce648c56033faa7c1a817924be6bde5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aadafe9ce648c56033faa7c1a817924be6bde5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aadafe9ce648c56033faa7c1a817924be6bde5d"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f11da85bfd7bed8de86e940aef2e1b9925cab4fd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=11812e2fd463d3bccfb7a4b473d102e9324c0298",
        "patch": "@@ -1536,7 +1536,7 @@ bool AppInitMain()\n                         break;\n                     }\n \n-                    if (!CVerifyDB().VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n+                    if (!VerifyDB(chainparams, pcoinsdbview.get(), gArgs.GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL),\n                                   gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS))) {\n                         strLoadError = _(\"Corrupted block database detected\");\n                         break;"
      },
      {
        "sha": "a7f8b5b3f38408fc2e91897bb524d0f321888ab5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=11812e2fd463d3bccfb7a4b473d102e9324c0298",
        "patch": "@@ -1082,7 +1082,7 @@ UniValue verifychain(const JSONRPCRequest& request)\n     if (!request.params[1].isNull())\n         nCheckDepth = request.params[1].get_int();\n \n-    return CVerifyDB().VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n+    return VerifyDB(Params(), pcoinsTip.get(), nCheckLevel, nCheckDepth);\n }\n \n /** Implementation of IsSuperMajority with better feedback */"
      },
      {
        "sha": "3de6322e34c9e25aaf049b4a7bee69b357cd277a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 11,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=11812e2fd463d3bccfb7a4b473d102e9324c0298",
        "patch": "@@ -153,6 +153,8 @@ class CChainState {\n \n     bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree);\n \n+    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n+\n     bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n \n     bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex);\n@@ -3909,17 +3911,7 @@ bool LoadChainTip(const CChainParams& chainparams)\n     return g_chainstate.LoadChainTip(chainparams);\n }\n \n-CVerifyDB::CVerifyDB()\n-{\n-    uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0, false);\n-}\n-\n-CVerifyDB::~CVerifyDB()\n-{\n-    uiInterface.ShowProgress(\"\", 100, false);\n-}\n-\n-bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+bool CChainState::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n {\n     LOCK(cs_main);\n     if (chainActive.Tip() == nullptr || chainActive.Tip()->pprev == nullptr)\n@@ -4103,6 +4095,19 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth)\n+{\n+    struct VerifyProgress {\n+        VerifyProgress() {\n+            uiInterface.ShowProgress(_(\"Verifying blocks...\"), 0, false);\n+        }\n+        ~VerifyProgress() {\n+            uiInterface.ShowProgress(\"\", 100, false);\n+        }\n+    } verifyProgressRAII;\n+    return g_chainstate.VerifyDB(chainparams, coinsview, nCheckLevel, nCheckDepth);\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "d38897fd261eaa1e42b61f2cde0d2f4a858c17a1",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11812e2fd463d3bccfb7a4b473d102e9324c0298/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=11812e2fd463d3bccfb7a4b473d102e9324c0298",
        "patch": "@@ -415,13 +415,8 @@ void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPr\n /** Produce the necessary coinbase commitment for a block (modifies the hash, don't call for mined blocks). */\n std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n \n-/** RAII wrapper for VerifyDB: Verify consistency of the block and coin databases */\n-class CVerifyDB {\n-public:\n-    CVerifyDB();\n-    ~CVerifyDB();\n-    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n-};\n+/** Verify consistency of the block and coin databases */\n+bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n \n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);"
      }
    ]
  },
  {
    "sha": "4576f1de6725bab583797d081421b992872fd616",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTc2ZjFkZTY3MjViYWI1ODM3OTdkMDgxNDIxYjk5Mjg3MmZkNjE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-27T19:39:34Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-03-28T15:35:58Z"
      },
      "message": "Make chainActive const outside of CChainState",
      "tree": {
        "sha": "fd2c2540651deb1f2371a37395ad1e78145bf377",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd2c2540651deb1f2371a37395ad1e78145bf377"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4576f1de6725bab583797d081421b992872fd616",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4576f1de6725bab583797d081421b992872fd616",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4576f1de6725bab583797d081421b992872fd616",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4576f1de6725bab583797d081421b992872fd616/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11812e2fd463d3bccfb7a4b473d102e9324c0298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11812e2fd463d3bccfb7a4b473d102e9324c0298",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11812e2fd463d3bccfb7a4b473d102e9324c0298"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "147bcd4e1cd623440ad6015c29a9e9b840819ab8",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4576f1de6725bab583797d081421b992872fd616/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4576f1de6725bab583797d081421b992872fd616/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4576f1de6725bab583797d081421b992872fd616",
        "patch": "@@ -211,7 +211,7 @@ CCriticalSection cs_main;\n \n // Also used in wallet_tests.cpp\n const BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n-CChain& chainActive = g_chainstate.chainActive;\n+const CChain& chainActive = g_chainstate.chainActive;\n const CBlockIndex *pindexBestHeader = nullptr;\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n@@ -382,7 +382,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n     AssertLockHeld(cs_main);\n     AssertLockHeld(mempool.cs);\n \n-    CBlockIndex* tip = chainActive.Tip();\n+    CBlockIndex* tip = g_chainstate.chainActive.Tip(); // TODO: Refactor (Calculate|Evaluate)SequenceLocks to take pprev instead\n     assert(tip != nullptr);\n     \n     CBlockIndex index;\n@@ -1199,7 +1199,7 @@ bool IsInitialBlockDownload()\n     return false;\n }\n \n-CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n+const CBlockIndex *pindexBestForkTip = nullptr, *pindexBestForkBase = nullptr;\n \n static void AlertNotify(const std::string& strMessage)\n {\n@@ -1260,12 +1260,12 @@ static void CheckForkWarningConditions()\n     }\n }\n \n-static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n+static void CheckForkWarningConditionsOnNewFork(const CBlockIndex* pindexNewForkTip)\n {\n     AssertLockHeld(cs_main);\n     // If we are on a fork that is sufficiently large, set a warning flag\n-    CBlockIndex* pfork = pindexNewForkTip;\n-    CBlockIndex* plonger = chainActive.Tip();\n+    const CBlockIndex* pfork = pindexNewForkTip;\n+    const CBlockIndex* plonger = chainActive.Tip();\n     while (pfork && pfork != plonger)\n     {\n         while (plonger && plonger->nHeight > pfork->nHeight)\n@@ -1301,7 +1301,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     LogPrintf(\"%s: invalid block=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       pindexNew->GetBlockHash().ToString(), pindexNew->nHeight,\n       log(pindexNew->nChainWork.getdouble())/log(2.0), FormatISO8601DateTime(pindexNew->GetBlockTime()));\n-    CBlockIndex *tip = chainActive.Tip();\n+    const CBlockIndex *tip = chainActive.Tip();\n     assert (tip);\n     LogPrintf(\"%s:  current best=%s  height=%d  log2_work=%.8g  date=%s\\n\", __func__,\n       tip->GetBlockHash().ToString(), chainActive.Height(), log(tip->nChainWork.getdouble())/log(2.0),\n@@ -4213,6 +4213,7 @@ bool RewindBlockIndex(const CChainParams& params) {\n }\n \n void CChainState::UnloadBlockIndex() {\n+    chainActive.SetTip(nullptr);\n     nBlockSequenceId = 1;\n     g_failed_blocks.clear();\n     setBlockIndexCandidates.clear();\n@@ -4229,7 +4230,6 @@ void CChainState::UnloadBlockIndex() {\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n-    chainActive.SetTip(nullptr);\n     pindexBestInvalid = nullptr;\n     pindexBestHeader = nullptr;\n     mempool.clear();"
      },
      {
        "sha": "ba15bbed83c131d97ada1b7ba90259e439482e27",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4576f1de6725bab583797d081421b992872fd616/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4576f1de6725bab583797d081421b992872fd616/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4576f1de6725bab583797d081421b992872fd616",
        "patch": "@@ -443,7 +443,7 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, c\n bool ResetBlockFailureFlags(const CBlockIndex *pindex);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain& chainActive;\n+extern const CChain& chainActive;\n \n /** Global variable that points to the coins database (protected by cs_main) */\n extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;"
      },
      {
        "sha": "87b76400f9c8f1b541105a86192806abeeceb822",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4576f1de6725bab583797d081421b992872fd616/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4576f1de6725bab583797d081421b992872fd616/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=4576f1de6725bab583797d081421b992872fd616",
        "patch": "@@ -37,11 +37,11 @@ static void AddKey(CWallet& wallet, const CKey& key)\n BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n {\n     // Cap last block file size, and mine new block in a new block file.\n-    CBlockIndex* const nullBlock = nullptr;\n-    CBlockIndex* oldTip = chainActive.Tip();\n+    const CBlockIndex* const nullBlock = nullptr;\n+    const CBlockIndex* oldTip = chainActive.Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n-    CBlockIndex* newTip = chainActive.Tip();\n+    const CBlockIndex* newTip = chainActive.Tip();\n \n     LOCK(cs_main);\n "
      }
    ]
  }
]