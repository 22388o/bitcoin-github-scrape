[
  {
    "sha": "7f4228566eafd91c3201e794ef2d82ca884db8c6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjQyMjg1NjZlYWZkOTFjMzIwMWU3OTRlZjJkODJjYTg4NGRiOGM2",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-11T22:38:19Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2021-09-11T23:08:34Z"
      },
      "message": "[TESTS] Allow tx_invalid.json tests to include flag rules for if_unset: [A,B,C] then_unset: [D]",
      "tree": {
        "sha": "559f5d6664bf21324ec6df122fe929e337171499",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/559f5d6664bf21324ec6df122fe929e337171499"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f4228566eafd91c3201e794ef2d82ca884db8c6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f4228566eafd91c3201e794ef2d82ca884db8c6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f4228566eafd91c3201e794ef2d82ca884db8c6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f4228566eafd91c3201e794ef2d82ca884db8c6/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c0f46ca46e23a161649b5150baa01020dc85e48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c0f46ca46e23a161649b5150baa01020dc85e48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c0f46ca46e23a161649b5150baa01020dc85e48"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 51,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4f535ec570bfdcb9a409ba28c63f988382e26314",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4228566eafd91c3201e794ef2d82ca884db8c6/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4228566eafd91c3201e794ef2d82ca884db8c6/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=7f4228566eafd91c3201e794ef2d82ca884db8c6",
        "patch": "@@ -2,7 +2,7 @@\n [\"The following are deserialized transactions which are invalid.\"],\n [\"They are in the form\"],\n [\"[[[prevout hash, prevout index, prevout scriptPubKey, amount?], [input 2], ...],\"],\n-[\"serializedTransaction, verifyFlags]\"],\n+[\"serializedTransaction, verifyFlags, [{\\\"if_unset\\\": [\\\"flag A\\\", ...], \\\"then_unset\\\": [\\\"flag X\\\", ...]}]?]\"],\n [\"Use BADTX for verifyFlags if it is expected to fail CheckTransaction()\"],\n [\"Objects that are only a single string (like this one) are ignored\"],\n "
      },
      {
        "sha": "2dd636b382a182b67af66cd696b1985027183993",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f4228566eafd91c3201e794ef2d82ca884db8c6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f4228566eafd91c3201e794ef2d82ca884db8c6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7f4228566eafd91c3201e794ef2d82ca884db8c6",
        "patch": "@@ -285,11 +285,41 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n         std::string strTest = test.write();\n         if (test[0].isArray())\n         {\n-            if (test.size() != 3 || !test[1].isStr() || !test[2].isStr())\n+            const bool mandatory_fields_present = test.size() >= 3 && test[1].isStr() && test[2].isStr();\n+            const bool one_by_one_fills = test.size() >= 4 ? test[3].isArray() : true;\n+            const bool max_arg_count = test.size() <= 4;\n+            if (!mandatory_fields_present || !max_arg_count || !one_by_one_fills)\n             {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n                 continue;\n             }\n+            std::vector<std::pair<unsigned int, unsigned int>> excluded_flag_settings;\n+            if (test.size() >= 4) {\n+                try {\n+                    const UniValue& fills = test[3].get_array();\n+                    for (unsigned int i = 0; i < fills.size(); ++i) {\n+                        const UniValue& fill = fills[i].get_obj();\n+                        const UniValue if_unset = fill[\"if_unset\"].get_array();\n+                        const UniValue then_unset = fill[\"then_unset\"].get_array();\n+                        excluded_flag_settings.push_back(std::make_pair(0, 0));\n+                        unsigned int& if_set_flags = excluded_flag_settings.back().first;\n+                        unsigned int& then_set_flags = excluded_flag_settings.back().second;\n+                        for (unsigned int j = 0; j < if_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(if_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << if_unset[j].get_str());\n+                            if_set_flags |= flag->second;\n+                        }\n+                        for (unsigned int j = 0; j < then_unset.size(); ++j) {\n+                            const auto& flag = mapFlagNames.find(then_unset[j].get_str());\n+                            if (flag == mapFlagNames.end()) BOOST_ERROR(\"Unknown Flag: \" << then_unset[j].get_str());\n+                            then_set_flags |= flag->second;\n+                        }\n+\n+                    }\n+                } catch (std::runtime_error e) {\n+                    BOOST_ERROR(\"Improperly Formatted One-By-One Fill Settings \" << strTest);\n+                }\n+            }\n \n             std::map<COutPoint, CScript> mapprevOutScriptPubKeys;\n             std::map<COutPoint, int64_t> mapprevOutValues;\n@@ -357,9 +387,27 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n             }\n \n             // Check that flags are minimal: transaction should succeed if any set flags are unset.\n+            // unset flags according to if_unset/then_unset rules and de-duplicate entries.\n+            std::set<unsigned int> flags_excluded;\n             for (auto flags_excluding_one : ExcludeIndividualFlags(verify_flags)) {\n+                // re-apply rules until result is stable\n+                unsigned int pre;\n+                do {\n+                    pre = flags_excluding_one;\n+                    for (const auto& fill_if : excluded_flag_settings) {\n+                        // check if all flags in the entry are unset\n+                        if ((fill_if.first & flags_excluding_one) == 0) {\n+                            flags_excluding_one &= ~fill_if.second;\n+                            // re-evaluate all prior rules early if changed\n+                            if (pre != flags_excluding_one) break;\n+                        }\n+                    }\n+                } while (pre != flags_excluding_one);\n+                flags_excluded.insert(flags_excluding_one);\n+            }\n+            for (auto flags_excluding_one : flags_excluded) {\n                 if (!CheckTxScripts(tx, mapprevOutScriptPubKeys, mapprevOutValues, flags_excluding_one, txdata, strTest, /* expect_valid */ true)) {\n-                    BOOST_ERROR(\"Too many flags set: \" << strTest);\n+                    BOOST_ERROR(\"Too many flags set: \" << FormatScriptFlags(flags_excluding_one) << \"\\n\" << strTest);\n                 }\n             }\n         }"
      }
    ]
  }
]