[
  {
    "sha": "fa3745bda84d5b3a26fdf8af4ac44d6088e11eee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM3NDViZGE4NGQ1YjNhMjZmZGY4YWY0YWM0NGQ2MDg4ZTExZWVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-24T22:13:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-24T22:08:22Z"
      },
      "message": "qa: Add tests for invalid message headers",
      "tree": {
        "sha": "65cc2f927a3655cc2f390ce95f6029280dd702ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65cc2f927a3655cc2f390ce95f6029280dd702ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcSjdWAAoJEM4rdWl+aaVIHq4L/jzsjQ26LhaUSCHj51pTTU0S\n5pYyN1z1jHqnT6hzqDXWX/Xys16yJqN5enrgtuqni6y0xxsQTRgCWT3v4GuU4+nC\nrfKgpigEXC7gIvJFfS+BVyvinheeIoH2lyQvqJTgGo+LPwNlmKQC/TUPQ7RgX6sf\nDYWp1pqaYi6EAKTtcXKct7jG66/qYwgurav6jEa9MXA/XAp4iGI+uyVhWX/pxuNM\ntNNdx31hyfRQ4etoLsAAKiRqNazx5fidXoPsxrtxZXwvzIDpdu7vKyX9iyiz64kX\nUoeB8PavdgwvAiBQK4No6U84niPR52Y61zCweYK8Z/IzilZq73jZnDIqTC5VIFU6\niBnky5vBrfNS6ZozQAQV4ZSk0QUm8j+w0EF15b02hzOfbYMtlg6dHF0/1CMvzdub\npZGfxsebC0aRwbISrUHcrXLFxLRohUQlcq1kjtyU5CtIJj3igWDeEGd4hjGYFEKP\n83/IMOp399aZbuE97ZbdafU32sAku2gfQC0+8xDl/w==\n=ChwE\n-----END PGP SIGNATURE-----",
        "payload": "tree 65cc2f927a3655cc2f390ce95f6029280dd702ad\nparent 003a47f804b1c66661fbe9a3ccef431d5e300282\nauthor MarcoFalke <falke.marco@gmail.com> 1548367986 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1548367702 -0500\n\nqa: Add tests for invalid message headers\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "003a47f804b1c66661fbe9a3ccef431d5e300282",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/003a47f804b1c66661fbe9a3ccef431d5e300282",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/003a47f804b1c66661fbe9a3ccef431d5e300282"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 62,
      "deletions": 25
    },
    "files": [
      {
        "sha": "dcc0d1d235db28418236186bab57157dddf70997",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 59,
        "deletions": 22,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=fa3745bda84d5b3a26fdf8af4ac44d6088e11eee",
        "patch": "@@ -16,7 +16,7 @@ class msg_unrecognized:\n \n     command = b'badmsg'\n \n-    def __init__(self, str_data):\n+    def __init__(self, *, str_data):\n         self.str_data = str_data.encode() if not isinstance(str_data, bytes) else str_data\n \n     def serialize(self):\n@@ -26,30 +26,27 @@ def __repr__(self):\n         return \"{}(data={})\".format(self.command, self.str_data)\n \n \n-class msg_nametoolong(msg_unrecognized):\n-\n-    command = b'thisnameiswayyyyyyyyytoolong'\n-\n-\n class InvalidMessagesTest(BitcoinTestFramework):\n-\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n \n     def run_test(self):\n         \"\"\"\n+         . Test msg header\n         0. Send a bunch of large (4MB) messages of an unrecognized type. Check to see\n            that it isn't an effective DoS against the node.\n \n         1. Send an oversized (4MB+) message and check that we're disconnected.\n \n         2. Send a few messages with an incorrect data size in the header, ensure the\n            messages are ignored.\n-\n-        3. Send an unrecognized message with a command name longer than 12 characters.\n-\n         \"\"\"\n+        self.test_magic_bytes()\n+        self.test_checksum()\n+        self.test_size()\n+        self.test_command()\n+\n         node = self.nodes[0]\n         self.node = node\n         node.add_p2p_connection(P2PDataStore())\n@@ -64,7 +61,7 @@ def run_test(self):\n         # Send as large a message as is valid, ensure we aren't disconnected but\n         # also can't exhaust resources.\n         #\n-        msg_at_size = msg_unrecognized(\"b\" * valid_data_limit)\n+        msg_at_size = msg_unrecognized(str_data=\"b\" * valid_data_limit)\n         assert len(msg_at_size.serialize()) == msg_limit\n \n         increase_allowed = 0.5\n@@ -94,10 +91,10 @@ def run_test(self):\n         #\n         # Send an oversized message, ensure we're disconnected.\n         #\n-        msg_over_size = msg_unrecognized(\"b\" * (valid_data_limit + 1))\n+        msg_over_size = msg_unrecognized(str_data=\"b\" * (valid_data_limit + 1))\n         assert len(msg_over_size.serialize()) == (msg_limit + 1)\n \n-        with node.assert_debug_log([\"Oversized message from peer=0, disconnecting\"]):\n+        with node.assert_debug_log([\"Oversized message from peer=4, disconnecting\"]):\n             # An unknown message type (or *any* message type) over\n             # MAX_PROTOCOL_MESSAGE_LENGTH should result in a disconnect.\n             node.p2p.send_message(msg_over_size)\n@@ -113,7 +110,7 @@ def run_test(self):\n         # Send messages with an incorrect data size in the header.\n         #\n         actual_size = 100\n-        msg = msg_unrecognized(\"b\" * actual_size)\n+        msg = msg_unrecognized(str_data=\"b\" * actual_size)\n \n         # TODO: handle larger-than cases. I haven't been able to pin down what behavior to expect.\n         for wrong_size in (2, 77, 78, 79):\n@@ -140,18 +137,58 @@ def run_test(self):\n             node.disconnect_p2ps()\n             node.add_p2p_connection(P2PDataStore())\n \n-        #\n-        # 3.\n-        #\n-        # Send a message with a too-long command name.\n-        #\n-        node.p2p.send_message(msg_nametoolong(\"foobar\"))\n-        node.p2p.wait_for_disconnect(timeout=4)\n-\n         # Node is still up.\n         conn = node.add_p2p_connection(P2PDataStore())\n         conn.sync_with_ping()\n \n+    def test_magic_bytes(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        conn.magic_bytes = b'\\x00\\x11\\x22\\x32'\n+        with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: INVALID MESSAGESTART ping']):\n+            conn.send_message(messages.msg_ping(nonce=0xff))\n+            conn.wait_for_disconnect(timeout=1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+    def test_checksum(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        with self.nodes[0].assert_debug_log(['ProcessMessages(badmsg, 2 bytes): CHECKSUM ERROR expected 78df0a04 was ffffffff']):\n+            msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n+            cut_len = (\n+                4 +  # magic\n+                12 +  # command\n+                4  #len\n+            )\n+            # modify checksum\n+            msg = msg[:cut_len] + b'\\xff' * 4 + msg[cut_len + 4:]\n+            self.nodes[0].p2p.send_raw_message(msg)\n+            conn.sync_with_ping(timeout=1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+    def test_size(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        with self.nodes[0].assert_debug_log(['']):\n+            msg = conn.build_message(msg_unrecognized(str_data=\"d\"))\n+            cut_len = (\n+                4 +  # magic\n+                12  # command\n+            )\n+            # modify len to MAX_SIZE + 1\n+            msg = msg[:cut_len] + struct.pack(\"<I\", 0x02000000 + 1) + msg[cut_len + 4:]\n+            self.nodes[0].p2p.send_raw_message(msg)\n+            conn.wait_for_disconnect(timeout=1)\n+            self.nodes[0].disconnect_p2ps()\n+\n+    def test_command(self):\n+        conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n+        with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: ERRORS IN HEADER']):\n+            msg = msg_unrecognized(str_data=\"d\")\n+            msg.command = b'\\xff' * 12\n+            msg = conn.build_message(msg)\n+            # Modify command\n+            msg = msg[:7] + b'\\x00' + msg[7 + 1:]\n+            self.nodes[0].p2p.send_raw_message(msg)\n+            conn.sync_with_ping(timeout=1)\n+            self.nodes[0].disconnect_p2ps()\n \n     def _tweak_msg_data_size(self, message, wrong_size):\n         \"\"\""
      },
      {
        "sha": "ac7cc068bdb58bc3f4cb72458a4a04b68c07369f",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3745bda84d5b3a26fdf8af4ac44d6088e11eee/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fa3745bda84d5b3a26fdf8af4ac44d6088e11eee",
        "patch": "@@ -118,7 +118,7 @@ def peer_connect(self, dstaddr, dstport, net=\"regtest\"):\n         # The initial message to send after the connection was made:\n         self.on_connection_send_msg = None\n         self.recvbuf = b\"\"\n-        self.network = net\n+        self.magic_bytes = MAGIC_BYTES[net]\n         logger.debug('Connecting to Bitcoin Node: %s:%d' % (self.dstaddr, self.dstport))\n \n         loop = NetworkThread.network_event_loop\n@@ -170,7 +170,7 @@ def _on_data(self):\n             while True:\n                 if len(self.recvbuf) < 4:\n                     return\n-                if self.recvbuf[:4] != MAGIC_BYTES[self.network]:\n+                if self.recvbuf[:4] != self.magic_bytes:\n                     raise ValueError(\"got garbage %s\" % repr(self.recvbuf))\n                 if len(self.recvbuf) < 4 + 12 + 4 + 4:\n                     return\n@@ -232,7 +232,7 @@ def build_message(self, message):\n         \"\"\"Build a serialized P2P message\"\"\"\n         command = message.command\n         data = message.serialize()\n-        tmsg = MAGIC_BYTES[self.network]\n+        tmsg = self.magic_bytes\n         tmsg += command\n         tmsg += b\"\\x00\" * (12 - len(command))\n         tmsg += struct.pack(\"<I\", len(data))"
      }
    ]
  }
]