DrahtBot,2019-02-14T04:44:19Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15494](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15494.html) (rpc: Return whether the block was invalidat",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-463487740,463487740,
promag,2019-02-27T12:01:17Z,"Tested:\n - concurrent `invalidateblock` calls\n - shutdown during `invalidateblock`\n\nAfter these tests I felt that `invalidateblock` could return whether the invalidation finished or not, or other meaningful data (other PR).\n\nHowever when testing concurrent `invalidateblock` and `reconsiderblock`, got the following assertion on start:\n```\n...\n2019-02-27T11:53:54Z Checking all blk ",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-467836040,467836040,
promag,2019-02-27T12:19:10Z,"Conceptually, should `InvalidateBlock` interrupt/error if it disconnects the same tip twice? Or should `invalidateblock` and `reconsiderblock` be exclusive? Something to think and probably tackle in a different PR.",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-467841269,467841269,
Sjors,2019-02-27T13:43:46Z,"I think `invalidateblock` and `reconsiderblock` should be exclusive (in a later PR). `invalidateblock` can be interrupted by exiting `bitcoind` (thanks to this PR), which is good enough UX for something as rare as that. I've only used `invalidateblock` for testing rollback behavior; the only other use case I can think of is a DIY soft fork :-) Well, and recovering from [CVE-2018-17144]( https://bi",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-467866350,467866350,
sipa,2019-02-28T22:10:38Z,"@promag I think I found what was causing the issue you observed when running reconsiderblock and invalidateblock simultaneously. The final step in the invalidation process would unconditionally mark the last disconnected block as invalid - even if reconsiderblock had made it the active block again at the same time.\n\nWould you mind trying again? Another useful thing to test is to put a sleep in",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468459148,468459148,
promag,2019-02-28T22:18:27Z,"@sipa I did that, sleeps all over the place, and that case sounded like scratching the chain. I'll repeat the tests.",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468461580,468461580,
sipa,2019-02-28T22:21:26Z,"@promag An alternative is only sleeping when ""disconnected==1"" (which would be in the middle for any invalidate that's longer than 1 deep, but not sleep all the time).\n\nIt's possible that the resulting effect is a reconsider and invalidate that start fighting with eachother and disconnect/connect the same blocks over and over again. It's not too hard to detect this scenario inside invalidatebl",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468462469,468462469,
gmaxwell,2019-03-02T14:28:43Z,ACK,https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-468925371,468925371,
sipa,2019-03-03T21:13:21Z,"I added an extra commit that solves the situation where if you used `invalidateblock`, had a cache flush before it completed, then had your node crash, and then restarted with `-checkblockindex` would assert with a state corruption.\n\nI've now tested a few more `invalidateblock` scenarios (with `-checkblockindex` and `-checkmempool` enabled), including interrupting it in the middle, killing/cra",https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-469064826,469064826,
gmaxwell,2019-03-04T17:51:08Z,re-ACK,https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-469349180,469349180,
sipa,2019-03-06T21:57:37Z,I think this is ready.,https://github.com/bitcoin/bitcoin/pull/15402#issuecomment-470293746,470293746,
MarcoFalke,2019-02-14T03:10:05Z,"Thanks for the txindex test fix. This should be a separate pull request, since the issue is already present (intermittent)",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676622,256676622,src/test/txindex_tests.cpp
sipa,2019-02-14T03:11:38Z,"Oh, I was wondering how it could be related...",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r256676871,256676871,src/test/txindex_tests.cpp
promag,2019-02-18T15:35:24Z,"Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \n\nAdd or remove depending on `ret`. ",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257741475,257741475,src/validation.cpp
promag,2019-02-18T15:36:18Z,"Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \n\nnit, could add `/* fAddToMempool = */ ret`.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257741820,257741820,src/validation.cpp
promag,2019-02-18T15:46:39Z,"Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \n\nShould relax current thread between unlock/lock on each cycle?",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257745697,257745697,src/validation.cpp
promag,2019-02-18T15:53:01Z,"Commit ebe6eebab3b3a42da70ec99c1f30568ae0abb16f\n\nMaybe calling `ShutdownRequested` is enough.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257747997,257747997,src/validation.cpp
promag,2019-02-18T15:56:12Z,"Commit ebe6eebab3b3a42da70ec99c1f30568ae0abb16f\n\nCould bring `invalid_walk_tip` to this scope instead?",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257749210,257749210,src/validation.cpp
promag,2019-02-18T15:59:56Z,"Commit 119cd3df2a31eb9e70863c1863c194a45d43e5c1 \n\nShould be singular `and then mark the block as invalid.`?",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257750539,257750539,src/validation.cpp
promag,2019-02-18T16:01:43Z,"Commit ebe6eebab3b3a42da70ec99c1f30568ae0abb16f \n\nUpdate comment? I mean, can be a different block?",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257751203,257751203,src/validation.cpp
promag,2019-02-18T16:07:32Z,"Commit 1b9518cc7c48750559a39fad4a5056d6a029ee8a\n\nCare to elaborate? Looks like this code could be in a function or something?",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257753394,257753394,src/validation.cpp
promag,2019-02-18T16:12:30Z,"Commit 3af503b4a86f3743c8660f15c0a62de0289b7d94\n\nCare to elaborate this optimization here? Looks like it could be:\n```cpp\nbool ret = DisconnectTip(state, chainparams, ++disconnected <= 10 ? &disconnectpool : nullptr);\n...\nif (disconnected <= 10) UpdateMempoolForReorg(disconnectpool, ret)\n```",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257755253,257755253,src/validation.cpp
MarcoFalke,2019-02-18T16:31:07Z,"Commit 78122f3d7ed059b00bdaed585:\n\nI think this is invalid cpp and wouldn't compile",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257761923,257761923,src/rpc/blockchain.cpp
promag,2019-02-18T16:40:13Z,You mean should just be `pblockindex = LookupBlockIndex(hash);`?,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257765225,257765225,src/rpc/blockchain.cpp
MarcoFalke,2019-02-18T16:47:11Z,"Yeah, I guess it compiles, but it might do the wrong thing.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257767612,257767612,src/rpc/blockchain.cpp
promag,2019-02-18T16:54:12Z,This should be in previous commit.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r257769907,257769907,src/rpc/blockchain.cpp
Sjors,2019-02-22T15:31:11Z,This bit seems to be new behaviour. Can it safely be moved into a separate commit? (I guess not because you wouldn't get to these branches when walking down from the tip),https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259389733,259389733,src/validation.cpp
Sjors,2019-02-22T15:39:01Z,"Maybe explain the big picture here: first we walk from genesis to the tip to look for the first block with missing data, i.e. the first block after SegWit activation without BLOCK_OPT_WITNESS. Then we walk from the tip down to this, winding back and deleting each block.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259393078,259393078,src/validation.cpp
Sjors,2019-02-22T15:47:48Z,"This note seems out of place now; it used to be above `if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(pindexIter))`",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259396779,259396779,src/validation.cpp
ryanofsky,2019-02-22T16:57:14Z,"In commit ""Release cs_main during RewindBlockIndex operation"" (8994e394c0b4e76616c10acdd309d0225eabad9e)\n\nCould you add some rationale in this comment saying why this is done here? Previous behavior of erasing in one place instead of two places seems simpler. Is this an optimization? Is it needed for correctness for some reason now that cs_main is released?",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259426840,259426840,src/validation.cpp
sipa,2019-02-24T19:31:46Z,"> Should relax current thread between unlock/lock on each cycle?\n\nI don't understand.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259636532,259636532,src/validation.cpp
sipa,2019-02-24T19:33:54Z,To which scope?,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259636612,259636612,src/validation.cpp
sipa,2019-02-24T19:49:07Z,"No, we still need to call UpdateMempoolForReorg, even if we don't want to add the disconnected transactions back to the mempool.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259637167,259637167,src/validation.cpp
sipa,2019-02-24T21:32:48Z,I don't know what you're referring to? Is the logic wrong or are you suggested an improvement to the comments?,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641740,259641740,src/validation.cpp
sipa,2019-02-24T21:33:30Z,Done.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641781,259641781,src/validation.cpp
sipa,2019-02-24T21:33:53Z,Improved the comments.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641797,259641797,src/validation.cpp
sipa,2019-02-24T21:34:07Z,Clarified the comment.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641808,259641808,src/validation.cpp
sipa,2019-02-24T21:34:44Z,"I've created a small function, and improved the comments (""overflow"" wasn't really correct and certainly confusing).",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641834,259641834,src/validation.cpp
sipa,2019-02-24T21:35:04Z,"FIxed. This was fixed, but in a later commit.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641851,259641851,src/rpc/blockchain.cpp
sipa,2019-02-24T21:35:11Z,Done.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259641857,259641857,src/rpc/blockchain.cpp
sipa,2019-02-24T21:39:51Z,I've split that commit into 4 separate ones. I think the flow of changes should be a lot clearer now.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642084,259642084,src/validation.cpp
sipa,2019-02-24T21:40:12Z,"I've improved the comments, let me know if it's clear now.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642103,259642103,src/validation.cpp
sipa,2019-02-24T21:41:32Z,"I've moved to to a separate step instead of lumping it together with the nHeight calculation loop.\n\nThere's no need for it to be done while holding the lock. The reason it's separate is because the disconnect/erase of active blocks should be done simultaneously (so that things get erased even when interrupted, and erasing can't be done before disconnecting), but for non-mainchain blocks we nee",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259642041,259642041,src/validation.cpp
Sjors,2019-02-25T12:38:50Z,IIUC this now happens every block rather than only at the end. I assume there's no other thread potentially messing with `setBlockIndexCandidates` in a way that we care about?,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259804901,259804901,src/validation.cpp
sipa,2019-02-25T16:02:24Z,This happens with cs_main held.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259893955,259893955,src/validation.cpp
Sjors,2019-02-25T19:39:39Z,"Ah I see, the loop over `mapBlockIndex` that calls `EraseBlockData` is entirely inside `LOCK(cs_main)`. So that's indeed the same as before 9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259986290,259986290,src/validation.cpp
sipa,2019-02-25T19:41:26Z,"Oh, that too, but that doesn't matter. The entire operation in this function could be called with a different lock per invocation.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r259986955,259986955,src/validation.cpp
MarcoFalke,2019-02-26T21:58:37Z,"in commit 32b2696ab4b079db736074b57bbc24deaee0b3d9\n\nI don't quite understand the comment, nor why the for loop was moved up.\n\n* Is it because the loop is cheaper to do before the DisconnectTip calls than after?\n* Is it because the DisconnectTip calls are cheaper after the loop ran?\n* ...",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260506459,260506459,src/validation.cpp
MarcoFalke,2019-02-26T22:20:58Z,I see it is needed for the next commit,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260514325,260514325,src/validation.cpp
MarcoFalke,2019-02-26T22:28:21Z,"in commit 436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb\n\nstyle-nit: FlushStateToDisk will lock `cs_main` anyway, so I don't see a need for limiting the scope of this `cs_main` in the first place and adding unnecessary indentation.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260516998,260516998,src/validation.cpp
MarcoFalke,2019-02-26T23:01:05Z,"Ah, I see this is required in a later commit",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r260527614,260527614,src/validation.cpp
Sjors,2019-03-01T11:46:51Z,"Nit, move this comment below the interference check, replace ""something is interfering"" with ""some other thread may have interfered before we reestablished the cs_main lock"".",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261574233,261574233,src/validation.cpp
Sjors,2019-03-01T11:54:06Z,"Unchanged behavior, but I'm confused why we only reconsider candidate blocks with `IsValid(BLOCK_VALID_TRANSACTIONS)` && `HaveTxsDownloaded()`, rather than any candidate with just more proof of work that's wasn't marked as invalid. Maybe the answer is: because such block candidates would never have been removed from `setBlockIndexCandidates` in the first place?",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261576212,261576212,src/validation.cpp
sipa,2019-03-01T18:05:23Z,That's the definition of `setBlockIndexCandidates`: all blocks with valid downloaded transactions (with optionally the ones that are less cumulative work than the chain tip removed).,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261702510,261702510,src/validation.cpp
Sjors,2019-03-01T19:05:10Z,I think I got confused with setBlockIndexHeaderCandidates from #13937.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261721986,261721986,src/validation.cpp
promag,2019-03-03T16:36:43Z,Just noting that return value is not used.,https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261875216,261875216,src/validation.cpp
promag,2019-03-03T16:39:42Z,"Couldn't this be inside the loop above, in line 2810?\n```cpp\nif (ShutdownRequested() || !chainActive.Contains(pindex)) {\n    ...\n    return\n}\n```\nwhich would avoid the unlock+lock.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261875421,261875421,src/validation.cpp
sipa,2019-03-03T21:04:20Z,"This whole lock scope could indeed be merged into the loop above, but I think it's clearer when it's separate (the loop only deals with disconnecting the main chain if it were to contain pindex, the section afterwards deals with cleanups that are necessary regardless of whether pindex was in the main chain).\n\nGiven that we're already locking/unlocking for each disconnected block, I don't think",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261886933,261886933,src/validation.cpp
promag,2019-03-03T21:07:49Z,"Ok, makes sense.",https://github.com/bitcoin/bitcoin/pull/15402#discussion_r261887126,261887126,src/validation.cpp
