[
  {
    "sha": "9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDZkY2M1MmM2Y2IwY2RjZGEyMjBmZGRjY2FhYmIwZmZkNDAwNjhk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-24T20:07:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-24T20:38:23Z"
      },
      "message": "Abstract EraseBlockData out of RewindBlockIndex\n\nNote that the former 'else' branch in RewindBlockIndex is now\ndealt with more naturally inside the EraseBlockData call (by\nchecking whether the parent needs to be re-added as candidate\nafter deleting a child).",
      "tree": {
        "sha": "196340ce49c879fc39dc34c1395ec619bfb26f06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/196340ce49c879fc39dc34c1395ec619bfb26f06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f9c1de19e6d254e0c3a26ce7a3d8cd57fb7641"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 40,
      "deletions": 27
    },
    "files": [
      {
        "sha": "d1872c961c6bbd80fb48aafbb27a2667a4c347b2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 27,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
        "patch": "@@ -206,8 +206,10 @@ class CChainState {\n     CBlockIndex* FindMostWorkChain() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pindexNew, const CDiskBlockPos& pos, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-\n     bool RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n+    //! Mark a block as not having block data\n+    void EraseBlockData(CBlockIndex* index) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n } g_chainstate;\n \n /**\n@@ -4168,6 +4170,42 @@ bool ReplayBlocks(const CChainParams& params, CCoinsView* view) {\n     return g_chainstate.ReplayBlocks(params, view);\n }\n \n+//! Helper for CChainState::RewindBlockIndex\n+void CChainState::EraseBlockData(CBlockIndex* index)\n+{\n+    AssertLockHeld(cs_main);\n+    assert(!chainActive.Contains(index)); // Make sure this block isn't active\n+\n+    // Reduce validity\n+    index->nStatus = std::min<unsigned int>(index->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (index->nStatus & ~BLOCK_VALID_MASK);\n+    // Remove have-data flags.\n+    index->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n+    // Remove storage location.\n+    index->nFile = 0;\n+    index->nDataPos = 0;\n+    index->nUndoPos = 0;\n+    // Remove various other things\n+    index->nTx = 0;\n+    index->nChainTx = 0;\n+    index->nSequenceId = 0;\n+    // Make sure it gets written.\n+    setDirtyBlockIndex.insert(index);\n+    // Update indexes\n+    setBlockIndexCandidates.erase(index);\n+    std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(index->pprev);\n+    while (ret.first != ret.second) {\n+        if (ret.first->second == index) {\n+            mapBlocksUnlinked.erase(ret.first++);\n+        } else {\n+            ++ret.first;\n+        }\n+    }\n+    // Mark parent as eligible for main chain again\n+    if (index->pprev && index->pprev->IsValid(BLOCK_VALID_TRANSACTIONS) && index->pprev->HaveTxsDownloaded()) {\n+        setBlockIndexCandidates.insert(index->pprev);\n+    }\n+}\n+\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n@@ -4219,32 +4257,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n         // rewind all the way.  Blocks remaining on chainActive at this point\n         // must not have their validity reduced.\n         if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(pindexIter)) {\n-            // Reduce validity\n-            pindexIter->nStatus = std::min<unsigned int>(pindexIter->nStatus & BLOCK_VALID_MASK, BLOCK_VALID_TREE) | (pindexIter->nStatus & ~BLOCK_VALID_MASK);\n-            // Remove have-data flags.\n-            pindexIter->nStatus &= ~(BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO);\n-            // Remove storage location.\n-            pindexIter->nFile = 0;\n-            pindexIter->nDataPos = 0;\n-            pindexIter->nUndoPos = 0;\n-            // Remove various other things\n-            pindexIter->nTx = 0;\n-            pindexIter->nChainTx = 0;\n-            pindexIter->nSequenceId = 0;\n-            // Make sure it gets written.\n-            setDirtyBlockIndex.insert(pindexIter);\n-            // Update indexes\n-            setBlockIndexCandidates.erase(pindexIter);\n-            std::pair<std::multimap<CBlockIndex*, CBlockIndex*>::iterator, std::multimap<CBlockIndex*, CBlockIndex*>::iterator> ret = mapBlocksUnlinked.equal_range(pindexIter->pprev);\n-            while (ret.first != ret.second) {\n-                if (ret.first->second == pindexIter) {\n-                    mapBlocksUnlinked.erase(ret.first++);\n-                } else {\n-                    ++ret.first;\n-                }\n-            }\n-        } else if (pindexIter->IsValid(BLOCK_VALID_TRANSACTIONS) && pindexIter->HaveTxsDownloaded()) {\n-            setBlockIndexCandidates.insert(pindexIter);\n+            EraseBlockData(pindexIter);\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "32b2696ab4b079db736074b57bbc24deaee0b3d9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmIyNjk2YWI0YjA3OWRiNzM2MDc0YjU3YmJjMjRkZWFlZTBiM2Q5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-24T20:36:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-24T20:45:48Z"
      },
      "message": "Move erasure of non-active blocks to a separate loop in RewindBlockIndex\n\nThis lets us simplify the iteration to just walking back in the chain,\nrather than looping over all of mapBlockIndex.",
      "tree": {
        "sha": "e7d9ec2674faadc62dcf74cae894ce6f559abc12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7d9ec2674faadc62dcf74cae894ce6f559abc12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32b2696ab4b079db736074b57bbc24deaee0b3d9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b2696ab4b079db736074b57bbc24deaee0b3d9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32b2696ab4b079db736074b57bbc24deaee0b3d9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b2696ab4b079db736074b57bbc24deaee0b3d9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d6dcc52c6cb0cdcda220fddccaabb0ffd40068d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 15,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a2d97299e9bc1bda00128ab969ec62d0d5843af5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32b2696ab4b079db736074b57bbc24deaee0b3d9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32b2696ab4b079db736074b57bbc24deaee0b3d9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=32b2696ab4b079db736074b57bbc24deaee0b3d9",
        "patch": "@@ -4209,9 +4209,18 @@ void CChainState::EraseBlockData(CBlockIndex* index)\n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n     LOCK(cs_main);\n-\n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n \n+    // First erase all post-segwit blocks without witness not in the main chain,\n+    // as this can we done without costly DisconnectTip calls. Active\n+    // blocks will be dealt with below.\n+    for (const auto& entry : mapBlockIndex) {\n+        if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n+            EraseBlockData(entry.second);\n+        }\n+    }\n+\n+    // Find what height we need to reorganize to.\n     int nHeight = 1;\n     while (nHeight <= chainActive.Height()) {\n         // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n@@ -4226,6 +4235,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n     CValidationState state;\n     CBlockIndex* pindex = chainActive.Tip();\n+    CBlockIndex* tip = pindex;\n     while (chainActive.Height() >= nHeight) {\n         if (fPruneMode && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n             // If pruning, don't try rewinding past the HAVE_DATA point;\n@@ -4248,17 +4258,16 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n     // Reduce validity flag and have-data flags.\n     // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n     // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-    for (const auto& entry : mapBlockIndex) {\n-        CBlockIndex* pindexIter = entry.second;\n-\n+    while (tip->nHeight > chainActive.Height()) {\n         // Note: If we encounter an insufficiently validated block that\n         // is on chainActive, it must be because we are a pruning node, and\n         // this block or some successor doesn't HAVE_DATA, so we were unable to\n         // rewind all the way.  Blocks remaining on chainActive at this point\n         // must not have their validity reduced.\n-        if (IsWitnessEnabled(pindexIter->pprev, params.GetConsensus()) && !(pindexIter->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(pindexIter)) {\n-            EraseBlockData(pindexIter);\n+        if (IsWitnessEnabled(tip->pprev, params.GetConsensus()) && !(tip->nStatus & BLOCK_OPT_WITNESS)) {\n+            EraseBlockData(tip);\n         }\n+        tip = tip->pprev;\n     }\n \n     if (chainActive.Tip() != nullptr) {"
      }
    ]
  },
  {
    "sha": "1d342875c21b5d0a17cf4d176063bb14b35b657e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDM0Mjg3NWMyMWI1ZDBhMTdjZjRkMTc2MDYzYmIxNGIzNWI2NTdl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-24T20:54:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-25T02:41:13Z"
      },
      "message": "Merge the disconnection and erasing loops in RewindBlockIndex",
      "tree": {
        "sha": "34d486f0742b60c1ddb8ce3905089f6dc400dea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34d486f0742b60c1ddb8ce3905089f6dc400dea3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d342875c21b5d0a17cf4d176063bb14b35b657e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d342875c21b5d0a17cf4d176063bb14b35b657e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d342875c21b5d0a17cf4d176063bb14b35b657e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d342875c21b5d0a17cf4d176063bb14b35b657e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "32b2696ab4b079db736074b57bbc24deaee0b3d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b2696ab4b079db736074b57bbc24deaee0b3d9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32b2696ab4b079db736074b57bbc24deaee0b3d9"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 21,
      "deletions": 18
    },
    "files": [
      {
        "sha": "040994c7ce88c8f13737a8da7f15fd8c4191557e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 18,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d342875c21b5d0a17cf4d176063bb14b35b657e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d342875c21b5d0a17cf4d176063bb14b35b657e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1d342875c21b5d0a17cf4d176063bb14b35b657e",
        "patch": "@@ -4234,40 +4234,43 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n     // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n     CValidationState state;\n-    CBlockIndex* pindex = chainActive.Tip();\n-    CBlockIndex* tip = pindex;\n-    while (chainActive.Height() >= nHeight) {\n-        if (fPruneMode && !(chainActive.Tip()->nStatus & BLOCK_HAVE_DATA)) {\n+    CBlockIndex* tip = chainActive.Tip();\n+    // Loop until the tip is below nHeight, or we reach a pruned block.\n+    while (true) {\n+        // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n+        assert(tip == chainActive.Tip());\n+        if (tip == nullptr || tip->nHeight < nHeight) break;\n+        if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n             // If pruning, don't try rewinding past the HAVE_DATA point;\n             // since older blocks can't be served anyway, there's\n             // no need to walk further, and trying to DisconnectTip()\n             // will fail (and require a needless reindex/redownload\n             // of the blockchain).\n             break;\n         }\n+\n+        // Disconnect block\n         if (!DisconnectTip(state, params, nullptr)) {\n-            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", pindex->nHeight, FormatStateMessage(state));\n-        }\n-        // Occasionally flush state to disk.\n-        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n-            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n-            return false;\n+            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n         }\n-    }\n \n-    // Reduce validity flag and have-data flags.\n-    // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-    // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-    while (tip->nHeight > chainActive.Height()) {\n+        // Reduce validity flag and have-data flags.\n+        // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+        // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n         // Note: If we encounter an insufficiently validated block that\n         // is on chainActive, it must be because we are a pruning node, and\n         // this block or some successor doesn't HAVE_DATA, so we were unable to\n         // rewind all the way.  Blocks remaining on chainActive at this point\n         // must not have their validity reduced.\n-        if (IsWitnessEnabled(tip->pprev, params.GetConsensus()) && !(tip->nStatus & BLOCK_OPT_WITNESS)) {\n-            EraseBlockData(tip);\n-        }\n+        EraseBlockData(tip);\n+\n         tip = tip->pprev;\n+\n+        // Occasionally flush state to disk.\n+        if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n+            LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n+            return false;\n+        }\n     }\n \n     if (chainActive.Tip() != nullptr) {"
      }
    ]
  },
  {
    "sha": "436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzZmN2Q3MzVmMWMzN2U3N2Q0MmZmNTlkNGNiYjFiZDc2ZDVmY2Zi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-13T23:32:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-25T02:55:17Z"
      },
      "message": "Release cs_main during RewindBlockIndex operation",
      "tree": {
        "sha": "afffbb1c92bb12400590150377b497fd3e8d11c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afffbb1c92bb12400590150377b497fd3e8d11c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d342875c21b5d0a17cf4d176063bb14b35b657e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d342875c21b5d0a17cf4d176063bb14b35b657e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d342875c21b5d0a17cf4d176063bb14b35b657e"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 57,
      "deletions": 45
    },
    "files": [
      {
        "sha": "da92a1d1caa946e828ce8b38f4b710c376e8117c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 45,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
        "patch": "@@ -4208,77 +4208,89 @@ void CChainState::EraseBlockData(CBlockIndex* index)\n \n bool CChainState::RewindBlockIndex(const CChainParams& params)\n {\n-    LOCK(cs_main);\n     // Note that during -reindex-chainstate we are called with an empty chainActive!\n \n     // First erase all post-segwit blocks without witness not in the main chain,\n     // as this can we done without costly DisconnectTip calls. Active\n-    // blocks will be dealt with below.\n-    for (const auto& entry : mapBlockIndex) {\n-        if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n-            EraseBlockData(entry.second);\n+    // blocks will be dealt with below (releasing cs_main in between).\n+    {\n+        LOCK(cs_main);\n+        for (const auto& entry : mapBlockIndex) {\n+            if (IsWitnessEnabled(entry.second->pprev, params.GetConsensus()) && !(entry.second->nStatus & BLOCK_OPT_WITNESS) && !chainActive.Contains(entry.second)) {\n+                EraseBlockData(entry.second);\n+            }\n         }\n     }\n \n     // Find what height we need to reorganize to.\n+    CBlockIndex *tip;\n     int nHeight = 1;\n-    while (nHeight <= chainActive.Height()) {\n-        // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n-        // blocks in ConnectBlock, we don't need to go back and\n-        // re-download/re-verify blocks from before segwit actually activated.\n-        if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n-            break;\n+    {\n+        LOCK(cs_main);\n+        while (nHeight <= chainActive.Height()) {\n+            // Although SCRIPT_VERIFY_WITNESS is now generally enforced on all\n+            // blocks in ConnectBlock, we don't need to go back and\n+            // re-download/re-verify blocks from before segwit actually activated.\n+            if (IsWitnessEnabled(chainActive[nHeight - 1], params.GetConsensus()) && !(chainActive[nHeight]->nStatus & BLOCK_OPT_WITNESS)) {\n+                break;\n+            }\n+            nHeight++;\n         }\n-        nHeight++;\n-    }\n \n+        tip = chainActive.Tip();\n+    }\n     // nHeight is now the height of the first insufficiently-validated block, or tipheight + 1\n+\n     CValidationState state;\n-    CBlockIndex* tip = chainActive.Tip();\n     // Loop until the tip is below nHeight, or we reach a pruned block.\n     while (true) {\n-        // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n-        assert(tip == chainActive.Tip());\n-        if (tip == nullptr || tip->nHeight < nHeight) break;\n-        if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n-            // If pruning, don't try rewinding past the HAVE_DATA point;\n-            // since older blocks can't be served anyway, there's\n-            // no need to walk further, and trying to DisconnectTip()\n-            // will fail (and require a needless reindex/redownload\n-            // of the blockchain).\n-            break;\n-        }\n-\n-        // Disconnect block\n-        if (!DisconnectTip(state, params, nullptr)) {\n-            return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n-        }\n+        {\n+            LOCK(cs_main);\n+            // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)\n+            assert(tip == chainActive.Tip());\n+            if (tip == nullptr || tip->nHeight < nHeight) break;\n+            if (fPruneMode && !(tip->nStatus & BLOCK_HAVE_DATA)) {\n+                // If pruning, don't try rewinding past the HAVE_DATA point;\n+                // since older blocks can't be served anyway, there's\n+                // no need to walk further, and trying to DisconnectTip()\n+                // will fail (and require a needless reindex/redownload\n+                // of the blockchain).\n+                break;\n+            }\n \n-        // Reduce validity flag and have-data flags.\n-        // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n-        // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n-        // Note: If we encounter an insufficiently validated block that\n-        // is on chainActive, it must be because we are a pruning node, and\n-        // this block or some successor doesn't HAVE_DATA, so we were unable to\n-        // rewind all the way.  Blocks remaining on chainActive at this point\n-        // must not have their validity reduced.\n-        EraseBlockData(tip);\n+            // Disconnect block\n+            if (!DisconnectTip(state, params, nullptr)) {\n+                return error(\"RewindBlockIndex: unable to disconnect block at height %i (%s)\", tip->nHeight, FormatStateMessage(state));\n+            }\n \n-        tip = tip->pprev;\n+            // Reduce validity flag and have-data flags.\n+            // We do this after actual disconnecting, otherwise we'll end up writing the lack of data\n+            // to disk before writing the chainstate, resulting in a failure to continue if interrupted.\n+            // Note: If we encounter an insufficiently validated block that\n+            // is on chainActive, it must be because we are a pruning node, and\n+            // this block or some successor doesn't HAVE_DATA, so we were unable to\n+            // rewind all the way.  Blocks remaining on chainActive at this point\n+            // must not have their validity reduced.\n+            EraseBlockData(tip);\n \n+            tip = tip->pprev;\n+        }\n         // Occasionally flush state to disk.\n         if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n             LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));\n             return false;\n         }\n     }\n \n-    if (chainActive.Tip() != nullptr) {\n-        // We can't prune block index candidates based on our tip if we have\n-        // no tip due to chainActive being empty!\n-        PruneBlockIndexCandidates();\n+    {\n+        LOCK(cs_main);\n+        if (chainActive.Tip() != nullptr) {\n+            // We can't prune block index candidates based on our tip if we have\n+            // no tip due to chainActive being empty!\n+            PruneBlockIndexCandidates();\n \n-        CheckBlockIndex(params.GetConsensus());\n+            CheckBlockIndex(params.GetConsensus());\n+        }\n     }\n \n     return true;"
      }
    ]
  },
  {
    "sha": "880ce7d46b51835c00d77a366ec28f54a05239df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODBjZTdkNDZiNTE4MzVjMDBkNzdhMzY2ZWMyOGY1NGEwNTIzOWRm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-13T23:39:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-25T02:55:21Z"
      },
      "message": "Call RewindBlockIndex without cs_main held",
      "tree": {
        "sha": "d6df5f9c5cb4aabc316277bb80c9344b7081c14a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6df5f9c5cb4aabc316277bb80c9344b7081c14a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/880ce7d46b51835c00d77a366ec28f54a05239df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/880ce7d46b51835c00d77a366ec28f54a05239df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/880ce7d46b51835c00d77a366ec28f54a05239df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/880ce7d46b51835c00d77a366ec28f54a05239df/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/436f7d735f1c37e77d42ff59d4cbb1bd76d5fcfb"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "dc46c80f69407015371103291c03db959ee5e6ba",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/880ce7d46b51835c00d77a366ec28f54a05239df/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/880ce7d46b51835c00d77a366ec28f54a05239df/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=880ce7d46b51835c00d77a366ec28f54a05239df",
        "patch": "@@ -1474,11 +1474,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n \n         uiInterface.InitMessage(_(\"Loading block index...\"));\n \n-        LOCK(cs_main);\n-\n         do {\n             const int64_t load_block_index_start_time = GetTimeMillis();\n+            bool is_coinsview_empty;\n             try {\n+                LOCK(cs_main);\n                 UnloadBlockIndex();\n                 pcoinsTip.reset();\n                 pcoinsdbview.reset();\n@@ -1550,7 +1550,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n                 // The on-disk coinsdb is now in a good state, create the cache\n                 pcoinsTip.reset(new CCoinsViewCache(pcoinscatcher.get()));\n \n-                bool is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n+                is_coinsview_empty = fReset || fReindexChainState || pcoinsTip->GetBestBlock().IsNull();\n                 if (!is_coinsview_empty) {\n                     // LoadChainTip sets chainActive based on pcoinsTip's best block\n                     if (!LoadChainTip(chainparams)) {\n@@ -1559,18 +1559,25 @@ bool AppInitMain(InitInterfaces& interfaces)\n                     }\n                     assert(chainActive.Tip() != nullptr);\n                 }\n+            } catch (const std::exception& e) {\n+                LogPrintf(\"%s\\n\", e.what());\n+                strLoadError = _(\"Error opening block database\");\n+                break;\n+            }\n \n-                if (!fReset) {\n-                    // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n-                    // It both disconnects blocks based on chainActive, and drops block data in\n-                    // mapBlockIndex based on lack of available witness data.\n-                    uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n-                    if (!RewindBlockIndex(chainparams)) {\n-                        strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n-                        break;\n-                    }\n+            if (!fReset) {\n+                // Note that RewindBlockIndex MUST run even if we're about to -reindex-chainstate.\n+                // It both disconnects blocks based on chainActive, and drops block data in\n+                // mapBlockIndex based on lack of available witness data.\n+                uiInterface.InitMessage(_(\"Rewinding blocks...\"));\n+                if (!RewindBlockIndex(chainparams)) {\n+                    strLoadError = _(\"Unable to rewind the database to a pre-fork state. You will need to redownload the blockchain\");\n+                    break;\n                 }\n+            }\n \n+            try {\n+                LOCK(cs_main);\n                 if (!is_coinsview_empty) {\n                     uiInterface.InitMessage(_(\"Verifying blocks...\"));\n                     if (fHavePruned && gArgs.GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS) > MIN_BLOCKS_TO_KEEP) {"
      }
    ]
  },
  {
    "sha": "241b2c74ac8c4c3000e778554da1271e3f293e5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDFiMmM3NGFjOGM0YzMwMDBlNzc4NTU0ZGExMjcxZTNmMjkzZTVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-14T01:20:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-25T02:55:21Z"
      },
      "message": "Make RewindBlockIndex interruptible",
      "tree": {
        "sha": "e0547aea25d2417b8657ed83e49d3f0e6c440297",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0547aea25d2417b8657ed83e49d3f0e6c440297"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/241b2c74ac8c4c3000e778554da1271e3f293e5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241b2c74ac8c4c3000e778554da1271e3f293e5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/241b2c74ac8c4c3000e778554da1271e3f293e5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241b2c74ac8c4c3000e778554da1271e3f293e5d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "880ce7d46b51835c00d77a366ec28f54a05239df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/880ce7d46b51835c00d77a366ec28f54a05239df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/880ce7d46b51835c00d77a366ec28f54a05239df"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1de2cda5cd6c9485370e625aeb1f68671ee33c7f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/241b2c74ac8c4c3000e778554da1271e3f293e5d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/241b2c74ac8c4c3000e778554da1271e3f293e5d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=241b2c74ac8c4c3000e778554da1271e3f293e5d",
        "patch": "@@ -4243,7 +4243,7 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n     CValidationState state;\n     // Loop until the tip is below nHeight, or we reach a pruned block.\n-    while (true) {\n+    while (!ShutdownRequested()) {\n         {\n             LOCK(cs_main);\n             // Make sure nothing changed from under us (this won't happen because RewindBlockIndex runs before importing/network are active)"
      }
    ]
  },
  {
    "sha": "9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YjFmZjVjNzQyZGVjMGE2ZTBkNmFhYjI5YjBiYjc3MWFkNmQ4MTM1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-13T23:53:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-25T02:55:21Z"
      },
      "message": "Call InvalidateBlock without cs_main held",
      "tree": {
        "sha": "6b3d329b0b99b1219a487d083fdd076b9725e217",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b3d329b0b99b1219a487d083fdd076b9725e217"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "241b2c74ac8c4c3000e778554da1271e3f293e5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/241b2c74ac8c4c3000e778554da1271e3f293e5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/241b2c74ac8c4c3000e778554da1271e3f293e5d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1169446eff3587fa2dd9c8c4cbc298ecee0a4961",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
        "patch": "@@ -1583,15 +1583,15 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n     uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n     CValidationState state;\n \n+    CBlockIndex* pblockindex;\n     {\n         LOCK(cs_main);\n-        CBlockIndex* pblockindex = LookupBlockIndex(hash);\n+        pblockindex = LookupBlockIndex(hash);\n         if (!pblockindex) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n-\n-        InvalidateBlock(state, Params(), pblockindex);\n     }\n+    InvalidateBlock(state, Params(), pblockindex);\n \n     if (state.IsValid()) {\n         ActivateBestChain(state, Params());"
      },
      {
        "sha": "dd4436c9cf9dccfee50f1adc614584117cf6861f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
        "patch": "@@ -177,7 +177,7 @@ class CChainState {\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n-    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex);\n     void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n@@ -2789,7 +2789,7 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    AssertLockHeld(cs_main);\n+    LOCK(cs_main);\n \n     // We first disconnect backwards and then mark the blocks as invalid.\n     // This prevents a case where pruned nodes may fail to invalidateblock"
      },
      {
        "sha": "65a378d8bab5314e3514de8383ea160407a3786b",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
        "patch": "@@ -448,7 +448,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex);\n \n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  },
  {
    "sha": "9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmIzMmViNTcxYTg0NmI2NmVkM2JhYzQ5M2Y1NWNlZTExYTNhMWI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-14T00:37:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T22:12:22Z"
      },
      "message": "Release cs_main during InvalidateBlock iterations",
      "tree": {
        "sha": "bf77edaf940ebc72d1bcb18b0cfecd98d76cdeda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf77edaf940ebc72d1bcb18b0cfecd98d76cdeda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb32eb571a846b66ed3bac493f55cee11a3a1b9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b1ff5c742dec0a6e0d6aab29b0bb771ad6d8135"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 50,
      "deletions": 40
    },
    "files": [
      {
        "sha": "8f7e9fba69e251324a08a0bdd0a2391f84725960",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 40,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bb32eb571a846b66ed3bac493f55cee11a3a1b9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bb32eb571a846b66ed3bac493f55cee11a3a1b9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
        "patch": "@@ -2789,64 +2789,74 @@ bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIn\n \n bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n-    LOCK(cs_main);\n-\n-    // We first disconnect backwards and then mark the blocks as invalid.\n-    // This prevents a case where pruned nodes may fail to invalidateblock\n-    // and be left unable to start as they have no tip candidates (as there\n-    // are no blocks that meet the \"have data and are not invalid per\n-    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-\n+    CBlockIndex* to_mark_failed = pindex;\n     bool pindex_was_in_chain = false;\n-    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n-    DisconnectedBlockTransactions disconnectpool;\n-    while (chainActive.Contains(pindex)) {\n+    // Disconnect (descendants of) pindex, and mark them invalid.\n+    while (true) {\n+        if (ShutdownRequested()) break;\n+\n+        LOCK(cs_main);\n+        if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n+        CBlockIndex *invalid_walk_tip = chainActive.Tip();\n+\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n-        if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n-            // It's probably hopeless to try to make the mempool consistent\n-            // here if DisconnectTip failed, but we can try.\n-            UpdateMempoolForReorg(disconnectpool, false);\n-            return false;\n-        }\n-    }\n+        DisconnectedBlockTransactions disconnectpool;\n+        bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n+        // DisconnectTip will add transactions to disconnectpool.\n+        // Adjust the mempool to be consistent with the new tip, adding\n+        // transactions back to the mempool if disconnecting was succesful.\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ ret);\n+        if (!ret) return false;\n+        assert(invalid_walk_tip->pprev == chainActive.Tip());\n \n-    // Now mark the blocks we just disconnected as descendants invalid\n-    // (note this may not be all descendants).\n-    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        // We immediately mark the disconnected blocks as invalid.\n+        // This prevents a case where pruned nodes may fail to invalidateblock\n+        // and be left unable to start as they have no tip candidates (as there\n+        // are no blocks that meet the \"have data and are not invalid per\n+        // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n         invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n-        invalid_walk_tip = invalid_walk_tip->pprev;\n+        setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+\n+        // If we abort invalidation after this iteration, make sure\n+        // the last disconnected block gets marked failed (rather than\n+        // just child of failed)\n+        to_mark_failed = invalid_walk_tip;\n     }\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n-    m_failed_blocks.insert(pindex);\n+    {\n+        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n+        LOCK(cs_main);\n+        if (chainActive.Contains(to_mark_failed)) {\n+            // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n+            return false;\n+        }\n \n-    // DisconnectTip will add transactions to disconnectpool; try to add these\n-    // back to the mempool.\n-    UpdateMempoolForReorg(disconnectpool, true);\n+        to_mark_failed->nStatus |= BLOCK_FAILED_VALID;\n+        setDirtyBlockIndex.insert(to_mark_failed);\n+        setBlockIndexCandidates.erase(to_mark_failed);\n+        m_failed_blocks.insert(to_mark_failed);\n \n-    // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-    // add it again.\n-    BlockMap::iterator it = mapBlockIndex.begin();\n-    while (it != mapBlockIndex.end()) {\n-        if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n-            setBlockIndexCandidates.insert(it->second);\n+        // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n+        // add it again.\n+        BlockMap::iterator it = mapBlockIndex.begin();\n+        while (it != mapBlockIndex.end()) {\n+            if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->HaveTxsDownloaded() && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n+                setBlockIndexCandidates.insert(it->second);\n+            }\n+            it++;\n         }\n-        it++;\n-    }\n \n-    InvalidChainFound(pindex);\n+        InvalidChainFound(to_mark_failed);\n+    }\n \n     // Only notify about a new block tip if the active chain was modified.\n     if (pindex_was_in_chain) {\n-        uiInterface.NotifyBlockTip(IsInitialBlockDownload(), pindex->pprev);\n+        uiInterface.NotifyBlockTip(IsInitialBlockDownload(), to_mark_failed->pprev);\n     }\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "9ce9c37004440d6a329874dbf66b51666d497dcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Y2U5YzM3MDA0NDQwZDZhMzI5ODc0ZGJmNjZiNTE2NjZkNDk3ZGNi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-14T01:17:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T22:12:26Z"
      },
      "message": "Prevent callback overruns in InvalidateBlock and RewindBlockIndex",
      "tree": {
        "sha": "9216cb28ab8efd03c9f1396b9f2b3f84373c37d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9216cb28ab8efd03c9f1396b9f2b3f84373c37d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ce9c37004440d6a329874dbf66b51666d497dcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce9c37004440d6a329874dbf66b51666d497dcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ce9c37004440d6a329874dbf66b51666d497dcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce9c37004440d6a329874dbf66b51666d497dcb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bb32eb571a846b66ed3bac493f55cee11a3a1b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bb32eb571a846b66ed3bac493f55cee11a3a1b9"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 21,
      "deletions": 9
    },
    "files": [
      {
        "sha": "d0d2227664625237f3b969e91ce640e22e582484",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ce9c37004440d6a329874dbf66b51666d497dcb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ce9c37004440d6a329874dbf66b51666d497dcb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9ce9c37004440d6a329874dbf66b51666d497dcb",
        "patch": "@@ -2642,6 +2642,14 @@ static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     }\n }\n \n+static void LimitValidationInterfaceQueue() {\n+    AssertLockNotHeld(cs_main);\n+\n+    if (GetMainSignals().CallbacksPending() > 10) {\n+        SyncWithValidationInterfaceQueue();\n+    }\n+}\n+\n /**\n  * Make the best chain active, in multiple steps. The result is either failure\n  * or an activated best chain. pblock is either nullptr or a pointer to a block\n@@ -2670,15 +2678,13 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n     do {\n         boost::this_thread::interruption_point();\n \n-        if (GetMainSignals().CallbacksPending() > 10) {\n-            // Block until the validation queue drains. This should largely\n-            // never happen in normal operation, however may happen during\n-            // reindex, causing memory blowup if we run too far ahead.\n-            // Note that if a validationinterface callback ends up calling\n-            // ActivateBestChain this may lead to a deadlock! We should\n-            // probably have a DEBUG_LOCKORDER test for this in the future.\n-            SyncWithValidationInterfaceQueue();\n-        }\n+        // Block until the validation queue drains. This should largely\n+        // never happen in normal operation, however may happen during\n+        // reindex, causing memory blowup if we run too far ahead.\n+        // Note that if a validationinterface callback ends up calling\n+        // ActivateBestChain this may lead to a deadlock! We should\n+        // probably have a DEBUG_LOCKORDER test for this in the future.\n+        LimitValidationInterfaceQueue();\n \n         {\n             LOCK(cs_main);\n@@ -2796,6 +2802,9 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     while (true) {\n         if (ShutdownRequested()) break;\n \n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n+\n         LOCK(cs_main);\n         if (!chainActive.Contains(pindex)) break;\n         pindex_was_in_chain = true;\n@@ -4285,6 +4294,9 @@ bool CChainState::RewindBlockIndex(const CChainParams& params)\n \n             tip = tip->pprev;\n         }\n+        // Make sure the queue of validation callbacks doesn't grow unboundedly.\n+        LimitValidationInterfaceQueue();\n+\n         // Occasionally flush state to disk.\n         if (!FlushStateToDisk(params, state, FlushStateMode::PERIODIC)) {\n             LogPrintf(\"RewindBlockIndex: unable to flush state to disk (%s)\\n\", FormatStateMessage(state));"
      }
    ]
  },
  {
    "sha": "8d220417cd7bc34464e28a4861a885193ec091c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDIyMDQxN2NkN2JjMzQ0NjRlMjhhNDg2MWE4ODUxOTNlYzA5MWMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-14T02:07:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-02-28T22:12:26Z"
      },
      "message": "Optimization: don't add txn back to mempool after 10 invalidates",
      "tree": {
        "sha": "36a2ab48f4543bde188b54054a792d971628f220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36a2ab48f4543bde188b54054a792d971628f220"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d220417cd7bc34464e28a4861a885193ec091c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d220417cd7bc34464e28a4861a885193ec091c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d220417cd7bc34464e28a4861a885193ec091c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d220417cd7bc34464e28a4861a885193ec091c2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ce9c37004440d6a329874dbf66b51666d497dcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ce9c37004440d6a329874dbf66b51666d497dcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ce9c37004440d6a329874dbf66b51666d497dcb"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c112fbdcc0563be02725fb66ca122a15e78fe8e7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d220417cd7bc34464e28a4861a885193ec091c2/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d220417cd7bc34464e28a4861a885193ec091c2/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8d220417cd7bc34464e28a4861a885193ec091c2",
        "patch": "@@ -2797,6 +2797,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n {\n     CBlockIndex* to_mark_failed = pindex;\n     bool pindex_was_in_chain = false;\n+    int disconnected = 0;\n \n     // Disconnect (descendants of) pindex, and mark them invalid.\n     while (true) {\n@@ -2816,8 +2817,10 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         bool ret = DisconnectTip(state, chainparams, &disconnectpool);\n         // DisconnectTip will add transactions to disconnectpool.\n         // Adjust the mempool to be consistent with the new tip, adding\n-        // transactions back to the mempool if disconnecting was succesful.\n-        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ ret);\n+        // transactions back to the mempool if disconnecting was succesful,\n+        // and we're not doing a very deep invalidation (in which case\n+        // keeping the mempool up to date is probably futile anyway).\n+        UpdateMempoolForReorg(disconnectpool, /* fAddToMempool = */ (++disconnected <= 10) && ret);\n         if (!ret) return false;\n         assert(invalid_walk_tip->pprev == chainActive.Tip());\n "
      }
    ]
  },
  {
    "sha": "519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTliMGJjNWRjNTE1NWI2ZjdlMjM2MmMyMTA1NTUyYmI3NjE4YWQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-03T21:01:26Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-03-03T21:01:26Z"
      },
      "message": "Make last disconnected block BLOCK_FAILED_VALID, even when aborted",
      "tree": {
        "sha": "8601e0a0d0816d2ebe6e7cf093d2e3cef0e4ce5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8601e0a0d0816d2ebe6e7cf093d2e3cef0e4ce5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/519b0bc5dc5155b6f7e2362c2105552bb7618ad0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d220417cd7bc34464e28a4861a885193ec091c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d220417cd7bc34464e28a4861a885193ec091c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d220417cd7bc34464e28a4861a885193ec091c2"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "55fd8d99a25d81a629f024107cbdc408d22a0e4a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/519b0bc5dc5155b6f7e2362c2105552bb7618ad0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/519b0bc5dc5155b6f7e2362c2105552bb7618ad0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=519b0bc5dc5155b6f7e2362c2105552bb7618ad0",
        "patch": "@@ -2829,25 +2829,30 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n         // and be left unable to start as they have no tip candidates (as there\n         // are no blocks that meet the \"have data and are not invalid per\n         // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n-        invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n+        invalid_walk_tip->nStatus |= BLOCK_FAILED_VALID;\n         setDirtyBlockIndex.insert(invalid_walk_tip);\n         setBlockIndexCandidates.erase(invalid_walk_tip);\n         setBlockIndexCandidates.insert(invalid_walk_tip->pprev);\n+        if (invalid_walk_tip->pprev == to_mark_failed && (to_mark_failed->nStatus & BLOCK_FAILED_VALID)) {\n+            // We only want to mark the last disconnected block as BLOCK_FAILED_VALID; its children\n+            // need to be BLOCK_FAILED_CHILD instead.\n+            to_mark_failed->nStatus = (to_mark_failed->nStatus ^ BLOCK_FAILED_VALID) | BLOCK_FAILED_CHILD;\n+            setDirtyBlockIndex.insert(to_mark_failed);\n+        }\n \n-        // If we abort invalidation after this iteration, make sure\n-        // the last disconnected block gets marked failed (rather than\n-        // just child of failed)\n+        // Track the last disconnected block, so we can correct its BLOCK_FAILED_CHILD status in future\n+        // iterations, or, if it's the last one, call InvalidChainFound on it.\n         to_mark_failed = invalid_walk_tip;\n     }\n \n     {\n-        // Mark pindex (or the last disconnected block) as invalid, regardless of whether it was in the main chain or not.\n         LOCK(cs_main);\n         if (chainActive.Contains(to_mark_failed)) {\n             // If the to-be-marked invalid block is in the active chain, something is interfering and we can't proceed.\n             return false;\n         }\n \n+        // Mark pindex (or the last disconnected block) as invalid, even when it never was in the main chain\n         to_mark_failed->nStatus |= BLOCK_FAILED_VALID;\n         setDirtyBlockIndex.insert(to_mark_failed);\n         setBlockIndexCandidates.erase(to_mark_failed);"
      }
    ]
  }
]