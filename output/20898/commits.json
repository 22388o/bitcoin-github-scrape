[
  {
    "sha": "74869a63d8ba1172ded19517a3044e9d9a64c401",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDg2OWE2M2Q4YmExMTcyZGVkMTk1MTdhMzA0NGU5ZDlhNjRjNDAx",
    "commit": {
      "author": {
        "name": "jackielove4u",
        "email": "jackielove4u@hotmail.com",
        "date": "2021-01-10T11:14:02Z"
      },
      "committer": {
        "name": "jackielove4u",
        "email": "jackielove4u@hotmail.com",
        "date": "2021-01-10T11:14:02Z"
      },
      "message": "Build: update clang patch to use heredoc",
      "tree": {
        "sha": "85c4fd463435e6c529ffa22e7d0c32aa6e2c6890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85c4fd463435e6c529ffa22e7d0c32aa6e2c6890"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74869a63d8ba1172ded19517a3044e9d9a64c401",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEKHrkyhGHxowItJyy0RvU8z8dtJkFAl/64XoACgkQ0RvU8z8d\ntJk/awf/aMfkm6xHyBgniaRD/LDX2AGi3/YPA3UlnFE0hVNIh4vW0m1rMdP2XFHg\nHNf/C2nv9nTCZvHdNI3y6fMXJ8HprxWgxqGUhQcZBH4r4/WN5akPjoampb4XDmBt\nKwIV1YrzENedB5nbRzLzRTKYqGdiBM0QwG9+VdN8hz0Q1gj2dK5+UI2MbXhPStTC\nXSohSt9ZNi2mfVfmVcKCjTHe8crTyLBNch4OiW4i7OZwbitJbOliYr96saQleI+u\nDYy1CWxxwPp0v2CBp3WQl9hV/pOz/qvpyDcZEClHnDzHQ34LD9w0bV9kTV5FuZxr\nZr9zQ+bKOzw8a2li5/YF9GkIUE7/QA==\n=RpFQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 85c4fd463435e6c529ffa22e7d0c32aa6e2c6890\nparent 094402430925ec5aac6edbbf52d74f10c665da43\nauthor jackielove4u <jackielove4u@hotmail.com> 1610277242 +0100\ncommitter jackielove4u <jackielove4u@hotmail.com> 1610277242 +0100\n\nBuild: update clang patch to use heredoc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74869a63d8ba1172ded19517a3044e9d9a64c401",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74869a63d8ba1172ded19517a3044e9d9a64c401",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74869a63d8ba1172ded19517a3044e9d9a64c401/comments",
    "author": {
      "login": "gruve-p",
      "id": 11212268,
      "node_id": "MDQ6VXNlcjExMjEyMjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gruve-p",
      "html_url": "https://github.com/gruve-p",
      "followers_url": "https://api.github.com/users/gruve-p/followers",
      "following_url": "https://api.github.com/users/gruve-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/gruve-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gruve-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
      "organizations_url": "https://api.github.com/users/gruve-p/orgs",
      "repos_url": "https://api.github.com/users/gruve-p/repos",
      "events_url": "https://api.github.com/users/gruve-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gruve-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gruve-p",
      "id": 11212268,
      "node_id": "MDQ6VXNlcjExMjEyMjY4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11212268?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gruve-p",
      "html_url": "https://github.com/gruve-p",
      "followers_url": "https://api.github.com/users/gruve-p/followers",
      "following_url": "https://api.github.com/users/gruve-p/following{/other_user}",
      "gists_url": "https://api.github.com/users/gruve-p/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gruve-p/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gruve-p/subscriptions",
      "organizations_url": "https://api.github.com/users/gruve-p/orgs",
      "repos_url": "https://api.github.com/users/gruve-p/repos",
      "events_url": "https://api.github.com/users/gruve-p/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gruve-p/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "094402430925ec5aac6edbbf52d74f10c665da43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/094402430925ec5aac6edbbf52d74f10c665da43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/094402430925ec5aac6edbbf52d74f10c665da43"
      }
    ],
    "stats": {
      "total": 153,
      "additions": 149,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0a022229e3001556f7dafaccac5cbb62368dd81f",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 149,
        "deletions": 4,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74869a63d8ba1172ded19517a3044e9d9a64c401/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74869a63d8ba1172ded19517a3044e9d9a64c401/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=74869a63d8ba1172ded19517a3044e9d9a64c401",
        "patch": "@@ -68,10 +68,155 @@ tar -xzvf ${BDB_VERSION}.tar.gz -C \"$BDB_PREFIX\"\n cd \"${BDB_PREFIX}/${BDB_VERSION}/\"\n \n # Apply a patch necessary when building with clang and c++11 (see https://community.oracle.com/thread/3952592)\n-CLANG_CXX11_PATCH_URL='https://gist.githubusercontent.com/LnL7/5153b251fd525fe15de69b67e63a6075/raw/7778e9364679093a32dec2908656738e16b6bdcb/clang.patch'\n-CLANG_CXX11_PATCH_HASH='7a9a47b03fd5fb93a16ef42235fa9512db9b0829cfc3bdf90edd3ec1f44d637c'\n-http_get \"${CLANG_CXX11_PATCH_URL}\" clang.patch \"${CLANG_CXX11_PATCH_HASH}\"\n-patch -p2 < clang.patch\n+patch --ignore-whitespace -p2 << 'EOF'\n+commit 3311d68f11d1697565401eee6efc85c34f022ea7\n+Author: fanquake <fanquake@gmail.com>\n+Date:   Mon Aug 17 20:03:56 2020 +0800\n+\n+    Fix C++11 compatibility\n+\n+diff --git a/dbinc/atomic.h b/dbinc/atomic.h\n+index 0034dcc..7c11d4a 100644\n+--- a/dbinc/atomic.h\n++++ b/dbinc/atomic.h\n+@@ -70,7 +70,7 @@ typedef struct {\n+  * These have no memory barriers; the caller must include them when necessary.\n+  */\n+ #define\tatomic_read(p)\t\t((p)->value)\n+-#define\tatomic_init(p, val)\t((p)->value = (val))\n++#define\tatomic_init_db(p, val)\t((p)->value = (val))\n+\n+ #ifdef HAVE_ATOMIC_SUPPORT\n+\n+@@ -144,7 +144,7 @@ typedef LONG volatile *interlocked_val;\n+ #define\tatomic_inc(env, p)\t__atomic_inc(p)\n+ #define\tatomic_dec(env, p)\t__atomic_dec(p)\n+ #define\tatomic_compare_exchange(env, p, o, n)\t\\\n+-\t__atomic_compare_exchange((p), (o), (n))\n++\t__atomic_compare_exchange_db((p), (o), (n))\n+ static inline int __atomic_inc(db_atomic_t *p)\n+ {\n+ \tint\ttemp;\n+@@ -176,7 +176,7 @@ static inline int __atomic_dec(db_atomic_t *p)\n+  * http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html\n+  * which configure could be changed to use.\n+  */\n+-static inline int __atomic_compare_exchange(\n++static inline int __atomic_compare_exchange_db(\n+ \tdb_atomic_t *p, atomic_value_t oldval, atomic_value_t newval)\n+ {\n+ \tatomic_value_t was;\n+@@ -206,7 +206,7 @@ static inline int __atomic_compare_exchange(\n+ #define\tatomic_dec(env, p)\t(--(p)->value)\n+ #define\tatomic_compare_exchange(env, p, oldval, newval)\t\t\\\n+ \t(DB_ASSERT(env, atomic_read(p) == (oldval)),\t\t\\\n+-\tatomic_init(p, (newval)), 1)\n++\tatomic_init_db(p, (newval)), 1)\n+ #else\n+ #define atomic_inc(env, p)\t__atomic_inc(env, p)\n+ #define atomic_dec(env, p)\t__atomic_dec(env, p)\n+diff --git a/mp/mp_fget.c b/mp/mp_fget.c\n+index 5fdee5a..0b75f57 100644\n+--- a/mp/mp_fget.c\n++++ b/mp/mp_fget.c\n+@@ -617,7 +617,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+\n+ \t\t/* Initialize enough so we can call __memp_bhfree. */\n+ \t\talloc_bhp->flags = 0;\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ #ifdef DIAGNOSTIC\n+ \t\tif ((uintptr_t)alloc_bhp->buf & (sizeof(size_t) - 1)) {\n+ \t\t\t__db_errx(env,\n+@@ -911,7 +911,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n+ \t\t\tMVCC_MPROTECT(bhp->buf, mfp->stat.st_pagesize,\n+ \t\t\t    PROT_READ);\n+\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+ \t\talloc_bhp->priority = bhp->priority;\n+ \t\talloc_bhp->pgno = bhp->pgno;\n+diff --git a/mp/mp_mvcc.c b/mp/mp_mvcc.c\n+index 34467d2..f05aa0c 100644\n+--- a/mp/mp_mvcc.c\n++++ b/mp/mp_mvcc.c\n+@@ -276,7 +276,7 @@ __memp_bh_freeze(dbmp, infop, hp, bhp, need_frozenp)\n+ #else\n+ \tmemcpy(frozen_bhp, bhp, SSZA(BH, buf));\n+ #endif\n+-\tatomic_init(&frozen_bhp->ref, 0);\n++\tatomic_init_db(&frozen_bhp->ref, 0);\n+ \tif (mutex != MUTEX_INVALID)\n+ \t\tfrozen_bhp->mtx_buf = mutex;\n+ \telse if ((ret = __mutex_alloc(env, MTX_MPOOL_BH,\n+@@ -428,7 +428,7 @@ __memp_bh_thaw(dbmp, infop, hp, frozen_bhp, alloc_bhp)\n+ #endif\n+ \t\talloc_bhp->mtx_buf = mutex;\n+ \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n+-\t\tatomic_init(&alloc_bhp->ref, 1);\n++\t\tatomic_init_db(&alloc_bhp->ref, 1);\n+ \t\tF_CLR(alloc_bhp, BH_FROZEN);\n+ \t}\n+\n+diff --git a/mp/mp_region.c b/mp/mp_region.c\n+index e6cece9..ddbe906 100644\n+--- a/mp/mp_region.c\n++++ b/mp/mp_region.c\n+@@ -224,7 +224,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\t\t     MTX_MPOOL_FILE_BUCKET, 0, &htab[i].mtx_hash)) != 0)\n+ \t\t\t\treturn (ret);\n+ \t\t\tSH_TAILQ_INIT(&htab[i].hash_bucket);\n+-\t\t\tatomic_init(&htab[i].hash_page_dirty, 0);\n++\t\t\tatomic_init_db(&htab[i].hash_page_dirty, 0);\n+ \t\t}\n+\n+ \t\t/*\n+@@ -269,7 +269,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n+ \t\thp->mtx_hash = (mtx_base == MUTEX_INVALID) ? MUTEX_INVALID :\n+ \t\t    mtx_base + i;\n+ \t\tSH_TAILQ_INIT(&hp->hash_bucket);\n+-\t\tatomic_init(&hp->hash_page_dirty, 0);\n++\t\tatomic_init_db(&hp->hash_page_dirty, 0);\n+ #ifdef HAVE_STATISTICS\n+ \t\thp->hash_io_wait = 0;\n+ \t\thp->hash_frozen = hp->hash_thawed = hp->hash_frozen_freed = 0;\n+diff --git a/mutex/mut_method.c b/mutex/mut_method.c\n+index 2588763..5c6d516 100644\n+--- a/mutex/mut_method.c\n++++ b/mutex/mut_method.c\n+@@ -426,7 +426,7 @@ atomic_compare_exchange(env, v, oldval, newval)\n+ \tMUTEX_LOCK(env, mtx);\n+ \tret = atomic_read(v) == oldval;\n+ \tif (ret)\n+-\t\tatomic_init(v, newval);\n++\t\tatomic_init_db(v, newval);\n+ \tMUTEX_UNLOCK(env, mtx);\n+\n+ \treturn (ret);\n+diff --git a/mutex/mut_tas.c b/mutex/mut_tas.c\n+index f3922e0..e40fcdf 100644\n+--- a/mutex/mut_tas.c\n++++ b/mutex/mut_tas.c\n+@@ -46,7 +46,7 @@ __db_tas_mutex_init(env, mutex, flags)\n+\n+ #ifdef HAVE_SHARED_LATCHES\n+ \tif (F_ISSET(mutexp, DB_MUTEX_SHARED))\n+-\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \telse\n+ #endif\n+ \tif (MUTEX_INIT(&mutexp->tas)) {\n+@@ -486,7 +486,7 @@ __db_tas_mutex_unlock(env, mutex)\n+ \t\t\tF_CLR(mutexp, DB_MUTEX_LOCKED);\n+ \t\t\t/* Flush flag update before zeroing count */\n+ \t\t\tMEMBAR_EXIT();\n+-\t\t\tatomic_init(&mutexp->sharecount, 0);\n++\t\t\tatomic_init_db(&mutexp->sharecount, 0);\n+ \t\t} else {\n+ \t\t\tDB_ASSERT(env, sharecount > 0);\n+ \t\t\tMEMBAR_EXIT();\n+EOF\n \n # The packaged config.guess and config.sub are ancient (2009) and can cause build issues.\n # Replace them with modern versions."
      }
    ]
  }
]