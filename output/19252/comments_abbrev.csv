DrahtBot,2020-06-13 02:56:47,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19134 (test: Replace global wait_until with BitcoinTestFramework.wait_until and mininode.wait_until by dboures)\n\nIf you",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-643558529,643558529,
glozow,2020-06-13 17:13:50,@jonatack addressed your comments on #19083 in [`afad631`](https://github.com/bitcoin/bitcoin/pull/19252/commits/afad631b1c48e475eba85053332fa9e3b62f9478) if you have time to take a look :),https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-643651533,643651533,
jonatack,2020-06-14 16:28:46,"(The number of test run samples is too small, but it might be interesting to look further into it.)",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-643789840,643789840,
glozow,2020-06-15 17:05:23,"> Concern: possible slowdown in test run times of ~10% in tests with `wait_for_disconnect`.\n\nHm :/ that slowdown seems pretty significant. I've thought of 2 possible solutions:\n\n1. What about an optional argument `wait_for_disconnect`, then allowing tests to decide if waiting isn't necessary (similar to `wait_for_verack` in `add_p2p_connection`)? \n2. I've also noticed that `disconnect_p2",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644256756,644256756,
jonatack,2020-06-15 17:29:54,@gzhao408 I've been reworking `p2p_invalid_messages.py` lately in #19272. I'll apply this patch to it and test avoiding `disconnect_p2ps`.,https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644268610,644268610,
glozow,2020-06-15 22:48:09,"Ok, I made waiting optional/default False which should theoretically make a good dent in the performance problems. Went through and added a couple `wait_for_disconnect=True`s to where I think it's needed. \nI accidentally left the PR link in the https://github.com/bitcoin/bitcoin/pull/19252/commits/81e82070b7c37b2a73e985bdef11e2bcb902d48c commit message, so I'll fix with next round of edits. Othe",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644428355,644428355,
MarcoFalke,2020-06-15 23:29:11,"Maybe the node.p2p property should be removed if it is causing so much trouble and complexity. There should be no downside to removing it unless I am missing something. Moreover, writing `conn = add_conn()` everywhere (even in the case of only one peer) even seems preferable for consistency anyway. Also, it is making code more clear at negative cost in complexity, since a reviewer/author doesn't h",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644442680,644442680,
jnewbery,2020-06-16 00:59:51,"@jonatack your test runs seem extraordinarily slow. Are you running under bitcoind with some additional debug instrumentation?\n\nHere are the same tests in my vm for comparison:\n\n<details><summary>test run times</summary><p>\n\nMaster:\n\n```\n1/11 - p2p_dos_header_tree.py passed, Duration: 2 s\n2/11 - p2p_blocksonly.py passed, Duration: 3 s\n3/11 - p2p_invalid_locator.py passed, Dur",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644467904,644467904,
jonatack,2020-06-16 04:55:05,"Isolated the issue :facepalm: Rebasing this PR onto 49236be or current master, `p2p_invalid_messages` runs much faster, with or without this change. John's PR made a huge improvement in its run time.\n\nre-ACK 628227ff8b0409546a0176a39a5491c069749fef (without the extra param)",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-644530432,644530432,
glozow,2020-06-16 21:35:10,"Rebased and addressed comments. Got rid of `wait_for_disconnect` üôÇ \n<details>\n<summary>My run times ¬Ø\_(„ÉÑ)_/¬Ø </summary>\n\nMaster:\n\n```\nTEST                          | STATUS    | DURATION\n\nfeature_maxuploadtarget.py    | ‚úì Passed  | 66 s\np2p_blockfilters.py           | ‚úì Passed  | 28 s\np2p_blocksonly.py             | ‚úì Passed  | 9 s\np2p_dos_header_tree.py        | ‚úì Passed ",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-645024297,645024297,
jonatack,2020-06-17 08:49:04,Code review ACK 9a40cfc from re-reviewing the diff and `git range-diff 5cafb46 8386ad5 9a40cfc`,https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-645243466,645243466,
MarcoFalke,2020-06-17 10:19:44,"ACK 9a40cfc558b3f7fa4fff1270f969582af17479a5 üêÇ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 9a40cfc558b3f7fa4fff1270f969582af17479a5 üêÇ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUi2dgv+OVPePBmXNQ90EcBVrvDet1CHNODyKbSS713qREEOfhwi9KN+2p",https://github.com/bitcoin/bitcoin/pull/19252#issuecomment-645287796,645287796,
jnewbery,2020-06-14 00:47:01,"Alternatively, use a conditional in the list comprehension:\n\n```\nreturn len([peer for peer in self.getpeerinfo() if peer['subver'] == MY_SUBVERSION])\n```\n\nI think that's slightly clearer, but it's probably just a personal preference thing.",https://github.com/bitcoin/bitcoin/pull/19252#discussion_r439781009,439781009,test/functional/test_framework/test_node.py
jnewbery,2020-06-14 00:48:43,"I think this would be slightly more concise if you say what you *are* counting (rather than saying what you're excluding):\n\n```suggestion\n        """"""Return number of test framework p2p connections to the node.""""""\n```",https://github.com/bitcoin/bitcoin/pull/19252#discussion_r439781078,439781078,test/functional/test_framework/test_node.py
MarcoFalke,2020-06-16 09:52:22,Also agree with John that this should not be a configurable parameter to keep the complexity down,https://github.com/bitcoin/bitcoin/pull/19252#discussion_r440728663,440728663,test/functional/test_framework/test_node.py
glozow,2020-06-16 15:19:57,Ok! üëç  will update with the rebase since it seems like the performance issue isn't too bad,https://github.com/bitcoin/bitcoin/pull/19252#discussion_r440935519,440935519,test/functional/test_framework/test_node.py
