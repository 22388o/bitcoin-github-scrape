[
  {
    "sha": "e81942d2e1288367e8da94adb2b2a88be99e4751",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplODE5NDJkMmUxMjg4MzY3ZThkYTk0YWRiMmIyYTg4YmU5OWU0NzUx",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-06-11T18:23:51Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-06-16T15:23:12Z"
      },
      "message": "[test] logging and style followups for bloomfilter tests\n\n-Use peer to refer to mininodes instead of node\nbecause they are not bitcoind nodes.\n-Use log.debug for logs that give helpful but\nnot super necessary information.\n-Adhere to style guidelines (newlines, capitalization).",
      "tree": {
        "sha": "b0e1e1ca10ce94854165864ca62c609c8a209031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0e1e1ca10ce94854165864ca62c609c8a209031"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e81942d2e1288367e8da94adb2b2a88be99e4751",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81942d2e1288367e8da94adb2b2a88be99e4751",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e81942d2e1288367e8da94adb2b2a88be99e4751",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81942d2e1288367e8da94adb2b2a88be99e4751/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b30c41b4ebf2eb70d8a3cd99cf4d05d405eec81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b30c41b4ebf2eb70d8a3cd99cf4d05d405eec81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b30c41b4ebf2eb70d8a3cd99cf4d05d405eec81"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "741da3be315a094f7da4e11cc0534302639b53db",
        "filename": "test/functional/p2p_filter.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81942d2e1288367e8da94adb2b2a88be99e4751/test/functional/p2p_filter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81942d2e1288367e8da94adb2b2a88be99e4751/test/functional/p2p_filter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_filter.py?ref=e81942d2e1288367e8da94adb2b2a88be99e4751",
        "patch": "@@ -124,11 +124,11 @@ def test_msg_mempool(self):\n         self.log.info(\"Check that a node with bloom filters enabled services p2p mempool messages\")\n         filter_peer = P2PBloomFilter()\n \n-        self.log.info(\"Create a tx relevant to the peer before connecting\")\n+        self.log.debug(\"Create a tx relevant to the peer before connecting\")\n         filter_address = self.nodes[0].decodescript(filter_peer.watch_script_pubkey)['addresses'][0]\n         txid = self.nodes[0].sendtoaddress(filter_address, 90)\n \n-        self.log.info(\"Send a mempool msg after connecting and check that the tx is received\")\n+        self.log.debug(\"Send a mempool msg after connecting and check that the tx is received\")\n         self.nodes[0].add_p2p_connection(filter_peer)\n         filter_peer.send_and_ping(filter_peer.watch_filter_init)\n         self.nodes[0].p2p.send_message(msg_mempool())\n@@ -227,8 +227,8 @@ def run_test(self):\n         self.test_frelay_false(filter_peer_without_nrelay)\n         self.test_filter(filter_peer_without_nrelay)\n \n-        self.log.info('Test msg_mempool')\n         self.test_msg_mempool()\n \n+\n if __name__ == '__main__':\n     FilterTest().main()"
      },
      {
        "sha": "accc5dc23cc062f2cf9eece48068759dee74e776",
        "filename": "test/functional/p2p_nobloomfilter_messages.py",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e81942d2e1288367e8da94adb2b2a88be99e4751/test/functional/p2p_nobloomfilter_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e81942d2e1288367e8da94adb2b2a88be99e4751/test/functional/p2p_nobloomfilter_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_nobloomfilter_messages.py?ref=e81942d2e1288367e8da94adb2b2a88be99e4751",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test invalid p2p messages for nodes with bloom filters disabled.\n \n-Test that, when bloom filters are not enabled, nodes are disconnected if:\n+Test that, when bloom filters are not enabled, peers are disconnected if:\n 1. They send a p2p mempool message\n 2. They send a p2p filterload message\n 3. They send a p2p filteradd message\n@@ -17,31 +17,32 @@\n from test_framework.util import assert_equal\n \n \n-class P2PNobloomfilterMessages(BitcoinTestFramework):\n+class P2PNoBloomFilterMessages(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-peerbloomfilters=0\"]]\n \n     def test_message_causes_disconnect(self, message):\n-        # Add a p2p connection that sends a message and check that it disconnects\n+        \"\"\"Add a p2p connection that sends a message and check that it disconnects.\"\"\"\n         peer = self.nodes[0].add_p2p_connection(P2PInterface())\n         peer.send_message(message)\n         peer.wait_for_disconnect()\n-        assert_equal(len(self.nodes[0].getpeerinfo()), 0)\n+        assert_equal(self.nodes[0].getconnectioncount(), 0)\n \n     def run_test(self):\n-        self.log.info(\"Test that node is disconnected if it sends mempool message\")\n+        self.log.info(\"Test that peer is disconnected if it sends mempool message\")\n         self.test_message_causes_disconnect(msg_mempool())\n \n-        self.log.info(\"Test that node is disconnected if it sends filterload message\")\n+        self.log.info(\"Test that peer is disconnected if it sends filterload message\")\n         self.test_message_causes_disconnect(msg_filterload())\n \n-        self.log.info(\"Test that node is disconnected if it sends filteradd message\")\n+        self.log.info(\"Test that peer is disconnected if it sends filteradd message\")\n         self.test_message_causes_disconnect(msg_filteradd(data=b'\\xcc'))\n \n         self.log.info(\"Test that peer is disconnected if it sends a filterclear message\")\n         self.test_message_causes_disconnect(msg_filterclear())\n \n+\n if __name__ == '__main__':\n-    P2PNobloomfilterMessages().main()\n+    P2PNoBloomFilterMessages().main()"
      }
    ]
  },
  {
    "sha": "aeb9fb414e2d000830287d9dd3fed7fc2eb570d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWI5ZmI0MTRlMmQwMDA4MzAyODdkOWRkM2ZlZDdmYzJlYjU3MGQy",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-06-12T21:54:23Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-06-16T15:26:13Z"
      },
      "message": "[test] wait for disconnect_p2ps to be reflected in getpeerinfo\n\n-Waiting is important to avoid race conditions,\nespecially if testing peer info through rpc later.\n-Wait for mininodes to be disconnected only, even\nthough it's more complex, because we may still want\nto be connected to test nodes.",
      "tree": {
        "sha": "a2e2f74069ea7b07565de9eb27fa83258142eada",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2e2f74069ea7b07565de9eb27fa83258142eada"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e81942d2e1288367e8da94adb2b2a88be99e4751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e81942d2e1288367e8da94adb2b2a88be99e4751",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e81942d2e1288367e8da94adb2b2a88be99e4751"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "66bb2c89b56b7a54defc2415968d98285a79d9b8",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=aeb9fb414e2d000830287d9dd3fed7fc2eb570d2",
        "patch": "@@ -23,6 +23,7 @@\n \n from .authproxy import JSONRPCException\n from .descriptors import descsum_create\n+from .messages import MY_SUBVERSION\n from .util import (\n     MAX_NODES,\n     append_config,\n@@ -549,11 +550,16 @@ def p2p(self):\n         assert self.p2ps, self._node_msg(\"No p2p connection\")\n         return self.p2ps[0]\n \n+    def num_connected_mininodes(self):\n+        \"\"\"Return number of test framework p2p connections to the node.\"\"\"\n+        return len([peer for peer in self.getpeerinfo() if peer['subver'] == MY_SUBVERSION])\n+\n     def disconnect_p2ps(self):\n         \"\"\"Close all p2p connections to the node.\"\"\"\n         for p in self.p2ps:\n             p.peer_disconnect()\n         del self.p2ps[:]\n+        wait_until(lambda: self.num_connected_mininodes() == 0)\n \n \n class TestNodeCLIAttr:"
      }
    ]
  },
  {
    "sha": "9a40cfc558b3f7fa4fff1270f969582af17479a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTQwY2ZjNTU4YjNmN2ZhNGZmZjEyNzBmOTY5NTgyYWYxNzQ3OWE1",
    "commit": {
      "author": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-06-12T22:03:33Z"
      },
      "committer": {
        "name": "gzhao408",
        "email": "gzhao408@berkeley.edu",
        "date": "2020-06-16T15:28:55Z"
      },
      "message": "[refactor] use waiting inside disconnect_p2ps\n\n-Use wait_for_disconnect instead of manual\nwait after calling disconnect_p2ps.",
      "tree": {
        "sha": "ca2499b791744c85dbd310697aeb26f7cade96ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca2499b791744c85dbd310697aeb26f7cade96ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a40cfc558b3f7fa4fff1270f969582af17479a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a40cfc558b3f7fa4fff1270f969582af17479a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a40cfc558b3f7fa4fff1270f969582af17479a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a40cfc558b3f7fa4fff1270f969582af17479a5/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeb9fb414e2d000830287d9dd3fed7fc2eb570d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeb9fb414e2d000830287d9dd3fed7fc2eb570d2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3b3dbd08f2c7b613c16623e18a93c7199f8a213c",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a40cfc558b3f7fa4fff1270f969582af17479a5/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a40cfc558b3f7fa4fff1270f969582af17479a5/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=9a40cfc558b3f7fa4fff1270f969582af17479a5",
        "patch": "@@ -132,9 +132,6 @@ def run_test(self):\n \n         self.nodes[0].disconnect_p2ps()\n \n-        # Wait until all connections are closed\n-        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n-\n         # Make sure no unexpected messages came in\n         assert no_version_bannode.unexpected_msg == False\n         assert no_version_idlenode.unexpected_msg == False"
      },
      {
        "sha": "a2f6ea538ccfd93d1c0943fcf4aa19d9a7eecd52",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a40cfc558b3f7fa4fff1270f969582af17479a5/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a40cfc558b3f7fa4fff1270f969582af17479a5/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=9a40cfc558b3f7fa4fff1270f969582af17479a5",
        "patch": "@@ -83,7 +83,6 @@ def run_test(self):\n         assert_equal(node1.firstAddrnServices, expected_services)\n \n         self.nodes[0].disconnect_p2ps()\n-        node1.wait_for_disconnect()\n \n         # connect unsynced node 2 with pruned NODE_NETWORK_LIMITED peer\n         # because node 2 is in IBD and node 0 is a NODE_NETWORK_LIMITED peer, sync must not be possible"
      }
    ]
  }
]