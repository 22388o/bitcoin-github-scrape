[
  {
    "sha": "4368384f1d267b011e03a805f934f5c47e2ca1b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzY4Mzg0ZjFkMjY3YjAxMWUwM2E4MDVmOTM0ZjVjNDdlMmNhMWIy",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-03-03T02:35:55Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "message": "index: Allow atomic commits of index state to be extended.",
      "tree": {
        "sha": "19895592c19ffb3c2ceee7509cdda57988bf1a5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19895592c19ffb3c2ceee7509cdda57988bf1a5f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4368384f1d267b011e03a805f934f5c47e2ca1b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4368384f1d267b011e03a805f934f5c47e2ca1b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4368384f1d267b011e03a805f934f5c47e2ca1b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4368384f1d267b011e03a805f934f5c47e2ca1b2/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e439aeb30c0439001a781c5979aec41e1fc2aa50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e439aeb30c0439001a781c5979aec41e1fc2aa50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e439aeb30c0439001a781c5979aec41e1fc2aa50"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 41,
      "deletions": 15
    },
    "files": [
      {
        "sha": "15ad04d462b582beaf6dddde12806609219b4b3c",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 12,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4368384f1d267b011e03a805f934f5c47e2ca1b2/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4368384f1d267b011e03a805f934f5c47e2ca1b2/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=4368384f1d267b011e03a805f934f5c47e2ca1b2",
        "patch": "@@ -41,9 +41,9 @@ bool BaseIndex::DB::ReadBestBlock(CBlockLocator& locator) const\n     return success;\n }\n \n-bool BaseIndex::DB::WriteBestBlock(const CBlockLocator& locator)\n+void BaseIndex::DB::WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator)\n {\n-    return Write(DB_BEST_BLOCK, locator);\n+    batch.Write(DB_BEST_BLOCK, locator);\n }\n \n BaseIndex::~BaseIndex()\n@@ -95,17 +95,22 @@ void BaseIndex::ThreadSync()\n         int64_t last_locator_write_time = 0;\n         while (true) {\n             if (m_interrupt) {\n-                WriteBestBlock(pindex);\n+                m_best_block_index = pindex;\n+                // No need to handle errors in Commit. If it fails, the error will be already be\n+                // logged. The best way to recover is to continue, as index cannot be corrupted by\n+                // a missed commit to disk for an advanced index state.\n+                Commit();\n                 return;\n             }\n \n             {\n                 LOCK(cs_main);\n                 const CBlockIndex* pindex_next = NextSyncBlock(pindex);\n                 if (!pindex_next) {\n-                    WriteBestBlock(pindex);\n                     m_best_block_index = pindex;\n                     m_synced = true;\n+                    // No need to handle errors in Commit. See rationale above.\n+                    Commit();\n                     break;\n                 }\n                 pindex = pindex_next;\n@@ -119,8 +124,10 @@ void BaseIndex::ThreadSync()\n             }\n \n             if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n-                WriteBestBlock(pindex);\n+                m_best_block_index = pindex;\n                 last_locator_write_time = current_time;\n+                // No need to handle errors in Commit. See rationale above.\n+                Commit();\n             }\n \n             CBlock block;\n@@ -144,15 +151,22 @@ void BaseIndex::ThreadSync()\n     }\n }\n \n-bool BaseIndex::WriteBestBlock(const CBlockIndex* block_index)\n+bool BaseIndex::Commit()\n {\n-    LOCK(cs_main);\n-    if (!GetDB().WriteBestBlock(chainActive.GetLocator(block_index))) {\n-        return error(\"%s: Failed to write locator to disk\", __func__);\n+    CDBBatch batch(GetDB());\n+    if (!CommitInternal(batch) || !GetDB().WriteBatch(batch)) {\n+        return error(\"%s: Failed to commit latest %s state\", __func__, GetName());\n     }\n     return true;\n }\n \n+bool BaseIndex::CommitInternal(CDBBatch& batch)\n+{\n+    LOCK(cs_main);\n+    GetDB().WriteBestBlock(batch, chainActive.GetLocator(m_best_block_index));\n+    return true;\n+}\n+\n void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                                const std::vector<CTransactionRef>& txn_conflicted)\n {\n@@ -224,9 +238,10 @@ void BaseIndex::ChainStateFlushed(const CBlockLocator& locator)\n         return;\n     }\n \n-    if (!GetDB().WriteBestBlock(locator)) {\n-        error(\"%s: Failed to write locator to disk\", __func__);\n-    }\n+    // No need to handle errors in Commit. If it fails, the error will be already be logged. The\n+    // best way to recover is to continue, as index cannot be corrupted by a missed commit to disk\n+    // for an advanced index state.\n+    Commit();\n }\n \n bool BaseIndex::BlockUntilSyncedToCurrentChain()"
      },
      {
        "sha": "77e614a3af8cbd31ed652a860680f7f771cd8a75",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4368384f1d267b011e03a805f934f5c47e2ca1b2/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4368384f1d267b011e03a805f934f5c47e2ca1b2/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=4368384f1d267b011e03a805f934f5c47e2ca1b2",
        "patch": "@@ -32,7 +32,7 @@ class BaseIndex : public CValidationInterface\n         bool ReadBestBlock(CBlockLocator& locator) const;\n \n         /// Write block locator of the chain that the txindex is in sync with.\n-        bool WriteBestBlock(const CBlockLocator& locator);\n+        void WriteBestBlock(CDBBatch& batch, const CBlockLocator& locator);\n     };\n \n private:\n@@ -54,8 +54,15 @@ class BaseIndex : public CValidationInterface\n     /// over and the sync thread exits.\n     void ThreadSync();\n \n-    /// Write the current chain block locator to the DB.\n-    bool WriteBestBlock(const CBlockIndex* block_index);\n+    /// Write the current index state (eg. chain block locator and subclass-specific items) to disk.\n+    ///\n+    /// Recommendations for error handling:\n+    /// If called on a successor of the previous committed best block in the index, the index can\n+    /// continue processing without risk of corruption, though the index state will need to catch up\n+    /// from further behind on reboot. If the new state is not a successor of the previous state (due\n+    /// to a chain reorganization), the index must halt until Commit succeeds or else it could end up\n+    /// getting corrupted.\n+    bool Commit();\n \n protected:\n     void BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n@@ -69,6 +76,10 @@ class BaseIndex : public CValidationInterface\n     /// Write update index entries for a newly connected block.\n     virtual bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) { return true; }\n \n+    /// Virtual method called internally by Commit that can be overridden to atomically\n+    /// commit more index state.\n+    virtual bool CommitInternal(CDBBatch& batch);\n+\n     virtual DB& GetDB() const = 0;\n \n     /// Get the name of the index for display in logs."
      }
    ]
  },
  {
    "sha": "62b7a4f09409f60a35fc99ddb70f9199ac511a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmI3YTRmMDk0MDlmNjBhMzVmYzk5ZGRiNzBmOTE5OWFjNTExYTUz",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-27T22:26:29Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "message": "index: Ensure block locator is not stale after chain reorg.",
      "tree": {
        "sha": "d1dcd104c38707ebb15efd1dcf2c7cc6bbc1cb39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1dcd104c38707ebb15efd1dcf2c7cc6bbc1cb39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62b7a4f09409f60a35fc99ddb70f9199ac511a53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b7a4f09409f60a35fc99ddb70f9199ac511a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62b7a4f09409f60a35fc99ddb70f9199ac511a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b7a4f09409f60a35fc99ddb70f9199ac511a53/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4368384f1d267b011e03a805f934f5c47e2ca1b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4368384f1d267b011e03a805f934f5c47e2ca1b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4368384f1d267b011e03a805f934f5c47e2ca1b2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9e48f0bd27196d32a29468f4490ec9388007ef22",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62b7a4f09409f60a35fc99ddb70f9199ac511a53/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62b7a4f09409f60a35fc99ddb70f9199ac511a53/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=62b7a4f09409f60a35fc99ddb70f9199ac511a53",
        "patch": "@@ -113,6 +113,11 @@ void BaseIndex::ThreadSync()\n                     Commit();\n                     break;\n                 }\n+                if (pindex_next->pprev != pindex && !Rewind(pindex, pindex_next->pprev)) {\n+                    FatalError(\"%s: Failed to rewind index %s to a previous chain tip\",\n+                               __func__, GetName());\n+                    return;\n+                }\n                 pindex = pindex_next;\n             }\n \n@@ -167,6 +172,22 @@ bool BaseIndex::CommitInternal(CDBBatch& batch)\n     return true;\n }\n \n+bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip == m_best_block_index);\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    // In the case of a reorg, ensure persisted block locator is not stale.\n+    m_best_block_index = new_tip;\n+    if (!Commit()) {\n+        // If commit fails, revert the best block index to avoid corruption.\n+        m_best_block_index = current_tip;\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const CBlockIndex* pindex,\n                                const std::vector<CTransactionRef>& txn_conflicted)\n {\n@@ -194,6 +215,11 @@ void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const\n                       best_block_index->GetBlockHash().ToString());\n             return;\n         }\n+        if (best_block_index != pindex->pprev && !Rewind(best_block_index, pindex->pprev)) {\n+            FatalError(\"%s: Failed to rewind index %s to a previous chain tip\",\n+                       __func__, GetName());\n+            return;\n+        }\n     }\n \n     if (WriteBlock(*block, pindex)) {"
      },
      {
        "sha": "31acbed0c186a37687e5a3aad67575a6855a5ac0",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62b7a4f09409f60a35fc99ddb70f9199ac511a53/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62b7a4f09409f60a35fc99ddb70f9199ac511a53/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=62b7a4f09409f60a35fc99ddb70f9199ac511a53",
        "patch": "@@ -80,6 +80,10 @@ class BaseIndex : public CValidationInterface\n     /// commit more index state.\n     virtual bool CommitInternal(CDBBatch& batch);\n \n+    /// Rewind index to an earlier chain tip during a chain reorg. The tip must\n+    /// be an ancestor of the current best block.\n+    virtual bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip);\n+\n     virtual DB& GetDB() const = 0;\n \n     /// Get the name of the index for display in logs."
      }
    ]
  },
  {
    "sha": "ba6ff9a6f70139594362b4b4a6b816707bb165c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTZmZjlhNmY3MDEzOTU5NDM2MmI0YjRhNmI4MTY3MDdiYjE2NWM4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-27T22:42:35Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "message": "blockfilter: Functions to translate filter types to/from names.",
      "tree": {
        "sha": "bfd72dd218f42fd57a402cb9dece4d56ab1e9659",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfd72dd218f42fd57a402cb9dece4d56ab1e9659"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba6ff9a6f70139594362b4b4a6b816707bb165c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba6ff9a6f70139594362b4b4a6b816707bb165c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba6ff9a6f70139594362b4b4a6b816707bb165c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba6ff9a6f70139594362b4b4a6b816707bb165c8/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62b7a4f09409f60a35fc99ddb70f9199ac511a53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62b7a4f09409f60a35fc99ddb70f9199ac511a53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62b7a4f09409f60a35fc99ddb70f9199ac511a53"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 40,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b96956212bbe81a84cca06de6c2b59f452ef81b0",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba6ff9a6f70139594362b4b4a6b816707bb165c8/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba6ff9a6f70139594362b4b4a6b816707bb165c8/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=ba6ff9a6f70139594362b4b4a6b816707bb165c8",
        "patch": "@@ -15,6 +15,10 @@ static constexpr int GCS_SER_TYPE = SER_NETWORK;\n /// Protocol version used to serialize parameters in GCS filter encoding.\n static constexpr int GCS_SER_VERSION = 0;\n \n+static const std::map<BlockFilterType, std::string> g_filter_types = {\n+    {BlockFilterType::BASIC, \"basic\"},\n+};\n+\n template <typename OStream>\n static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)\n {\n@@ -197,6 +201,23 @@ bool GCSFilter::MatchAny(const ElementSet& elements) const\n     return MatchInternal(queries.data(), queries.size());\n }\n \n+const std::string& BlockFilterTypeName(BlockFilterType filter_type)\n+{\n+    static std::string unknown_retval = \"\";\n+    auto it = g_filter_types.find(filter_type);\n+    return it != g_filter_types.end() ? it->second : unknown_retval;\n+}\n+\n+bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type) {\n+    for (const auto& entry : g_filter_types) {\n+        if (entry.second == name) {\n+            filter_type = entry.first;\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n                                                  const CBlockUndo& block_undo)\n {"
      },
      {
        "sha": "7a219ff22b8d0717e156478ea8bc2b76d69ff1ad",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba6ff9a6f70139594362b4b4a6b816707bb165c8/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba6ff9a6f70139594362b4b4a6b816707bb165c8/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=ba6ff9a6f70139594362b4b4a6b816707bb165c8",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_BLOCKFILTER_H\n \n #include <stdint.h>\n+#include <string>\n #include <unordered_set>\n #include <vector>\n \n@@ -89,6 +90,12 @@ enum class BlockFilterType : uint8_t\n     INVALID = 255,\n };\n \n+/** Get the human-readable name for a filter type. Returns empty string for unknown types. */\n+const std::string& BlockFilterTypeName(BlockFilterType filter_type);\n+\n+/** Find a filter type by its human-readable name. */\n+bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type);\n+\n /**\n  * Complete block filter struct as defined in BIP 157. Serialization matches\n  * payload of \"cfilter\" messages."
      },
      {
        "sha": "92f9de78e7d61697e5e2e644e28e506dc61a306b",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba6ff9a6f70139594362b4b4a6b816707bb165c8/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba6ff9a6f70139594362b4b4a6b816707bb165c8/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=ba6ff9a6f70139594362b4b4a6b816707bb165c8",
        "patch": "@@ -174,4 +174,16 @@ BOOST_AUTO_TEST_CASE(blockfilters_json_test)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(blockfilter_type_names)\n+{\n+    BOOST_CHECK_EQUAL(BlockFilterTypeName(BlockFilterType::BASIC), \"basic\");\n+    BOOST_CHECK_EQUAL(BlockFilterTypeName(static_cast<BlockFilterType>(255)), \"\");\n+\n+    BlockFilterType filter_type;\n+    BOOST_CHECK(BlockFilterTypeByName(\"basic\", filter_type));\n+    BOOST_CHECK_EQUAL(filter_type, BlockFilterType::BASIC);\n+\n+    BOOST_CHECK(!BlockFilterTypeByName(\"unknown\", filter_type));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "2ad2338ef90bf661c19305afaf2fb648997b0c92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYWQyMzM4ZWY5MGJmNjYxYzE5MzA1YWZhZjJmYjY0ODk5N2IwYzky",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-03-12T07:20:40Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:03:21Z"
      },
      "message": "serialize: Serialization support for big-endian 32-bit ints.",
      "tree": {
        "sha": "1b479c647b8fbb3cccbe64ec908d8a5b3b1dc52a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b479c647b8fbb3cccbe64ec908d8a5b3b1dc52a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ad2338ef90bf661c19305afaf2fb648997b0c92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad2338ef90bf661c19305afaf2fb648997b0c92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad2338ef90bf661c19305afaf2fb648997b0c92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad2338ef90bf661c19305afaf2fb648997b0c92/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba6ff9a6f70139594362b4b4a6b816707bb165c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba6ff9a6f70139594362b4b4a6b816707bb165c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba6ff9a6f70139594362b4b4a6b816707bb165c8"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b001ee1324fbb10d6e73ffedc6f124d0bcd8b147",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ad2338ef90bf661c19305afaf2fb648997b0c92/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ad2338ef90bf661c19305afaf2fb648997b0c92/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=2ad2338ef90bf661c19305afaf2fb648997b0c92",
        "patch": "@@ -89,6 +89,11 @@ template<typename Stream> inline void ser_writedata32(Stream &s, uint32_t obj)\n     obj = htole32(obj);\n     s.write((char*)&obj, 4);\n }\n+template<typename Stream> inline void ser_writedata32be(Stream &s, uint32_t obj)\n+{\n+    obj = htobe32(obj);\n+    s.write((char*)&obj, 4);\n+}\n template<typename Stream> inline void ser_writedata64(Stream &s, uint64_t obj)\n {\n     obj = htole64(obj);\n@@ -118,6 +123,12 @@ template<typename Stream> inline uint32_t ser_readdata32(Stream &s)\n     s.read((char*)&obj, 4);\n     return le32toh(obj);\n }\n+template<typename Stream> inline uint32_t ser_readdata32be(Stream &s)\n+{\n+    uint32_t obj;\n+    s.read((char*)&obj, 4);\n+    return be32toh(obj);\n+}\n template<typename Stream> inline uint64_t ser_readdata64(Stream &s)\n {\n     uint64_t obj;"
      }
    ]
  },
  {
    "sha": "75a76e36199eba228856d59318cb54ca64ca6b57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWE3NmUzNjE5OWViYTIyODg1NmQ1OTMxOGNiNTRjYTY0Y2E2YjU3",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T00:01:24Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "message": "index: Implement block filter index with write operations.",
      "tree": {
        "sha": "dc0a24d1c8d9f9cc55fddc6f71cf43a09f4e9385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc0a24d1c8d9f9cc55fddc6f71cf43a09f4e9385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75a76e36199eba228856d59318cb54ca64ca6b57",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a76e36199eba228856d59318cb54ca64ca6b57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75a76e36199eba228856d59318cb54ca64ca6b57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a76e36199eba228856d59318cb54ca64ca6b57/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ad2338ef90bf661c19305afaf2fb648997b0c92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ad2338ef90bf661c19305afaf2fb648997b0c92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ad2338ef90bf661c19305afaf2fb648997b0c92"
      }
    ],
    "stats": {
      "total": 337,
      "additions": 337,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9d6c03194f0c643a4db89b3bf463d1f655d69bb9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a76e36199eba228856d59318cb54ca64ca6b57/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a76e36199eba228856d59318cb54ca64ca6b57/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=75a76e36199eba228856d59318cb54ca64ca6b57",
        "patch": "@@ -133,6 +133,7 @@ BITCOIN_CORE_H = \\\n   httprpc.h \\\n   httpserver.h \\\n   index/base.h \\\n+  index/blockfilterindex.h \\\n   index/txindex.h \\\n   indirectmap.h \\\n   init.h \\\n@@ -253,6 +254,7 @@ libbitcoin_server_a_SOURCES = \\\n   httprpc.cpp \\\n   httpserver.cpp \\\n   index/base.cpp \\\n+  index/blockfilterindex.cpp \\\n   index/txindex.cpp \\\n   interfaces/chain.cpp \\\n   interfaces/handler.cpp \\"
      },
      {
        "sha": "8fe0ed418b9aa26468807a48667df932bb0aca17",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "added",
        "additions": 282,
        "deletions": 0,
        "changes": 282,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a76e36199eba228856d59318cb54ca64ca6b57/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a76e36199eba228856d59318cb54ca64ca6b57/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=75a76e36199eba228856d59318cb54ca64ca6b57",
        "patch": "@@ -0,0 +1,282 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <map>\n+\n+#include <index/blockfilterindex.h>\n+#include <util/system.h>\n+#include <validation.h>\n+\n+/* The index database stores three items for each block: the disk location of the encoded filter,\n+ * its dSHA256 hash, and the header. Those belonging to blocks on the active chain are indexed by\n+ * height, and those belonging to blocks that have been reorganized out of the active chain are\n+ * indexed by block hash. This ensures that filter data for any block that becomes part of the\n+ * active chain can always be retrieved, alleviating timing concerns.\n+ *\n+ * The filters themselves are stored in flat files and referenced by the LevelDB entries. This\n+ * minimizes the amount of data written to LevelDB and keeps the database values constant size. The\n+ * disk location of the next block filter to be written (represented as a FlatFilePos) is stored\n+ * under the DB_FILTER_POS key.\n+ *\n+ * Keys for the height index have the type [DB_BLOCK_HEIGHT, uint32 (BE)]. The height is represented\n+ * as big-endian so that sequential reads of filters by height are fast.\n+ * Keys for the hash index have the type [DB_BLOCK_HASH, uint256].\n+ */\n+constexpr char DB_BLOCK_HASH = 's';\n+constexpr char DB_BLOCK_HEIGHT = 't';\n+constexpr char DB_FILTER_POS = 'P';\n+\n+constexpr unsigned int MAX_FLTR_FILE_SIZE = 0x1000000; // 16 MiB\n+/** The pre-allocation chunk size for fltr?????.dat files */\n+constexpr unsigned int FLTR_FILE_CHUNK_SIZE = 0x100000; // 1 MiB\n+\n+namespace {\n+\n+struct DBVal {\n+    uint256 hash;\n+    uint256 header;\n+    FlatFilePos pos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(hash);\n+        READWRITE(header);\n+        READWRITE(pos);\n+    }\n+};\n+\n+struct DBHeightKey {\n+    int height;\n+\n+    DBHeightKey() : height(0) {}\n+    DBHeightKey(int height_in) : height(height_in) {}\n+\n+    template<typename Stream>\n+    void Serialize(Stream& s) const\n+    {\n+        ser_writedata8(s, DB_BLOCK_HEIGHT);\n+        ser_writedata32be(s, height);\n+    }\n+\n+    template<typename Stream>\n+    void Unserialize(Stream& s)\n+    {\n+        char prefix = ser_readdata8(s);\n+        if (prefix != DB_BLOCK_HEIGHT) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB height key\");\n+        }\n+        height = ser_readdata32be(s);\n+    }\n+};\n+\n+struct DBHashKey {\n+    uint256 hash;\n+\n+    DBHashKey(const uint256& hash_in) : hash(hash_in) {}\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        char prefix = DB_BLOCK_HASH;\n+        READWRITE(prefix);\n+        if (prefix != DB_BLOCK_HASH) {\n+            throw std::ios_base::failure(\"Invalid format for block filter index DB hash key\");\n+        }\n+\n+        READWRITE(hash);\n+    }\n+};\n+\n+}; // namespace\n+\n+BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n+                                   size_t n_cache_size, bool f_memory, bool f_wipe)\n+    : m_filter_type(filter_type)\n+{\n+    const std::string& filter_name = BlockFilterTypeName(filter_type);\n+    if (filter_name.empty()) throw std::invalid_argument(\"unknown filter_type\");\n+\n+    fs::path path = GetDataDir() / \"indexes\" / \"blockfilter\" / filter_name;\n+    fs::create_directories(path);\n+\n+    m_name = filter_name + \" block filter index\";\n+    m_db = MakeUnique<BaseIndex::DB>(path / \"db\", n_cache_size, f_memory, f_wipe);\n+    m_filter_fileseq = MakeUnique<FlatFileSeq>(std::move(path), \"fltr\", FLTR_FILE_CHUNK_SIZE);\n+}\n+\n+bool BlockFilterIndex::Init()\n+{\n+    if (!m_db->Read(DB_FILTER_POS, m_next_filter_pos)) {\n+        // Check that the cause of the read failure is that the key does not exist. Any other errors\n+        // indicate database corruption or a disk failure, and starting the index would cause\n+        // further corruption.\n+        if (m_db->Exists(DB_FILTER_POS)) {\n+            return error(\"%s: Cannot read current %s state; index may be corrupted\",\n+                         __func__, GetName());\n+        }\n+\n+        // If the DB_FILTER_POS is not set, then initialize to the first location.\n+        m_next_filter_pos.nFile = 0;\n+        m_next_filter_pos.nPos = 0;\n+    }\n+    return BaseIndex::Init();\n+}\n+\n+bool BlockFilterIndex::CommitInternal(CDBBatch& batch)\n+{\n+    const FlatFilePos& pos = m_next_filter_pos;\n+\n+    // Flush current filter file to disk.\n+    CAutoFile file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        return error(\"%s: Failed to open filter file %d\", __func__, pos.nFile);\n+    }\n+    if (!FileCommit(file.Get())) {\n+        return error(\"%s: Failed to commit filter file %d\", __func__, pos.nFile);\n+    }\n+\n+    batch.Write(DB_FILTER_POS, pos);\n+    return BaseIndex::CommitInternal(batch);\n+}\n+\n+size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n+{\n+    assert(filter.GetFilterType() == GetFilterType());\n+\n+    size_t data_size =\n+        GetSerializeSize(filter.GetBlockHash(), CLIENT_VERSION) +\n+        GetSerializeSize(filter.GetEncodedFilter(), CLIENT_VERSION);\n+\n+    // If writing the filter would overflow the file, flush and move to the next one.\n+    if (pos.nPos + data_size > MAX_FLTR_FILE_SIZE) {\n+        CAutoFile last_file(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+        if (last_file.IsNull()) {\n+            LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!TruncateFile(last_file.Get(), pos.nPos)) {\n+            LogPrintf(\"%s: Failed to truncate filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+        if (!FileCommit(last_file.Get())) {\n+            LogPrintf(\"%s: Failed to commit filter file %d\\n\", __func__, pos.nFile);\n+            return 0;\n+        }\n+\n+        pos.nFile++;\n+        pos.nPos = 0;\n+    }\n+\n+    // Pre-allocate sufficient space for filter data.\n+    bool out_of_space;\n+    m_filter_fileseq->Allocate(pos, data_size, out_of_space);\n+    if (out_of_space) {\n+        LogPrintf(\"%s: out of disk space\\n\", __func__);\n+        return 0;\n+    }\n+\n+    CAutoFile fileout(m_filter_fileseq->Open(pos), SER_DISK, CLIENT_VERSION);\n+    if (fileout.IsNull()) {\n+        LogPrintf(\"%s: Failed to open filter file %d\\n\", __func__, pos.nFile);\n+        return 0;\n+    }\n+\n+    fileout << filter.GetBlockHash() << filter.GetEncodedFilter();\n+    return data_size;\n+}\n+\n+bool BlockFilterIndex::WriteBlock(const CBlock& block, const CBlockIndex* pindex)\n+{\n+    CBlockUndo block_undo;\n+    uint256 prev_header;\n+\n+    if (pindex->nHeight > 0) {\n+        if (!UndoReadFromDisk(block_undo, pindex)) {\n+            return false;\n+        }\n+\n+        std::pair<uint256, DBVal> read_out;\n+        if (!m_db->Read(DBHeightKey(pindex->nHeight - 1), read_out)) {\n+            return false;\n+        }\n+\n+        uint256 expected_block_hash = pindex->pprev->GetBlockHash();\n+        if (read_out.first != expected_block_hash) {\n+            return error(\"%s: previous block header belongs to unexpected block %s; expected %s\",\n+                         __func__, read_out.first.ToString(), expected_block_hash.ToString());\n+        }\n+\n+        prev_header = read_out.second.header;\n+    }\n+\n+    BlockFilter filter(m_filter_type, block, block_undo);\n+\n+    size_t bytes_written = WriteFilterToDisk(m_next_filter_pos, filter);\n+    if (bytes_written == 0) return false;\n+\n+    std::pair<uint256, DBVal> value;\n+    value.first = pindex->GetBlockHash();\n+    value.second.hash = filter.GetHash();\n+    value.second.header = filter.ComputeHeader(prev_header);\n+    value.second.pos = m_next_filter_pos;\n+\n+    if (!m_db->Write(DBHeightKey(pindex->nHeight), value)) {\n+        return false;\n+    }\n+\n+    m_next_filter_pos.nPos += bytes_written;\n+    return true;\n+}\n+\n+static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n+                                       const std::string& index_name,\n+                                       int start_height, int stop_height)\n+{\n+    DBHeightKey key(start_height);\n+    db_it.Seek(key);\n+\n+    for (int height = start_height; height <= stop_height; ++height) {\n+        if (!db_it.GetKey(key) || key.height != height) {\n+            return error(\"%s: unexpected key in %s: expected (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        std::pair<uint256, DBVal> value;\n+        if (!db_it.GetValue(value)) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        batch.Write(DBHashKey(value.first), std::move(value.second));\n+\n+        db_it.Next();\n+    }\n+    return true;\n+}\n+\n+bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip)\n+{\n+    assert(current_tip->GetAncestor(new_tip->nHeight) == new_tip);\n+\n+    CDBBatch batch(*m_db);\n+    std::unique_ptr<CDBIterator> db_it(m_db->NewIterator());\n+\n+    // During a reorg, we need to copy all filters for blocks that are getting disconnected from the\n+    // height index to the hash index so we can still find them when the height index entries are\n+    // overwritten.\n+    if (!CopyHeightIndexToHashIndex(*db_it, batch, m_name, new_tip->nHeight, current_tip->nHeight)) {\n+        return false;\n+    }\n+\n+    // The latest filter position gets written in Commit by the call to the BaseIndex::Rewind.\n+    // But since this creates new references to the filter, the position should get updated here\n+    // atomically as well in case Commit fails.\n+    batch.Write(DB_FILTER_POS, m_next_filter_pos);\n+    if (!m_db->WriteBatch(batch)) return false;\n+\n+    return BaseIndex::Rewind(current_tip, new_tip);\n+}"
      },
      {
        "sha": "d2dd3a27bcf0da55ad0a6e4a45528ca3427bdc26",
        "filename": "src/index/blockfilterindex.h",
        "status": "added",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75a76e36199eba228856d59318cb54ca64ca6b57/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75a76e36199eba228856d59318cb54ca64ca6b57/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=75a76e36199eba228856d59318cb54ca64ca6b57",
        "patch": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+#define BITCOIN_INDEX_BLOCKFILTERINDEX_H\n+\n+#include <blockfilter.h>\n+#include <chain.h>\n+#include <flatfile.h>\n+#include <index/base.h>\n+\n+/**\n+ * BlockFilterIndex is used to store and retrieve block filters, hashes, and headers for a range of\n+ * blocks by height. An index is constructed for each supported filter type with its own database\n+ * (ie. filter data for different types are stored in separate databases).\n+ *\n+ * This index is used to serve BIP 157 net requests.\n+ */\n+class BlockFilterIndex final : public BaseIndex\n+{\n+private:\n+    BlockFilterType m_filter_type;\n+    std::string m_name;\n+    std::unique_ptr<BaseIndex::DB> m_db;\n+\n+    FlatFilePos m_next_filter_pos;\n+    std::unique_ptr<FlatFileSeq> m_filter_fileseq;\n+\n+    size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n+\n+protected:\n+    bool Init() override;\n+\n+    bool CommitInternal(CDBBatch& batch) override;\n+\n+    bool WriteBlock(const CBlock& block, const CBlockIndex* pindex) override;\n+\n+    bool Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_tip) override;\n+\n+    BaseIndex::DB& GetDB() const override { return *m_db; }\n+\n+    const char* GetName() const override { return m_name.c_str(); }\n+\n+public:\n+    /** Constructs the index, which becomes available to be queried. */\n+    explicit BlockFilterIndex(BlockFilterType filter_type,\n+                              size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+    BlockFilterType GetFilterType() const { return m_filter_type; }\n+};\n+\n+#endif // BITCOIN_INDEX_BLOCKFILTERINDEX_H"
      }
    ]
  },
  {
    "sha": "b5e8200db76f06d35099da502439dcbdfd0a1b3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWU4MjAwZGI3NmYwNmQzNTA5OWRhNTAyNDM5ZGNiZGZkMGExYjNl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T01:39:28Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "message": "index: Implement lookup methods on block filter index.",
      "tree": {
        "sha": "2e549a4f0bbf8ce5ad78faabbe5745f936f89a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e549a4f0bbf8ce5ad78faabbe5745f936f89a7f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5e8200db76f06d35099da502439dcbdfd0a1b3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e8200db76f06d35099da502439dcbdfd0a1b3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e8200db76f06d35099da502439dcbdfd0a1b3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e8200db76f06d35099da502439dcbdfd0a1b3e/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75a76e36199eba228856d59318cb54ca64ca6b57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75a76e36199eba228856d59318cb54ca64ca6b57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75a76e36199eba228856d59318cb54ca64ca6b57"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 167,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a55aeca704f498b8c5ea2ec1635422e420f45a74",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 152,
        "deletions": 0,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e8200db76f06d35099da502439dcbdfd0a1b3e/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e8200db76f06d35099da502439dcbdfd0a1b3e/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=b5e8200db76f06d35099da502439dcbdfd0a1b3e",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <map>\n \n+#include <dbwrapper.h>\n #include <index/blockfilterindex.h>\n #include <util/system.h>\n #include <validation.h>\n@@ -143,6 +144,26 @@ bool BlockFilterIndex::CommitInternal(CDBBatch& batch)\n     return BaseIndex::CommitInternal(batch);\n }\n \n+bool BlockFilterIndex::ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const\n+{\n+    CAutoFile filein(m_filter_fileseq->Open(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull()) {\n+        return false;\n+    }\n+\n+    uint256 block_hash;\n+    std::vector<unsigned char> encoded_filter;\n+    try {\n+        filein >> block_hash >> encoded_filter;\n+        filter = BlockFilter(GetFilterType(), block_hash, std::move(encoded_filter));\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Failed to deserialize block filter from disk: %s\", __func__, e.what());\n+    }\n+\n+    return true;\n+}\n+\n size_t BlockFilterIndex::WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter)\n {\n     assert(filter.GetFilterType() == GetFilterType());\n@@ -280,3 +301,134 @@ bool BlockFilterIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex*\n \n     return BaseIndex::Rewind(current_tip, new_tip);\n }\n+\n+static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVal& result)\n+{\n+    // First check if the result is stored under the height index and the value there matches the\n+    // block hash. This should be the case if the block is on the active chain.\n+    std::pair<uint256, DBVal> read_out;\n+    if (!db.Read(DBHeightKey(block_index->nHeight), read_out)) {\n+        return false;\n+    }\n+    if (read_out.first == block_index->GetBlockHash()) {\n+        result = std::move(read_out.second);\n+        return true;\n+    }\n+\n+    // If value at the height index corresponds to an different block, the result will be stored in\n+    // the hash index.\n+    return db.Read(DBHashKey(block_index->GetBlockHash()), result);\n+}\n+\n+static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start_height,\n+                        const CBlockIndex* stop_index, std::vector<DBVal>& results)\n+{\n+    if (start_height < 0) {\n+        return error(\"%s: start height (%d) is negative\", __func__, start_height);\n+    }\n+    if (start_height > stop_index->nHeight) {\n+        return error(\"%s: start height (%d) is greater than stop height (%d)\",\n+                     __func__, start_height, stop_index->nHeight);\n+    }\n+\n+    size_t results_size = static_cast<size_t>(stop_index->nHeight - start_height + 1);\n+    std::vector<std::pair<uint256, DBVal>> values(results_size);\n+\n+    DBHeightKey key(start_height);\n+    std::unique_ptr<CDBIterator> db_it(db.NewIterator());\n+    db_it->Seek(DBHeightKey(start_height));\n+    for (int height = start_height; height <= stop_index->nHeight; ++height) {\n+        if (!db_it->Valid() || !db_it->GetKey(key) || key.height != height) {\n+            return false;\n+        }\n+\n+        size_t i = static_cast<size_t>(height - start_height);\n+        if (!db_it->GetValue(values[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %d)\",\n+                         __func__, index_name, DB_BLOCK_HEIGHT, height);\n+        }\n+\n+        db_it->Next();\n+    }\n+\n+    results.resize(results_size);\n+\n+    // Iterate backwards through block indexes collecting results in order to access the block hash\n+    // of each entry in case we need to look it up in the hash index.\n+    for (const CBlockIndex* block_index = stop_index;\n+         block_index && block_index->nHeight >= start_height;\n+         block_index = block_index->pprev) {\n+        uint256 block_hash = block_index->GetBlockHash();\n+\n+        size_t i = static_cast<size_t>(block_index->nHeight - start_height);\n+        if (block_hash == values[i].first) {\n+            results[i] = std::move(values[i].second);\n+            continue;\n+        }\n+\n+        if (!db.Read(DBHashKey(block_hash), results[i])) {\n+            return error(\"%s: unable to read value in %s at key (%c, %s)\",\n+                         __func__, index_name, DB_BLOCK_HASH, block_hash.ToString());\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    return ReadFilterFromDisk(entry.pos, filter_out);\n+}\n+\n+bool BlockFilterIndex::LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const\n+{\n+    DBVal entry;\n+    if (!LookupOne(*m_db, block_index, entry)) {\n+        return false;\n+    }\n+\n+    header_out = entry.header;\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                                         std::vector<BlockFilter>& filters_out) const\n+{\n+    std::vector<DBVal> entries;\n+    if (!LookupRange(*m_db, m_name, start_height, stop_index, entries)) {\n+        return false;\n+    }\n+\n+    filters_out.resize(entries.size());\n+    auto filter_pos_it = filters_out.begin();\n+    for (const auto& entry : entries) {\n+        if (!ReadFilterFromDisk(entry.pos, *filter_pos_it)) {\n+            return false;\n+        }\n+        ++filter_pos_it;\n+    }\n+\n+    return true;\n+}\n+\n+bool BlockFilterIndex::LookupFilterHashRange(int start_height, const CBlockIndex* stop_index,\n+                                             std::vector<uint256>& hashes_out) const\n+\n+{\n+    std::vector<DBVal> entries;\n+    if (!LookupRange(*m_db, m_name, start_height, stop_index, entries)) {\n+        return false;\n+    }\n+\n+    hashes_out.clear();\n+    hashes_out.reserve(entries.size());\n+    for (const auto& entry : entries) {\n+        hashes_out.push_back(entry.hash);\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "a689461800070ef7c015e97a32d0ce7e4433a4a6",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5e8200db76f06d35099da502439dcbdfd0a1b3e/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5e8200db76f06d35099da502439dcbdfd0a1b3e/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=b5e8200db76f06d35099da502439dcbdfd0a1b3e",
        "patch": "@@ -27,6 +27,7 @@ class BlockFilterIndex final : public BaseIndex\n     FlatFilePos m_next_filter_pos;\n     std::unique_ptr<FlatFileSeq> m_filter_fileseq;\n \n+    bool ReadFilterFromDisk(const FlatFilePos& pos, BlockFilter& filter) const;\n     size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n \n protected:\n@@ -48,6 +49,20 @@ class BlockFilterIndex final : public BaseIndex\n                               size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n \n     BlockFilterType GetFilterType() const { return m_filter_type; }\n+\n+    /** Get a single filter by block. */\n+    bool LookupFilter(const CBlockIndex* block_index, BlockFilter& filter_out) const;\n+\n+    /** Get a single filter header by block. */\n+    bool LookupFilterHeader(const CBlockIndex* block_index, uint256& header_out) const;\n+\n+    /** Get a range of filters between two heights on a chain. */\n+    bool LookupFilterRange(int start_height, const CBlockIndex* stop_index,\n+                           std::vector<BlockFilter>& filters_out) const;\n+\n+    /** Get a range of filter hashes between two heights on a chain. */\n+    bool LookupFilterHashRange(int start_height, const CBlockIndex* stop_index,\n+                               std::vector<uint256>& hashes_out) const;\n };\n \n #endif // BITCOIN_INDEX_BLOCKFILTERINDEX_H"
      }
    ]
  },
  {
    "sha": "6bcf0998c0b4111cadb9f0d58454266d41fd758b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmNmMDk5OGMwYjQxMTFjYWRiOWYwZDU4NDU0MjY2ZDQxZmQ3NThi",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T01:44:43Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "message": "test: Unit tests for block index filter.",
      "tree": {
        "sha": "14b2975273be01536e03293b5560dbc9a4a477eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/14b2975273be01536e03293b5560dbc9a4a477eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bcf0998c0b4111cadb9f0d58454266d41fd758b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bcf0998c0b4111cadb9f0d58454266d41fd758b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bcf0998c0b4111cadb9f0d58454266d41fd758b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bcf0998c0b4111cadb9f0d58454266d41fd758b/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5e8200db76f06d35099da502439dcbdfd0a1b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5e8200db76f06d35099da502439dcbdfd0a1b3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5e8200db76f06d35099da502439dcbdfd0a1b3e"
      }
    ],
    "stats": {
      "total": 151,
      "additions": 151,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fd7591563f417de8fcf2d8125fc8c77917047b70",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bcf0998c0b4111cadb9f0d58454266d41fd758b/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bcf0998c0b4111cadb9f0d58454266d41fd758b/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=6bcf0998c0b4111cadb9f0d58454266d41fd758b",
        "patch": "@@ -92,6 +92,7 @@ BITCOIN_TESTS =\\\n   test/blockchain_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/blockfilter_tests.cpp \\\n+  test/blockfilter_index_tests.cpp \\\n   test/bloom_tests.cpp \\\n   test/bswap_tests.cpp \\\n   test/checkqueue_tests.cpp \\"
      },
      {
        "sha": "5d2c1f113986560b28d784f0d667b4d99a9ccc51",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "added",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bcf0998c0b4111cadb9f0d58454266d41fd758b/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bcf0998c0b4111cadb9f0d58454266d41fd758b/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=6bcf0998c0b4111cadb9f0d58454266d41fd758b",
        "patch": "@@ -0,0 +1,150 @@\n+// Copyright (c) 2017-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <chainparams.h>\n+#include <index/blockfilterindex.h>\n+#include <test/test_bitcoin.h>\n+#include <script/standard.h>\n+#include <validation.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(blockfilter_index_tests)\n+\n+static bool ComputeFilter(BlockFilterType filter_type, const CBlockIndex* block_index,\n+                          BlockFilter& filter)\n+{\n+    CBlock block;\n+    if (!ReadBlockFromDisk(block, block_index->GetBlockPos(), Params().GetConsensus())) {\n+        return false;\n+    }\n+\n+    CBlockUndo block_undo;\n+    if (block_index->nHeight > 0 && !UndoReadFromDisk(block_undo, block_index)) {\n+        return false;\n+    }\n+\n+    filter = BlockFilter(filter_type, block, block_undo);\n+    return true;\n+}\n+\n+static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex* block_index,\n+                               uint256& last_header)\n+{\n+    BlockFilter expected_filter;\n+    if (!ComputeFilter(filter_index.GetFilterType(), block_index, expected_filter)) {\n+        BOOST_ERROR(\"ComputeFilter failed on block \" << block_index->nHeight);\n+        return false;\n+    }\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    BOOST_CHECK(filter_index.LookupFilter(block_index, filter));\n+    BOOST_CHECK(filter_index.LookupFilterHeader(block_index, filter_header));\n+    BOOST_CHECK(filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                   filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), 1);\n+\n+    BOOST_CHECK_EQUAL(filter.GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_header, expected_filter.ComputeHeader(last_header));\n+    BOOST_CHECK_EQUAL(filters[0].GetHash(), expected_filter.GetHash());\n+    BOOST_CHECK_EQUAL(filter_hashes[0], expected_filter.GetHash());\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+    last_header = filter_header;\n+    return true;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n+{\n+    BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n+\n+    uint256 last_header;\n+\n+    // Filter should not be found in the index before it is started.\n+    {\n+        LOCK(cs_main);\n+\n+        BlockFilter filter;\n+        uint256 filter_header;\n+        std::vector<BlockFilter> filters;\n+        std::vector<uint256> filter_hashes;\n+\n+        for (const CBlockIndex* block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            BOOST_CHECK(!filter_index.LookupFilter(block_index, filter));\n+            BOOST_CHECK(!filter_index.LookupFilterHeader(block_index, filter_header));\n+            BOOST_CHECK(!filter_index.LookupFilterRange(block_index->nHeight, block_index, filters));\n+            BOOST_CHECK(!filter_index.LookupFilterHashRange(block_index->nHeight, block_index,\n+                                                            filter_hashes));\n+        }\n+    }\n+\n+    // BlockUntilSyncedToCurrentChain should return false before index is started.\n+    BOOST_CHECK(!filter_index.BlockUntilSyncedToCurrentChain());\n+\n+    filter_index.Start();\n+\n+    // Allow filter index to catch up with the block index.\n+    constexpr int64_t timeout_ms = 10 * 1000;\n+    int64_t time_start = GetTimeMillis();\n+    while (!filter_index.BlockUntilSyncedToCurrentChain()) {\n+        BOOST_REQUIRE(time_start + timeout_ms > GetTimeMillis());\n+        MilliSleep(100);\n+    }\n+\n+    // Check that filter index has all blocks that were in the chain before it started.\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* block_index;\n+        for (block_index = chainActive.Genesis();\n+             block_index != nullptr;\n+             block_index = chainActive.Next(block_index)) {\n+            CheckFilterLookups(filter_index, block_index, last_header);\n+        }\n+    }\n+\n+    // Check that new blocks get indexed.\n+    for (int i = 0; i < 10; i++) {\n+        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+        std::vector<CMutableTransaction> no_txns;\n+        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block.GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, last_header);\n+    }\n+\n+    // Test lookups for a range of filters/hashes.\n+    std::vector<BlockFilter> filters;\n+    std::vector<uint256> filter_hashes;\n+\n+    const CBlockIndex* block_index = chainActive.Tip();\n+    BOOST_CHECK(filter_index.LookupFilterRange(0, block_index, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(0, block_index, filter_hashes));\n+\n+    BOOST_CHECK_EQUAL(filters.size(), chainActive.Height() + 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), chainActive.Height() + 1);\n+\n+    filters.clear();\n+    filter_hashes.clear();\n+\n+    filter_index.Interrupt();\n+    filter_index.Stop();\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmM5MGU0ZTdiZjdmZWY1NjgzMGIzM2IxZmJhNjc4ZmQwZGJkNmQ4",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-28T16:04:09Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:22Z"
      },
      "message": "test: Unit test for block filter index reorg handling.",
      "tree": {
        "sha": "11df4de2628d6a6edad4b8eda0383191cd5c1772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11df4de2628d6a6edad4b8eda0383191cd5c1772"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bcf0998c0b4111cadb9f0d58454266d41fd758b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bcf0998c0b4111cadb9f0d58454266d41fd758b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bcf0998c0b4111cadb9f0d58454266d41fd758b"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 130,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5893030971dc2b7eda3083bb577827ccd232fcf8",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 130,
        "deletions": 12,
        "changes": 142,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
        "patch": "@@ -4,7 +4,10 @@\n \n #include <blockfilter.h>\n #include <chainparams.h>\n+#include <consensus/validation.h>\n #include <index/blockfilterindex.h>\n+#include <miner.h>\n+#include <pow.h>\n #include <test/test_bitcoin.h>\n #include <script/standard.h>\n #include <validation.h>\n@@ -64,6 +67,49 @@ static bool CheckFilterLookups(BlockFilterIndex& filter_index, const CBlockIndex\n     return true;\n }\n \n+static CBlock CreateBlock(const CBlockIndex* prev,\n+                          const std::vector<CMutableTransaction>& txns,\n+                          const CScript& scriptPubKey)\n+{\n+    const CChainParams& chainparams = Params();\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+    block.hashPrevBlock = prev->GetBlockHash();\n+    block.nTime = prev->nTime + 1;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    for (const CMutableTransaction& tx : txns) {\n+        block.vtx.push_back(MakeTransactionRef(tx));\n+    }\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, prev, extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n+\n+    return block;\n+}\n+\n+static bool BuildChain(const CBlockIndex* pindex, const CScript& coinbase_script_pub_key,\n+                       size_t length, std::vector<std::shared_ptr<CBlock>>& chain)\n+{\n+    std::vector<CMutableTransaction> no_txns;\n+\n+    chain.resize(length);\n+    for (auto& block : chain) {\n+        block = std::make_shared<CBlock>(CreateBlock(pindex, no_txns, coinbase_script_pub_key));\n+        CBlockHeader header = block->GetBlockHeader();\n+\n+        CValidationState state;\n+        if (!ProcessNewBlockHeaders({header}, state, Params(), &pindex, nullptr)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n {\n     BlockFilterIndex filter_index(BlockFilterType::BASIC, 1 << 20, true);\n@@ -114,31 +160,103 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n         }\n     }\n \n-    // Check that new blocks get indexed.\n-    for (int i = 0; i < 10; i++) {\n-        CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n-        std::vector<CMutableTransaction> no_txns;\n-        const CBlock& block = CreateAndProcessBlock(no_txns, coinbase_script_pub_key);\n+    // Create two forks.\n+    const CBlockIndex* tip;\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    CScript coinbase_script_pub_key = GetScriptForDestination(coinbaseKey.GetPubKey().GetID());\n+    std::vector<std::shared_ptr<CBlock>> chainA, chainB;\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainA));\n+    BOOST_REQUIRE(BuildChain(tip, coinbase_script_pub_key, 10, chainB));\n+\n+    // Check that new blocks on chain A get indexed.\n+    uint256 chainA_last_header = last_header;\n+    for (size_t i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n         const CBlockIndex* block_index;\n         {\n             LOCK(cs_main);\n-            block_index = LookupBlockIndex(block.GetHash());\n+            block_index = LookupBlockIndex(block->GetHash());\n         }\n \n         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n-        CheckFilterLookups(filter_index, block_index, last_header);\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n     }\n \n+    // Reorg to chain B.\n+    uint256 chainB_last_header = last_header;\n+    for (size_t i = 0; i < 3; i++) {\n+        const auto& block = chainB[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+    }\n+\n+    // Check that filters for stale blocks on A can be retrieved.\n+    chainA_last_header = last_header;\n+    for (size_t i = 0; i < 2; i++) {\n+        const auto& block = chainA[i];\n+        const CBlockIndex* block_index;\n+        {\n+            LOCK(cs_main);\n+            block_index = LookupBlockIndex(block->GetHash());\n+        }\n+\n+        BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+        CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+    }\n+\n+    // Reorg back to chain A.\n+     for (size_t i = 2; i < 4; i++) {\n+         const auto& block = chainA[i];\n+        BOOST_REQUIRE(ProcessNewBlock(Params(), block, true, nullptr));\n+     }\n+\n+     // Check that chain A and B blocks can be retrieved.\n+     chainA_last_header = last_header;\n+     chainB_last_header = last_header;\n+     for (size_t i = 0; i < 3; i++) {\n+         const CBlockIndex* block_index;\n+\n+         {\n+             LOCK(cs_main);\n+             block_index = LookupBlockIndex(chainA[i]->GetHash());\n+         }\n+         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         CheckFilterLookups(filter_index, block_index, chainA_last_header);\n+\n+         {\n+             LOCK(cs_main);\n+             block_index = LookupBlockIndex(chainB[i]->GetHash());\n+         }\n+         BOOST_CHECK(filter_index.BlockUntilSyncedToCurrentChain());\n+         CheckFilterLookups(filter_index, block_index, chainB_last_header);\n+     }\n+\n     // Test lookups for a range of filters/hashes.\n     std::vector<BlockFilter> filters;\n     std::vector<uint256> filter_hashes;\n \n-    const CBlockIndex* block_index = chainActive.Tip();\n-    BOOST_CHECK(filter_index.LookupFilterRange(0, block_index, filters));\n-    BOOST_CHECK(filter_index.LookupFilterHashRange(0, block_index, filter_hashes));\n+    {\n+        LOCK(cs_main);\n+        tip = chainActive.Tip();\n+    }\n+    BOOST_CHECK(filter_index.LookupFilterRange(0, tip, filters));\n+    BOOST_CHECK(filter_index.LookupFilterHashRange(0, tip, filter_hashes));\n \n-    BOOST_CHECK_EQUAL(filters.size(), chainActive.Height() + 1);\n-    BOOST_CHECK_EQUAL(filter_hashes.size(), chainActive.Height() + 1);\n+    BOOST_CHECK_EQUAL(filters.size(), tip->nHeight + 1);\n+    BOOST_CHECK_EQUAL(filter_hashes.size(), tip->nHeight + 1);\n \n     filters.clear();\n     filter_hashes.clear();"
      }
    ]
  },
  {
    "sha": "accc8b8b1842ed6d522b71a056777bcac8f39e81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2NjOGI4YjE4NDJlZDZkNTIyYjcxYTA1Njc3N2JjYWM4ZjM5ZTgx",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-30T15:30:23Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "message": "index: Access functions for global block filter indexes.",
      "tree": {
        "sha": "a94aec9035ccd602835e18997f6f19b116f5dc1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a94aec9035ccd602835e18997f6f19b116f5dc1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/accc8b8b1842ed6d522b71a056777bcac8f39e81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/accc8b8b1842ed6d522b71a056777bcac8f39e81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/accc8b8b1842ed6d522b71a056777bcac8f39e81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/accc8b8b1842ed6d522b71a056777bcac8f39e81/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bc90e4e7bf7fef56830b33b1fba678fd0dbd6d8"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 98,
      "deletions": 0
    },
    "files": [
      {
        "sha": "20f33baf2cdb6c9f44ed40d5aef7c6da9dd5d0bd",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/accc8b8b1842ed6d522b71a056777bcac8f39e81/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/accc8b8b1842ed6d522b71a056777bcac8f39e81/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=accc8b8b1842ed6d522b71a056777bcac8f39e81",
        "patch": "@@ -94,6 +94,8 @@ struct DBHashKey {\n \n }; // namespace\n \n+static std::map<BlockFilterType, BlockFilterIndex> g_filter_indexes;\n+\n BlockFilterIndex::BlockFilterIndex(BlockFilterType filter_type,\n                                    size_t n_cache_size, bool f_memory, bool f_wipe)\n     : m_filter_type(filter_type)\n@@ -432,3 +434,34 @@ bool BlockFilterIndex::LookupFilterHashRange(int start_height, const CBlockIndex\n     }\n     return true;\n }\n+\n+BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type)\n+{\n+    auto it = g_filter_indexes.find(filter_type);\n+    return it != g_filter_indexes.end() ? &it->second : nullptr;\n+}\n+\n+void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn)\n+{\n+    for (auto& entry : g_filter_indexes) fn(entry.second);\n+}\n+\n+bool InitBlockFilterIndex(BlockFilterType filter_type,\n+                          size_t n_cache_size, bool f_memory, bool f_wipe)\n+{\n+    auto result = g_filter_indexes.emplace(std::piecewise_construct,\n+                                           std::forward_as_tuple(filter_type),\n+                                           std::forward_as_tuple(filter_type,\n+                                                                 n_cache_size, f_memory, f_wipe));\n+    return result.second;\n+}\n+\n+bool DestroyBlockFilterIndex(BlockFilterType filter_type)\n+{\n+    return g_filter_indexes.erase(filter_type);\n+}\n+\n+void DestroyAllBlockFilterIndexes()\n+{\n+    g_filter_indexes.clear();\n+}"
      },
      {
        "sha": "436d52515f490c6eafced5a22a401220de2e1e72",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/accc8b8b1842ed6d522b71a056777bcac8f39e81/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/accc8b8b1842ed6d522b71a056777bcac8f39e81/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=accc8b8b1842ed6d522b71a056777bcac8f39e81",
        "patch": "@@ -65,4 +65,30 @@ class BlockFilterIndex final : public BaseIndex\n                                std::vector<uint256>& hashes_out) const;\n };\n \n+/**\n+ * Get a block filter index by type. Returns nullptr if index has not been initialized or was\n+ * already destroyed.\n+ */\n+BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type);\n+\n+/** Iterate over all running block filter indexes, invoking fn on each. */\n+void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn);\n+\n+/**\n+ * Initialize a block filter index for the given type if one does not already exist. Returns true if\n+ * a new index is created and false if one has already been initialized.\n+ */\n+bool InitBlockFilterIndex(BlockFilterType filter_type,\n+                          size_t n_cache_size, bool f_memory = false, bool f_wipe = false);\n+\n+/**\n+ * Destroy the block filter index with the given type. Returns false if no such index exists. This\n+ * just releases the allocated memory and closes the database connection, it does not delete the\n+ * index data.\n+ */\n+bool DestroyBlockFilterIndex(BlockFilterType filter_type);\n+\n+/** Destroy all open block filter indexes. */\n+void DestroyAllBlockFilterIndexes();\n+\n #endif // BITCOIN_INDEX_BLOCKFILTERINDEX_H"
      },
      {
        "sha": "f0a24777a69c6bf9ec49079685dccb7e7f8648f0",
        "filename": "src/test/blockfilter_index_tests.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/accc8b8b1842ed6d522b71a056777bcac8f39e81/src/test/blockfilter_index_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/accc8b8b1842ed6d522b71a056777bcac8f39e81/src/test/blockfilter_index_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_index_tests.cpp?ref=accc8b8b1842ed6d522b71a056777bcac8f39e81",
        "patch": "@@ -265,4 +265,43 @@ BOOST_FIXTURE_TEST_CASE(blockfilter_index_initial_sync, TestChain100Setup)\n     filter_index.Stop();\n }\n \n+BOOST_FIXTURE_TEST_CASE(blockfilter_index_init_destroy, BasicTestingSetup)\n+{\n+    SetDataDir(\"tempdir\");\n+\n+    BlockFilterIndex* filter_index;\n+\n+    filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+    BOOST_CHECK(filter_index == nullptr);\n+\n+    BOOST_CHECK(InitBlockFilterIndex(BlockFilterType::BASIC, 1 << 20, true, false));\n+\n+    filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+    BOOST_CHECK(filter_index != nullptr);\n+    BOOST_CHECK(filter_index->GetFilterType() == BlockFilterType::BASIC);\n+\n+    // Initialize returns false if index already exists.\n+    BOOST_CHECK(!InitBlockFilterIndex(BlockFilterType::BASIC, 1 << 20, true, false));\n+\n+    int iter_count = 0;\n+    ForEachBlockFilterIndex([&iter_count](BlockFilterIndex& _index) { iter_count++; });\n+    BOOST_CHECK_EQUAL(iter_count, 1);\n+\n+    BOOST_CHECK(DestroyBlockFilterIndex(BlockFilterType::BASIC));\n+\n+    // Destroy returns false because index was already destroyed.\n+    BOOST_CHECK(!DestroyBlockFilterIndex(BlockFilterType::BASIC));\n+\n+    filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+    BOOST_CHECK(filter_index == nullptr);\n+\n+    // Reinitialize index.\n+    BOOST_CHECK(InitBlockFilterIndex(BlockFilterType::BASIC, 1 << 20, true, false));\n+\n+    DestroyAllBlockFilterIndexes();\n+\n+    filter_index = GetBlockFilterIndex(BlockFilterType::BASIC);\n+    BOOST_CHECK(filter_index == nullptr);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "ff351050968f290787cd5fa456d394380f64fec3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjM1MTA1MDk2OGYyOTA3ODdjZDVmYTQ1NmQzOTQzODBmNjRmZWMz",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-30T05:15:50Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "message": "init: Add CLI option to enable block filter index.",
      "tree": {
        "sha": "c3becebf7085a6a37f8ec6db5862d90afe164d9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3becebf7085a6a37f8ec6db5862d90afe164d9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff351050968f290787cd5fa456d394380f64fec3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff351050968f290787cd5fa456d394380f64fec3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff351050968f290787cd5fa456d394380f64fec3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff351050968f290787cd5fa456d394380f64fec3/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "accc8b8b1842ed6d522b71a056777bcac8f39e81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/accc8b8b1842ed6d522b71a056777bcac8f39e81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/accc8b8b1842ed6d522b71a056777bcac8f39e81"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 91,
      "deletions": 0
    },
    "files": [
      {
        "sha": "787390be31d421b792576bb9b4f2a8d7b462e6c9",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 0,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff351050968f290787cd5fa456d394380f64fec3/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff351050968f290787cd5fa456d394380f64fec3/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=ff351050968f290787cd5fa456d394380f64fec3",
        "patch": "@@ -2,6 +2,9 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <mutex>\n+#include <sstream>\n+\n #include <blockfilter.h>\n #include <crypto/siphash.h>\n #include <hash.h>\n@@ -218,6 +221,40 @@ bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type\n     return false;\n }\n \n+const std::vector<BlockFilterType>& AllBlockFilterTypes()\n+{\n+    static std::vector<BlockFilterType> types;\n+\n+    static std::once_flag flag;\n+    std::call_once(flag, []() {\n+            types.reserve(g_filter_types.size());\n+            for (auto entry : g_filter_types) {\n+                types.push_back(entry.first);\n+            }\n+        });\n+\n+    return types;\n+}\n+\n+const std::string& ListBlockFilterTypes()\n+{\n+    static std::string type_list;\n+\n+    static std::once_flag flag;\n+    std::call_once(flag, []() {\n+            std::stringstream ret;\n+            bool first = true;\n+            for (auto entry : g_filter_types) {\n+                if (!first) ret << \", \";\n+                ret << entry.second;\n+                first = false;\n+            }\n+            type_list = ret.str();\n+        });\n+\n+    return type_list;\n+}\n+\n static GCSFilter::ElementSet BasicFilterElements(const CBlock& block,\n                                                  const CBlockUndo& block_undo)\n {"
      },
      {
        "sha": "914b94fec13c94d2103ff8609ac6143e13b34e31",
        "filename": "src/blockfilter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff351050968f290787cd5fa456d394380f64fec3/src/blockfilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff351050968f290787cd5fa456d394380f64fec3/src/blockfilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.h?ref=ff351050968f290787cd5fa456d394380f64fec3",
        "patch": "@@ -96,6 +96,12 @@ const std::string& BlockFilterTypeName(BlockFilterType filter_type);\n /** Find a filter type by its human-readable name. */\n bool BlockFilterTypeByName(const std::string& name, BlockFilterType& filter_type);\n \n+/** Get a list of known filter types. */\n+const std::vector<BlockFilterType>& AllBlockFilterTypes();\n+\n+/** Get a comma-separated list of known filter type names. */\n+const std::string& ListBlockFilterTypes();\n+\n /**\n  * Complete block filter struct as defined in BIP 157. Serialization matches\n  * payload of \"cfilter\" messages."
      },
      {
        "sha": "41df5fb4ddccab18e9c72e169b3abec196e920a5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff351050968f290787cd5fa456d394380f64fec3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff351050968f290787cd5fa456d394380f64fec3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ff351050968f290787cd5fa456d394380f64fec3",
        "patch": "@@ -12,6 +12,7 @@\n #include <addrman.h>\n #include <amount.h>\n #include <banman.h>\n+#include <blockfilter.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <checkpoints.h>\n@@ -20,6 +21,7 @@\n #include <fs.h>\n #include <httpserver.h>\n #include <httprpc.h>\n+#include <index/blockfilterindex.h>\n #include <interfaces/chain.h>\n #include <index/txindex.h>\n #include <key.h>\n@@ -189,6 +191,7 @@ void Interrupt()\n     if (g_txindex) {\n         g_txindex->Interrupt();\n     }\n+    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Interrupt(); });\n }\n \n void Shutdown(InitInterfaces& interfaces)\n@@ -220,6 +223,7 @@ void Shutdown(InitInterfaces& interfaces)\n     if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n     if (g_connman) g_connman->Stop();\n     if (g_txindex) g_txindex->Stop();\n+    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n \n     StopTorControl();\n \n@@ -234,6 +238,7 @@ void Shutdown(InitInterfaces& interfaces)\n     g_connman.reset();\n     g_banman.reset();\n     g_txindex.reset();\n+    DestroyAllBlockFilterIndexes();\n \n     if (g_is_mempool_loaded && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool();\n@@ -404,6 +409,10 @@ void SetupServerArgs()\n     hidden_args.emplace_back(\"-sysperms\");\n #endif\n     gArgs.AddArg(\"-txindex\", strprintf(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\", DEFAULT_TXINDEX), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-blockfilterindex=<type>\",\n+                 strprintf(\"Maintain an index of compact filters by block (default: %s, values: %s).\", DEFAULT_BLOCKFILTERINDEX, ListBlockFilterTypes()) +\n+                 \" If <type> is not supplied or if <type> = 1, indexes for all known types are enabled.\",\n+                 false, OptionsCategory::OPTIONS);\n \n     gArgs.AddArg(\"-addnode=<ip>\", \"Add a node to connect to and attempt to keep the connection open (see the `addnode` RPC command help for more info). This option can be specified multiple times to add multiple nodes.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-banscore=<n>\", strprintf(\"Threshold for disconnecting misbehaving peers (default: %u)\", DEFAULT_BANSCORE_THRESHOLD), false, OptionsCategory::CONNECTION);\n@@ -886,6 +895,7 @@ int nUserMaxConnections;\n int nFD;\n ServiceFlags nLocalServices = ServiceFlags(NODE_NETWORK | NODE_NETWORK_LIMITED);\n int64_t peer_connect_timeout;\n+std::vector<BlockFilterType> g_enabled_filter_types;\n \n } // namespace\n \n@@ -954,10 +964,29 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n     }\n \n+    // parse and validate enabled filter types\n+    std::string blockfilterindex_value = gArgs.GetArg(\"-blockfilterindex\", DEFAULT_BLOCKFILTERINDEX);\n+    if (blockfilterindex_value == \"\" || blockfilterindex_value == \"1\") {\n+        g_enabled_filter_types = AllBlockFilterTypes();\n+    } else if (blockfilterindex_value != \"0\") {\n+        const std::vector<std::string> names = gArgs.GetArgs(\"-blockfilterindex\");\n+        g_enabled_filter_types.reserve(names.size());\n+        for (const auto& name : names) {\n+            BlockFilterType filter_type;\n+            if (!BlockFilterTypeByName(name, filter_type)) {\n+                return InitError(strprintf(_(\"Unknown -blockfilterindex value %s.\"), name));\n+            }\n+            g_enabled_filter_types.push_back(filter_type);\n+        }\n+    }\n+\n     // if using block pruning, then disallow txindex\n     if (gArgs.GetArg(\"-prune\", 0)) {\n         if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n+        if (!g_enabled_filter_types.empty()) {\n+            return InitError(_(\"Prune mode is incompatible with -blockfilterindex.\"));\n+        }\n     }\n \n     // -bind and -whitebind can't be set when not listening\n@@ -1448,6 +1477,13 @@ bool AppInitMain(InitInterfaces& interfaces)\n     nTotalCache -= nBlockTreeDBCache;\n     int64_t nTxIndexCache = std::min(nTotalCache / 8, gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX) ? nMaxTxIndexCache << 20 : 0);\n     nTotalCache -= nTxIndexCache;\n+    int64_t filter_index_cache = 0;\n+    if (!g_enabled_filter_types.empty()) {\n+        size_t n_indexes = g_enabled_filter_types.size();\n+        int64_t max_cache = std::min(nTotalCache / 8, max_filter_index_cache << 20);\n+        filter_index_cache = max_cache / n_indexes;\n+        nTotalCache -= filter_index_cache * n_indexes;\n+    }\n     int64_t nCoinDBCache = std::min(nTotalCache / 2, (nTotalCache / 4) + (1 << 23)); // use 25%-50% of the remainder for disk cache\n     nCoinDBCache = std::min(nCoinDBCache, nMaxCoinsDBCache << 20); // cap total coins db cache\n     nTotalCache -= nCoinDBCache;\n@@ -1458,6 +1494,10 @@ bool AppInitMain(InitInterfaces& interfaces)\n     if (gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n         LogPrintf(\"* Using %.1f MiB for transaction index database\\n\", nTxIndexCache * (1.0 / 1024 / 1024));\n     }\n+    for (BlockFilterType filter_type : g_enabled_filter_types) {\n+        LogPrintf(\"* Using %.1f MiB for %s block filter index database\\n\",\n+                  filter_index_cache * (1.0 / 1024 / 1024), BlockFilterTypeName(filter_type));\n+    }\n     LogPrintf(\"* Using %.1f MiB for chain state database\\n\", nCoinDBCache * (1.0 / 1024 / 1024));\n     LogPrintf(\"* Using %.1f MiB for in-memory UTXO set (plus up to %.1f MiB of unused mempool space)\\n\", nCoinCacheUsage * (1.0 / 1024 / 1024), nMempoolSizeMax * (1.0 / 1024 / 1024));\n \n@@ -1645,6 +1685,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n         g_txindex->Start();\n     }\n \n+    for (const auto& filter_type : g_enabled_filter_types) {\n+        InitBlockFilterIndex(filter_type, filter_index_cache, false, fReindex);\n+        GetBlockFilterIndex(filter_type)->Start();\n+    }\n+\n     // ********************************************************* Step 9: load wallet\n     for (const auto& client : interfaces.chain_clients) {\n         if (!client->load()) {"
      },
      {
        "sha": "c4ece11503b9df95a1340ddfa2e5c9e086c8dd43",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff351050968f290787cd5fa456d394380f64fec3/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff351050968f290787cd5fa456d394380f64fec3/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=ff351050968f290787cd5fa456d394380f64fec3",
        "patch": "@@ -37,6 +37,8 @@ static const int64_t nMaxBlockDBCache = 2;\n // Unlike for the UTXO database, for the txindex scenario the leveldb cache make\n // a meaningful difference: https://github.com/bitcoin/bitcoin/pull/8273#issuecomment-229601991\n static const int64_t nMaxTxIndexCache = 1024;\n+//! Max memory allocated to all block filter index caches combined in MiB.\n+static const int64_t max_filter_index_cache = 1024;\n //! Max memory allocated to coin DB specific cache (MiB)\n static const int64_t nMaxCoinsDBCache = 8;\n "
      },
      {
        "sha": "d1b099894141883be6a6e9e0cdc4b8745af8b491",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff351050968f290787cd5fa456d394380f64fec3/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff351050968f290787cd5fa456d394380f64fec3/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=ff351050968f290787cd5fa456d394380f64fec3",
        "patch": "@@ -118,6 +118,7 @@ static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n static const bool DEFAULT_TXINDEX = false;\n+static const char* const DEFAULT_BLOCKFILTERINDEX = \"0\";\n static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n /** Default for -persistmempool */\n static const bool DEFAULT_PERSIST_MEMPOOL = true;"
      }
    ]
  },
  {
    "sha": "19308c9e21d98a7818625218b22b37f23f87816f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTMwOGM5ZTIxZDk4YTc4MTg2MjUyMThiMjJiMzdmMjNmODc4MTZm",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-08-31T20:28:12Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "message": "rpc: Add getblockfilter RPC method.\n\nRetrieves and returns block filter and header from index.",
      "tree": {
        "sha": "5046a7c2251f871cd6112a85186c3f5e8bc583a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5046a7c2251f871cd6112a85186c3f5e8bc583a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19308c9e21d98a7818625218b22b37f23f87816f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19308c9e21d98a7818625218b22b37f23f87816f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19308c9e21d98a7818625218b22b37f23f87816f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19308c9e21d98a7818625218b22b37f23f87816f/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff351050968f290787cd5fa456d394380f64fec3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff351050968f290787cd5fa456d394380f64fec3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff351050968f290787cd5fa456d394380f64fec3"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 142,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d0f7f28a8643a1edf3629c17a91c2e04a2d7e48d",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19308c9e21d98a7818625218b22b37f23f87816f/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19308c9e21d98a7818625218b22b37f23f87816f/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=19308c9e21d98a7818625218b22b37f23f87816f",
        "patch": "@@ -7,13 +7,15 @@\n \n #include <amount.h>\n #include <base58.h>\n+#include <blockfilter.h>\n #include <chain.h>\n #include <chainparams.h>\n #include <checkpoints.h>\n #include <coins.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <hash.h>\n+#include <index/blockfilterindex.h>\n #include <index/txindex.h>\n #include <key_io.h>\n #include <policy/feerate.h>\n@@ -2296,6 +2298,85 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue getblockfilter(const JSONRPCRequest& request)\n+{\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+        throw std::runtime_error(\n+            RPCHelpMan{\"getblockfilter\",\n+                \"\\nRetrieve a BIP 157 content filter for a particular block.\\n\",\n+                {\n+                    {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hash of the block\"},\n+                    {\"filtertype\", RPCArg::Type::STR, /*default*/ \"basic\", \"The type name of the filter\"},\n+                },\n+                RPCResult{\n+                    \"{\\n\"\n+                    \"  \\\"filter\\\" : (string) the hex-encoded filter data\\n\"\n+                    \"  \\\"header\\\" : (string) the hex-encoded filter header\\n\"\n+                    \"}\\n\"\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getblockfilter\", \"\\\"00000000c937983704a73af28acdec37b049d214adbda81d7e2a3dd146f6ed09\\\" \\\"basic\\\"\")\n+                }\n+            }.ToString()\n+        );\n+    }\n+\n+    uint256 block_hash = ParseHashV(request.params[0], \"blockhash\");\n+    std::string filtertype_name = \"basic\";\n+    if (!request.params[1].isNull()) {\n+        filtertype_name = request.params[1].get_str();\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(filtertype_name, filtertype)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Unknown filtertype\");\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        throw JSONRPCError(RPC_MISC_ERROR, \"Index is not enabled for filtertype \" + filtertype_name);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    uint256 filter_header;\n+    if (!index->LookupFilter(block_index, filter) ||\n+        !index->LookupFilterHeader(block_index, filter_header)) {\n+        int err_code;\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            err_code = RPC_INVALID_ADDRESS_OR_KEY;\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            err_code = RPC_MISC_ERROR;\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            err_code = RPC_INTERNAL_ERROR;\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        throw JSONRPCError(err_code, errmsg);\n+    }\n+\n+    UniValue ret(UniValue::VOBJ);\n+    ret.pushKV(\"filter\", HexStr(filter.GetEncodedFilter()));\n+    ret.pushKV(\"header\", filter_header.GetHex());\n+    return ret;\n+}\n+\n // clang-format off\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n@@ -2323,6 +2404,7 @@ static const CRPCCommand commands[] =\n \n     { \"blockchain\",         \"preciousblock\",          &preciousblock,          {\"blockhash\"} },\n     { \"blockchain\",         \"scantxoutset\",           &scantxoutset,           {\"action\", \"scanobjects\"} },\n+    { \"blockchain\",         \"getblockfilter\",         &getblockfilter,         {\"blockhash\", \"filtertype\"} },\n \n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        {\"blockhash\"} },"
      },
      {
        "sha": "bd93b6f7a4b423ab9b9d630ee81834b390743c91",
        "filename": "test/functional/rpc_getblockfilter.py",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19308c9e21d98a7818625218b22b37f23f87816f/test/functional/rpc_getblockfilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19308c9e21d98a7818625218b22b37f23f87816f/test/functional/rpc_getblockfilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfilter.py?ref=19308c9e21d98a7818625218b22b37f23f87816f",
        "patch": "@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the getblockfilter RPC.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal, assert_is_hex_string, assert_raises_rpc_error,\n+    connect_nodes, disconnect_nodes, sync_blocks\n+    )\n+\n+FILTER_TYPES = [\"basic\"]\n+\n+class GetBlockFilterTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-blockfilterindex\"], []]\n+\n+    def run_test(self):\n+        # Create two chains by disconnecting nodes 0 & 1, mining, then reconnecting\n+        disconnect_nodes(self.nodes[0], 1)\n+\n+        self.nodes[0].generate(3)\n+        self.nodes[1].generate(4)\n+\n+        assert_equal(self.nodes[0].getblockcount(), 3)\n+        chain0_hashes = [self.nodes[0].getblockhash(block_height) for block_height in range(4)]\n+\n+        # Reorg node 0 to a new chain\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks(self.nodes)\n+\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        chain1_hashes = [self.nodes[0].getblockhash(block_height) for block_height in range(4)]\n+\n+        # Test getblockfilter returns a filter for all blocks and filter types on active chain\n+        for block_hash in chain1_hashes:\n+            for filter_type in FILTER_TYPES:\n+                result = self.nodes[0].getblockfilter(block_hash, filter_type)\n+                assert_is_hex_string(result['filter'])\n+\n+        # Test getblockfilter returns a filter for all blocks and filter types on stale chain\n+        for block_hash in chain0_hashes:\n+            for filter_type in FILTER_TYPES:\n+                result = self.nodes[0].getblockfilter(block_hash, filter_type)\n+                assert_is_hex_string(result['filter'])\n+\n+        # Test getblockfilter with unknown block\n+        bad_block_hash = \"0123456789abcdef\" * 4\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblockfilter, bad_block_hash, \"basic\")\n+\n+        # Test getblockfilter with undefined filter type\n+        genesis_hash = self.nodes[0].getblockhash(0)\n+        assert_raises_rpc_error(-5, \"Unknown filtertype\", self.nodes[0].getblockfilter, genesis_hash, \"unknown\")\n+\n+if __name__ == '__main__':\n+    GetBlockFilterTest().main()"
      },
      {
        "sha": "86f334e942fc7920cc08bb59a620057b782137a6",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19308c9e21d98a7818625218b22b37f23f87816f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19308c9e21d98a7818625218b22b37f23f87816f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=19308c9e21d98a7818625218b22b37f23f87816f",
        "patch": "@@ -144,6 +144,7 @@\n     'wallet_txn_doublespend.py',\n     'wallet_txn_clone.py --mineblock',\n     'feature_notifications.py',\n+    'rpc_getblockfilter.py',\n     'rpc_invalidateblock.py',\n     'feature_rbf.py',\n     'mempool_packages.py',"
      }
    ]
  },
  {
    "sha": "c7efb652f3543b001b4dd22186a354605b14f47e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjN2VmYjY1MmYzNTQzYjAwMWI0ZGQyMjE4NmEzNTQ2MDViMTRmNDdl",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2018-09-10T18:33:39Z"
      },
      "committer": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2019-04-06T19:10:55Z"
      },
      "message": "blockfilter: Update BIP 158 test vectors.\n\nNew tests for the case of non-standard OP_RETURN outputs.",
      "tree": {
        "sha": "9c2231a09331f9759aa56aaba7f325a52b8c9d4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c2231a09331f9759aa56aaba7f325a52b8c9d4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7efb652f3543b001b4dd22186a354605b14f47e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7efb652f3543b001b4dd22186a354605b14f47e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7efb652f3543b001b4dd22186a354605b14f47e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7efb652f3543b001b4dd22186a354605b14f47e/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19308c9e21d98a7818625218b22b37f23f87816f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19308c9e21d98a7818625218b22b37f23f87816f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19308c9e21d98a7818625218b22b37f23f87816f"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "2e80b468e9c8280590384acd477f6aaf3c99baac",
        "filename": "src/test/blockfilter_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7efb652f3543b001b4dd22186a354605b14f47e/src/test/blockfilter_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7efb652f3543b001b4dd22186a354605b14f47e/src/test/blockfilter_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockfilter_tests.cpp?ref=c7efb652f3543b001b4dd22186a354605b14f47e",
        "patch": "@@ -54,7 +54,7 @@ BOOST_AUTO_TEST_CASE(gcsfilter_default_constructor)\n \n BOOST_AUTO_TEST_CASE(blockfilter_basic_test)\n {\n-    CScript included_scripts[5], excluded_scripts[3];\n+    CScript included_scripts[5], excluded_scripts[4];\n \n     // First two are outputs on a single transaction.\n     included_scripts[0] << std::vector<unsigned char>(0, 65) << OP_CHECKSIG;\n@@ -73,14 +73,19 @@ BOOST_AUTO_TEST_CASE(blockfilter_basic_test)\n     // This script is not related to the block at all.\n     excluded_scripts[1] << std::vector<unsigned char>(5, 33) << OP_CHECKSIG;\n \n+    // OP_RETURN is non-standard since it's not followed by a data push, but is still excluded from\n+    // filter.\n+    excluded_scripts[2] << OP_RETURN << OP_4 << OP_ADD << OP_8 << OP_EQUAL;\n+\n     CMutableTransaction tx_1;\n     tx_1.vout.emplace_back(100, included_scripts[0]);\n     tx_1.vout.emplace_back(200, included_scripts[1]);\n+    tx_1.vout.emplace_back(0, excluded_scripts[0]);\n \n     CMutableTransaction tx_2;\n     tx_2.vout.emplace_back(300, included_scripts[2]);\n-    tx_2.vout.emplace_back(0, excluded_scripts[0]);\n-    tx_2.vout.emplace_back(400, excluded_scripts[2]); // Script is empty\n+    tx_2.vout.emplace_back(0, excluded_scripts[2]);\n+    tx_2.vout.emplace_back(400, excluded_scripts[3]); // Script is empty\n \n     CBlock block;\n     block.vtx.push_back(MakeTransactionRef(tx_1));\n@@ -90,7 +95,7 @@ BOOST_AUTO_TEST_CASE(blockfilter_basic_test)\n     block_undo.vtxundo.emplace_back();\n     block_undo.vtxundo.back().vprevout.emplace_back(CTxOut(500, included_scripts[3]), 1000, true);\n     block_undo.vtxundo.back().vprevout.emplace_back(CTxOut(600, included_scripts[4]), 10000, false);\n-    block_undo.vtxundo.back().vprevout.emplace_back(CTxOut(700, excluded_scripts[2]), 100000, false);\n+    block_undo.vtxundo.back().vprevout.emplace_back(CTxOut(700, excluded_scripts[3]), 100000, false);\n \n     BlockFilter block_filter(BlockFilterType::BASIC, block, block_undo);\n     const GCSFilter& filter = block_filter.GetFilter();"
      },
      {
        "sha": "8945296a079b984d65b0aeb4a3e9b0798df075e0",
        "filename": "src/test/data/blockfilters.json",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7efb652f3543b001b4dd22186a354605b14f47e/src/test/data/blockfilters.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7efb652f3543b001b4dd22186a354605b14f47e/src/test/data/blockfilters.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/blockfilters.json?ref=c7efb652f3543b001b4dd22186a354605b14f47e",
        "patch": "@@ -3,9 +3,11 @@\n [0,\"000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943\",\"0100000000000000000000000000000000000000000000000000000000000000000000003ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4adae5494dffff001d1aa4ae180101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000\",[],\"0000000000000000000000000000000000000000000000000000000000000000\",\"019dfca8\",\"21584579b7eb08997773e5aeff3a7f932700042d0ed2a6129012b7d7ae81b750\",\"Genesis block\"],\n [2,\"000000006c02c8ea6e4ff69651f7fcde348fb9d557a06e6957b65552002a7820\",\"0100000006128e87be8b1b4dea47a7247d5528d2702c96826c7a648497e773b800000000e241352e3bec0a95a6217e10c3abb54adfa05abb12c126695595580fb92e222032e7494dffff001d00d235340101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0432e7494d010e062f503253482fffffffff0100f2052a010000002321038a7f6ef1c8ca0c588aa53fa860128077c9e6c11e6830f4d7ee4e763a56b7718fac00000000\",[],\"d7bdac13a59d745b1add0d2ce852f1a0442e8945fc1bf3848d3cbffd88c24fe1\",\"0174a170\",\"186afd11ef2b5e7e3504f2e8cbf8df28a1fd251fe53d60dff8b1467d1b386cf0\",\"\"],\n [3,\"000000008b896e272758da5297bcd98fdc6d97c9b765ecec401e286dc1fdbe10\",\"0100000020782a005255b657696ea057d5b98f34defcf75196f64f6eeac8026c0000000041ba5afc532aae03151b8aa87b65e1594f97504a768e010c98c0add79216247186e7494dffff001d058dc2b60101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0486e7494d0151062f503253482fffffffff0100f2052a01000000232103f6d9ff4c12959445ca5549c811683bf9c88e637b222dd2e0311154c4c85cf423ac00000000\",[],\"186afd11ef2b5e7e3504f2e8cbf8df28a1fd251fe53d60dff8b1467d1b386cf0\",\"016cf7a0\",\"8d63aadf5ab7257cb6d2316a57b16f517bff1c6388f124ec4c04af1212729d2a\",\"\"],\n+[15007,\"0000000038c44c703bae0f98cdd6bf30922326340a5996cc692aaae8bacf47ad\",\"0100000002394092aa378fe35d7e9ac79c869b975c4de4374cd75eb5484b0e1e00000000eb9b8670abd44ad6c55cee18e3020fb0c6519e7004b01a16e9164867531b67afc33bc94fffff001d123f10050101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e04c33bc94f0115062f503253482fffffffff0100f2052a01000000232103f268e9ae07e0f8cb2f6e901d87c510d650b97230c0365b021df8f467363cafb1ac00000000\",[],\"18b5c2b0146d2d09d24fb00ff5b52bd0742f36c9e65527abdb9de30c027a4748\",\"013c3710\",\"07384b01311867949e0c046607c66b7a766d338474bb67f66c8ae9dbd454b20e\",\"Tx has non-standard OP_RETURN output followed by opcodes\"],\n [49291,\"0000000018b07dca1b28b4b5a119f6d6e71698ce1ed96f143f54179ce177a19c\",\"02000000abfaf47274223ca2fea22797e44498240e482cb4c2f2baea088962f800000000604b5b52c32305b15d7542071d8b04e750a547500005d4010727694b6e72a776e55d0d51ffff001d211806480201000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0d038bc0000102062f503253482fffffffff01a078072a01000000232102971dd6034ed0cf52450b608d196c07d6345184fcb14deb277a6b82d526a6163dac0000000001000000081cefd96060ecb1c4fbe675ad8a4f8bdc61d634c52b3a1c4116dee23749fe80ff000000009300493046022100866859c21f306538152e83f115bcfbf59ab4bb34887a88c03483a5dff9895f96022100a6dfd83caa609bf0516debc2bf65c3df91813a4842650a1858b3f61cfa8af249014730440220296d4b818bb037d0f83f9f7111665f49532dfdcbec1e6b784526e9ac4046eaa602204acf3a5cb2695e8404d80bf49ab04828bcbe6fc31d25a2844ced7a8d24afbdff01ffffffff1cefd96060ecb1c4fbe675ad8a4f8bdc61d634c52b3a1c4116dee23749fe80ff020000009400483045022100e87899175991aa008176cb553c6f2badbb5b741f328c9845fcab89f8b18cae2302200acce689896dc82933015e7230e5230d5cff8a1ffe82d334d60162ac2c5b0c9601493046022100994ad29d1e7b03e41731a4316e5f4992f0d9b6e2efc40a1ccd2c949b461175c502210099b69fdc2db00fbba214f16e286f6a49e2d8a0d5ffc6409d87796add475478d601ffffffff1e4a6d2d280ea06680d6cf8788ac90344a9c67cca9b06005bbd6d3f6945c8272010000009500493046022100a27400ba52fd842ce07398a1de102f710a10c5599545e6c95798934352c2e4df022100f6383b0b14c9f64b6718139f55b6b9494374755b86bae7d63f5d3e583b57255a01493046022100fdf543292f34e1eeb1703b264965339ec4a450ec47585009c606b3edbc5b617b022100a5fbb1c8de8aaaa582988cdb23622838e38de90bebcaab3928d949aa502a65d401ffffffff1e4a6d2d280ea06680d6cf8788ac90344a9c67cca9b06005bbd6d3f6945c8272020000009400493046022100ac626ac3051f875145b4fe4cfe089ea895aac73f65ab837b1ac30f5d875874fa022100bc03e79fa4b7eb707fb735b95ff6613ca33adeaf3a0607cdcead4cfd3b51729801483045022100b720b04a5c5e2f61b7df0fcf334ab6fea167b7aaede5695d3f7c6973496adbf1022043328c4cc1cdc3e5db7bb895ccc37133e960b2fd3ece98350f774596badb387201ffffffff23a8733e349c97d6cd90f520fdd084ba15ce0a395aad03cd51370602bb9e5db3010000004a00483045022100e8556b72c5e9c0da7371913a45861a61c5df434dfd962de7b23848e1a28c86ca02205d41ceda00136267281be0974be132ac4cda1459fe2090ce455619d8b91045e901ffffffff6856d609b881e875a5ee141c235e2a82f6b039f2b9babe82333677a5570285a6000000006a473044022040a1c631554b8b210fbdf2a73f191b2851afb51d5171fb53502a3a040a38d2c0022040d11cf6e7b41fe1b66c3d08f6ada1aee07a047cb77f242b8ecc63812c832c9a012102bcfad931b502761e452962a5976c79158a0f6d307ad31b739611dac6a297c256ffffffff6856d609b881e875a5ee141c235e2a82f6b039f2b9babe82333677a5570285a601000000930048304502205b109df098f7e932fbf71a45869c3f80323974a826ee2770789eae178a21bfc8022100c0e75615e53ee4b6e32b9bb5faa36ac539e9c05fa2ae6b6de5d09c08455c8b9601483045022009fb7d27375c47bea23b24818634df6a54ecf72d52e0c1268fb2a2c84f1885de022100e0ed4f15d62e7f537da0d0f1863498f9c7c0c0a4e00e4679588c8d1a9eb20bb801ffffffffa563c3722b7b39481836d5edfc1461f97335d5d1e9a23ade13680d0e2c1c371f030000006c493046022100ecc38ae2b1565643dc3c0dad5e961a5f0ea09cab28d024f92fa05c922924157e022100ebc166edf6fbe4004c72bfe8cf40130263f98ddff728c8e67b113dbd621906a601210211a4ed241174708c07206601b44a4c1c29e5ad8b1f731c50ca7e1d4b2a06dc1fffffffff02d0223a00000000001976a91445db0b779c0b9fa207f12a8218c94fc77aff504588ac80f0fa02000000000000000000\",[\"5221033423007d8f263819a2e42becaaf5b06f34cb09919e06304349d950668209eaed21021d69e2b68c3960903b702af7829fadcd80bd89b158150c85c4a75b2c8cb9c39452ae\",\"52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821021d69e2b68c3960903b702af7829fadcd80bd89b158150c85c4a75b2c8cb9c39452ae\",\"522102a7ae1e0971fc1689bd66d2a7296da3a1662fd21a53c9e38979e0f090a375c12d21022adb62335f41eb4e27056ac37d462cda5ad783fa8e0e526ed79c752475db285d52ae\",\"52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821022adb62335f41eb4e27056ac37d462cda5ad783fa8e0e526ed79c752475db285d52ae\",\"512103b9d1d0e2b4355ec3cdef7c11a5c0beff9e8b8d8372ab4b4e0aaf30e80173001951ae\",\"76a9149144761ebaccd5b4bbdc2a35453585b5637b2f8588ac\",\"522103f1848b40621c5d48471d9784c8174ca060555891ace6d2b03c58eece946b1a9121020ee5d32b54d429c152fdc7b1db84f2074b0564d35400d89d11870f9273ec140c52ae\",\"76a914f4fa1cc7de742d135ea82c17adf0bb9cf5f4fb8388ac\"],\"ed47705334f4643892ca46396eb3f4196a5e30880589e4009ef38eae895d4a13\",\"0afbc2920af1b027f31f87b592276eb4c32094bb4d3697021b4c6380\",\"b6d98692cec5145f67585f3434ec3c2b3030182e1cb3ec58b855c5c164dfaaa3\",\"Tx pays to empty output script\"],\n-[180480,\"00000000fd3ceb2404ff07a785c7fdcc76619edc8ed61bd25134eaa22084366a\",\"020000006058aa080a655aa991a444bd7d1f2defd9a3bbe68aabb69030cf3b4e00000000d2e826bfd7ef0beaa891a7eedbc92cd6a544a6cb61c7bdaa436762eb2123ef9790f5f552ffff001d0002c90f0501000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0300c102024608062f503253482fffffffff01c0c6072a01000000232102e769e60137a4df6b0df8ebd387cca44c4c57ae74cc0114a8e8317c8f3bfd85e9ac00000000010000000381a0802911a01ffb025c4dea0bc77963e8c1bb46313b71164c53f72f37fe5248010000000151ffffffffc904b267833d215e2128bd9575242232ac2bc311550c7fc1f0ef6f264b40d14c010000000151ffffffffdf0915666649dba81886519c531649b7b02180b4af67d6885e871299e9d5f775000000000151ffffffff0180817dcb00000000232103bb52138972c48a132fc1f637858c5189607dd0f7fe40c4f20f6ad65f2d389ba4ac0000000001000000018da38b434fba82d66052af74fc5e4e94301b114d9bc03f819dc876398404c8b4010000006c493046022100fe738b7580dc5fb5168e51fc61b5aed211125eb71068031009a22d9bbad752c5022100be5086baa384d40bcab0fa586e4f728397388d86e18b66cc417dc4f7fa4f9878012103f233299455134caa2687bdf15cb0becdfb03bd0ff2ff38e65ec6b7834295c34fffffffff022ebc1400000000001976a9147779b7fba1c1e06b717069b80ca170e8b04458a488ac9879c40f000000001976a9142a0307cd925dbb66b534c4db33003dd18c57015788ac0000000001000000026139a62e3422a602de36c873a225c1d3ca5aeee598539ceecb9f0dc8d1ad0f83010000006b483045022100ad9f32b4a0a2ddc19b5a74eba78123e57616f1b3cfd72ce68c03ea35a3dda1f002200dbd22aa6da17213df5e70dfc3b2611d40f70c98ed9626aa5e2cde9d97461f0a012103ddb295d2f1e8319187738fb4b230fdd9aa29d0e01647f69f6d770b9ab24eea90ffffffff983c82c87cf020040d671956525014d5c2b28c6d948c85e1a522362c0059eeae010000006b4830450221009ca544274c786d30a5d5d25e17759201ea16d3aedddf0b9e9721246f7ef6b32e02202cfa5564b6e87dfd9fd98957820e4d4e6238baeb0f65fe305d91506bb13f5f4f012103c99113deac0d5d044e3ac0346abc02501542af8c8d3759f1382c72ff84e704f7ffffffff02c0c62d00000000001976a914ae19d27efe12f5a886dc79af37ad6805db6f922d88ac70ce2000000000001976a9143b8d051d37a07ea1042067e93efe63dbf73920b988ac000000000100000002be566e8cd9933f0c75c4a82c027f7d0c544d5c101d0607ef6ae5d07b98e7f1dc000000006b483045022036a8cdfd5ea7ebc06c2bfb6e4f942bbf9a1caeded41680d11a3a9f5d8284abad022100cacb92a5be3f39e8bc14db1710910ef7b395fa1e18f45d41c28d914fcdde33be012102bf59abf110b5131fae0a3ce1ec379329b4c896a6ae5d443edb68529cc2bc7816ffffffff96cf67645b76ceb23fe922874847456a15feee1655082ff32d25a6bf2c0dfc90000000006a47304402203471ca2001784a5ac0abab583581f2613523da47ec5f53df833c117b5abd81500220618a2847723d57324f2984678db556dbca1a72230fc7e39df04c2239942ba942012102925c9794fd7bb9f8b29e207d5fc491b1150135a21f505041858889fa4edf436fffffffff026c840f00000000001976a914797fb8777d7991d8284d88bfd421ce520f0f843188ac00ca9a3b000000001976a9146d10f3f592699265d10b106eda37c3ce793f7a8588ac00000000\",[\"\",\"\",\"\",\"76a9142903b138c24be9e070b3e73ec495d77a204615e788ac\",\"76a91433a1941fd9a37b9821d376f5a51bd4b52fa50e2888ac\",\"76a914e4374e8155d0865742ca12b8d4d14d41b57d682f88ac\",\"76a914001fa7459a6cfc64bdc178ba7e7a21603bb2568f88ac\",\"76a914f6039952bc2b307aeec5371bfb96b66078ec17f688ac\"],\"b109139671dbedc2b6fcd499a5480a7461ae458af8ff9411d819aa64ba6995d1\",\"0db414c859a07e8205876354a210a75042d0463404913d61a8e068e58a3ae2aa080026\",\"a0af77e0a7ed20ea78d2def3200cc24f08217dcd51755c7c7feb0e2ba8316c2d\",\"Tx spends from empty output script\"],\n-[926485,\"000000000000015d6077a411a8f5cc95caf775ccf11c54e27df75ce58d187313\",\"0000002060bbab0edbf3ef8a49608ee326f8fd75c473b7e3982095e2d100000000000000c30134f8c9b6d2470488d7a67a888f6fa12f8692e0c3411fbfb92f0f68f67eedae03ca57ef13021acc22dc4105010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff2f0315230e0004ae03ca57043e3d1e1d0c8796bf579aef0c0000000000122f4e696e6a61506f6f6c2f5345475749542fffffffff038427a112000000001976a914876fbb82ec05caa6af7a3b5e5a983aae6c6cc6d688ac0000000000000000266a24aa21a9ed5c748e121c0fe146d973a4ac26fa4a68b0549d46ee22d25f50a5e46fe1b377ee00000000000000002952534b424c4f434b3acd16772ad61a3c5f00287480b720f6035d5e54c9efc71be94bb5e3727f10909001200000000000000000000000000000000000000000000000000000000000000000000000000100000000010145310e878941a1b2bc2d33797ee4d89d95eaaf2e13488063a2aa9a74490f510a0100000023220020b6744de4f6ec63cc92f7c220cdefeeb1b1bed2b66c8e5706d80ec247d37e65a1ffffffff01002d3101000000001976a9143ebc40e411ed3c76f86711507ab952300890397288ac0400473044022001dd489a5d4e2fbd8a3ade27177f6b49296ba7695c40dbbe650ea83f106415fd02200b23a0602d8ff1bdf79dee118205fc7e9b40672bf31563e5741feb53fb86388501483045022100f88f040e90cc5dc6c6189d04718376ac19ed996bf9e4a3c29c3718d90ffd27180220761711f16c9e3a44f71aab55cbc0634907a1fa8bb635d971a9a01d368727bea10169522103b3623117e988b76aaabe3d63f56a4fc88b228a71e64c4cc551d1204822fe85cb2103dd823066e096f72ed617a41d3ca56717db335b1ea47a1b4c5c9dbdd0963acba621033d7c89bd9da29fa8d44db7906a9778b53121f72191184a9fee785c39180e4be153ae00000000010000000120925534261de4dcebb1ed5ab1b62bfe7a3ef968fb111dc2c910adfebc6e3bdf010000006b483045022100f50198f5ae66211a4f485190abe4dc7accdabe3bc214ebc9ea7069b97097d46e0220316a70a03014887086e335fc1b48358d46cd6bdc9af3b57c109c94af76fc915101210316cff587a01a2736d5e12e53551b18d73780b83c3bfb4fcf209c869b11b6415effffffff0220a10700000000001976a91450333046115eaa0ac9e0216565f945070e44573988ac2e7cd01a000000001976a914c01a7ca16b47be50cbdbc60724f701d52d75156688ac00000000010000000203a25f58630d7a1ea52550365fd2156683f56daf6ca73a4b4bbd097e66516322010000006a47304402204efc3d70e4ca3049c2a425025edf22d5ca355f9ec899dbfbbeeb2268533a0f2b02204780d3739653035af4814ea52e1396d021953f948c29754edd0ee537364603dc012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff03a25f58630d7a1ea52550365fd2156683f56daf6ca73a4b4bbd097e66516322000000006a47304402202d96defdc5b4af71d6ba28c9a6042c2d5ee7bc6de565d4db84ef517445626e03022022da80320e9e489c8f41b74833dfb6a54a4eb5087cdb46eb663eef0b25caa526012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff0200e1f5050000000017a914b7e6f7ff8658b2d1fb107e3d7be7af4742e6b1b3876f88fc00000000001976a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac0000000001000000043ffd60d3818431c495b89be84afac205d5d1ed663009291c560758bbd0a66df5010000006b483045022100f344607de9df42049688dcae8ff1db34c0c7cd25ec05516e30d2bc8f12ac9b2f022060b648f6a21745ea6d9782e17bcc4277b5808326488a1f40d41e125879723d3a012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffffa5379401cce30f84731ef1ba65ce27edf2cc7ce57704507ebe8714aa16a96b92010000006a473044022020c37a63bf4d7f564c2192528709b6a38ab8271bd96898c6c2e335e5208661580220435c6f1ad4d9305d2c0a818b2feb5e45d443f2f162c0f61953a14d097fd07064012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff70e731e193235ff12c3184510895731a099112ffca4b00246c60003c40f843ce000000006a473044022053760f74c29a879e30a17b5f03a5bb057a5751a39f86fa6ecdedc36a1b7db04c022041d41c9b95f00d2d10a0373322a9025dba66c942196bc9d8adeb0e12d3024728012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff66b7a71b3e50379c8e85fc18fe3f1a408fc985f257036c34702ba205cef09f6f000000006a4730440220499bf9e2db3db6e930228d0661395f65431acae466634d098612fd80b08459ee022040e069fc9e3c60009f521cef54c38aadbd1251aee37940e6018aadb10f194d6a012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff0200e1f5050000000017a9148fc37ad460fdfbd2b44fe446f6e3071a4f64faa6878f447f0b000000001976a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac00000000\",[\"a914feb8a29635c56d9cd913122f90678756bf23887687\",\"76a914c01a7ca16b47be50cbdbc60724f701d52d75156688ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\"],\"da49977ba1ee0d620a2c4f8f646b03cd0d230f5c6c994722e3ba884889f0be1a\",\"09027acea61b6cc3fb33f5d52f7d088a6b2f75d234e89ca800\",\"4cd9dd007a325199102f1fc0b7d77ca25ee3c84d46018c4353ecfcb56c0d3e7a\",\"Duplicate pushdata 913bcc2be49cb534c20474c4dee1e9c4c317e7eb\"],\n-[987876,\"0000000000000c00901f2049055e2a437c819d79a3d54fd63e6af796cd7b8a79\",\"000000202694f74969fdb542090e95a56bc8aa2d646e27033850e32f1c5f000000000000f7e53676b3f12d5beb524ed617f2d25f5a93b5f4f52c1ba2678260d72712f8dd0a6dfe5740257e1a4b1768960101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1603e4120ff9c30a1c216900002f424d4920546573742fffffff0001205fa012000000001e76a914c486de584a735ec2f22da7cd9681614681f92173d83d0aa68688ac00000000\",[],\"e9d729b72d533c29abe5276d5cf6c152f3723f10efe000b1e0c9ca5265a8beb6\",\"010c0b40\",\"e6137ae5a8424c40da1e5023c16975cc97b09300b4c050e6b1c713add3836c40\",\"Coinbase tx has unparseable output script\"],\n-[1263442,\"000000006f27ddfe1dd680044a34548f41bed47eba9e6f0b310da21423bc5f33\",\"000000201c8d1a529c39a396db2db234d5ec152fa651a2872966daccbde028b400000000083f14492679151dbfaa1a825ef4c18518e780c1f91044180280a7d33f4a98ff5f45765aaddc001d38333b9a02010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff230352471300fe5f45765afe94690a000963676d696e6572343208000000000000000000ffffffff024423a804000000001976a914f2c25ac3d59f3d674b1d1d0a25c27339aaac0ba688ac0000000000000000266a24aa21a9edcb26cb3052426b9ebb4d19c819ef87c19677bbf3a7c46ef0855bd1b2abe83491012000000000000000000000000000000000000000000000000000000000000000000000000002000000000101d20978463906ba4ff5e7192494b88dd5eb0de85d900ab253af909106faa22cc5010000000004000000014777ff000000000016001446c29eabe8208a33aa1023c741fa79aa92e881ff0347304402207d7ca96134f2bcfdd6b536536fdd39ad17793632016936f777ebb32c22943fda02206014d2fb8a6aa58279797f861042ba604ebd2f8f61e5bddbd9d3be5a245047b201004b632103eeaeba7ce5dc2470221e9517fb498e8d6bd4e73b85b8be655196972eb9ccd5566754b2752103a40b74d43df244799d041f32ce1ad515a6cd99501701540e38750d883ae21d3a68ac00000000\",[\"002027a5000c7917f785d8fc6e5a55adfca8717ecb973ebb7743849ff956d896a7ed\"],\"a4a4d6c6034da8aa06f01fe71f1fffbd79e032006b07f6c7a2c60a66aa310c01\",\"0385acb4f0fe889ef0\",\"3588f34fbbc11640f9ed40b2a66a4e096215d50389691309c1dac74d4268aa81\",\"Includes witness data\"]\n+[180480,\"00000000fd3ceb2404ff07a785c7fdcc76619edc8ed61bd25134eaa22084366a\",\"020000006058aa080a655aa991a444bd7d1f2defd9a3bbe68aabb69030cf3b4e00000000d2e826bfd7ef0beaa891a7eedbc92cd6a544a6cb61c7bdaa436762eb2123ef9790f5f552ffff001d0002c90f0501000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0e0300c102024608062f503253482fffffffff01c0c6072a01000000232102e769e60137a4df6b0df8ebd387cca44c4c57ae74cc0114a8e8317c8f3bfd85e9ac00000000010000000381a0802911a01ffb025c4dea0bc77963e8c1bb46313b71164c53f72f37fe5248010000000151ffffffffc904b267833d215e2128bd9575242232ac2bc311550c7fc1f0ef6f264b40d14c010000000151ffffffffdf0915666649dba81886519c531649b7b02180b4af67d6885e871299e9d5f775000000000151ffffffff0180817dcb00000000232103bb52138972c48a132fc1f637858c5189607dd0f7fe40c4f20f6ad65f2d389ba4ac0000000001000000018da38b434fba82d66052af74fc5e4e94301b114d9bc03f819dc876398404c8b4010000006c493046022100fe738b7580dc5fb5168e51fc61b5aed211125eb71068031009a22d9bbad752c5022100be5086baa384d40bcab0fa586e4f728397388d86e18b66cc417dc4f7fa4f9878012103f233299455134caa2687bdf15cb0becdfb03bd0ff2ff38e65ec6b7834295c34fffffffff022ebc1400000000001976a9147779b7fba1c1e06b717069b80ca170e8b04458a488ac9879c40f000000001976a9142a0307cd925dbb66b534c4db33003dd18c57015788ac0000000001000000026139a62e3422a602de36c873a225c1d3ca5aeee598539ceecb9f0dc8d1ad0f83010000006b483045022100ad9f32b4a0a2ddc19b5a74eba78123e57616f1b3cfd72ce68c03ea35a3dda1f002200dbd22aa6da17213df5e70dfc3b2611d40f70c98ed9626aa5e2cde9d97461f0a012103ddb295d2f1e8319187738fb4b230fdd9aa29d0e01647f69f6d770b9ab24eea90ffffffff983c82c87cf020040d671956525014d5c2b28c6d948c85e1a522362c0059eeae010000006b4830450221009ca544274c786d30a5d5d25e17759201ea16d3aedddf0b9e9721246f7ef6b32e02202cfa5564b6e87dfd9fd98957820e4d4e6238baeb0f65fe305d91506bb13f5f4f012103c99113deac0d5d044e3ac0346abc02501542af8c8d3759f1382c72ff84e704f7ffffffff02c0c62d00000000001976a914ae19d27efe12f5a886dc79af37ad6805db6f922d88ac70ce2000000000001976a9143b8d051d37a07ea1042067e93efe63dbf73920b988ac000000000100000002be566e8cd9933f0c75c4a82c027f7d0c544d5c101d0607ef6ae5d07b98e7f1dc000000006b483045022036a8cdfd5ea7ebc06c2bfb6e4f942bbf9a1caeded41680d11a3a9f5d8284abad022100cacb92a5be3f39e8bc14db1710910ef7b395fa1e18f45d41c28d914fcdde33be012102bf59abf110b5131fae0a3ce1ec379329b4c896a6ae5d443edb68529cc2bc7816ffffffff96cf67645b76ceb23fe922874847456a15feee1655082ff32d25a6bf2c0dfc90000000006a47304402203471ca2001784a5ac0abab583581f2613523da47ec5f53df833c117b5abd81500220618a2847723d57324f2984678db556dbca1a72230fc7e39df04c2239942ba942012102925c9794fd7bb9f8b29e207d5fc491b1150135a21f505041858889fa4edf436fffffffff026c840f00000000001976a914797fb8777d7991d8284d88bfd421ce520f0f843188ac00ca9a3b000000001976a9146d10f3f592699265d10b106eda37c3ce793f7a8588ac00000000\",[\"\",\"\",\"\",\"76a9142903b138c24be9e070b3e73ec495d77a204615e788ac\",\"76a91433a1941fd9a37b9821d376f5a51bd4b52fa50e2888ac\",\"76a914e4374e8155d0865742ca12b8d4d14d41b57d682f88ac\",\"76a914001fa7459a6cfc64bdc178ba7e7a21603bb2568f88ac\",\"76a914f6039952bc2b307aeec5371bfb96b66078ec17f688ac\"],\"d34ef98386f413769502808d4bac5f20f8dfd5bffc9eedafaa71de0eb1f01489\",\"0db414c859a07e8205876354a210a75042d0463404913d61a8e068e58a3ae2aa080026\",\"c582d51c0ca365e3fcf36c51cb646d7f83a67e867cb4743fd2128e3e022b700c\",\"Tx spends from empty output script\"],\n+[926485,\"000000000000015d6077a411a8f5cc95caf775ccf11c54e27df75ce58d187313\",\"0000002060bbab0edbf3ef8a49608ee326f8fd75c473b7e3982095e2d100000000000000c30134f8c9b6d2470488d7a67a888f6fa12f8692e0c3411fbfb92f0f68f67eedae03ca57ef13021acc22dc4105010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff2f0315230e0004ae03ca57043e3d1e1d0c8796bf579aef0c0000000000122f4e696e6a61506f6f6c2f5345475749542fffffffff038427a112000000001976a914876fbb82ec05caa6af7a3b5e5a983aae6c6cc6d688ac0000000000000000266a24aa21a9ed5c748e121c0fe146d973a4ac26fa4a68b0549d46ee22d25f50a5e46fe1b377ee00000000000000002952534b424c4f434b3acd16772ad61a3c5f00287480b720f6035d5e54c9efc71be94bb5e3727f10909001200000000000000000000000000000000000000000000000000000000000000000000000000100000000010145310e878941a1b2bc2d33797ee4d89d95eaaf2e13488063a2aa9a74490f510a0100000023220020b6744de4f6ec63cc92f7c220cdefeeb1b1bed2b66c8e5706d80ec247d37e65a1ffffffff01002d3101000000001976a9143ebc40e411ed3c76f86711507ab952300890397288ac0400473044022001dd489a5d4e2fbd8a3ade27177f6b49296ba7695c40dbbe650ea83f106415fd02200b23a0602d8ff1bdf79dee118205fc7e9b40672bf31563e5741feb53fb86388501483045022100f88f040e90cc5dc6c6189d04718376ac19ed996bf9e4a3c29c3718d90ffd27180220761711f16c9e3a44f71aab55cbc0634907a1fa8bb635d971a9a01d368727bea10169522103b3623117e988b76aaabe3d63f56a4fc88b228a71e64c4cc551d1204822fe85cb2103dd823066e096f72ed617a41d3ca56717db335b1ea47a1b4c5c9dbdd0963acba621033d7c89bd9da29fa8d44db7906a9778b53121f72191184a9fee785c39180e4be153ae00000000010000000120925534261de4dcebb1ed5ab1b62bfe7a3ef968fb111dc2c910adfebc6e3bdf010000006b483045022100f50198f5ae66211a4f485190abe4dc7accdabe3bc214ebc9ea7069b97097d46e0220316a70a03014887086e335fc1b48358d46cd6bdc9af3b57c109c94af76fc915101210316cff587a01a2736d5e12e53551b18d73780b83c3bfb4fcf209c869b11b6415effffffff0220a10700000000001976a91450333046115eaa0ac9e0216565f945070e44573988ac2e7cd01a000000001976a914c01a7ca16b47be50cbdbc60724f701d52d75156688ac00000000010000000203a25f58630d7a1ea52550365fd2156683f56daf6ca73a4b4bbd097e66516322010000006a47304402204efc3d70e4ca3049c2a425025edf22d5ca355f9ec899dbfbbeeb2268533a0f2b02204780d3739653035af4814ea52e1396d021953f948c29754edd0ee537364603dc012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff03a25f58630d7a1ea52550365fd2156683f56daf6ca73a4b4bbd097e66516322000000006a47304402202d96defdc5b4af71d6ba28c9a6042c2d5ee7bc6de565d4db84ef517445626e03022022da80320e9e489c8f41b74833dfb6a54a4eb5087cdb46eb663eef0b25caa526012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff0200e1f5050000000017a914b7e6f7ff8658b2d1fb107e3d7be7af4742e6b1b3876f88fc00000000001976a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac0000000001000000043ffd60d3818431c495b89be84afac205d5d1ed663009291c560758bbd0a66df5010000006b483045022100f344607de9df42049688dcae8ff1db34c0c7cd25ec05516e30d2bc8f12ac9b2f022060b648f6a21745ea6d9782e17bcc4277b5808326488a1f40d41e125879723d3a012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffffa5379401cce30f84731ef1ba65ce27edf2cc7ce57704507ebe8714aa16a96b92010000006a473044022020c37a63bf4d7f564c2192528709b6a38ab8271bd96898c6c2e335e5208661580220435c6f1ad4d9305d2c0a818b2feb5e45d443f2f162c0f61953a14d097fd07064012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff70e731e193235ff12c3184510895731a099112ffca4b00246c60003c40f843ce000000006a473044022053760f74c29a879e30a17b5f03a5bb057a5751a39f86fa6ecdedc36a1b7db04c022041d41c9b95f00d2d10a0373322a9025dba66c942196bc9d8adeb0e12d3024728012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff66b7a71b3e50379c8e85fc18fe3f1a408fc985f257036c34702ba205cef09f6f000000006a4730440220499bf9e2db3db6e930228d0661395f65431acae466634d098612fd80b08459ee022040e069fc9e3c60009f521cef54c38aadbd1251aee37940e6018aadb10f194d6a012103f7a897e4dbecab2264b21917f90664ea8256189ea725d28740cf7ba5d85b5763ffffffff0200e1f5050000000017a9148fc37ad460fdfbd2b44fe446f6e3071a4f64faa6878f447f0b000000001976a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac00000000\",[\"a914feb8a29635c56d9cd913122f90678756bf23887687\",\"76a914c01a7ca16b47be50cbdbc60724f701d52d75156688ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\",\"76a914913bcc2be49cb534c20474c4dee1e9c4c317e7eb88ac\"],\"8f13b9a9c85611635b47906c3053ac53cfcec7211455d4cb0d63dc9acc13d472\",\"09027acea61b6cc3fb33f5d52f7d088a6b2f75d234e89ca800\",\"546c574a0472144bcaf9b6aeabf26372ad87c7af7d1ee0dbfae5e099abeae49c\",\"Duplicate pushdata 913bcc2be49cb534c20474c4dee1e9c4c317e7eb\"],\n+[987876,\"0000000000000c00901f2049055e2a437c819d79a3d54fd63e6af796cd7b8a79\",\"000000202694f74969fdb542090e95a56bc8aa2d646e27033850e32f1c5f000000000000f7e53676b3f12d5beb524ed617f2d25f5a93b5f4f52c1ba2678260d72712f8dd0a6dfe5740257e1a4b1768960101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff1603e4120ff9c30a1c216900002f424d4920546573742fffffff0001205fa012000000001e76a914c486de584a735ec2f22da7cd9681614681f92173d83d0aa68688ac00000000\",[],\"fe4d230dbb0f4fec9bed23a5283e08baf996e3f32b93f52c7de1f641ddfd04ad\",\"010c0b40\",\"0965a544743bbfa36f254446e75630c09404b3d164a261892372977538928ed5\",\"Coinbase tx has unparseable output script\"],\n+[1263442,\"000000006f27ddfe1dd680044a34548f41bed47eba9e6f0b310da21423bc5f33\",\"000000201c8d1a529c39a396db2db234d5ec152fa651a2872966daccbde028b400000000083f14492679151dbfaa1a825ef4c18518e780c1f91044180280a7d33f4a98ff5f45765aaddc001d38333b9a02010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff230352471300fe5f45765afe94690a000963676d696e6572343208000000000000000000ffffffff024423a804000000001976a914f2c25ac3d59f3d674b1d1d0a25c27339aaac0ba688ac0000000000000000266a24aa21a9edcb26cb3052426b9ebb4d19c819ef87c19677bbf3a7c46ef0855bd1b2abe83491012000000000000000000000000000000000000000000000000000000000000000000000000002000000000101d20978463906ba4ff5e7192494b88dd5eb0de85d900ab253af909106faa22cc5010000000004000000014777ff000000000016001446c29eabe8208a33aa1023c741fa79aa92e881ff0347304402207d7ca96134f2bcfdd6b536536fdd39ad17793632016936f777ebb32c22943fda02206014d2fb8a6aa58279797f861042ba604ebd2f8f61e5bddbd9d3be5a245047b201004b632103eeaeba7ce5dc2470221e9517fb498e8d6bd4e73b85b8be655196972eb9ccd5566754b2752103a40b74d43df244799d041f32ce1ad515a6cd99501701540e38750d883ae21d3a68ac00000000\",[\"002027a5000c7917f785d8fc6e5a55adfca8717ecb973ebb7743849ff956d896a7ed\"],\"31d66d516a9eda7de865df29f6ef6cb8e4bf9309e5dac899968a9a62a5df61e3\",\"0385acb4f0fe889ef0\",\"4e6d564c2a2452065c205dd7eb2791124e0c4e0dbb064c410c24968572589dec\",\"Includes witness data\"],\n+[1414221,\"0000000000000027b2b3b3381f114f674f481544ff2be37ae3788d7e078383b1\",\"000000204ea88307a7959d8207968f152bedca5a93aefab253f1fb2cfb032a400000000070cebb14ec6dbc27a9dfd066d9849a4d3bac5f674665f73a5fe1de01a022a0c851fda85bf05f4c19a779d1450102000000010000000000000000000000000000000000000000000000000000000000000000ffffffff18034d94154d696e6572476174653030310d000000f238f401ffffffff01c817a804000000000000000000\",[],\"5e5e12d90693c8e936f01847859404c67482439681928353ca1296982042864e\",\"00\",\"021e8882ef5a0ed932edeebbecfeda1d7ce528ec7b3daa27641acf1189d7b5dc\",\"Empty data\"]\n ]"
      }
    ]
  }
]