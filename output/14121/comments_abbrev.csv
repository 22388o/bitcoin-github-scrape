DrahtBot,2018-08-31T22:47:52Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417807823,417807823,
gmaxwell,2018-09-01T00:17:26Z,Storing large records in leveldb is generally a bad idea. Is there a particular reason this doesn't work like the undo data?,https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417818486,417818486,
jimpo,2018-09-01T00:47:26Z,"@gmaxwell If by that you mean writing the filters sequentially in flat files then indexing the disk positions in LevelDB, I hadn't considered that, but it may be worthwhile. The downside of course is additional complexity. What are you mostly concerned about, read or write performance? I'd want to benchmark reads and writes to determine if the DB value sizes are problematic before making the chang",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417820776,417820776,
jimpo,2018-09-03T01:45:53Z,"@gmaxwell I put together a (not-production-ready) [branch](https://github.com/jimpo/bitcoin/tree/bip157-index-ff) to test your suggestion of writing filters to flat files. In sample size n=1 experiments, I measured that the time to write the entire block index was <1% faster using flat files, and reading 5,000 sequential filters (starting at height 500,000) was 11% slower. The total storage space ",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-417978694,417978694,
jimpo,2018-09-10T19:36:57Z,"@Sjors Thanks for testing and finding that incompatibility! It has been fixed with 775c160ee266bc61d1dcb6f35265354e3f9f5dbc, and roasbeef or I will update the BIP to clarify this point.",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-420033880,420033880,
Sjors,2018-09-11T13:37:39Z,"@jimpo ok, those three examples now match. Is there an up to date Btcd branch that can be used to compare other blocks? cc @Roasbeef ",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-420277474,420277474,
jimpo,2018-09-11T16:22:18Z,"@Sjors There is nothing that checks block by block, but the filter headers commit to all previous filters in the chain, so comparing the headers at the chain tip on both change is equivalent to comparing blocks individually. btcd also has an RPC for fetching filter headers `getcfheader`.",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-420333183,420333183,
gmaxwell,2019-01-03T19:14:06Z,"NAK.  Storing large variable size blobs is leveldb is entirely unlike our other usage, imposes differet loads, memory behaviors, and would make it infeasible to drop leveldb in the future for e.g. an open hash table.  Creating an imaginary performance concern and then measuring that it isn't small doesn't change any of this.\n\n[I apologize for missing the prior reply until now-- September was a",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451246692,451246692,
jamesob,2019-01-03T19:21:29Z,"@gmaxwell what's your preferred alternative? Flatfiles? \n\nIt's worth noting that each index lives in its own ldb database at the moment, so UTXO storage can be migrated independently of any given index. As @jimpo notes above, reading out of flatfiles is 11% slower than ldb per his measurements. Given that block filters are obviously a read-heavy part of the system, I think that's a significant",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451248814,451248814,
gmaxwell,2019-01-03T19:34:48Z,"> what's your preferred alternative? Flatfiles?\n\nStoring the like block and undo data: files with the data in them and file_no,offset in the in memory index.\n\n>  As @jimpo notes above, reading out of flatfiles is 11% slower than ldb per his measurements\n\nA microbenchmark is probably not particularly informative there.   As leveldb is adding another layer of caching and memory use.  Imp",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451252591,451252591,
jimpo,2019-01-07T06:50:29Z,"@gmaxwell To be clear, you are suggesting adding block filter header, hash, and filter disk location to the CBlockIndex entries? This is an additional 72 bytes per block. I think this has significant disadvantages compared to the the approach of creating an optional index which is built asynchronously and can be deleted/rebuilt independently, mostly in terms of modularity. I'd be OK with a separat",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-451838178,451838178,
TheBlueMatt,2019-01-07T21:22:56Z,"I'm really not a fan of the idea of shoving more data into CBlockIndex entries/existing leveldbs, however I do agree with Greg's suggestion that we store the actual data in flat files. That would imply adding a new leveldb which just stores mappings to offsets in flat files, then loads the data from there.",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-452086521,452086521,
jimpo,2019-03-03T22:14:01Z,This has been rebased and modified to store filter data in flat files as discussed.,https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-469070357,469070357,
Sjors,2019-03-06T12:14:17Z,"Mainnet result for block 0000000000000000001cd1a6b5d0d226d2af982c87d7c82dc033936af84c7d88 at height 565,900:\n\n```json\n{\n  ""filter"": ""fd5927fd10419d25d44e3608af3c634ad45a6c6d7604a8ec4f587e7f0db41509cfdbffd588d25d4a8d5eb55155700285e8cbd266887ba7dbf357d1f6ac7aaa8748c945adaeb78ee6c4f1cf467b765a2d593352e65bc2e31bd3f7cf41fb6fbd10b6312b13b4831dac52f185403f62d0e4c92deeeefb23bc9565893fdc48c818e0ee5",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-470085547,470085547,
jonasschnelli,2019-03-14T21:17:59Z,"Currently testing a little bit...\n~~Would it make sense to log more infos? I think along the `Pre-allocating up to position 0x700000 in fltr00006.dat` it would be nice to know at what height the index currently is (maybe every 10k height-change or so).~~\n\nSorry,.. saw `Syncing basic block filter index with block chain from height XXX` too late. NM",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473066978,473066978,
flack,2019-03-14T21:39:15Z,"just pasting this here so it doesn't get lost:\n\n```\n2019-03-14T20:08:25  <sipa> it should be called BIP158, there is no p2p protocol support in there :)\n```",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473074977,473074977,
jonasschnelli,2019-03-15T11:23:24Z,"Took ~45mins to build the index on Intel i7.\nHere is also a histogram of filter-sizes over heights.\n\n![blk-filter-graph](https://user-images.githubusercontent.com/178464/54428143-d2a20280-471c-11e9-9357-dbdfca0c573e.png)\n",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473250387,473250387,
nopara73,2019-03-17T14:38:20Z,"Concept ACK.\n\n45 minutes is very impressive. In Wasabi our first iteration of building bech32 only filter table took two weeks on a powerful server. (Should be a couple of days now, but still bech32 constraint is a huge cheat for us.)  \n\n**Update:** It took 11.5h with the latest code on Wasabi, so that's how much optimization was added since the very start. Still nowhere near 45m.",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473671699,473671699,
PatrickLemke,2019-03-17T17:53:38Z,"Took me about 9 minutes to build the index on testnet on Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz\n\nTestnet block 1485036 (0000000000000070cef6099001404170fd4860ac15eede7b9947261fd54d8bf3):\n\n```\n{\n  ""filter"": ""3b42da6549c8cfe1037a1e0673b7ca7cf823cae390d8aa21c1074f732ba50f73cb765e8ba0bdc1e093a1fbce25cb35b0cb95c41be226d77080512422eb2278fc007984fca6eabb00fcbf7511da438ac9f14b571ae330914745",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-473689165,473689165,
ryanofsky,2019-03-19T17:42:11Z,This seems ready with no more dependencies. Should it be added to high priority review list (https://github.com/bitcoin/bitcoin/projects/8)?,https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-474489360,474489360,
Empact,2019-03-21T10:41:48Z,"Pushed some suggested changes as commits here: https://github.com/Empact/bitcoin/commits/bip157-index\n\nNothing major - all in the vein of minimizing / simplifying / protecting. Split across small commits in hopes of being helpful.",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475181971,475181971,
jamesob,2019-03-21T15:05:14Z,"> Pushed some suggested changes as commits here: Empact/bitcoin@bip157-index\n\nThese are all pretty cosmetic changes that would necessitate comprehensive re-review from a lot of the people who have already looked at this code. I think this PR should be tested as-is for merge, and changes like those you've suggested should be filed as follow-up PRs.\n\nI like the direction that some of your ch",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475267003,475267003,
Empact,2019-03-21T19:14:48Z,"Concept ACK\n\nI'm also very much in favor of getting this in, and would like to see it on the high priority for review list. Note it needs a rebase at least before that happens, so I don't think my nits are out of order. That said, feel free to ignore them.\n\nI would particularly make a case for https://github.com/Empact/bitcoin/commit/b1367c206852b62797b04139a85acce3506bc1d3, for usability.",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475366522,475366522,
jimpo,2019-03-23T04:29:45Z,"I have rebased and incorporated b1367c206852b62797b04139a85acce3506bc1d3 and 6c1a5adc68d704189825532522a9fa1b5a4aa235 of @Empact 's changes.\n\nThanks for the reviews!",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-475838354,475838354,
jimpo,2019-04-10T06:16:26Z,"@ryanofsky Let me clarify the intended behavior of `Commit`, so we can figure out how to properly word it. The design really stems from the optimization where the block index is only flushed to disk infrequently or on shutdown, and the auxiliary indexes mimic this.\n\nDuring normal operation, when the chain is extended by new blocks, entries are written into the database height index and their c",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-481548896,481548896,
zquestz,2019-04-10T20:16:51Z,@jimpo do you have a list of the remaining tasks for full Neutrino support (BIP 157 and 158) that need to be done once this PR lands? Would love to get an idea of the remaining scope of work. =),https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-481845558,481845558,
MarcoFalke,2019-04-12T15:56:06Z,utACK c7efb652f3543b001b4dd22186a354605b14f47e,https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-482627562,482627562,
ryanofsky,2019-04-12T21:40:29Z,"re: https://github.com/bitcoin/bitcoin/pull/14121#pullrequestreview-223888002 from me\n\n> I think this change has had almost enough review to be merged.\n\nThere was a new ACK from Marco since I wrote this, so maybe this is about ready?\n\nre: https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-481548896 from jimpo\n\n> If you have a way of simplifying the logic so that 1) m_best_b",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-482731887,482731887,
MarcoFalke,2019-04-18T14:02:04Z,"@ryanofsky Your proposed changes should probably go in a follow up pull request, as they also refactor txindex, which should be untouched by this pr",https://github.com/bitcoin/bitcoin/pull/14121#issuecomment-484522904,484522904,
leishman,2018-08-31T23:31:07Z,"Out of scope for this PR, but is there a reason we can't write a batch of entries for more than a single block? Could we write 100 - 1000 blocks worth of entries in each batch write to speed up the migrations? This introduces some complexity, but perhaps it's worth it?",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214494925,214494925,src/index/blockfilter.cpp
leishman,2018-08-31T23:33:47Z,typo `differente`,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214495167,214495167,src/index/blockfilter.h
leishman,2018-08-31T23:50:20Z,"Is assigning to the dereferenced pointer here instead of using a vector function an optimization? I can't see an obvious reason there is anything wrong with this, but just double checking.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214496437,214496437,src/index/blockfilter.cpp
jimpo,2018-09-01T00:02:53Z,s/D256/DSHA256/,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214497299,214497299,src/index/blockfilter.cpp
jimpo,2018-09-02T18:10:30Z,"Could be worth looking into during ThreadSync. As you note though, it's a fairly independent change.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214548666,214548666,src/index/blockfilter.cpp
jimpo,2018-09-02T18:11:23Z,What do you mean by a vector function? This just seemed to be the most immediate way to do the assignment to me.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214548691,214548691,src/index/blockfilter.cpp
leishman,2018-09-02T19:40:14Z,I meant using something like `insert` instead of direct assignment. It's been a while since I've written a lot of c++. ,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r214550876,214550876,src/index/blockfilter.cpp
practicalswift,2018-09-05T07:35:45Z,Please make `explicit` :-),https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215163302,215163302,src/blockfilter.h
practicalswift,2018-09-05T07:37:09Z,Assertions should not have side effects. Please move `GetAncestor` outside of assertion :-),https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215163648,215163648,src/index/blockfilter.cpp
practicalswift,2018-09-05T07:38:03Z,Remove `GetParams()`? Not used?,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215163868,215163868,src/blockfilter.h
jimpo,2018-09-05T22:53:02Z,What is the side effect? `GetAncestor` is a `const` method.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215449867,215449867,src/index/blockfilter.cpp
jimpo,2018-09-05T22:53:37Z,"No, it's not used, but it feels like there should be a getter.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215449989,215449989,src/blockfilter.h
practicalswift,2018-09-06T07:40:13Z,"Unused code is untested code, so I suggest removing it or adding a test for it :-)",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215523962,215523962,src/blockfilter.h
practicalswift,2018-09-07T07:43:57Z,"```\n./test/functional/rpc_getblockfilter.py:21:17: E211 whitespace before '('\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r215872796,215872796,test/functional/rpc_getblockfilter.py
Sjors,2018-09-07T15:45:12Z,Can you explain this? What would be wrong with always indexing by block hash? Especially given that `getblockfilter` takes a block hash argument. ,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r216003484,216003484,src/index/blockfilter.cpp
jimpo,2018-09-08T18:51:56Z,"Indexing by hash is less efficient when fetching a range of filters or filter hashes by height, which is a common access pattern in BIP 157.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r216138058,216138058,src/index/blockfilter.cpp
practicalswift,2018-09-10T17:42:35Z,@jimpo You're right! Forget my comment :-),https://github.com/bitcoin/bitcoin/pull/14121#discussion_r216412270,216412270,src/index/blockfilter.cpp
practicalswift,2018-09-23T07:58:51Z,"```\n2018-09-22 21:14:22 cpplint(pr=14121): src/test/blockfilter_index_tests.cpp:130:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r219691258,219691258,src/test/blockfilter_index_tests.cpp
practicalswift,2018-09-25T19:35:17Z,"```\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:182:27: warning: implicit conversion changes signedness: 'int' to 'size_t' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220326775,220326775,src/index/blockfilterindex.cpp
practicalswift,2018-09-25T19:35:33Z,"```\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:197:41: warning: implicit conversion changes signedness: 'int' to 'size_t' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220326881,220326881,src/index/blockfilterindex.cpp
practicalswift,2018-09-25T19:35:50Z,"```\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:237:59: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220326988,220326988,src/index/blockfilterindex.cpp
practicalswift,2018-09-25T19:36:10Z,"```\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:170:82: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327112,220327112,src/index/blockfilterindex.cpp
practicalswift,2018-09-25T19:36:23Z,"```\n2018-09-25 20:53:15 clang(pr=14121): index/blockfilterindex.cpp:191:55: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327171,220327171,src/index/blockfilterindex.cpp
practicalswift,2018-09-25T19:38:22Z,"```\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:209:36: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327832,220327832,src/test/blockfilter_index_tests.cpp
practicalswift,2018-09-25T19:38:37Z,"```\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:222:37: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327892,220327892,src/test/blockfilter_index_tests.cpp
practicalswift,2018-09-25T19:38:48Z,"```\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:234:52: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220327947,220327947,src/test/blockfilter_index_tests.cpp
practicalswift,2018-09-25T19:39:00Z,"```\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:241:52: warning: implicit conversion changes signedness: 'int' to 'std::vector::size_type' (aka 'unsigned long') [-Wsign-conversion]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220328014,220328014,src/test/blockfilter_index_tests.cpp
practicalswift,2018-09-25T19:39:30Z,"```\n2018-09-25 20:53:15 clang(pr=14121): test/blockfilter_index_tests.cpp:287:61: warning: unused parameter 'index' [-Wunused-parameter]\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r220328149,220328149,src/test/blockfilter_index_tests.cpp
practicalswift,2018-09-30T15:35:06Z,`_current_tip` is unused?,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r221463322,221463322,src/index/base.cpp
jimpo,2018-09-30T20:09:29Z,It's used in a subclass implementation.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r221471766,221471766,src/index/base.cpp
practicalswift,2018-12-28T10:47:45Z,Isn’t `explicit` redundant here?,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r244299781,244299781,src/index/blockfilterindex.h
gmaxwell,2019-01-10T20:11:45Z,"This change doesn't appear consistent with BIP158. (""The scriptPubKey of each output, aside from all OP_RETURN output scripts."", ""We exclude all OP_RETURN outputs in order to allow filters to easily be committed to in the future via a soft-fork."")  Also I don't think it's a good idea? They're no less unspendable even if they're not push only.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r246905158,246905158,src/blockfilter.cpp
jimpo,2019-01-10T22:59:08Z,"Yeah, the BIP should probably clarify exactly what that means. I made this change because 1) btcd does it and 2) the standard TX_NULL_DATA script type is [defined this way](https://github.com/bitcoin/bitcoin/blob/b68bac83d9ead9e8893785a58fbed6d09cba4b5c/src/script/standard.cpp#L128). In other words, scripts beginning with OP_RETURN and not followed by pushdata are non-standard. I think it makes se",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r246952416,246952416,src/blockfilter.cpp
TheBlueMatt,2019-01-23T01:02:48Z,"We should probably match IsUnspendable (ie that it just starts with OP_RETURN). TX_NULL_DATA is just an internal thing, not something to mirror this based on.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r250021511,250021511,src/blockfilter.cpp
sipa,2019-01-24T00:17:07Z,"I agree with @TheBlueMatt that there is no need to leak our internal TX_NULL_DATA template into the BIP. Would it make sense to use CScript::IsUnspendable instead (or at least equivalent to its current definition), which triggers on *((length > 0 and first_byte = OP_RETURN) or length > 10000)*?",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r250424163,250424163,src/blockfilter.cpp
jimpo,2019-03-03T18:28:22Z,This has been clarified in the BIP and updated here.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r261879998,261879998,src/blockfilter.cpp
Sjors,2019-03-05T16:30:45Z,`|| request.params.empty() || request.params.size() > 2`,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r262576030,262576030,src/rpc/blockchain.cpp
Sjors,2019-03-05T16:46:15Z,"```cpp\n    std::string filtertype_name = ""basic"";\n    if(!request.params[1].isNull()) {\n        filtertype_name = request.params[1].get_str();\n    }\n```",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r262583513,262583513,src/rpc/blockchain.cpp
Empact,2019-03-10T17:47:26Z,"Not as of C++11, because of list initialization\nhttps://en.cppreference.com/w/cpp/language/explicit",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r264050135,264050135,src/index/blockfilterindex.h
jamesob,2019-03-19T19:44:12Z,This is wrong but is corrected later in a801e39472. Wonder if it's worth amending here.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267066278,267066278,src/index/base.cpp
luke-jr,2019-03-19T20:14:41Z,"Please define the default in a single location (ie, not both here and GetArg calls), and use %s in case it is a string.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267077532,267077532,src/init.cpp
jamesob,2019-03-20T14:19:54Z,Conceptual nit: this logic seems like it should live in `FlatFileSeq` since it seems similar in nature to `FlatFileSeq::Allocate()`.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267362389,267362389,src/index/blockfilterindex.cpp
jamesob,2019-03-20T16:09:28Z,(not blocking) The above two functions are nice utilities and general beyond these tests. They'd probably be useful to future test writers and accordingly could live somewhere less specific.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267421501,267421501,src/test/blockfilter_index_tests.cpp
jamesob,2019-03-20T19:55:42Z,This commit (consisting only of this line diff) could probably be squashed into https://github.com/bitcoin/bitcoin/pull/14121/commits/aab05e29d5d2e3f162f0453a3b0ba7205e57356e.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267519622,267519622,src/blockfilter.cpp
ryanofsky,2019-03-22T17:46:16Z,"In commit ""index: Allow atomic commits of index state to be extended."" (96b3234b682c0c8d639aa866c9888376e4f49cf0)\n\nre: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267066278\n\n> This is wrong but is corrected later in a801e39. Wonder if it's worth amending here.\n\nThis commit also doesn't compile because the Rewind method isn't declared until the next commit. Would fix this ",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268275576,268275576,src/index/base.cpp
jimpo,2019-03-22T23:36:39Z,"I agree, but the logic for block/undo files is weird because they are synchronized (like the undo file numbers increment when the block file numbers do, not at a size limit).\n\nWould be a good thing to look at refactoring after this is merged maybe.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268367938,268367938,src/index/blockfilterindex.cpp
jimpo,2019-03-22T23:43:05Z,I'd be happy to add to `test_bitcoin` or `TestingSetup` or something if people think these are useful in the test framework. I'm not really sure. Any opinions @jnewbery?,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268368647,268368647,src/test/blockfilter_index_tests.cpp
MarcoFalke,2019-03-23T00:03:28Z,There are methods in `src/test/validation_block_tests.cpp` and `src/bench/block_assemble.cpp` that do something similar. I think copy-pasting them is fine unless it is more convenient to share code between them.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268370727,268370727,src/test/blockfilter_index_tests.cpp
lucayepa,2019-03-24T12:41:22Z,"ultranit, you can change the comment: txindex -> index.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268431957,268431957,src/index/base.h
ryanofsky,2019-03-25T19:52:23Z,"In commit ""index: Allow atomic commits of index state to be extended."" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\n\nThis commit still doesn't compile because `BaseIndex::Rewind` declaration is not added until the next commit.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268822822,268822822,src/index/base.cpp
ryanofsky,2019-03-25T19:58:10Z,"In commit ""index: Allow atomic commits of index state to be extended."" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\n\nIt would be good to check for failures on `Commit()` calls in this git commit. Even though the current implementation in this git commit always returns true, it can start to return false when the subclasses is added, and these calls don't appear to be updated later.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268824956,268824956,src/index/base.cpp
ryanofsky,2019-03-25T20:05:36Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nThis commit fails to compile with\n\n```\nindex/blockfilterindex.cpp:221:23: error: no viable overloaded '+='\n    m_next_filter_pos += bytes_written;\n```\n",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268827726,268827726,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T20:10:32Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nCan you mention the DB_FILTER_POS key in the comment above? I also think DB_NEXT_FILTER_POS would be a slightly more descriptive and consistent name.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268829521,268829521,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T20:14:53Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nComment saying this limit is for filter files would be nice. Or using less ambiguous names (MAX_FILT_FILE_SIZE, FILT_FILE_CHUNK_SIZE)",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268831097,268831097,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T20:16:49Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nObviously bikeshedding here but ""filt"" seems like a more obvious abbreviation for filter than ""fltr"".",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268831802,268831802,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T20:18:47Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nSuggest running clang-format. Our style guide and clang-format-config don't indent namespaces or put struct opening braces on new lines, iirc.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268832554,268832554,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T20:29:31Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nMaybe use less generic error messages here and below like ""Invalid format for block filter index DBHeightKey""",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268836756,268836756,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T20:30:35Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\n`if (filter_name.empty())` would be a little more idiomatic c++",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268837245,268837245,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T20:39:57Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nIs it possible to distinguish between entry not existing here and failure to deserialize? Might be a little nicer to be able to return an error if there's something weird here, instead of resetting the next write to position 0.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268841030,268841030,src/index/blockfilterindex.cpp
ryanofsky,2019-03-25T21:13:12Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nIt'd be good to mention that values and not just the keys are different in these two cases (height keys appear to have values prefixed by the block hash).",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r268853704,268853704,src/index/blockfilterindex.cpp
ryanofsky,2019-03-26T20:35:40Z,"In commit ""index: Allow atomic commits of index state to be extended."" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e):\n\nGiving the private method the same name as the protected method inherited by subclasses makes the code harder to follow. Would suggest calling this InternalCommit() or something like that.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r269303765,269303765,src/index/base.h
ryanofsky,2019-03-26T20:50:57Z,"In commit ""index: Allow atomic commits of index state to be extended."" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\n\nIt isn't clear from this comment when this is called or what ""other index state"" might be referring to. Maybe expand comment to something like: ""Write the current chain block locator and other index state from subclasses to the DB. This is called after blocks are added or rewound.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r269309762,269309762,src/index/base.h
ryanofsky,2019-03-28T18:52:42Z,"In commit ""index: Allow atomic commits of index state to be extended."" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\n\nWould be good to add NODISCARD to all methods that return errors on failure. Even in cases where you don't want to handle or log the errors, it's clarifying if invoking code shows that errors are being ignored, and maybe has comments saying why the errors are expected or ok to ign",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270152421,270152421,src/index/base.cpp
ryanofsky,2019-03-28T19:11:08Z,"In commit ""index: Allow atomic commits of index state to be extended."" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\n\nComment should mention how this relates to WriteBlock (and Rewind), that it's called after one or more WriteBlock/Rewind calls in order to flush state to disk and store extra data. Comment should also mention that subclasses that override this must include a call to the overridden",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270159230,270159230,src/index/base.h
ryanofsky,2019-03-28T19:21:20Z,"In commit ""index: Allow atomic commits of index state to be extended."" (e3845e4a2a27d69a09ac0f8744b23530ad3bbe9e)\n\nIt seems good to set `m_best_block_index` here, but I don't understand why it wasn't being set before. Is this a bugfix?",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270162675,270162675,src/index/base.cpp
ryanofsky,2019-03-28T19:37:58Z,"re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r267519622\n\nIn commit ""blockfilter: Functions to translate filter types to/from names."" (a0bd77e2ad5bdbaeca529a38335b6a6c2f3fd5d9)\n\nPrevious github comment can be marked resolved.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270168395,270168395,src/blockfilter.cpp
ryanofsky,2019-03-28T19:39:34Z,"In commit ""blockfilter: Functions to translate filter types to/from names."" (a0bd77e2ad5bdbaeca529a38335b6a6c2f3fd5d9)\n\n`const auto&` to prevent string copies and allocs",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270168972,270168972,src/blockfilter.cpp
ryanofsky,2019-03-28T19:51:11Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nIt seems misleading that this function accepts a stop_index argument rather than a stop_height, because the stopping point is identified only by height, and no other fields of the CBlockIndex are actually accessed. It would also be more consistent to have start_height/stop_height ",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270172763,270172763,src/index/blockfilterindex.cpp
ryanofsky,2019-03-28T20:08:28Z,"In commit ""index: Implement block filter index with write operations."" (5964d2f97a221b898dbc477ca8f06ddfbe1d241e)\n\nThis comment and the general control flow here where BlockFilterIndex::Rewind calls BaseIndex::Rewind which calls BlockFilterIndex::Commit which calls BaseIndex::Commit is confusing to follow (made worse by there being two BaseIndex::Commit methods). I flattened the control flow i",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270178850,270178850,src/index/blockfilterindex.cpp
ryanofsky,2019-03-28T21:59:36Z,"In commit ""index: Implement lookup methods on block filter index."" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\n\nThis change should be moved to the previous commit (5964d2f97a221b898dbc477ca8f06ddfbe1d241e), which doesn't compile without it.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270215452,270215452,src/index/blockfilterindex.cpp
ryanofsky,2019-03-28T22:06:08Z,"In commit ""index: Implement lookup methods on block filter index."" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\n\nMight be worth commenting on how range lookups are intended to be used since they aren't exposed via RPC in this PR.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270217137,270217137,src/index/blockfilterindex.h
ryanofsky,2019-03-28T22:19:19Z,"In commit ""test: Unit tests for block index filter."" (9283baae04dddf09576e541786cc429158077f82)\n\nIt might be good to add a test for good error handling (no crashes) over a range that includes blocks never added to the index (known blocks that were never connected, or connected blocks that haven't been added to the index yet).",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270220529,270220529,src/test/blockfilter_index_tests.cpp
ryanofsky,2019-03-28T22:21:31Z,"In commit ""test: Unit test for block filter index reorg handling."" (d85dd54792f7e1d4ab3d224930e35ed36c6db18a)\n\nStyle guide braces blah blah.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270221151,270221151,src/test/blockfilter_index_tests.cpp
ryanofsky,2019-03-28T22:26:35Z,"In commit ""init: Add CLI option to enable block filter index."" (88fac30e85e907891c92b8df456d925369d8bc06)\n\nPlease do use `g_` prefix to make it clear this is a global.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270222454,270222454,src/init.cpp
ryanofsky,2019-03-28T22:38:03Z,"In commit ""init: Add CLI option to enable block filter index."" (88fac30e85e907891c92b8df456d925369d8bc06)\n\nDid you want to divide nTotalCache by n_indexes here? Shouldn't matter now because n_indexes is one. But as n_indexes grows, nTotalCache on the next line could keep decreasing and even go below 0.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270225386,270225386,src/init.cpp
ryanofsky,2019-03-28T23:04:18Z,"In commit ""index: Implement lookup methods on block filter index."" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\n\nIt seems like this line isn't doing anything and could be removed (new size should be same as previous size).",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270231499,270231499,src/index/blockfilterindex.cpp
ryanofsky,2019-03-28T23:14:40Z,"In commit ""index: Implement lookup methods on block filter index."" (88ecade18fd615add2550c89f6152bc44fc4ee5e)\n\nSeems like this could break instead of continue. Would add a comment here if there's a case where this needs to keep iterating.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270233641,270233641,src/index/blockfilterindex.cpp
jimpo,2019-04-05T21:59:27Z,"I explicitly don't want to handle failure as Commit() already logs on errors and in the places where the return value is ignored, the index is committing a later state so it is safe to just continue. I will add comments in the appropriate places saying this.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272756187,272756187,src/index/base.cpp
jimpo,2019-04-05T22:18:43Z,Added a comment.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272759717,272759717,src/index/blockfilterindex.cpp
jimpo,2019-04-05T22:27:35Z,Very good point!,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272761157,272761157,src/index/blockfilterindex.cpp
jimpo,2019-04-05T22:41:04Z,"Previously, since `m_synced` wasn't set to *and* WriteBestBlock took an explicit pointer argument, it wasn't necessary. But now WriteBestBlock reads m_best_block_index instead of taking an argument.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272763293,272763293,src/index/base.cpp
jimpo,2019-04-05T22:44:50Z,"Hmm? If it was a break, it would only copy one value to the result value rather than all of them.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272763851,272763851,src/index/blockfilterindex.cpp
jimpo,2019-04-05T22:46:48Z,"This is the first time `results` is accessed in this method, and the size has to be set appropriately.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272764193,272764193,src/index/blockfilterindex.cpp
jimpo,2019-04-05T22:54:33Z,Updated the logic.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272765337,272765337,src/init.cpp
jimpo,2019-04-06T18:39:51Z,"I looked over your proposed changes. I updated one of the commit methods to CommitInternal as suggested (though the opposite one from you -- I think Commit calling CommitInternal makes more sense).\n\nHowever, I don't really like the change in behavior to Commit/Rewind. Commit *just* does DB/disk persistence, which is why errors can generally be ignored, so giving it responsibility for writing `",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272805282,272805282,src/index/blockfilterindex.cpp
ryanofsky,2019-04-08T15:03:50Z,"re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r269303765\n\nIn commit ""index: Allow atomic commits of index state to be extended."" (4368384f1d267b011e03a805f934f5c47e2ca1b2)\n\nCurrent change isn't what I was suggesting and I think is actually worse than the original (but still ok if this is what makes most sense to you). I was suggesting renaming the `Commit()` that's _internal",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273094828,273094828,src/index/base.h
ryanofsky,2019-04-08T15:10:40Z,"In commit ""index: Allow atomic commits of index state to be extended."" (4368384f1d267b011e03a805f934f5c47e2ca1b2)\n\nThank you for adding this comment, but I had to read this several times before I figured out that the ""index can continue processing"" isn't describing something that happens externally but is describing what you are supposed to do when handling errors from this function. I'd sugge",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273098190,273098190,src/index/base.h
ryanofsky,2019-04-09T21:53:15Z,"In commit ""index: Allow atomic commits of index state to be extended."" (4368384f1d267b011e03a805f934f5c47e2ca1b2)\n\nI don't understand ""index cannot be corrupted by a missed commit."" Does it mean that if this Commit call fails you expect a future Commit call to fix whatever the problem is? If so, this seems like a property that holds for TxIndex, but not necessarily for BlockFilterIndex since t",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273719943,273719943,src/index/base.cpp
ryanofsky,2019-04-09T22:54:42Z,"re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270178850\n\n> I don't really like the change in behavior to Commit/Rewind. Commit just does DB/disk persistence, which is why errors can generally be ignored\n\nUp to you but I'd encourage you to take another look. Your comment sounds more like a reaction to the method naming and not the substance of the change. I agree with you na",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273735411,273735411,src/index/blockfilterindex.cpp
ryanofsky,2019-04-09T23:31:53Z,"re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r272764193\n\nIn commit ""index: Implement lookup methods on block filter index."" (b5e8200db76f06d35099da502439dcbdfd0a1b3e)\n\n> This is the first time results is accessed in this method, and the size has to be set appropriately.\n\nSorry, you're right. I confused `results` with the `values` variable above.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273742872,273742872,src/index/blockfilterindex.cpp
ryanofsky,2019-04-09T23:41:48Z,"re: https://github.com/bitcoin/bitcoin/pull/14121#discussion_r270233641\n\nIn commit ""index: Implement lookup methods on block filter index."" (b5e8200db76f06d35099da502439dcbdfd0a1b3e)\n\n> Hmm? If it was a break, it would only copy one value to the result value rather than all of them.\n\nAgain this is me thinking `results` and `values` where the same variable, so it would be safe to break ",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273744675,273744675,src/index/blockfilterindex.cpp
jimpo,2019-04-10T05:45:16Z,"The difference from `Init`, `Rewind`, and `WriteBlock` and is that `CommitInternal` has a different method signature from `Commit`, which is why I thought you found it confusing, whereas the others have only a single method signature that the child classes override.\n\nI don't have too much of a preference, though I do think switching the `Internal` would be weird, as I've generally found the co",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r273796810,273796810,src/index/base.h
MarcoFalke,2019-04-12T14:38:43Z,"in commit 75a76e36199eb\n\nShould this be `explicit`?",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r274935198,274935198,src/index/blockfilterindex.cpp
MarcoFalke,2019-04-12T15:30:33Z,"in commit 2bc90e4e7bf7f:\n\nShould asset that the chains are different in this test to not accidentally reorg to the same chain?",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r274958037,274958037,src/test/blockfilter_index_tests.cpp
MarcoFalke,2019-04-12T15:41:59Z,"in commit ff351050968f290:\n\nWhy is it incompatible? Maybe should add a cpp comment to explain.\n\nSee also https://github.com/bitcoin/bips/blob/master/bip-0157.mediawiki#node-operation\n\n""Nodes MAY prune block data after generating and storing all filters for a block.""",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r274962598,274962598,src/init.cpp
MarcoFalke,2019-04-18T13:55:21Z,"I believe we make this `extern` in the header, so that it is not added to each obj file?",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r276673807,276673807,src/validation.h
jimpo,2019-04-19T23:38:00Z,"You can turn on the filter index and it will build in the background using the blocks on disk. This wouldn't work in pruned mode. It might be safe though to allow pruning if the block filter index tip is already within chain tip height - MIN_BLOCKS_TO_KEEP. But then we couldn't prune until the block filter index is in sync (it has its own sort of initial sync logic).\n\nNot prohibitively difficu",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277112847,277112847,src/init.cpp
jimpo,2019-04-19T23:39:03Z,"Yeah, probably a good idea.",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277112950,277112950,src/index/blockfilterindex.cpp
jimpo,2019-04-19T23:39:31Z,I don't understand.,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277113000,277113000,src/test/blockfilter_index_tests.cpp
jimpo,2019-04-19T23:40:03Z,"Yeah. This applies to all the defaults, right?",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277113041,277113041,src/validation.h
MarcoFalke,2019-04-22T14:15:47Z,I think only strings and cstrings and not POD types,https://github.com/bitcoin/bitcoin/pull/14121#discussion_r277302973,277302973,src/validation.h
MarcoFalke,2019-10-13T15:29:30Z,"@jimpo I am adding this assert, and the tests still pass. What is the point of `chainA` and `chainB`, when they are identical?\n\n```diff\ndiff --git a/src/test/blockfilter_index_tests.cpp b/src/test/blockfilter_index_tests.cpp\nindex cf87aa9303..a7eb057b05 100644\n--- a/src/test/blockfilter_index_tests.cpp\n+++ b/src/test/blockfilter_index_tests.cpp\n@@ -171,6 +171,7 @@ BOOST_FIXTURE_TEST_",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r334282663,334282663,src/test/blockfilter_index_tests.cpp
jimpo,2019-10-14T20:08:16Z,"You're totally right, good catch! Opened #17140 ",https://github.com/bitcoin/bitcoin/pull/14121#discussion_r334642521,334642521,src/test/blockfilter_index_tests.cpp
