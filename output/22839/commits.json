[
  {
    "sha": "b65a25a84666d41a0af4ad98ffadfa4ac802d1bb",
    "node_id": "C_kwDOABII59oAKGI2NWEyNWE4NDY2NmQ0MWEwYWY0YWQ5OGZmYWRmYTRhYzgwMmQxYmI",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-08-29T22:18:13Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-10-18T22:20:28Z"
      },
      "message": "log: improve addrman logging",
      "tree": {
        "sha": "2ec86085d3a08e615bf594aa55fa912f983bee10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ec86085d3a08e615bf594aa55fa912f983bee10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "113b863f0773999497f952daa6539a03a66a9de3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/113b863f0773999497f952daa6539a03a66a9de3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/113b863f0773999497f952daa6539a03a66a9de3"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 19,
      "deletions": 15
    },
    "files": [
      {
        "sha": "832c3b3cb9be62b70ebec26058e08bc7312e56a4",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=b65a25a84666d41a0af4ad98ffadfa4ac802d1bb",
        "patch": "@@ -45,21 +45,15 @@ int AddrInfo::GetTriedBucket(const uint256& nKey, const std::vector<bool>& asmap\n {\n     uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetCheapHash();\n     uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup(asmap) << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetCheapHash();\n-    int tried_bucket = hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n-    uint32_t mapped_as = GetMappedAS(asmap);\n-    LogPrint(BCLog::NET, \"IP %s mapped to AS%i belongs to tried bucket %i\\n\", ToStringIP(), mapped_as, tried_bucket);\n-    return tried_bucket;\n+    return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n int AddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src, const std::vector<bool>& asmap) const\n {\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup(asmap);\n     uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup(asmap) << vchSourceGroupKey).GetCheapHash();\n     uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetCheapHash();\n-    int new_bucket = hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n-    uint32_t mapped_as = GetMappedAS(asmap);\n-    LogPrint(BCLog::NET, \"IP %s mapped to AS%i belongs to new bucket %i\\n\", ToStringIP(), mapped_as, new_bucket);\n-    return new_bucket;\n+    return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n \n int AddrInfo::GetBucketPosition(const uint256& nKey, bool fNew, int nBucket) const\n@@ -481,6 +475,7 @@ void AddrManImpl::ClearNew(int nUBucket, int nUBucketPos)\n         assert(infoDelete.nRefCount > 0);\n         infoDelete.nRefCount--;\n         vvNew[nUBucket][nUBucketPos] = -1;\n+        LogPrint(BCLog::ADDRMAN, \"Removed %s from new[%i][%i]\\n\", infoDelete.ToString(), nUBucket, nUBucketPos);\n         if (infoDelete.nRefCount == 0) {\n             Delete(nIdDelete);\n         }\n@@ -532,6 +527,8 @@ void AddrManImpl::MakeTried(AddrInfo& info, int nId)\n         infoOld.nRefCount = 1;\n         vvNew[nUBucket][nUBucketPos] = nIdEvict;\n         nNew++;\n+        LogPrint(BCLog::ADDRMAN, \"Moved %s from tried[%i][%i] to new[%i][%i] to make space\\n\",\n+                 infoOld.ToString(), nKBucket, nKBucketPos, nUBucket, nUBucketPos);\n     }\n     assert(vvTried[nKBucket][nKBucketPos] == -1);\n \n@@ -582,17 +579,20 @@ void AddrManImpl::Good_(const CService& addr, bool test_before_evict, int64_t nT\n \n     // Will moving this address into tried evict another entry?\n     if (test_before_evict && (vvTried[tried_bucket][tried_bucket_pos] != -1)) {\n-        // Output the entry we'd be colliding with, for debugging purposes\n-        auto colliding_entry = mapInfo.find(vvTried[tried_bucket][tried_bucket_pos]);\n-        LogPrint(BCLog::ADDRMAN, \"Collision inserting element into tried table (%s), moving %s to m_tried_collisions=%d\\n\", colliding_entry != mapInfo.end() ? colliding_entry->second.ToString() : \"\", addr.ToString(), m_tried_collisions.size());\n         if (m_tried_collisions.size() < ADDRMAN_SET_TRIED_COLLISION_SIZE) {\n             m_tried_collisions.insert(nId);\n         }\n+        // Output the entry we'd be colliding with, for debugging purposes\n+        auto colliding_entry = mapInfo.find(vvTried[tried_bucket][tried_bucket_pos]);\n+        LogPrint(BCLog::ADDRMAN, \"Collision with %s while attempting to move %s to tried table. Collisions=%d\\n\",\n+                 colliding_entry != mapInfo.end() ? colliding_entry->second.ToString() : \"\",\n+                 addr.ToString(),\n+                 m_tried_collisions.size());\n     } else {\n-        LogPrint(BCLog::ADDRMAN, \"Moving %s to tried\\n\", addr.ToString());\n-\n         // move nId to the tried tables\n         MakeTried(info, nId);\n+        LogPrint(BCLog::ADDRMAN, \"Moved %s mapped to AS%i to tried[%i][%i]\\n\",\n+                 addr.ToString(), addr.GetMappedAS(m_asmap), tried_bucket, tried_bucket_pos);\n     }\n }\n \n@@ -662,6 +662,8 @@ bool AddrManImpl::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTi\n             ClearNew(nUBucket, nUBucketPos);\n             pinfo->nRefCount++;\n             vvNew[nUBucket][nUBucketPos] = nId;\n+            LogPrint(BCLog::ADDRMAN, \"Added %s mapped to AS%i to new[%i][%i]\\n\",\n+                     addr.ToString(), addr.GetMappedAS(m_asmap), nUBucket, nUBucketPos);\n         } else {\n             if (pinfo->nRefCount == 0) {\n                 Delete(nId);\n@@ -720,6 +722,7 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n             assert(it_found != mapInfo.end());\n             const AddrInfo& info{it_found->second};\n             if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30)) {\n+                LogPrint(BCLog::ADDRMAN, \"Selected %s from tried\\n\", info.ToString());\n                 return {info, info.nLastTry};\n             }\n             fChanceFactor *= 1.2;\n@@ -739,6 +742,7 @@ std::pair<CAddress, int64_t> AddrManImpl::Select_(bool newOnly) const\n             assert(it_found != mapInfo.end());\n             const AddrInfo& info{it_found->second};\n             if (insecure_rand.randbits(30) < fChanceFactor * info.GetChance() * (1 << 30)) {\n+                LogPrint(BCLog::ADDRMAN, \"Selected %s from new\\n\", info.ToString());\n                 return {info, info.nLastTry};\n             }\n             fChanceFactor *= 1.2;\n@@ -780,7 +784,7 @@ std::vector<CAddress> AddrManImpl::GetAddr_(size_t max_addresses, size_t max_pct\n \n         addresses.push_back(ai);\n     }\n-\n+    LogPrint(BCLog::ADDRMAN, \"GetAddr returned %d random addresses\\n\", addresses.size());\n     return addresses;\n }\n "
      },
      {
        "sha": "82c7e94c59ee86a9163843ec42ac305329ce12df",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b65a25a84666d41a0af4ad98ffadfa4ac802d1bb/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=b65a25a84666d41a0af4ad98ffadfa4ac802d1bb",
        "patch": "@@ -209,7 +209,7 @@ def test_addrv2_unrecognized_network(self):\n         self.test_addrv2('unrecognized network',\n             [\n                 'received: addrv2 (25 bytes)',\n-                'IP 9.9.9.9 mapped',\n+                '9.9.9.9:8333 mapped',\n                 'Added 1 addresses',\n             ],\n             bytes.fromhex("
      }
    ]
  }
]